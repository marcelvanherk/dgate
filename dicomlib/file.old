//
//  File.cpp
//
//  Created by Bruce Barton on 4/2/13.
//
//
/*
 bcb 20130402: Created this file.
*/
#include "file.hpp"
#include <sys/stat.h>
#include <sys/types.h>
#include <errno.h>
#ifndef UNIX
#include	<direct.h>
#include	<io.h>
#else // UNIX
#include <unistd.h>
#endif

int fileToBuffer(void **bufferH, const char *theFile, BOOL crlf)
{
        int             err, fd, extra;
#ifdef UNIX
        struct          stat stbuf;
#else
#ifdef _fstat64
        struct          _stat64 stbuf;
#else
        struct          _stat32 stbuf;
#endif
#endif
        off_t		rSize;
// Clear any old errors
        errno = 0;
// Check for a pointer to a null.
        if( bufferH == NULL || *bufferH != NULL)
        {
                return INV_HANDLE;
        }
// How much to add to the buffer.
        extra = 1;
        if(crlf) extra = 3;
// Get the file
#ifdef _sopen_s // The newest Windows version
        if (_sopen_s( &fd, theFile, _O_RDONLY | _O_BINARY) != 0)return ERR_OPEN;//Errno set by _sopen_s
fprintf(stderr, "have _sopen_s");//delme
#else
#ifdef _open // The newer Windows version
        if ((fd = _open(theFile, _O_RDONLY | _O_BINARY)) == -1)return ERR_OPEN;//Errno set by _open
fprintf(stderr, "have _open");//delme
#else // Old faithful.
        if ((fd = open(theFile, O_RDONLY)) == -1)return ERR_OPEN;//Errno set by open
fprintf(stderr, "have open");//delme
#endif
#endif
// Get the file info.
#ifdef UNIX
        if (fstat(fd, &stbuf) != 0)
#else
#ifdef _fstat64
        if (_fstat64(fd, &stbuf) != 0)
#else
        if (_fstat32(fd, &stbuf) != 0)
#endif
#endif
        {
                err = errno;
                close(fd);// May change errno.
                errno = err;
                return ERR_FSTAB;
        }
// Check for a regular file or link.
#ifdef S_IFLNK
        if ((((stbuf.st_mode) & S_IFMT) != S_IFREG) && ((stbuf.st_mode & S_IFMT) != S_IFLNK))
#else
        if (((stbuf.st_mode) & S_IFMT) != S_IFREG)
#endif
        {
                close(fd);
                errno = EISDIR;        
                return ERR_FILE_TYPE;
        }
// Check file size
        if (stbuf.st_size <= 0)
        {
                close(fd);
                return ERR_SIZE; //Leave errno at 0 for 0 file size.
        }
        if (stbuf.st_size + extra > INT_MAX)
        {
                close(fd);
                errno = EFBIG;
                return ERR_SIZE;
        }
// Make the buffer.
        *bufferH = (char*)malloc(stbuf.st_size + extra);
        if (!bufferH)
        {
                err = errno;
                close(fd);// May change errno.
                errno = err;
                return ERR_ALLOC;
        }
// Read it into memory.
fprintf(stderr, "stbuf.st_size is %d\n" ,stbuf.st_size);//delme
        rSize =  stbuf.st_size;
fprintf(stderr, "rSize %d, stbuf.st_size %d\n" ,rSize,stbuf.st_size);//delme
        rSize = read(fd, *bufferH,rSize);
        if(rSize  != stbuf.st_size)
        {
fprintf(stderr, "read %d, stbuf.st_size is %d\n" ,rSize,stbuf.st_size);//delme
                err = errno;
                close(fd);// May change errno.
                free(*bufferH);
                *bufferH = NULL;
                errno = err;
                return ERR_READ;
        }
// Done with it.
        close(fd);// Will set errno if fails.
// Make a clean CR/LF at the end and a zero to terminated string.
        if(crlf)
        {
                while(rSize > 0)
                {
                        if(((char *) *bufferH)[rSize - 1] != '\r' &&
                           ((char *) *bufferH)[rSize - 1] != '\n' &&
                           ((char *) *bufferH)[rSize - 1] != '\0')break;
                        rSize--;
                }
                ((char *) *bufferH)[rSize++] = '\r';
                ((char *) *bufferH)[rSize++] = '\n';
        }
        ((char *) *bufferH)[rSize]   = '\0';// Always ends in zero.
        return rSize & INT_MAX;
}

int fileToBufferWithErr(void **bufferH, const char *theFile, char *errorBuf, int errSize, BOOL crlf)
{
// Check for a pointer to a null.
        if( errorBuf == NULL ) return 0;
        errorBuf[0] = 0; //Clear any old errors.
        int fSize = fileToBuffer(bufferH, theFile, crlf);
        if (fSize <= 0)// Fatal errors
        {
                switch (fSize)
                {
                        case INV_HANDLE: strcpylim( errorBuf, "Invalid handle\n", errSize);
                                return 0;
                        case ERR_OPEN: snprintf( errorBuf, errSize,
                                        "Can not open the needed file %s: %s\n",
                                        theFile, strerror(errno));
                                return 0;
                        case ERR_FSTAB: snprintf( errorBuf, errSize,
                                        "Can not get the size of %s: %s\n",
                                        theFile, strerror(errno));
                                return 0;
                        case ERR_FILE_TYPE: snprintf( errorBuf, errSize,
                                        "%s is not a file", theFile);
                                return 0;
                        case ERR_ALLOC: snprintf( errorBuf, errSize,
                                        "Memory allocation error: %s", strerror(errno));
                                return 0;
                        case ERR_READ: snprintf( errorBuf, errSize,
                                        "Error reading file %s: %s",
                                        theFile, strerror(errno));
                                return 0;
                        case ERR_SIZE:if (errno == 0)
                                {
                                        snprintf( errorBuf, errSize,
                                                "The file %s is empty\n",
                                                theFile);
                                        return 0;
                                }
                                if (errno == EFBIG)
                                {
                                        snprintf( errorBuf, errSize,
                                                "The file %s is to big\n",
                                                theFile);
                                        return 0;
                                        
                                }
                        default: strcpylim( errorBuf, "Unknown error.\n", errSize );
                                return 0;
                }
        }
        if (errno != 0)snprintf( errorBuf, errSize,
                               "Error while closing %s: %s",
                               theFile, strerror(errno));
        return fSize;
}

int decommentBuffer(char *pSrc, int bSize)
{
        // Get rid of all comments within asterick slash and
        // replace all LF by CR, and all '\t' by ' ' with no doubles
        char *pDest;
        int curr = 0;
        
        pDest = pSrc;
        while (curr<bSize)
        {
                switch (pSrc[curr])
                {
                        case '\\':
                                *pDest++ = pSrc[curr++];//Copy the backslash
                                *pDest++ = pSrc[curr];//Copy whats next
                                break;
                        case '\"':
                                *pDest++ = pSrc[curr++];// Save the first quote.
                                // Save everything until the next quote.
                                while(curr < bSize)
                                {
                                        if(pSrc[curr] == '\"')
                                        {
                                                *pDest++ = pSrc[curr];// Save the last quote.
                                                break;
                                        }
                                        //Copy the backslash and what is next without test.
                                        if(pSrc[curr] == '\\') *pDest++ = pSrc[curr++];
                                        *pDest++ = pSrc[curr++];
                                }
                                break;
                        case '\n':
                        case '\r':
                                if (pDest != pSrc && pDest[-1] != '\r') *pDest++ = '\r';//No doubles or leading.
                                break;
                        case ' ':
                        case '\t'://No doubles or spaces before a return.
                                if (pDest != pSrc && pDest[-1] != ' ' &&
                                    pSrc[curr + 1] != '\r' && pSrc[curr + 1] != '\n') *pDest++ = ' ';
                                break;
                        case '/':
                                if (pSrc[curr + 1] == '*')
                                { // Found the start of a comment
                                        curr += 2;
                                        curr += commentSize(&pSrc[curr], bSize - curr);
                                        break;
                                }
                                if (pSrc[curr + 1] != '/')//A comment will fall through.
                                {
                                        *pDest++ = pSrc[curr];//Not a comment, copy and next.
                                        break;
                                }
                        case ';':
                        case '#'://Comment line.
                                while (curr<bSize && pSrc[curr] != '\r' && pSrc[curr] != '\n') curr++;//Look for the end of the line.
                                //delme ?                                if (pDest != pBuffer && pDest[-1] != '\r') *pDest++ = '\r';
                                break;
                        default:
                                *pDest++ = pSrc[curr];
                                break;
                }
                curr++;
        }
        *pDest = 0;
        return (pDest - pSrc) & INT_MAX;
}

int commentSize( const char *startOfComments, int maxSize)
{
        int curr = 0;
        
        while (curr < maxSize)
                if (startOfComments[curr++] == '*' &&
                        curr < maxSize && (startOfComments[curr++] == '/')) break;
        if (curr < maxSize) return curr;
        return maxSize;
}
