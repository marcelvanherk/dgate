; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	C:\quirt\comps\exe\dgate\sqlite3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05JJGFHFCC@aaada?$AA@			; `string'
PUBLIC	??_C@_0BA@HAFLJCI@CREATE?5TRIGGER?5?$AA@	; `string'
PUBLIC	??_C@_07DIDNFGDE@trigger?$AA@			; `string'
PUBLIC	??_C@_05MNCHLHCA@UTF16?$AA@			; `string'
PUBLIC	??_C@_06KNDPGIKI@UTF?916?$AA@			; `string'
PUBLIC	??_C@_07JDFIEPAG@UTF16be?$AA@			; `string'
PUBLIC	??_C@_08HGGOPCBI@UTF?916be?$AA@			; `string'
PUBLIC	??_C@_07JJMGGCAM@UTF16le?$AA@			; `string'
PUBLIC	??_C@_08HMPANPBC@UTF?916le?$AA@			; `string'
PUBLIC	??_C@_04OOMJJNCF@UTF8?$AA@			; `string'
PUBLIC	??_C@_05EGJIMALK@UTF?98?$AA@			; `string'
PUBLIC	??_C@_0BN@JKHLHJNK@wrong?5?$CD?5of?5entries?5in?5index?5?$AA@ ; `string'
PUBLIC	??_C@_0BF@JGBLFHJL@?5missing?5from?5index?5?$AA@ ; `string'
PUBLIC	??_C@_06DHEAJPAE@rowid?5?$AA@			; `string'
PUBLIC	??_C@_02MFDMBIJM@ok?$AA@			; `string'
PUBLIC	??_C@_0BB@KLHJNGLH@read_uncommitted?$AA@	; `string'
PUBLIC	??_C@_0O@FCIFIHH@omit_readlock?$AA@		; `string'
PUBLIC	??_C@_0BA@OHBCLCAL@writable_schema?$AA@		; `string'
PUBLIC	??_C@_0BJ@KLIMENGM@ignore_check_constraints?$AA@ ; `string'
PUBLIC	??_C@_09MLJLLBEB@fullfsync?$AA@			; `string'
PUBLIC	??_C@_0BD@LEFOEGBK@legacy_file_format?$AA@	; `string'
PUBLIC	??_C@_0BH@CMLDBHJP@empty_result_callbacks?$AA@	; `string'
PUBLIC	??_C@_0O@PEBBJPHD@count_changes?$AA@		; `string'
PUBLIC	??_C@_0BD@BFIEDLEP@short_column_names?$AA@	; `string'
PUBLIC	??_C@_0BC@CBBNFKC@full_column_names?$AA@	; `string'
PUBLIC	_sqlite3_clear_bindings
PUBLIC	_sqlite3_prepare16_v2
PUBLIC	_sqlite3_prepare_v2
PUBLIC	_sqlite3_overload_function
PUBLIC	_sqlite3_vmprintf
PUBLIC	_sqlite3_value_type
PUBLIC	_sqlite3_value_text16le
PUBLIC	_sqlite3_value_text16be
PUBLIC	_sqlite3_value_text16
PUBLIC	_sqlite3_value_text
PUBLIC	_sqlite3_value_numeric_type
PUBLIC	_sqlite3_value_int64
PUBLIC	_sqlite3_value_int
PUBLIC	_sqlite3_value_double
PUBLIC	_sqlite3_value_bytes16
PUBLIC	_sqlite3_value_bytes
PUBLIC	_sqlite3_value_blob
PUBLIC	_sqlite3_user_data
PUBLIC	_sqlite3_update_hook
PUBLIC	_sqlite3_transfer_bindings
PUBLIC	_sqlite3_trace
PUBLIC	_sqlite3_total_changes
PUBLIC	_sqlite3_thread_cleanup
PUBLIC	_sqlite3_step
PUBLIC	_sqlite3_snprintf
PUBLIC	_sqlite3_set_auxdata
PUBLIC	_sqlite3_set_authorizer
PUBLIC	_sqlite3_rollback_hook
PUBLIC	_sqlite3_result_value
PUBLIC	_sqlite3_result_text16le
PUBLIC	_sqlite3_result_text16be
PUBLIC	_sqlite3_result_text16
PUBLIC	_sqlite3_result_text
PUBLIC	_sqlite3_result_null
PUBLIC	_sqlite3_result_int64
PUBLIC	_sqlite3_result_int
PUBLIC	_sqlite3_result_error16
PUBLIC	_sqlite3_result_error
PUBLIC	_sqlite3_result_double
PUBLIC	_sqlite3_result_blob
PUBLIC	_sqlite3_reset
PUBLIC	_sqlite3_realloc
PUBLIC	_sqlite3_progress_handler
PUBLIC	_sqlite3_profile
PUBLIC	_sqlite3_prepare16
PUBLIC	_sqlite3_prepare
PUBLIC	_sqlite3_open16
PUBLIC	_sqlite3_open
PUBLIC	_sqlite3_mprintf
PUBLIC	_sqlite3_malloc
PUBLIC	_sqlite3_libversion_number
PUBLIC	_sqlite3_libversion
PUBLIC	_sqlite3_last_insert_rowid
PUBLIC	_sqlite3_interrupt
PUBLIC	_sqlite3_get_table
PUBLIC	_sqlite3_get_auxdata
PUBLIC	_sqlite3_get_autocommit
PUBLIC	_sqlite3_free_table
PUBLIC	_sqlite3_free
PUBLIC	_sqlite3_finalize
PUBLIC	_sqlite3_expired
PUBLIC	_sqlite3_exec
PUBLIC	_sqlite3_errmsg16
PUBLIC	_sqlite3_errmsg
PUBLIC	_sqlite3_errcode
PUBLIC	_sqlite3_enable_shared_cache
PUBLIC	_sqlite3_declare_vtab
PUBLIC	_sqlite3_db_handle
PUBLIC	_sqlite3_data_count
PUBLIC	_sqlite3_create_module
PUBLIC	_sqlite3_create_function16
PUBLIC	_sqlite3_create_function
PUBLIC	_sqlite3_create_collation16
PUBLIC	_sqlite3_create_collation
PUBLIC	_sqlite3_complete16
PUBLIC	_sqlite3_complete
PUBLIC	_sqlite3_commit_hook
PUBLIC	_sqlite3_column_value
PUBLIC	_sqlite3_column_type
PUBLIC	_sqlite3_column_text16
PUBLIC	_sqlite3_column_text
PUBLIC	_sqlite3_column_name16
PUBLIC	_sqlite3_column_name
PUBLIC	_sqlite3_column_int64
PUBLIC	_sqlite3_column_int
PUBLIC	_sqlite3_column_double
PUBLIC	_sqlite3_column_decltype16
PUBLIC	_sqlite3_column_decltype
PUBLIC	_sqlite3_column_count
PUBLIC	_sqlite3_column_bytes16
PUBLIC	_sqlite3_column_bytes
PUBLIC	_sqlite3_column_blob
PUBLIC	_sqlite3_collation_needed16
PUBLIC	_sqlite3_collation_needed
PUBLIC	_sqlite3_close
PUBLIC	_sqlite3_changes
PUBLIC	_sqlite3_busy_timeout
PUBLIC	_sqlite3_busy_handler
PUBLIC	_sqlite3_bind_value
PUBLIC	_sqlite3_bind_text16
PUBLIC	_sqlite3_bind_text
PUBLIC	_sqlite3_bind_parameter_name
PUBLIC	_sqlite3_bind_parameter_index
PUBLIC	_sqlite3_bind_parameter_count
PUBLIC	_sqlite3_bind_null
PUBLIC	_sqlite3_bind_int64
PUBLIC	_sqlite3_bind_int
PUBLIC	_sqlite3_bind_double
PUBLIC	_sqlite3_bind_blob
PUBLIC	_sqlite3_aggregate_count
PUBLIC	_sqlite3_aggregate_context
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_03CHOBFJAH@avg?$AA@			; `string'
PUBLIC	??_C@_05KBOMEDGA@total?$AA@			; `string'
PUBLIC	??_C@_03CFFIJAMA@sum?$AA@			; `string'
PUBLIC	??_C@_0P@BJKPICNH@load_extension?$AA@		; `string'
PUBLIC	??_C@_08OAGHJJOG@zeroblob?$AA@			; `string'
PUBLIC	??_C@_04GDOMMDLP@trim?$AA@			; `string'
PUBLIC	??_C@_05FCOGDJML@rtrim?$AA@			; `string'
PUBLIC	??_C@_05GLDKFKCA@ltrim?$AA@			; `string'
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_0O@MLEKHAGK@total_changes?$AA@		; `string'
PUBLIC	??_C@_07HFLFHMNL@changes?$AA@			; `string'
PUBLIC	??_C@_0BC@EKKKCJJE@last_insert_rowid?$AA@	; `string'
PUBLIC	??_C@_05JHEGFHLM@quote?$AA@			; `string'
PUBLIC	??_C@_0P@IPDPEBN@sqlite_version?$AA@		; `string'
PUBLIC	??_C@_06LLGGGFDC@nullif?$AA@			; `string'
PUBLIC	??_C@_0L@IDMFPHDO@randomblob?$AA@		; `string'
PUBLIC	??_C@_06NLFCANPD@random?$AA@			; `string'
PUBLIC	??_C@_06FAHGEKJN@ifnull?$AA@			; `string'
PUBLIC	??_C@_03IJNDAFDK@hex?$AA@			; `string'
PUBLIC	??_C@_08FNGHHBID@coalesce?$AA@			; `string'
PUBLIC	??_C@_05IPJEPLHL@lower?$AA@			; `string'
PUBLIC	??_C@_05NECKJAMC@upper?$AA@			; `string'
PUBLIC	??_C@_05MIMAKCN@round?$AA@			; `string'
PUBLIC	??_C@_03BCGAIFPO@abs?$AA@			; `string'
PUBLIC	??_C@_06DAHFIGOC@substr?$AA@			; `string'
PUBLIC	??_C@_06IJDLPEM@length?$AA@			; `string'
PUBLIC	??_C@_06NDJPCPHC@typeof?$AA@			; `string'
PUBLIC	??_C@_03LJAEFNNE@max?$AA@			; `string'
PUBLIC	??_C@_03KLIPLJLL@min?$AA@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5?$AA@			; `string'
PUBLIC	??_C@_0BG@DKJJOMDK@sqlite_rename_trigger?$AA@	; `string'
PUBLIC	??_C@_0BE@JHJAJICL@sqlite_rename_table?$AA@	; `string'
PUBLIC	??_C@_01HIHLOKLC@1?$AA@				; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_06ICNNEOIM@ToReal?$AA@			; `string'
PUBLIC	??_C@_05CNEGLJEO@ToInt?$AA@			; `string'
PUBLIC	??_C@_09IAEPJEPI@ToNumeric?$AA@			; `string'
PUBLIC	??_C@_06LCIJGAA@ToBlob?$AA@			; `string'
PUBLIC	??_C@_06JMHBLLIK@ToText?$AA@			; `string'
PUBLIC	??_C@_0M@HFPJJKAF@NotUsed_137?$AA@		; `string'
PUBLIC	??_C@_0M@GMOCKLEE@NotUsed_136?$AA@		; `string'
PUBLIC	??_C@_07HJJPPOKN@NullRow?$AA@			; `string'
PUBLIC	??_C@_05JDGHEPJG@Found?$AA@			; `string'
PUBLIC	??_C@_07HGAGCIAF@MemNull?$AA@			; `string'
PUBLIC	??_C@_07MOHBHIMB@MemMove?$AA@			; `string'
PUBLIC	??_C@_07KDKHCOMM@VCreate?$AA@			; `string'
PUBLIC	??_C@_07NHABAPID@VUpdate?$AA@			; `string'
PUBLIC	??_C@_06CLFNNGGK@VBegin?$AA@			; `string'
PUBLIC	??_C@_06KJNIJPEO@MoveGe?$AA@			; `string'
PUBLIC	??_C@_06MAOEIKCJ@Rewind?$AA@			; `string'
PUBLIC	??_C@_07BJNJNDIK@HexBlob?$AA@			; `string'
PUBLIC	??_C@_04PHKLBGME@Real?$AA@			; `string'
PUBLIC	??_C@_08OOLDHECE@MemStore?$AA@			; `string'
PUBLIC	??_C@_04HOFOMOEI@Blob?$AA@			; `string'
PUBLIC	??_C@_04KHKKIIL@Null?$AA@			; `string'
PUBLIC	??_C@_0O@MHKNMBPC@OpenEphemeral?$AA@		; `string'
PUBLIC	??_C@_0L@PKPPHKBP@OpenPseudo?$AA@		; `string'
PUBLIC	??_C@_09EFJEPADK@IfMemZero?$AA@			; `string'
PUBLIC	??_C@_07EMCFMDDO@Explain?$AA@			; `string'
PUBLIC	??_C@_0N@FEAPPFEN@LoadAnalysis?$AA@		; `string'
PUBLIC	??_C@_08PGPGCKGP@ForceInt?$AA@			; `string'
PUBLIC	??_C@_0L@LIFFPDNM@ReadCookie?$AA@		; `string'
PUBLIC	??_C@_07BDCAJABG@Destroy?$AA@			; `string'
PUBLIC	??_C@_06CPFCODOD@Insert?$AA@			; `string'
PUBLIC	??_C@_08FGAGNLCM@Distinct?$AA@			; `string'
PUBLIC	??_C@_09ENCBCCAM@IdxInsert?$AA@			; `string'
PUBLIC	??_C@_04MDFHGMOB@Next?$AA@			; `string'
PUBLIC	??_C@_0L@NCJBPLPE@ContextPop?$AA@		; `string'
PUBLIC	??_C@_08JBEDGDCN@VDestroy?$AA@			; `string'
PUBLIC	??_C@_07OKDOHLDO@VFilter?$AA@			; `string'
PUBLIC	??_C@_0M@MEGKBOMN@Transaction?$AA@		; `string'
PUBLIC	??_C@_08NKJEFJJA@AbsValue?$AA@			; `string'
PUBLIC	??_C@_0O@GDDDBLCD@SetNumColumns?$AA@		; `string'
PUBLIC	??_C@_04NFKKIBGI@Pull?$AA@			; `string'
PUBLIC	??_C@_07NOMHFNIB@AggStep?$AA@			; `string'
PUBLIC	??_C@_0N@NKEHNBGM@VerifyCookie?$AA@		; `string'
PUBLIC	??_C@_06PGFEFDLP@MoveLt?$AA@			; `string'
PUBLIC	??_C@_05PFBFPBD@IdxGT?$AA@			; `string'
PUBLIC	??_C@_05MDNHABIA@Clear?$AA@			; `string'
PUBLIC	??_C@_08GMLBHKDC@FifoRead?$AA@			; `string'
PUBLIC	??_C@_09FDKNKOOK@TableLock?$AA@			; `string'
PUBLIC	??_C@_04BNGNMAK@Goto?$AA@			; `string'
PUBLIC	??_C@_03LHMIDMME@Dup?$AA@			; `string'
PUBLIC	??_C@_08FCKHNOBN@AggFinal?$AA@			; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	??_C@_0L@PGPMFKDB@MakeRecord?$AA@		; `string'
PUBLIC	??_C@_09ELPHDPAO@DropTable?$AA@			; `string'
PUBLIC	??_C@_05DALJIPE@IfNot?$AA@			; `string'
PUBLIC	??_C@_07KGFHIBD@String8?$AA@			; `string'
PUBLIC	??_C@_06OBLNEDKN@BitNot?$AA@			; `string'
PUBLIC	??_C@_06KFINHAKP@MoveLe?$AA@			; `string'
PUBLIC	??_C@_08BIJOEGAJ@Negative?$AA@			; `string'
PUBLIC	??_C@_06OBCEMCJB@Vacuum?$AA@			; `string'
PUBLIC	??_C@_06ODAFHOMO@Concat?$AA@			; `string'
PUBLIC	??_C@_09DPOHBCHJ@Remainder?$AA@			; `string'
PUBLIC	??_C@_06JKMEHOIB@Divide?$AA@			; `string'
PUBLIC	??_C@_08EOBDLMOI@Multiply?$AA@			; `string'
PUBLIC	??_C@_08DLEJPBEP@Subtract?$AA@			; `string'
PUBLIC	??_C@_03LDFMNCOE@Add?$AA@			; `string'
PUBLIC	??_C@_0L@DHHFIOFJ@ShiftRight?$AA@		; `string'
PUBLIC	??_C@_09IIGOLNPP@ShiftLeft?$AA@			; `string'
PUBLIC	??_C@_05BKBNAGEF@BitOr?$AA@			; `string'
PUBLIC	??_C@_06PCNOCLJN@BitAnd?$AA@			; `string'
PUBLIC	??_C@_09PDNFOMPO@IdxDelete?$AA@			; `string'
PUBLIC	??_C@_02GNOBCCEK@Ge?$AA@			; `string'
PUBLIC	??_C@_02DCGNOOLL@Lt?$AA@			; `string'
PUBLIC	??_C@_02GBLEMNKL@Le?$AA@			; `string'
PUBLIC	??_C@_02DODIABFK@Gt?$AA@			; `string'
PUBLIC	??_C@_02EAMLCBHB@Eq?$AA@			; `string'
PUBLIC	??_C@_02GCDABJMF@Ne?$AA@			; `string'
PUBLIC	??_C@_07HICACDPL@NotNull?$AA@			; `string'
PUBLIC	??_C@_06NBBMPCN@IsNull?$AA@			; `string'
PUBLIC	??_C@_05FMIIHMAD@IdxGE?$AA@			; `string'
PUBLIC	??_C@_09KDDJLBNF@DropIndex?$AA@			; `string'
PUBLIC	??_C@_0M@JKNINGPB@DropTrigger?$AA@		; `string'
PUBLIC	??_C@_03LOMLFHDC@And?$AA@			; `string'
PUBLIC	??_C@_02GGHBPHGE@Or?$AA@			; `string'
PUBLIC	??_C@_0M@CKMEEPPD@ContextPush?$AA@		; `string'
PUBLIC	??_C@_08HNHIOOFI@Callback?$AA@			; `string'
PUBLIC	??_C@_09ILKOCOKG@FifoWrite?$AA@			; `string'
PUBLIC	??_C@_0L@NDDNCBN@ResetCount?$AA@		; `string'
PUBLIC	??_C@_0L@BLCAOEHN@MakeIdxRec?$AA@		; `string'
PUBLIC	??_C@_08KLKOBEJ@IdxRowid?$AA@			; `string'
PUBLIC	??_C@_0L@POHPJECG@IncrVacuum?$AA@		; `string'
PUBLIC	??_C@_04DKKAEHDH@Last?$AA@			; `string'
PUBLIC	??_C@_0M@BDPOJHGL@CreateTable?$AA@		; `string'
PUBLIC	??_C@_07DOIHNMAE@VColumn?$AA@			; `string'
PUBLIC	??_C@_04PHIBHIIF@Prev?$AA@			; `string'
PUBLIC	??_C@_06JBNCFEEC@MemInt?$AA@			; `string'
PUBLIC	??_C@_07EDADKEAH@Integer?$AA@			; `string'
PUBLIC	??_C@_05DLHJCIPI@Gosub?$AA@			; `string'
PUBLIC	??_C@_07JMCDFMGJ@MemIncr?$AA@			; `string'
PUBLIC	??_C@_09HMMGFEAA@NotExists?$AA@			; `string'
PUBLIC	??_C@_04KGLMKACB@Push?$AA@			; `string'
PUBLIC	??_C@_06LJFJMLCE@MemMax?$AA@			; `string'
PUBLIC	??_C@_07OHPACBNN@RowData?$AA@			; `string'
PUBLIC	??_C@_09NLAGBMPK@Statement?$AA@			; `string'
PUBLIC	??_C@_06JHIJIKD@AddImm?$AA@			; `string'
PUBLIC	??_C@_05DAELAPC@IdxLT?$AA@			; `string'
PUBLIC	??_C@_05KEGGNBBF@Rowid?$AA@			; `string'
PUBLIC	??_C@_04NIFKAFLK@Halt?$AA@			; `string'
PUBLIC	??_C@_09LLJOBHN@MustBeInt?$AA@			; `string'
PUBLIC	??_C@_05DPPJJBMK@Int64?$AA@			; `string'
PUBLIC	??_C@_08MDBAGECB@NotFound?$AA@			; `string'
PUBLIC	??_C@_08HBKIHNI@IsUnique?$AA@			; `string'
PUBLIC	??_C@_0M@PLDABJLA@CreateIndex?$AA@		; `string'
PUBLIC	??_C@_05LGELBCGM@Close?$AA@			; `string'
PUBLIC	??_C@_05JABEJFFA@VOpen?$AA@			; `string'
PUBLIC	??_C@_0M@IPJMJJPI@ParseSchema?$AA@		; `string'
PUBLIC	??_C@_0N@KGPEGHPK@RealAffinity?$AA@		; `string'
PUBLIC	??_C@_06ENNEIMBA@String?$AA@			; `string'
PUBLIC	??_C@_08DMMJCAML@Variable?$AA@			; `string'
PUBLIC	??_C@_08HOGPBFDI@IfMemNeg?$AA@			; `string'
PUBLIC	??_C@_08FEDJPMPH@NewRowid?$AA@			; `string'
PUBLIC	??_C@_06HCFIKKEA@Return?$AA@			; `string'
PUBLIC	??_C@_04NBOPPMHE@Noop?$AA@			; `string'
PUBLIC	??_C@_08PHKOHANG@Function?$AA@			; `string'
PUBLIC	??_C@_04DJANFKGA@Sort?$AA@			; `string'
PUBLIC	??_C@_0M@KCIGPGBI@IntegrityCk?$AA@		; `string'
PUBLIC	??_C@_0L@BPKAOEDK@AutoCommit?$AA@		; `string'
PUBLIC	??_C@_03KNKIDPAC@Not?$AA@			; `string'
PUBLIC	??_C@_06GDNCIOGJ@Expire?$AA@			; `string'
PUBLIC	??_C@_08FJFCCPFB@OpenRead?$AA@			; `string'
PUBLIC	??_C@_07MCEFGNMJ@CollSeq?$AA@			; `string'
PUBLIC	??_C@_06MIMNHDEF@VRowid?$AA@			; `string'
PUBLIC	??_C@_03HJACNKKK@Pop?$AA@			; `string'
PUBLIC	??_C@_02EMFCFMID@If?$AA@			; `string'
PUBLIC	??_C@_09FPCAPNBB@OpenWrite?$AA@			; `string'
PUBLIC	??_C@_06JIHNENAH@RowKey?$AA@			; `string'
PUBLIC	??_C@_06PKABLMFO@MoveGt?$AA@			; `string'
PUBLIC	??_C@_08DOCONEG@Sequence?$AA@			; `string'
PUBLIC	??_C@_08ONJAGHBH@IfMemPos?$AA@			; `string'
PUBLIC	??_C@_09FEDANMPL@SetCookie?$AA@			; `string'
PUBLIC	??_C@_06FFIACGFC@Column?$AA@			; `string'
PUBLIC	??_C@_05GOGANBLF@VNext?$AA@			; `string'
PUBLIC	??_C@_07PDGDNFMF@MemLoad?$AA@			; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_0N@DJJJGBGD@current_date?$AA@		; `string'
PUBLIC	??_C@_0BC@DDICBCEN@current_timestamp?$AA@	; `string'
PUBLIC	??_C@_0N@IPDKEGPB@current_time?$AA@		; `string'
PUBLIC	??_C@_08EPGBJPHJ@strftime?$AA@			; `string'
PUBLIC	??_C@_08FGNPMIBK@datetime?$AA@			; `string'
PUBLIC	??_C@_04CLCEDBPF@time?$AA@			; `string'
PUBLIC	??_C@_04JNIHBGGH@date?$AA@			; `string'
PUBLIC	??_C@_09BPOICPEH@julianday?$AA@			; `string'
PUBLIC	_sqlite3_mallocHasFailed
PUBLIC	_sqlite3one
PUBLIC	_sqlite3UtfTrans1
PUBLIC	_sqlite3UpperToLower
PUBLIC	_sqlite3OpcodeNames
PUBLIC	_sqlite3_os_trace
PUBLIC	_sqlite3_os_type
PUBLIC	_sqlite3_apis
PUBLIC	_sqlite3IsIdChar
PUBLIC	_sqlite3_version
PUBLIC	_sqlite3_io_trace
PUBLIC	_sqlite3_temp_directory
_BSS	SEGMENT
_sqlite3_mallocHasFailed DD 01H DUP (?)
_sqlite3_os_trace DD 01H DUP (?)
_sqlite3_os_type DD 01H DUP (?)
_inMutex DD	01H DUP (?)
?keyInit@?1??sqlite3WinThreadSpecificData@@9@9 DD 01H DUP (?) ; `sqlite3WinThreadSpecificData'::`2'::keyInit
_nAutoExtension DD 01H DUP (?)
_aAutoExtension DD 01H DUP (?)
_sqlite3_io_trace DD 01H DUP (?)
_sqlite3_temp_directory DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_05JJGFHFCC@aaada?$AA@
CONST	SEGMENT
??_C@_05JJGFHFCC@aaada?$AA@ DB 'aaada', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HAFLJCI@CREATE?5TRIGGER?5?$AA@
CONST	SEGMENT
??_C@_0BA@HAFLJCI@CREATE?5TRIGGER?5?$AA@ DB 'CREATE TRIGGER ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIDNFGDE@trigger?$AA@
CONST	SEGMENT
??_C@_07DIDNFGDE@trigger?$AA@ DB 'trigger', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNCHLHCA@UTF16?$AA@
CONST	SEGMENT
??_C@_05MNCHLHCA@UTF16?$AA@ DB 'UTF16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KNDPGIKI@UTF?916?$AA@
CONST	SEGMENT
??_C@_06KNDPGIKI@UTF?916?$AA@ DB 'UTF-16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JDFIEPAG@UTF16be?$AA@
CONST	SEGMENT
??_C@_07JDFIEPAG@UTF16be?$AA@ DB 'UTF16be', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGGOPCBI@UTF?916be?$AA@
CONST	SEGMENT
??_C@_08HGGOPCBI@UTF?916be?$AA@ DB 'UTF-16be', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJMGGCAM@UTF16le?$AA@
CONST	SEGMENT
??_C@_07JJMGGCAM@UTF16le?$AA@ DB 'UTF16le', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HMPANPBC@UTF?916le?$AA@
CONST	SEGMENT
??_C@_08HMPANPBC@UTF?916le?$AA@ DB 'UTF-16le', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OOMJJNCF@UTF8?$AA@
CONST	SEGMENT
??_C@_04OOMJJNCF@UTF8?$AA@ DB 'UTF8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EGJIMALK@UTF?98?$AA@
CONST	SEGMENT
??_C@_05EGJIMALK@UTF?98?$AA@ DB 'UTF-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JKHLHJNK@wrong?5?$CD?5of?5entries?5in?5index?5?$AA@
CONST	SEGMENT
??_C@_0BN@JKHLHJNK@wrong?5?$CD?5of?5entries?5in?5index?5?$AA@ DB 'wrong #'
	DB	' of entries in index ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JGBLFHJL@?5missing?5from?5index?5?$AA@
CONST	SEGMENT
??_C@_0BF@JGBLFHJL@?5missing?5from?5index?5?$AA@ DB ' missing from index '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHEAJPAE@rowid?5?$AA@
CONST	SEGMENT
??_C@_06DHEAJPAE@rowid?5?$AA@ DB 'rowid ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MFDMBIJM@ok?$AA@
CONST	SEGMENT
??_C@_02MFDMBIJM@ok?$AA@ DB 'ok', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KLHJNGLH@read_uncommitted?$AA@
CONST	SEGMENT
??_C@_0BB@KLHJNGLH@read_uncommitted?$AA@ DB 'read_uncommitted', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FCIFIHH@omit_readlock?$AA@
CONST	SEGMENT
??_C@_0O@FCIFIHH@omit_readlock?$AA@ DB 'omit_readlock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OHBCLCAL@writable_schema?$AA@
CONST	SEGMENT
??_C@_0BA@OHBCLCAL@writable_schema?$AA@ DB 'writable_schema', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KLIMENGM@ignore_check_constraints?$AA@
CONST	SEGMENT
??_C@_0BJ@KLIMENGM@ignore_check_constraints?$AA@ DB 'ignore_check_constra'
	DB	'ints', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09MLJLLBEB@fullfsync?$AA@
CONST	SEGMENT
??_C@_09MLJLLBEB@fullfsync?$AA@ DB 'fullfsync', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LEFOEGBK@legacy_file_format?$AA@
CONST	SEGMENT
??_C@_0BD@LEFOEGBK@legacy_file_format?$AA@ DB 'legacy_file_format', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CMLDBHJP@empty_result_callbacks?$AA@
CONST	SEGMENT
??_C@_0BH@CMLDBHJP@empty_result_callbacks?$AA@ DB 'empty_result_callbacks'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PEBBJPHD@count_changes?$AA@
CONST	SEGMENT
??_C@_0O@PEBBJPHD@count_changes?$AA@ DB 'count_changes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BFIEDLEP@short_column_names?$AA@
CONST	SEGMENT
??_C@_0BD@BFIEDLEP@short_column_names?$AA@ DB 'short_column_names', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CBBNFKC@full_column_names?$AA@
CONST	SEGMENT
??_C@_0BC@CBBNFKC@full_column_names?$AA@ DB 'full_column_names', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CHOBFJAH@avg?$AA@
CONST	SEGMENT
??_C@_03CHOBFJAH@avg?$AA@ DB 'avg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KBOMEDGA@total?$AA@
CONST	SEGMENT
??_C@_05KBOMEDGA@total?$AA@ DB 'total', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFFIJAMA@sum?$AA@
CONST	SEGMENT
??_C@_03CFFIJAMA@sum?$AA@ DB 'sum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BJKPICNH@load_extension?$AA@
CONST	SEGMENT
??_C@_0P@BJKPICNH@load_extension?$AA@ DB 'load_extension', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OAGHJJOG@zeroblob?$AA@
CONST	SEGMENT
??_C@_08OAGHJJOG@zeroblob?$AA@ DB 'zeroblob', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDOMMDLP@trim?$AA@
CONST	SEGMENT
??_C@_04GDOMMDLP@trim?$AA@ DB 'trim', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FCOGDJML@rtrim?$AA@
CONST	SEGMENT
??_C@_05FCOGDJML@rtrim?$AA@ DB 'rtrim', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLDKFKCA@ltrim?$AA@
CONST	SEGMENT
??_C@_05GLDKFKCA@ltrim?$AA@ DB 'ltrim', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MLEKHAGK@total_changes?$AA@
CONST	SEGMENT
??_C@_0O@MLEKHAGK@total_changes?$AA@ DB 'total_changes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HFLFHMNL@changes?$AA@
CONST	SEGMENT
??_C@_07HFLFHMNL@changes?$AA@ DB 'changes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EKKKCJJE@last_insert_rowid?$AA@
CONST	SEGMENT
??_C@_0BC@EKKKCJJE@last_insert_rowid?$AA@ DB 'last_insert_rowid', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JHEGFHLM@quote?$AA@
CONST	SEGMENT
??_C@_05JHEGFHLM@quote?$AA@ DB 'quote', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IPDPEBN@sqlite_version?$AA@
CONST	SEGMENT
??_C@_0P@IPDPEBN@sqlite_version?$AA@ DB 'sqlite_version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LLGGGFDC@nullif?$AA@
CONST	SEGMENT
??_C@_06LLGGGFDC@nullif?$AA@ DB 'nullif', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IDMFPHDO@randomblob?$AA@
CONST	SEGMENT
??_C@_0L@IDMFPHDO@randomblob?$AA@ DB 'randomblob', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NLFCANPD@random?$AA@
CONST	SEGMENT
??_C@_06NLFCANPD@random?$AA@ DB 'random', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FAHGEKJN@ifnull?$AA@
CONST	SEGMENT
??_C@_06FAHGEKJN@ifnull?$AA@ DB 'ifnull', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IJNDAFDK@hex?$AA@
CONST	SEGMENT
??_C@_03IJNDAFDK@hex?$AA@ DB 'hex', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FNGHHBID@coalesce?$AA@
CONST	SEGMENT
??_C@_08FNGHHBID@coalesce?$AA@ DB 'coalesce', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPJEPLHL@lower?$AA@
CONST	SEGMENT
??_C@_05IPJEPLHL@lower?$AA@ DB 'lower', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NECKJAMC@upper?$AA@
CONST	SEGMENT
??_C@_05NECKJAMC@upper?$AA@ DB 'upper', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIMAKCN@round?$AA@
CONST	SEGMENT
??_C@_05MIMAKCN@round?$AA@ DB 'round', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BCGAIFPO@abs?$AA@
CONST	SEGMENT
??_C@_03BCGAIFPO@abs?$AA@ DB 'abs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DAHFIGOC@substr?$AA@
CONST	SEGMENT
??_C@_06DAHFIGOC@substr?$AA@ DB 'substr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJDLPEM@length?$AA@
CONST	SEGMENT
??_C@_06IJDLPEM@length?$AA@ DB 'length', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NDJPCPHC@typeof?$AA@
CONST	SEGMENT
??_C@_06NDJPCPHC@typeof?$AA@ DB 'typeof', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJAEFNNE@max?$AA@
CONST	SEGMENT
??_C@_03LJAEFNNE@max?$AA@ DB 'max', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLIPLJLL@min?$AA@
CONST	SEGMENT
??_C@_03KLIPLJLL@min?$AA@ DB 'min', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5?$AA@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DKJJOMDK@sqlite_rename_trigger?$AA@
CONST	SEGMENT
??_C@_0BG@DKJJOMDK@sqlite_rename_trigger?$AA@ DB 'sqlite_rename_trigger', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JHJAJICL@sqlite_rename_table?$AA@
CONST	SEGMENT
??_C@_0BE@JHJAJICL@sqlite_rename_table?$AA@ DB 'sqlite_rename_table', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1?$AA@
CONST	SEGMENT
??_C@_01HIHLOKLC@1?$AA@ DB '1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
_DATA	SEGMENT
?zChars@?1??sqlite3WinTempFileName@@9@9 DB 'abcdefghijklmnopqrstuvwxyzABC'
	DB	'DEFGHIJKLMNOPQRSTUVWXYZ0123456789', 00H	; `sqlite3WinTempFileName'::`2'::zChars
	ORG $+1
?azOne@?3??trimFunc@@9@9 DD FLAT:??_C@_01CLKCMJKC@?5?$AA@ ; `trimFunc'::`4'::azOne
_DATA	ENDS
;	COMDAT ??_C@_06ICNNEOIM@ToReal?$AA@
CONST	SEGMENT
??_C@_06ICNNEOIM@ToReal?$AA@ DB 'ToReal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CNEGLJEO@ToInt?$AA@
CONST	SEGMENT
??_C@_05CNEGLJEO@ToInt?$AA@ DB 'ToInt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IAEPJEPI@ToNumeric?$AA@
CONST	SEGMENT
??_C@_09IAEPJEPI@ToNumeric?$AA@ DB 'ToNumeric', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LCIJGAA@ToBlob?$AA@
CONST	SEGMENT
??_C@_06LCIJGAA@ToBlob?$AA@ DB 'ToBlob', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JMHBLLIK@ToText?$AA@
CONST	SEGMENT
??_C@_06JMHBLLIK@ToText?$AA@ DB 'ToText', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HFPJJKAF@NotUsed_137?$AA@
CONST	SEGMENT
??_C@_0M@HFPJJKAF@NotUsed_137?$AA@ DB 'NotUsed_137', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GMOCKLEE@NotUsed_136?$AA@
CONST	SEGMENT
??_C@_0M@GMOCKLEE@NotUsed_136?$AA@ DB 'NotUsed_136', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HJJPPOKN@NullRow?$AA@
CONST	SEGMENT
??_C@_07HJJPPOKN@NullRow?$AA@ DB 'NullRow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JDGHEPJG@Found?$AA@
CONST	SEGMENT
??_C@_05JDGHEPJG@Found?$AA@ DB 'Found', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HGAGCIAF@MemNull?$AA@
CONST	SEGMENT
??_C@_07HGAGCIAF@MemNull?$AA@ DB 'MemNull', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MOHBHIMB@MemMove?$AA@
CONST	SEGMENT
??_C@_07MOHBHIMB@MemMove?$AA@ DB 'MemMove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KDKHCOMM@VCreate?$AA@
CONST	SEGMENT
??_C@_07KDKHCOMM@VCreate?$AA@ DB 'VCreate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NHABAPID@VUpdate?$AA@
CONST	SEGMENT
??_C@_07NHABAPID@VUpdate?$AA@ DB 'VUpdate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CLFNNGGK@VBegin?$AA@
CONST	SEGMENT
??_C@_06CLFNNGGK@VBegin?$AA@ DB 'VBegin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJNIJPEO@MoveGe?$AA@
CONST	SEGMENT
??_C@_06KJNIJPEO@MoveGe?$AA@ DB 'MoveGe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAOEIKCJ@Rewind?$AA@
CONST	SEGMENT
??_C@_06MAOEIKCJ@Rewind?$AA@ DB 'Rewind', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BJNJNDIK@HexBlob?$AA@
CONST	SEGMENT
??_C@_07BJNJNDIK@HexBlob?$AA@ DB 'HexBlob', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHKLBGME@Real?$AA@
CONST	SEGMENT
??_C@_04PHKLBGME@Real?$AA@ DB 'Real', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OOLDHECE@MemStore?$AA@
CONST	SEGMENT
??_C@_08OOLDHECE@MemStore?$AA@ DB 'MemStore', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HOFOMOEI@Blob?$AA@
CONST	SEGMENT
??_C@_04HOFOMOEI@Blob?$AA@ DB 'Blob', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KHKKIIL@Null?$AA@
CONST	SEGMENT
??_C@_04KHKKIIL@Null?$AA@ DB 'Null', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MHKNMBPC@OpenEphemeral?$AA@
CONST	SEGMENT
??_C@_0O@MHKNMBPC@OpenEphemeral?$AA@ DB 'OpenEphemeral', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PKPPHKBP@OpenPseudo?$AA@
CONST	SEGMENT
??_C@_0L@PKPPHKBP@OpenPseudo?$AA@ DB 'OpenPseudo', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFJEPADK@IfMemZero?$AA@
CONST	SEGMENT
??_C@_09EFJEPADK@IfMemZero?$AA@ DB 'IfMemZero', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EMCFMDDO@Explain?$AA@
CONST	SEGMENT
??_C@_07EMCFMDDO@Explain?$AA@ DB 'Explain', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FEAPPFEN@LoadAnalysis?$AA@
CONST	SEGMENT
??_C@_0N@FEAPPFEN@LoadAnalysis?$AA@ DB 'LoadAnalysis', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PGPGCKGP@ForceInt?$AA@
CONST	SEGMENT
??_C@_08PGPGCKGP@ForceInt?$AA@ DB 'ForceInt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LIFFPDNM@ReadCookie?$AA@
CONST	SEGMENT
??_C@_0L@LIFFPDNM@ReadCookie?$AA@ DB 'ReadCookie', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDCAJABG@Destroy?$AA@
CONST	SEGMENT
??_C@_07BDCAJABG@Destroy?$AA@ DB 'Destroy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPFCODOD@Insert?$AA@
CONST	SEGMENT
??_C@_06CPFCODOD@Insert?$AA@ DB 'Insert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGAGNLCM@Distinct?$AA@
CONST	SEGMENT
??_C@_08FGAGNLCM@Distinct?$AA@ DB 'Distinct', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ENCBCCAM@IdxInsert?$AA@
CONST	SEGMENT
??_C@_09ENCBCCAM@IdxInsert?$AA@ DB 'IdxInsert', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MDFHGMOB@Next?$AA@
CONST	SEGMENT
??_C@_04MDFHGMOB@Next?$AA@ DB 'Next', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NCJBPLPE@ContextPop?$AA@
CONST	SEGMENT
??_C@_0L@NCJBPLPE@ContextPop?$AA@ DB 'ContextPop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JBEDGDCN@VDestroy?$AA@
CONST	SEGMENT
??_C@_08JBEDGDCN@VDestroy?$AA@ DB 'VDestroy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OKDOHLDO@VFilter?$AA@
CONST	SEGMENT
??_C@_07OKDOHLDO@VFilter?$AA@ DB 'VFilter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MEGKBOMN@Transaction?$AA@
CONST	SEGMENT
??_C@_0M@MEGKBOMN@Transaction?$AA@ DB 'Transaction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NKJEFJJA@AbsValue?$AA@
CONST	SEGMENT
??_C@_08NKJEFJJA@AbsValue?$AA@ DB 'AbsValue', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GDDDBLCD@SetNumColumns?$AA@
CONST	SEGMENT
??_C@_0O@GDDDBLCD@SetNumColumns?$AA@ DB 'SetNumColumns', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NFKKIBGI@Pull?$AA@
CONST	SEGMENT
??_C@_04NFKKIBGI@Pull?$AA@ DB 'Pull', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NOMHFNIB@AggStep?$AA@
CONST	SEGMENT
??_C@_07NOMHFNIB@AggStep?$AA@ DB 'AggStep', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NKEHNBGM@VerifyCookie?$AA@
CONST	SEGMENT
??_C@_0N@NKEHNBGM@VerifyCookie?$AA@ DB 'VerifyCookie', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PGFEFDLP@MoveLt?$AA@
CONST	SEGMENT
??_C@_06PGFEFDLP@MoveLt?$AA@ DB 'MoveLt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PFBFPBD@IdxGT?$AA@
CONST	SEGMENT
??_C@_05PFBFPBD@IdxGT?$AA@ DB 'IdxGT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MDNHABIA@Clear?$AA@
CONST	SEGMENT
??_C@_05MDNHABIA@Clear?$AA@ DB 'Clear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMLBHKDC@FifoRead?$AA@
CONST	SEGMENT
??_C@_08GMLBHKDC@FifoRead?$AA@ DB 'FifoRead', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FDKNKOOK@TableLock?$AA@
CONST	SEGMENT
??_C@_09FDKNKOOK@TableLock?$AA@ DB 'TableLock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BNGNMAK@Goto?$AA@
CONST	SEGMENT
??_C@_04BNGNMAK@Goto?$AA@ DB 'Goto', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHMIDMME@Dup?$AA@
CONST	SEGMENT
??_C@_03LHMIDMME@Dup?$AA@ DB 'Dup', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FCKHNOBN@AggFinal?$AA@
CONST	SEGMENT
??_C@_08FCKHNOBN@AggFinal?$AA@ DB 'AggFinal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PGPMFKDB@MakeRecord?$AA@
CONST	SEGMENT
??_C@_0L@PGPMFKDB@MakeRecord?$AA@ DB 'MakeRecord', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ELPHDPAO@DropTable?$AA@
CONST	SEGMENT
??_C@_09ELPHDPAO@DropTable?$AA@ DB 'DropTable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DALJIPE@IfNot?$AA@
CONST	SEGMENT
??_C@_05DALJIPE@IfNot?$AA@ DB 'IfNot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KGFHIBD@String8?$AA@
CONST	SEGMENT
??_C@_07KGFHIBD@String8?$AA@ DB 'String8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBLNEDKN@BitNot?$AA@
CONST	SEGMENT
??_C@_06OBLNEDKN@BitNot?$AA@ DB 'BitNot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KFINHAKP@MoveLe?$AA@
CONST	SEGMENT
??_C@_06KFINHAKP@MoveLe?$AA@ DB 'MoveLe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BIJOEGAJ@Negative?$AA@
CONST	SEGMENT
??_C@_08BIJOEGAJ@Negative?$AA@ DB 'Negative', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBCEMCJB@Vacuum?$AA@
CONST	SEGMENT
??_C@_06OBCEMCJB@Vacuum?$AA@ DB 'Vacuum', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODAFHOMO@Concat?$AA@
CONST	SEGMENT
??_C@_06ODAFHOMO@Concat?$AA@ DB 'Concat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DPOHBCHJ@Remainder?$AA@
CONST	SEGMENT
??_C@_09DPOHBCHJ@Remainder?$AA@ DB 'Remainder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JKMEHOIB@Divide?$AA@
CONST	SEGMENT
??_C@_06JKMEHOIB@Divide?$AA@ DB 'Divide', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EOBDLMOI@Multiply?$AA@
CONST	SEGMENT
??_C@_08EOBDLMOI@Multiply?$AA@ DB 'Multiply', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DLEJPBEP@Subtract?$AA@
CONST	SEGMENT
??_C@_08DLEJPBEP@Subtract?$AA@ DB 'Subtract', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LDFMNCOE@Add?$AA@
CONST	SEGMENT
??_C@_03LDFMNCOE@Add?$AA@ DB 'Add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHHFIOFJ@ShiftRight?$AA@
CONST	SEGMENT
??_C@_0L@DHHFIOFJ@ShiftRight?$AA@ DB 'ShiftRight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IIGOLNPP@ShiftLeft?$AA@
CONST	SEGMENT
??_C@_09IIGOLNPP@ShiftLeft?$AA@ DB 'ShiftLeft', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05BKBNAGEF@BitOr?$AA@
CONST	SEGMENT
??_C@_05BKBNAGEF@BitOr?$AA@ DB 'BitOr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCNOCLJN@BitAnd?$AA@
CONST	SEGMENT
??_C@_06PCNOCLJN@BitAnd?$AA@ DB 'BitAnd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDNFOMPO@IdxDelete?$AA@
CONST	SEGMENT
??_C@_09PDNFOMPO@IdxDelete?$AA@ DB 'IdxDelete', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GNOBCCEK@Ge?$AA@
CONST	SEGMENT
??_C@_02GNOBCCEK@Ge?$AA@ DB 'Ge', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DCGNOOLL@Lt?$AA@
CONST	SEGMENT
??_C@_02DCGNOOLL@Lt?$AA@ DB 'Lt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GBLEMNKL@Le?$AA@
CONST	SEGMENT
??_C@_02GBLEMNKL@Le?$AA@ DB 'Le', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DODIABFK@Gt?$AA@
CONST	SEGMENT
??_C@_02DODIABFK@Gt?$AA@ DB 'Gt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EAMLCBHB@Eq?$AA@
CONST	SEGMENT
??_C@_02EAMLCBHB@Eq?$AA@ DB 'Eq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GCDABJMF@Ne?$AA@
CONST	SEGMENT
??_C@_02GCDABJMF@Ne?$AA@ DB 'Ne', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07HICACDPL@NotNull?$AA@
CONST	SEGMENT
??_C@_07HICACDPL@NotNull?$AA@ DB 'NotNull', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBBMPCN@IsNull?$AA@
CONST	SEGMENT
??_C@_06NBBMPCN@IsNull?$AA@ DB 'IsNull', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FMIIHMAD@IdxGE?$AA@
CONST	SEGMENT
??_C@_05FMIIHMAD@IdxGE?$AA@ DB 'IdxGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KDDJLBNF@DropIndex?$AA@
CONST	SEGMENT
??_C@_09KDDJLBNF@DropIndex?$AA@ DB 'DropIndex', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JKNINGPB@DropTrigger?$AA@
CONST	SEGMENT
??_C@_0M@JKNINGPB@DropTrigger?$AA@ DB 'DropTrigger', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LOMLFHDC@And?$AA@
CONST	SEGMENT
??_C@_03LOMLFHDC@And?$AA@ DB 'And', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GGHBPHGE@Or?$AA@
CONST	SEGMENT
??_C@_02GGHBPHGE@Or?$AA@ DB 'Or', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CKMEEPPD@ContextPush?$AA@
CONST	SEGMENT
??_C@_0M@CKMEEPPD@ContextPush?$AA@ DB 'ContextPush', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HNHIOOFI@Callback?$AA@
CONST	SEGMENT
??_C@_08HNHIOOFI@Callback?$AA@ DB 'Callback', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ILKOCOKG@FifoWrite?$AA@
CONST	SEGMENT
??_C@_09ILKOCOKG@FifoWrite?$AA@ DB 'FifoWrite', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NDDNCBN@ResetCount?$AA@
CONST	SEGMENT
??_C@_0L@NDDNCBN@ResetCount?$AA@ DB 'ResetCount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BLCAOEHN@MakeIdxRec?$AA@
CONST	SEGMENT
??_C@_0L@BLCAOEHN@MakeIdxRec?$AA@ DB 'MakeIdxRec', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLKOBEJ@IdxRowid?$AA@
CONST	SEGMENT
??_C@_08KLKOBEJ@IdxRowid?$AA@ DB 'IdxRowid', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POHPJECG@IncrVacuum?$AA@
CONST	SEGMENT
??_C@_0L@POHPJECG@IncrVacuum?$AA@ DB 'IncrVacuum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DKKAEHDH@Last?$AA@
CONST	SEGMENT
??_C@_04DKKAEHDH@Last?$AA@ DB 'Last', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BDPOJHGL@CreateTable?$AA@
CONST	SEGMENT
??_C@_0M@BDPOJHGL@CreateTable?$AA@ DB 'CreateTable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOIHNMAE@VColumn?$AA@
CONST	SEGMENT
??_C@_07DOIHNMAE@VColumn?$AA@ DB 'VColumn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHIBHIIF@Prev?$AA@
CONST	SEGMENT
??_C@_04PHIBHIIF@Prev?$AA@ DB 'Prev', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBNCFEEC@MemInt?$AA@
CONST	SEGMENT
??_C@_06JBNCFEEC@MemInt?$AA@ DB 'MemInt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDADKEAH@Integer?$AA@
CONST	SEGMENT
??_C@_07EDADKEAH@Integer?$AA@ DB 'Integer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DLHJCIPI@Gosub?$AA@
CONST	SEGMENT
??_C@_05DLHJCIPI@Gosub?$AA@ DB 'Gosub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JMCDFMGJ@MemIncr?$AA@
CONST	SEGMENT
??_C@_07JMCDFMGJ@MemIncr?$AA@ DB 'MemIncr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HMMGFEAA@NotExists?$AA@
CONST	SEGMENT
??_C@_09HMMGFEAA@NotExists?$AA@ DB 'NotExists', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KGLMKACB@Push?$AA@
CONST	SEGMENT
??_C@_04KGLMKACB@Push?$AA@ DB 'Push', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJFJMLCE@MemMax?$AA@
CONST	SEGMENT
??_C@_06LJFJMLCE@MemMax?$AA@ DB 'MemMax', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OHPACBNN@RowData?$AA@
CONST	SEGMENT
??_C@_07OHPACBNN@RowData?$AA@ DB 'RowData', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLAGBMPK@Statement?$AA@
CONST	SEGMENT
??_C@_09NLAGBMPK@Statement?$AA@ DB 'Statement', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JHIJIKD@AddImm?$AA@
CONST	SEGMENT
??_C@_06JHIJIKD@AddImm?$AA@ DB 'AddImm', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DAELAPC@IdxLT?$AA@
CONST	SEGMENT
??_C@_05DAELAPC@IdxLT?$AA@ DB 'IdxLT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KEGGNBBF@Rowid?$AA@
CONST	SEGMENT
??_C@_05KEGGNBBF@Rowid?$AA@ DB 'Rowid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NIFKAFLK@Halt?$AA@
CONST	SEGMENT
??_C@_04NIFKAFLK@Halt?$AA@ DB 'Halt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LLJOBHN@MustBeInt?$AA@
CONST	SEGMENT
??_C@_09LLJOBHN@MustBeInt?$AA@ DB 'MustBeInt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DPPJJBMK@Int64?$AA@
CONST	SEGMENT
??_C@_05DPPJJBMK@Int64?$AA@ DB 'Int64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MDBAGECB@NotFound?$AA@
CONST	SEGMENT
??_C@_08MDBAGECB@NotFound?$AA@ DB 'NotFound', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBKIHNI@IsUnique?$AA@
CONST	SEGMENT
??_C@_08HBKIHNI@IsUnique?$AA@ DB 'IsUnique', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PLDABJLA@CreateIndex?$AA@
CONST	SEGMENT
??_C@_0M@PLDABJLA@CreateIndex?$AA@ DB 'CreateIndex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGELBCGM@Close?$AA@
CONST	SEGMENT
??_C@_05LGELBCGM@Close?$AA@ DB 'Close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JABEJFFA@VOpen?$AA@
CONST	SEGMENT
??_C@_05JABEJFFA@VOpen?$AA@ DB 'VOpen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IPJMJJPI@ParseSchema?$AA@
CONST	SEGMENT
??_C@_0M@IPJMJJPI@ParseSchema?$AA@ DB 'ParseSchema', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KGPEGHPK@RealAffinity?$AA@
CONST	SEGMENT
??_C@_0N@KGPEGHPK@RealAffinity?$AA@ DB 'RealAffinity', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ENNEIMBA@String?$AA@
CONST	SEGMENT
??_C@_06ENNEIMBA@String?$AA@ DB 'String', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DMMJCAML@Variable?$AA@
CONST	SEGMENT
??_C@_08DMMJCAML@Variable?$AA@ DB 'Variable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HOGPBFDI@IfMemNeg?$AA@
CONST	SEGMENT
??_C@_08HOGPBFDI@IfMemNeg?$AA@ DB 'IfMemNeg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FEDJPMPH@NewRowid?$AA@
CONST	SEGMENT
??_C@_08FEDJPMPH@NewRowid?$AA@ DB 'NewRowid', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HCFIKKEA@Return?$AA@
CONST	SEGMENT
??_C@_06HCFIKKEA@Return?$AA@ DB 'Return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBOPPMHE@Noop?$AA@
CONST	SEGMENT
??_C@_04NBOPPMHE@Noop?$AA@ DB 'Noop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PHKOHANG@Function?$AA@
CONST	SEGMENT
??_C@_08PHKOHANG@Function?$AA@ DB 'Function', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DJANFKGA@Sort?$AA@
CONST	SEGMENT
??_C@_04DJANFKGA@Sort?$AA@ DB 'Sort', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KCIGPGBI@IntegrityCk?$AA@
CONST	SEGMENT
??_C@_0M@KCIGPGBI@IntegrityCk?$AA@ DB 'IntegrityCk', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BPKAOEDK@AutoCommit?$AA@
CONST	SEGMENT
??_C@_0L@BPKAOEDK@AutoCommit?$AA@ DB 'AutoCommit', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNKIDPAC@Not?$AA@
CONST	SEGMENT
??_C@_03KNKIDPAC@Not?$AA@ DB 'Not', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDNCIOGJ@Expire?$AA@
CONST	SEGMENT
??_C@_06GDNCIOGJ@Expire?$AA@ DB 'Expire', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJFCCPFB@OpenRead?$AA@
CONST	SEGMENT
??_C@_08FJFCCPFB@OpenRead?$AA@ DB 'OpenRead', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MCEFGNMJ@CollSeq?$AA@
CONST	SEGMENT
??_C@_07MCEFGNMJ@CollSeq?$AA@ DB 'CollSeq', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MIMNHDEF@VRowid?$AA@
CONST	SEGMENT
??_C@_06MIMNHDEF@VRowid?$AA@ DB 'VRowid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HJACNKKK@Pop?$AA@
CONST	SEGMENT
??_C@_03HJACNKKK@Pop?$AA@ DB 'Pop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EMFCFMID@If?$AA@
CONST	SEGMENT
??_C@_02EMFCFMID@If?$AA@ DB 'If', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09FPCAPNBB@OpenWrite?$AA@
CONST	SEGMENT
??_C@_09FPCAPNBB@OpenWrite?$AA@ DB 'OpenWrite', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JIHNENAH@RowKey?$AA@
CONST	SEGMENT
??_C@_06JIHNENAH@RowKey?$AA@ DB 'RowKey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKABLMFO@MoveGt?$AA@
CONST	SEGMENT
??_C@_06PKABLMFO@MoveGt?$AA@ DB 'MoveGt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOCONEG@Sequence?$AA@
CONST	SEGMENT
??_C@_08DOCONEG@Sequence?$AA@ DB 'Sequence', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ONJAGHBH@IfMemPos?$AA@
CONST	SEGMENT
??_C@_08ONJAGHBH@IfMemPos?$AA@ DB 'IfMemPos', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FEDANMPL@SetCookie?$AA@
CONST	SEGMENT
??_C@_09FEDANMPL@SetCookie?$AA@ DB 'SetCookie', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFIACGFC@Column?$AA@
CONST	SEGMENT
??_C@_06FFIACGFC@Column?$AA@ DB 'Column', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GOGANBLF@VNext?$AA@
CONST	SEGMENT
??_C@_05GOGANBLF@VNext?$AA@ DB 'VNext', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PDGDNFMF@MemLoad?$AA@
CONST	SEGMENT
??_C@_07PDGDNFMF@MemLoad?$AA@ DB 'MemLoad', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
?aFuncs@?1??sqlite3RegisterDateTimeFunctions@@9@9 DD FLAT:??_C@_09BPOICPEH@julianday?$AA@ ; `sqlite3RegisterDateTimeFunctions'::`2'::aFuncs
	DD	0ffffffffH
	DD	FLAT:_juliandayFunc
	DD	FLAT:??_C@_04JNIHBGGH@date?$AA@
	DD	0ffffffffH
	DD	FLAT:_dateFunc
	DD	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DD	0ffffffffH
	DD	FLAT:_timeFunc
	DD	FLAT:??_C@_08FGNPMIBK@datetime?$AA@
	DD	0ffffffffH
	DD	FLAT:_datetimeFunc
	DD	FLAT:??_C@_08EPGBJPHJ@strftime?$AA@
	DD	0ffffffffH
	DD	FLAT:_strftimeFunc
	DD	FLAT:??_C@_0N@IPDKEGPB@current_time?$AA@
	DD	00H
	DD	FLAT:_ctimeFunc
	DD	FLAT:??_C@_0BC@DDICBCEN@current_timestamp?$AA@
	DD	00H
	DD	FLAT:_ctimestampFunc
	DD	FLAT:??_C@_0N@DJJJGBGD@current_date?$AA@
	DD	00H
	DD	FLAT:_cdateFunc
_aDigits DB	'0123456789ABCDEF0123456789abcdef', 00H
?lenOne@?3??trimFunc@@9@9 DB 01H			; `trimFunc'::`4'::lenOne
	ORG $+2
_aPrefix DB	'-x0', 00H, 'X0', 00H
	ORG $+5
_fmtinfo DB	064H
	DB	0aH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	073H
	DB	00H
	DB	04H
	DB	06H
	DB	00H
	DB	00H
	DB	067H
	DB	00H
	DB	01H
	DB	04H
	DB	01eH
	DB	00H
	DB	07aH
	DB	00H
	DB	06H
	DB	07H
	DB	00H
	DB	00H
	DB	071H
	DB	00H
	DB	04H
	DB	0bH
	DB	00H
	DB	00H
	DB	051H
	DB	00H
	DB	04H
	DB	0cH
	DB	00H
	DB	00H
	DB	063H
	DB	00H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	06fH
	DB	08H
	DB	00H
	DB	01H
	DB	00H
	DB	02H
	DB	075H
	DB	0aH
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	078H
	DB	010H
	DB	00H
	DB	01H
	DB	010H
	DB	01H
	DB	058H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	04H
	DB	066H
	DB	00H
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	065H
	DB	00H
	DB	01H
	DB	03H
	DB	01eH
	DB	00H
	DB	045H
	DB	00H
	DB	01H
	DB	03H
	DB	0eH
	DB	00H
	DB	047H
	DB	00H
	DB	01H
	DB	04H
	DB	0eH
	DB	00H
	DB	069H
	DB	0aH
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	06eH
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	025H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	070H
	DB	010H
	DB	00H
	DB	0fH
	DB	00H
	DB	01H
	DB	054H
	DB	00H
	DB	02H
	DB	0dH
	DB	00H
	DB	00H
	DB	053H
	DB	00H
	DB	02H
	DB	0eH
	DB	00H
	DB	00H
	ORG $+2
?spaces@?1??vxprintf@@9@9 DB '                                           '
	DB	'                              ', 00H	; `vxprintf'::`2'::spaces
	ORG $+2
_sqlite3one DD	01H
_sqlite3UtfTrans1 DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
_sqlite3UpperToLower DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
?zeroData@?1??sqlite3ThreadDataReadOnly@@9@9 DD 00H	; `sqlite3ThreadDataReadOnly'::`2'::zeroData
	ORG $+8
_sqlite3WinIoMethod DD FLAT:_winClose
	DD	FLAT:_winOpenDirectory
	DD	FLAT:_winRead
	DD	FLAT:_winWrite
	DD	FLAT:_winSeek
	DD	FLAT:_winTruncate
	DD	FLAT:_winSync
	DD	FLAT:_winSetFullSync
	DD	FLAT:_winFileHandle
	DD	FLAT:_winFileSize
	DD	FLAT:_winLock
	DD	FLAT:_winUnlock
	DD	FLAT:_winLockState
	DD	FLAT:_winCheckReservedLock
	DD	FLAT:_winSectorSize
_sqlite3OpcodeNames DD FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
	DD	FLAT:??_C@_07PDGDNFMF@MemLoad?$AA@
	DD	FLAT:??_C@_05GOGANBLF@VNext?$AA@
	DD	FLAT:??_C@_06FFIACGFC@Column?$AA@
	DD	FLAT:??_C@_09FEDANMPL@SetCookie?$AA@
	DD	FLAT:??_C@_08ONJAGHBH@IfMemPos?$AA@
	DD	FLAT:??_C@_08DOCONEG@Sequence?$AA@
	DD	FLAT:??_C@_06PKABLMFO@MoveGt?$AA@
	DD	FLAT:??_C@_06JIHNENAH@RowKey?$AA@
	DD	FLAT:??_C@_09FPCAPNBB@OpenWrite?$AA@
	DD	FLAT:??_C@_02EMFCFMID@If?$AA@
	DD	FLAT:??_C@_03HJACNKKK@Pop?$AA@
	DD	FLAT:??_C@_06MIMNHDEF@VRowid?$AA@
	DD	FLAT:??_C@_07MCEFGNMJ@CollSeq?$AA@
	DD	FLAT:??_C@_08FJFCCPFB@OpenRead?$AA@
	DD	FLAT:??_C@_06GDNCIOGJ@Expire?$AA@
	DD	FLAT:??_C@_03KNKIDPAC@Not?$AA@
	DD	FLAT:??_C@_0L@BPKAOEDK@AutoCommit?$AA@
	DD	FLAT:??_C@_0M@KCIGPGBI@IntegrityCk?$AA@
	DD	FLAT:??_C@_04DJANFKGA@Sort?$AA@
	DD	FLAT:??_C@_08PHKOHANG@Function?$AA@
	DD	FLAT:??_C@_04NBOPPMHE@Noop?$AA@
	DD	FLAT:??_C@_06HCFIKKEA@Return?$AA@
	DD	FLAT:??_C@_08FEDJPMPH@NewRowid?$AA@
	DD	FLAT:??_C@_08HOGPBFDI@IfMemNeg?$AA@
	DD	FLAT:??_C@_08DMMJCAML@Variable?$AA@
	DD	FLAT:??_C@_06ENNEIMBA@String?$AA@
	DD	FLAT:??_C@_0N@KGPEGHPK@RealAffinity?$AA@
	DD	FLAT:??_C@_0M@IPJMJJPI@ParseSchema?$AA@
	DD	FLAT:??_C@_05JABEJFFA@VOpen?$AA@
	DD	FLAT:??_C@_05LGELBCGM@Close?$AA@
	DD	FLAT:??_C@_0M@PLDABJLA@CreateIndex?$AA@
	DD	FLAT:??_C@_08HBKIHNI@IsUnique?$AA@
	DD	FLAT:??_C@_08MDBAGECB@NotFound?$AA@
	DD	FLAT:??_C@_05DPPJJBMK@Int64?$AA@
	DD	FLAT:??_C@_09LLJOBHN@MustBeInt?$AA@
	DD	FLAT:??_C@_04NIFKAFLK@Halt?$AA@
	DD	FLAT:??_C@_05KEGGNBBF@Rowid?$AA@
	DD	FLAT:??_C@_05DAELAPC@IdxLT?$AA@
	DD	FLAT:??_C@_06JHIJIKD@AddImm?$AA@
	DD	FLAT:??_C@_09NLAGBMPK@Statement?$AA@
	DD	FLAT:??_C@_07OHPACBNN@RowData?$AA@
	DD	FLAT:??_C@_06LJFJMLCE@MemMax?$AA@
	DD	FLAT:??_C@_04KGLMKACB@Push?$AA@
	DD	FLAT:??_C@_09HMMGFEAA@NotExists?$AA@
	DD	FLAT:??_C@_07JMCDFMGJ@MemIncr?$AA@
	DD	FLAT:??_C@_05DLHJCIPI@Gosub?$AA@
	DD	FLAT:??_C@_07EDADKEAH@Integer?$AA@
	DD	FLAT:??_C@_06JBNCFEEC@MemInt?$AA@
	DD	FLAT:??_C@_04PHIBHIIF@Prev?$AA@
	DD	FLAT:??_C@_07DOIHNMAE@VColumn?$AA@
	DD	FLAT:??_C@_0M@BDPOJHGL@CreateTable?$AA@
	DD	FLAT:??_C@_04DKKAEHDH@Last?$AA@
	DD	FLAT:??_C@_0L@POHPJECG@IncrVacuum?$AA@
	DD	FLAT:??_C@_08KLKOBEJ@IdxRowid?$AA@
	DD	FLAT:??_C@_0L@BLCAOEHN@MakeIdxRec?$AA@
	DD	FLAT:??_C@_0L@NDDNCBN@ResetCount?$AA@
	DD	FLAT:??_C@_09ILKOCOKG@FifoWrite?$AA@
	DD	FLAT:??_C@_08HNHIOOFI@Callback?$AA@
	DD	FLAT:??_C@_0M@CKMEEPPD@ContextPush?$AA@
	DD	FLAT:??_C@_02GGHBPHGE@Or?$AA@
	DD	FLAT:??_C@_03LOMLFHDC@And?$AA@
	DD	FLAT:??_C@_0M@JKNINGPB@DropTrigger?$AA@
	DD	FLAT:??_C@_09KDDJLBNF@DropIndex?$AA@
	DD	FLAT:??_C@_05FMIIHMAD@IdxGE?$AA@
	DD	FLAT:??_C@_06NBBMPCN@IsNull?$AA@
	DD	FLAT:??_C@_07HICACDPL@NotNull?$AA@
	DD	FLAT:??_C@_02GCDABJMF@Ne?$AA@
	DD	FLAT:??_C@_02EAMLCBHB@Eq?$AA@
	DD	FLAT:??_C@_02DODIABFK@Gt?$AA@
	DD	FLAT:??_C@_02GBLEMNKL@Le?$AA@
	DD	FLAT:??_C@_02DCGNOOLL@Lt?$AA@
	DD	FLAT:??_C@_02GNOBCCEK@Ge?$AA@
	DD	FLAT:??_C@_09PDNFOMPO@IdxDelete?$AA@
	DD	FLAT:??_C@_06PCNOCLJN@BitAnd?$AA@
	DD	FLAT:??_C@_05BKBNAGEF@BitOr?$AA@
	DD	FLAT:??_C@_09IIGOLNPP@ShiftLeft?$AA@
	DD	FLAT:??_C@_0L@DHHFIOFJ@ShiftRight?$AA@
	DD	FLAT:??_C@_03LDFMNCOE@Add?$AA@
	DD	FLAT:??_C@_08DLEJPBEP@Subtract?$AA@
	DD	FLAT:??_C@_08EOBDLMOI@Multiply?$AA@
	DD	FLAT:??_C@_06JKMEHOIB@Divide?$AA@
	DD	FLAT:??_C@_09DPOHBCHJ@Remainder?$AA@
	DD	FLAT:??_C@_06ODAFHOMO@Concat?$AA@
	DD	FLAT:??_C@_06OBCEMCJB@Vacuum?$AA@
	DD	FLAT:??_C@_08BIJOEGAJ@Negative?$AA@
	DD	FLAT:??_C@_06KFINHAKP@MoveLe?$AA@
	DD	FLAT:??_C@_06OBLNEDKN@BitNot?$AA@
	DD	FLAT:??_C@_07KGFHIBD@String8?$AA@
	DD	FLAT:??_C@_05DALJIPE@IfNot?$AA@
	DD	FLAT:??_C@_09ELPHDPAO@DropTable?$AA@
	DD	FLAT:??_C@_0L@PGPMFKDB@MakeRecord?$AA@
	DD	FLAT:??_C@_06JBKGCNBB@Delete?$AA@
	DD	FLAT:??_C@_08FCKHNOBN@AggFinal?$AA@
	DD	FLAT:??_C@_03LHMIDMME@Dup?$AA@
	DD	FLAT:??_C@_04BNGNMAK@Goto?$AA@
	DD	FLAT:??_C@_09FDKNKOOK@TableLock?$AA@
	DD	FLAT:??_C@_08GMLBHKDC@FifoRead?$AA@
	DD	FLAT:??_C@_05MDNHABIA@Clear?$AA@
	DD	FLAT:??_C@_05PFBFPBD@IdxGT?$AA@
	DD	FLAT:??_C@_06PGFEFDLP@MoveLt?$AA@
	DD	FLAT:??_C@_0N@NKEHNBGM@VerifyCookie?$AA@
	DD	FLAT:??_C@_07NOMHFNIB@AggStep?$AA@
	DD	FLAT:??_C@_04NFKKIBGI@Pull?$AA@
	DD	FLAT:??_C@_0O@GDDDBLCD@SetNumColumns?$AA@
	DD	FLAT:??_C@_08NKJEFJJA@AbsValue?$AA@
	DD	FLAT:??_C@_0M@MEGKBOMN@Transaction?$AA@
	DD	FLAT:??_C@_07OKDOHLDO@VFilter?$AA@
	DD	FLAT:??_C@_08JBEDGDCN@VDestroy?$AA@
	DD	FLAT:??_C@_0L@NCJBPLPE@ContextPop?$AA@
	DD	FLAT:??_C@_04MDFHGMOB@Next?$AA@
	DD	FLAT:??_C@_09ENCBCCAM@IdxInsert?$AA@
	DD	FLAT:??_C@_08FGAGNLCM@Distinct?$AA@
	DD	FLAT:??_C@_06CPFCODOD@Insert?$AA@
	DD	FLAT:??_C@_07BDCAJABG@Destroy?$AA@
	DD	FLAT:??_C@_0L@LIFFPDNM@ReadCookie?$AA@
	DD	FLAT:??_C@_08PGPGCKGP@ForceInt?$AA@
	DD	FLAT:??_C@_0N@FEAPPFEN@LoadAnalysis?$AA@
	DD	FLAT:??_C@_07EMCFMDDO@Explain?$AA@
	DD	FLAT:??_C@_09EFJEPADK@IfMemZero?$AA@
	DD	FLAT:??_C@_0L@PKPPHKBP@OpenPseudo?$AA@
	DD	FLAT:??_C@_0O@MHKNMBPC@OpenEphemeral?$AA@
	DD	FLAT:??_C@_04KHKKIIL@Null?$AA@
	DD	FLAT:??_C@_04HOFOMOEI@Blob?$AA@
	DD	FLAT:??_C@_08OOLDHECE@MemStore?$AA@
	DD	FLAT:??_C@_04PHKLBGME@Real?$AA@
	DD	FLAT:??_C@_07BJNJNDIK@HexBlob?$AA@
	DD	FLAT:??_C@_06MAOEIKCJ@Rewind?$AA@
	DD	FLAT:??_C@_06KJNIJPEO@MoveGe?$AA@
	DD	FLAT:??_C@_06CLFNNGGK@VBegin?$AA@
	DD	FLAT:??_C@_07NHABAPID@VUpdate?$AA@
	DD	FLAT:??_C@_07KDKHCOMM@VCreate?$AA@
	DD	FLAT:??_C@_07MOHBHIMB@MemMove?$AA@
	DD	FLAT:??_C@_07HGAGCIAF@MemNull?$AA@
	DD	FLAT:??_C@_05JDGHEPJG@Found?$AA@
	DD	FLAT:??_C@_07HJJPPOKN@NullRow?$AA@
	DD	FLAT:??_C@_0M@GMOCKLEE@NotUsed_136?$AA@
	DD	FLAT:??_C@_0M@HFPJJKAF@NotUsed_137?$AA@
	DD	FLAT:??_C@_06JMHBLLIK@ToText?$AA@
	DD	FLAT:??_C@_06LCIJGAA@ToBlob?$AA@
	DD	FLAT:??_C@_09IAEPJEPI@ToNumeric?$AA@
	DD	FLAT:??_C@_05CNEGLJEO@ToInt?$AA@
	DD	FLAT:??_C@_06ICNNEOIM@ToReal?$AA@
?zeroData@?1??sqlite3WinThreadSpecificData@@9@9 DD 00H	; `sqlite3WinThreadSpecificData'::`2'::zeroData
	ORG $+8
_aJournalMagic DB 0d9H
	DB	0d5H
	DB	05H
	DB	0f9H
	DB	020H
	DB	0a1H
	DB	063H
	DB	0d7H
_zMagicHeader DB 'SQLite format 3', 00H
?masks@?1??opcodeNoPush@@9@9 DD 0796beeb4H		; `opcodeNoPush'::`2'::masks
	DD	0ff327ddbH
	DD	0b6f7ffffH
	DD	093b3fdfdH
	DD	07ccfH
?aSize@?3??sqlite3VdbeSerialTypeLen@@9@9 DB 00H		; `sqlite3VdbeSerialTypeLen'::`4'::aSize
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	06H
	DB	08H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?nullMem@?2??columnMem@@9@9 DQ 0000000000000000H	; `columnMem'::`3'::nullMem
	DQ	00000000000000000r		; 0
	DD	FLAT:??_C@_00CNPNBAHC@?$AA@
	DD	00H
	DW	01H
	DB	05H
	ORG $+37
?and_logic@?IE@??sqlite3VdbeExec@@9@9 DB 00H		; `sqlite3VdbeExec'[::E]::and_logic
	DB	01H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	01H
	DB	02H
	ORG $+3
?or_logic@?IF@??sqlite3VdbeExec@@9@9 DB 00H		; `sqlite3VdbeExec'[::F]::or_logic
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	00H
	DB	02H
	DB	02H
	ORG $+3
?openBlob@?1??sqlite3_blob_open@@9@9 DB 06aH		; `sqlite3_blob_open'::`2'::openBlob
	DB	00H
	DW	00H
	DD	00H
	DB	065H
	DB	00H
	DW	00H
	DD	00H
	DB	02fH
	DB	00H
	DW	00H
	DD	00H
	DB	0eH
	DB	00H
	DW	00H
	DD	00H
	DB	09H
	DB	00H
	DW	00H
	DD	00H
	DB	068H
	DB	00H
	DW	00H
	DD	00H
	DB	019H
	DB	01H
	DW	00H
	DD	00H
	DB	02cH
	DB	00H
	DW	0aH
	DD	00H
	DB	03H
	DB	00H
	DW	00H
	DD	00H
	DB	03aH
	DB	00H
	DW	00H
	DD	00H
	DB	01eH
	DB	00H
	DW	00H
	DD	00H
	DB	024H
	DB	00H
	DW	00H
	DD	00H
?one@?N@??sqlite3CodeSubselect@@9@9 DD FLAT:??_C@_01HIHLOKLC@1?$AA@ ; `sqlite3CodeSubselect'::`13'::one
	DD	02H
?aFuncs@?1??sqlite3AlterFunctions@@9@9 DD FLAT:??_C@_0BE@JHJAJICL@sqlite_rename_table?$AA@ ; `sqlite3AlterFunctions'::`2'::aFuncs
	DB	02H
	ORG $+3
	DD	FLAT:_renameTableFunc
	DD	FLAT:??_C@_0BG@DKJJOMDK@sqlite_rename_trigger?$AA@
	DB	02H
	ORG $+3
	DD	FLAT:_renameTriggerFunc
?enc@?1??sqlite3AttachFunctions@@9@9 DD 01H		; `sqlite3AttachFunctions'::`2'::enc
?aEnc@?1??synthCollSeq@@9@9 DB 03H			; `synthCollSeq'::`2'::aEnc
	DB	02H
	DB	01H
	ORG $+1
?trans@?1??sqlite3_complete@@9@9 DB 00H			; `sqlite3_complete'::`2'::trans
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	02H
	DB	01H
	DB	01H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	03H
	DB	04H
	DB	01H
	DB	05H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	06H
	DB	00H
	DB	06H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
_globInfo DB	02aH
	DB	03fH
	DB	05bH
	DB	00H
_likeInfoNorm DB 025H
	DB	05fH
	DB	00H
	DB	01H
_likeInfoAlt DB	025H
	DB	05fH
	DB	00H
	DB	00H
_hexdigits DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
?ops@?N@??exprAnalyze@@9@9 DB 048H			; `exprAnalyze'::`13'::ops
	DB	046H
	ORG $+2
?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9 DD FLAT:??_C@_03KLIPLJLL@min?$AA@ ; `sqlite3RegisterBuiltinFunctions'::`2'::aFuncs
	DB	0ffH
	DB	00H
	DB	01H
	DB	01H
	DD	FLAT:_minmaxFunc
	DD	FLAT:??_C@_03KLIPLJLL@min?$AA@
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DD	00H
	DD	FLAT:??_C@_03LJAEFNNE@max?$AA@
	DB	0ffH
	DB	01H
	DB	01H
	DB	01H
	DD	FLAT:_minmaxFunc
	DD	FLAT:??_C@_03LJAEFNNE@max?$AA@
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DD	00H
	DD	FLAT:??_C@_06NDJPCPHC@typeof?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_typeofFunc
	DD	FLAT:??_C@_06IJDLPEM@length?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_lengthFunc
	DD	FLAT:??_C@_06DAHFIGOC@substr?$AA@
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_substrFunc
	DD	FLAT:??_C@_03BCGAIFPO@abs?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_absFunc
	DD	FLAT:??_C@_05MIMAKCN@round?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_roundFunc
	DD	FLAT:??_C@_05MIMAKCN@round?$AA@
	DB	02H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_roundFunc
	DD	FLAT:??_C@_05NECKJAMC@upper?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_upperFunc
	DD	FLAT:??_C@_05IPJEPLHL@lower?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_lowerFunc
	DD	FLAT:??_C@_08FNGHHBID@coalesce?$AA@
	DB	0ffH
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_ifnullFunc
	DD	FLAT:??_C@_08FNGHHBID@coalesce?$AA@
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DD	00H
	DD	FLAT:??_C@_08FNGHHBID@coalesce?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	00H
	DD	FLAT:??_C@_03IJNDAFDK@hex?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_hexFunc
	DD	FLAT:??_C@_06FAHGEKJN@ifnull?$AA@
	DB	02H
	DB	00H
	DB	01H
	DB	01H
	DD	FLAT:_ifnullFunc
	DD	FLAT:??_C@_06NLFCANPD@random?$AA@
	DB	0ffH
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_randomFunc
	DD	FLAT:??_C@_0L@IDMFPHDO@randomblob?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_randomBlob
	DD	FLAT:??_C@_06LLGGGFDC@nullif?$AA@
	DB	02H
	DB	00H
	DB	01H
	DB	01H
	DD	FLAT:_nullifFunc
	DD	FLAT:??_C@_0P@IPDPEBN@sqlite_version?$AA@
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_versionFunc
	DD	FLAT:??_C@_05JHEGFHLM@quote?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_quoteFunc
	DD	FLAT:??_C@_0BC@EKKKCJJE@last_insert_rowid?$AA@
	DB	00H
	DB	0ffH
	DB	01H
	DB	00H
	DD	FLAT:_last_insert_rowid
	DD	FLAT:??_C@_07HFLFHMNL@changes?$AA@
	DB	00H
	DB	0ffH
	DB	01H
	DB	00H
	DD	FLAT:_changes
	DD	FLAT:??_C@_0O@MLEKHAGK@total_changes?$AA@
	DB	00H
	DB	0ffH
	DB	01H
	DB	00H
	DD	FLAT:_total_changes
	DD	FLAT:??_C@_07CLEHDIEJ@replace?$AA@
	DB	03H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_replaceFunc
	DD	FLAT:??_C@_05GLDKFKCA@ltrim?$AA@
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DD	FLAT:_trimFunc
	DD	FLAT:??_C@_05GLDKFKCA@ltrim?$AA@
	DB	02H
	DB	01H
	DB	01H
	DB	00H
	DD	FLAT:_trimFunc
	DD	FLAT:??_C@_05FCOGDJML@rtrim?$AA@
	DB	01H
	DB	02H
	DB	01H
	DB	00H
	DD	FLAT:_trimFunc
	DD	FLAT:??_C@_05FCOGDJML@rtrim?$AA@
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DD	FLAT:_trimFunc
	DD	FLAT:??_C@_04GDOMMDLP@trim?$AA@
	DB	01H
	DB	03H
	DB	01H
	DB	00H
	DD	FLAT:_trimFunc
	DD	FLAT:??_C@_04GDOMMDLP@trim?$AA@
	DB	02H
	DB	03H
	DB	01H
	DB	00H
	DD	FLAT:_trimFunc
	DD	FLAT:??_C@_08OAGHJJOG@zeroblob?$AA@
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DD	FLAT:_zeroblobFunc
	DD	FLAT:??_C@_0P@BJKPICNH@load_extension?$AA@
	DB	01H
	DB	0ffH
	DB	01H
	DB	00H
	DD	FLAT:_loadExt
	DD	FLAT:??_C@_0P@BJKPICNH@load_extension?$AA@
	DB	02H
	DB	0ffH
	DB	01H
	DB	00H
	DD	FLAT:_loadExt
?delays@?1??sqliteDefaultBusyCallback@@9@9 DB 01H	; `sqliteDefaultBusyCallback'::`2'::delays
	DB	02H
	DB	05H
	DB	0aH
	DB	0fH
	DB	014H
	DB	019H
	DB	019H
	DB	019H
	DB	032H
	DB	032H
	DB	064H
?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9 DD FLAT:??_C@_03KLIPLJLL@min?$AA@ ; `sqlite3RegisterBuiltinFunctions'::`2'::aAggs
	DB	01H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:_minmaxStep
	DD	FLAT:_minMaxFinalize
	DD	FLAT:??_C@_03LJAEFNNE@max?$AA@
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
	DD	FLAT:_minmaxStep
	DD	FLAT:_minMaxFinalize
	DD	FLAT:??_C@_03CFFIJAMA@sum?$AA@
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:_sumStep
	DD	FLAT:_sumFinalize
	DD	FLAT:??_C@_05KBOMEDGA@total?$AA@
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:_sumStep
	DD	FLAT:_totalFinalize
	DD	FLAT:??_C@_03CHOBFJAH@avg?$AA@
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:_sumStep
	DD	FLAT:_avgFinalize
	DD	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:_countStep
	DD	FLAT:_countFinalize
	DD	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:_countStep
	DD	FLAT:_countFinalize
_sqlite3_apis DD FLAT:_sqlite3_aggregate_context
	DD	FLAT:_sqlite3_aggregate_count
	DD	FLAT:_sqlite3_bind_blob
	DD	FLAT:_sqlite3_bind_double
	DD	FLAT:_sqlite3_bind_int
	DD	FLAT:_sqlite3_bind_int64
	DD	FLAT:_sqlite3_bind_null
	DD	FLAT:_sqlite3_bind_parameter_count
	DD	FLAT:_sqlite3_bind_parameter_index
	DD	FLAT:_sqlite3_bind_parameter_name
	DD	FLAT:_sqlite3_bind_text
	DD	FLAT:_sqlite3_bind_text16
	DD	FLAT:_sqlite3_bind_value
	DD	FLAT:_sqlite3_busy_handler
	DD	FLAT:_sqlite3_busy_timeout
	DD	FLAT:_sqlite3_changes
	DD	FLAT:_sqlite3_close
	DD	FLAT:_sqlite3_collation_needed
	DD	FLAT:_sqlite3_collation_needed16
	DD	FLAT:_sqlite3_column_blob
	DD	FLAT:_sqlite3_column_bytes
	DD	FLAT:_sqlite3_column_bytes16
	DD	FLAT:_sqlite3_column_count
	DD	00H
	DD	00H
	DD	FLAT:_sqlite3_column_decltype
	DD	FLAT:_sqlite3_column_decltype16
	DD	FLAT:_sqlite3_column_double
	DD	FLAT:_sqlite3_column_int
	DD	FLAT:_sqlite3_column_int64
	DD	FLAT:_sqlite3_column_name
	DD	FLAT:_sqlite3_column_name16
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_sqlite3_column_text
	DD	FLAT:_sqlite3_column_text16
	DD	FLAT:_sqlite3_column_type
	DD	FLAT:_sqlite3_column_value
	DD	FLAT:_sqlite3_commit_hook
	DD	FLAT:_sqlite3_complete
	DD	FLAT:_sqlite3_complete16
	DD	FLAT:_sqlite3_create_collation
	DD	FLAT:_sqlite3_create_collation16
	DD	FLAT:_sqlite3_create_function
	DD	FLAT:_sqlite3_create_function16
	DD	FLAT:_sqlite3_create_module
	DD	FLAT:_sqlite3_data_count
	DD	FLAT:_sqlite3_db_handle
	DD	FLAT:_sqlite3_declare_vtab
	DD	FLAT:_sqlite3_enable_shared_cache
	DD	FLAT:_sqlite3_errcode
	DD	FLAT:_sqlite3_errmsg
	DD	FLAT:_sqlite3_errmsg16
	DD	FLAT:_sqlite3_exec
	DD	FLAT:_sqlite3_expired
	DD	FLAT:_sqlite3_finalize
	DD	FLAT:_sqlite3_free
	DD	FLAT:_sqlite3_free_table
	DD	FLAT:_sqlite3_get_autocommit
	DD	FLAT:_sqlite3_get_auxdata
	DD	FLAT:_sqlite3_get_table
	DD	00H
	DD	FLAT:_sqlite3_interrupt
	DD	FLAT:_sqlite3_last_insert_rowid
	DD	FLAT:_sqlite3_libversion
	DD	FLAT:_sqlite3_libversion_number
	DD	FLAT:_sqlite3_malloc
	DD	FLAT:_sqlite3_mprintf
	DD	FLAT:_sqlite3_open
	DD	FLAT:_sqlite3_open16
	DD	FLAT:_sqlite3_prepare
	DD	FLAT:_sqlite3_prepare16
	DD	FLAT:_sqlite3_profile
	DD	FLAT:_sqlite3_progress_handler
	DD	FLAT:_sqlite3_realloc
	DD	FLAT:_sqlite3_reset
	DD	FLAT:_sqlite3_result_blob
	DD	FLAT:_sqlite3_result_double
	DD	FLAT:_sqlite3_result_error
	DD	FLAT:_sqlite3_result_error16
	DD	FLAT:_sqlite3_result_int
	DD	FLAT:_sqlite3_result_int64
	DD	FLAT:_sqlite3_result_null
	DD	FLAT:_sqlite3_result_text
	DD	FLAT:_sqlite3_result_text16
	DD	FLAT:_sqlite3_result_text16be
	DD	FLAT:_sqlite3_result_text16le
	DD	FLAT:_sqlite3_result_value
	DD	FLAT:_sqlite3_rollback_hook
	DD	FLAT:_sqlite3_set_authorizer
	DD	FLAT:_sqlite3_set_auxdata
	DD	FLAT:_sqlite3_snprintf
	DD	FLAT:_sqlite3_step
	DD	00H
	DD	FLAT:_sqlite3_thread_cleanup
	DD	FLAT:_sqlite3_total_changes
	DD	FLAT:_sqlite3_trace
	DD	FLAT:_sqlite3_transfer_bindings
	DD	FLAT:_sqlite3_update_hook
	DD	FLAT:_sqlite3_user_data
	DD	FLAT:_sqlite3_value_blob
	DD	FLAT:_sqlite3_value_bytes
	DD	FLAT:_sqlite3_value_bytes16
	DD	FLAT:_sqlite3_value_double
	DD	FLAT:_sqlite3_value_int
	DD	FLAT:_sqlite3_value_int64
	DD	FLAT:_sqlite3_value_numeric_type
	DD	FLAT:_sqlite3_value_text
	DD	FLAT:_sqlite3_value_text16
	DD	FLAT:_sqlite3_value_text16be
	DD	FLAT:_sqlite3_value_text16le
	DD	FLAT:_sqlite3_value_type
	DD	FLAT:_sqlite3_vmprintf
	DD	FLAT:_sqlite3_overload_function
	DD	FLAT:_sqlite3_prepare_v2
	DD	FLAT:_sqlite3_prepare16_v2
	DD	FLAT:_sqlite3_clear_bindings
?zText@?1??getSafetyLevel@@9@9 DB 'onoffalseyestruefull', 00H ; `getSafetyLevel'::`2'::zText
	ORG $+3
?iOffset@?1??getSafetyLevel@@9@9 DB 00H			; `getSafetyLevel'::`2'::iOffset
	DB	01H
	DB	02H
	DB	04H
	DB	09H
	DB	0cH
	DB	010H
	ORG $+1
?iLength@?1??getSafetyLevel@@9@9 DB 02H			; `getSafetyLevel'::`2'::iLength
	DB	02H
	DB	03H
	DB	05H
	DB	03H
	DB	04H
	DB	04H
	ORG $+1
?iValue@?1??getSafetyLevel@@9@9 DB 01H			; `getSafetyLevel'::`2'::iValue
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	ORG $+5
?aPragma@?1??flagPragma@@9@9 DD FLAT:??_C@_0BC@CBBNFKC@full_column_names?$AA@ ; `flagPragma'::`2'::aPragma
	DD	020H
	DD	FLAT:??_C@_0BD@BFIEDLEP@short_column_names?$AA@
	DD	040H
	DD	FLAT:??_C@_0O@PEBBJPHD@count_changes?$AA@
	DD	080H
	DD	FLAT:??_C@_0BH@CMLDBHJP@empty_result_callbacks?$AA@
	DD	0100H
	DD	FLAT:??_C@_0BD@LEFOEGBK@legacy_file_format?$AA@
	DD	08000H
	DD	FLAT:??_C@_09MLJLLBEB@fullfsync?$AA@
	DD	010000H
	DD	FLAT:??_C@_0BJ@KLIMENGM@ignore_check_constraints?$AA@
	DD	02000H
	DD	FLAT:??_C@_0BA@OHBCLCAL@writable_schema?$AA@
	DD	040800H
	DD	FLAT:??_C@_0O@FCIFIHH@omit_readlock?$AA@
	DD	01000H
	DD	FLAT:??_C@_0BB@KLHJNGLH@read_uncommitted?$AA@
	DD	04000H
?getCacheSize@?6??sqlite3Pragma@@9@9 DB 073H		; `sqlite3Pragma'::`7'::getCacheSize
	DB	00H
	DW	02H
	DD	00H
	DB	069H
	DB	00H
	DW	00H
	DD	00H
	DB	05eH
	DB	00H
	DW	00H
	DD	00H
	DB	02fH
	DB	00H
	DW	00H
	DD	00H
	DB	043H
	DB	00H
	DW	06H
	DD	00H
	DB	02fH
	DB	00H
	DW	00H
	DD	00H
	DB	03aH
	DB	01H
	DW	00H
	DD	00H
?endCode@?EI@??sqlite3Pragma@@9@9 DB 01H		; `sqlite3Pragma'::`72'::endCode
	DB	00H
	DW	00H
	DD	00H
	DB	02fH
	DB	00H
	DW	00H
	DD	00H
	DB	043H
	DB	00H
	DW	00H
	DD	00H
	DB	058H
	DB	00H
	DW	00H
	DD	FLAT:??_C@_02MFDMBIJM@ok?$AA@
	DB	03aH
	DB	01H
	DW	00H
	DD	00H
?idxErr@?EP@??sqlite3Pragma@@9@9 DB 02dH		; `sqlite3Pragma'::`79'::idxErr
	DB	0ffH
	DW	00H
	DD	00H
	DB	058H
	DB	00H
	DW	00H
	DD	FLAT:??_C@_06DHEAJPAE@rowid?5?$AA@
	DB	025H
	DB	01H
	DW	00H
	DD	00H
	DB	058H
	DB	00H
	DW	00H
	DD	FLAT:??_C@_0BF@JGBLFHJL@?5missing?5from?5index?5?$AA@
	DB	058H
	DB	00H
	DW	00H
	DD	00H
	DB	053H
	DB	02H
	DW	00H
	DD	00H
	DB	03aH
	DB	01H
	DW	00H
	DD	00H
?cntIdx@?FA@??sqlite3Pragma@@9@9 DB 030H		; `sqlite3Pragma'::`80'::cntIdx
	DB	00H
	DW	02H
	DD	00H
	DB	07fH
	DB	00H
	DW	00H
	DD	00H
	DB	02dH
	DB	01H
	DW	02H
	DD	00H
	DB	06eH
	DB	00H
	DW	00H
	DD	00H
	DB	01H
	DB	01H
	DW	00H
	DD	00H
	DB	01H
	DB	02H
	DW	00H
	DD	00H
	DB	044H
	DB	00H
	DW	00H
	DD	00H
	DB	02dH
	DB	0ffH
	DW	00H
	DD	00H
	DB	058H
	DB	00H
	DW	00H
	DD	FLAT:??_C@_0BN@JKHLHJNK@wrong?5?$CD?5of?5entries?5in?5index?5?$AA@
	DB	058H
	DB	00H
	DW	00H
	DD	00H
	DB	053H
	DB	00H
	DW	00H
	DD	00H
	DB	03aH
	DB	01H
	DW	00H
	DD	00H
?encnames@?FB@??sqlite3Pragma@@9@9 DD FLAT:??_C@_05EGJIMALK@UTF?98?$AA@ ; `sqlite3Pragma'::`81'::encnames
	DB	01H
	ORG $+3
	DD	FLAT:??_C@_04OOMJJNCF@UTF8?$AA@
	DB	01H
	ORG $+3
	DD	FLAT:??_C@_08HMPANPBC@UTF?916le?$AA@
	DB	02H
	ORG $+3
	DD	FLAT:??_C@_07JJMGGCAM@UTF16le?$AA@
	DB	02H
	ORG $+3
	DD	FLAT:??_C@_08HGGOPCBI@UTF?916be?$AA@
	DB	03H
	ORG $+3
	DD	FLAT:??_C@_07JDFIEPAG@UTF16be?$AA@
	DB	03H
	ORG $+3
	DD	FLAT:??_C@_06KNDPGIKI@UTF?916?$AA@
	DB	00H
	ORG $+3
	DD	FLAT:??_C@_05MNCHLHCA@UTF16?$AA@
	DB	00H
	ORG $+3
	DD	00H
	DB	00H
	ORG $+3
?setCookie@?FN@??sqlite3Pragma@@9@9 DB 06aH		; `sqlite3Pragma'::`93'::setCookie
	DB	00H
	DW	01H
	DD	00H
	DB	02fH
	DB	00H
	DW	00H
	DD	00H
	DB	04H
	DB	00H
	DW	00H
	DD	00H
?readCookie@?FO@??sqlite3Pragma@@9@9 DB 073H		; `sqlite3Pragma'::`94'::readCookie
	DB	00H
	DW	00H
	DD	00H
	DB	03aH
	DB	01H
	DW	00H
	DD	00H
?master_schema@?1??sqlite3InitOne@@9@9 DB 'CREATE TABLE sqlite_master(', 0aH
	DB	'  type text,', 0aH, '  name text,', 0aH, '  tbl_name text,', 0aH
	DB	'  rootpage integer,', 0aH, '  sql text', 0aH, ')', 00H ; `sqlite3InitOne'::`2'::master_schema
?temp_master_schema@?1??sqlite3InitOne@@9@9 DB 'CREATE TEMP TABLE sqlite_'
	DB	'temp_master(', 0aH, '  type text,', 0aH, '  name text,', 0aH, ' '
	DB	' tbl_name text,', 0aH, '  rootpage integer,', 0aH, '  sql tex'
	DB	't', 0aH, ')', 00H				; `sqlite3InitOne'::`2'::temp_master_schema
	ORG $+6
?keywords@?1??sqlite3JoinType@@9@9 DB 'natural', 00H	; `sqlite3JoinType'::`2'::keywords
	DB	07H
	DB	04H
	DB	'left', 00H
	ORG $+3
	DB	04H
	DB	028H
	DB	'right', 00H
	ORG $+2
	DB	05H
	DB	030H
	DB	'full', 00H
	ORG $+3
	DB	04H
	DB	038H
	DB	'outer', 00H
	ORG $+2
	DB	05H
	DB	020H
	DB	'inner', 00H
	ORG $+2
	DB	05H
	DB	01H
	DB	'cross', 00H
	ORG $+2
	DB	05H
	DB	03H
	ORG $+2
?insertTrig@?4??sqlite3FinishTrigger@@9@9 DB 017H	; `sqlite3FinishTrigger'::`5'::insertTrig
	DB	00H
	DW	00H
	DD	00H
	DB	058H
	DB	00H
	DW	00H
	DD	FLAT:??_C@_07DIDNFGDE@trigger?$AA@
	DB	058H
	DB	00H
	DW	00H
	DD	00H
	DB	058H
	DB	00H
	DW	00H
	DD	00H
	DB	02fH
	DB	00H
	DW	00H
	DD	00H
	DB	058H
	DB	00H
	DW	00H
	DD	FLAT:??_C@_0BA@HAFLJCI@CREATE?5TRIGGER?5?$AA@
	DB	058H
	DB	00H
	DW	00H
	DD	00H
	DB	053H
	DB	00H
	DW	00H
	DD	00H
	DB	05bH
	DB	05H
	DW	00H
	DD	FLAT:??_C@_05JJGFHFCC@aaada?$AA@
	DB	071H
	DB	00H
	DW	00H
	DD	00H
?dropTrigger@?4??sqlite3DropTriggerPtr@@9@9 DB 07fH	; `sqlite3DropTriggerPtr'::`5'::dropTrigger
	DB	00H
	DW	0fff6H
	DD	00H
	DB	058H
	DB	00H
	DW	00H
	DD	00H
	DB	03H
	DB	00H
	DW	01H
	DD	00H
	DB	043H
	DB	00H
	DW	0fff7H
	DD	00H
	DB	058H
	DB	00H
	DW	00H
	DD	FLAT:??_C@_07DIDNFGDE@trigger?$AA@
	DB	03H
	DB	00H
	DW	00H
	DD	00H
	DB	043H
	DB	00H
	DW	0fff7H
	DD	00H
	DB	05cH
	DB	00H
	DW	00H
	DD	00H
	DB	06eH
	DB	00H
	DW	0fffeH
	DD	00H
?aCopy@?5??sqlite3RunVacuum@@9@9 DB 01H			; `sqlite3RunVacuum'::`6'::aCopy
	DB	01H
	DB	03H
	DB	00H
	DB	05H
	DB	00H
	DB	06H
	DB	00H
_yy_action DW	0121H
	DW	0382H
	DW	079H
	DW	0249H
	DW	0195H
	DW	0a9H
	DW	02H
	DW	01b3H
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	0205H
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0183H
	DW	0180H
	DW	01a4H
	DW	01aaH
	DW	044H
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	01bbH
	DW	0d0H
	DW	0188H
	DW	01bfH
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	0cdH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0121H
	DW	0170H
	DW	013cH
	DW	01b3H
	DW	01e7H
	DW	0cdH
	DW	050H
	DW	043H
	DW	019fH
	DW	045H
	DW	097H
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0203H
	DW	0a2H
	DW	019aH
	DW	023H
	DW	01a4H
	DW	01aaH
	DW	01bbH
	DW	023bH
	DW	03aH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0189H
	DW	018aH
	DW	01a1H
	DW	01a1H
	DW	01a1H
	DW	0121H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	012eH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	01a4H
	DW	01aaH
	DW	05cH
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0188H
	DW	01c8H
	DW	01d8H
	DW	043H
	DW	038H
	DW	045H
	DW	097H
	DW	0a9H
	DW	0196H
	DW	01b3H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	0f7H
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0121H
	DW	0239H
	DW	020aH
	DW	0124H
	DW	026cH
	DW	06fH
	DW	01deH
	DW	0203H
	DW	01bfH
	DW	0e6H
	DW	013cH
	DW	0193H
	DW	015H
	DW	043H
	DW	01ccH
	DW	045H
	DW	097H
	DW	042H
	DW	0e6H
	DW	0238H
	DW	01bbH
	DW	0d0H
	DW	043H
	DW	0e0H
	DW	045H
	DW	097H
	DW	01a4H
	DW	01aaH
	DW	092H
	DW	093H
	DW	0189H
	DW	018aH
	DW	019aH
	DW	029H
	DW	0182H
	DW	094H
	DW	0213H
	DW	02H
	DW	01e7H
	DW	01b3H
	DW	0236H
	DW	0e8H
	DW	019fH
	DW	0121H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	013cH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	01a4H
	DW	01aaH
	DW	01e6H
	DW	014aH
	DW	0d3H
	DW	01a1H
	DW	01a1H
	DW	01a1H
	DW	0167H
	DW	010eH
	DW	019aH
	DW	029H
	DW	017aH
	DW	0cfH
	DW	016aH
	DW	021eH
	DW	0f5H
	DW	0121H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	0188H
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	01a4H
	DW	01aaH
	DW	0104H
	DW	012bH
	DW	0111H
	DW	020aH
	DW	010fH
	DW	020aH
	DW	0d2H
	DW	0172H
	DW	013fH
	DW	0dfH
	DW	01b1H
	DW	01b1H
	DW	0214H
	DW	015H
	DW	0240H
	DW	015H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	0bfH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0105H
	DW	013cH
	DW	0efH
	DW	04cH
	DW	0121H
	DW	0220H
	DW	012bH
	DW	095H
	DW	01e2H
	DW	096H
	DW	0189H
	DW	018aH
	DW	0b2H
	DW	0f0H
	DW	0239H
	DW	0155H
	DW	0158H
	DW	0159H
	DW	0194H
	DW	0208H
	DW	01bdH
	DW	0142H
	DW	0a5H
	DW	019aH
	DW	01cH
	DW	021cH
	DW	015aH
	DW	0205H
	DW	0f8H
	DW	021bH
	DW	01a4H
	DW	01aaH
	DW	0238H
	DW	0237H
	DW	0a1H
	DW	073H
	DW	0eeH
	DW	0153H
	DW	0f3H
	DW	0154H
	DW	0adH
	DW	0166H
	DW	0110H
	DW	019bH
	DW	0335H
	DW	01e8H
	DW	04fH
	DW	0f9H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	0212H
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0121H
	DW	0f8H
	DW	0b2H
	DW	01d1H
	DW	01e5H
	DW	0155H
	DW	0158H
	DW	0159H
	DW	073H
	DW	0eeH
	DW	0153H
	DW	0f3H
	DW	0154H
	DW	0adH
	DW	052H
	DW	013cH
	DW	015aH
	DW	013cH
	DW	01ebH
	DW	01ecH
	DW	0f9H
	DW	0235H
	DW	0cfH
	DW	098H
	DW	020bH
	DW	01e9H
	DW	01a4H
	DW	01aaH
	DW	0b2H
	DW	0211H
	DW	01f7H
	DW	0155H
	DW	0158H
	DW	0159H
	DW	0197H
	DW	01d8H
	DW	0210H
	DW	019aH
	DW	023H
	DW	019aH
	DW	023H
	DW	0abH
	DW	015aH
	DW	0c6H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	019bH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0121H
	DW	0224H
	DW	0243H
	DW	0120H
	DW	01f6H
	DW	0eaH
	DW	019bH
	DW	013cH
	DW	019bH
	DW	013cH
	DW	0128H
	DW	011bH
	DW	012aH
	DW	013cH
	DW	01bdH
	DW	0209H
	DW	0a5H
	DW	01dcH
	DW	0acH
	DW	09dH
	DW	01a5H
	DW	01a6H
	DW	01c9H
	DW	014fH
	DW	01c9H
	DW	090H
	DW	01a4H
	DW	01aaH
	DW	016eH
	DW	019aH
	DW	023H
	DW	019aH
	DW	024H
	DW	01b3H
	DW	01H
	DW	019aH
	DW	031H
	DW	0147H
	DW	0188H
	DW	0223H
	DW	0c1H
	DW	01a8H
	DW	01a9H
	DW	09cH
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	014dH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0121H
	DW	01a7H
	DW	014cH
	DW	01c4H
	DW	0fcH
	DW	019bH
	DW	0127H
	DW	01b6H
	DW	01b7H
	DW	0129H
	DW	013cH
	DW	015dH
	DW	0133H
	DW	0e7H
	DW	01c9H
	DW	01c5H
	DW	0141H
	DW	01b6H
	DW	01b7H
	DW	0188H
	DW	0171H
	DW	010aH
	DW	0109H
	DW	0bdH
	DW	0d9H
	DW	0188H
	DW	01a4H
	DW	01aaH
	DW	01c6H
	DW	01b3H
	DW	01edH
	DW	0cdH
	DW	019aH
	DW	031H
	DW	0189H
	DW	018aH
	DW	0247H
	DW	0379H
	DW	0aeH
	DW	0379H
	DW	01eeH
	DW	0221H
	DW	01ecH
	DW	0188H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	019bH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	0121H
	DW	0cfH
	DW	024aH
	DW	0183H
	DW	0180H
	DW	05bH
	DW	0aH
	DW	0244H
	DW	0150H
	DW	0134H
	DW	0188H
	DW	0cfH
	DW	016fH
	DW	01e0H
	DW	013cH
	DW	0189H
	DW	018aH
	DW	0247H
	DW	0378H
	DW	0dbH
	DW	0378H
	DW	0189H
	DW	018aH
	DW	01dcH
	DW	0123H
	DW	0e9H
	DW	01a4H
	DW	01aaH
	DW	01e1H
	DW	0f9H
	DW	019aH
	DW	03H
	DW	01b2H
	DW	0104H
	DW	013dH
	DW	016bH
	DW	019aH
	DW	01dH
	DW	01c0H
	DW	0189H
	DW	018aH
	DW	01d4H
	DW	0104H
	DW	0121H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	0244H
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	01a4H
	DW	01aaH
	DW	0187H
	DW	0138H
	DW	0184H
	DW	022bH
	DW	0189H
	DW	018aH
	DW	04bH
	DW	0ccH
	DW	04dH
	DW	018bH
	DW	018cH
	DW	018dH
	DW	022dH
	DW	0165H
	DW	0c5H
	DW	0121H
	DW	03cH
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	013cH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	01a4H
	DW	01aaH
	DW	013fH
	DW	074H
	DW	01b1H
	DW	01b1H
	DW	013fH
	DW	019bH
	DW	01b1H
	DW	01b1H
	DW	019aH
	DW	018H
	DW	013fH
	DW	0203H
	DW	01b1H
	DW	01b1H
	DW	0203H
	DW	0121H
	DW	03cH
	DW	046H
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	0177H
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	01a4H
	DW	01aaH
	DW	021aH
	DW	0164H
	DW	021aH
	DW	0d8H
	DW	0104H
	DW	01d8H
	DW	012fH
	DW	0afH
	DW	0b0H
	DW	0b1H
	DW	0feH
	DW	01dcH
	DW	0203H
	DW	0104H
	DW	017fH
	DW	0121H
	DW	05H
	DW	03bH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	013cH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	01a4H
	DW	01aaH
	DW	0188H
	DW	0ecH
	DW	017cH
	DW	0f7H
	DW	0130H
	DW	0102H
	DW	0f7H
	DW	0100H
	DW	019aH
	DW	021H
	DW	0104H
	DW	022eH
	DW	07dH
	DW	01d3H
	DW	0203H
	DW	01a0H
	DW	0a8H
	DW	09dH
	DW	0126H
	DW	01aeH
	DW	01afH
	DW	01abH
	DW	01abH
	DW	03eH
	DW	03eH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	03dH
	DW	0132H
	DW	03fH
	DW	03fH
	DW	03fH
	DW	03fH
	DW	040H
	DW	040H
	DW	041H
	DW	041H
	DW	041H
	DW	042H
	DW	0e6H
	DW	048H
	DW	0143H
	DW	01c4H
	DW	04H
	DW	099H
	DW	016H
	DW	0f7H
	DW	0125H
	DW	0131H
	DW	01b3H
	DW	022fH
	DW	013cH
	DW	017eH
	DW	013cH
	DW	01c5H
	DW	0140H
	DW	048H
	DW	0143H
	DW	013cH
	DW	04H
	DW	016eH
	DW	013cH
	DW	0b4H
	DW	0125H
	DW	0189H
	DW	018aH
	DW	014H
	DW	01c6H
	DW	08dH
	DW	0146H
	DW	013cH
	DW	0140H
	DW	0145H
	DW	019aH
	DW	035H
	DW	019aH
	DW	034H
	DW	013cH
	DW	019bH
	DW	09bH
	DW	019aH
	DW	060H
	DW	01bfH
	DW	019aH
	DW	05eH
	DW	013cH
	DW	01f4H
	DW	013cH
	DW	0145H
	DW	0148H
	DW	01d5H
	DW	0f7H
	DW	019aH
	DW	063H
	DW	01bcH
	DW	0104H
	DW	019bH
	DW	013eH
	DW	01bfH
	DW	019aH
	DW	064H
	DW	013cH
	DW	04aH
	DW	049H
	DW	01d3H
	DW	0b7H
	DW	0104H
	DW	019aH
	DW	06eH
	DW	019aH
	DW	070H
	DW	048H
	DW	013aH
	DW	013bH
	DW	01b3H
	DW	0151H
	DW	019fH
	DW	01caH
	DW	04aH
	DW	049H
	DW	01dfH
	DW	013cH
	DW	0179H
	DW	019aH
	DW	011H
	DW	0daH
	DW	013H
	DW	048H
	DW	013aH
	DW	013bH
	DW	048H
	DW	0143H
	DW	019fH
	DW	04H
	DW	0cdH
	DW	013cH
	DW	0112H
	DW	0125H
	DW	013cH
	DW	019bH
	DW	01d2H
	DW	0cdH
	DW	0199H
	DW	019aH
	DW	061H
	DW	0140H
	DW	0198H
	DW	0176H
	DW	01a1H
	DW	01a1H
	DW	01a1H
	DW	01a2H
	DW	01a3H
	DW	0cH
	DW	0178H
	DW	013cH
	DW	0ceH
	DW	019aH
	DW	022H
	DW	0aeH
	DW	019aH
	DW	05fH
	DW	0145H
	DW	037H
	DW	01a1H
	DW	01a1H
	DW	01a1H
	DW	01a2H
	DW	01a3H
	DW	0cH
	DW	0136H
	DW	078H
	DW	01bfH
	DW	01acH
	DW	09fH
	DW	09H
	DW	0104H
	DW	019aH
	DW	019H
	DW	0dcH
	DW	0ddH
	DW	0deH
	DW	066H
	DW	01b9H
	DW	01b9H
	DW	013cH
	DW	01d7H
	DW	0199H
	DW	013cH
	DW	01dbH
	DW	013cH
	DW	0198H
	DW	04aH
	DW	049H
	DW	01b4H
	DW	0caH
	DW	017H
	DW	0116H
	DW	01c7H
	DW	0f4H
	DW	0dH
	DW	048H
	DW	013aH
	DW	013bH
	DW	0117H
	DW	013cH
	DW	019fH
	DW	019aH
	DW	036H
	DW	013cH
	DW	019aH
	DW	071H
	DW	019aH
	DW	072H
	DW	0123H
	DW	0245H
	DW	0c8H
	DW	0114H
	DW	0223H
	DW	01ceH
	DW	01f1H
	DW	01f2H
	DW	0c7H
	DW	013cH
	DW	01f8H
	DW	0c9H
	DW	01cfH
	DW	019aH
	DW	01aH
	DW	013cH
	DW	020cH
	DW	019aH
	DW	025H
	DW	013cH
	DW	01daH
	DW	013cH
	DW	0aaH
	DW	0fdH
	DW	01a1H
	DW	01a1H
	DW	01a1H
	DW	01a2H
	DW	01a3H
	DW	0cH
	DW	01f9H
	DW	019aH
	DW	026H
	DW	01feH
	DW	01e3H
	DW	013cH
	DW	0dH
	DW	019aH
	DW	01bH
	DW	01fcH
	DW	0246H
	DW	019aH
	DW	027H
	DW	019aH
	DW	028H
	DW	013cH
	DW	0ffH
	DW	01fbH
	DW	01faH
	DW	0200H
	DW	013cH
	DW	07dH
	DW	013cH
	DW	01ffH
	DW	0175H
	DW	0113H
	DW	0109H
	DW	019aH
	DW	02aH
	DW	01fdH
	DW	0122H
	DW	013cH
	DW	0fbH
	DW	013cH
	DW	07dH
	DW	0cdH
	DW	0101H
	DW	019aH
	DW	02bH
	DW	013cH
	DW	0103H
	DW	013cH
	DW	019aH
	DW	02cH
	DW	019aH
	DW	01eH
	DW	015cH
	DW	013cH
	DW	07dH
	DW	013cH
	DW	0161H
	DW	0baH
	DW	013cH
	DW	019aH
	DW	01fH
	DW	019aH
	DW	02dH
	DW	013cH
	DW	021fH
	DW	017bH
	DW	07dH
	DW	019aH
	DW	02eH
	DW	019aH
	DW	02fH
	DW	013cH
	DW	0227H
	DW	0108H
	DW	0aaH
	DW	019aH
	DW	030H
	DW	019aH
	DW	020H
	DW	0191H
	DW	019aH
	DW	0bH
	DW	0228H
	DW	01b8H
	DW	059H
	DW	019aH
	DW	032H
	DW	012dH
	DW	0232H
	DW	0242H
	DW	059H
	DW	011fH
	DW	0169H
	DW	019aH
	DW	033H
	DW	016cH
	DW	016dH
	DW	010bH
	DW	010cH
	DW	010dH
	DW	022aH
	DW	08fH
	DW	0234H
	DW	0115H
	DW	0144H
	DW	0118H
	DW	0119H
	DW	023fH
	DW	0e1H
	DW	01baH
	DW	01cdH
	DW	01d0H
	DW	01f7H
	DW	0f1H
	DW	0201H
	DW	0204H
	DW	0226H
	DW	0157H
	DW	0a0H
	DW	0231H
	DW	0186H
	DW	08H
	DW	0139H
	DW	018eH
	DW	018fH
	DW	0190H
	DW	019cH
	DW	052H
	DW	0e2H
	DW	014bH
	DW	0149H
	DW	051H
	DW	0196H
	DW	039H
	DW	04eH
	DW	0d1H
	DW	0a7H
	DW	053H
	DW	01cbH
	DW	07aH
	DW	019eH
	DW	0e3H
	DW	014eH
	DW	0e4H
	DW	0152H
	DW	012cH
	DW	01f4H
	DW	067H
	DW	01f0H
	DW	0f6H
	DW	0207H
	DW	0202H
	DW	01eaH
	DW	01efH
	DW	0f2H
	DW	0d6H
	DW	0206H
	DW	01f3H
	DW	0e5H
	DW	01f5H
	DW	019dH
	DW	015eH
	DW	0215H
	DW	011cH
	DW	020dH
	DW	020eH
	DW	020fH
	DW	0ebH
	DW	0b5H
	DW	01d9H
	DW	0edH
	DW	011dH
	DW	01ddH
	DW	0b6H
	DW	0162H
	DW	0160H
	DW	0b8H
	DW	056H
	DW	0b9H
	DW	076H
	DW	0217H
	DW	0bbH
	DW	0222H
	DW	0168H
	DW	0beH
	DW	081H
	DW	0229H
	DW	08bH
	DW	0173H
	DW	0174H
	DW	082H
	DW	0d7H
	DW	0135H
	DW	0230H
	DW	083H
	DW	084H
	DW	085H
	DW	023cH
	DW	0241H
	DW	087H
	DW	023dH
	DW	062H
	DW	023eH
	DW	0185H
	DW	0106H
	DW	0192H
	DW	026dH
	DW	0218H
	DW	0d5H
	DW	065H
	DW	026eH
	DW	01b0H
	DW	0a3H
	DW	0a4H
	DW	01adH
	DW	08aH
	DW	047H
	DW	01c1H
	DW	01b5H
	DW	01beH
	DW	08cH
	DW	01d6H
	DW	09aH
	DW	06H
	DW	01c2H
	DW	07H
	DW	09eH
	DW	0a6H
	DW	01c3H
	DW	0eH
	DW	07bH
	DW	0dH
	DW	07cH
	DW	01e4H
	DW	0d4H
	DW	054H
	DW	0156H
	DW	068H
	DW	069H
	DW	05aH
	DW	0faH
	DW	055H
	DW	075H
	DW	06aH
	DW	015bH
	DW	0b3H
	DW	0f0H
	DW	015fH
	DW	08eH
	DW	0216H
	DW	07eH
	DW	012H
	DW	0aaH
	DW	05dH
	DW	0107H
	DW	0bcH
	DW	06bH
	DW	0163H
	DW	011eH
	DW	06dH
	DW	07fH
	DW	0225H
	DW	021dH
	DW	080H
	DW	077H
	DW	0219H
	DW	0c0H
	DW	0fH
	DW	0c2H
	DW	0c3H
	DW	088H
	DW	0c4H
	DW	086H
	DW	022cH
	DW	0233H
	DW	0137H
	DW	089H
	DW	010H
	DW	06cH
	DW	023aH
	DW	0cbH
	DW	091H
	DW	0181H
	DW	017dH
	DW	011aH
	DW	0248H
	DW	0383H
	DW	0383H
	DW	0383H
	DW	0383H
	DW	0383H
	DW	057H
	DW	0383H
	DW	058H
	ORG $+6
_yy_lookahead DB 010H
	DB	08bH
	DB	08cH
	DB	08dH
	DB	0a8H
	DB	015H
	DB	090H
	DB	017H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	0b0H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	01H
	DB	02H
	DB	02aH
	DB	02bH
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	04eH
	DB	04fH
	DB	017H
	DB	03aH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	06eH
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	010H
	DB	07bH
	DB	093H
	DB	058H
	DB	058H
	DB	06eH
	DB	016H
	DB	0d8H
	DB	05cH
	DB	0daH
	DB	0dbH
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	093H
	DB	013H
	DB	0a9H
	DB	0aaH
	DB	02aH
	DB	02bH
	DB	04eH
	DB	0eeH
	DB	02eH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	058H
	DB	059H
	DB	07cH
	DB	07dH
	DB	07eH
	DB	010H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	0b6H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	017H
	DB	0dfH
	DB	0a1H
	DB	0d8H
	DB	013H
	DB	0daH
	DB	0dbH
	DB	015H
	DB	017H
	DB	017H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	0e1H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	010H
	DB	093H
	DB	093H
	DB	096H
	DB	070H
	DB	015H
	DB	0c8H
	DB	093H
	DB	03aH
	DB	054H
	DB	093H
	DB	09cH
	DB	09dH
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	053H
	DB	054H
	DB	0a5H
	DB	04eH
	DB	04fH
	DB	0d8H
	DB	0beH
	DB	0daH
	DB	0dbH
	DB	02aH
	DB	02bH
	DB	04eH
	DB	04fH
	DB	058H
	DB	059H
	DB	0a9H
	DB	0aaH
	DB	08dH
	DB	0b4H
	DB	0b5H
	DB	090H
	DB	058H
	DB	058H
	DB	062H
	DB	093H
	DB	05cH
	DB	010H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	093H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	02aH
	DB	02bH
	DB	0a9H
	DB	0d1H
	DB	0d2H
	DB	07cH
	DB	07dH
	DB	07eH
	DB	0e0H
	DB	0eH
	DB	0a9H
	DB	0aaH
	DB	0e3H
	DB	0e4H
	DB	0e6H
	DB	012H
	DB	0e1H
	DB	010H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	017H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	02aH
	DB	02bH
	DB	093H
	DB	010H
	DB	034H
	DB	093H
	DB	036H
	DB	093H
	DB	0d2H
	DB	037H
	DB	06aH
	DB	099H
	DB	06cH
	DB	06dH
	DB	09cH
	DB	09dH
	DB	09cH
	DB	09dH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	016H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	0bcH
	DB	093H
	DB	05cH
	DB	083H
	DB	010H
	DB	05eH
	DB	010H
	DB	016H
	DB	014H
	DB	09bH
	DB	058H
	DB	059H
	DB	05aH
	DB	067H
	DB	093H
	DB	05dH
	DB	05eH
	DB	05fH
	DB	0a7H
	DB	0a8H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a9H
	DB	0aaH
	DB	019H
	DB	068H
	DB	0b0H
	DB	054H
	DB	01dH
	DB	02aH
	DB	02bH
	DB	0a5H
	DB	0a6H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	029H
	DB	085H
	DB	0bdH
	DB	085H
	DB	0a9H
	DB	083H
	DB	067H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	0b5H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	010H
	DB	054H
	DB	05aH
	DB	016H
	DB	014H
	DB	05dH
	DB	05eH
	DB	05fH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	079H
	DB	093H
	DB	068H
	DB	093H
	DB	0b9H
	DB	0baH
	DB	067H
	DB	0e3H
	DB	0e4H
	DB	09bH
	DB	0b5H
	DB	0a0H
	DB	02aH
	DB	02bH
	DB	05aH
	DB	0b0H
	DB	0b1H
	DB	05dH
	DB	05eH
	DB	05fH
	DB	0a9H
	DB	0a1H
	DB	0b7H
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	09bH
	DB	068H
	DB	09bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	0bdH
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	010H
	DB	0bH
	DB	0f4H
	DB	0f5H
	DB	014H
	DB	0c8H
	DB	0bdH
	DB	093H
	DB	0bdH
	DB	093H
	DB	0d3H
	DB	09eH
	DB	0d3H
	DB	093H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	093H
	DB	0c9H
	DB	0caH
	DB	02aH
	DB	02bH
	DB	0dfH
	DB	0ceH
	DB	0dfH
	DB	071H
	DB	02aH
	DB	02bH
	DB	093H
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	017H
	DB	013H
	DB	0a9H
	DB	0aaH
	DB	0baH
	DB	017H
	DB	031H
	DB	09bH
	DB	03fH
	DB	040H
	DB	093H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	093H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	010H
	DB	05cH
	DB	0d3H
	DB	0cH
	DB	014H
	DB	0bdH
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0d0H
	DB	093H
	DB	010H
	DB	0d7H
	DB	0dcH
	DB	0dfH
	DB	018H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	017H
	DB	063H
	DB	064H
	DB	065H
	DB	09bH
	DB	0d4H
	DB	017H
	DB	02aH
	DB	02bH
	DB	025H
	DB	058H
	DB	027H
	DB	06eH
	DB	0a9H
	DB	0aaH
	DB	058H
	DB	059H
	DB	013H
	DB	014H
	DB	02bH
	DB	016H
	DB	031H
	DB	0b9H
	DB	0baH
	DB	017H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	0bdH
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	010H
	DB	0e4H
	DB	00H
	DB	01H
	DB	02H
	DB	015H
	DB	013H
	DB	03bH
	DB	093H
	DB	0d7H
	DB	017H
	DB	0e4H
	DB	0d5H
	DB	050H
	DB	093H
	DB	058H
	DB	059H
	DB	013H
	DB	014H
	DB	091H
	DB	016H
	DB	058H
	DB	059H
	DB	093H
	DB	062H
	DB	093H
	DB	02aH
	DB	02bH
	DB	014H
	DB	067H
	DB	0a9H
	DB	0aaH
	DB	014H
	DB	093H
	DB	093H
	DB	0ecH
	DB	0a9H
	DB	0aaH
	DB	014H
	DB	058H
	DB	059H
	DB	072H
	DB	093H
	DB	010H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	03bH
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	02aH
	DB	02bH
	DB	093H
	DB	08eH
	DB	08fH
	DB	0bcH
	DB	058H
	DB	059H
	DB	082H
	DB	094H
	DB	084H
	DB	07H
	DB	08H
	DB	09H
	DB	0bcH
	DB	0d0H
	DB	09bH
	DB	010H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	093H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	02aH
	DB	02bH
	DB	06aH
	DB	093H
	DB	06cH
	DB	06dH
	DB	06aH
	DB	0bdH
	DB	06cH
	DB	06dH
	DB	0a9H
	DB	0aaH
	DB	06aH
	DB	093H
	DB	06cH
	DB	06dH
	DB	093H
	DB	010H
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	0d5H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	02aH
	DB	02bH
	DB	063H
	DB	064H
	DB	065H
	DB	0b6H
	DB	093H
	DB	0a1H
	DB	0b6H
	DB	063H
	DB	064H
	DB	065H
	DB	0eH
	DB	093H
	DB	093H
	DB	093H
	DB	0f1H
	DB	010H
	DB	0bfH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	093H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	02aH
	DB	02bH
	DB	017H
	DB	0c8H
	DB	0bcH
	DB	0e1H
	DB	0b6H
	DB	034H
	DB	0e1H
	DB	036H
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	0bcH
	DB	016H
	DB	016H
	DB	093H
	DB	093H
	DB	0c9H
	DB	0caH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	0d0H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	010H
	DB	011H
	DB	0cH
	DB	013H
	DB	09bH
	DB	013H
	DB	0e1H
	DB	017H
	DB	0b6H
	DB	017H
	DB	0bcH
	DB	093H
	DB	0efH
	DB	093H
	DB	018H
	DB	01fH
	DB	010H
	DB	011H
	DB	093H
	DB	013H
	DB	093H
	DB	093H
	DB	09bH
	DB	017H
	DB	058H
	DB	059H
	DB	013H
	DB	025H
	DB	015H
	DB	027H
	DB	093H
	DB	01fH
	DB	030H
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	0bdH
	DB	059H
	DB	0a9H
	DB	0aaH
	DB	03aH
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	061H
	DB	093H
	DB	030H
	DB	093H
	DB	072H
	DB	0e1H
	DB	0a9H
	DB	0aaH
	DB	0a1H
	DB	093H
	DB	0bdH
	DB	010H
	DB	03aH
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	04eH
	DB	04fH
	DB	072H
	DB	09bH
	DB	093H
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	057H
	DB	058H
	DB	059H
	DB	058H
	DB	050H
	DB	05cH
	DB	093H
	DB	04eH
	DB	04fH
	DB	050H
	DB	093H
	DB	05bH
	DB	0a9H
	DB	0aaH
	DB	0d4H
	DB	013H
	DB	057H
	DB	058H
	DB	059H
	DB	010H
	DB	011H
	DB	05cH
	DB	013H
	DB	06eH
	DB	093H
	DB	0bcH
	DB	017H
	DB	093H
	DB	0bdH
	DB	0cbH
	DB	06eH
	DB	06bH
	DB	0a9H
	DB	0aaH
	DB	01fH
	DB	06fH
	DB	0bcH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	07bH
	DB	093H
	DB	0c0H
	DB	0a9H
	DB	0aaH
	DB	02bH
	DB	0a9H
	DB	0aaH
	DB	030H
	DB	0c7H
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	0f2H
	DB	0f3H
	DB	03aH
	DB	05cH
	DB	05H
	DB	044H
	DB	093H
	DB	0a9H
	DB	0aaH
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	07cH
	DB	07dH
	DB	093H
	DB	093H
	DB	06bH
	DB	093H
	DB	093H
	DB	093H
	DB	06fH
	DB	04eH
	DB	04fH
	DB	014H
	DB	01aH
	DB	016H
	DB	01cH
	DB	014H
	DB	093H
	DB	016H
	DB	057H
	DB	058H
	DB	059H
	DB	023H
	DB	093H
	DB	05cH
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	062H
	DB	014H
	DB	02fH
	DB	0bcH
	DB	031H
	DB	01bH
	DB	07H
	DB	08H
	DB	035H
	DB	093H
	DB	093H
	DB	038H
	DB	022H
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	093H
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	014H
	DB	093H
	DB	016H
	DB	093H
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	0b2H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	014H
	DB	093H
	DB	016H
	DB	0a9H
	DB	0aaH
	DB	01eH
	DB	03bH
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	093H
	DB	05bH
	DB	05cH
	DB	014H
	DB	093H
	DB	016H
	DB	093H
	DB	0b2H
	DB	063H
	DB	064H
	DB	065H
	DB	0a9H
	DB	0aaH
	DB	032H
	DB	069H
	DB	093H
	DB	014H
	DB	093H
	DB	016H
	DB	06eH
	DB	093H
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	093H
	DB	093H
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	014H
	DB	093H
	DB	016H
	DB	093H
	DB	0e9H
	DB	0e8H
	DB	093H
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	014H
	DB	086H
	DB	016H
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	014H
	DB	093H
	DB	016H
	DB	0a9H
	DB	0aaH
	DB	0a9H
	DB	0aaH
	DB	095H
	DB	0a9H
	DB	0aaH
	DB	014H
	DB	0e5H
	DB	016H
	DB	0a9H
	DB	0aaH
	DB	066H
	DB	014H
	DB	014H
	DB	016H
	DB	016H
	DB	093H
	DB	0a9H
	DB	0aaH
	DB	093H
	DB	093H
	DB	093H
	DB	093H
	DB	093H
	DB	093H
	DB	0bfH
	DB	093H
	DB	093H
	DB	0deH
	DB	093H
	DB	093H
	DB	093H
	DB	0c1H
	DB	0e5H
	DB	0acH
	DB	0acH
	DB	0b1H
	DB	0acH
	DB	0acH
	DB	0acH
	DB	0c2H
	DB	0adH
	DB	06H
	DB	0c2H
	DB	092H
	DB	016H
	DB	09aH
	DB	092H
	DB	092H
	DB	092H
	DB	0bdH
	DB	079H
	DB	0c2H
	DB	076H
	DB	074H
	DB	077H
	DB	017H
	DB	078H
	DB	082H
	DB	0ddH
	DB	070H
	DB	062H
	DB	098H
	DB	098H
	DB	0a0H
	DB	0c3H
	DB	073H
	DB	0c4H
	DB	062H
	DB	028H
	DB	061H
	DB	013H
	DB	0b3H
	DB	054H
	DB	0b3H
	DB	0a0H
	DB	0abH
	DB	0abH
	DB	0abH
	DB	0e2H
	DB	0a0H
	DB	0adH
	DB	0c5H
	DB	0abH
	DB	0c6H
	DB	0fH
	DB	098H
	DB	0aeH
	DB	0abH
	DB	0abH
	DB	0abH
	DB	0ccH
	DB	097H
	DB	0cdH
	DB	0ccH
	DB	0aeH
	DB	0cdH
	DB	097H
	DB	026H
	DB	098H
	DB	097H
	DB	082H
	DB	098H
	DB	03cH
	DB	098H
	DB	097H
	DB	0b8H
	DB	098H
	DB	0b8H
	DB	013H
	DB	0c2H
	DB	0d6H
	DB	098H
	DB	0fH
	DB	0bbH
	DB	0e2H
	DB	098H
	DB	0c2H
	DB	0bbH
	DB	0bbH
	DB	0bbH
	DB	021H
	DB	089H
	DB	0b8H
	DB	098H
	DB	09fH
	DB	098H
	DB	01H
	DB	0eaH
	DB	014H
	DB	070H
	DB	0ebH
	DB	0afH
	DB	0afH
	DB	070H
	DB	06bH
	DB	070H
	DB	070H
	DB	05cH
	DB	0d6H
	DB	013H
	DB	0bH
	DB	014H
	DB	014H
	DB	013H
	DB	072H
	DB	013H
	DB	075H
	DB	014H
	DB	075H
	DB	070H
	DB	016H
	DB	014H
	DB	016H
	DB	013H
	DB	016H
	DB	014H
	DB	014H
	DB	02cH
	DB	013H
	DB	02cH
	DB	013H
	DB	013H
	DB	0edH
	DB	014H
	DB	013H
	DB	020H
	DB	013H
	DB	02cH
	DB	060H
	DB	067H
	DB	010H
	DB	015H
	DB	011H
	DB	062H
	DB	0e7H
	DB	016H
	DB	0edH
	DB	085H
	DB	062H
	DB	013H
	DB	024H
	DB	05H
	DB	0f0H
	DB	02dH
	DB	01H
	DB	02dH
	DB	066H
	DB	0f3H
	DB	033H
	DB	07aH
	DB	013H
	DB	071H
	DB	0eH
	DB	066H
	DB	073H
	DB	071H
	DB	011H
	DB	07bH
	DB	0f6H
	DB	07aH
	DB	013H
	DB	0eH
	DB	014H
	DB	087H
	DB	013H
	DB	03H
	DB	039H
	DB	088H
	DB	04H
	DB	0f7H
	DB	0f7H
	DB	0f7H
	DB	0f7H
	DB	0f7H
	DB	044H
	DB	0f7H
	DB	044H
	ORG $+3
_yy_shift_ofst DW 017H
	DW	0349H
	DW	03daH
	DW	0fff0H
	DW	0349H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	0102H
	DW	07bH
	DW	0ffdcH
	DW	060H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	0ffd3H
	DW	01d4H
	DW	013H
	DW	0237H
	DW	01e8H
	DW	0ffdaH
	DW	0ffdaH
	DW	035H
	DW	0a5H
	DW	0d0H
	DW	0fbH
	DW	0144H
	DW	0189H
	DW	01ceH
	DW	0213H
	DW	0258H
	DW	0283H
	DW	02aeH
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	0283H
	DW	02d9H
	DW	0304H
	DW	0304H
	DW	0359H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	03a3H
	DW	0ffc3H
	DW	0ffc3H
	DW	06H
	DW	06H
	DW	0118H
	DW	016H
	DW	03dH
	DW	021eH
	DW	0f7H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	073H
	DW	01e8H
	DW	06aH
	DW	0ffc2H
	DW	0ffc2H
	DW	083H
	DW	0146H
	DW	021aH
	DW	021aH
	DW	0234H
	DW	0266H
	DW	026aH
	DW	084H
	DW	0237H
	DW	084H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0350H
	DW	0ffcbH
	DW	0ffdcH
	DW	0ffdcH
	DW	0ffdcH
	DW	0ffc2H
	DW	0ffc2H
	DW	0ffc2H
	DW	0fff1H
	DW	0fff1H
	DW	0141H
	DW	015bH
	DW	0270H
	DW	01edH
	DW	0274H
	DW	027aH
	DW	034fH
	DW	021fH
	DW	0319H
	DW	025bH
	DW	0225H
	DW	02b1H
	DW	0237H
	DW	0237H
	DW	0354H
	DW	0237H
	DW	0237H
	DW	034bH
	DW	0237H
	DW	0237H
	DW	0327H
	DW	0237H
	DW	0237H
	DW	0c5H
	DW	0327H
	DW	0237H
	DW	0237H
	DW	0410H
	DW	0410H
	DW	0410H
	DW	0237H
	DW	0237H
	DW	0c5H
	DW	0237H
	DW	0237H
	DW	0c5H
	DW	0237H
	DW	0150H
	DW	02a2H
	DW	0237H
	DW	0237H
	DW	0c5H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0c5H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0c5H
	DW	0c5H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0237H
	DW	0360H
	DW	0381H
	DW	0186H
	DW	036cH
	DW	036cH
	DW	0233H
	DW	03f1H
	DW	03f1H
	DW	03f1H
	DW	03a5H
	DW	03f1H
	DW	03f1H
	DW	0326H
	DW	012eH
	DW	012eH
	DW	048fH
	DW	048fH
	DW	048fH
	DW	048fH
	DW	0482H
	DW	0ffdcH
	DW	0425H
	DW	042aH
	DW	042bH
	DW	042dH
	DW	042cH
	DW	048cH
	DW	0423H
	DW	0437H
	DW	0437H
	DW	0446H
	DW	043aH
	DW	0446H
	DW	043aH
	DW	044dH
	DW	044dH
	DW	0488H
	DW	044dH
	DW	0450H
	DW	044dH
	DW	049fH
	DW	0460H
	DW	048cH
	DW	0460H
	DW	048cH
	DW	0488H
	DW	044dH
	DW	044dH
	DW	044dH
	DW	049fH
	DW	04b1H
	DW	0437H
	DW	04b1H
	DW	0437H
	DW	04b1H
	DW	0437H
	DW	0437H
	DW	04a7H
	DW	044eH
	DW	04b1H
	DW	0437H
	DW	0496H
	DW	0496H
	DW	04c5H
	DW	0425H
	DW	0437H
	DW	04cdH
	DW	04cdH
	DW	04cdH
	DW	04cdH
	DW	0425H
	DW	0496H
	DW	04c5H
	DW	0437H
	DW	04c3H
	DW	04c3H
	DW	0437H
	DW	0437H
	DW	045cH
	DW	0ffc2H
	DW	0ffc2H
	DW	0ffc2H
	DW	0ffc2H
	DW	0ffc2H
	DW	0ffc2H
	DW	01c8H
	DW	0f5H
	DW	02a9H
	DW	0301H
	DW	049H
	DW	0382H
	DW	03dfH
	DW	03e3H
	DW	0407H
	DW	0415H
	DW	0f6H
	DW	0406H
	DW	03dbH
	DW	0424H
	DW	0431H
	DW	043fH
	DW	044bH
	DW	0453H
	DW	045dH
	DW	0463H
	DW	039cH
	DW	0464H
	DW	03f4H
	DW	04e9H
	DW	04d8H
	DW	047dH
	DW	0481H
	DW	0483H
	DW	0484H
	DW	0499H
	DW	0487H
	DW	04e4H
	DW	04e5H
	DW	04e6H
	DW	04e8H
	DW	04edH
	DW	04eaH
	DW	04ebH
	DW	04ecH
	DW	04efH
	DW	0489H
	DW	04eeH
	DW	048bH
	DW	04f0H
	DW	048aH
	DW	04f2H
	DW	04f3H
	DW	0491H
	DW	04f4H
	DW	04f1H
	DW	04ddH
	DW	04f7H
	DW	04dfH
	DW	04f9H
	DW	04fbH
	DW	04faH
	DW	04fdH
	DW	04e7H
	DW	04ffH
	DW	04b4H
	DW	04aeH
	DW	0506H
	DW	0507H
	DW	0502H
	DW	04b7H
	DW	04fcH
	DW	04f5H
	DW	04f6H
	DW	0505H
	DW	04f8H
	DW	0498H
	DW	04bcH
	DW	050cH
	DW	051cH
	DW	0523H
	DW	04c0H
	DW	04feH
	DW	0500H
	DW	04afH
	DW	0517H
	DW	04baH
	DW	051eH
	DW	04bbH
	DW	051fH
	DW	04beH
	DW	04c7H
	DW	04b9H
	DW	0521H
	DW	04b6H
	DW	0522H
	DW	0527H
	DW	0501H
	DW	04b0H
	DW	04b3H
	DW	0525H
	DW	0536H
	DW	0538H
	ORG $+4
_yy_reduce_ofst DW 0ff76H
	DW	0115H
	DW	0222H
	DW	0fff3H
	DW	0beH
	DW	0117H
	DW	02cH
	DW	0152H
	DW	024H
	DW	0cbH
	DW	0127H
	DW	0ff74H
	DW	0154H
	DW	0ffb4H
	DW	05bH
	DW	0158H
	DW	019aH
	DW	0ffeaH
	DW	019fH
	DW	023H
	DW	097H
	DW	014bH
	DW	0185H
	DW	018fH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	01ddH
	DW	01e3H
	DW	0239H
	DW	028fH
	DW	02d1H
	DW	02d3H
	DW	02d8H
	DW	02dbH
	DW	02e4H
	DW	02ebH
	DW	02f3H
	DW	02f5H
	DW	0303H
	DW	0317H
	DW	0325H
	DW	0328H
	DW	0339H
	DW	0357H
	DW	035aH
	DW	035cH
	DW	036bH
	DW	036fH
	DW	037dH
	DW	0383H
	DW	0387H
	DW	0389H
	DW	0397H
	DW	03a1H
	DW	03a6H
	DW	03a8H
	DW	03b1H
	DW	03b3H
	DW	03b9H
	DW	03bbH
	DW	03c1H
	DW	03c3H
	DW	03c6H
	DW	03cbH
	DW	03d3H
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0bbH
	DW	0ffbdH
	DW	0ffbdH
	DW	0106H
	DW	022H
	DW	0ffc8H
	DW	0252H
	DW	0255H
	DW	027eH
	DW	02abH
	DW	0276H
	DW	099H
	DW	0ffbdH
	DW	0c3H
	DW	0ffbdH
	DW	0ffbdH
	DW	0ffbdH
	DW	0112H
	DW	0ff5cH
	DW	0f2H
	DW	0193H
	DW	0ecH
	DW	0ecH
	DW	04aH
	DW	011bH
	DW	015cH
	DW	0269H
	DW	029H
	DW	094H
	DW	01ecH
	DW	0167H
	DW	027dH
	DW	01f6H
	DW	01ffH
	DW	027fH
	DW	02a7H
	DW	02fdH
	DW	0308H
	DW	02daH
	DW	034eH
	DW	0129H
	DW	016bH
	DW	02c2H
	DW	02d4H
	DW	02ffH
	DW	030dH
	DW	0277H
	DW	02e9H
	DW	053H
	DW	0d4H
	DW	0d8H
	DW	0fcH
	DW	0eH
	DW	04bH
	DW	0eH
	DW	0eH
	DW	0149H
	DW	0176H
	DW	0184H
	DW	01eeH
	DW	01f7H
	DW	01eaH
	DW	021cH
	DW	0248H
	DW	0256H
	DW	01f7H
	DW	02acH
	DW	02eeH
	DW	02f7H
	DW	0313H
	DW	02f2H
	DW	0358H
	DW	035bH
	DW	0eH
	DW	02f2H
	DW	0365H
	DW	037eH
	DW	0373H
	DW	0376H
	DW	038aH
	DW	0384H
	DW	038bH
	DW	0eH
	DW	03a2H
	DW	03b6H
	DW	0eH
	DW	03baH
	DW	0370H
	DW	036eH
	DW	03d5H
	DW	03e8H
	DW	0eH
	DW	03ebH
	DW	03ecH
	DW	03edH
	DW	0eH
	DW	03eeH
	DW	03efH
	DW	03f0H
	DW	0eH
	DW	0eH
	DW	03f2H
	DW	03f3H
	DW	03f5H
	DW	03f6H
	DW	03f7H
	DW	03d9H
	DW	03c5H
	DW	03caH
	DW	038dH
	DW	03a7H
	DW	03a9H
	DW	03e1H
	DW	03e2H
	DW	03e4H
	DW	03deH
	DW	03e5H
	DW	03e6H
	DW	03e7H
	DW	03d1H
	DW	03d4H
	DW	0405H
	DW	0408H
	DW	0409H
	DW	040aH
	DW	03ffH
	DW	03e0H
	DW	03ddH
	DW	03e9H
	DW	03eaH
	DW	03f8H
	DW	03f9H
	DW	040bH
	DW	03c9H
	DW	0411H
	DW	0412H
	DW	03faH
	DW	03fbH
	DW	03fdH
	DW	03feH
	DW	040cH
	DW	040dH
	DW	0400H
	DW	040eH
	DW	040fH
	DW	0413H
	DW	0414H
	DW	03d8H
	DW	0416H
	DW	03fcH
	DW	041bH
	DW	0402H
	DW	0418H
	DW	0419H
	DW	041aH
	DW	041cH
	DW	0430H
	DW	0429H
	DW	0435H
	DW	0436H
	DW	0438H
	DW	0439H
	DW	043bH
	DW	0401H
	DW	0403H
	DW	043dH
	DW	043eH
	DW	041dH
	DW	041fH
	DW	0404H
	DW	0417H
	DW	0443H
	DW	0422H
	DW	0426H
	DW	0427H
	DW	0428H
	DW	041eH
	DW	042eH
	DW	0420H
	DW	0447H
	DW	0421H
	DW	042fH
	DW	044fH
	DW	0451H
	DW	0432H
	DW	0449H
	DW	0440H
	DW	0441H
	DW	0433H
	DW	0434H
	DW	043cH
	ORG $+6
_yy_default DW	0250H
	DW	0332H
	DW	0381H
	DW	02c3H
	DW	0381H
	DW	0332H
	DW	0381H
	DW	0332H
	DW	0381H
	DW	034bH
	DW	02c7H
	DW	0368H
	DW	032eH
	DW	0332H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0315H
	DW	0381H
	DW	034bH
	DW	0381H
	DW	026fH
	DW	034bH
	DW	034bH
	DW	02e4H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	02e5H
	DW	0381H
	DW	0331H
	DW	032dH
	DW	0329H
	DW	032bH
	DW	032aH
	DW	02e6H
	DW	02dbH
	DW	02e2H
	DW	02e9H
	DW	02d3H
	DW	0358H
	DW	02ebH
	DW	02ecH
	DW	02f2H
	DW	02f3H
	DW	0369H
	DW	0367H
	DW	0309H
	DW	0308H
	DW	031bH
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	030bH
	DW	0320H
	DW	030aH
	DW	0314H
	DW	0268H
	DW	030cH
	DW	030dH
	DW	02a4H
	DW	0263H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	030eH
	DW	0381H
	DW	030fH
	DW	031cH
	DW	031dH
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0250H
	DW	02c3H
	DW	0381H
	DW	02c3H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	02bdH
	DW	02c7H
	DW	037aH
	DW	0381H
	DW	0381H
	DW	029bH
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0257H
	DW	0255H
	DW	0381H
	DW	02bbH
	DW	0381H
	DW	0381H
	DW	0271H
	DW	0381H
	DW	0381H
	DW	02c5H
	DW	0381H
	DW	0381H
	DW	02caH
	DW	02cbH
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0265H
	DW	0381H
	DW	0381H
	DW	02b0H
	DW	0381H
	DW	0351H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	035fH
	DW	0381H
	DW	0381H
	DW	0381H
	DW	035dH
	DW	0381H
	DW	0381H
	DW	0381H
	DW	02b2H
	DW	02eeH
	DW	033eH
	DW	0381H
	DW	036cH
	DW	036eH
	DW	0381H
	DW	0381H
	DW	02bbH
	DW	02c4H
	DW	0381H
	DW	0381H
	DW	032cH
	DW	02deH
	DW	02deH
	DW	02deH
	DW	0286H
	DW	02deH
	DW	02deH
	DW	0289H
	DW	02e8H
	DW	02e8H
	DW	0254H
	DW	0254H
	DW	0254H
	DW	0254H
	DW	029aH
	DW	0381H
	DW	02e8H
	DW	02dfH
	DW	02e1H
	DW	02d7H
	DW	02e3H
	DW	0381H
	DW	0381H
	DW	02ccH
	DW	02ccH
	DW	02d4H
	DW	02d6H
	DW	02d4H
	DW	02d6H
	DW	02a6H
	DW	02a6H
	DW	0297H
	DW	02a6H
	DW	0289H
	DW	02a6H
	DW	0336H
	DW	033bH
	DW	0381H
	DW	033bH
	DW	0381H
	DW	0297H
	DW	02a6H
	DW	02a6H
	DW	02a6H
	DW	0336H
	DW	0260H
	DW	02ccH
	DW	0260H
	DW	02ccH
	DW	0260H
	DW	02ccH
	DW	02ccH
	DW	0355H
	DW	0357H
	DW	0260H
	DW	02ccH
	DW	02a8H
	DW	02a8H
	DW	02f4H
	DW	02e8H
	DW	02ccH
	DW	02afH
	DW	02afH
	DW	02afH
	DW	02afH
	DW	02e8H
	DW	02a8H
	DW	02f4H
	DW	02ccH
	DW	036bH
	DW	036bH
	DW	02ccH
	DW	02ccH
	DW	0373H
	DW	0279H
	DW	028bH
	DW	028bH
	DW	035aH
	DW	037aH
	DW	037fH
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	02fbH
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0344H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0300H
	DW	02fcH
	DW	0381H
	DW	02fdH
	DW	0381H
	DW	02b5H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	02d8H
	DW	0381H
	DW	02e0H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0353H
	DW	0354H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0381H
	DW	0372H
	DW	0381H
	DW	0381H
	DW	0375H
	DW	0251H
	DW	0381H
	DW	024bH
	DW	024eH
	DW	024dH
	DW	024fH
	DW	0253H
	DW	0256H
	DW	026cH
	DW	026dH
	DW	026eH
	DW	0258H
	DW	0259H
	DW	025aH
	DW	025bH
	DW	025cH
	DW	025dH
	DW	025eH
	DW	0264H
	DW	0266H
	DW	0278H
	DW	027aH
	DW	026aH
	DW	027cH
	DW	02b9H
	DW	02baH
	DW	02f8H
	DW	02b3H
	DW	02b4H
	DW	02b8H
	DW	0303H
	DW	02faH
	DW	02feH
	DW	02ffH
	DW	0301H
	DW	0302H
	DW	0310H
	DW	0311H
	DW	0313H
	DW	0319H
	DW	031fH
	DW	0322H
	DW	0312H
	DW	0317H
	DW	0318H
	DW	031aH
	DW	031eH
	DW	0321H
	DW	02b6H
	DW	02b7H
	DW	0325H
	DW	026bH
	DW	0272H
	DW	0273H
	DW	0276H
	DW	0277H
	DW	0347H
	DW	0349H
	DW	0348H
	DW	034aH
	DW	0275H
	DW	0274H
	DW	0304H
	DW	0307H
	DW	0327H
	DW	0328H
	DW	0360H
	DW	0361H
	DW	0362H
	DW	0363H
	DW	0364H
	DW	0323H
	DW	032fH
	DW	0330H
	DW	02cdH
	DW	0326H
	DW	0316H
	DW	02d9H
	DW	02dcH
	DW	02ddH
	DW	02daH
	DW	02bcH
	DW	02c6H
	DW	02cfH
	DW	02d0H
	DW	02d1H
	DW	02d2H
	DW	02c1H
	DW	02c2H
	DW	02c8H
	DW	02d5H
	DW	02f6H
	DW	02f7H
	DW	02c9H
	DW	02beH
	DW	02bfH
	DW	02c0H
	DW	0324H
	DW	02f9H
	DW	0305H
	DW	0306H
	DW	027dH
	DW	027eH
	DW	0300H
	DW	027fH
	DW	0280H
	DW	0281H
	DW	02a7H
	DW	02aaH
	DW	02abH
	DW	02acH
	DW	0282H
	DW	0295H
	DW	0298H
	DW	0299H
	DW	0283H
	DW	028aH
	DW	0284H
	DW	0285H
	DW	028cH
	DW	028dH
	DW	028eH
	DW	0291H
	DW	0292H
	DW	0293H
	DW	0294H
	DW	028fH
	DW	0290H
	DW	0337H
	DW	0338H
	DW	033cH
	DW	033aH
	DW	0339H
	DW	0287H
	DW	0288H
	DW	0296H
	DW	027bH
	DW	0270H
	DW	0269H
	DW	029cH
	DW	029fH
	DW	02a0H
	DW	02a1H
	DW	02a2H
	DW	02a3H
	DW	02a5H
	DW	029dH
	DW	029eH
	DW	0267H
	DW	025fH
	DW	0261H
	DW	02ceH
	DW	034dH
	DW	0356H
	DW	0352H
	DW	034eH
	DW	034fH
	DW	0350H
	DW	0262H
	DW	0333H
	DW	0334H
	DW	02a9H
	DW	02f0H
	DW	02f1H
	DW	034cH
	DW	0359H
	DW	035bH
	DW	02f5H
	DW	035cH
	DW	035eH
	DW	0377H
	DW	02adH
	DW	02aeH
	DW	02b1H
	DW	033dH
	DW	0365H
	DW	02e7H
	DW	02eaH
	DW	02edH
	DW	02efH
	DW	033fH
	DW	0340H
	DW	0341H
	DW	0342H
	DW	0345H
	DW	0346H
	DW	0343H
	DW	0366H
	DW	036aH
	DW	036dH
	DW	036fH
	DW	0370H
	DW	0371H
	DW	0374H
	DW	0376H
	DW	037bH
	DW	037cH
	DW	037dH
	DW	0380H
	DW	037eH
	DW	0252H
	DW	024cH
	ORG $+4
_yyFallback DB	00H
	DB	00H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	00H
	DB	017H
	DB	017H
	DB	017H
	DB	00H
	DB	017H
	DB	00H
	DB	00H
	DB	00H
	DB	017H
	DB	00H
	DB	00H
	DB	017H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+6
_yyRuleInfo DB	08bH
	DB	01H
	DB	08cH
	DB	02H
	DB	08cH
	DB	01H
	DB	08eH
	DB	01H
	DB	08dH
	DB	01H
	DB	08dH
	DB	03H
	DB	090H
	DB	00H
	DB	090H
	DB	01H
	DB	090H
	DB	03H
	DB	08fH
	DB	03H
	DB	092H
	DB	00H
	DB	092H
	DB	01H
	DB	092H
	DB	02H
	DB	091H
	DB	00H
	DB	091H
	DB	01H
	DB	091H
	DB	01H
	DB	091H
	DB	01H
	DB	08fH
	DB	02H
	DB	08fH
	DB	02H
	DB	08fH
	DB	02H
	DB	08fH
	DB	02H
	DB	094H
	DB	06H
	DB	097H
	DB	00H
	DB	097H
	DB	03H
	DB	096H
	DB	01H
	DB	096H
	DB	00H
	DB	095H
	DB	04H
	DB	095H
	DB	02H
	DB	099H
	DB	03H
	DB	099H
	DB	01H
	DB	09cH
	DB	03H
	DB	09dH
	DB	01H
	DB	0a0H
	DB	01H
	DB	0a1H
	DB	01H
	DB	093H
	DB	01H
	DB	093H
	DB	01H
	DB	093H
	DB	01H
	DB	09eH
	DB	00H
	DB	09eH
	DB	01H
	DB	0a2H
	DB	01H
	DB	0a2H
	DB	04H
	DB	0a2H
	DB	06H
	DB	0a3H
	DB	01H
	DB	0a3H
	DB	02H
	DB	0a4H
	DB	01H
	DB	0a4H
	DB	01H
	DB	09fH
	DB	02H
	DB	09fH
	DB	00H
	DB	0a7H
	DB	03H
	DB	0a7H
	DB	01H
	DB	0a8H
	DB	02H
	DB	0a8H
	DB	04H
	DB	0a8H
	DB	03H
	DB	0a8H
	DB	03H
	DB	0a8H
	DB	02H
	DB	0a8H
	DB	02H
	DB	0a8H
	DB	03H
	DB	0a8H
	DB	05H
	DB	0a8H
	DB	02H
	DB	0a8H
	DB	04H
	DB	0a8H
	DB	04H
	DB	0a8H
	DB	01H
	DB	0a8H
	DB	02H
	DB	0adH
	DB	00H
	DB	0adH
	DB	01H
	DB	0afH
	DB	00H
	DB	0afH
	DB	02H
	DB	0b1H
	DB	02H
	DB	0b1H
	DB	03H
	DB	0b1H
	DB	03H
	DB	0b1H
	DB	03H
	DB	0b2H
	DB	02H
	DB	0b2H
	DB	02H
	DB	0b2H
	DB	01H
	DB	0b2H
	DB	01H
	DB	0b0H
	DB	03H
	DB	0b0H
	DB	02H
	DB	0b3H
	DB	00H
	DB	0b3H
	DB	02H
	DB	0b3H
	DB	02H
	DB	09aH
	DB	00H
	DB	09aH
	DB	02H
	DB	0b4H
	DB	03H
	DB	0b4H
	DB	02H
	DB	0b4H
	DB	01H
	DB	0b5H
	DB	02H
	DB	0b5H
	DB	07H
	DB	0b5H
	DB	05H
	DB	0b5H
	DB	05H
	DB	0b5H
	DB	0aH
	DB	0b7H
	DB	00H
	DB	0b7H
	DB	01H
	DB	0abH
	DB	00H
	DB	0abH
	DB	03H
	DB	0b8H
	DB	00H
	DB	0b8H
	DB	02H
	DB	0b9H
	DB	01H
	DB	0b9H
	DB	01H
	DB	0b9H
	DB	01H
	DB	08fH
	DB	04H
	DB	0bbH
	DB	02H
	DB	0bbH
	DB	00H
	DB	08fH
	DB	08H
	DB	08fH
	DB	04H
	DB	08fH
	DB	01H
	DB	09bH
	DB	01H
	DB	09bH
	DB	03H
	DB	0beH
	DB	01H
	DB	0beH
	DB	02H
	DB	0beH
	DB	01H
	DB	0bdH
	DB	09H
	DB	0bfH
	DB	01H
	DB	0bfH
	DB	01H
	DB	0bfH
	DB	00H
	DB	0c7H
	DB	02H
	DB	0c7H
	DB	00H
	DB	0c0H
	DB	03H
	DB	0c0H
	DB	02H
	DB	0c0H
	DB	04H
	DB	0c8H
	DB	02H
	DB	0c8H
	DB	01H
	DB	0c8H
	DB	00H
	DB	0c1H
	DB	00H
	DB	0c1H
	DB	02H
	DB	0caH
	DB	02H
	DB	0caH
	DB	00H
	DB	0c9H
	DB	06H
	DB	0c9H
	DB	07H
	DB	0ceH
	DB	01H
	DB	0ceH
	DB	01H
	DB	098H
	DB	00H
	DB	098H
	DB	02H
	DB	0bcH
	DB	02H
	DB	0cbH
	DB	01H
	DB	0cbH
	DB	02H
	DB	0cbH
	DB	03H
	DB	0cbH
	DB	04H
	DB	0ccH
	DB	02H
	DB	0ccH
	DB	00H
	DB	0cdH
	DB	04H
	DB	0cdH
	DB	00H
	DB	0c5H
	DB	00H
	DB	0c5H
	DB	03H
	DB	0d1H
	DB	04H
	DB	0d1H
	DB	02H
	DB	0d2H
	DB	01H
	DB	0acH
	DB	01H
	DB	0acH
	DB	01H
	DB	0acH
	DB	00H
	DB	0c3H
	DB	00H
	DB	0c3H
	DB	03H
	DB	0c4H
	DB	00H
	DB	0c4H
	DB	02H
	DB	0c6H
	DB	00H
	DB	0c6H
	DB	02H
	DB	0c6H
	DB	04H
	DB	0c6H
	DB	04H
	DB	08fH
	DB	04H
	DB	0c2H
	DB	00H
	DB	0c2H
	DB	02H
	DB	08fH
	DB	06H
	DB	0d4H
	DB	05H
	DB	0d4H
	DB	03H
	DB	08fH
	DB	08H
	DB	08fH
	DB	05H
	DB	08fH
	DB	06H
	DB	0d5H
	DB	02H
	DB	0d5H
	DB	01H
	DB	0d7H
	DB	03H
	DB	0d7H
	DB	01H
	DB	0d6H
	DB	00H
	DB	0d6H
	DB	03H
	DB	0d0H
	DB	03H
	DB	0d0H
	DB	01H
	DB	0aaH
	DB	01H
	DB	0aaH
	DB	03H
	DB	0a9H
	DB	01H
	DB	0aaH
	DB	01H
	DB	0aaH
	DB	01H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	05H
	DB	0a9H
	DB	01H
	DB	0a9H
	DB	01H
	DB	0aaH
	DB	01H
	DB	0aaH
	DB	01H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	06H
	DB	0aaH
	DB	05H
	DB	0aaH
	DB	04H
	DB	0a9H
	DB	01H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	03H
	DB	0d8H
	DB	01H
	DB	0d8H
	DB	02H
	DB	0d8H
	DB	01H
	DB	0d8H
	DB	02H
	DB	0d9H
	DB	02H
	DB	0d9H
	DB	00H
	DB	0aaH
	DB	04H
	DB	0aaH
	DB	02H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	04H
	DB	0aaH
	DB	02H
	DB	0aaH
	DB	02H
	DB	0aaH
	DB	02H
	DB	0daH
	DB	01H
	DB	0daH
	DB	02H
	DB	0aaH
	DB	05H
	DB	0dbH
	DB	01H
	DB	0dbH
	DB	02H
	DB	0aaH
	DB	05H
	DB	0aaH
	DB	03H
	DB	0aaH
	DB	05H
	DB	0aaH
	DB	04H
	DB	0aaH
	DB	04H
	DB	0aaH
	DB	05H
	DB	0ddH
	DB	05H
	DB	0ddH
	DB	04H
	DB	0deH
	DB	02H
	DB	0deH
	DB	00H
	DB	0dcH
	DB	01H
	DB	0dcH
	DB	00H
	DB	0d3H
	DB	03H
	DB	0d3H
	DB	01H
	DB	0dfH
	DB	01H
	DB	0dfH
	DB	00H
	DB	08fH
	DB	0bH
	DB	0e0H
	DB	01H
	DB	0e0H
	DB	00H
	DB	0aeH
	DB	00H
	DB	0aeH
	DB	03H
	DB	0b6H
	DB	05H
	DB	0b6H
	DB	03H
	DB	0e1H
	DB	01H
	DB	0e2H
	DB	00H
	DB	0e2H
	DB	02H
	DB	08fH
	DB	04H
	DB	08fH
	DB	01H
	DB	08fH
	DB	02H
	DB	08fH
	DB	05H
	DB	08fH
	DB	05H
	DB	08fH
	DB	05H
	DB	08fH
	DB	06H
	DB	08fH
	DB	03H
	DB	0e3H
	DB	01H
	DB	0e3H
	DB	01H
	DB	0a5H
	DB	02H
	DB	0a6H
	DB	02H
	DB	0e5H
	DB	01H
	DB	0e4H
	DB	01H
	DB	0e4H
	DB	00H
	DB	08fH
	DB	05H
	DB	0e6H
	DB	0bH
	DB	0e8H
	DB	01H
	DB	0e8H
	DB	01H
	DB	0e8H
	DB	02H
	DB	0e8H
	DB	00H
	DB	0e9H
	DB	01H
	DB	0e9H
	DB	01H
	DB	0e9H
	DB	03H
	DB	0eaH
	DB	00H
	DB	0eaH
	DB	03H
	DB	0ebH
	DB	00H
	DB	0ebH
	DB	02H
	DB	0e7H
	DB	03H
	DB	0e7H
	DB	00H
	DB	0ecH
	DB	06H
	DB	0ecH
	DB	08H
	DB	0ecH
	DB	05H
	DB	0ecH
	DB	04H
	DB	0ecH
	DB	01H
	DB	0aaH
	DB	04H
	DB	0aaH
	DB	06H
	DB	0baH
	DB	01H
	DB	0baH
	DB	01H
	DB	0baH
	DB	01H
	DB	08fH
	DB	04H
	DB	08fH
	DB	06H
	DB	08fH
	DB	03H
	DB	0eeH
	DB	00H
	DB	0eeH
	DB	02H
	DB	0edH
	DB	01H
	DB	0edH
	DB	00H
	DB	08fH
	DB	01H
	DB	08fH
	DB	03H
	DB	08fH
	DB	01H
	DB	08fH
	DB	03H
	DB	08fH
	DB	06H
	DB	08fH
	DB	06H
	DB	0efH
	DB	01H
	DB	0f0H
	DB	00H
	DB	0f0H
	DB	01H
	DB	08fH
	DB	01H
	DB	08fH
	DB	04H
	DB	0f1H
	DB	07H
	DB	0f2H
	DB	01H
	DB	0f2H
	DB	03H
	DB	0f3H
	DB	00H
	DB	0f3H
	DB	02H
	DB	0f4H
	DB	01H
	DB	0f4H
	DB	03H
	DB	0f5H
	DB	01H
	DB	0f6H
	DB	00H
	DB	0f6H
	DB	02H
	ORG $+2
?zText@?1??keywordCode@@9@9 DB 'BEFOREIGNOREGEXPLAINSTEADDESCAPEACHECKEYC'
	DB	'ONSTRAINTERSECTABLEFTHENDATABASELECTRANSACTIONATURALTERAISELS'
	DB	'EXCEPTRIGGEREFERENCESUNIQUERYATTACHAVINGROUPDATEMPORARYBEGINN'
	DB	'EREINDEXCLUSIVEXISTSBETWEENOTNULLIKECASCADEFERRABLECASECOLLAT'
	DB	'ECREATECURRENT_DATEDELETEDETACHIMMEDIATEJOINSERTMATCHPLANALYZ'
	DB	'EPRAGMABORTVALUESVIRTUALIMITWHENWHERENAMEAFTEREPLACEANDEFAULT'
	DB	'AUTOINCREMENTCASTCOLUMNCOMMITCONFLICTCROSSCURRENT_TIMESTAMPRI'
	DB	'MARYDEFERREDISTINCTDROPFAILFROMFULLGLOBYIFINTOFFSETISNULLORDE'
	DB	'RESTRICTOUTERIGHTROLLBACKROWUNIONUSINGVACUUMVIEWINITIALLY', 00H ; `keywordCode'::`2'::zText
	ORG $+2
?aHash@?1??keywordCode@@9@9 DB 03fH			; `keywordCode'::`2'::aHash
	DB	05cH
	DB	06dH
	DB	03dH
	DB	00H
	DB	026H
	DB	00H
	DB	00H
	DB	045H
	DB	00H
	DB	040H
	DB	00H
	DB	00H
	DB	066H
	DB	04H
	DB	041H
	DB	07H
	DB	00H
	DB	06cH
	DB	048H
	DB	067H
	DB	063H
	DB	00H
	DB	016H
	DB	00H
	DB	00H
	DB	071H
	DB	00H
	DB	06fH
	DB	06aH
	DB	00H
	DB	012H
	DB	050H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	038H
	DB	039H
	DB	00H
	DB	037H
	DB	0bH
	DB	00H
	DB	021H
	DB	04dH
	DB	059H
	DB	00H
	DB	06eH
	DB	058H
	DB	00H
	DB	00H
	DB	02dH
	DB	00H
	DB	05aH
	DB	036H
	DB	00H
	DB	014H
	DB	00H
	DB	072H
	DB	022H
	DB	013H
	DB	00H
	DB	0aH
	DB	061H
	DB	01cH
	DB	053H
	DB	00H
	DB	00H
	DB	074H
	DB	05dH
	DB	02fH
	DB	073H
	DB	029H
	DB	0cH
	DB	02cH
	DB	00H
	DB	04eH
	DB	00H
	DB	057H
	DB	01dH
	DB	00H
	DB	056H
	DB	00H
	DB	00H
	DB	00H
	DB	052H
	DB	04fH
	DB	054H
	DB	04bH
	DB	060H
	DB	06H
	DB	0eH
	DB	05fH
	DB	00H
	DB	044H
	DB	00H
	DB	015H
	DB	04cH
	DB	062H
	DB	01bH
	DB	00H
	DB	070H
	DB	043H
	DB	068H
	DB	031H
	DB	028H
	DB	047H
	DB	00H
	DB	00H
	DB	051H
	DB	064H
	DB	00H
	DB	06bH
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	018H
	DB	00H
	DB	049H
	DB	02aH
	DB	032H
	DB	00H
	DB	010H
	DB	030H
	DB	00H
	DB	025H
	ORG $+1
?aNext@?1??keywordCode@@9@9 DB 00H			; `keywordCode'::`2'::aNext
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	09H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	024H
	DB	027H
	DB	00H
	DB	00H
	DB	019H
	DB	00H
	DB	00H
	DB	01fH
	DB	00H
	DB	00H
	DB	00H
	DB	02bH
	DB	034H
	DB	00H
	DB	00H
	DB	00H
	DB	035H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	033H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01aH
	DB	00H
	DB	08H
	DB	02eH
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03aH
	DB	042H
	DB	00H
	DB	0dH
	DB	00H
	DB	05bH
	DB	055H
	DB	00H
	DB	05eH
	DB	00H
	DB	04aH
	DB	00H
	DB	00H
	DB	03eH
	DB	00H
	DB	023H
	DB	065H
	DB	00H
	DB	00H
	DB	069H
	DB	017H
	DB	01eH
	DB	03cH
	DB	046H
	DB	00H
	DB	00H
	DB	03bH
	DB	00H
	DB	00H
	ORG $+4
?aLen@?1??keywordCode@@9@9 DB 06H			; `keywordCode'::`2'::aLen
	DB	07H
	DB	03H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	03H
	DB	04H
	DB	06H
	DB	04H
	DB	05H
	DB	03H
	DB	0aH
	DB	09H
	DB	05H
	DB	04H
	DB	04H
	DB	03H
	DB	08H
	DB	02H
	DB	06H
	DB	0bH
	DB	02H
	DB	07H
	DB	05H
	DB	05H
	DB	04H
	DB	06H
	DB	07H
	DB	0aH
	DB	06H
	DB	05H
	DB	06H
	DB	06H
	DB	05H
	DB	06H
	DB	04H
	DB	09H
	DB	02H
	DB	05H
	DB	05H
	DB	07H
	DB	05H
	DB	09H
	DB	06H
	DB	07H
	DB	07H
	DB	03H
	DB	04H
	DB	04H
	DB	07H
	DB	03H
	DB	0aH
	DB	04H
	DB	07H
	DB	06H
	DB	0cH
	DB	06H
	DB	06H
	DB	09H
	DB	04H
	DB	06H
	DB	05H
	DB	04H
	DB	07H
	DB	06H
	DB	05H
	DB	06H
	DB	07H
	DB	05H
	DB	04H
	DB	05H
	DB	06H
	DB	05H
	DB	07H
	DB	03H
	DB	07H
	DB	0dH
	DB	02H
	DB	02H
	DB	04H
	DB	06H
	DB	06H
	DB	08H
	DB	05H
	DB	011H
	DB	0cH
	DB	07H
	DB	08H
	DB	08H
	DB	02H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	02H
	DB	02H
	DB	04H
	DB	06H
	DB	02H
	DB	03H
	DB	06H
	DB	05H
	DB	08H
	DB	05H
	DB	05H
	DB	08H
	DB	03H
	DB	05H
	DB	05H
	DB	06H
	DB	04H
	DB	09H
	DB	03H
	ORG $+4
?aOffset@?1??keywordCode@@9@9 DW 00H			; `keywordCode'::`2'::aOffset
	DW	02H
	DW	02H
	DW	06H
	DW	0aH
	DW	0dH
	DW	012H
	DW	017H
	DW	019H
	DW	01aH
	DW	01fH
	DW	021H
	DW	025H
	DW	028H
	DW	02fH
	DW	037H
	DW	03aH
	DW	03dH
	DW	03fH
	DW	041H
	DW	046H
	DW	047H
	DW	04cH
	DW	055H
	DW	056H
	DW	05bH
	DW	05fH
	DW	063H
	DW	066H
	DW	06bH
	DW	071H
	DW	07bH
	DW	07eH
	DW	083H
	DW	088H
	DW	08dH
	DW	090H
	DW	094H
	DW	094H
	DW	098H
	DW	09dH
	DW	0a0H
	DW	0a4H
	DW	0a6H
	DW	0a9H
	DW	0b1H
	DW	0b7H
	DW	0bdH
	DW	0bdH
	DW	0c0H
	DW	0c3H
	DW	0c7H
	DW	0c8H
	DW	0ccH
	DW	0d6H
	DW	0daH
	DW	0e1H
	DW	0e7H
	DW	0f3H
	DW	0f9H
	DW	0ffH
	DW	0108H
	DW	010aH
	DW	0110H
	DW	0115H
	DW	0117H
	DW	011eH
	DW	0123H
	DW	0128H
	DW	012eH
	DW	0134H
	DW	0139H
	DW	013dH
	DW	0140H
	DW	0146H
	DW	014aH
	DW	0151H
	DW	0153H
	DW	015aH
	DW	015cH
	DW	015eH
	DW	0167H
	DW	016bH
	DW	0171H
	DW	0177H
	DW	017fH
	DW	0184H
	DW	0184H
	DW	0194H
	DW	019bH
	DW	01a2H
	DW	01a3H
	DW	01aaH
	DW	01aeH
	DW	01b2H
	DW	01b6H
	DW	01baH
	DW	01bdH
	DW	01bfH
	DW	01c1H
	DW	01c4H
	DW	01c4H
	DW	01c7H
	DW	01caH
	DW	01d0H
	DW	01d4H
	DW	01dcH
	DW	01e0H
	DW	01e5H
	DW	01edH
	DW	01f0H
	DW	01f5H
	DW	01faH
	DW	0200H
	DW	0204H
	DW	0209H
?aCode@?1??keywordCode@@9@9 DB 01dH			; `keywordCode'::`2'::aCode
	DB	068H
	DB	026H
	DB	027H
	DB	02aH
	DB	02H
	DB	029H
	DB	088H
	DB	022H
	DB	049H
	DB	024H
	DB	05fH
	DB	02cH
	DB	05aH
	DB	06dH
	DB	0eH
	DB	059H
	DB	083H
	DB	0bH
	DB	021H
	DB	015H
	DB	06eH
	DB	06H
	DB	062H
	DB	059H
	DB	086H
	DB	030H
	DB	084H
	DB	06cH
	DB	034H
	DB	060H
	DB	05eH
	DB	03H
	DB	01cH
	DB	077H
	DB	076H
	DB	064H
	DB	012H
	DB	012H
	DB	03cH
	DB	05H
	DB	059H
	DB	038H
	DB	085H
	DB	09H
	DB	011H
	DB	03fH
	DB	042H
	DB	010H
	DB	05cH
	DB	02aH
	DB	01eH
	DB	01bH
	DB	067H
	DB	081H
	DB	054H
	DB	0dH
	DB	03aH
	DB	063H
	DB	023H
	DB	08H
	DB	072H
	DB	065H
	DB	02bH
	DB	04H
	DB	01aH
	DB	02fH
	DB	018H
	DB	07bH
	DB	037H
	DB	078H
	DB	082H
	DB	079H
	DB	039H
	DB	019H
	DB	031H
	DB	03dH
	DB	05bH
	DB	061H
	DB	087H
	DB	040H
	DB	01fH
	DB	089H
	DB	0aH
	DB	020H
	DB	059H
	DB	03aH
	DB	03aH
	DB	05dH
	DB	07H
	DB	06fH
	DB	03eH
	DB	069H
	DB	025H
	DB	071H
	DB	059H
	DB	02aH
	DB	075H
	DB	0fH
	DB	07aH
	DB	02eH
	DB	02dH
	DB	066H
	DB	041H
	DB	074H
	DB	032H
	DB	059H
	DB	059H
	DB	0cH
	DB	033H
	DB	06aH
	DB	073H
	DB	035H
	DB	036H
	DB	028H
	DB	06bH
	ORG $+4
_sqlite3IsIdChar DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_sqlite3_version DB '3.4.0', 00H
	ORG $+2
?totals@?1??sqliteDefaultBusyCallback@@9@9 DB 00H	; `sqliteDefaultBusyCallback'::`2'::totals
	DB	01H
	DB	03H
	DB	08H
	DB	012H
	DB	021H
	DB	035H
	DB	04eH
	DB	067H
	DB	080H
	DB	0b2H
	DB	0e4H
?outOfMemBe@?1??sqlite3_errmsg16@@9@9 DB 00H		; `sqlite3_errmsg16'::`2'::outOfMemBe
	DB	06fH
	DB	00H
	DB	075H
	DB	00H
	DB	074H
	DB	00H
	DB	020H
	DB	00H
	DB	06fH
	DB	00H
	DB	066H
	DB	00H
	DB	020H
	DB	00H
	DB	06dH
	DB	00H
	DB	065H
	DB	00H
	DB	06dH
	DB	00H
	DB	06fH
	DB	00H
	DB	072H
	DB	00H
	DB	079H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?misuseBe@?1??sqlite3_errmsg16@@9@9 DB 00H		; `sqlite3_errmsg16'::`2'::misuseBe
	DB	06cH
	DB	00H
	DB	069H
	DB	00H
	DB	062H
	DB	00H
	DB	072H
	DB	00H
	DB	061H
	DB	00H
	DB	072H
	DB	00H
	DB	079H
	DB	00H
	DB	020H
	DB	00H
	DB	072H
	DB	00H
	DB	06fH
	DB	00H
	DB	075H
	DB	00H
	DB	074H
	DB	00H
	DB	069H
	DB	00H
	DB	06eH
	DB	00H
	DB	065H
	DB	00H
	DB	020H
	DB	00H
	DB	063H
	DB	00H
	DB	061H
	DB	00H
	DB	06cH
	DB	00H
	DB	06cH
	DB	00H
	DB	065H
	DB	00H
	DB	064H
	DB	00H
	DB	020H
	DB	00H
	DB	06fH
	DB	00H
	DB	075H
	DB	00H
	DB	074H
	DB	00H
	DB	020H
	DB	00H
	DB	06fH
	DB	00H
	DB	066H
	DB	00H
	DB	020H
	DB	00H
	DB	073H
	DB	00H
	DB	065H
	DB	00H
	DB	071H
	DB	00H
	DB	075H
	DB	00H
	DB	065H
	DB	00H
	DB	06eH
	DB	00H
	DB	063H
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ??_C@_0N@DJJJGBGD@current_date?$AA@
CONST	SEGMENT
??_C@_0N@DJJJGBGD@current_date?$AA@ DB 'current_date', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDICBCEN@current_timestamp?$AA@
CONST	SEGMENT
??_C@_0BC@DDICBCEN@current_timestamp?$AA@ DB 'current_timestamp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IPDKEGPB@current_time?$AA@
CONST	SEGMENT
??_C@_0N@IPDKEGPB@current_time?$AA@ DB 'current_time', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EPGBJPHJ@strftime?$AA@
CONST	SEGMENT
??_C@_08EPGBJPHJ@strftime?$AA@ DB 'strftime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGNPMIBK@datetime?$AA@
CONST	SEGMENT
??_C@_08FGNPMIBK@datetime?$AA@ DB 'datetime', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLCEDBPF@time?$AA@
CONST	SEGMENT
??_C@_04CLCEDBPF@time?$AA@ DB 'time', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JNIHBGGH@date?$AA@
CONST	SEGMENT
??_C@_04JNIHBGGH@date?$AA@ DB 'date', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BPOICPEH@julianday?$AA@
CONST	SEGMENT
??_C@_09BPOICPEH@julianday?$AA@ DB 'julianday', 00H	; `string'
CONST	ENDS
EXTRN	__localtime64:PROC
; Function compile flags: /Ogtpy
;	COMDAT _localtime
_TEXT	SEGMENT
_localtime PROC						; COMDAT
; __Time$ = eax
; File c:\lang\ms8\include\time.inl
; Line 118
	push	eax
	call	__localtime64
	add	esp, 4
; Line 120
	ret	0
_localtime ENDP
_TEXT	ENDS
EXTRN	_isdigit:PROC
; Function compile flags: /Ogtpy
;	COMDAT _getDigits
_TEXT	SEGMENT
_cnt$ = -20						; size = 4
_nextC$ = -16						; size = 4
_min$ = -12						; size = 4
_max$ = -8						; size = 4
_pVal$ = -4						; size = 4
_zDate$ = 8						; size = 4
_getDigits PROC						; COMDAT
; File c:\quirt\comps\exe\dgate\sqlite3.c
; Line 6373
	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zDate$[esp+24]
	push	esi
; Line 6381
	xor	eax, eax
	push	edi
	mov	DWORD PTR _cnt$[esp+36], eax
	lea	esi, DWORD PTR _zDate$[esp+32]
$LL8@getDigits:
; Line 6384
	mov	ebx, DWORD PTR [esi+4]
	add	esi, 4
; Line 6385
	mov	ecx, DWORD PTR [esi+4]
	add	esi, 4
; Line 6386
	mov	edx, DWORD PTR [esi+4]
	add	esi, 4
; Line 6387
	add	esi, 4
	mov	DWORD PTR _min$[esp+36], ecx
	mov	ecx, DWORD PTR [esi]
; Line 6388
	add	esi, 4
	mov	DWORD PTR _max$[esp+36], edx
	mov	edx, DWORD PTR [esi]
; Line 6389
	xor	edi, edi
; Line 6390
	test	ebx, ebx
	mov	DWORD PTR _nextC$[esp+36], ecx
	mov	DWORD PTR _pVal$[esp+36], edx
	je	SHORT $LN16@getDigits
$LL5@getDigits:
; Line 6391
	movzx	eax, BYTE PTR [ebp]
	push	eax
	sub	ebx, 1
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN21@getDigits
; Line 6394
	movsx	edx, BYTE PTR [ebp]
	lea	ecx, DWORD PTR [edi+edi*4]
; Line 6395
	add	ebp, 1
	test	ebx, ebx
	lea	edi, DWORD PTR [edx+ecx*2-48]
	jne	SHORT $LL5@getDigits
	mov	eax, DWORD PTR _cnt$[esp+36]
	mov	ecx, DWORD PTR _nextC$[esp+36]
$LN16@getDigits:
; Line 6397
	cmp	edi, DWORD PTR _min$[esp+36]
	jl	SHORT $end_getDigits$81083
	cmp	edi, DWORD PTR _max$[esp+36]
	jg	SHORT $end_getDigits$81083
	test	ecx, ecx
	je	SHORT $LN2@getDigits
	movsx	edx, BYTE PTR [ebp]
	cmp	ecx, edx
	jne	SHORT $end_getDigits$81083
$LN2@getDigits:
; Line 6400
	mov	edx, DWORD PTR _pVal$[esp+36]
; Line 6401
	add	ebp, 1
; Line 6402
	add	eax, 1
; Line 6403
	test	ecx, ecx
	mov	DWORD PTR [edx], edi
	mov	DWORD PTR _zDate$[esp+32], ebp
	mov	DWORD PTR _cnt$[esp+36], eax
	jne	$LL8@getDigits
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 6407
	add	esp, 20					; 00000014H
	ret	0
$LN21@getDigits:
; Line 6406
	mov	eax, DWORD PTR _cnt$[esp+36]
$end_getDigits$81083:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 6407
	add	esp, 20					; 00000014H
	ret	0
_getDigits ENDP
_TEXT	ENDS
EXTRN	_isspace:PROC
; Function compile flags: /Ogtpy
;	COMDAT _parseTimezone
_TEXT	SEGMENT
_nHr$ = -8						; size = 4
_nMn$ = -4						; size = 4
_parseTimezone PROC					; COMDAT
; _zDate$ = eax
; _p$ = ebx
; Line 6427
	sub	esp, 8
	push	esi
	mov	esi, eax
; Line 6430
	movzx	eax, BYTE PTR [esi]
	push	edi
	push	eax
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@parseTimez
$LL9@parseTimez:
	movzx	ecx, BYTE PTR [esi+1]
	add	esi, 1
	push	ecx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL9@parseTimez
$LN8@parseTimez:
; Line 6431
	mov	DWORD PTR [ebx+28], 0
; Line 6432
	mov	al, BYTE PTR [esi]
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN7@parseTimez
; Line 6433
	or	edi, -1
	jmp	SHORT $LN4@parseTimez
$LN7@parseTimez:
; Line 6434
	cmp	al, 43					; 0000002bH
	jne	$LN5@parseTimez
; Line 6435
	mov	edi, 1
$LN4@parseTimez:
; Line 6440
	lea	edx, DWORD PTR _nMn$[esp+16]
	push	edx
	push	0
	push	59					; 0000003bH
	push	0
	push	2
	lea	eax, DWORD PTR _nHr$[esp+36]
	push	eax
	push	58					; 0000003aH
	push	14					; 0000000eH
	push	0
	add	esi, 1
	push	2
	push	esi
	call	_getDigits
	add	esp, 44					; 0000002cH
	cmp	eax, 2
	je	SHORT $LN3@parseTimez
	pop	edi
; Line 6441
	mov	eax, 1
	pop	esi
; Line 6447
	add	esp, 8
	ret	0
$LN3@parseTimez:
; Line 6444
	mov	eax, DWORD PTR _nHr$[esp+16]
	mov	edx, DWORD PTR _nMn$[esp+16]
	mov	ecx, eax
	shl	ecx, 4
	sub	ecx, eax
	lea	eax, DWORD PTR [edx+ecx*4]
	imul	eax, edi
	add	esi, 5
	mov	DWORD PTR [ebx+28], eax
; Line 6445
	movzx	ecx, BYTE PTR [esi]
	push	ecx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@parseTimez
	npad	5
$LL2@parseTimez:
	movzx	edx, BYTE PTR [esi+1]
	add	esi, 1
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL2@parseTimez
$LN1@parseTimez:
; Line 6446
	xor	eax, eax
	cmp	BYTE PTR [esi], al
	pop	edi
	setne	al
	pop	esi
; Line 6447
	add	esp, 8
	ret	0
$LN5@parseTimez:
; Line 6437
	xor	ecx, ecx
	test	al, al
	setne	cl
	pop	edi
	pop	esi
	mov	eax, ecx
; Line 6447
	add	esp, 8
	ret	0
_parseTimezone ENDP
_TEXT	ENDS
PUBLIC	__real@4048000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@0000000000000000
EXTRN	__fltused:DWORD
;	COMDAT __real@4048000000000000
CONST	SEGMENT
__real@4048000000000000 DQ 04048000000000000r	; 48
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _parseHhMmSs
_TEXT	SEGMENT
_s$ = -28						; size = 4
tv240 = -24						; size = 4
_ms$ = -24						; size = 8
_h$ = -16						; size = 4
_m$ = -12						; size = 4
_rScale$81124 = -8					; size = 8
_parseHhMmSs PROC					; COMDAT
; _zDate$ = eax
; _p$ = edi
; Line 6456
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 32					; 00000020H
	push	ebx
; Line 6458
	fldz
	push	esi
	fstp	QWORD PTR _ms$[esp+40]
	mov	esi, eax
; Line 6459
	lea	eax, DWORD PTR _m$[esp+40]
	push	eax
	xor	ebx, ebx
	push	ebx
	push	59					; 0000003bH
	push	ebx
	push	2
	lea	ecx, DWORD PTR _h$[esp+60]
	push	ecx
	push	58					; 0000003aH
	push	24					; 00000018H
	push	ebx
	push	2
	push	esi
	call	_getDigits
	add	esp, 44					; 0000002cH
	cmp	eax, 2
	je	SHORT $LN8@parseHhMmS
$LN16@parseHhMmS:
; Line 6460
	mov	eax, 1
; Line 6490
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@parseHhMmS:
; Line 6462
	add	esi, 5
; Line 6463
	cmp	BYTE PTR [esi], 58			; 0000003aH
	jne	$LN7@parseHhMmS
; Line 6465
	lea	edx, DWORD PTR _s$[esp+40]
	push	edx
	push	ebx
	push	59					; 0000003bH
	push	ebx
	add	esi, 1
	push	2
	push	esi
	call	_getDigits
	add	esp, 24					; 00000018H
	cmp	eax, 1
; Line 6466
	jne	SHORT $LN16@parseHhMmS
; Line 6468
	add	esi, 2
; Line 6469
	cmp	BYTE PTR [esi], 46			; 0000002eH
	jne	$LN2@parseHhMmS
	movzx	eax, BYTE PTR [esi+1]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@parseHhMmS
; Line 6472
	movzx	ecx, BYTE PTR [esi+1]
	fld1
	add	esi, 1
	fstp	QWORD PTR _rScale$81124[esp+40]
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@parseHhMmS
	npad	12
$LL13@parseHhMmS:
; Line 6473
	movsx	edx, BYTE PTR [esi]
	fld	QWORD PTR __real@4024000000000000
	fld	QWORD PTR _ms$[esp+40]
	movzx	eax, BYTE PTR [esi+1]
	fmul	ST(0), ST(1)
	mov	DWORD PTR tv240[esp+40], edx
; Line 6475
	add	esi, 1
	push	eax
	fild	DWORD PTR tv240[esp+44]
	faddp	ST(1), ST(0)
	fsub	QWORD PTR __real@4048000000000000
	fstp	QWORD PTR _ms$[esp+44]
	fmul	QWORD PTR _rScale$81124[esp+44]
	fstp	QWORD PTR _rScale$81124[esp+44]
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL13@parseHhMmS
$LN3@parseHhMmS:
; Line 6477
	fld	QWORD PTR _ms$[esp+40]
	fdiv	QWORD PTR _rScale$81124[esp+40]
	fstp	QWORD PTR _ms$[esp+40]
; Line 6479
	jmp	SHORT $LN2@parseHhMmS
$LN7@parseHhMmS:
; Line 6480
	mov	DWORD PTR _s$[esp+40], ebx
$LN2@parseHhMmS:
; Line 6486
	fild	DWORD PTR _s$[esp+40]
	mov	ecx, DWORD PTR _h$[esp+40]
	mov	edx, DWORD PTR _m$[esp+40]
	mov	BYTE PTR [edi+42], bl
	fadd	QWORD PTR _ms$[esp+40]
; Line 6487
	mov	ebx, edi
	mov	eax, esi
	mov	BYTE PTR [edi+41], 1
	fstp	QWORD PTR [edi+32]
	mov	DWORD PTR [edi+20], ecx
	mov	DWORD PTR [edi+24], edx
	call	_parseTimezone
	test	eax, eax
	jne	$LN16@parseHhMmS
; Line 6488
	cmp	DWORD PTR [edi+28], eax
; Line 6490
	pop	esi
	setne	al
	mov	BYTE PTR [edi+43], al
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_parseHhMmSs ENDP
_TEXT	ENDS
PUBLIC	__real@40f5180000000000
PUBLIC	__real@40ac200000000000
PUBLIC	__real@404e000000000000
PUBLIC	__real@4097d20000000000
PUBLIC	__real@4076d40000000000
PUBLIC	__real@c03e99a027525461
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@40f5180000000000
CONST	SEGMENT
__real@40f5180000000000 DQ 040f5180000000000r	; 86400
CONST	ENDS
;	COMDAT __real@40ac200000000000
CONST	SEGMENT
__real@40ac200000000000 DQ 040ac200000000000r	; 3600
CONST	ENDS
;	COMDAT __real@404e000000000000
CONST	SEGMENT
__real@404e000000000000 DQ 0404e000000000000r	; 60
CONST	ENDS
;	COMDAT __real@4097d20000000000
CONST	SEGMENT
__real@4097d20000000000 DQ 04097d20000000000r	; 1524.5
CONST	ENDS
;	COMDAT __real@4076d40000000000
CONST	SEGMENT
__real@4076d40000000000 DQ 04076d40000000000r	; 365.25
CONST	ENDS
;	COMDAT __real@c03e99a027525461
CONST	SEGMENT
__real@c03e99a027525461 DQ 0c03e99a027525461r	; -30.6001
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _computeJD
_TEXT	SEGMENT
tv262 = -4						; size = 4
tv258 = -4						; size = 4
tv247 = -4						; size = 4
tv239 = -4						; size = 4
tv237 = -4						; size = 4
_computeJD PROC						; COMDAT
; _p$ = esi
; Line 6498
	push	ecx
; Line 6501
	cmp	BYTE PTR [esi+42], 0
	jne	$LN1@computeJD
; Line 6502
	cmp	BYTE PTR [esi+40], 0
	push	ebx
	push	ebp
	push	edi
	je	$LN5@computeJD
; Line 6504
	mov	ecx, DWORD PTR [esi+12]
; Line 6511
	cmp	ecx, 2
	mov	ebp, DWORD PTR [esi+8]
	mov	ebx, DWORD PTR [esi+16]
	jg	SHORT $LN3@computeJD
$LN9@computeJD:
; Line 6512
	sub	ebp, 1
; Line 6513
	add	ecx, 12					; 0000000cH
$LN3@computeJD:
; Line 6515
	mov	eax, 1374389535				; 51eb851fH
	imul	ebp
; Line 6518
	add	ecx, 1
; Line 6519
	mov	DWORD PTR tv262[esp+16], ecx
	sar	edx, 5
	mov	edi, edx
	fild	DWORD PTR tv262[esp+16]
	shr	edi, 31					; 0000001fH
	add	edi, edx
	fmul	QWORD PTR __real@c03e99a027525461
	call	__ftol2_sse
	add	ebp, 4716				; 0000126cH
	mov	DWORD PTR tv258[esp+16], ebp
	fild	DWORD PTR tv258[esp+16]
	mov	DWORD PTR tv237[esp+16], eax
	fmul	QWORD PTR __real@4076d40000000000
	call	__ftol2_sse
	mov	ecx, eax
	mov	eax, DWORD PTR tv237[esp+16]
	sub	ecx, eax
	mov	eax, edi
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	add	ecx, eax
	sub	ecx, edi
; Line 6521
	cmp	BYTE PTR [esi+41], 0
	lea	edx, DWORD PTR [ecx+ebx+2]
	mov	DWORD PTR tv247[esp+16], edx
	pop	edi
	fild	DWORD PTR tv247[esp+12]
	pop	ebp
	mov	BYTE PTR [esi+42], 1
	pop	ebx
	fsub	QWORD PTR __real@4097d20000000000
	fst	QWORD PTR [esi]
	je	SHORT $LN11@computeJD
; Line 6523
	cmp	BYTE PTR [esi+43], 0
	fild	DWORD PTR [esi+24]
	fmul	QWORD PTR __real@404e000000000000
	fild	DWORD PTR [esi+20]
	fmul	QWORD PTR __real@40ac200000000000
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [esi+32]
	fld	QWORD PTR __real@40f5180000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR [esi]
	je	SHORT $LN14@computeJD
; Line 6524
	mov	eax, DWORD PTR [esi+28]
	mov	ecx, eax
	shl	ecx, 4
	sub	ecx, eax
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv239[esp+4], ecx
	fild	DWORD PTR tv239[esp+4]
; Line 6525
	mov	BYTE PTR [esi+40], 0
; Line 6526
	mov	BYTE PTR [esi+41], 0
; Line 6527
	mov	BYTE PTR [esi+43], 0
	fdivrp	ST(2), ST(0)
	fsubrp	ST(1), ST(0)
	fstp	QWORD PTR [esi]
; Line 6530
	pop	ecx
	ret	0
$LN5@computeJD:
; Line 6508
	mov	ecx, 1
	mov	ebp, 2000				; 000007d0H
; Line 6509
	mov	ebx, ecx
; Line 6511
	jmp	$LN9@computeJD
$LN14@computeJD:
; Line 6523
	fstp	ST(0)
$LN11@computeJD:
	fstp	ST(0)
$LN1@computeJD:
; Line 6530
	pop	ecx
	ret	0
_computeJD ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _parseYyyyMmDd
_TEXT	SEGMENT
_M$ = -8						; size = 4
_D$ = -4						; size = 4
_Y$ = 8							; size = 4
_zDate$ = 8						; size = 4
_parseYyyyMmDd PROC					; COMDAT
; _p$ = eax
; Line 6544
	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zDate$[esp+12]
; Line 6547
	cmp	BYTE PTR [ebp], 45			; 0000002dH
	push	esi
	mov	esi, eax
	jne	SHORT $LN11@parseYyyyM
; Line 6548
	add	ebp, 1
; Line 6549
	mov	ebx, 1
; Line 6550
	jmp	SHORT $LN10@parseYyyyM
$LN11@parseYyyyM:
; Line 6551
	xor	ebx, ebx
$LN10@parseYyyyM:
; Line 6553
	lea	eax, DWORD PTR _D$[esp+20]
	push	eax
	push	0
	push	31					; 0000001fH
	push	1
	push	2
	lea	ecx, DWORD PTR _M$[esp+40]
	push	ecx
	push	45					; 0000002dH
	push	12					; 0000000cH
	push	1
	push	2
	lea	edx, DWORD PTR _Y$[esp+56]
	push	edx
	push	45					; 0000002dH
	push	9999					; 0000270fH
	push	0
	push	4
	push	ebp
	call	_getDigits
	add	esp, 64					; 00000040H
	cmp	eax, 3
; Line 6554
	jne	SHORT $LN3@parseYyyyM
; Line 6556
	add	ebp, 10					; 0000000aH
	npad	7
$LL8@parseYyyyM:
; Line 6557
	movzx	eax, BYTE PTR [ebp]
	push	eax
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@parseYyyyM
	cmp	BYTE PTR [ebp], 84			; 00000054H
	jne	SHORT $LN7@parseYyyyM
$LN6@parseYyyyM:
	add	ebp, 1
	jmp	SHORT $LL8@parseYyyyM
$LN7@parseYyyyM:
	push	edi
; Line 6558
	mov	edi, esi
	mov	eax, ebp
	call	_parseHhMmSs
	test	eax, eax
	pop	edi
	je	SHORT $LN2@parseYyyyM
; Line 6560
	cmp	BYTE PTR [ebp], 0
	jne	SHORT $LN3@parseYyyyM
; Line 6561
	mov	BYTE PTR [esi+41], 0
$LN2@parseYyyyM:
; Line 6567
	test	ebx, ebx
	mov	eax, DWORD PTR _Y$[esp+16]
	mov	BYTE PTR [esi+42], 0
	mov	BYTE PTR [esi+40], 1
	je	SHORT $LN15@parseYyyyM
	neg	eax
$LN15@parseYyyyM:
; Line 6570
	cmp	BYTE PTR [esi+43], 0
	mov	ecx, DWORD PTR _M$[esp+20]
	mov	edx, DWORD PTR _D$[esp+20]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], ecx
	mov	DWORD PTR [esi+16], edx
	je	SHORT $LN1@parseYyyyM
; Line 6571
	call	_computeJD
$LN1@parseYyyyM:
	pop	esi
	pop	ebp
; Line 6573
	xor	eax, eax
	pop	ebx
; Line 6574
	add	esp, 8
	ret	0
$LN3@parseYyyyM:
	pop	esi
	pop	ebp
; Line 6563
	mov	eax, 1
	pop	ebx
; Line 6574
	add	esp, 8
	ret	0
_parseYyyyMmDd ENDP
_TEXT	ENDS
PUBLIC	__real@403e99a027525461
PUBLIC	__real@405e866666666666
PUBLIC	__real@40e1d58800000000
PUBLIC	__real@413c7dd040000000
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@403e99a027525461
CONST	SEGMENT
__real@403e99a027525461 DQ 0403e99a027525461r	; 30.6001
CONST	ENDS
;	COMDAT __real@405e866666666666
CONST	SEGMENT
__real@405e866666666666 DQ 0405e866666666666r	; 122.1
CONST	ENDS
;	COMDAT __real@40e1d58800000000
CONST	SEGMENT
__real@40e1d58800000000 DQ 040e1d58800000000r	; 36524.3
CONST	ENDS
;	COMDAT __real@413c7dd040000000
CONST	SEGMENT
__real@413c7dd040000000 DQ 0413c7dd040000000r	; 1.86722e+006
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _computeYMD
_TEXT	SEGMENT
_C$ = -8						; size = 4
_B$ = -8						; size = 4
_Z$ = -8						; size = 4
tv232 = -4						; size = 4
_E$ = -4						; size = 4
_computeYMD PROC					; COMDAT
; _p$ = edi
; Line 6615
	sub	esp, 8
; Line 6617
	cmp	BYTE PTR [edi+40], 0
	jne	$LN4@computeYMD
; Line 6618
	cmp	BYTE PTR [edi+42], 0
	jne	SHORT $LN2@computeYMD
; Line 6620
	mov	eax, 1
	mov	DWORD PTR [edi+8], 2000			; 000007d0H
	mov	DWORD PTR [edi+12], eax
; Line 6621
	mov	DWORD PTR [edi+16], eax
; Line 6635
	mov	BYTE PTR [edi+40], al
; Line 6636
	add	esp, 8
	ret	0
$LN2@computeYMD:
; Line 6623
	fld	QWORD PTR [edi]
	push	ebx
	fadd	QWORD PTR __real@3fe0000000000000
	push	ebp
	push	esi
	call	__ftol2_sse
	mov	esi, eax
	mov	DWORD PTR _Z$[esp+20], esi
; Line 6624
	fild	DWORD PTR _Z$[esp+20]
	fsub	QWORD PTR __real@413c7dd040000000
	fdiv	QWORD PTR __real@40e1d58800000000
	call	__ftol2_sse
	mov	ecx, eax
; Line 6625
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
; Line 6626
	sub	ecx, eax
	lea	esi, DWORD PTR [ecx+esi+1525]
	mov	DWORD PTR _B$[esp+20], esi
; Line 6627
	fild	DWORD PTR _B$[esp+20]
	fsub	QWORD PTR __real@405e866666666666
	fld	QWORD PTR __real@4076d40000000000
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
	mov	DWORD PTR _C$[esp+20], eax
; Line 6628
	fimul	DWORD PTR _C$[esp+20]
	call	__ftol2_sse
	mov	ebp, eax
; Line 6629
	mov	eax, esi
	sub	eax, ebp
	mov	DWORD PTR tv232[esp+20], eax
	fild	DWORD PTR tv232[esp+20]
	fld	QWORD PTR __real@403e99a027525461
	fdiv	ST(1), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
	mov	ebx, eax
	mov	DWORD PTR _E$[esp+20], ebx
; Line 6631
	fimul	DWORD PTR _E$[esp+20]
	call	__ftol2_sse
	sub	esi, eax
	sub	esi, ebp
; Line 6632
	cmp	ebx, 14					; 0000000eH
	mov	DWORD PTR [edi+16], esi
	lea	eax, DWORD PTR [ebx-1]
	jl	SHORT $LN7@computeYMD
	lea	eax, DWORD PTR [ebx-13]
$LN7@computeYMD:
	pop	esi
	pop	ebp
	mov	DWORD PTR [edi+12], eax
; Line 6633
	cmp	eax, 2
	mov	eax, DWORD PTR _C$[esp+12]
	pop	ebx
	jle	SHORT $LN8@computeYMD
	add	eax, -4716				; ffffed94H
	mov	DWORD PTR [edi+8], eax
; Line 6635
	mov	BYTE PTR [edi+40], 1
; Line 6636
	add	esp, 8
	ret	0
$LN8@computeYMD:
; Line 6633
	add	eax, -4715				; ffffed95H
	mov	DWORD PTR [edi+8], eax
; Line 6635
	mov	BYTE PTR [edi+40], 1
$LN4@computeYMD:
; Line 6636
	add	esp, 8
	ret	0
_computeYMD ENDP
_TEXT	ENDS
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@4194997000000000
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@4194997000000000
CONST	SEGMENT
__real@4194997000000000 DQ 04194997000000000r	; 8.64e+007
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _computeHMS
_TEXT	SEGMENT
tv202 = -4						; size = 4
tv196 = -4						; size = 4
tv178 = -4						; size = 4
_s$ = -4						; size = 4
_computeHMS PROC					; COMDAT
; _p$ = eax
; Line 6641
	push	ecx
	push	esi
	mov	esi, eax
; Line 6643
	cmp	BYTE PTR [esi+41], 0
	jne	$LN2@computeHMS
; Line 6644
	call	_computeJD
; Line 6645
	fld	QWORD PTR [esi]
	fld	QWORD PTR __real@3fe0000000000000
	fadd	ST(1), ST(0)
; Line 6647
	fld	ST(1)
	call	__ftol2_sse
	mov	DWORD PTR tv202[esp+8], eax
	fild	DWORD PTR tv202[esp+8]
	fsubp	ST(2), ST(0)
	fxch	ST(1)
	fmul	QWORD PTR __real@4194997000000000
	faddp	ST(1), ST(0)
	call	__ftol2_sse
	mov	DWORD PTR tv196[esp+8], eax
	fild	DWORD PTR tv196[esp+8]
	fmul	QWORD PTR __real@3f50624dd2f1a9fc
; Line 6648
	fld	ST(0)
	call	__ftol2_sse
	mov	ecx, eax
; Line 6650
	mov	eax, -1851608123			; 91a2b3c5H
	imul	ecx
	add	edx, ecx
	sar	edx, 11					; 0000000bH
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR [esi+20], eax
; Line 6651
	imul	eax, -3600				; fffff1f0H
	mov	DWORD PTR _s$[esp+8], ecx
	add	ecx, eax
; Line 6652
	mov	eax, -2004318071			; 88888889H
	fisub	DWORD PTR _s$[esp+8]
	imul	ecx
	fstp	QWORD PTR [esi+32]
	add	edx, ecx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 6653
	mov	edx, eax
	shl	edx, 4
	sub	edx, eax
	add	edx, edx
	add	edx, edx
	sub	ecx, edx
	mov	DWORD PTR tv178[esp+8], ecx
	mov	DWORD PTR [esi+24], eax
; Line 6654
	mov	BYTE PTR [esi+41], 1
	fild	DWORD PTR tv178[esp+8]
	fadd	QWORD PTR [esi+32]
	fstp	QWORD PTR [esi+32]
$LN2@computeHMS:
	pop	esi
; Line 6655
	pop	ecx
	ret	0
_computeHMS ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _computeYMD_HMS
_TEXT	SEGMENT
_computeYMD_HMS PROC					; COMDAT
; _p$ = eax
; Line 6660
	push	edi
	mov	edi, eax
; Line 6661
	call	_computeYMD
; Line 6662
	mov	eax, edi
	pop	edi
	jmp	_computeHMS
_computeYMD_HMS ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _clearYMD_HMS_TZ
_TEXT	SEGMENT
_clearYMD_HMS_TZ PROC					; COMDAT
; _p$ = eax
; Line 6669
	xor	cl, cl
	mov	BYTE PTR [eax+40], cl
; Line 6670
	mov	BYTE PTR [eax+41], cl
; Line 6671
	mov	BYTE PTR [eax+43], cl
; Line 6672
	ret	0
_clearYMD_HMS_TZ ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsClose
_TEXT	SEGMENT
_sqlite3OsClose PROC					; COMDAT
; _pId$ = ecx
; Line 7352
	test	ecx, ecx
	je	SHORT $LN2@sqlite3OsC
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN2@sqlite3OsC
; Line 7353
	mov	eax, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
; Line 7357
	ret	0
$LN2@sqlite3OsC:
; Line 7355
	xor	eax, eax
; Line 7357
	ret	0
_sqlite3OsClose ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsOpenDirectory
_TEXT	SEGMENT
_sqlite3OsOpenDirectory PROC				; COMDAT
; _id$ = eax
; _zName$ = edx
; Line 7359
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	add	esp, 8
; Line 7360
	ret	0
_sqlite3OsOpenDirectory ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsRead
_TEXT	SEGMENT
_pBuf$ = 8						; size = 4
_sqlite3OsRead PROC					; COMDAT
; _id$ = eax
; _amt$ = edx
; Line 7362
	mov	ecx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR _pBuf$[esp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 12					; 0000000cH
; Line 7363
	ret	0
_sqlite3OsRead ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsWrite
_TEXT	SEGMENT
_pBuf$ = 8						; size = 4
_sqlite3OsWrite PROC					; COMDAT
; _id$ = eax
; _amt$ = edx
; Line 7365
	mov	ecx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR _pBuf$[esp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	add	esp, 12					; 0000000cH
; Line 7366
	ret	0
_sqlite3OsWrite ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsSeek
_TEXT	SEGMENT
_offset$ = 8						; size = 8
_sqlite3OsSeek PROC					; COMDAT
; _id$ = eax
; Line 7368
	mov	edx, DWORD PTR _offset$[esp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR _offset$[esp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	add	esp, 12					; 0000000cH
; Line 7369
	ret	0
_sqlite3OsSeek ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsTruncate
_TEXT	SEGMENT
_size$ = 8						; size = 8
_sqlite3OsTruncate PROC					; COMDAT
; _id$ = eax
; Line 7371
	mov	edx, DWORD PTR _size$[esp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR _size$[esp]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	add	esp, 12					; 0000000cH
; Line 7372
	ret	0
_sqlite3OsTruncate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsSync
_TEXT	SEGMENT
_sqlite3OsSync PROC					; COMDAT
; _id$ = eax
; _fullsync$ = edx
; Line 7374
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+24]
	call	eax
	add	esp, 8
; Line 7375
	ret	0
_sqlite3OsSync ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsSetFullSync
_TEXT	SEGMENT
_sqlite3OsSetFullSync PROC				; COMDAT
; _id$ = eax
; _value$ = edx
; Line 7377
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+28]
	call	eax
	add	esp, 8
; Line 7378
	ret	0
_sqlite3OsSetFullSync ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsFileSize
_TEXT	SEGMENT
_sqlite3OsFileSize PROC					; COMDAT
; _id$ = eax
; _pSize$ = edx
; Line 7380
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	call	eax
	add	esp, 8
; Line 7381
	ret	0
_sqlite3OsFileSize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsLock
_TEXT	SEGMENT
_sqlite3OsLock PROC					; COMDAT
; _id$ = eax
; _lockType$ = edx
; Line 7383
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+40]
	call	eax
	add	esp, 8
; Line 7384
	ret	0
_sqlite3OsLock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsUnlock
_TEXT	SEGMENT
_sqlite3OsUnlock PROC					; COMDAT
; _id$ = eax
; _lockType$ = edx
; Line 7386
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+44]
	call	eax
	add	esp, 8
; Line 7387
	ret	0
_sqlite3OsUnlock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsCheckReservedLock
_TEXT	SEGMENT
_sqlite3OsCheckReservedLock PROC			; COMDAT
; _id$ = eax
; Line 7389
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+52]
	push	eax
	call	edx
	add	esp, 4
; Line 7390
	ret	0
_sqlite3OsCheckReservedLock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OsSectorSize
_TEXT	SEGMENT
_sqlite3OsSectorSize PROC				; COMDAT
; _id$ = ecx
; Line 7392
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+56]
; Line 7393
	test	eax, eax
	je	SHORT $LN3@sqlite3OsS
	push	ecx
	call	eax
	add	esp, 4
; Line 7394
	ret	0
$LN3@sqlite3OsS:
; Line 7393
	mov	eax, 512				; 00000200H
; Line 7394
	ret	0
_sqlite3OsSectorSize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _et_getdigit
_TEXT	SEGMENT
_digit$ = -4						; size = 4
_et_getdigit PROC					; COMDAT
; _val$ = esi
; _cnt$ = ecx
; Line 8410
	push	ecx
; Line 8413
	mov	eax, DWORD PTR [ecx]
	cmp	eax, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ecx], edx
	jl	SHORT $LN1@et_getdigi
	mov	eax, 48					; 00000030H
; Line 8419
	pop	ecx
	ret	0
$LN1@et_getdigi:
; Line 8414
	fld	QWORD PTR [esi]
	call	__ftol2_sse
	mov	DWORD PTR _digit$[esp+4], eax
; Line 8417
	fild	DWORD PTR _digit$[esp+4]
	add	eax, 48					; 00000030H
	fsubr	QWORD PTR [esi]
	fmul	QWORD PTR __real@4024000000000000
	fstp	QWORD PTR [esi]
; Line 8419
	pop	ecx
	ret	0
_et_getdigit ENDP
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Ogtpy
;	COMDAT _mout
_TEXT	SEGMENT
_arg$ = 8						; size = 4
_zNewText$ = 12						; size = 4
_nNewChar$ = 16						; size = 4
_mout	PROC						; COMDAT
; Line 8979
	push	ebx
; Line 8981
	mov	ebx, DWORD PTR _nNewChar$[esp]
	push	esi
	mov	esi, DWORD PTR _arg$[esp+4]
; Line 8982
	mov	ecx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+16]
	add	DWORD PTR [esi+12], ebx
	lea	edx, DWORD PTR [ecx+ebx+1]
	cmp	edx, eax
	push	edi
	jle	SHORT $LN13@mout
; Line 8983
	mov	edx, DWORD PTR [esi+20]
	test	edx, edx
	jne	SHORT $LN9@mout
; Line 8984
	sub	eax, ecx
	sub	eax, 1
	mov	ebx, eax
; Line 8985
	jmp	SHORT $LN13@mout
$LN9@mout:
; Line 8987
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, DWORD PTR [esi]
	lea	edi, DWORD PTR [ecx+ebx*2+1]
; Line 8988
	push	edi
	jne	SHORT $LN7@mout
	push	0
	call	edx
	add	esp, 8
; Line 8989
	test	eax, eax
	mov	DWORD PTR [esi+4], eax
	je	SHORT $LN3@mout
	mov	ecx, DWORD PTR [esi+8]
	test	ecx, ecx
	je	SHORT $LN3@mout
; Line 8990
	push	ecx
	mov	ecx, DWORD PTR [esi]
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 8992
	jmp	SHORT $LN3@mout
$LN7@mout:
; Line 8994
	push	eax
	call	edx
	add	esp, 8
; Line 8995
	test	eax, eax
	je	SHORT $LN2@mout
; Line 8996
	mov	DWORD PTR [esi+4], eax
$LN3@mout:
; Line 9001
	mov	DWORD PTR [esi+16], edi
$LN13@mout:
; Line 9004
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN2@mout
; Line 9005
	test	ebx, ebx
	jle	SHORT $LN1@mout
; Line 9006
	mov	edx, DWORD PTR _zNewText$[esp+8]
	mov	ecx, DWORD PTR [esi+8]
	push	ebx
	push	edx
	add	ecx, eax
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 9007
	add	DWORD PTR [esi+8], ebx
$LN1@mout:
; Line 9009
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [edx+eax], 0
$LN2@mout:
	pop	edi
	pop	esi
	pop	ebx
; Line 9011
	ret	0
_mout	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemHandleBom
_TEXT	SEGMENT
_bom$ = -4						; size = 1
_sqlite3VdbeMemHandleBom PROC				; COMDAT
; _pMem$ = ecx
; Line 10021
	push	ecx
; Line 10025
	mov	edx, DWORD PTR [ecx+20]
	push	edi
	xor	edi, edi
	test	edx, edx
	jl	SHORT $LN6@sqlite3Vdb
	cmp	edx, 1
	jle	SHORT $LN95@sqlite3Vdb
$LN6@sqlite3Vdb:
	push	ebx
	push	esi
; Line 10026
	mov	esi, DWORD PTR [ecx+16]
	mov	al, BYTE PTR [esi]
; Line 10028
	cmp	al, 254					; 000000feH
	mov	bl, BYTE PTR [esi+1]
	jne	SHORT $LN5@sqlite3Vdb
	cmp	bl, 255					; 000000ffH
	jne	SHORT $LN98@sqlite3Vdb
; Line 10029
	mov	BYTE PTR _bom$[esp+16], 3
; Line 10031
	jmp	SHORT $LN94@sqlite3Vdb
$LN5@sqlite3Vdb:
	cmp	al, 255					; 000000ffH
	jne	SHORT $LN98@sqlite3Vdb
	cmp	bl, 254					; 000000feH
	jne	SHORT $LN98@sqlite3Vdb
; Line 10032
	mov	BYTE PTR _bom$[esp+16], 2
$LN94@sqlite3Vdb:
; Line 10049
	mov	eax, DWORD PTR _bom$[esp+16]
	push	-1
	add	edx, -2					; fffffffeH
	test	BYTE PTR [ecx+24], 64			; 00000040H
	push	eax
	push	edx
	je	SHORT $LN2@sqlite3Vdb
	mov	edi, DWORD PTR [ecx+28]
	lea	edx, DWORD PTR [esi+2]
	push	edx
	push	ecx
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+28], 0
	call	_sqlite3VdbeMemSetStr
; Line 10050
	push	esi
	mov	ebx, eax
	call	edi
	add	esp, 24					; 00000018H
	pop	esi
; Line 10056
	mov	eax, ebx
	pop	ebx
	pop	edi
; Line 10057
	pop	ecx
	ret	0
$LN2@sqlite3Vdb:
; Line 10053
	add	esi, 2
	push	esi
	push	ecx
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
	pop	esi
	pop	ebx
	pop	edi
; Line 10057
	pop	ecx
	ret	0
$LN95@sqlite3Vdb:
; Line 10056
	mov	eax, edi
	pop	edi
; Line 10057
	pop	ecx
	ret	0
$LN98@sqlite3Vdb:
	pop	esi
	pop	ebx
; Line 10056
	mov	eax, edi
	pop	edi
; Line 10057
	pop	ecx
	ret	0
_sqlite3VdbeMemHandleBom ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Utf8CharLen
_TEXT	SEGMENT
_sqlite3Utf8CharLen PROC				; COMDAT
; _zIn$ = ecx
; _nByte$ = edx
; Line 10068
	xor	eax, eax
; Line 10071
	test	edx, edx
	push	esi
	jl	SHORT $LN7@sqlite3Utf
; Line 10072
	lea	esi, DWORD PTR [ecx+edx]
; Line 10073
	jmp	SHORT $LN10@sqlite3Utf
$LN7@sqlite3Utf:
; Line 10074
	or	esi, -1
$LN10@sqlite3Utf:
; Line 10077
	cmp	BYTE PTR [ecx], al
	je	SHORT $LN4@sqlite3Utf
$LL5@sqlite3Utf:
	cmp	ecx, esi
	jae	SHORT $LN4@sqlite3Utf
; Line 10078
	mov	dl, BYTE PTR [ecx]
	add	ecx, 1
	cmp	dl, 192					; 000000c0H
	jb	SHORT $LN1@sqlite3Utf
	mov	dl, BYTE PTR [ecx]
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN1@sqlite3Utf
	npad	5
$LL2@sqlite3Utf:
	mov	dl, BYTE PTR [ecx+1]
	add	ecx, 1
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	je	SHORT $LL2@sqlite3Utf
$LN1@sqlite3Utf:
; Line 10079
	add	eax, 1
	cmp	BYTE PTR [ecx], 0
	jne	SHORT $LL5@sqlite3Utf
$LN4@sqlite3Utf:
	pop	esi
; Line 10082
	ret	0
_sqlite3Utf8CharLen ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Utf16ByteLen
_TEXT	SEGMENT
_sqlite3Utf16ByteLen PROC				; COMDAT
; _zIn$ = ebx
; _nChar$ = edi
; Line 10109
	push	ebp
	push	esi
; Line 10110
	mov	ecx, 1
; Line 10111
	mov	eax, ebx
; Line 10112
	xor	esi, esi
	npad	5
$LL5@sqlite3Utf@2:
; Line 10128
	test	edi, edi
	jl	SHORT $LN3@sqlite3Utf@2
	cmp	esi, edi
	jge	SHORT $LN4@sqlite3Utf@2
$LN3@sqlite3Utf@2:
; Line 10129
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR [eax+1]
	add	eax, 1
	shl	edx, 8
	add	ecx, edx
	lea	edx, DWORD PTR [ecx-55296]
	add	eax, 1
	cmp	edx, 2047				; 000007ffH
	ja	SHORT $LN17@sqlite3Utf@2
	movsx	edx, BYTE PTR [eax]
	movsx	ebp, BYTE PTR [eax+1]
	add	eax, 1
	shl	ebp, 8
	add	edx, ebp
	mov	ebp, ecx
	and	ecx, 63					; 0000003fH
	and	ebp, 960				; 000003c0H
	lea	ecx, DWORD PTR [ecx+ebp+64]
	shl	ecx, 10					; 0000000aH
	and	edx, 1023				; 000003ffH
	add	ecx, edx
	add	eax, 1
	test	ecx, -65536				; ffff0000H
	jne	SHORT $LN17@sqlite3Utf@2
	mov	ecx, 65533				; 0000fffdH
$LN17@sqlite3Utf@2:
; Line 10130
	add	esi, 1
	test	ecx, ecx
	jne	SHORT $LL5@sqlite3Utf@2
$LN4@sqlite3Utf@2:
; Line 10133
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -2					; fffffffeH
	add	ecx, 2
	sub	eax, ecx
	pop	esi
	sub	eax, ebx
	pop	ebp
; Line 10134
	ret	0
_sqlite3Utf16ByteLen ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Dequote
_TEXT	SEGMENT
_quote$ = -4						; size = 4
_sqlite3Dequote PROC					; COMDAT
; _z$ = esi
; Line 10322
	push	ecx
; Line 10325
	test	esi, esi
	je	SHORT $LN8@sqlite3Deq
	push	ebx
; Line 10326
	movsx	ebx, BYTE PTR [esi]
; Line 10327
	lea	eax, DWORD PTR [ebx-34]
	cmp	eax, 62					; 0000003eH
	mov	DWORD PTR _quote$[esp+8], ebx
	ja	SHORT $LN21@sqlite3Deq
	movzx	eax, BYTE PTR $LN20@sqlite3Deq[eax]
	jmp	DWORD PTR $LN24@sqlite3Deq[eax*4]
$LN9@sqlite3Deq:
; Line 10331
	mov	ebx, 93					; 0000005dH
	mov	DWORD PTR _quote$[esp+8], ebx
$LN13@sqlite3Deq:
; Line 10334
	xor	eax, eax
	cmp	BYTE PTR [esi+1], al
	lea	ecx, DWORD PTR [esi+1]
	je	SHORT $LN21@sqlite3Deq
	push	edi
	lea	edi, DWORD PTR [esi+2]
	push	ebp
	npad	5
$LL7@sqlite3Deq:
; Line 10335
	mov	dl, BYTE PTR [ecx]
	movsx	ebp, dl
	cmp	ebp, ebx
; Line 10336
	mov	ebx, DWORD PTR _quote$[esp+16]
	jne	SHORT $LN4@sqlite3Deq
	movsx	edx, BYTE PTR [edi]
	cmp	edx, ebx
	jne	SHORT $LN3@sqlite3Deq
; Line 10337
	mov	BYTE PTR [eax+esi], bl
	add	eax, 1
; Line 10338
	add	edi, 1
	add	ecx, 1
; Line 10343
	jmp	SHORT $LN6@sqlite3Deq
$LN4@sqlite3Deq:
; Line 10344
	mov	BYTE PTR [eax+esi], dl
	add	eax, 1
$LN6@sqlite3Deq:
	add	ecx, 1
	add	edi, 1
	cmp	BYTE PTR [ecx], 0
	jne	SHORT $LL7@sqlite3Deq
	pop	ebp
	pop	edi
	pop	ebx
; Line 10347
	pop	ecx
	ret	0
$LN3@sqlite3Deq:
	pop	ebp
; Line 10340
	mov	BYTE PTR [eax+esi], 0
	pop	edi
$LN21@sqlite3Deq:
	pop	ebx
$LN8@sqlite3Deq:
; Line 10347
	pop	ecx
	ret	0
	npad	3
$LN24@sqlite3Deq:
	DD	$LN13@sqlite3Deq
	DD	$LN9@sqlite3Deq
	DD	$LN21@sqlite3Deq
$LN20@sqlite3Deq:
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
_sqlite3Dequote ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3StrICmp
_TEXT	SEGMENT
_sqlite3StrICmp PROC					; COMDAT
; _zLeft$ = ecx
; _zRight$ = edx
; Line 10399
	mov	al, BYTE PTR [ecx]
	test	al, al
	je	SHORT $LN1@sqlite3Str
	push	esi
	npad	9
$LL2@sqlite3Str:
	movzx	esi, BYTE PTR [edx]
	movzx	eax, al
	mov	al, BYTE PTR _sqlite3UpperToLower[eax]
	cmp	al, BYTE PTR _sqlite3UpperToLower[esi]
	jne	SHORT $LN7@sqlite3Str
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL2@sqlite3Str
$LN7@sqlite3Str:
	pop	esi
$LN1@sqlite3Str:
; Line 10400
	movzx	edx, BYTE PTR [edx]
	movzx	eax, BYTE PTR [ecx]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[edx]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[eax]
	sub	eax, edx
; Line 10401
	ret	0
_sqlite3StrICmp ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3StrNICmp
_TEXT	SEGMENT
_sqlite3StrNICmp PROC					; COMDAT
; _zLeft$ = ecx
; _zRight$ = edx
; _N$ = eax
; Line 10406
	test	eax, eax
	push	esi
	push	edi
	mov	esi, edx
	jle	SHORT $LN8@sqlite3Str@2
$LL2@sqlite3Str@2:
	mov	dl, BYTE PTR [ecx]
	sub	eax, 1
	test	dl, dl
	je	SHORT $LN1@sqlite3Str@2
	movzx	edi, BYTE PTR [esi]
	movzx	edx, dl
	mov	dl, BYTE PTR _sqlite3UpperToLower[edx]
	cmp	dl, BYTE PTR _sqlite3UpperToLower[edi]
	jne	SHORT $LN1@sqlite3Str@2
	add	ecx, 1
	add	esi, 1
	test	eax, eax
	jg	SHORT $LL2@sqlite3Str@2
$LN8@sqlite3Str@2:
	sub	eax, 1
$LN1@sqlite3Str@2:
; Line 10407
	test	eax, eax
	jge	SHORT $LN5@sqlite3Str@2
	pop	edi
	xor	eax, eax
	pop	esi
; Line 10408
	ret	0
$LN5@sqlite3Str@2:
; Line 10407
	movzx	eax, BYTE PTR [esi]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[eax]
	movzx	eax, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[eax]
	pop	edi
	sub	eax, edx
	pop	esi
; Line 10408
	ret	0
_sqlite3StrNICmp ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3IsNumber
_TEXT	SEGMENT
_sqlite3IsNumber PROC					; COMDAT
; _z$ = ecx
; _realnum$ = ebx
; _enc$ = eax
; Line 10418
	push	esi
	mov	esi, ecx
; Line 10419
	xor	ecx, ecx
	cmp	al, 1
	setne	cl
	push	edi
	add	ecx, 1
; Line 10420
	cmp	al, 3
	mov	edi, ecx
	jne	SHORT $LN29@sqlite3IsN
	add	esi, 1
$LN29@sqlite3IsN:
; Line 10421
	mov	al, BYTE PTR [esi]
	cmp	al, 45					; 0000002dH
	je	SHORT $LN18@sqlite3IsN
	cmp	al, 43					; 0000002bH
	jne	SHORT $LN19@sqlite3IsN
$LN18@sqlite3IsN:
	add	esi, edi
$LN19@sqlite3IsN:
; Line 10422
	movzx	edx, BYTE PTR [esi]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN17@sqlite3IsN
$LN31@sqlite3IsN:
	pop	edi
; Line 10423
	xor	eax, eax
	pop	esi
; Line 10442
	ret	0
$LN17@sqlite3IsN:
; Line 10425
	add	esi, edi
; Line 10426
	test	ebx, ebx
	je	SHORT $LN23@sqlite3IsN
	mov	DWORD PTR [ebx], 0
$LN23@sqlite3IsN:
; Line 10427
	movzx	eax, BYTE PTR [esi]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@sqlite3IsN
$LL15@sqlite3IsN:
	movzx	ecx, BYTE PTR [esi+edi]
	add	esi, edi
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL15@sqlite3IsN
$LN14@sqlite3IsN:
; Line 10428
	cmp	BYTE PTR [esi], 46			; 0000002eH
	jne	SHORT $LN30@sqlite3IsN
; Line 10430
	movzx	edx, BYTE PTR [esi+edi]
	add	esi, edi
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN31@sqlite3IsN
; Line 10431
	movzx	eax, BYTE PTR [esi]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@sqlite3IsN
	npad	1
$LL11@sqlite3IsN:
	movzx	ecx, BYTE PTR [esi+edi]
	add	esi, edi
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL11@sqlite3IsN
$LN10@sqlite3IsN:
; Line 10432
	test	ebx, ebx
	je	SHORT $LN30@sqlite3IsN
	mov	DWORD PTR [ebx], 1
$LN30@sqlite3IsN:
; Line 10434
	mov	al, BYTE PTR [esi]
	cmp	al, 101					; 00000065H
	je	SHORT $LN7@sqlite3IsN
	cmp	al, 69					; 00000045H
	jne	SHORT $LN1@sqlite3IsN
$LN7@sqlite3IsN:
; Line 10436
	mov	al, BYTE PTR [esi+edi]
	add	esi, edi
	cmp	al, 43					; 0000002bH
	je	SHORT $LN5@sqlite3IsN
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN6@sqlite3IsN
$LN5@sqlite3IsN:
	add	esi, edi
$LN6@sqlite3IsN:
; Line 10437
	movzx	edx, BYTE PTR [esi]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	$LN31@sqlite3IsN
; Line 10438
	movzx	eax, BYTE PTR [esi]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@sqlite3IsN
	npad	6
$LL3@sqlite3IsN:
	movzx	ecx, BYTE PTR [esi+edi]
	add	esi, edi
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL3@sqlite3IsN
$LN2@sqlite3IsN:
; Line 10439
	test	ebx, ebx
	je	SHORT $LN1@sqlite3IsN
	mov	DWORD PTR [ebx], 1
$LN1@sqlite3IsN:
; Line 10441
	xor	eax, eax
	cmp	BYTE PTR [esi], al
	pop	edi
	sete	al
	pop	esi
; Line 10442
	ret	0
_sqlite3IsNumber ENDP
_TEXT	ENDS
PUBLIC	__real@40c3880000000000
PUBLIC	__real@4341c37937e08000
PUBLIC	__real@4d384f03e93ff9f5
;	COMDAT __real@40c3880000000000
CONST	SEGMENT
__real@40c3880000000000 DQ 040c3880000000000r	; 10000
CONST	ENDS
;	COMDAT __real@4341c37937e08000
CONST	SEGMENT
__real@4341c37937e08000 DQ 04341c37937e08000r	; 1e+016
CONST	ENDS
;	COMDAT __real@4d384f03e93ff9f5
CONST	SEGMENT
__real@4d384f03e93ff9f5 DQ 04d384f03e93ff9f5r	; 1e+064
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AtoF
_TEXT	SEGMENT
_sign$ = -28						; size = 4
tv416 = -24						; size = 4
tv411 = -24						; size = 4
_zBegin$ = -20						; size = 4
_v1$ = -16						; size = 8
_scale$83032 = -8					; size = 8
_divisor$83023 = -8					; size = 8
_pResult$ = 8						; size = 4
_sqlite3AtoF PROC					; COMDAT
; _z$ = eax
; Line 10456
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 28					; 0000001cH
; Line 10460
	fldz
	push	ebx
	push	esi
	fstp	QWORD PTR _v1$[esp+36]
	mov	esi, eax
; Line 10461
	movzx	eax, BYTE PTR [esi]
	push	edi
	mov	ebx, 1
	push	eax
	mov	DWORD PTR _sign$[esp+44], ebx
	mov	DWORD PTR _zBegin$[esp+44], esi
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN26@sqlite3Ato
$LL27@sqlite3Ato:
	movzx	ecx, BYTE PTR [esi+ebx]
	add	esi, ebx
	push	ecx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL27@sqlite3Ato
$LN26@sqlite3Ato:
; Line 10462
	mov	al, BYTE PTR [esi]
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN25@sqlite3Ato
; Line 10463
	mov	DWORD PTR _sign$[esp+40], -1
; Line 10464
	jmp	SHORT $LN98@sqlite3Ato
$LN25@sqlite3Ato:
; Line 10465
	cmp	al, 43					; 0000002bH
	jne	SHORT $LN33@sqlite3Ato
$LN98@sqlite3Ato:
; Line 10466
	add	esi, ebx
$LN33@sqlite3Ato:
; Line 10468
	movzx	edx, BYTE PTR [esi]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN21@sqlite3Ato
$LN22@sqlite3Ato:
; Line 10469
	movsx	eax, BYTE PTR [esi]
	movzx	ecx, BYTE PTR [esi+ebx]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR tv416[esp+40], eax
; Line 10470
	add	esi, ebx
	push	ecx
	fild	DWORD PTR tv416[esp+44]
	fld	QWORD PTR _v1$[esp+44]
	fmul	QWORD PTR __real@4024000000000000
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _v1$[esp+44]
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN22@sqlite3Ato
$LN21@sqlite3Ato:
; Line 10472
	cmp	BYTE PTR [esi], 46			; 0000002eH
	jne	SHORT $LN52@sqlite3Ato
; Line 10475
	movzx	edx, BYTE PTR [esi+ebx]
	fld1
	add	esi, ebx
	fstp	QWORD PTR _divisor$83023[esp+40]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@sqlite3Ato
	npad	7
$LL19@sqlite3Ato:
; Line 10476
	movsx	eax, BYTE PTR [esi]
	movzx	ecx, BYTE PTR [esi+ebx]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR tv411[esp+40], eax
; Line 10478
	add	esi, ebx
	push	ecx
	fild	DWORD PTR tv411[esp+44]
	fld	QWORD PTR _v1$[esp+44]
	fld	QWORD PTR __real@4024000000000000
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _v1$[esp+44]
	fmul	QWORD PTR _divisor$83023[esp+44]
	fstp	QWORD PTR _divisor$83023[esp+44]
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL19@sqlite3Ato
$LN18@sqlite3Ato:
; Line 10480
	fld	QWORD PTR _v1$[esp+40]
	fdiv	QWORD PTR _divisor$83023[esp+40]
	fst	QWORD PTR _v1$[esp+40]
	jmp	SHORT $LN20@sqlite3Ato
$LN52@sqlite3Ato:
	fld	QWORD PTR _v1$[esp+40]
$LN20@sqlite3Ato:
; Line 10482
	mov	al, BYTE PTR [esi]
	cmp	al, 101					; 00000065H
	je	SHORT $LN61@sqlite3Ato
	cmp	al, 69					; 00000045H
	jne	$LN1@sqlite3Ato
$LN61@sqlite3Ato:
; Line 10487
	mov	al, BYTE PTR [esi+ebx]
	fstp	ST(0)
	fld1
	add	esi, ebx
	xor	edi, edi
	fstp	QWORD PTR _scale$83032[esp+40]
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN15@sqlite3Ato
; Line 10488
	or	ebx, -1
; Line 10489
	add	esi, 1
	jmp	SHORT $LN35@sqlite3Ato
$LN15@sqlite3Ato:
; Line 10490
	cmp	al, 43					; 0000002bH
	jne	SHORT $LN35@sqlite3Ato
; Line 10491
	add	esi, ebx
$LN35@sqlite3Ato:
; Line 10493
	movzx	edx, BYTE PTR [esi]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	$LN55@sqlite3Ato
$LL12@sqlite3Ato:
; Line 10494
	movsx	ecx, BYTE PTR [esi]
	movzx	edx, BYTE PTR [esi+1]
; Line 10495
	add	esi, 1
	lea	eax, DWORD PTR [edi+edi*4]
	push	edx
	lea	edi, DWORD PTR [ecx+eax*2-48]
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL12@sqlite3Ato
; Line 10497
	cmp	edi, 64					; 00000040H
	jl	SHORT $LN53@sqlite3Ato
	fld	QWORD PTR __real@4d384f03e93ff9f5
	mov	eax, edi
	fld	QWORD PTR _scale$83032[esp+40]
	shr	eax, 6
	mov	ecx, eax
	neg	ecx
	shl	ecx, 6
	add	edi, ecx
$LN10@sqlite3Ato:
	sub	eax, 1
	fmul	ST(0), ST(1)
	jne	SHORT $LN10@sqlite3Ato
	fstp	ST(1)
	jmp	SHORT $LN37@sqlite3Ato
$LN53@sqlite3Ato:
	fld	QWORD PTR _scale$83032[esp+40]
$LN37@sqlite3Ato:
; Line 10498
	cmp	edi, 16					; 00000010H
	jl	SHORT $LN38@sqlite3Ato
	fld	QWORD PTR __real@4341c37937e08000
	mov	eax, edi
	shr	eax, 4
	mov	edx, eax
	neg	edx
	shl	edx, 4
	add	edi, edx
$LN8@sqlite3Ato:
	sub	eax, 1
	fmul	ST(1), ST(0)
	jne	SHORT $LN8@sqlite3Ato
	fstp	ST(0)
$LN38@sqlite3Ato:
; Line 10499
	cmp	edi, 4
	jl	SHORT $LN39@sqlite3Ato
	fld	QWORD PTR __real@40c3880000000000
	mov	eax, edi
	shr	eax, 2
	mov	ecx, eax
	neg	ecx
	lea	edi, DWORD PTR [edi+ecx*4]
$LN6@sqlite3Ato:
	sub	eax, 1
	fmul	ST(1), ST(0)
	jne	SHORT $LN6@sqlite3Ato
	fstp	ST(0)
$LN39@sqlite3Ato:
; Line 10500
	cmp	edi, 8
	fld	QWORD PTR __real@4024000000000000
	jl	SHORT $LC49@sqlite3Ato
	mov	eax, edi
	shr	eax, 3
	mov	edx, eax
	neg	edx
	lea	edi, DWORD PTR [edi+edx*8]
$LN50@sqlite3Ato:
	sub	eax, 1
	fmul	ST(1), ST(0)
	fmul	ST(1), ST(0)
	fmul	ST(1), ST(0)
	fmul	ST(1), ST(0)
	fmul	ST(1), ST(0)
	fmul	ST(1), ST(0)
	fmul	ST(1), ST(0)
	fmul	ST(1), ST(0)
	jne	SHORT $LN50@sqlite3Ato
$LC49@sqlite3Ato:
	cmp	edi, 1
	jl	SHORT $LN90@sqlite3Ato
$LC4@sqlite3Ato:
	sub	edi, 1
	fmul	ST(1), ST(0)
	jne	SHORT $LC4@sqlite3Ato
$LN90@sqlite3Ato:
	fstp	ST(0)
$LN48@sqlite3Ato:
; Line 10501
	test	ebx, ebx
	jge	SHORT $LN2@sqlite3Ato
; Line 10502
	fdivr	QWORD PTR _v1$[esp+40]
; Line 10503
	jmp	SHORT $LN1@sqlite3Ato
$LN55@sqlite3Ato:
; Line 10500
	fld	QWORD PTR _scale$83032[esp+40]
	jmp	SHORT $LN48@sqlite3Ato
$LN2@sqlite3Ato:
; Line 10504
	fmul	QWORD PTR _v1$[esp+40]
$LN1@sqlite3Ato:
; Line 10507
	cmp	DWORD PTR _sign$[esp+40], 0
	jge	SHORT $LN31@sqlite3Ato
	fchs
$LN31@sqlite3Ato:
	mov	eax, DWORD PTR _pResult$[ebp]
	fstp	QWORD PTR [eax]
; Line 10512
	pop	edi
	mov	eax, esi
	sub	eax, DWORD PTR _zBegin$[esp+36]
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_sqlite3AtoF ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@EMNEAFKL@9223372036854775807?$AA@	; `string'
EXTRN	__allmul:PROC
;	COMDAT ??_C@_0BE@EMNEAFKL@9223372036854775807?$AA@
CONST	SEGMENT
??_C@_0BE@EMNEAFKL@9223372036854775807?$AA@ DB '9223372036854775807', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Atoi64
_TEXT	SEGMENT
_neg$ = -4						; size = 4
_zNum$ = 8						; size = 4
_pNum$ = 12						; size = 4
_sqlite3Atoi64 PROC					; COMDAT
; Line 10525
	push	ecx
	push	ebx
	push	ebp
	push	esi
; Line 10529
	mov	esi, DWORD PTR _zNum$[esp+12]
	movzx	eax, BYTE PTR [esi]
	push	edi
	push	eax
	xor	edi, edi
	xor	ebx, ebx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@sqlite3Ato@2
	npad	3
$LL9@sqlite3Ato@2:
	movzx	ecx, BYTE PTR [esi+1]
	add	esi, 1
	push	ecx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL9@sqlite3Ato@2
	mov	DWORD PTR _zNum$[esp+16], esi
$LN8@sqlite3Ato@2:
; Line 10530
	mov	al, BYTE PTR [esi]
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN7@sqlite3Ato@2
; Line 10531
	mov	DWORD PTR _neg$[esp+20], 1
; Line 10532
	jmp	SHORT $LN36@sqlite3Ato@2
$LN7@sqlite3Ato@2:
; Line 10533
	cmp	al, 43					; 0000002bH
; Line 10534
	mov	DWORD PTR _neg$[esp+20], edi
	jne	SHORT $LN4@sqlite3Ato@2
$LN36@sqlite3Ato@2:
; Line 10535
	add	esi, 1
	mov	DWORD PTR _zNum$[esp+16], esi
$LN4@sqlite3Ato@2:
; Line 10539
	movsx	esi, BYTE PTR [esi]
	xor	ebp, ebp
	cmp	esi, 48					; 00000030H
	jl	SHORT $LN1@sqlite3Ato@2
$LL32@sqlite3Ato@2:
	cmp	esi, 57					; 00000039H
	jg	SHORT $LN1@sqlite3Ato@2
; Line 10540
	push	0
	push	10					; 0000000aH
	push	edi
	push	ebx
	call	__allmul
	mov	ecx, eax
	mov	edi, edx
	mov	eax, esi
	cdq
	add	ecx, eax
	adc	edi, edx
	mov	edx, DWORD PTR _zNum$[esp+16]
	movsx	esi, BYTE PTR [edx+ebp+1]
	sub	ecx, 48					; 00000030H
	sbb	edi, 0
	add	ebp, 1
	cmp	esi, 48					; 00000030H
	mov	ebx, ecx
	jge	SHORT $LL32@sqlite3Ato@2
$LN1@sqlite3Ato@2:
; Line 10542
	cmp	DWORD PTR _neg$[esp+20], 0
	je	SHORT $LN12@sqlite3Ato@2
	neg	ebx
	adc	edi, 0
	neg	edi
$LN12@sqlite3Ato@2:
; Line 10544
	test	esi, esi
	mov	eax, DWORD PTR _pNum$[esp+16]
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR [eax+4], edi
	jne	$LN35@sqlite3Ato@2
	test	ebp, ebp
	jle	$LN35@sqlite3Ato@2
	cmp	ebp, 19					; 00000013H
	jl	$LN16@sqlite3Ato@2
	jne	$LN35@sqlite3Ato@2
	mov	edx, DWORD PTR _zNum$[esp+16]
	lea	eax, DWORD PTR [esi+19]
	mov	ecx, OFFSET ??_C@_0BE@EMNEAFKL@9223372036854775807?$AA@
$LL19@sqlite3Ato@2:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN33@sqlite3Ato@2
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL19@sqlite3Ato@2
	test	eax, eax
	je	SHORT $LN21@sqlite3Ato@2
$LN33@sqlite3Ato@2:
	movzx	edi, BYTE PTR [ecx]
	movzx	esi, BYTE PTR [edx]
	sub	esi, edi
	jne	SHORT $LN34@sqlite3Ato@2
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN21@sqlite3Ato@2
	movzx	edi, BYTE PTR [ecx]
	movzx	esi, BYTE PTR [edx]
	sub	esi, edi
	jne	SHORT $LN34@sqlite3Ato@2
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN21@sqlite3Ato@2
	movzx	edi, BYTE PTR [ecx]
	movzx	esi, BYTE PTR [edx]
	sub	esi, edi
	jne	SHORT $LN34@sqlite3Ato@2
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN21@sqlite3Ato@2
	movzx	eax, BYTE PTR [ecx]
	movzx	esi, BYTE PTR [edx]
	sub	esi, eax
	je	SHORT $LN21@sqlite3Ato@2
$LN34@sqlite3Ato@2:
	test	esi, esi
	mov	eax, 1
	jg	SHORT $LN23@sqlite3Ato@2
	or	eax, -1
	jmp	SHORT $LN23@sqlite3Ato@2
$LN21@sqlite3Ato@2:
	xor	eax, eax
$LN23@sqlite3Ato@2:
	test	eax, eax
	jg	SHORT $LN35@sqlite3Ato@2
$LN16@sqlite3Ato@2:
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 10545
	pop	ecx
	ret	0
$LN35@sqlite3Ato@2:
	pop	edi
	pop	esi
	pop	ebp
; Line 10544
	xor	eax, eax
	pop	ebx
; Line 10545
	pop	ecx
	ret	0
_sqlite3Atoi64 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@KLDLBCKA@2147483647?$AA@		; `string'
;	COMDAT ??_C@_0L@KLDLBCKA@2147483647?$AA@
CONST	SEGMENT
??_C@_0L@KLDLBCKA@2147483647?$AA@ DB '2147483647', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3FitsIn32Bits
_TEXT	SEGMENT
_sqlite3FitsIn32Bits PROC				; COMDAT
; _zNum$ = edx
; Line 10560
	mov	al, BYTE PTR [edx]
	cmp	al, 45					; 0000002dH
	je	SHORT $LN4@sqlite3Fit
	cmp	al, 43					; 0000002bH
	jne	SHORT $LN5@sqlite3Fit
$LN4@sqlite3Fit:
	add	edx, 1
$LN5@sqlite3Fit:
; Line 10561
	movsx	eax, BYTE PTR [edx]
	xor	ecx, ecx
	cmp	eax, 48					; 00000030H
	jl	$LN9@sqlite3Fit
	npad	5
$LL3@sqlite3Fit:
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN1@sqlite3Fit
	movsx	eax, BYTE PTR [ecx+edx+1]
	add	ecx, 1
	cmp	eax, 48					; 00000030H
	jge	SHORT $LL3@sqlite3Fit
$LN1@sqlite3Fit:
; Line 10562
	cmp	ecx, 10					; 0000000aH
	jl	$LN9@sqlite3Fit
	jne	$LN8@sqlite3Fit
	push	esi
	mov	eax, 10					; 0000000aH
	mov	ecx, OFFSET ??_C@_0L@KLDLBCKA@2147483647?$AA@
	push	edi
	npad	3
$LL12@sqlite3Fit:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN13@sqlite3Fit
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL12@sqlite3Fit
	test	eax, eax
	je	SHORT $LN14@sqlite3Fit
$LN13@sqlite3Fit:
	movzx	esi, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	esi, edi
	jne	SHORT $LN15@sqlite3Fit
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN14@sqlite3Fit
	movzx	esi, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	esi, edi
	jne	SHORT $LN15@sqlite3Fit
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN14@sqlite3Fit
	movzx	esi, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	esi, edi
	jne	SHORT $LN15@sqlite3Fit
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN14@sqlite3Fit
	movzx	esi, BYTE PTR [edx]
	movzx	eax, BYTE PTR [ecx]
	sub	esi, eax
	je	SHORT $LN14@sqlite3Fit
$LN15@sqlite3Fit:
	test	esi, esi
	mov	eax, 1
	jg	SHORT $LN16@sqlite3Fit
	or	eax, -1
	jmp	SHORT $LN16@sqlite3Fit
$LN14@sqlite3Fit:
	xor	eax, eax
$LN16@sqlite3Fit:
	test	eax, eax
	pop	edi
	pop	esi
	jle	SHORT $LN9@sqlite3Fit
$LN8@sqlite3Fit:
	xor	eax, eax
; Line 10563
	ret	0
$LN9@sqlite3Fit:
; Line 10562
	mov	eax, 1
; Line 10563
	ret	0
_sqlite3FitsIn32Bits ENDP
_TEXT	ENDS
EXTRN	_atoi:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3GetInt32
_TEXT	SEGMENT
_pValue$ = 8						; size = 4
_sqlite3GetInt32 PROC					; COMDAT
; _zNum$ = esi
; Line 10570
	mov	edx, esi
	call	_sqlite3FitsIn32Bits
	test	eax, eax
	je	SHORT $LN1@sqlite3Get
; Line 10571
	push	esi
	call	_atoi
	mov	ecx, DWORD PTR _pValue$[esp]
	mov	DWORD PTR [ecx], eax
	add	esp, 4
; Line 10572
	mov	eax, 1
; Line 10575
	ret	0
$LN1@sqlite3Get:
; Line 10574
	xor	eax, eax
; Line 10575
	ret	0
_sqlite3GetInt32 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FitsIn64Bits
_TEXT	SEGMENT
_sqlite3FitsIn64Bits PROC				; COMDAT
; _zNum$ = edx
; Line 10590
	mov	al, BYTE PTR [edx]
	cmp	al, 45					; 0000002dH
	je	SHORT $LN4@sqlite3Fit@2
	cmp	al, 43					; 0000002bH
	jne	SHORT $LN5@sqlite3Fit@2
$LN4@sqlite3Fit@2:
	add	edx, 1
$LN5@sqlite3Fit@2:
; Line 10591
	movsx	eax, BYTE PTR [edx]
	xor	ecx, ecx
	cmp	eax, 48					; 00000030H
	jl	$LN9@sqlite3Fit@2
	npad	5
$LL3@sqlite3Fit@2:
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN1@sqlite3Fit@2
	movsx	eax, BYTE PTR [ecx+edx+1]
	add	ecx, 1
	cmp	eax, 48					; 00000030H
	jge	SHORT $LL3@sqlite3Fit@2
$LN1@sqlite3Fit@2:
; Line 10592
	cmp	ecx, 19					; 00000013H
	jl	$LN9@sqlite3Fit@2
	jne	$LN8@sqlite3Fit@2
	push	esi
	mov	eax, 19					; 00000013H
	mov	ecx, OFFSET ??_C@_0BE@EMNEAFKL@9223372036854775807?$AA@
	push	edi
	npad	3
$LL12@sqlite3Fit@2:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN13@sqlite3Fit@2
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL12@sqlite3Fit@2
	test	eax, eax
	je	SHORT $LN14@sqlite3Fit@2
$LN13@sqlite3Fit@2:
	movzx	esi, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	esi, edi
	jne	SHORT $LN15@sqlite3Fit@2
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN14@sqlite3Fit@2
	movzx	esi, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	esi, edi
	jne	SHORT $LN15@sqlite3Fit@2
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN14@sqlite3Fit@2
	movzx	esi, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	esi, edi
	jne	SHORT $LN15@sqlite3Fit@2
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN14@sqlite3Fit@2
	movzx	esi, BYTE PTR [edx]
	movzx	eax, BYTE PTR [ecx]
	sub	esi, eax
	je	SHORT $LN14@sqlite3Fit@2
$LN15@sqlite3Fit@2:
	test	esi, esi
	mov	eax, 1
	jg	SHORT $LN16@sqlite3Fit@2
	or	eax, -1
	jmp	SHORT $LN16@sqlite3Fit@2
$LN14@sqlite3Fit@2:
	xor	eax, eax
$LN16@sqlite3Fit@2:
	test	eax, eax
	pop	edi
	pop	esi
	jle	SHORT $LN9@sqlite3Fit@2
$LN8@sqlite3Fit@2:
	xor	eax, eax
; Line 10593
	ret	0
$LN9@sqlite3Fit@2:
; Line 10592
	mov	eax, 1
; Line 10593
	ret	0
_sqlite3FitsIn64Bits ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SafetyCheck
_TEXT	SEGMENT
_sqlite3SafetyCheck PROC				; COMDAT
; _db$ = eax
; Line 10607
	test	eax, eax
	jne	SHORT $LN2@sqlite3Saf
$LN5@sqlite3Saf:
	mov	eax, 1
; Line 10613
	ret	0
$LN2@sqlite3Saf:
; Line 10608
	mov	eax, DWORD PTR [eax+48]
; Line 10611
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN1@sqlite3Saf
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN1@sqlite3Saf
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN5@sqlite3Saf
$LN1@sqlite3Saf:
; Line 10612
	xor	eax, eax
; Line 10613
	ret	0
_sqlite3SafetyCheck ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3PutVarint
_TEXT	SEGMENT
_buf$ = -16						; size = 10
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 8
_sqlite3PutVarint PROC					; COMDAT
; _p$ = ecx
; Line 10644
	sub	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+16], eax
; Line 10647
	mov	edx, DWORD PTR _v$[esp+16]
	push	ebx
	push	esi
	mov	esi, edx
	xor	eax, eax
	and	esi, -16777216				; ff000000H
	or	eax, esi
; Line 10648
	mov	eax, DWORD PTR _v$[esp+20]
	je	$LN10@sqlite3Put
	mov	BYTE PTR [ecx+8], al
; Line 10649
	shrd	eax, edx, 8
; Line 10651
	mov	bl, al
	or	bl, 128					; 00000080H
	shr	edx, 8
; Line 10652
	shrd	eax, edx, 7
	mov	BYTE PTR [ecx+7], bl
	mov	bl, al
	or	bl, 128					; 00000080H
	shr	edx, 7
	shrd	eax, edx, 7
	mov	BYTE PTR [ecx+6], bl
	mov	bl, al
	shr	edx, 7
	shrd	eax, edx, 7
	or	bl, 128					; 00000080H
	mov	BYTE PTR [ecx+5], bl
	mov	bl, al
	shr	edx, 7
	shrd	eax, edx, 7
	or	bl, 128					; 00000080H
	mov	BYTE PTR [ecx+4], bl
	mov	bl, al
	shr	edx, 7
	shrd	eax, edx, 7
	or	bl, 128					; 00000080H
	mov	BYTE PTR [ecx+3], bl
	mov	bl, al
	shr	edx, 7
	shrd	eax, edx, 7
	or	bl, 128					; 00000080H
	mov	BYTE PTR [ecx+2], bl
	mov	bl, al
	shr	edx, 7
	shrd	eax, edx, 7
	or	bl, 128					; 00000080H
	shr	edx, 7
	or	al, 128					; 00000080H
	pop	esi
	mov	BYTE PTR [ecx+1], bl
	mov	BYTE PTR [ecx], al
; Line 10654
	mov	eax, 9
	pop	ebx
; Line 10667
	mov	ecx, DWORD PTR __$ArrayPad$[esp+16]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 16					; 00000010H
	ret	0
$LN10@sqlite3Put:
; Line 10656
	xor	esi, esi
	push	edi
	npad	6
$LL6@sqlite3Put:
; Line 10658
	mov	bl, al
; Line 10659
	shrd	eax, edx, 7
	or	bl, 128					; 00000080H
	mov	BYTE PTR _buf$[esp+esi+28], bl
	shr	edx, 7
; Line 10660
	mov	edi, eax
	add	esi, 1
	or	edi, edx
	jne	SHORT $LL6@sqlite3Put
; Line 10661
	and	BYTE PTR _buf$[esp+28], 127		; 0000007fH
; Line 10663
	lea	eax, DWORD PTR [esi-1]
	test	eax, eax
	pop	edi
	jl	SHORT $LN1@sqlite3Put
$LL3@sqlite3Put:
; Line 10664
	mov	dl, BYTE PTR _buf$[esp+eax+24]
	mov	BYTE PTR [ecx], dl
	sub	eax, 1
	add	ecx, 1
	test	eax, eax
	jge	SHORT $LL3@sqlite3Put
$LN1@sqlite3Put:
; Line 10667
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	mov	eax, esi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 16					; 00000010H
	ret	0
_sqlite3PutVarint ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3GetVarint
_TEXT	SEGMENT
_p$ = 8							; size = 4
_v$ = 12						; size = 4
_sqlite3GetVarint PROC					; COMDAT
; Line 10673
	push	ebp
	mov	ebp, DWORD PTR _p$[esp]
; Line 10678
	mov	cl, BYTE PTR [ebp]
	test	cl, cl
	js	SHORT $LN8@sqlite3Get@2
; Line 10679
	movzx	eax, cl
	mov	ecx, DWORD PTR _v$[esp]
	cdq
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 10680
	mov	eax, 1
	pop	ebp
; Line 10709
	ret	0
$LN8@sqlite3Get@2:
; Line 10683
	mov	al, BYTE PTR [ebp+1]
	and	ecx, 127				; 0000007fH
; Line 10684
	shl	ecx, 7
	test	al, al
	js	SHORT $LN7@sqlite3Get@2
	movzx	eax, al
	or	ecx, eax
	mov	eax, DWORD PTR _v$[esp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], 0
; Line 10685
	mov	eax, 2
	pop	ebp
; Line 10709
	ret	0
$LN7@sqlite3Get@2:
; Line 10687
	and	eax, 127				; 0000007fH
	or	eax, ecx
	mov	ecx, eax
; Line 10688
	mov	al, BYTE PTR [ebp+2]
; Line 10689
	shl	ecx, 7
	test	al, al
	js	SHORT $LN6@sqlite3Get@2
	movzx	edx, al
	mov	eax, DWORD PTR _v$[esp]
	or	ecx, edx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], 0
; Line 10690
	mov	eax, 3
	pop	ebp
; Line 10709
	ret	0
$LN6@sqlite3Get@2:
; Line 10692
	and	eax, 127				; 0000007fH
	or	eax, ecx
; Line 10693
	mov	cl, BYTE PTR [ebp+3]
; Line 10694
	shl	eax, 7
	test	cl, cl
	js	SHORT $LN5@sqlite3Get@2
	movzx	ecx, cl
	or	eax, ecx
	mov	ecx, DWORD PTR _v$[esp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], 0
; Line 10695
	mov	eax, 4
	pop	ebp
; Line 10709
	ret	0
$LN5@sqlite3Get@2:
	push	ebx
	push	esi
; Line 10697
	and	ecx, 127				; 0000007fH
	push	edi
	or	ecx, eax
	xor	edi, edi
; Line 10698
	mov	esi, 4
$LL4@sqlite3Get@2:
; Line 10700
	mov	bl, BYTE PTR [esi+ebp]
	add	esi, 1
; Line 10701
	cmp	esi, 9
	je	SHORT $LN12@sqlite3Get@2
; Line 10705
	mov	dl, bl
	and	dl, 127					; 0000007fH
	shld	edi, ecx, 7
	movzx	eax, dl
	cdq
	shl	ecx, 7
	or	eax, ecx
	or	edx, edi
; Line 10706
	test	bl, bl
	mov	ecx, eax
	mov	edi, edx
	js	SHORT $LL4@sqlite3Get@2
; Line 10707
	mov	eax, DWORD PTR _v$[esp+12]
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [eax], ecx
; Line 10708
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
; Line 10709
	ret	0
$LN12@sqlite3Get@2:
; Line 10702
	shld	edi, ecx, 8
	movzx	eax, bl
	cdq
	shl	ecx, 8
	or	ecx, eax
; Line 10707
	mov	eax, DWORD PTR _v$[esp+12]
	or	edi, edx
	mov	DWORD PTR [eax+4], edi
	pop	edi
	mov	DWORD PTR [eax], ecx
; Line 10708
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
; Line 10709
	ret	0
_sqlite3GetVarint ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3GetVarint32
_TEXT	SEGMENT
_v$ = 8							; size = 4
_sqlite3GetVarint32 PROC				; COMDAT
; _p$ = edi
; Line 10719
	mov	cl, BYTE PTR [edi]
	test	cl, cl
	push	ebp
	mov	ebp, DWORD PTR _v$[esp]
	jl	SHORT $LN6@sqlite3Get@3
; Line 10720
	movzx	eax, cl
	mov	DWORD PTR [ebp], eax
; Line 10721
	mov	eax, 1
	pop	ebp
; Line 10735
	ret	0
$LN6@sqlite3Get@3:
; Line 10724
	mov	al, BYTE PTR [edi+1]
	and	ecx, 127				; 0000007fH
; Line 10725
	shl	ecx, 7
	test	al, al
	jl	SHORT $LN5@sqlite3Get@3
	movzx	edx, al
	or	ecx, edx
	mov	DWORD PTR [ebp], ecx
; Line 10726
	mov	eax, 2
	pop	ebp
; Line 10735
	ret	0
$LN5@sqlite3Get@3:
; Line 10728
	and	eax, 127				; 0000007fH
	or	eax, ecx
	push	esi
	mov	esi, eax
; Line 10729
	mov	eax, 2
$LL4@sqlite3Get@3:
; Line 10731
	mov	cl, BYTE PTR [eax+edi]
	movzx	edx, cl
	and	edx, 127				; 0000007fH
	shl	esi, 7
	or	esi, edx
	add	eax, 1
; Line 10732
	test	cl, cl
	jns	SHORT $LN1@sqlite3Get@3
	cmp	eax, 9
	jl	SHORT $LL4@sqlite3Get@3
$LN1@sqlite3Get@3:
; Line 10733
	mov	DWORD PTR [ebp], esi
	pop	esi
	pop	ebp
; Line 10735
	ret	0
_sqlite3GetVarint32 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VarintLen
_TEXT	SEGMENT
_v$ = 8							; size = 8
_sqlite3VarintLen PROC					; COMDAT
; Line 10742
	mov	edx, DWORD PTR _v$[esp]
	mov	ecx, DWORD PTR _v$[esp-4]
	xor	eax, eax
	push	esi
	npad	5
$LL4@sqlite3Var:
; Line 10745
	shrd	ecx, edx, 7
	shr	edx, 7
; Line 10746
	mov	esi, ecx
	add	eax, 1
	or	esi, edx
	je	SHORT $LN1@sqlite3Var
	cmp	eax, 9
	jl	SHORT $LL4@sqlite3Var
$LN1@sqlite3Var:
	pop	esi
; Line 10748
	ret	0
_sqlite3VarintLen ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Get4byte
_TEXT	SEGMENT
_sqlite3Get4byte PROC					; COMDAT
; _p$ = eax
; Line 10755
	movzx	edx, BYTE PTR [eax+2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax]
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	eax, ecx
; Line 10756
	ret	0
_sqlite3Get4byte ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Put4byte
_TEXT	SEGMENT
_sqlite3Put4byte PROC					; COMDAT
; _p$ = ecx
; _v$ = eax
; Line 10758
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ecx], dl
; Line 10759
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [ecx+1], dl
; Line 10760
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [ecx+2], dl
; Line 10761
	mov	BYTE PTR [ecx+3], al
; Line 10762
	ret	0
_sqlite3Put4byte ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _hexToInt
_TEXT	SEGMENT
_hexToInt PROC						; COMDAT
; _h$ = eax
; Line 10772
	lea	ecx, DWORD PTR [eax-48]
	cmp	ecx, 9
	ja	SHORT $LN4@hexToInt
; Line 10773
	add	eax, -48				; ffffffd0H
; Line 10780
	ret	0
$LN4@hexToInt:
; Line 10774
	lea	edx, DWORD PTR [eax-97]
	cmp	edx, 5
	ja	SHORT $LN2@hexToInt
; Line 10775
	add	eax, -87				; ffffffa9H
; Line 10780
	ret	0
$LN2@hexToInt:
; Line 10778
	add	eax, -55				; ffffffc9H
; Line 10780
	ret	0
_hexToInt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SafetyOn
_TEXT	SEGMENT
_sqlite3SafetyOn PROC					; COMDAT
; _db$ = eax
; Line 10833
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, -1607883113			; a029a697H
	jne	SHORT $LN3@sqlite3Saf@2
; Line 10834
	mov	DWORD PTR [eax+48], -264537850		; f03b7906H
; Line 10835
	xor	eax, eax
; Line 10841
	ret	0
$LN3@sqlite3Saf@2:
; Line 10836
	cmp	ecx, -264537850				; f03b7906H
	jne	SHORT $LN1@sqlite3Saf@2
; Line 10837
	mov	DWORD PTR [eax+48], -1254786768		; b5357930H
; Line 10838
	mov	DWORD PTR [eax+152], 1
$LN1@sqlite3Saf@2:
; Line 10840
	mov	eax, 1
; Line 10841
	ret	0
_sqlite3SafetyOn ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SafetyOff
_TEXT	SEGMENT
_sqlite3SafetyOff PROC					; COMDAT
; _db$ = eax
; Line 10849
	cmp	DWORD PTR [eax+48], -264537850		; f03b7906H
	jne	SHORT $LN2@sqlite3Saf@3
; Line 10850
	mov	DWORD PTR [eax+48], -1607883113		; a029a697H
; Line 10851
	xor	eax, eax
; Line 10857
	ret	0
$LN2@sqlite3Saf@3:
; Line 10853
	mov	DWORD PTR [eax+48], -1254786768		; b5357930H
; Line 10854
	mov	DWORD PTR [eax+152], 1
; Line 10855
	mov	eax, 1
; Line 10857
	ret	0
_sqlite3SafetyOff ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3HashClear
_TEXT	SEGMENT
_sqlite3HashClear PROC					; COMDAT
; _pH$ = esi
; Line 10947
	mov	eax, DWORD PTR [esi+24]
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	push	edi
	mov	edi, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+8], ebx
	je	SHORT $LN4@sqlite3Has
	push	eax
	mov	eax, DWORD PTR [esi+16]
	call	eax
	add	esp, 4
$LN4@sqlite3Has:
; Line 10950
	cmp	edi, ebx
	mov	DWORD PTR [esi+24], ebx
	mov	DWORD PTR [esi+20], ebx
	je	SHORT $LN9@sqlite3Has
	push	ebp
$LL3@sqlite3Has:
; Line 10952
	cmp	BYTE PTR [esi+1], bl
	mov	ebp, DWORD PTR [edi]
	je	SHORT $LN1@sqlite3Has
	mov	eax, DWORD PTR [edi+12]
	cmp	eax, ebx
	je	SHORT $LN1@sqlite3Has
; Line 10953
	mov	ecx, DWORD PTR [esi+16]
	push	eax
	call	ecx
	add	esp, 4
$LN1@sqlite3Has:
; Line 10955
	mov	edx, DWORD PTR [esi+16]
	push	edi
	call	edx
	add	esp, 4
	cmp	ebp, ebx
; Line 10956
	mov	edi, ebp
	jne	SHORT $LL3@sqlite3Has
	pop	ebp
$LN9@sqlite3Has:
	pop	edi
; Line 10958
	mov	DWORD PTR [esi+4], ebx
	pop	ebx
; Line 10959
	ret	0
_sqlite3HashClear ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _strHash
_TEXT	SEGMENT
_pKey$ = 8						; size = 4
_nKey$ = 12						; size = 4
_strHash PROC						; COMDAT
; Line 10994
	mov	ecx, DWORD PTR _nKey$[esp-4]
	push	esi
	mov	esi, DWORD PTR _pKey$[esp]
	xor	eax, eax
	test	ecx, ecx
	push	edi
	jg	SHORT $LL2@strHash
	mov	ecx, esi
	lea	edi, DWORD PTR [ecx+1]
$LL10@strHash:
	mov	dl, BYTE PTR [ecx]
	add	ecx, 1
	test	dl, dl
	jne	SHORT $LL10@strHash
	sub	ecx, edi
; Line 10995
	test	ecx, ecx
	jle	SHORT $LN1@strHash
$LL2@strHash:
; Line 10996
	movzx	edx, BYTE PTR [esi]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[edx]
	lea	edi, DWORD PTR [eax*8]
	xor	edx, edi
; Line 10997
	sub	ecx, 1
	xor	eax, edx
	add	esi, 1
	test	ecx, ecx
	jg	SHORT $LL2@strHash
$LN1@strHash:
	pop	edi
; Line 10999
	and	eax, 2147483647				; 7fffffffH
	pop	esi
; Line 11000
	ret	0
_strHash ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _strCompare
_TEXT	SEGMENT
_pKey1$ = 8						; size = 4
_n1$ = 12						; size = 4
_pKey2$ = 16						; size = 4
_n2$ = 20						; size = 4
_strCompare PROC					; COMDAT
; Line 11002
	mov	eax, DWORD PTR _n1$[esp-4]
	cmp	eax, DWORD PTR _n2$[esp-4]
	je	SHORT $LN1@strCompare
	mov	eax, 1
; Line 11004
	ret	0
$LN1@strCompare:
; Line 11003
	mov	edx, DWORD PTR _pKey2$[esp-4]
	mov	ecx, DWORD PTR _pKey1$[esp-4]
	jmp	_sqlite3StrNICmp
_strCompare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _binHash
_TEXT	SEGMENT
_pKey$ = 8						; size = 4
_nKey$ = 12						; size = 4
_binHash PROC						; COMDAT
; Line 11012
	mov	ecx, DWORD PTR _nKey$[esp-4]
	mov	edx, DWORD PTR _pKey$[esp-4]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN6@binHash
	push	esi
	push	edi
$LL2@binHash:
; Line 11013
	movsx	edi, BYTE PTR [edx]
	lea	esi, DWORD PTR [eax*8]
	xor	esi, edi
	sub	ecx, 1
	xor	eax, esi
	add	edx, 1
	test	ecx, ecx
	jg	SHORT $LL2@binHash
	pop	edi
	pop	esi
$LN6@binHash:
; Line 11015
	and	eax, 2147483647				; 7fffffffH
; Line 11016
	ret	0
_binHash ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _binCompare
_TEXT	SEGMENT
_pKey1$ = 8						; size = 4
_n1$ = 12						; size = 4
_pKey2$ = 16						; size = 4
_n2$ = 20						; size = 4
_binCompare PROC					; COMDAT
; Line 11018
	mov	eax, DWORD PTR _n1$[esp-4]
	cmp	eax, DWORD PTR _n2$[esp-4]
	je	SHORT $LN1@binCompare
	mov	eax, 1
; Line 11020
	ret	0
$LN1@binCompare:
; Line 11019
	cmp	eax, 4
	mov	ecx, DWORD PTR _pKey2$[esp-4]
	mov	edx, DWORD PTR _pKey1$[esp-4]
	push	esi
	push	edi
	jb	SHORT $LN12@binCompare
	npad	1
$LL5@binCompare:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN6@binCompare
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL5@binCompare
$LN12@binCompare:
	test	eax, eax
	je	SHORT $LN7@binCompare
$LN6@binCompare:
	movzx	edi, BYTE PTR [ecx]
	movzx	esi, BYTE PTR [edx]
	sub	esi, edi
	jne	SHORT $LN8@binCompare
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN7@binCompare
	movzx	edi, BYTE PTR [ecx]
	movzx	esi, BYTE PTR [edx]
	sub	esi, edi
	jne	SHORT $LN8@binCompare
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN7@binCompare
	movzx	edi, BYTE PTR [ecx]
	movzx	esi, BYTE PTR [edx]
	sub	esi, edi
	jne	SHORT $LN8@binCompare
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN7@binCompare
	movzx	eax, BYTE PTR [ecx]
	movzx	esi, BYTE PTR [edx]
	sub	esi, eax
	je	SHORT $LN7@binCompare
$LN8@binCompare:
	test	esi, esi
	mov	eax, 1
	jg	SHORT $LN9@binCompare
	pop	edi
	or	eax, -1
	pop	esi
; Line 11020
	ret	0
$LN7@binCompare:
; Line 11019
	xor	eax, eax
$LN9@binCompare:
	pop	edi
	pop	esi
; Line 11020
	ret	0
_binCompare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _hashFunction
_TEXT	SEGMENT
_keyClass$ = 8						; size = 4
_hashFunction PROC					; COMDAT
; Line 11045
	cmp	DWORD PTR _keyClass$[esp-4], 3
; Line 11046
	mov	eax, OFFSET _strHash
	je	SHORT $LN1@hashFuncti
; Line 11049
	mov	eax, OFFSET _binHash
$LN1@hashFuncti:
; Line 11052
	ret	0
_hashFunction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _compareFunction
_TEXT	SEGMENT
_keyClass$ = 8						; size = 4
_compareFunction PROC					; COMDAT
; Line 11071
	cmp	DWORD PTR _keyClass$[esp-4], 3
; Line 11072
	mov	eax, OFFSET _strCompare
	je	SHORT $LN1@compareFun
; Line 11075
	mov	eax, OFFSET _binCompare
$LN1@compareFun:
; Line 11078
	ret	0
_compareFunction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _insertElement
_TEXT	SEGMENT
_insertElement PROC					; COMDAT
; _pH$ = esi
; _pEntry$ = edx
; _pNew$ = eax
; Line 11088
	mov	ecx, DWORD PTR [edx+4]
; Line 11089
	test	ecx, ecx
	je	SHORT $LN5@insertElem
	push	edi
; Line 11090
	mov	DWORD PTR [eax], ecx
; Line 11091
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edi
; Line 11092
	mov	edi, DWORD PTR [ecx+4]
	test	edi, edi
	je	SHORT $LN4@insertElem
	mov	DWORD PTR [edi], eax
; Line 11094
	mov	DWORD PTR [ecx+4], eax
; Line 11101
	add	DWORD PTR [edx], 1
	pop	edi
; Line 11102
	mov	DWORD PTR [edx+4], eax
; Line 11103
	ret	0
$LN4@insertElem:
; Line 11093
	mov	DWORD PTR [esi+8], eax
; Line 11094
	mov	DWORD PTR [ecx+4], eax
; Line 11101
	add	DWORD PTR [edx], 1
	pop	edi
; Line 11102
	mov	DWORD PTR [edx+4], eax
; Line 11103
	ret	0
$LN5@insertElem:
; Line 11096
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax], ecx
; Line 11097
	mov	ecx, DWORD PTR [esi+8]
	test	ecx, ecx
	je	SHORT $LN1@insertElem
	mov	DWORD PTR [ecx+4], eax
$LN1@insertElem:
; Line 11098
	mov	DWORD PTR [eax+4], 0
; Line 11099
	mov	DWORD PTR [esi+8], eax
; Line 11101
	add	DWORD PTR [edx], 1
; Line 11102
	mov	DWORD PTR [edx+4], eax
; Line 11103
	ret	0
_insertElement ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _rehash
_TEXT	SEGMENT
_xHash$ = -8						; size = 4
tv187 = -4						; size = 4
_pH$ = 8						; size = 4
_rehash	PROC						; COMDAT
; _new_size$ = eax
; Line 11110
	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pH$[esp+12]
; Line 11116
	mov	ecx, DWORD PTR [ebp+12]
	mov	ebx, eax
	lea	eax, DWORD PTR [ebx*8]
	push	edi
	push	eax
	call	ecx
	mov	edi, eax
	add	esp, 4
; Line 11117
	test	edi, edi
	je	$LN1@rehash
; Line 11118
	mov	eax, DWORD PTR [ebp+24]
	test	eax, eax
	je	SHORT $LN4@rehash
	mov	edx, DWORD PTR [ebp+16]
	push	eax
	call	edx
	add	esp, 4
$LN4@rehash:
; Line 11121
	cmp	BYTE PTR [ebp], 3
	mov	DWORD PTR [ebp+24], edi
	mov	DWORD PTR [ebp+20], ebx
	mov	DWORD PTR _xHash$[esp+20], OFFSET _strHash
	je	SHORT $LN8@rehash
	mov	DWORD PTR _xHash$[esp+20], OFFSET _binHash
$LN8@rehash:
	push	esi
; Line 11122
	mov	esi, DWORD PTR [ebp+8]
	test	esi, esi
	mov	DWORD PTR [ebp+8], 0
	je	SHORT $LN22@rehash
	add	ebx, -1
	mov	DWORD PTR tv187[esp+24], ebx
$LL21@rehash:
; Line 11123
	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+12]
	push	eax
	push	ecx
	call	DWORD PTR _xHash$[esp+32]
	and	eax, DWORD PTR tv187[esp+32]
; Line 11125
	mov	ecx, DWORD PTR [edi+eax*8+4]
	mov	ebx, DWORD PTR [esi]
	lea	edx, DWORD PTR [edi+eax*8+4]
	add	esp, 8
	test	ecx, ecx
	je	SHORT $LN16@rehash
	mov	DWORD PTR [esi], ecx
	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], ebp
	mov	ebp, DWORD PTR [ecx+4]
	test	ebp, ebp
	je	SHORT $LN15@rehash
	mov	DWORD PTR [ebp], esi
	mov	ebp, DWORD PTR _pH$[esp+20]
	mov	DWORD PTR [ecx+4], esi
	jmp	SHORT $LN13@rehash
$LN15@rehash:
	mov	ebp, DWORD PTR _pH$[esp+20]
	mov	DWORD PTR [ebp+8], esi
	mov	DWORD PTR [ecx+4], esi
	jmp	SHORT $LN13@rehash
$LN16@rehash:
	mov	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR [esi], ecx
	mov	ecx, DWORD PTR [ebp+8]
	test	ecx, ecx
	je	SHORT $LN12@rehash
	mov	DWORD PTR [ecx+4], esi
$LN12@rehash:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [ebp+8], esi
$LN13@rehash:
	add	DWORD PTR [edi+eax*8], 1
	test	ebx, ebx
	mov	DWORD PTR [edx], esi
	mov	esi, ebx
	jne	SHORT $LL21@rehash
$LN22@rehash:
	pop	esi
$LN1@rehash:
	pop	edi
	pop	ebp
	pop	ebx
; Line 11127
	add	esp, 8
	ret	0
_rehash	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _findElementGivenHash
_TEXT	SEGMENT
_pKey$ = 8						; size = 4
_nKey$ = 12						; size = 4
_findElementGivenHash PROC				; COMDAT
; _pH$ = ecx
; _h$ = edx
; Line 11143
	mov	eax, DWORD PTR [ecx+24]
	test	eax, eax
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _nKey$[esp+4]
	push	esi
	push	edi
	je	SHORT $LN13@findElemen
; Line 11147
	cmp	BYTE PTR [ecx], 3
	mov	esi, DWORD PTR [eax+edx*8+4]
	mov	edi, DWORD PTR [eax+edx*8]
	mov	ebx, OFFSET _strCompare
	je	SHORT $LN11@findElemen
	mov	ebx, OFFSET _binCompare
$LN11@findElemen:
; Line 11148
	test	edi, edi
	je	SHORT $LN13@findElemen
	npad	7
$LL3@findElemen:
	sub	edi, 1
	test	esi, esi
	je	SHORT $LN13@findElemen
; Line 11149
	mov	eax, DWORD PTR _pKey$[esp+12]
	mov	ecx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [esi+12]
	push	ebp
	push	eax
	push	ecx
	push	edx
	call	ebx
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN12@findElemen
	test	edi, edi
; Line 11152
	mov	esi, DWORD PTR [esi]
	jne	SHORT $LL3@findElemen
$LN13@findElemen:
	pop	edi
	pop	esi
	pop	ebp
; Line 11155
	xor	eax, eax
	pop	ebx
; Line 11156
	ret	0
$LN12@findElemen:
	pop	edi
; Line 11150
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 11156
	ret	0
_findElementGivenHash ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _removeElementGivenHash
_TEXT	SEGMENT
_h$ = 8							; size = 4
_removeElementGivenHash PROC				; COMDAT
; _pH$ = eax
; _elem$ = edi
; Line 11165
	push	esi
	mov	esi, eax
; Line 11167
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN7@removeElem
; Line 11168
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax], ecx
; Line 11169
	jmp	SHORT $LN6@removeElem
$LN7@removeElem:
; Line 11170
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [esi+8], edx
$LN6@removeElem:
; Line 11172
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN5@removeElem
; Line 11173
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], ecx
$LN5@removeElem:
; Line 11175
	mov	edx, DWORD PTR [esi+24]
	mov	eax, DWORD PTR _h$[esp]
; Line 11176
	cmp	DWORD PTR [edx+eax*8+4], edi
	lea	eax, DWORD PTR [edx+eax*8]
	jne	SHORT $LN4@removeElem
; Line 11177
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax+4], ecx
$LN4@removeElem:
; Line 11179
	add	DWORD PTR [eax], -1
; Line 11180
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN3@removeElem
; Line 11181
	mov	DWORD PTR [eax+4], 0
$LN3@removeElem:
; Line 11183
	cmp	BYTE PTR [esi+1], 0
	je	SHORT $LN2@removeElem
; Line 11184
	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+16]
	push	edx
	call	eax
	add	esp, 4
$LN2@removeElem:
; Line 11186
	mov	ecx, DWORD PTR [esi+16]
	push	edi
	call	ecx
; Line 11187
	add	DWORD PTR [esi+4], -1
	add	esp, 4
; Line 11188
	cmp	DWORD PTR [esi+4], 0
	jg	SHORT $LN1@removeElem
; Line 11191
	call	_sqlite3HashClear
$LN1@removeElem:
	pop	esi
; Line 11193
	ret	0
_removeElementGivenHash ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3HashFind
_TEXT	SEGMENT
_sqlite3HashFind PROC					; COMDAT
; _pH$ = esi
; _pKey$ = ebx
; _nKey$ = edi
; Line 11204
	test	esi, esi
	je	SHORT $LN1@sqlite3Has@2
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN1@sqlite3Has@2
; Line 11205
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN7@sqlite3Has@2
	mov	eax, OFFSET _binHash
$LN7@sqlite3Has@2:
; Line 11207
	push	edi
	push	ebx
	call	eax
; Line 11209
	mov	edx, DWORD PTR [esi+20]
	sub	edx, 1
	push	edi
	and	edx, eax
	push	ebx
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
; Line 11210
	test	eax, eax
	je	SHORT $LN1@sqlite3Has@2
	mov	eax, DWORD PTR [eax+8]
; Line 11211
	ret	0
$LN1@sqlite3Has@2:
; Line 11204
	xor	eax, eax
; Line 11211
	ret	0
_sqlite3HashFind ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3HashInsert
_TEXT	SEGMENT
_hraw$ = -4						; size = 4
_pKey$ = 8						; size = 4
_nKey$ = 12						; size = 4
_data$ = 16						; size = 4
_sqlite3HashInsert PROC					; COMDAT
; _pH$ = eax
; Line 11228
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _nKey$[esp+8]
	push	esi
	mov	esi, eax
; Line 11236
	cmp	BYTE PTR [esi], 3
	push	edi
	mov	eax, OFFSET _strHash
	je	SHORT $LN15@sqlite3Has@3
	mov	eax, OFFSET _binHash
$LN15@sqlite3Has@3:
; Line 11238
	mov	edi, DWORD PTR _pKey$[esp+16]
	push	ebp
	push	edi
	call	eax
; Line 11240
	mov	ebx, DWORD PTR [esi+20]
	sub	ebx, 1
	and	ebx, eax
; Line 11241
	push	ebp
	push	edi
	mov	edx, ebx
	mov	ecx, esi
	mov	DWORD PTR _hraw$[esp+36], eax
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
; Line 11242
	test	eax, eax
	je	SHORT $LN12@sqlite3Has@3
; Line 11244
	mov	ecx, DWORD PTR _data$[esp+16]
	test	ecx, ecx
	mov	ebp, DWORD PTR [eax+8]
	jne	SHORT $LN11@sqlite3Has@3
; Line 11245
	mov	edi, eax
	push	ebx
	mov	eax, esi
	call	_removeElementGivenHash
	add	esp, 4
	pop	edi
	pop	esi
; Line 11249
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 11286
	pop	ecx
	ret	0
$LN11@sqlite3Has@3:
	pop	edi
	pop	esi
; Line 11247
	mov	DWORD PTR [eax+8], ecx
; Line 11249
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 11286
	pop	ecx
	ret	0
$LN12@sqlite3Has@3:
; Line 11251
	mov	ebx, DWORD PTR _data$[esp+16]
	test	ebx, ebx
	je	$LN20@sqlite3Has@3
; Line 11252
	mov	eax, DWORD PTR [esi+12]
	push	20					; 00000014H
	call	eax
	mov	edi, eax
	add	esp, 4
; Line 11253
	test	edi, edi
	jne	SHORT $LN8@sqlite3Has@3
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
; Line 11286
	pop	ecx
	ret	0
$LN8@sqlite3Has@3:
; Line 11254
	cmp	BYTE PTR [esi+1], 0
	mov	ebx, DWORD PTR _pKey$[esp+16]
	je	SHORT $LN7@sqlite3Has@3
	test	ebx, ebx
	je	SHORT $LN7@sqlite3Has@3
; Line 11255
	mov	ecx, DWORD PTR [esi+12]
	push	ebp
	call	ecx
	add	esp, 4
; Line 11256
	test	eax, eax
	mov	DWORD PTR [edi+12], eax
; Line 11258
	je	SHORT $LN2@sqlite3Has@3
; Line 11260
	push	ebp
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 11261
	jmp	SHORT $LN5@sqlite3Has@3
$LN7@sqlite3Has@3:
; Line 11262
	mov	DWORD PTR [edi+12], ebx
$LN5@sqlite3Has@3:
; Line 11264
	mov	DWORD PTR [edi+16], ebp
; Line 11266
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+4], 1
	test	eax, eax
	jne	SHORT $LN3@sqlite3Has@3
; Line 11267
	push	esi
	mov	eax, 8
	call	_rehash
; Line 11268
	mov	eax, DWORD PTR [esi+20]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@sqlite3Has@3
; Line 11270
	cmp	BYTE PTR [esi+1], al
	mov	DWORD PTR [esi+4], eax
	je	SHORT $LN2@sqlite3Has@3
; Line 11271
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [esi+16]
	push	eax
	call	ecx
	add	esp, 4
$LN2@sqlite3Has@3:
; Line 11273
	mov	edx, DWORD PTR [esi+16]
	push	edi
	call	edx
; Line 11274
	mov	eax, DWORD PTR _data$[esp+20]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 11286
	pop	ecx
	ret	0
$LN3@sqlite3Has@3:
; Line 11277
	cmp	DWORD PTR [esi+4], eax
	jle	SHORT $LN1@sqlite3Has@3
; Line 11278
	add	eax, eax
	push	esi
	call	_rehash
	add	esp, 4
$LN1@sqlite3Has@3:
; Line 11282
	mov	eax, DWORD PTR [esi+20]
; Line 11283
	mov	ecx, DWORD PTR [esi+24]
	sub	eax, 1
	and	eax, DWORD PTR _hraw$[esp+20]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, edi
	call	_insertElement
; Line 11284
	mov	edx, DWORD PTR _data$[esp+16]
	mov	DWORD PTR [edi+8], edx
$LN20@sqlite3Has@3:
	pop	edi
	pop	esi
	pop	ebp
; Line 11285
	xor	eax, eax
	pop	ebx
; Line 11286
	pop	ecx
	ret	0
_sqlite3HashInsert ENDP
_TEXT	ENDS
EXTRN	_malloc:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3GenericMalloc
_TEXT	SEGMENT
_sqlite3GenericMalloc PROC				; COMDAT
; _n$ = eax
; Line 16007
	push	eax
	call	_malloc
	add	esp, 4
; Line 16009
	ret	0
_sqlite3GenericMalloc ENDP
_TEXT	ENDS
EXTRN	_realloc:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3GenericRealloc
_TEXT	SEGMENT
_sqlite3GenericRealloc PROC				; COMDAT
; _p$ = ecx
; _n$ = eax
; Line 16012
	push	eax
	push	ecx
	call	_realloc
	add	esp, 8
; Line 16014
	ret	0
_sqlite3GenericRealloc ENDP
_TEXT	ENDS
EXTRN	_free:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3GenericFree
_TEXT	SEGMENT
_sqlite3GenericFree PROC				; COMDAT
; _p$ = eax
; Line 16017
	push	eax
	call	_free
	pop	ecx
; Line 16018
	ret	0
_sqlite3GenericFree ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetVersionExA@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _isNT
_TEXT	SEGMENT
_sInfo$83614 = -152					; size = 148
__$ArrayPad$ = -4					; size = 4
_isNT	PROC						; COMDAT
; Line 16112
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+152], eax
; Line 16113
	mov	eax, DWORD PTR _sqlite3_os_type
	test	eax, eax
	jne	SHORT $LN1@isNT
; Line 16116
	lea	eax, DWORD PTR _sInfo$83614[esp+152]
	push	eax
	mov	DWORD PTR _sInfo$83614[esp+156], 148	; 00000094H
	call	DWORD PTR __imp__GetVersionExA@4
; Line 16117
	xor	eax, eax
	cmp	DWORD PTR _sInfo$83614[esp+168], 2
	sete	al
	add	eax, 1
	mov	DWORD PTR _sqlite3_os_type, eax
$LN1@isNT:
; Line 16119
	xor	ecx, ecx
	cmp	eax, 2
	sete	cl
	mov	eax, ecx
; Line 16120
	mov	ecx, DWORD PTR __$ArrayPad$[esp+152]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 152				; 00000098H
	ret	0
_isNT	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _winOpenDirectory
_TEXT	SEGMENT
_id$ = 8						; size = 4
_zDirname$ = 12						; size = 4
_winOpenDirectory PROC					; COMDAT
; Line 16899
	xor	eax, eax
; Line 16900
	ret	0
_winOpenDirectory ENDP
_TEXT	ENDS
EXTRN	__imp__ReadFile@20:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtpy
;	COMDAT _winRead
_TEXT	SEGMENT
_got$ = 8						; size = 4
_id$ = 8						; size = 4
_pBuf$ = 12						; size = 4
_amt$ = 16						; size = 4
_winRead PROC						; COMDAT
; Line 16998
	mov	ecx, DWORD PTR _id$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR _amt$[esp]
	push	edi
	mov	edi, DWORD PTR _pBuf$[esp+4]
	push	0
	lea	eax, DWORD PTR _got$[esp+8]
	push	eax
	push	esi
	push	edi
	push	edx
	call	DWORD PTR __imp__ReadFile@20
	test	eax, eax
	jne	SHORT $LN3@winRead
	pop	edi
; Line 16999
	mov	eax, 266				; 0000010aH
	pop	esi
; Line 17007
	ret	0
$LN3@winRead:
; Line 17001
	mov	eax, DWORD PTR _got$[esp+4]
	cmp	eax, esi
	jne	SHORT $LN2@winRead
	pop	edi
; Line 17002
	xor	eax, eax
	pop	esi
; Line 17007
	ret	0
$LN2@winRead:
; Line 17004
	sub	esi, eax
	push	esi
	add	eax, edi
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	pop	edi
; Line 17005
	mov	eax, 522				; 0000020aH
	pop	esi
; Line 17007
	ret	0
_winRead ENDP
_TEXT	ENDS
EXTRN	__imp__WriteFile@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _winWrite
_TEXT	SEGMENT
_id$ = 8						; size = 4
_pBuf$ = 12						; size = 4
_wrote$ = 16						; size = 4
_amt$ = 16						; size = 4
_winWrite PROC						; COMDAT
; Line 17013
	push	ebx
	push	ebp
	push	esi
; Line 17022
	mov	esi, DWORD PTR _amt$[esp+8]
	test	esi, esi
	push	edi
	jle	SHORT $LN1@winWrite
	mov	ebp, DWORD PTR _id$[esp+12]
	mov	ebx, DWORD PTR __imp__WriteFile@20
	mov	edi, DWORD PTR _pBuf$[esp+12]
	npad	6
$LL4@winWrite:
	mov	ecx, DWORD PTR [ebp+4]
	push	0
	lea	eax, DWORD PTR _wrote$[esp+16]
	push	eax
	push	esi
	push	edi
	push	ecx
	call	ebx
	test	eax, eax
	je	SHORT $LN1@winWrite
	mov	eax, DWORD PTR _wrote$[esp+12]
	test	eax, eax
	jbe	SHORT $LN3@winWrite
; Line 17023
	sub	esi, eax
; Line 17024
	add	edi, eax
	test	esi, esi
	jg	SHORT $LL4@winWrite
$LN3@winWrite:
; Line 17026
	cmp	esi, eax
	jg	SHORT $LN1@winWrite
	pop	edi
	pop	esi
	pop	ebp
; Line 17029
	xor	eax, eax
	pop	ebx
; Line 17030
	ret	0
$LN1@winWrite:
	pop	edi
	pop	esi
	pop	ebp
; Line 17027
	mov	eax, 13					; 0000000dH
	pop	ebx
; Line 17030
	ret	0
_winWrite ENDP
_TEXT	ENDS
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetFilePointer@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT _winSeek
_TEXT	SEGMENT
_upperBits$ = -4					; size = 4
_id$ = 8						; size = 4
_offset$ = 12						; size = 8
_winSeek PROC						; COMDAT
; Line 17042
	push	ecx
; Line 17043
	mov	eax, DWORD PTR _offset$[esp+4]
	mov	ecx, eax
; Line 17050
	push	0
	lea	edx, DWORD PTR _upperBits$[esp+8]
	push	edx
	sar	ecx, 31					; 0000001fH
	mov	ecx, DWORD PTR _id$[esp+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _upperBits$[esp+12], eax
	mov	eax, DWORD PTR _offset$[esp+8]
	push	eax
	push	edx
	call	DWORD PTR __imp__SetFilePointer@16
; Line 17052
	cmp	eax, -1
	jne	SHORT $LN1@winSeek
	call	DWORD PTR __imp__GetLastError@0
	test	eax, eax
	je	SHORT $LN1@winSeek
; Line 17053
	mov	eax, 13					; 0000000dH
; Line 17056
	pop	ecx
	ret	0
$LN1@winSeek:
; Line 17055
	xor	eax, eax
; Line 17056
	pop	ecx
	ret	0
_winSeek ENDP
_TEXT	ENDS
EXTRN	__imp__FlushFileBuffers@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _winSync
_TEXT	SEGMENT
_id$ = 8						; size = 4
_dataOnly$ = 12						; size = 4
_winSync PROC						; COMDAT
; Line 17064
	mov	eax, DWORD PTR _id$[esp-4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__FlushFileBuffers@4
	neg	eax
	sbb	eax, eax
	and	eax, -10				; fffffff6H
	add	eax, 10					; 0000000aH
; Line 17069
	ret	0
_winSync ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3WinSyncDirectory
_TEXT	SEGMENT
_sqlite3WinSyncDirectory PROC				; COMDAT
; Line 17077
	xor	eax, eax
; Line 17078
	ret	0
_sqlite3WinSyncDirectory ENDP
_TEXT	ENDS
EXTRN	__imp__SetEndOfFile@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _winTruncate
_TEXT	SEGMENT
_upperBits$ = -4					; size = 4
_id$ = 8						; size = 4
_nByte$ = 12						; size = 8
_winTruncate PROC					; COMDAT
; Line 17083
	push	ecx
; Line 17084
	mov	eax, DWORD PTR _nByte$[esp+4]
	push	esi
; Line 17088
	mov	esi, DWORD PTR _id$[esp+4]
	push	0
	mov	ecx, eax
	lea	edx, DWORD PTR _upperBits$[esp+12]
	mov	DWORD PTR _upperBits$[esp+12], eax
	mov	eax, DWORD PTR _nByte$[esp+8]
	push	edx
	sar	ecx, 31					; 0000001fH
	mov	ecx, DWORD PTR [esi+4]
	push	eax
	push	ecx
	call	DWORD PTR __imp__SetFilePointer@16
; Line 17089
	mov	edx, DWORD PTR [esi+4]
	push	edx
	call	DWORD PTR __imp__SetEndOfFile@4
; Line 17090
	xor	eax, eax
	pop	esi
; Line 17091
	pop	ecx
	ret	0
_winTruncate ENDP
_TEXT	ENDS
EXTRN	__imp__GetFileSize@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _winFileSize
_TEXT	SEGMENT
_upperBits$ = 8						; size = 4
_id$ = 8						; size = 4
_pSize$ = 12						; size = 4
_winFileSize PROC					; COMDAT
; Line 17100
	mov	ecx, DWORD PTR _id$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	lea	eax, DWORD PTR _upperBits$[esp]
	push	eax
	push	edx
	call	DWORD PTR __imp__GetFileSize@8
; Line 17101
	push	1
	push	0
	mov	esi, eax
	mov	eax, DWORD PTR _upperBits$[esp+8]
	push	0
	push	eax
	call	__allmul
	mov	ecx, eax
	xor	eax, eax
	add	ecx, esi
	adc	edx, eax
	mov	eax, DWORD PTR _pSize$[esp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
; Line 17102
	xor	eax, eax
	pop	esi
; Line 17103
	ret	0
_winFileSize ENDP
_TEXT	ENDS
EXTRN	__imp__UnlockFile@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _unlockReadLock
_TEXT	SEGMENT
_unlockReadLock PROC					; COMDAT
; _pFile$ = esi
; Line 17139
	call	_isNT
	test	eax, eax
; Line 17140
	push	0
	je	SHORT $LN2@unlockRead
	mov	eax, DWORD PTR [esi+4]
	push	510					; 000001feH
	push	0
	push	1073741826				; 40000002H
	push	eax
; Line 17142
	call	DWORD PTR __imp__UnlockFile@20
; Line 17145
	ret	0
$LN2@unlockRead:
; Line 17142
	movsx	ecx, WORD PTR [esi+10]
	mov	edx, DWORD PTR [esi+4]
	push	1
	push	0
	add	ecx, 1073741826				; 40000002H
	push	ecx
	push	edx
	call	DWORD PTR __imp__UnlockFile@20
; Line 17145
	ret	0
_unlockReadLock ENDP
_TEXT	ENDS
EXTRN	__imp__LockFile@20:PROC
; Function compile flags: /Ogtpy
;	COMDAT _winCheckReservedLock
_TEXT	SEGMENT
_id$ = 8						; size = 4
_winCheckReservedLock PROC				; COMDAT
; Line 17318
	push	edi
; Line 17322
	mov	edi, DWORD PTR _id$[esp]
	cmp	BYTE PTR [edi+8], 2
	jb	SHORT $LN3@winCheckRe
; Line 17323
	mov	eax, 1
	pop	edi
; Line 17334
	ret	0
$LN3@winCheckRe:
; Line 17326
	mov	eax, DWORD PTR [edi+4]
	push	esi
	push	0
	push	1
	push	0
	push	1073741825				; 40000001H
	push	eax
	call	DWORD PTR __imp__LockFile@20
	mov	esi, eax
; Line 17327
	test	esi, esi
	je	SHORT $LN1@winCheckRe
; Line 17328
	mov	ecx, DWORD PTR [edi+4]
	push	0
	push	1
	push	0
	push	1073741825				; 40000001H
	push	ecx
	call	DWORD PTR __imp__UnlockFile@20
$LN1@winCheckRe:
; Line 17330
	xor	eax, eax
	test	esi, esi
	pop	esi
	sete	al
	pop	edi
; Line 17334
	ret	0
_winCheckReservedLock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _winSetFullSync
_TEXT	SEGMENT
_id$ = 8						; size = 4
_v$ = 12						; size = 4
_winSetFullSync PROC					; COMDAT
; Line 17432
	ret	0
_winSetFullSync ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _winFileHandle
_TEXT	SEGMENT
_id$ = 8						; size = 4
_winFileHandle PROC					; COMDAT
; Line 17438
	mov	eax, DWORD PTR _id$[esp-4]
	mov	eax, DWORD PTR [eax+4]
; Line 17439
	ret	0
_winFileHandle ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _winLockState
_TEXT	SEGMENT
_id$ = 8						; size = 4
_winLockState PROC					; COMDAT
; Line 17446
	mov	eax, DWORD PTR _id$[esp-4]
	movzx	eax, BYTE PTR [eax+8]
; Line 17447
	ret	0
_winLockState ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _winSectorSize
_TEXT	SEGMENT
_id$ = 8						; size = 4
_winSectorSize PROC					; COMDAT
; Line 17460
	mov	eax, 512				; 00000200H
; Line 17461
	ret	0
_winSectorSize ENDP
_TEXT	ENDS
EXTRN	__imp__GetProcAddress@8:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3WinDlsym
_TEXT	SEGMENT
_sqlite3WinDlsym PROC					; COMDAT
; _pHandle$ = ecx
; _zSymbol$ = eax
; Line 17549
	push	eax
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
; Line 17551
	ret	0
_sqlite3WinDlsym ENDP
_TEXT	ENDS
EXTRN	__imp__FreeLibrary@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3WinDlclose
_TEXT	SEGMENT
_sqlite3WinDlclose PROC					; COMDAT
; _pHandle$ = eax
; Line 17553
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
; Line 17554
	ret	0
_sqlite3WinDlclose ENDP
_TEXT	ENDS
EXTRN	__imp__GetSystemTime@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3WinRandomSeed
_TEXT	SEGMENT
_sqlite3WinRandomSeed PROC				; COMDAT
; _zBuf$ = esi
; Line 17575
	push	256					; 00000100H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 17576
	push	esi
	call	DWORD PTR __imp__GetSystemTime@4
; Line 17577
	xor	eax, eax
; Line 17578
	ret	0
_sqlite3WinRandomSeed ENDP
_TEXT	ENDS
EXTRN	__imp__Sleep@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3WinSleep
_TEXT	SEGMENT
_sqlite3WinSleep PROC					; COMDAT
; _ms$ = esi
; Line 17584
	push	esi
	call	DWORD PTR __imp__Sleep@4
; Line 17585
	mov	eax, esi
; Line 17586
	ret	0
_sqlite3WinSleep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3WinEnterMutex
_TEXT	SEGMENT
_sqlite3WinEnterMutex PROC				; COMDAT
; Line 17623
	add	DWORD PTR _inMutex, 1
; Line 17624
	ret	0
_sqlite3WinEnterMutex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3WinLeaveMutex
_TEXT	SEGMENT
_sqlite3WinLeaveMutex PROC				; COMDAT
; Line 17627
	sub	DWORD PTR _inMutex, 1
; Line 17632
	ret	0
_sqlite3WinLeaveMutex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3WinInMutex
_TEXT	SEGMENT
_sqlite3WinInMutex PROC					; COMDAT
; Line 17645
	xor	eax, eax
	cmp	DWORD PTR _inMutex, eax
	setg	al
; Line 17647
	ret	0
_sqlite3WinInMutex ENDP
_TEXT	ENDS
PUBLIC	__real@4141978ac0000000
PUBLIC	__real@4269254d38000000
PUBLIC	__real@41f0000000000000
EXTRN	__imp__GetSystemTimeAsFileTime@4:PROC
;	COMDAT __real@4141978ac0000000
CONST	SEGMENT
__real@4141978ac0000000 DQ 04141978ac0000000r	; 2.30581e+006
CONST	ENDS
;	COMDAT __real@4269254d38000000
CONST	SEGMENT
__real@4269254d38000000 DQ 04269254d38000000r	; 8.64e+011
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3WinCurrentTime
_TEXT	SEGMENT
tv137 = -12						; size = 4
tv132 = -12						; size = 4
_ft$ = -8						; size = 8
_prNow$ = 8						; size = 4
_sqlite3WinCurrentTime PROC				; COMDAT
; Line 17663
	sub	esp, 12					; 0000000cH
; Line 17674
	lea	eax, DWORD PTR _ft$[esp+12]
	push	eax
	call	DWORD PTR __imp__GetSystemTimeAsFileTime@4
; Line 17677
	fild	DWORD PTR _ft$[esp+16]
	mov	ecx, DWORD PTR _ft$[esp+16]
	test	ecx, ecx
	jge	SHORT $LN3@sqlite3Win
	fadd	QWORD PTR __real@41f0000000000000
$LN3@sqlite3Win:
	mov	edx, DWORD PTR _ft$[esp+12]
	fmul	QWORD PTR __real@41f0000000000000
	test	edx, edx
	fild	DWORD PTR _ft$[esp+12]
	jge	SHORT $LN4@sqlite3Win
	fadd	QWORD PTR __real@41f0000000000000
$LN4@sqlite3Win:
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _prNow$[esp+8]
	fdiv	QWORD PTR __real@4269254d38000000
	fadd	QWORD PTR __real@4141978ac0000000
	fstp	QWORD PTR [eax]
; Line 17683
	xor	eax, eax
; Line 17684
	add	esp, 12					; 0000000cH
	ret	0
_sqlite3WinCurrentTime ENDP
_TEXT	ENDS
EXTRN	__imp__TlsSetValue@8:PROC
EXTRN	__imp__TlsGetValue@4:PROC
EXTRN	__imp__TlsAlloc@0:PROC
_BSS	SEGMENT
?key@?1??sqlite3WinThreadSpecificData@@9@9 DD 01H DUP (?) ; `sqlite3WinThreadSpecificData'::`2'::key
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _sqlite3WinThreadSpecificData
_TEXT	SEGMENT
_sqlite3WinThreadSpecificData PROC			; COMDAT
; _allocateFlag$ = eax
; Line 17722
	cmp	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, 0
	push	ebx
	push	esi
	mov	esi, eax
	mov	ebx, 1
	jne	SHORT $LN31@sqlite3Win@2
; Line 17723
	add	DWORD PTR _inMutex, ebx
; Line 17725
	call	DWORD PTR __imp__TlsAlloc@0
; Line 17727
	sub	DWORD PTR _inMutex, ebx
	cmp	eax, -1
	mov	DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9, eax
	jne	SHORT $LN6@sqlite3Win@2
	pop	esi
; Line 17728
	xor	eax, eax
	pop	ebx
; Line 17752
	ret	0
$LN6@sqlite3Win@2:
; Line 17730
	mov	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, ebx
; Line 17732
	jmp	SHORT $LN21@sqlite3Win@2
$LN31@sqlite3Win@2:
	mov	eax, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
$LN21@sqlite3Win@2:
	push	edi
; Line 17734
	push	eax
	call	DWORD PTR __imp__TlsGetValue@4
; Line 17735
	test	esi, esi
	mov	edi, eax
	jle	SHORT $LN5@sqlite3Win@2
; Line 17736
	test	edi, edi
	jne	$LN1@sqlite3Win@2
; Line 17737
	push	12					; 0000000cH
	call	_malloc
	mov	edi, eax
	add	esp, 4
; Line 17738
	test	edi, edi
	je	$LN1@sqlite3Win@2
; Line 17739
	mov	eax, DWORD PTR ?zeroData@?1??sqlite3WinThreadSpecificData@@9@9
	mov	DWORD PTR [edi], eax
	mov	ecx, DWORD PTR ?zeroData@?1??sqlite3WinThreadSpecificData@@9@9+4
; Line 17740
	mov	eax, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
	mov	DWORD PTR [edi+4], ecx
	mov	edx, DWORD PTR ?zeroData@?1??sqlite3WinThreadSpecificData@@9@9+8
	push	edi
	push	eax
	mov	DWORD PTR [edi+8], edx
	call	DWORD PTR __imp__TlsSetValue@8
; Line 17751
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 17752
	ret	0
$LN5@sqlite3Win@2:
; Line 17745
	test	edi, edi
	je	$LN1@sqlite3Win@2
	test	esi, esi
	jge	$LN1@sqlite3Win@2
	mov	eax, 12					; 0000000cH
	mov	ecx, OFFSET ?zeroData@?1??sqlite3WinThreadSpecificData@@9@9
	mov	edx, edi
	push	ebp
$LL12@sqlite3Win@2:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN13@sqlite3Win@2
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL12@sqlite3Win@2
	test	eax, eax
	je	SHORT $LN14@sqlite3Win@2
$LN13@sqlite3Win@2:
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN32@sqlite3Win@2
	sub	eax, ebx
	add	ecx, ebx
	add	edx, ebx
	test	eax, eax
	je	SHORT $LN14@sqlite3Win@2
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN32@sqlite3Win@2
	sub	eax, ebx
	add	ecx, ebx
	add	edx, ebx
	test	eax, eax
	je	SHORT $LN14@sqlite3Win@2
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN32@sqlite3Win@2
	sub	eax, ebx
	add	ecx, ebx
	add	edx, ebx
	test	eax, eax
	je	SHORT $LN14@sqlite3Win@2
	movzx	esi, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	sub	esi, ecx
	je	SHORT $LN14@sqlite3Win@2
$LN32@sqlite3Win@2:
	test	esi, esi
	mov	eax, ebx
	jg	SHORT $LN16@sqlite3Win@2
	or	eax, -1
	jmp	SHORT $LN16@sqlite3Win@2
$LN14@sqlite3Win@2:
	xor	eax, eax
$LN16@sqlite3Win@2:
	test	eax, eax
	pop	ebp
	jne	SHORT $LN1@sqlite3Win@2
; Line 17746
	push	edi
	call	_free
; Line 17747
	mov	edx, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
	add	esp, 4
	push	0
	push	edx
	call	DWORD PTR __imp__TlsSetValue@8
; Line 17749
	xor	edi, edi
$LN1@sqlite3Win@2:
; Line 17751
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 17752
	ret	0
_sqlite3WinThreadSpecificData ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pageInStatement
_TEXT	SEGMENT
_pageInStatement PROC					; COMDAT
; _pPg$ = eax
; Line 18232
	mov	ecx, DWORD PTR [eax]
; Line 18233
	cmp	BYTE PTR [ecx+16], 0
	je	SHORT $LN2@pageInStat
; Line 18234
	mov	edx, DWORD PTR [ecx+56]
	add	edx, DWORD PTR [ecx+52]
	movzx	eax, BYTE PTR [edx+eax+64]
; Line 18240
	ret	0
$LN2@pageInStat:
; Line 18236
	mov	eax, DWORD PTR [eax+4]
	push	esi
; Line 18237
	mov	esi, DWORD PTR [ecx+80]
; Line 18238
	test	esi, esi
	je	SHORT $LN5@pageInStat
	cmp	eax, DWORD PTR [ecx+36]
	jg	SHORT $LN5@pageInStat
	mov	ecx, eax
	and	ecx, 7
	mov	edx, 1
	shl	edx, cl
	shr	eax, 3
	mov	al, BYTE PTR [eax+esi]
	test	dl, al
	je	SHORT $LN5@pageInStat
	mov	eax, 1
	pop	esi
; Line 18240
	ret	0
$LN5@pageInStat:
; Line 18238
	xor	eax, eax
	pop	esi
; Line 18240
	ret	0
_pageInStatement ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _read32bits
_TEXT	SEGMENT
_ac$ = -4						; size = 4
_pRes$ = 8						; size = 4
_read32bits PROC					; COMDAT
; _fd$ = eax
; Line 18280
	push	ecx
; Line 18282
	mov	ecx, DWORD PTR [eax]
	push	4
	lea	edx, DWORD PTR _ac$[esp+8]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 12					; 0000000cH
; Line 18283
	test	eax, eax
	jne	SHORT $LN1@read32bits
; Line 18284
	mov	ecx, DWORD PTR _ac$[esp+4]
	xor	edx, edx
	mov	dh, cl
	movzx	ecx, ch
	or	edx, ecx
	movzx	ecx, BYTE PTR _ac$[esp+6]
	shl	edx, 8
	or	edx, ecx
	movzx	ecx, BYTE PTR _ac$[esp+7]
	shl	edx, 8
	or	edx, ecx
	mov	ecx, DWORD PTR _pRes$[esp]
	mov	DWORD PTR [ecx], edx
$LN1@read32bits:
; Line 18287
	pop	ecx
	ret	0
_read32bits ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _write32bits
_TEXT	SEGMENT
_ac$ = -4						; size = 4
_write32bits PROC					; COMDAT
; _fd$ = ecx
; _val$ = eax
; Line 18298
	push	ecx
; Line 18300
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR _ac$[esp+4], dl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR _ac$[esp+5], dl
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR _ac$[esp+6], dl
	mov	BYTE PTR _ac$[esp+7], al
; Line 18301
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+12]
	push	4
	lea	edx, DWORD PTR _ac$[esp+8]
	push	edx
	push	ecx
	call	eax
; Line 18302
	add	esp, 16					; 00000010H
	ret	0
_write32bits ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _retrieve32bits
_TEXT	SEGMENT
_retrieve32bits PROC					; COMDAT
; _p$ = ecx
; _offset$ = eax
; Line 18311
	xor	edx, edx
	mov	dh, BYTE PTR [ecx+eax+48]
	push	esi
	movzx	esi, BYTE PTR [ecx+eax+50]
	mov	dl, BYTE PTR [ecx+eax+49]
	movzx	eax, BYTE PTR [ecx+eax+51]
	shl	edx, 8
	or	edx, esi
	shl	edx, 8
	or	eax, edx
	pop	esi
; Line 18312
	ret	0
_retrieve32bits ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_error
_TEXT	SEGMENT
_pPager$ = 8						; size = 4
_pager_error PROC					; COMDAT
; _rc$ = eax
; Line 18326
	mov	ecx, eax
	and	ecx, 255				; 000000ffH
; Line 18332
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN1@pager_erro
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN1@pager_erro
	cmp	ecx, 11					; 0000000bH
	jne	SHORT $LN2@pager_erro
$LN1@pager_erro:
; Line 18333
	mov	ecx, DWORD PTR _pPager$[esp-4]
	mov	DWORD PTR [ecx+24], eax
$LN2@pager_erro:
; Line 18336
	ret	0
_pager_error ENDP
_TEXT	ENDS
EXTRN	__alldiv:PROC
; Function compile flags: /Ogtpy
;	COMDAT _seekJournalHdr
_TEXT	SEGMENT
_seekJournalHdr PROC					; COMDAT
; _pPager$ = eax
; Line 18461
	push	ebx
	push	esi
	push	edi
	mov	edi, eax
; Line 18463
	mov	ecx, DWORD PTR [edi+136]
	mov	esi, DWORD PTR [edi+140]
; Line 18464
	mov	ebx, ecx
	xor	eax, eax
	xor	edx, edx
	or	ebx, esi
	je	SHORT $LN1@seekJourna
; Line 18465
	mov	eax, DWORD PTR [edi+176]
	push	ebp
	cdq
	mov	ebp, edx
	push	ebp
	sub	ecx, 1
	mov	ebx, eax
	push	ebx
	sbb	esi, 0
	push	esi
	push	ecx
	call	__alldiv
	push	ebp
	add	eax, 1
	push	ebx
	adc	edx, 0
	push	edx
	push	eax
	call	__allmul
	pop	ebp
$LN1@seekJourna:
; Line 18470
	mov	DWORD PTR [edi+136], eax
	mov	DWORD PTR [edi+140], edx
; Line 18471
	mov	edi, DWORD PTR [edi+100]
	mov	ecx, DWORD PTR [edi]
	push	edx
	mov	edx, DWORD PTR [ecx+16]
	push	eax
	push	edi
	call	edx
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
; Line 18472
	ret	0
_seekJournalHdr ENDP
_TEXT	ENDS
PUBLIC	_pDbSize$GSCopy$
PUBLIC	_pNRec$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _readJournalHdr
_TEXT	SEGMENT
_ac$105639 = -24					; size = 4
_pNRec$GSCopy$ = -20					; size = 4
_pDbSize$GSCopy$ = -16					; size = 4
_aMagic$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_journalSize$ = 8					; size = 8
_pNRec$ = 16						; size = 4
_readJournalHdr PROC					; COMDAT
; _pPager$ = edi
; _pDbSize$ = ecx
; Line 18557
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+24], eax
; Line 18582
	mov	eax, DWORD PTR _pNRec$[esp+20]
	mov	DWORD PTR _pNRec$GSCopy$[esp+24], eax
	mov	eax, edi
	mov	DWORD PTR _pDbSize$GSCopy$[esp+24], ecx
	call	_seekJournalHdr
	test	eax, eax
	jne	$LN9@readJourna
	mov	eax, DWORD PTR [edi+176]
	push	ebx
	lea	ebx, DWORD PTR [edi+176]
	cdq
	add	eax, DWORD PTR [edi+136]
	adc	edx, DWORD PTR [edi+140]
	cmp	edx, DWORD PTR _journalSize$[esp+28]
	jl	SHORT $LN7@readJourna
; Line 18564
	jg	$LN31@readJourna
	cmp	eax, DWORD PTR _journalSize$[esp+24]
; Line 18565
	ja	$LN31@readJourna
$LN7@readJourna:
; Line 18568
	mov	eax, DWORD PTR [edi+100]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+8]
	push	8
	lea	ecx, DWORD PTR _aMagic$[esp+32]
	push	ecx
	push	eax
	call	edx
	add	esp, 12					; 0000000cH
; Line 18569
	test	eax, eax
	jne	$LN36@readJourna
	push	ebp
	push	esi
; Line 18571
	mov	eax, 8
	mov	edx, OFFSET _aJournalMagic
	lea	esi, DWORD PTR _aMagic$[esp+36]
$LL12@readJourna:
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [edx]
	jne	SHORT $LN13@readJourna
	sub	eax, 4
	add	edx, 4
	add	esi, 4
	cmp	eax, 4
	jae	SHORT $LL12@readJourna
	test	eax, eax
	je	SHORT $LN34@readJourna
$LN13@readJourna:
	movzx	ecx, BYTE PTR [esi]
	movzx	ebp, BYTE PTR [edx]
	sub	ecx, ebp
	jne	SHORT $LN32@readJourna
	sub	eax, 1
	add	edx, 1
	add	esi, 1
	test	eax, eax
	je	SHORT $LN34@readJourna
	movzx	ecx, BYTE PTR [esi]
	movzx	ebp, BYTE PTR [edx]
	sub	ecx, ebp
	jne	SHORT $LN32@readJourna
	sub	eax, 1
	add	edx, 1
	add	esi, 1
	test	eax, eax
	je	SHORT $LN34@readJourna
	movzx	ecx, BYTE PTR [esi]
	movzx	ebp, BYTE PTR [edx]
	sub	ecx, ebp
	jne	SHORT $LN32@readJourna
	sub	eax, 1
	add	edx, 1
	add	esi, 1
	test	eax, eax
	je	SHORT $LN34@readJourna
	movzx	ecx, BYTE PTR [esi]
	movzx	edx, BYTE PTR [edx]
	sub	ecx, edx
	je	SHORT $LN34@readJourna
$LN32@readJourna:
	test	ecx, ecx
	mov	eax, 1
	jg	SHORT $LN35@readJourna
	or	eax, -1
	jmp	SHORT $LN35@readJourna
$LN34@readJourna:
	xor	eax, eax
$LN35@readJourna:
	test	eax, eax
	pop	esi
	pop	ebp
	je	SHORT $LN5@readJourna
$LN31@readJourna:
; Line 18572
	mov	eax, 101				; 00000065H
	pop	ebx
; Line 18596
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN5@readJourna:
; Line 18575
	mov	eax, DWORD PTR [edi+100]
	mov	ecx, DWORD PTR [eax]
	push	4
	lea	edx, DWORD PTR _ac$105639[esp+32]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN36@readJourna
	mov	eax, DWORD PTR _ac$105639[esp+28]
	xor	ecx, ecx
	mov	ch, al
	movzx	edx, ah
	movzx	eax, BYTE PTR _ac$105639[esp+30]
	or	ecx, edx
	movzx	edx, BYTE PTR _ac$105639[esp+31]
	shl	ecx, 8
	or	ecx, eax
	mov	eax, DWORD PTR _pNRec$GSCopy$[esp+28]
	shl	ecx, 8
	or	ecx, edx
	mov	DWORD PTR [eax], ecx
; Line 18578
	mov	eax, DWORD PTR [edi+100]
	lea	ecx, DWORD PTR [edi+44]
	push	ecx
	call	_read32bits
	add	esp, 4
; Line 18579
	test	eax, eax
	jne	SHORT $LN36@readJourna
; Line 18581
	mov	edx, DWORD PTR _pDbSize$GSCopy$[esp+28]
	mov	eax, DWORD PTR [edi+100]
	push	edx
	call	_read32bits
	add	esp, 4
; Line 18582
	test	eax, eax
	jne	SHORT $LN36@readJourna
; Line 18590
	mov	eax, DWORD PTR [edi+100]
	push	ebx
	call	_read32bits
	add	esp, 4
; Line 18591
	test	eax, eax
	jne	SHORT $LN36@readJourna
; Line 18593
	mov	eax, DWORD PTR [ebx]
	cdq
	add	DWORD PTR [edi+136], eax
; Line 18594
	mov	ecx, DWORD PTR [edi+136]
	adc	DWORD PTR [edi+140], edx
	mov	eax, DWORD PTR [edi+140]
	push	eax
	mov	eax, DWORD PTR [edi+100]
	push	ecx
	call	_sqlite3OsSeek
	add	esp, 8
$LN36@readJourna:
	pop	ebx
$LN9@readJourna:
; Line 18596
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
_readJournalHdr ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _writeMasterJournal
_TEXT	SEGMENT
_ac$105674 = -28					; size = 4
_cksum$ = -24						; size = 4
_zBuf$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_zMaster$ = 8						; size = 4
_writeMasterJournal PROC				; COMDAT
; _pPager$ = esi
; Line 18618
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+28], eax
	push	ebp
	mov	ebp, DWORD PTR _zMaster$[esp+28]
; Line 18622
	xor	edx, edx
; Line 18625
	test	ebp, ebp
	mov	DWORD PTR _cksum$[esp+32], edx
	je	$LN8@writeMaste
	cmp	BYTE PTR [esi+17], dl
	jne	$LN8@writeMaste
	push	ebx
; Line 18628
	mov	ebx, ebp
	mov	BYTE PTR [esi+17], 1
	lea	ecx, DWORD PTR [ebx+1]
$LL28@writeMaste:
	mov	al, BYTE PTR [ebx]
	add	ebx, 1
	test	al, al
	jne	SHORT $LL28@writeMaste
	sub	ebx, ecx
; Line 18629
	xor	eax, eax
	test	ebx, ebx
	jle	SHORT $LN5@writeMaste
$LL7@writeMaste:
; Line 18630
	movsx	ecx, BYTE PTR [eax+ebp]
	add	eax, 1
	add	edx, ecx
	cmp	eax, ebx
	jl	SHORT $LL7@writeMaste
	mov	DWORD PTR _cksum$[esp+36], edx
$LN5@writeMaste:
; Line 18637
	cmp	BYTE PTR [esi+8], 0
	je	SHORT $LN3@writeMaste
; Line 18638
	mov	eax, esi
	call	_seekJournalHdr
; Line 18639
	test	eax, eax
	jne	$LN29@writeMaste
$LN3@writeMaste:
; Line 18641
	lea	eax, DWORD PTR [ebx+20]
	cdq
	add	DWORD PTR [esi+136], eax
; Line 18643
	mov	eax, 1073741824				; 40000000H
	push	edi
	adc	DWORD PTR [esi+140], edx
	cdq
	idiv	DWORD PTR [esi+56]
	mov	edi, DWORD PTR [esi+100]
	push	4
	add	eax, 1
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	ecx, eax
	mov	BYTE PTR _ac$105674[esp+44], dl
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR _ac$105674[esp+45], cl
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR _ac$105674[esp+47], al
	mov	eax, DWORD PTR [edi]
	lea	ecx, DWORD PTR _ac$105674[esp+44]
	push	ecx
	mov	BYTE PTR _ac$105674[esp+50], dl
	mov	edx, DWORD PTR [eax+12]
	push	edi
	call	edx
	add	esp, 12					; 0000000cH
; Line 18644
	test	eax, eax
	pop	edi
	jne	$LN29@writeMaste
; Line 18646
	mov	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	push	ebx
	push	ebp
	push	eax
	call	edx
	add	esp, 12					; 0000000cH
; Line 18647
	test	eax, eax
	jne	SHORT $LN29@writeMaste
; Line 18649
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	mov	BYTE PTR _zBuf$[esp+36], al
; Line 18650
	mov	eax, DWORD PTR _cksum$[esp+36]
	mov	ecx, ebx
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR _zBuf$[esp+37], cl
	mov	edx, ebx
	shr	edx, 8
	mov	BYTE PTR _zBuf$[esp+38], dl
	mov	ecx, eax
	mov	edx, eax
	shr	ecx, 24					; 00000018H
	shr	edx, 16					; 00000010H
	mov	BYTE PTR _zBuf$[esp+40], cl
	mov	BYTE PTR _zBuf$[esp+41], dl
; Line 18651
	mov	edx, DWORD PTR _aJournalMagic
	mov	ecx, eax
	mov	BYTE PTR _zBuf$[esp+43], al
	mov	eax, DWORD PTR _aJournalMagic+4
	mov	DWORD PTR _zBuf$[esp+44], edx
	mov	DWORD PTR _zBuf$[esp+48], eax
; Line 18652
	mov	eax, DWORD PTR [esi+100]
	shr	ecx, 8
	push	16					; 00000010H
	lea	edx, DWORD PTR _zBuf$[esp+40]
	mov	BYTE PTR _zBuf$[esp+43], bl
	mov	BYTE PTR _zBuf$[esp+46], cl
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	add	esp, 12					; 0000000cH
; Line 18653
	cmp	BYTE PTR [esi+7], 0
	sete	cl
	mov	BYTE PTR [esi+13], cl
$LN29@writeMaste:
	pop	ebx
	pop	ebp
; Line 18655
	mov	ecx, DWORD PTR __$ArrayPad$[esp+28]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
$LN8@writeMaste:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	pop	ebp
	xor	ecx, esp
	xor	eax, eax
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
_writeMasterJournal ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _page_add_to_stmt_list
_TEXT	SEGMENT
_page_add_to_stmt_list PROC				; COMDAT
; _pPg$ = ecx
; Line 18667
	mov	eax, DWORD PTR [ecx]
; Line 18668
	mov	edx, DWORD PTR [eax+56]
	push	esi
	mov	esi, DWORD PTR [eax+52]
	push	edi
	lea	edi, DWORD PTR [esi+edx]
; Line 18670
	cmp	BYTE PTR [edi+ecx+64], 0
	lea	edi, DWORD PTR [edi+ecx+48]
	jne	SHORT $LN2@page_add_t
	push	ebx
; Line 18672
	mov	ebx, DWORD PTR [eax+128]
	test	ebx, ebx
	je	SHORT $LN1@page_add_t
; Line 18673
	add	ebx, esi
	mov	DWORD PTR [ebx+edx+60], ecx
$LN1@page_add_t:
; Line 18675
	mov	edx, DWORD PTR [eax+128]
	mov	DWORD PTR [edi+8], edx
; Line 18676
	mov	DWORD PTR [eax+128], ecx
; Line 18677
	mov	BYTE PTR [edi+16], 1
	pop	ebx
$LN2@page_add_t:
	pop	edi
	pop	esi
; Line 18679
	ret	0
_page_add_to_stmt_list ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_lookup
_TEXT	SEGMENT
_pager_lookup PROC					; COMDAT
; _pPager$ = ecx
; _pgno$ = edx
; Line 18687
	mov	eax, DWORD PTR [ecx+192]
	test	eax, eax
	jne	SHORT $LN3@pager_look
; Line 18693
	ret	0
$LN3@pager_look:
; Line 18688
	mov	ecx, DWORD PTR [ecx+188]
	sub	ecx, 1
	and	ecx, edx
	mov	eax, DWORD PTR [eax+ecx*4]
; Line 18689
	test	eax, eax
	je	SHORT $LN4@pager_look
	npad	3
$LL2@pager_look:
	cmp	DWORD PTR [eax+4], edx
	je	SHORT $LN4@pager_look
; Line 18690
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	jne	SHORT $LL2@pager_look
$LN4@pager_look:
; Line 18693
	ret	0
_pager_lookup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_unlock
_TEXT	SEGMENT
_pager_unlock PROC					; COMDAT
; _pPager$ = esi
; Line 18699
	cmp	BYTE PTR [esi+19], 0
	jne	SHORT $LN2@pager_unlo
; Line 18700
	cmp	BYTE PTR [esi+16], 0
	jne	SHORT $LN1@pager_unlo
; Line 18701
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	push	0
	push	eax
	call	edx
	add	esp, 8
; Line 18702
	mov	DWORD PTR [esi+28], -1
$LN1@pager_unlo:
; Line 18705
	mov	BYTE PTR [esi+10], 0
; Line 18706
	mov	BYTE PTR [esi+20], 0
$LN2@pager_unlo:
; Line 18708
	ret	0
_pager_unlock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_cksum
_TEXT	SEGMENT
_pager_cksum PROC					; COMDAT
; _pPager$ = ecx
; _aData$ = edx
; Line 18852
	mov	eax, DWORD PTR [ecx+44]
; Line 18853
	mov	ecx, DWORD PTR [ecx+56]
	sub	ecx, 200				; 000000c8H
; Line 18854
	test	ecx, ecx
	jle	SHORT $LN1@pager_cksu
	push	esi
$LL2@pager_cksu:
; Line 18855
	movzx	esi, BYTE PTR [ecx+edx]
; Line 18856
	sub	ecx, 200				; 000000c8H
	add	eax, esi
	test	ecx, ecx
	jg	SHORT $LL2@pager_cksu
	pop	esi
$LN1@pager_cksu:
; Line 18859
	ret	0
_pager_cksum ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _setSectorSize
_TEXT	SEGMENT
_setSectorSize PROC					; COMDAT
; _pPager$ = esi
; Line 19096
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	test	ecx, ecx
	je	SHORT $LN6@setSectorS
	push	eax
	call	ecx
	add	esp, 4
	jmp	SHORT $LN7@setSectorS
$LN6@setSectorS:
	mov	eax, 512				; 00000200H
$LN7@setSectorS:
; Line 19097
	mov	ecx, DWORD PTR [esi+56]
	cmp	eax, ecx
	mov	DWORD PTR [esi+176], eax
	jge	SHORT $LN1@setSectorS
; Line 19098
	mov	DWORD PTR [esi+176], ecx
$LN1@setSectorS:
; Line 19100
	ret	0
_setSectorSize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerSetCachesize
_TEXT	SEGMENT
_sqlite3PagerSetCachesize PROC				; COMDAT
; _pPager$ = ecx
; _mxPage$ = eax
; Line 19389
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN2@sqlite3Pag
; Line 19390
	mov	DWORD PTR [ecx+68], eax
; Line 19394
	ret	0
$LN2@sqlite3Pag:
; Line 19392
	mov	DWORD PTR [ecx+68], 10			; 0000000aH
; Line 19394
	ret	0
_sqlite3PagerSetCachesize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerSetSafetyLevel
_TEXT	SEGMENT
_full_fsync$ = 8					; size = 4
_sqlite3PagerSetSafetyLevel PROC			; COMDAT
; _pPager$ = eax
; _level$ = ecx
; Line 19424
	cmp	ecx, 1
	je	SHORT $LN4@sqlite3Pag@2
	cmp	BYTE PTR [eax+11], 0
	jne	SHORT $LN4@sqlite3Pag@2
	xor	edx, edx
	jmp	SHORT $LN5@sqlite3Pag@2
$LN4@sqlite3Pag@2:
	mov	edx, 1
$LN5@sqlite3Pag@2:
; Line 19425
	cmp	ecx, 3
	mov	BYTE PTR [eax+7], dl
	jne	SHORT $LN6@sqlite3Pag@2
	cmp	BYTE PTR [eax+11], 0
	jne	SHORT $LN6@sqlite3Pag@2
	mov	ecx, 1
	jmp	SHORT $LN7@sqlite3Pag@2
$LN6@sqlite3Pag@2:
	xor	ecx, ecx
$LN7@sqlite3Pag@2:
; Line 19427
	test	dl, dl
	mov	BYTE PTR [eax+8], cl
	mov	cl, BYTE PTR _full_fsync$[esp-4]
	mov	BYTE PTR [eax+9], cl
	je	SHORT $LN1@sqlite3Pag@2
	mov	BYTE PTR [eax+13], 0
$LN1@sqlite3Pag@2:
; Line 19428
	ret	0
_sqlite3PagerSetSafetyLevel ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerSetBusyhandler
_TEXT	SEGMENT
_sqlite3PagerSetBusyhandler PROC			; COMDAT
; _pPager$ = ecx
; _pBusyHandler$ = eax
; Line 19632
	mov	DWORD PTR [ecx+108], eax
; Line 19633
	ret	0
_sqlite3PagerSetBusyhandler ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerSetDestructor
_TEXT	SEGMENT
_sqlite3PagerSetDestructor PROC				; COMDAT
; _pPager$ = ecx
; _xDesc$ = eax
; Line 19644
	mov	DWORD PTR [ecx+180], eax
; Line 19645
	ret	0
_sqlite3PagerSetDestructor ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerSetReiniter
_TEXT	SEGMENT
_sqlite3PagerSetReiniter PROC				; COMDAT
; _pPager$ = ecx
; _xReinit$ = eax
; Line 19655
	mov	DWORD PTR [ecx+184], eax
; Line 19656
	ret	0
_sqlite3PagerSetReiniter ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerReadFileheader
_TEXT	SEGMENT
_sqlite3PagerReadFileheader PROC			; COMDAT
; _pPager$ = esi
; _N$ = ebx
; _pDest$ = edi
; Line 19722
	push	ebp
; Line 19724
	push	ebx
	xor	ebp, ebp
	push	ebp
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 19725
	cmp	BYTE PTR [esi+16], 0
	jne	SHORT $LN10@sqlite3Pag@3
; Line 19727
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	ebp
	push	ebp
	push	eax
	call	edx
; Line 19730
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	ebx
	push	edi
	push	eax
	call	edx
	add	esp, 24					; 00000018H
; Line 19731
	cmp	eax, 522				; 0000020aH
	jne	SHORT $LN1@sqlite3Pag@3
; Line 19732
	xor	eax, eax
	pop	ebp
; Line 19736
	ret	0
$LN10@sqlite3Pag@3:
; Line 19735
	mov	eax, ebp
$LN1@sqlite3Pag@3:
	pop	ebp
; Line 19736
	ret	0
_sqlite3PagerReadFileheader ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerPagecount
_TEXT	SEGMENT
_n$ = -8						; size = 8
_sqlite3PagerPagecount PROC				; COMDAT
; _pPager$ = esi
; Line 19747
	sub	esp, 8
; Line 19751
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN9@sqlite3Pag@4
; Line 19752
	xor	eax, eax
; Line 19777
	add	esp, 8
	ret	0
$LN9@sqlite3Pag@4:
; Line 19754
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	push	edi
	jl	SHORT $LN8@sqlite3Pag@4
; Line 19755
	cdq
	mov	ecx, eax
	mov	edi, edx
; Line 19756
	jmp	SHORT $LN3@sqlite3Pag@4
$LN8@sqlite3Pag@4:
; Line 19757
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _n$[esp+12]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	call	eax
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@sqlite3Pag@4
; Line 19758
	mov	ecx, eax
	and	ecx, 255				; 000000ffH
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN14@sqlite3Pag@4
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN14@sqlite3Pag@4
	cmp	ecx, 11					; 0000000bH
	jne	SHORT $LN15@sqlite3Pag@4
$LN14@sqlite3Pag@4:
	mov	DWORD PTR [esi+24], eax
$LN15@sqlite3Pag@4:
; Line 19759
	xor	eax, eax
	pop	edi
; Line 19777
	add	esp, 8
	ret	0
$LN6@sqlite3Pag@4:
; Line 19761
	mov	ecx, DWORD PTR _n$[esp+16]
	test	ecx, ecx
	mov	edi, DWORD PTR _n$[esp+12]
	jl	SHORT $LN5@sqlite3Pag@4
	jg	SHORT $LN18@sqlite3Pag@4
	test	edi, edi
	jbe	SHORT $LN5@sqlite3Pag@4
$LN18@sqlite3Pag@4:
	mov	eax, DWORD PTR [esi+56]
	cdq
	cmp	ecx, edx
	jg	SHORT $LN5@sqlite3Pag@4
	jl	SHORT $LN19@sqlite3Pag@4
	cmp	edi, eax
	jae	SHORT $LN5@sqlite3Pag@4
$LN19@sqlite3Pag@4:
; Line 19762
	mov	ecx, 1
	xor	edi, edi
; Line 19763
	jmp	SHORT $LN4@sqlite3Pag@4
$LN5@sqlite3Pag@4:
; Line 19764
	mov	eax, DWORD PTR [esi+56]
	cdq
	push	edx
	push	eax
	push	ecx
	push	edi
	call	__alldiv
	mov	ecx, eax
	mov	edi, edx
$LN4@sqlite3Pag@4:
; Line 19766
	cmp	BYTE PTR [esi+10], 0
	je	SHORT $LN3@sqlite3Pag@4
; Line 19767
	mov	DWORD PTR [esi+28], ecx
$LN3@sqlite3Pag@4:
; Line 19770
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	DWORD PTR [esi+56]
	cdq
	cmp	ecx, eax
	jne	SHORT $LN2@sqlite3Pag@4
	cmp	edi, edx
	jne	SHORT $LN2@sqlite3Pag@4
; Line 19771
	add	ecx, 1
	adc	edi, 0
$LN2@sqlite3Pag@4:
; Line 19773
	mov	edx, DWORD PTR [esi+72]
	xor	eax, eax
	cmp	edi, eax
	jl	SHORT $LN1@sqlite3Pag@4
	jg	SHORT $LN20@sqlite3Pag@4
	cmp	ecx, edx
	jbe	SHORT $LN1@sqlite3Pag@4
$LN20@sqlite3Pag@4:
; Line 19774
	mov	DWORD PTR [esi+72], ecx
$LN1@sqlite3Pag@4:
; Line 19776
	mov	eax, ecx
	pop	edi
; Line 19777
	add	esp, 8
	ret	0
_sqlite3PagerPagecount ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __page_ref
_TEXT	SEGMENT
__page_ref PROC						; COMDAT
; _pPg$ = eax
; Line 20049
	cmp	WORD PTR [eax+34], 0
	jne	SHORT $LN13@page_ref
; Line 20051
	mov	edx, DWORD PTR [eax]
	cmp	eax, DWORD PTR [edx+120]
	jne	SHORT $LN7@page_ref
; Line 20052
	mov	ecx, DWORD PTR [eax+16]
; Line 20053
	test	ecx, ecx
	je	SHORT $LN5@page_ref
$LL6@page_ref:
	cmp	BYTE PTR [ecx+30], 0
	je	SHORT $LN5@page_ref
	mov	ecx, DWORD PTR [ecx+16]
	test	ecx, ecx
	jne	SHORT $LL6@page_ref
$LN5@page_ref:
; Line 20054
	mov	DWORD PTR [edx+120], ecx
$LN7@page_ref:
; Line 20056
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
; Line 20057
	mov	edx, DWORD PTR [eax+16]
	je	SHORT $LN4@page_ref
	mov	DWORD PTR [ecx+16], edx
; Line 20058
	jmp	SHORT $LN3@page_ref
$LN4@page_ref:
; Line 20059
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+112], edx
$LN3@page_ref:
; Line 20061
	mov	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
; Line 20062
	mov	edx, DWORD PTR [eax+20]
	je	SHORT $LN2@page_ref
	mov	DWORD PTR [ecx+20], edx
; Line 20066
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	add	DWORD PTR [ecx+64], edx
; Line 20068
	add	WORD PTR [eax+34], dx
; Line 20070
	ret	0
$LN2@page_ref:
; Line 20064
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+116], edx
; Line 20066
	mov	ecx, DWORD PTR [eax]
	mov	edx, 1
	add	DWORD PTR [ecx+64], edx
; Line 20068
	add	WORD PTR [eax+34], dx
; Line 20070
	ret	0
$LN13@page_ref:
; Line 20068
	add	WORD PTR [eax+34], 1
; Line 20070
	ret	0
__page_ref ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerRef
_TEXT	SEGMENT
_sqlite3PagerRef PROC					; COMDAT
; _pPg$ = eax
; Line 20089
	movzx	ecx, WORD PTR [eax+34]
	test	cx, cx
	jne	SHORT $LN3@sqlite3Pag@5
	call	__page_ref
; Line 20090
	xor	eax, eax
; Line 20091
	ret	0
$LN3@sqlite3Pag@5:
; Line 20089
	add	ecx, 1
	mov	WORD PTR [eax+34], cx
; Line 20090
	xor	eax, eax
; Line 20091
	ret	0
_sqlite3PagerRef ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _syncJournal
_TEXT	SEGMENT
_syncJournal PROC					; COMDAT
; _pPager$ = esi
; Line 20120
	cmp	BYTE PTR [esi+13], 0
	push	edi
	je	$LN11@syncJourna
; Line 20121
	cmp	BYTE PTR [esi+11], 0
	jne	$LN10@syncJourna
; Line 20142
	cmp	BYTE PTR [esi+8], 0
	je	SHORT $LN8@syncJourna
; Line 20145
	mov	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	0
	push	eax
	call	edx
	add	esp, 8
; Line 20146
	test	eax, eax
	jne	$LN12@syncJourna
$LN8@syncJourna:
; Line 20149
	mov	eax, DWORD PTR [esi+144]
	mov	ecx, DWORD PTR [esi+148]
	mov	edx, DWORD PTR [esi+100]
	mov	edi, DWORD PTR [edx]
	add	eax, 8
	adc	ecx, 0
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edi+16]
	push	edx
	call	eax
	add	esp, 12					; 0000000cH
; Line 20150
	test	eax, eax
	jne	SHORT $LN12@syncJourna
; Line 20153
	mov	eax, DWORD PTR [esi+40]
	mov	ecx, DWORD PTR [esi+100]
	call	_write32bits
; Line 20154
	test	eax, eax
	jne	SHORT $LN12@syncJourna
; Line 20156
	mov	edx, DWORD PTR [esi+140]
	mov	ecx, DWORD PTR [esi+136]
	mov	eax, DWORD PTR [esi+100]
	mov	edi, DWORD PTR [eax]
	push	edx
	push	ecx
	mov	ecx, DWORD PTR [edi+16]
	push	eax
	call	ecx
	add	esp, 12					; 0000000cH
; Line 20157
	test	eax, eax
	jne	SHORT $LN12@syncJourna
; Line 20161
	movzx	ecx, BYTE PTR [esi+9]
	mov	eax, DWORD PTR [esi+100]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edx+24]
	call	eax
	add	esp, 8
; Line 20162
	test	eax, eax
	jne	SHORT $LN12@syncJourna
; Line 20163
	mov	BYTE PTR [esi+1], 1
$LN10@syncJourna:
; Line 20169
	mov	eax, DWORD PTR [esi+124]
	test	eax, eax
	mov	BYTE PTR [esi+13], 0
	je	SHORT $LN1@syncJourna
	npad	2
$LL3@syncJourna:
; Line 20170
	mov	BYTE PTR [eax+30], 0
	mov	eax, DWORD PTR [eax+24]
	test	eax, eax
	jne	SHORT $LL3@syncJourna
$LN1@syncJourna:
; Line 20172
	mov	ecx, DWORD PTR [esi+112]
	mov	DWORD PTR [esi+120], ecx
$LN11@syncJourna:
; Line 20188
	xor	eax, eax
$LN12@syncJourna:
	pop	edi
; Line 20189
	ret	0
_syncJournal ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _merge_pagelist
_TEXT	SEGMENT
_result$ = -48						; size = 48
_merge_pagelist PROC					; COMDAT
; _pA$ = eax
; _pB$ = ecx
; Line 20195
	sub	esp, 48					; 00000030H
; Line 20198
	test	eax, eax
	push	esi
	lea	edx, DWORD PTR _result$[esp+52]
	je	SHORT $LN4@merge_page
	npad	4
$LL8@merge_page:
	test	ecx, ecx
	je	SHORT $LN7@merge_page
; Line 20199
	mov	esi, DWORD PTR [eax+4]
	cmp	esi, DWORD PTR [ecx+4]
	jae	SHORT $LN6@merge_page
; Line 20200
	mov	DWORD PTR [edx+36], eax
; Line 20201
	mov	edx, eax
; Line 20202
	mov	eax, DWORD PTR [eax+36]
; Line 20203
	jmp	SHORT $LN5@merge_page
$LN6@merge_page:
; Line 20204
	mov	DWORD PTR [edx+36], ecx
; Line 20205
	mov	edx, ecx
; Line 20206
	mov	ecx, DWORD PTR [ecx+36]
$LN5@merge_page:
; Line 20198
	test	eax, eax
	jne	SHORT $LL8@merge_page
$LN4@merge_page:
; Line 20211
	test	ecx, ecx
	je	SHORT $LN2@merge_page
; Line 20212
	mov	DWORD PTR [edx+36], ecx
; Line 20216
	mov	eax, DWORD PTR _result$[esp+88]
	pop	esi
; Line 20217
	add	esp, 48					; 00000030H
	ret	0
$LN7@merge_page:
; Line 20209
	test	eax, eax
	je	SHORT $LN2@merge_page
; Line 20210
	mov	DWORD PTR [edx+36], eax
; Line 20216
	mov	eax, DWORD PTR _result$[esp+88]
	pop	esi
; Line 20217
	add	esp, 48					; 00000030H
	ret	0
$LN2@merge_page:
; Line 20214
	mov	DWORD PTR [edx+36], 0
; Line 20216
	mov	eax, DWORD PTR _result$[esp+88]
	pop	esi
; Line 20217
	add	esp, 48					; 00000030H
	ret	0
_merge_pagelist ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sort_pagelist
_TEXT	SEGMENT
_a$ = -100						; size = 100
_sort_pagelist PROC					; COMDAT
; _pIn$ = eax
; Line 20232
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
; Line 20235
	push	100					; 00000064H
	mov	edi, eax
	lea	eax, DWORD PTR _a$[esp+112]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 20236
	test	edi, edi
	je	SHORT $LN10@sort_pagel
	npad	4
$LL11@sort_pagel:
; Line 20238
	lea	eax, DWORD PTR [edi+36]
	mov	ecx, edi
	mov	edi, DWORD PTR [eax]
; Line 20239
	mov	DWORD PTR [eax], 0
; Line 20240
	xor	esi, esi
	npad	1
$LL9@sort_pagel:
; Line 20241
	mov	eax, DWORD PTR _a$[esp+esi*4+108]
	test	eax, eax
	je	SHORT $LN17@sort_pagel
; Line 20245
	call	_merge_pagelist
; Line 20246
	mov	DWORD PTR _a$[esp+esi*4+108], 0
	add	esi, 1
	cmp	esi, 24					; 00000018H
	mov	ecx, eax
	jl	SHORT $LL9@sort_pagel
; Line 20241
	jmp	SHORT $LN7@sort_pagel
$LN17@sort_pagel:
; Line 20242
	mov	DWORD PTR _a$[esp+esi*4+108], ecx
$LN7@sort_pagel:
; Line 20249
	cmp	esi, 24					; 00000018H
	jne	SHORT $LN4@sort_pagel
; Line 20255
	mov	eax, DWORD PTR _a$[esp+204]
	call	_merge_pagelist
	mov	DWORD PTR _a$[esp+204], eax
$LN4@sort_pagel:
; Line 20236
	test	edi, edi
	jne	SHORT $LL11@sort_pagel
$LN10@sort_pagel:
; Line 20258
	mov	eax, DWORD PTR _a$[esp+108]
; Line 20259
	mov	esi, 1
$LL3@sort_pagel:
; Line 20260
	mov	ecx, DWORD PTR _a$[esp+esi*4+108]
	call	_merge_pagelist
	add	esi, 1
	cmp	esi, 25					; 00000019H
	jl	SHORT $LL3@sort_pagel
	pop	edi
	pop	esi
; Line 20263
	add	esp, 100				; 00000064H
	ret	0
_sort_pagelist ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_get_all_dirty_pages
_TEXT	SEGMENT
_pager_get_all_dirty_pages PROC				; COMDAT
; _pPager$ = eax
; Line 20341
	mov	eax, DWORD PTR [eax+132]
; Line 20342
	ret	0
_pager_get_all_dirty_pages ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _readDbPage
_TEXT	SEGMENT
_readDbPage PROC					; COMDAT
; _pPager$ = eax
; _pPg$ = edi
; _pgno$ = ebx
; Line 20546
	push	ebp
	push	esi
	mov	esi, eax
; Line 20549
	mov	eax, DWORD PTR [esi+56]
	cdq
	push	edx
	push	eax
	lea	ecx, DWORD PTR [ebx-1]
	push	0
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR [esi+96]
	mov	ebp, DWORD PTR [ecx]
	push	edx
	mov	edx, DWORD PTR [ebp+16]
	push	eax
	push	ecx
	call	edx
	add	esp, 12					; 0000000cH
; Line 20550
	test	eax, eax
	jne	SHORT $LN2@readDbPage
; Line 20552
	mov	ecx, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [esi+96]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+8]
	push	ecx
	lea	ecx, DWORD PTR [edi+48]
	push	ecx
	push	eax
	call	edx
	add	esp, 12					; 0000000cH
$LN2@readDbPage:
; Line 20557
	cmp	ebx, 1
	jne	SHORT $LN1@readDbPage
; Line 20559
	lea	edx, DWORD PTR [esi+200]
	mov	esi, DWORD PTR [edi+72]
	lea	ecx, DWORD PTR [edi+72]
	mov	DWORD PTR [edx], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], esi
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
$LN1@readDbPage:
	pop	esi
	pop	ebp
; Line 20565
	ret	0
_readDbPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_get_content
_TEXT	SEGMENT
_pager_get_content PROC					; COMDAT
; _pPg$ = eax
; Line 20803
	push	edi
	mov	edi, eax
; Line 20804
	cmp	BYTE PTR [edi+32], 0
	je	SHORT $LN1@pager_get_
; Line 20805
	mov	eax, DWORD PTR [edi]
	push	ebx
	mov	ebx, DWORD PTR [edi+4]
	call	_readDbPage
; Line 20806
	test	eax, eax
	pop	ebx
	jne	SHORT $LN4@pager_get_
; Line 20807
	mov	BYTE PTR [edi+32], al
$LN1@pager_get_:
; Line 20812
	xor	eax, eax
$LN4@pager_get_:
	pop	edi
; Line 20813
	ret	0
_pager_get_content ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerLookup
_TEXT	SEGMENT
_sqlite3PagerLookup PROC				; COMDAT
; _pPager$ = eax
; _pgno$ = edx
; Line 20988
	cmp	BYTE PTR [eax+10], 0
	jne	SHORT $LN3@sqlite3Pag@6
$LN17@sqlite3Pag@6:
; Line 20990
	xor	eax, eax
; Line 20999
	ret	0
$LN3@sqlite3Pag@6:
; Line 20992
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN2@sqlite3Pag@6
	cmp	ecx, 13					; 0000000dH
; Line 20993
	jne	SHORT $LN17@sqlite3Pag@6
$LN2@sqlite3Pag@6:
; Line 20995
	mov	ecx, DWORD PTR [eax+192]
	test	ecx, ecx
	je	SHORT $LN17@sqlite3Pag@6
	mov	eax, DWORD PTR [eax+188]
	sub	eax, 1
	and	eax, edx
	mov	eax, DWORD PTR [ecx+eax*4]
	test	eax, eax
	je	SHORT $LN17@sqlite3Pag@6
$LL9@sqlite3Pag@6:
	cmp	DWORD PTR [eax+4], edx
	je	SHORT $LN8@sqlite3Pag@6
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	jne	SHORT $LL9@sqlite3Pag@6
; Line 20999
	ret	0
; Line 20995
$LN8@sqlite3Pag@6:
; Line 20996
	test	eax, eax
	je	SHORT $LN17@sqlite3Pag@6
; Line 20997
	movzx	ecx, WORD PTR [eax+34]
	test	cx, cx
	jne	SHORT $LN6@sqlite3Pag@6
	jmp	__page_ref
$LN6@sqlite3Pag@6:
	add	ecx, 1
	mov	WORD PTR [eax+34], cx
; Line 20999
	ret	0
_sqlite3PagerLookup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _makeDirty
_TEXT	SEGMENT
_makeDirty PROC						; COMDAT
; _pPg$ = eax
; Line 21198
	cmp	BYTE PTR [eax+29], 0
	jne	SHORT $LN2@makeDirty
; Line 21199
	mov	ecx, DWORD PTR [eax]
; Line 21200
	mov	BYTE PTR [eax+29], 1
; Line 21201
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+36], edx
; Line 21202
	mov	edx, DWORD PTR [ecx+132]
	test	edx, edx
	je	SHORT $LN1@makeDirty
; Line 21203
	mov	DWORD PTR [edx+40], eax
$LN1@makeDirty:
; Line 21205
	mov	DWORD PTR [eax+40], 0
; Line 21206
	mov	DWORD PTR [ecx+132], eax
$LN2@makeDirty:
; Line 21208
	ret	0
_makeDirty ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _makeClean
_TEXT	SEGMENT
_makeClean PROC						; COMDAT
; _pPg$ = eax
; Line 21215
	cmp	BYTE PTR [eax+29], 0
	je	SHORT $LN1@makeClean
; Line 21217
	mov	ecx, DWORD PTR [eax+36]
	test	ecx, ecx
	mov	BYTE PTR [eax+29], 0
	je	SHORT $LN3@makeClean
; Line 21218
	mov	edx, DWORD PTR [eax+40]
	mov	DWORD PTR [ecx+40], edx
$LN3@makeClean:
; Line 21220
	mov	ecx, DWORD PTR [eax+40]
	test	ecx, ecx
	je	SHORT $LN2@makeClean
; Line 21221
	mov	eax, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+36], eax
; Line 21226
	ret	0
$LN2@makeClean:
; Line 21223
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+132], edx
$LN1@makeClean:
; Line 21226
	ret	0
_makeClean ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerDontWrite
_TEXT	SEGMENT
_sqlite3PagerDontWrite PROC				; COMDAT
; _pDbPage$ = eax
; Line 21545
	mov	ecx, DWORD PTR [eax]
; Line 21547
	cmp	BYTE PTR [ecx+16], 0
	jne	SHORT $LN1@sqlite3Pag@7
; Line 21549
	cmp	BYTE PTR [eax+29], 0
	mov	BYTE PTR [eax+31], 1
	je	SHORT $LN1@sqlite3Pag@7
	cmp	BYTE PTR [ecx+5], 0
	jne	SHORT $LN1@sqlite3Pag@7
; Line 21551
	mov	edx, DWORD PTR [ecx+28]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN2@sqlite3Pag@7
	cmp	DWORD PTR [ecx+32], edx
	jl	SHORT $LN1@sqlite3Pag@7
$LN2@sqlite3Pag@7:
; Line 21563
	jmp	_makeClean
$LN1@sqlite3Pag@7:
; Line 21569
	ret	0
_sqlite3PagerDontWrite ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerDontRollback
_TEXT	SEGMENT
_sqlite3PagerDontRollback PROC				; COMDAT
; _pPg$ = edi
; Line 21582
	push	esi
; Line 21583
	mov	esi, DWORD PTR [edi]
; Line 21586
	cmp	BYTE PTR [esi], 0
	je	$LN4@sqlite3Pag@8
; Line 21587
	cmp	BYTE PTR [edi+31], 0
	jne	SHORT $LN4@sqlite3Pag@8
	cmp	BYTE PTR [esi+15], 0
	jne	SHORT $LN4@sqlite3Pag@8
	cmp	BYTE PTR [esi+16], 0
	jne	SHORT $LN4@sqlite3Pag@8
; Line 21588
	cmp	BYTE PTR [edi+28], 0
	jne	SHORT $LN2@sqlite3Pag@8
	mov	ecx, DWORD PTR [edi+4]
	cmp	ecx, DWORD PTR [esi+32]
	jg	SHORT $LN2@sqlite3Pag@8
; Line 21590
	mov	edx, DWORD PTR [esi+76]
	mov	eax, ecx
	shr	eax, 3
	add	eax, edx
	and	ecx, 7
	mov	dl, 1
	shl	dl, cl
	or	BYTE PTR [eax], dl
; Line 21591
	mov	BYTE PTR [edi+28], 1
; Line 21592
	mov	BYTE PTR [edi+32], 0
; Line 21593
	cmp	BYTE PTR [esi+5], 0
	je	SHORT $LN4@sqlite3Pag@8
; Line 21594
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [esi+80]
	mov	eax, ecx
	shr	eax, 3
	add	eax, edx
	and	ecx, 7
	mov	dl, 1
	shl	dl, cl
	or	BYTE PTR [eax], dl
$LN2@sqlite3Pag@8:
; Line 21602
	cmp	BYTE PTR [esi+5], 0
	je	SHORT $LN4@sqlite3Pag@8
	mov	eax, edi
	call	_pageInStatement
	test	eax, eax
	jne	SHORT $LN4@sqlite3Pag@8
	mov	ecx, DWORD PTR [edi+4]
	cmp	ecx, DWORD PTR [esi+36]
	jg	SHORT $LN4@sqlite3Pag@8
; Line 21605
	mov	edx, DWORD PTR [esi+80]
	mov	eax, ecx
	shr	eax, 3
	add	eax, edx
	and	ecx, 7
	mov	dl, 1
	shl	dl, cl
	or	BYTE PTR [eax], dl
$LN4@sqlite3Pag@8:
	pop	esi
; Line 21607
	ret	0
_sqlite3PagerDontRollback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerIsreadonly
_TEXT	SEGMENT
_sqlite3PagerIsreadonly PROC				; COMDAT
; _pPager$ = eax
; Line 21877
	movzx	eax, BYTE PTR [eax+12]
; Line 21878
	ret	0
_sqlite3PagerIsreadonly ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerRefcount
_TEXT	SEGMENT
_sqlite3PagerRefcount PROC				; COMDAT
; _pPager$ = eax
; Line 21884
	mov	eax, DWORD PTR [eax+64]
; Line 21885
	ret	0
_sqlite3PagerRefcount ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerFilename
_TEXT	SEGMENT
_sqlite3PagerFilename PROC				; COMDAT
; _pPager$ = eax
; Line 22029
	mov	eax, DWORD PTR [eax+84]
; Line 22030
	ret	0
_sqlite3PagerFilename ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerDirname
_TEXT	SEGMENT
_sqlite3PagerDirname PROC				; COMDAT
; _pPager$ = eax
; Line 22036
	mov	eax, DWORD PTR [eax+92]
; Line 22037
	ret	0
_sqlite3PagerDirname ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerJournalname
_TEXT	SEGMENT
_sqlite3PagerJournalname PROC				; COMDAT
; _pPager$ = eax
; Line 22043
	mov	eax, DWORD PTR [eax+88]
; Line 22044
	ret	0
_sqlite3PagerJournalname ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerNosync
_TEXT	SEGMENT
_sqlite3PagerNosync PROC				; COMDAT
; _pPager$ = eax
; Line 22051
	movzx	eax, BYTE PTR [eax+7]
; Line 22052
	ret	0
_sqlite3PagerNosync ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerGetData
_TEXT	SEGMENT
_sqlite3PagerGetData PROC				; COMDAT
; _pPg$ = eax
; Line 22175
	add	eax, 48					; 00000030H
; Line 22176
	ret	0
_sqlite3PagerGetData ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerGetExtra
_TEXT	SEGMENT
_sqlite3PagerGetExtra PROC				; COMDAT
; _pPg$ = ecx
; Line 22183
	mov	eax, DWORD PTR [ecx]
; Line 22184
	test	eax, eax
	je	SHORT $LN3@sqlite3Pag@9
	mov	eax, DWORD PTR [eax+56]
	lea	eax, DWORD PTR [eax+ecx+48]
; Line 22185
	ret	0
$LN3@sqlite3Pag@9:
; Line 22184
	xor	eax, eax
; Line 22185
	ret	0
_sqlite3PagerGetExtra ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerLockingMode
_TEXT	SEGMENT
_sqlite3PagerLockingMode PROC				; COMDAT
; _pPager$ = eax
; _eMode$ = ecx
; Line 22203
	test	ecx, ecx
	jl	SHORT $LN5@sqlite3Pag@10
	cmp	BYTE PTR [eax+11], 0
	jne	SHORT $LN5@sqlite3Pag@10
; Line 22204
	mov	BYTE PTR [eax+19], cl
$LN5@sqlite3Pag@10:
; Line 22206
	movzx	eax, BYTE PTR [eax+19]
; Line 22207
	ret	0
_sqlite3PagerLockingMode ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ptrmapPageno
_TEXT	SEGMENT
_pgno$ = 8						; size = 4
_ptrmapPageno PROC					; COMDAT
; _pBt$ = edi
; Line 23155
	movzx	ecx, WORD PTR [edi+26]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	push	esi
	lea	esi, DWORD PTR [edx+eax+1]
; Line 23156
	mov	eax, DWORD PTR _pgno$[esp]
	add	eax, -2					; fffffffeH
	xor	edx, edx
	div	esi
	mov	ecx, eax
; Line 23157
	imul	ecx, esi
; Line 23158
	movzx	esi, WORD PTR [edi+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	esi
	add	ecx, 2
	pop	esi
	add	eax, 1
	cmp	ecx, eax
	jne	SHORT $LN4@ptrmapPage
; Line 23159
	add	ecx, 1
$LN4@ptrmapPage:
; Line 23161
	mov	eax, ecx
; Line 23162
	ret	0
_ptrmapPageno ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _findOverflowCell
_TEXT	SEGMENT
_findOverflowCell PROC					; COMDAT
; _pPage$ = edi
; _iCell$ = eax
; Line 23259
	push	esi
	mov	esi, eax
; Line 23261
	movzx	eax, BYTE PTR [edi+2]
	sub	eax, 1
	js	SHORT $LN3@findOverfl
	lea	edx, DWORD PTR [edi+eax*8+24]
$LL5@findOverfl:
; Line 23265
	movzx	ecx, WORD PTR [edx+4]
; Line 23266
	cmp	ecx, esi
	jg	SHORT $LN4@findOverfl
; Line 23267
	je	SHORT $LN9@findOverfl
; Line 23270
	sub	esi, 1
$LN4@findOverfl:
; Line 23261
	sub	eax, 1
	sub	edx, 8
	test	eax, eax
	jge	SHORT $LL5@findOverfl
$LN3@findOverfl:
; Line 23273
	movzx	ecx, WORD PTR [edi+14]
	mov	eax, DWORD PTR [edi+68]
	add	ecx, eax
	lea	ecx, DWORD PTR [ecx+esi*2]
	xor	edx, edx
	mov	dh, BYTE PTR [ecx]
	pop	esi
	mov	dl, BYTE PTR [ecx+1]
	add	eax, edx
; Line 23274
	ret	0
$LN9@findOverfl:
; Line 23268
	mov	eax, DWORD PTR [edx]
	pop	esi
; Line 23274
	ret	0
_findOverflowCell ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeParseCellPtr
_TEXT	SEGMENT
_nPayload$ = -4						; size = 4
tv322 = 8						; size = 4
_pPage$ = 8						; size = 4
_x$85898 = 12						; size = 4
_pCell$ = 12						; size = 4
_sqlite3BtreeParseCellPtr PROC				; COMDAT
; _pInfo$ = esi
; Line 23289
	push	ecx
; Line 23293
	mov	ecx, DWORD PTR _pCell$[esp]
	push	ebx
	push	ebp
	push	edi
; Line 23295
	mov	edi, DWORD PTR _pPage$[esp+12]
	mov	DWORD PTR [esi], ecx
; Line 23297
	cmp	BYTE PTR [edi+7], 0
	movzx	ebx, BYTE PTR [edi+9]
	je	SHORT $LN9@sqlite3Btr
; Line 23298
	movzx	ebp, BYTE PTR [ebx+ecx]
	cmp	ebp, 127				; 0000007fH
	lea	eax, DWORD PTR [ebx+ecx]
	mov	DWORD PTR _nPayload$[esp+16], ebp
	ja	SHORT $LN12@sqlite3Btr
	mov	eax, 1
	add	ebx, eax
; Line 23299
	jmp	SHORT $LN8@sqlite3Btr
$LN12@sqlite3Btr:
; Line 23298
	lea	ecx, DWORD PTR _nPayload$[esp+16]
	push	ecx
	mov	edi, eax
	call	_sqlite3GetVarint32
	mov	ebp, DWORD PTR _nPayload$[esp+20]
	mov	ecx, DWORD PTR _pCell$[esp+16]
	mov	edi, DWORD PTR _pPage$[esp+16]
	add	esp, 4
	add	ebx, eax
; Line 23299
	jmp	SHORT $LN8@sqlite3Btr
$LN9@sqlite3Btr:
; Line 23300
	xor	ebp, ebp
$LN8@sqlite3Btr:
; Line 23302
	mov	DWORD PTR [esi+16], ebp
; Line 23303
	cmp	BYTE PTR [edi+3], 0
; Line 23304
	lea	eax, DWORD PTR [ebx+ecx]
	je	SHORT $LN7@sqlite3Btr
	lea	edx, DWORD PTR [esi+8]
	push	edx
	push	eax
	call	_sqlite3GetVarint
	add	esp, 8
	add	ebx, eax
; Line 23305
	jmp	SHORT $LN6@sqlite3Btr
$LN7@sqlite3Btr:
; Line 23307
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 127				; 0000007fH
	mov	DWORD PTR _x$85898[esp+12], ecx
	ja	SHORT $LN14@sqlite3Btr
	mov	eax, 1
	jmp	SHORT $LN15@sqlite3Btr
$LN14@sqlite3Btr:
	lea	ecx, DWORD PTR _x$85898[esp+12]
	push	ecx
	mov	edi, eax
	call	_sqlite3GetVarint32
	mov	ecx, DWORD PTR _x$85898[esp+16]
	mov	edi, DWORD PTR _pPage$[esp+16]
	add	esp, 4
$LN15@sqlite3Btr:
	add	ebx, eax
; Line 23308
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+12], 0
; Line 23309
	add	ebp, ecx
$LN6@sqlite3Btr:
; Line 23311
	mov	DWORD PTR [esi+20], ebp
; Line 23312
	mov	WORD PTR [esi+24], bx
; Line 23313
	movzx	edi, WORD PTR [edi+10]
	cmp	ebp, edi
	ja	SHORT $LN5@sqlite3Btr
; Line 23320
	add	ebx, ebp
; Line 23321
	cmp	ebx, 4
	mov	WORD PTR [esi+26], bp
	mov	WORD PTR [esi+28], 0
	jge	SHORT $LN4@sqlite3Btr
; Line 23322
	mov	ebx, 4
$LN4@sqlite3Btr:
	pop	edi
	pop	ebp
; Line 23324
	mov	WORD PTR [esi+30], bx
	pop	ebx
; Line 23350
	pop	ecx
	ret	0
$LN5@sqlite3Btr:
; Line 23339
	mov	eax, DWORD PTR _pPage$[esp+12]
; Line 23341
	mov	edx, DWORD PTR [eax+64]
	movzx	ecx, WORD PTR [eax+12]
	movzx	eax, WORD PTR [edx+26]
	sub	eax, 4
	mov	DWORD PTR tv322[esp+12], eax
	mov	eax, ebp
	mov	ebp, DWORD PTR tv322[esp+12]
	xor	edx, edx
	sub	eax, ecx
	div	ebp
	add	edx, ecx
; Line 23342
	cmp	edx, edi
	jg	SHORT $LN2@sqlite3Btr
; Line 23343
	mov	WORD PTR [esi+26], dx
; Line 23344
	jmp	SHORT $LN1@sqlite3Btr
$LN2@sqlite3Btr:
; Line 23345
	mov	WORD PTR [esi+26], cx
$LN1@sqlite3Btr:
; Line 23347
	movzx	eax, WORD PTR [esi+26]
	add	ax, bx
	pop	edi
	mov	WORD PTR [esi+28], ax
	pop	ebp
	pop	ebx
; Line 23348
	add	eax, 4
	mov	WORD PTR [esi+30], ax
; Line 23350
	pop	ecx
	ret	0
_sqlite3BtreeParseCellPtr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeParseCell
_TEXT	SEGMENT
_iCell$ = 8						; size = 4
_pInfo$ = 12						; size = 4
_sqlite3BtreeParseCell PROC				; COMDAT
; _pPage$ = eax
; Line 23358
	movzx	edx, WORD PTR [eax+14]
	mov	ecx, DWORD PTR [eax+68]
	push	esi
	mov	esi, DWORD PTR _iCell$[esp]
	add	edx, ecx
	lea	esi, DWORD PTR [edx+esi*2]
	xor	edx, edx
	mov	dh, BYTE PTR [esi]
	mov	dl, BYTE PTR [esi+1]
	mov	esi, DWORD PTR _pInfo$[esp]
	add	edx, ecx
	push	edx
	push	eax
	call	_sqlite3BtreeParseCellPtr
	add	esp, 8
	pop	esi
; Line 23359
	ret	0
_sqlite3BtreeParseCell ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _cellSizePtr
_TEXT	SEGMENT
_info$ = -32						; size = 32
_cellSizePtr PROC					; COMDAT
; _pPage$ = ecx
; _pCell$ = eax
; Line 23374
	sub	esp, 32					; 00000020H
	push	esi
; Line 23376
	push	eax
	push	ecx
	lea	esi, DWORD PTR _info$[esp+44]
	call	_sqlite3BtreeParseCellPtr
; Line 23377
	movzx	eax, WORD PTR _info$[esp+74]
	add	esp, 8
	pop	esi
; Line 23378
	add	esp, 32					; 00000020H
	ret	0
_cellSizePtr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _freeSpace
_TEXT	SEGMENT
_hdr$ = 8						; size = 4
_pPage$ = 8						; size = 4
tv531 = 12						; size = 4
_pnext$86025 = 12					; size = 4
_size$ = 12						; size = 4
_freeSpace PROC						; COMDAT
; _start$ = edx
; Line 23540
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pPage$[esp+4]
; Line 23542
	mov	eax, DWORD PTR [ebp+68]
; Line 23548
	mov	ecx, 4
	cmp	DWORD PTR _size$[esp+4], ecx
	push	esi
	push	edi
	jge	SHORT $LN8@freeSpace
	mov	DWORD PTR _size$[esp+12], ecx
$LN8@freeSpace:
; Line 23557
	movzx	esi, BYTE PTR [ebp+8]
; Line 23559
	movzx	ecx, BYTE PTR [esi+eax+2]
	mov	ch, BYTE PTR [esi+eax+1]
	mov	DWORD PTR _hdr$[esp+12], esi
	add	esi, 1
	cmp	ecx, edx
	jge	SHORT $LN6@freeSpace
$LL7@freeSpace:
	test	ecx, ecx
	jle	SHORT $LN6@freeSpace
	xor	ebx, ebx
	mov	bh, BYTE PTR [ecx+eax]
; Line 23562
	mov	esi, ecx
	mov	bl, BYTE PTR [ecx+eax+1]
	mov	ecx, ebx
	cmp	ecx, edx
	jl	SHORT $LL7@freeSpace
$LN6@freeSpace:
; Line 23566
	mov	BYTE PTR [esi+eax+1], dl
	mov	ebx, edx
	sar	ebx, 8
	mov	BYTE PTR [esi+eax], bl
; Line 23567
	mov	ebx, ecx
	mov	BYTE PTR [eax+edx+1], cl
; Line 23568
	mov	ecx, DWORD PTR _size$[esp+12]
	sar	ebx, 8
	mov	BYTE PTR [eax+edx], bl
	mov	ebx, ecx
	sar	ebx, 8
	mov	BYTE PTR [eax+edx+2], bl
	mov	BYTE PTR [eax+edx+3], cl
; Line 23572
	movzx	edi, BYTE PTR [ebp+8]
	add	WORD PTR [ebp+18], cx
; Line 23573
	movzx	ecx, BYTE PTR [edi+eax+2]
	mov	ch, BYTE PTR [edi+eax+1]
	add	edi, 1
	test	ecx, ecx
	jle	$LN4@freeSpace
	npad	4
$LL5@freeSpace:
; Line 23577
	xor	edx, edx
	mov	dh, BYTE PTR [ecx+eax]
	mov	dl, BYTE PTR [eax+ecx+1]
	mov	DWORD PTR _pnext$86025[esp+12], edx
; Line 23578
	xor	edx, edx
	mov	dh, BYTE PTR [eax+ecx+2]
	mov	dl, BYTE PTR [eax+ecx+3]
; Line 23579
	lea	esi, DWORD PTR [edx+ecx+3]
	cmp	esi, DWORD PTR _pnext$86025[esp+12]
	jl	SHORT $LN14@freeSpace
	cmp	DWORD PTR _pnext$86025[esp+12], 0
	jle	SHORT $LN14@freeSpace
; Line 23582
	sub	dl, BYTE PTR _pnext$86025[esp+12]
	movzx	esi, BYTE PTR [ebp+8]
	add	dl, cl
	add	BYTE PTR [esi+eax+7], dl
; Line 23583
	xor	edx, edx
	lea	esi, DWORD PTR [esi+eax+7]
	mov	esi, DWORD PTR _pnext$86025[esp+12]
	mov	dh, BYTE PTR [esi+eax]
	sar	edx, 8
	mov	BYTE PTR [ecx+eax], dl
	movzx	edx, BYTE PTR [eax+esi+1]
	mov	BYTE PTR [eax+ecx+1], dl
; Line 23584
	xor	edx, edx
	mov	dh, BYTE PTR [eax+esi+2]
	mov	dl, BYTE PTR [eax+esi+3]
	sub	edx, ecx
	add	edx, esi
	sar	edx, 8
	mov	BYTE PTR [eax+ecx+2], dl
	mov	edx, esi
	mov	bl, BYTE PTR [eax+edx+3]
	sub	bl, cl
	add	bl, dl
	mov	BYTE PTR [eax+ecx+3], bl
; Line 23585
	jmp	SHORT $LN2@freeSpace
$LN14@freeSpace:
; Line 23586
	mov	edi, ecx
$LN2@freeSpace:
; Line 23573
	xor	ecx, ecx
	mov	ch, BYTE PTR [edi+eax]
	mov	cl, BYTE PTR [eax+edi+1]
	test	ecx, ecx
	jg	$LL5@freeSpace
$LN4@freeSpace:
; Line 23591
	mov	esi, DWORD PTR _hdr$[esp+12]
	mov	dl, BYTE PTR [esi+eax+1]
	cmp	dl, BYTE PTR [esi+eax+5]
	lea	edi, DWORD PTR [esi+eax+1]
	lea	ecx, DWORD PTR [esi+eax+5]
	mov	DWORD PTR tv531[esp+12], ecx
	jne	SHORT $LN1@freeSpace
	mov	cl, BYTE PTR [esi+eax+2]
	cmp	cl, BYTE PTR [esi+eax+6]
	lea	ebp, DWORD PTR [esi+eax+6]
	jne	SHORT $LN1@freeSpace
; Line 23593
	xor	ebx, ebx
	mov	bh, dl
; Line 23595
	mov	edx, DWORD PTR tv531[esp+12]
	mov	bl, cl
	mov	esi, ebx
	mov	cx, WORD PTR [esi+eax]
	mov	WORD PTR [edi], cx
; Line 23596
	xor	ebx, ebx
	mov	bh, BYTE PTR [esi+eax+2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [edx]
	lea	edi, DWORD PTR [esi+eax+3]
	mov	bl, BYTE PTR [edi]
	mov	cl, BYTE PTR [ebp]
	add	ebx, ecx
	sar	ebx, 8
	mov	BYTE PTR [edx], bl
	mov	dl, BYTE PTR [edi]
	add	dl, cl
	mov	BYTE PTR [ebp], dl
$LN1@freeSpace:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 23598
	ret	0
_freeSpace ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _decodeFlags
_TEXT	SEGMENT
_flagByte$ = 8						; size = 4
_decodeFlags PROC					; COMDAT
; _pPage$ = eax
; Line 23604
	mov	edx, DWORD PTR _flagByte$[esp-4]
; Line 23608
	test	dl, 5
	setne	cl
	mov	BYTE PTR [eax+3], cl
; Line 23609
	mov	ecx, edx
	shr	ecx, 1
	push	ebx
	and	cl, 1
; Line 23610
	shr	edx, 3
	and	dl, 1
; Line 23611
	sete	bl
	add	bl, bl
	push	esi
; Line 23612
	mov	esi, DWORD PTR [eax+64]
	add	bl, bl
; Line 23613
	test	BYTE PTR _flagByte$[esp+4], 4
	push	edi
	mov	BYTE PTR [eax+5], cl
	mov	BYTE PTR [eax+4], dl
	mov	BYTE PTR [eax+9], bl
	je	SHORT $LN2@decodeFlag
; Line 23614
	mov	BYTE PTR [eax+6], 1
; Line 23615
	mov	di, WORD PTR [esi+36]
	mov	WORD PTR [eax+10], di
; Line 23616
	mov	si, WORD PTR [esi+40]
; Line 23617
	jmp	SHORT $LN8@decodeFlag
$LN2@decodeFlag:
; Line 23618
	mov	BYTE PTR [eax+6], 0
; Line 23619
	mov	di, WORD PTR [esi+28]
	mov	WORD PTR [eax+10], di
; Line 23620
	mov	si, WORD PTR [esi+32]
$LN8@decodeFlag:
; Line 23622
	test	cl, cl
	pop	edi
	mov	WORD PTR [eax+12], si
	pop	esi
	pop	ebx
	jne	SHORT $LN6@decodeFlag
	test	dl, dl
	jne	SHORT $LN5@decodeFlag
	cmp	BYTE PTR [eax+6], dl
	jne	SHORT $LN6@decodeFlag
$LN5@decodeFlag:
	mov	ecx, 1
	mov	BYTE PTR [eax+7], cl
; Line 23623
	ret	0
$LN6@decodeFlag:
; Line 23622
	xor	ecx, ecx
	mov	BYTE PTR [eax+7], cl
; Line 23623
	ret	0
_decodeFlags ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeInitPage
_TEXT	SEGMENT
tv466 = -16						; size = 4
_usableSize$ = -12					; size = 4
_cellOffset$ = -8					; size = 4
_top$ = -4						; size = 4
_pParent$ = 8						; size = 4
_sqlite3BtreeInitPage PROC				; COMDAT
; _pPage$ = ebx
; Line 23656
	mov	ecx, DWORD PTR [ebx+80]
	mov	eax, DWORD PTR _pParent$[esp-4]
	sub	esp, 16					; 00000010H
	cmp	ecx, eax
	push	ebp
	mov	ebp, DWORD PTR [ebx+64]
	je	SHORT $LN11@sqlite3Btr@2
	test	ecx, ecx
	jne	SHORT $LN10@sqlite3Btr@2
	cmp	BYTE PTR [ebx], cl
	je	SHORT $LN22@sqlite3Btr@2
$LN10@sqlite3Btr@2:
; Line 23658
	mov	eax, 11					; 0000000bH
	pop	ebp
; Line 23709
	add	esp, 16					; 00000010H
	ret	0
$LN11@sqlite3Btr@2:
; Line 23660
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN22@sqlite3Btr@2
	xor	eax, eax
	pop	ebp
; Line 23709
	add	esp, 16					; 00000010H
	ret	0
$LN22@sqlite3Btr@2:
; Line 23661
	test	ecx, ecx
	jne	SHORT $LN17@sqlite3Btr@2
	test	eax, eax
	je	SHORT $LN17@sqlite3Btr@2
; Line 23662
	mov	DWORD PTR [ebx+80], eax
; Line 23663
	mov	eax, DWORD PTR [eax+72]
	movzx	ecx, WORD PTR [eax+34]
	test	cx, cx
	jne	SHORT $LN16@sqlite3Btr@2
	call	__page_ref
	jmp	SHORT $LN17@sqlite3Btr@2
$LN16@sqlite3Btr@2:
	add	ecx, 1
	mov	WORD PTR [eax+34], cx
$LN17@sqlite3Btr@2:
	push	esi
; Line 23666
	mov	esi, DWORD PTR [ebx+68]
	push	edi
	movzx	edi, BYTE PTR [ebx+8]
; Line 23667
	movzx	eax, BYTE PTR [esi+edi]
	push	eax
	mov	eax, ebx
	call	_decodeFlags
; Line 23671
	movzx	edx, BYTE PTR [ebx+4]
	mov	BYTE PTR [ebx+2], 0
	mov	BYTE PTR [ebx+1], 0
	movzx	ecx, WORD PTR [ebp+26]
	mov	DWORD PTR _usableSize$[esp+32], ecx
; Line 23672
	xor	ecx, ecx
	mov	eax, 3
	sub	eax, edx
	lea	eax, DWORD PTR [edi+eax*4]
	mov	WORD PTR [ebx+14], ax
	mov	ch, BYTE PTR [esi+edi+5]
; Line 23673
	movzx	dx, BYTE PTR [esi+edi+4]
	mov	DWORD PTR _cellOffset$[esp+32], eax
	add	esp, 4
	mov	cl, BYTE PTR [esi+edi+6]
	mov	DWORD PTR _top$[esp+28], ecx
	xor	ecx, ecx
	mov	ch, BYTE PTR [esi+edi+3]
	or	cx, dx
; Line 23674
	movzx	eax, cx
	mov	DWORD PTR tv466[esp+28], eax
	mov	WORD PTR [ebx+20], cx
	movzx	edx, WORD PTR [ebp+24]
	sub	edx, 8
	mov	eax, 1431655766				; 55555556H
	imul	edx
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	cmp	DWORD PTR tv466[esp+28], eax
; Line 23676
	jg	SHORT $LN20@sqlite3Btr@2
; Line 23678
	test	cx, cx
	jne	SHORT $LN6@sqlite3Btr@2
	mov	eax, DWORD PTR _pParent$[esp+24]
	test	eax, eax
	je	SHORT $LN6@sqlite3Btr@2
	cmp	DWORD PTR [eax+76], 1
; Line 23680
	jne	SHORT $LN20@sqlite3Btr@2
$LN6@sqlite3Btr@2:
; Line 23685
	movzx	ebp, BYTE PTR [esi+edi+7]
	mov	ecx, DWORD PTR tv466[esp+28]
	xor	eax, eax
	mov	ah, BYTE PTR [esi+edi+1]
	lea	edx, DWORD PTR [ecx+ecx]
	sub	ebp, edx
	sub	ebp, DWORD PTR _cellOffset$[esp+28]
	add	ebp, DWORD PTR _top$[esp+28]
	mov	al, BYTE PTR [esi+edi+2]
; Line 23686
	test	eax, eax
	jle	SHORT $LN23@sqlite3Btr@2
	mov	edx, DWORD PTR _usableSize$[esp+28]
	add	edx, -4					; fffffffcH
$LL5@sqlite3Btr@2:
; Line 23688
	cmp	eax, edx
	jg	SHORT $LN20@sqlite3Btr@2
; Line 23692
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+esi]
	mov	cl, BYTE PTR [eax+esi+1]
	mov	edi, ecx
; Line 23693
	xor	ecx, ecx
; Line 23694
	test	edi, edi
	mov	ch, BYTE PTR [eax+esi+2]
	mov	cl, BYTE PTR [eax+esi+3]
	jle	SHORT $LN2@sqlite3Btr@2
	lea	eax, DWORD PTR [ecx+eax+3]
	cmp	edi, eax
	jle	SHORT $LN20@sqlite3Btr@2
$LN2@sqlite3Btr@2:
; Line 23698
	add	ebp, ecx
	test	edi, edi
; Line 23699
	mov	eax, edi
	jg	SHORT $LL5@sqlite3Btr@2
$LN23@sqlite3Btr@2:
; Line 23702
	cmp	ebp, DWORD PTR _usableSize$[esp+28]
	mov	WORD PTR [ebx+18], bp
	jl	SHORT $LN1@sqlite3Btr@2
$LN20@sqlite3Btr@2:
	pop	edi
	pop	esi
; Line 23704
	mov	eax, 11					; 0000000bH
	pop	ebp
; Line 23709
	add	esp, 16					; 00000010H
	ret	0
$LN1@sqlite3Btr@2:
	pop	edi
	pop	esi
; Line 23707
	mov	BYTE PTR [ebx], 1
; Line 23708
	xor	eax, eax
	pop	ebp
; Line 23709
	add	esp, 16					; 00000010H
	ret	0
_sqlite3BtreeInitPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _zeroPage
_TEXT	SEGMENT
_first$ = 8						; size = 4
_flags$ = 8						; size = 4
_zeroPage PROC						; COMDAT
; _pPage$ = esi
; Line 23716
	mov	eax, DWORD PTR [esi+68]
	push	ebx
; Line 23718
	movzx	ebx, BYTE PTR [esi+8]
	push	ebp
	mov	ebp, DWORD PTR [esi+64]
	push	edi
; Line 23724
	lea	edi, DWORD PTR [ebx+eax]
	movzx	eax, WORD PTR [ebp+26]
	sub	eax, ebx
	push	eax
	push	0
	push	edi
	call	_memset
; Line 23725
	mov	eax, DWORD PTR _flags$[esp+20]
	mov	BYTE PTR [edi], al
; Line 23727
	mov	DWORD PTR [edi+1], 0
; Line 23728
	mov	BYTE PTR [edi+7], 0
; Line 23729
	movzx	edx, BYTE PTR [ebp+27]
	mov	BYTE PTR [edi+5], dl
	movzx	edx, BYTE PTR [ebp+26]
	mov	ecx, eax
	shr	ecx, 3
	not	ecx
	mov	BYTE PTR [edi+6], dl
; Line 23730
	mov	dx, WORD PTR [ebp+26]
	and	ecx, 1
	lea	ecx, DWORD PTR [ebx+ecx*4+8]
	sub	dx, cx
; Line 23731
	push	eax
	mov	eax, esi
	mov	DWORD PTR _first$[esp+24], ecx
	mov	WORD PTR [esi+18], dx
	call	_decodeFlags
; Line 23733
	mov	ax, WORD PTR _first$[esp+24]
	add	esp, 16					; 00000010H
	pop	edi
	pop	ebp
	mov	BYTE PTR [esi+8], bl
	mov	WORD PTR [esi+14], ax
; Line 23734
	mov	BYTE PTR [esi+2], 0
; Line 23735
	mov	BYTE PTR [esi+1], 0
; Line 23736
	mov	WORD PTR [esi+20], 0
; Line 23737
	mov	BYTE PTR [esi], 1
	pop	ebx
; Line 23738
	ret	0
_zeroPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pageReinit
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pageSize$ = 12						; size = 4
_pageReinit PROC					; COMDAT
; Line 23836
	mov	ecx, DWORD PTR _pData$[esp-4]
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	push	ebx
	je	SHORT $LN6@pageReinit
	mov	eax, DWORD PTR [eax+56]
	lea	ebx, DWORD PTR [eax+ecx+48]
	jmp	SHORT $LN7@pageReinit
$LN6@pageReinit:
	xor	ebx, ebx
$LN7@pageReinit:
; Line 23837
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN1@pageReinit
; Line 23839
	mov	ecx, DWORD PTR [ebx+80]
	push	ecx
	mov	BYTE PTR [ebx], 0
	call	_sqlite3BtreeInitPage
	add	esp, 4
$LN1@pageReinit:
	pop	ebx
; Line 23841
	ret	0
_pageReinit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeSetBusyHandler
_TEXT	SEGMENT
_sqlite3BtreeSetBusyHandler PROC			; COMDAT
; _p$ = eax
; _pHandler$ = ecx
; Line 24070
	mov	eax, DWORD PTR [eax+4]
; Line 24072
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax+44], ecx
	mov	DWORD PTR [edx+108], ecx
; Line 24073
	xor	eax, eax
; Line 24074
	ret	0
_sqlite3BtreeSetBusyHandler ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeSetCacheSize
_TEXT	SEGMENT
_sqlite3BtreeSetCacheSize PROC				; COMDAT
; _p$ = eax
; _mxPage$ = ecx
; Line 24093
	cmp	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx]
	jle	SHORT $LN4@sqlite3Btr@3
	mov	DWORD PTR [eax+68], ecx
; Line 24094
	xor	eax, eax
; Line 24095
	ret	0
; Line 24093
$LN4@sqlite3Btr@3:
	mov	DWORD PTR [eax+68], 10			; 0000000aH
; Line 24094
	xor	eax, eax
; Line 24095
	ret	0
_sqlite3BtreeSetCacheSize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeSetSafetyLevel
_TEXT	SEGMENT
_fullSync$ = 8						; size = 4
_sqlite3BtreeSetSafetyLevel PROC			; COMDAT
; _p$ = eax
; _level$ = ecx
; Line 24108
	cmp	ecx, 1
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx]
	je	SHORT $LN6@sqlite3Btr@4
	cmp	BYTE PTR [eax+11], 0
	jne	SHORT $LN6@sqlite3Btr@4
	xor	edx, edx
	jmp	SHORT $LN7@sqlite3Btr@4
$LN6@sqlite3Btr@4:
	mov	edx, 1
$LN7@sqlite3Btr@4:
	cmp	ecx, 3
	mov	BYTE PTR [eax+7], dl
	jne	SHORT $LN8@sqlite3Btr@4
	cmp	BYTE PTR [eax+11], 0
	jne	SHORT $LN8@sqlite3Btr@4
	mov	ecx, 1
	jmp	SHORT $LN9@sqlite3Btr@4
$LN8@sqlite3Btr@4:
	xor	ecx, ecx
$LN9@sqlite3Btr@4:
	test	dl, dl
	mov	BYTE PTR [eax+8], cl
	mov	cl, BYTE PTR _fullSync$[esp-4]
	mov	BYTE PTR [eax+9], cl
	je	SHORT $LN10@sqlite3Btr@4
	mov	BYTE PTR [eax+13], 0
$LN10@sqlite3Btr@4:
; Line 24109
	xor	eax, eax
; Line 24110
	ret	0
_sqlite3BtreeSetSafetyLevel ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeSyncDisabled
_TEXT	SEGMENT
_sqlite3BtreeSyncDisabled PROC				; COMDAT
; _p$ = eax
; Line 24118
	mov	ecx, DWORD PTR [eax+4]
; Line 24120
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+7]
; Line 24121
	ret	0
_sqlite3BtreeSyncDisabled ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeGetPageSize
_TEXT	SEGMENT
_sqlite3BtreeGetPageSize PROC				; COMDAT
; _p$ = eax
; Line 24161
	mov	ecx, DWORD PTR [eax+4]
	movzx	eax, WORD PTR [ecx+24]
; Line 24162
	ret	0
_sqlite3BtreeGetPageSize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeGetReserve
_TEXT	SEGMENT
_sqlite3BtreeGetReserve PROC				; COMDAT
; _p$ = eax
; Line 24164
	mov	eax, DWORD PTR [eax+4]
	movzx	ecx, WORD PTR [eax+26]
	movzx	eax, WORD PTR [eax+24]
	sub	eax, ecx
; Line 24165
	ret	0
_sqlite3BtreeGetReserve ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeSetAutoVacuum
_TEXT	SEGMENT
_sqlite3BtreeSetAutoVacuum PROC				; COMDAT
; _p$ = eax
; _autoVacuum$ = ecx
; Line 24187
	mov	eax, DWORD PTR [eax+4]
	push	esi
	mov	esi, ecx
; Line 24188
	xor	ecx, ecx
	test	esi, esi
	setne	cl
; Line 24189
	xor	edx, edx
	cmp	esi, 2
	sete	dl
; Line 24190
	cmp	BYTE PTR [eax+17], 0
	je	SHORT $LN1@sqlite3Btr@5
	movzx	esi, BYTE PTR [eax+18]
	cmp	ecx, esi
	je	SHORT $LN1@sqlite3Btr@5
; Line 24191
	mov	eax, 8
	pop	esi
; Line 24197
	ret	0
$LN1@sqlite3Btr@5:
; Line 24193
	mov	BYTE PTR [eax+18], cl
; Line 24194
	mov	BYTE PTR [eax+19], dl
; Line 24195
	xor	eax, eax
	pop	esi
; Line 24197
	ret	0
_sqlite3BtreeSetAutoVacuum ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeGetAutoVacuum
_TEXT	SEGMENT
_sqlite3BtreeGetAutoVacuum PROC				; COMDAT
; _p$ = eax
; Line 24211
	mov	eax, DWORD PTR [eax+4]
	cmp	BYTE PTR [eax+18], 0
	jne	SHORT $LN3@sqlite3Btr@6
	xor	eax, eax
; Line 24213
	ret	0
$LN3@sqlite3Btr@6:
; Line 24211
	xor	ecx, ecx
	cmp	BYTE PTR [eax+19], cl
	setne	cl
	add	ecx, 1
	mov	eax, ecx
; Line 24213
	ret	0
_sqlite3BtreeGetAutoVacuum ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _modifyPagePointer
_TEXT	SEGMENT
_nCell$86405 = -40					; size = 4
_isInitOrig$86403 = -36					; size = 4
_info$86411 = -32					; size = 32
_iFrom$ = 8						; size = 4
_iTo$ = 12						; size = 4
_eType$ = 16						; size = 1
_modifyPagePointer PROC					; COMDAT
; _pPage$ = eax
; Line 24537
	sub	esp, 40					; 00000028H
; Line 24538
	cmp	BYTE PTR _eType$[esp+36], 4
	push	ebx
	push	esi
	mov	ebx, eax
	jne	SHORT $LN14@modifyPage
; Line 24540
	mov	ebx, DWORD PTR [ebx+68]
	movzx	ecx, BYTE PTR [ebx+2]
	movzx	edx, BYTE PTR [ebx+3]
	xor	eax, eax
	mov	ah, BYTE PTR [ebx]
	mov	al, BYTE PTR [ebx+1]
	shl	eax, 8
	or	eax, ecx
	shl	eax, 8
	or	eax, edx
	cmp	eax, DWORD PTR _iFrom$[esp+44]
	je	SHORT $LN13@modifyPage
$LN1@modifyPage:
	pop	esi
; Line 24541
	mov	eax, 11					; 0000000bH
	pop	ebx
; Line 24582
	add	esp, 40					; 00000028H
	ret	0
$LN13@modifyPage:
; Line 24543
	mov	eax, DWORD PTR _iTo$[esp+44]
	mov	ecx, eax
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [ebx], cl
	mov	edx, eax
	mov	ecx, eax
	shr	edx, 16					; 00000010H
	shr	ecx, 8
	mov	BYTE PTR [ebx+3], al
	pop	esi
	mov	BYTE PTR [ebx+1], dl
	mov	BYTE PTR [ebx+2], cl
; Line 24581
	xor	eax, eax
	pop	ebx
; Line 24582
	add	esp, 40					; 00000028H
	ret	0
$LN14@modifyPage:
; Line 24545
	movzx	edx, BYTE PTR [ebx]
	push	ebp
	push	edi
; Line 24549
	push	0
	mov	DWORD PTR _isInitOrig$86403[esp+60], edx
	call	_sqlite3BtreeInitPage
; Line 24550
	movzx	eax, WORD PTR [ebx+20]
	add	esp, 4
; Line 24552
	xor	ebp, ebp
	test	eax, eax
	mov	DWORD PTR _nCell$86405[esp+56], eax
	jle	$LN37@modifyPage
$LL11@modifyPage:
	movzx	ecx, WORD PTR [ebx+14]
; Line 24553
	mov	eax, DWORD PTR [ebx+68]
	add	ecx, eax
	xor	edx, edx
	mov	dh, BYTE PTR [ecx+ebp*2]
	lea	esi, DWORD PTR [ecx+ebp*2]
	mov	dl, BYTE PTR [esi+1]
	add	edx, eax
; Line 24554
	cmp	BYTE PTR _eType$[esp+52], 3
	mov	edi, edx
	jne	SHORT $LN8@modifyPage
; Line 24556
	push	edi
	push	ebx
	lea	esi, DWORD PTR _info$86411[esp+64]
	call	_sqlite3BtreeParseCellPtr
; Line 24557
	mov	si, WORD PTR _info$86411[esp+92]
	add	esp, 8
	test	si, si
	je	SHORT $LN10@modifyPage
; Line 24558
	movzx	eax, si
	movzx	ecx, BYTE PTR [eax+edi+1]
	mov	ch, BYTE PTR [eax+edi]
	movzx	edx, BYTE PTR [eax+edi+2]
	add	eax, edi
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	cmp	DWORD PTR _iFrom$[esp+52], ecx
	jne	SHORT $LN10@modifyPage
; Line 24559
	mov	ecx, DWORD PTR _iTo$[esp+52]
	movzx	eax, si
	add	eax, edi
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], cl
; Line 24560
	jmp	SHORT $LN9@modifyPage
$LN8@modifyPage:
; Line 24564
	movzx	ecx, BYTE PTR [edi+1]
	mov	ch, BYTE PTR [edi]
	movzx	edx, BYTE PTR [edi+2]
	movzx	eax, BYTE PTR [edi+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	cmp	ecx, DWORD PTR _iFrom$[esp+52]
	je	SHORT $LN35@modifyPage
$LN10@modifyPage:
; Line 24552
	add	ebp, 1
	cmp	ebp, DWORD PTR _nCell$86405[esp+56]
	jl	$LL11@modifyPage
; Line 24564
	jmp	SHORT $LN37@modifyPage
$LN35@modifyPage:
; Line 24565
	mov	eax, DWORD PTR _iTo$[esp+52]
	mov	ecx, eax
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [edi], cl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	ecx, eax
	shr	ecx, 8
	mov	BYTE PTR [edi+1], dl
	mov	BYTE PTR [edi+2], cl
	mov	BYTE PTR [edi+3], al
$LN37@modifyPage:
	mov	ecx, DWORD PTR _iTo$[esp+52]
$LN9@modifyPage:
; Line 24571
	cmp	ebp, DWORD PTR _nCell$86405[esp+56]
	pop	edi
	pop	ebp
	jne	SHORT $LN31@modifyPage
; Line 24573
	cmp	BYTE PTR _eType$[esp+44], 5
	jne	$LN1@modifyPage
	movzx	edx, BYTE PTR [ebx+8]
	mov	eax, DWORD PTR [ebx+68]
	movzx	esi, BYTE PTR [edx+eax+10]
	lea	eax, DWORD PTR [edx+eax+8]
	xor	edx, edx
	mov	dh, BYTE PTR [eax]
	mov	dl, BYTE PTR [eax+1]
	shl	edx, 8
	or	edx, esi
	movzx	esi, BYTE PTR [eax+3]
	shl	edx, 8
	or	edx, esi
	cmp	edx, DWORD PTR _iFrom$[esp+44]
	jne	$LN1@modifyPage
; Line 24576
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], cl
$LN31@modifyPage:
; Line 24579
	mov	al, BYTE PTR _isInitOrig$86403[esp+48]
	mov	BYTE PTR [ebx], al
	pop	esi
; Line 24581
	xor	eax, eax
	pop	ebx
; Line 24582
	add	esp, 40					; 00000028H
	ret	0
_modifyPagePointer ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _dfltCompare
_TEXT	SEGMENT
_NotUsed$ = 8						; size = 4
_n1$ = 12						; size = 4
_p1$ = 16						; size = 4
_n2$ = 20						; size = 4
_p2$ = 24						; size = 4
_dfltCompare PROC					; COMDAT
; Line 25132
	push	ebx
; Line 25134
	mov	ebx, DWORD PTR _n2$[esp]
	push	edi
	mov	edi, DWORD PTR _n1$[esp+4]
	cmp	edi, ebx
	mov	eax, edi
	jl	SHORT $LN5@dfltCompar
	mov	eax, ebx
$LN5@dfltCompar:
	cmp	eax, 4
	mov	ecx, DWORD PTR _p2$[esp+4]
	mov	edx, DWORD PTR _p1$[esp+4]
	push	ebp
	push	esi
	jb	SHORT $LN14@dfltCompar
$LL7@dfltCompar:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN8@dfltCompar
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL7@dfltCompar
$LN14@dfltCompar:
	test	eax, eax
	je	SHORT $LN9@dfltCompar
$LN8@dfltCompar:
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN17@dfltCompar
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN9@dfltCompar
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN17@dfltCompar
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN9@dfltCompar
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN17@dfltCompar
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN9@dfltCompar
	movzx	esi, BYTE PTR [edx]
	movzx	eax, BYTE PTR [ecx]
	sub	esi, eax
	je	SHORT $LN9@dfltCompar
$LN17@dfltCompar:
	test	esi, esi
	mov	eax, 1
	jg	SHORT $LN11@dfltCompar
	or	eax, -1
	jmp	SHORT $LN11@dfltCompar
$LN9@dfltCompar:
	xor	eax, eax
$LN11@dfltCompar:
; Line 25135
	test	eax, eax
	pop	esi
	pop	ebp
	jne	SHORT $LN1@dfltCompar
; Line 25136
	sub	edi, ebx
	mov	eax, edi
$LN1@dfltCompar:
	pop	edi
	pop	ebx
; Line 25139
	ret	0
_dfltCompare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeGetTempCursor
_TEXT	SEGMENT
_sqlite3BtreeGetTempCursor PROC				; COMDAT
; _pCur$ = edx
; _pTempCur$ = eax
; Line 25272
	push	esi
	push	edi
; Line 25273
	mov	esi, edx
	mov	edi, eax
; Line 25274
	xor	edx, edx
	mov	ecx, 24					; 00000018H
	rep movsd
	mov	DWORD PTR [eax+4], edx
; Line 25275
	mov	DWORD PTR [eax+8], edx
; Line 25276
	mov	eax, DWORD PTR [eax+24]
	cmp	eax, edx
	pop	edi
	pop	esi
	je	SHORT $LN7@sqlite3Btr@7
; Line 25277
	mov	eax, DWORD PTR [eax+72]
	movzx	ecx, WORD PTR [eax+34]
	cmp	cx, dx
	jne	SHORT $LN6@sqlite3Btr@7
	jmp	__page_ref
$LN6@sqlite3Btr@7:
	add	ecx, 1
	mov	WORD PTR [eax+34], cx
$LN7@sqlite3Btr@7:
; Line 25279
	ret	0
_sqlite3BtreeGetTempCursor ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _fetchPayload
_TEXT	SEGMENT
_pAmt$ = 8						; size = 4
_skipKey$ = 12						; size = 4
_fetchPayload PROC					; COMDAT
; _pCur$ = edi
; Line 25717
	cmp	WORD PTR [edi+62], 0
	push	ebx
	mov	ebx, DWORD PTR [edi+24]
	jne	SHORT $LN7@fetchPaylo
	movzx	edx, WORD PTR [ebx+14]
	mov	eax, DWORD PTR [ebx+68]
	mov	ecx, DWORD PTR [edi+28]
	push	ebp
	add	edx, eax
	lea	ebp, DWORD PTR [edx+ecx*2]
	movzx	ecx, BYTE PTR [ebp+1]
	mov	ch, BYTE PTR [ebp]
	push	esi
	lea	esi, DWORD PTR [edi+32]
	add	ecx, eax
	push	ecx
	push	ebx
	call	_sqlite3BtreeParseCellPtr
	add	esp, 8
	pop	esi
	pop	ebp
$LN7@fetchPaylo:
; Line 25719
	movzx	eax, WORD PTR [edi+56]
	add	eax, DWORD PTR [edi+32]
; Line 25720
	cmp	BYTE PTR [ebx+3], 0
	pop	ebx
	je	SHORT $LN5@fetchPaylo
; Line 25721
	xor	edx, edx
; Line 25722
	jmp	SHORT $LN4@fetchPaylo
$LN5@fetchPaylo:
; Line 25723
	mov	edx, DWORD PTR [edi+40]
$LN4@fetchPaylo:
; Line 25725
	cmp	DWORD PTR _skipKey$[esp-4], 0
; Line 25727
	movzx	ecx, WORD PTR [edi+58]
	je	SHORT $LN3@fetchPaylo
	add	eax, edx
	sub	ecx, edx
$LN12@fetchPaylo:
; Line 25734
	mov	edx, DWORD PTR _pAmt$[esp-4]
	mov	DWORD PTR [edx], ecx
; Line 25736
	ret	0
$LN3@fetchPaylo:
; Line 25730
	cmp	ecx, edx
	jbe	SHORT $LN12@fetchPaylo
; Line 25734
	mov	ecx, DWORD PTR _pAmt$[esp-4]
	mov	DWORD PTR [ecx], edx
; Line 25736
	ret	0
_fetchPayload ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeKeyFetch
_TEXT	SEGMENT
_pAmt$ = 8						; size = 4
_sqlite3BtreeKeyFetch PROC				; COMDAT
; _pCur$ = edi
; Line 25751
	cmp	BYTE PTR [edi+65], 1
	jne	SHORT $LN1@sqlite3Btr@8
; Line 25752
	cmp	WORD PTR [edi+62], 0
	push	ebx
	mov	ebx, DWORD PTR [edi+24]
	jne	SHORT $LN10@sqlite3Btr@8
	movzx	edx, WORD PTR [ebx+14]
	mov	eax, DWORD PTR [ebx+68]
	mov	ecx, DWORD PTR [edi+28]
	push	ebp
	add	edx, eax
	lea	ebp, DWORD PTR [edx+ecx*2]
	movzx	ecx, BYTE PTR [ebp+1]
	mov	ch, BYTE PTR [ebp]
	push	esi
	lea	esi, DWORD PTR [edi+32]
	add	ecx, eax
	push	ecx
	push	ebx
	call	_sqlite3BtreeParseCellPtr
	add	esp, 8
	pop	esi
	pop	ebp
$LN10@sqlite3Btr@8:
	movzx	eax, WORD PTR [edi+56]
	add	eax, DWORD PTR [edi+32]
	cmp	BYTE PTR [ebx+3], 0
	pop	ebx
	je	SHORT $LN8@sqlite3Btr@8
	xor	edx, edx
	jmp	SHORT $LN7@sqlite3Btr@8
$LN8@sqlite3Btr@8:
	mov	edx, DWORD PTR [edi+40]
$LN7@sqlite3Btr@8:
	movzx	ecx, WORD PTR [edi+58]
	cmp	ecx, edx
	jbe	SHORT $LN4@sqlite3Btr@8
	mov	ecx, edx
$LN4@sqlite3Btr@8:
	mov	edx, DWORD PTR _pAmt$[esp-4]
	mov	DWORD PTR [edx], ecx
; Line 25755
	ret	0
$LN1@sqlite3Btr@8:
; Line 25754
	xor	eax, eax
; Line 25755
	ret	0
_sqlite3BtreeKeyFetch ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeDataFetch
_TEXT	SEGMENT
_pAmt$ = 8						; size = 4
_sqlite3BtreeDataFetch PROC				; COMDAT
; _pCur$ = edi
; Line 25757
	cmp	BYTE PTR [edi+65], 1
	jne	SHORT $LN1@sqlite3Btr@9
; Line 25758
	cmp	WORD PTR [edi+62], 0
	push	ebx
	mov	ebx, DWORD PTR [edi+24]
	push	esi
	jne	SHORT $LN10@sqlite3Btr@9
	movzx	edx, WORD PTR [ebx+14]
	mov	eax, DWORD PTR [ebx+68]
	mov	ecx, DWORD PTR [edi+28]
	push	ebp
	add	edx, eax
	lea	ebp, DWORD PTR [edx+ecx*2]
	movzx	ecx, BYTE PTR [ebp+1]
	mov	ch, BYTE PTR [ebp]
	lea	esi, DWORD PTR [edi+32]
	add	ecx, eax
	push	ecx
	push	ebx
	call	_sqlite3BtreeParseCellPtr
	add	esp, 8
	pop	ebp
$LN10@sqlite3Btr@9:
	movzx	eax, WORD PTR [edi+56]
	add	eax, DWORD PTR [edi+32]
	cmp	BYTE PTR [ebx+3], 0
	je	SHORT $LN8@sqlite3Btr@9
	movzx	edx, WORD PTR [edi+58]
	mov	esi, DWORD PTR _pAmt$[esp+4]
	xor	ecx, ecx
	sub	edx, ecx
	mov	DWORD PTR [esi], edx
	pop	esi
	add	eax, ecx
	pop	ebx
; Line 25761
	ret	0
; Line 25758
$LN8@sqlite3Btr@9:
	movzx	edx, WORD PTR [edi+58]
	mov	ecx, DWORD PTR [edi+40]
	mov	esi, DWORD PTR _pAmt$[esp+4]
	sub	edx, ecx
	mov	DWORD PTR [esi], edx
	pop	esi
	add	eax, ecx
	pop	ebx
; Line 25761
	ret	0
$LN1@sqlite3Btr@9:
; Line 25760
	xor	eax, eax
; Line 25761
	ret	0
_sqlite3BtreeDataFetch ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeIsRootPage
_TEXT	SEGMENT
_sqlite3BtreeIsRootPage PROC				; COMDAT
; _pPage$ = eax
; Line 25800
	mov	eax, DWORD PTR [eax+80]
; Line 25801
	test	eax, eax
	jne	SHORT $LN3@sqlite3Btr@10
	mov	eax, 1
; Line 25805
	ret	0
$LN3@sqlite3Btr@10:
; Line 25802
	cmp	DWORD PTR [eax+76], 1
	jbe	SHORT $LN2@sqlite3Btr@10
	xor	eax, eax
; Line 25805
	ret	0
$LN2@sqlite3Btr@10:
; Line 25803
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR [eax+68]
	lea	eax, DWORD PTR [ecx+edx]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+3]
	mov	cl, BYTE PTR [eax+4]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	eax, ecx
; Line 25805
	ret	0
_sqlite3BtreeIsRootPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeEof
_TEXT	SEGMENT
_sqlite3BtreeEof PROC					; COMDAT
; _pCur$ = ecx
; Line 26109
	xor	eax, eax
	cmp	BYTE PTR [ecx+65], 1
	setne	al
; Line 26110
	ret	0
_sqlite3BtreeEof ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _dropCell
_TEXT	SEGMENT
_idx$ = 8						; size = 4
_dropCell PROC						; COMDAT
; _pPage$ = esi
; _sz$ = ecx
; Line 26828
	movzx	eax, WORD PTR [esi+14]
	push	ebx
	mov	ebx, DWORD PTR [esi+68]
	push	ebp
	mov	ebp, DWORD PTR _idx$[esp+4]
	push	edi
	add	eax, ebx
	lea	edi, DWORD PTR [eax+ebp*2]
; Line 26831
	xor	edx, edx
	mov	dh, BYTE PTR [edi]
	push	ecx
	push	esi
	mov	dl, BYTE PTR [edi+1]
	call	_freeSpace
; Line 26832
	movzx	edx, WORD PTR [esi+20]
	lea	eax, DWORD PTR [ebp+1]
	add	esp, 8
	cmp	eax, edx
	jge	SHORT $LN1@dropCell
	npad	1
$LL3@dropCell:
; Line 26833
	mov	cl, BYTE PTR [edi+2]
; Line 26834
	mov	dl, BYTE PTR [edi+3]
	mov	BYTE PTR [edi], cl
	mov	BYTE PTR [edi+1], dl
	movzx	ecx, WORD PTR [esi+20]
	add	eax, 1
	add	edi, 2
	cmp	eax, ecx
	jl	SHORT $LL3@dropCell
$LN1@dropCell:
; Line 26836
	add	WORD PTR [esi+20], 65535		; 0000ffffH
	movzx	eax, WORD PTR [esi+20]
; Line 26837
	movzx	edx, BYTE PTR [esi+8]
	mov	BYTE PTR [edx+ebx+3], ah
	movzx	eax, BYTE PTR [esi+8]
	mov	cl, BYTE PTR [esi+20]
	pop	edi
	mov	BYTE PTR [eax+ebx+4], cl
; Line 26838
	add	WORD PTR [esi+18], 2
	pop	ebp
; Line 26839
	mov	BYTE PTR [esi+1], 1
	pop	ebx
; Line 26840
	ret	0
_dropCell ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeFlags
_TEXT	SEGMENT
_sqlite3BtreeFlags PROC					; COMDAT
; _pCur$ = eax
; Line 28515
	mov	eax, DWORD PTR [eax+24]
; Line 28516
	test	eax, eax
	je	SHORT $LN3@sqlite3Btr@11
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR [eax+68]
	movzx	eax, BYTE PTR [ecx+edx]
; Line 28517
	ret	0
$LN3@sqlite3Btr@11:
; Line 28516
	xor	eax, eax
; Line 28517
	ret	0
_sqlite3BtreeFlags ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreePager
_TEXT	SEGMENT
_sqlite3BtreePager PROC					; COMDAT
; _p$ = eax
; Line 28525
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx]
; Line 28526
	ret	0
_sqlite3BtreePager ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeGetFilename
_TEXT	SEGMENT
_sqlite3BtreeGetFilename PROC				; COMDAT
; _p$ = eax
; Line 28966
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
; Line 28967
	ret	0
_sqlite3BtreeGetFilename ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeGetDirname
_TEXT	SEGMENT
_sqlite3BtreeGetDirname PROC				; COMDAT
; _p$ = eax
; Line 28974
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+92]
; Line 28975
	ret	0
_sqlite3BtreeGetDirname ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeGetJournalname
_TEXT	SEGMENT
_sqlite3BtreeGetJournalname PROC			; COMDAT
; _p$ = eax
; Line 28984
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+88]
; Line 28985
	ret	0
_sqlite3BtreeGetJournalname ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeIsInTrans
_TEXT	SEGMENT
_sqlite3BtreeIsInTrans PROC				; COMDAT
; _p$ = eax
; Line 29053
	test	eax, eax
	je	SHORT $LN3@sqlite3Btr@12
	cmp	BYTE PTR [eax+8], 2
	jne	SHORT $LN3@sqlite3Btr@12
	mov	eax, 1
; Line 29054
	ret	0
$LN3@sqlite3Btr@12:
; Line 29053
	xor	eax, eax
; Line 29054
	ret	0
_sqlite3BtreeIsInTrans ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeIsInStmt
_TEXT	SEGMENT
_sqlite3BtreeIsInStmt PROC				; COMDAT
; _p$ = eax
; Line 29060
	mov	eax, DWORD PTR [eax+4]
	test	eax, eax
	je	SHORT $LN3@sqlite3Btr@13
	cmp	BYTE PTR [eax+12], 0
	je	SHORT $LN3@sqlite3Btr@13
	mov	eax, 1
; Line 29061
	ret	0
$LN3@sqlite3Btr@13:
; Line 29060
	xor	eax, eax
; Line 29061
	ret	0
_sqlite3BtreeIsInStmt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeIsInReadTrans
_TEXT	SEGMENT
_sqlite3BtreeIsInReadTrans PROC				; COMDAT
; _p$ = eax
; Line 29067
	test	eax, eax
	je	SHORT $LN3@sqlite3Btr@14
	cmp	BYTE PTR [eax+8], 0
	je	SHORT $LN3@sqlite3Btr@14
	mov	eax, 1
; Line 29068
	ret	0
$LN3@sqlite3Btr@14:
; Line 29067
	xor	eax, eax
; Line 29068
	ret	0
_sqlite3BtreeIsInReadTrans ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeCacheOverflow
_TEXT	SEGMENT
_sqlite3BtreeCacheOverflow PROC				; COMDAT
; _pCur$ = eax
; Line 29169
	mov	BYTE PTR [eax+84], 1
; Line 29170
	ret	0
_sqlite3BtreeCacheOverflow ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeFifoInit
_TEXT	SEGMENT
_sqlite3VdbeFifoInit PROC				; COMDAT
; _pFifo$ = ecx
; Line 29213
	xor	eax, eax
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
; Line 29214
	ret	0
_sqlite3VdbeFifoInit ENDP
_TEXT	ENDS
EXTRN	__ftol2:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3VdbeIntegerAffinity
_TEXT	SEGMENT
_sqlite3VdbeIntegerAffinity PROC			; COMDAT
; _pMem$ = esi
; Line 29633
	fld	QWORD PTR [esi+8]
	call	__ftol2
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
; Line 29634
	fild	QWORD PTR [esi]
	fcomp	QWORD PTR [esi+8]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@sqlite3Vdb@2
; Line 29635
	or	WORD PTR [esi+24], 4
$LN1@sqlite3Vdb@2:
; Line 29637
	ret	0
_sqlite3VdbeIntegerAffinity ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemTooBig
_TEXT	SEGMENT
_sqlite3VdbeMemTooBig PROC				; COMDAT
; _p$ = ecx
; Line 29738
	movzx	edx, WORD PTR [ecx+24]
	test	dl, 18					; 00000012H
	je	SHORT $LN2@sqlite3Vdb@3
; Line 29740
	test	edx, 2048				; 00000800H
	mov	eax, DWORD PTR [ecx+20]
	je	SHORT $LN1@sqlite3Vdb@3
; Line 29741
	add	eax, DWORD PTR [ecx]
$LN1@sqlite3Vdb@3:
; Line 29743
	xor	ecx, ecx
	cmp	eax, 1000000000				; 3b9aca00H
	setg	cl
	mov	eax, ecx
; Line 29746
	ret	0
$LN2@sqlite3Vdb@3:
; Line 29745
	xor	eax, eax
; Line 29746
	ret	0
_sqlite3VdbeMemTooBig ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemShallowCopy
_TEXT	SEGMENT
_srcType$ = 8						; size = 4
_sqlite3VdbeMemShallowCopy PROC				; COMDAT
; _pTo$ = edx
; _pFrom$ = eax
; Line 29754
	push	esi
	push	edi
; Line 29755
	mov	esi, eax
	mov	ecx, 8
	mov	edi, edx
	rep movsd
; Line 29757
	movzx	eax, WORD PTR [edx+24]
	test	al, 18					; 00000012H
	pop	edi
	mov	DWORD PTR [edx+28], 0
	pop	esi
	je	SHORT $LN1@sqlite3Vdb@4
; Line 29758
	and	eax, 64575				; 0000fc3fH
; Line 29760
	or	eax, DWORD PTR _srcType$[esp-4]
	mov	WORD PTR [edx+24], ax
$LN1@sqlite3Vdb@4:
; Line 29762
	ret	0
_sqlite3VdbeMemShallowCopy ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeGetSql
_TEXT	SEGMENT
_sqlite3VdbeGetSql PROC					; COMDAT
; _p$ = eax
; Line 30338
	mov	eax, DWORD PTR [eax+588]
; Line 30339
	ret	0
_sqlite3VdbeGetSql ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeSwap
_TEXT	SEGMENT
_tmp$ = -592						; size = 592
_sqlite3VdbeSwap PROC					; COMDAT
; _pA$ = edx
; _pB$ = eax
; Line 30344
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 592				; 00000250H
	push	esi
	push	edi
; Line 30348
	mov	ecx, 148				; 00000094H
	mov	esi, edx
	lea	edi, DWORD PTR _tmp$[esp+600]
	rep movsd
; Line 30349
	mov	ecx, 148				; 00000094H
	mov	esi, eax
	mov	edi, edx
	rep movsd
; Line 30350
	mov	ecx, 148				; 00000094H
	lea	esi, DWORD PTR _tmp$[esp+600]
	mov	edi, eax
	rep movsd
; Line 30352
	mov	esi, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [edx+8], esi
; Line 30355
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [edx+4], esi
; Line 30358
	mov	esi, DWORD PTR [eax+588]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+588]
	mov	DWORD PTR [edx+588], esi
; Line 30361
	mov	esi, DWORD PTR [eax+584]
	mov	DWORD PTR [eax+588], ecx
	mov	ecx, DWORD PTR [edx+584]
	mov	DWORD PTR [edx+584], esi
; Line 30363
	pop	edi
	mov	DWORD PTR [eax+584], ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_sqlite3VdbeSwap ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeResolveLabel
_TEXT	SEGMENT
_sqlite3VdbeResolveLabel PROC				; COMDAT
; _p$ = ecx
; _x$ = edx
; Line 30492
	mov	eax, DWORD PTR [ecx+32]
	test	eax, eax
	je	SHORT $LN1@sqlite3Vdb@5
; Line 30493
	mov	ecx, DWORD PTR [ecx+12]
	lea	edx, DWORD PTR [edx*4+4]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN1@sqlite3Vdb@5:
; Line 30495
	ret	0
_sqlite3VdbeResolveLabel ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _opcodeNoPush
_TEXT	SEGMENT
_opcodeNoPush PROC					; COMDAT
; _op$ = edx
; Line 30530
	movzx	edx, dl
	mov	ecx, edx
	and	ecx, 31					; 0000001fH
	mov	eax, 1
	shl	eax, cl
	shr	edx, 5
	and	eax, DWORD PTR ?masks@?1??opcodeNoPush@@9@9[edx*4]
; Line 30531
	ret	0
_opcodeNoPush ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeCurrentAddr
_TEXT	SEGMENT
_sqlite3VdbeCurrentAddr PROC				; COMDAT
; _p$ = eax
; Line 30622
	mov	eax, DWORD PTR [eax+12]
; Line 30623
	ret	0
_sqlite3VdbeCurrentAddr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeChangeP1
_TEXT	SEGMENT
_sqlite3VdbeChangeP1 PROC				; COMDAT
; _p$ = eax
; _addr$ = ecx
; _val$ = edx
; Line 30667
	test	eax, eax
	je	SHORT $LN1@sqlite3Vdb@6
	test	ecx, ecx
	jl	SHORT $LN1@sqlite3Vdb@6
	cmp	DWORD PTR [eax+12], ecx
	jle	SHORT $LN1@sqlite3Vdb@6
	mov	eax, DWORD PTR [eax+20]
	test	eax, eax
	je	SHORT $LN1@sqlite3Vdb@6
; Line 30668
	lea	ecx, DWORD PTR [ecx+ecx*4]
	mov	DWORD PTR [eax+ecx*4+4], edx
$LN1@sqlite3Vdb@6:
; Line 30670
	ret	0
_sqlite3VdbeChangeP1 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeChangeP2
_TEXT	SEGMENT
_sqlite3VdbeChangeP2 PROC				; COMDAT
; _p$ = eax
; _addr$ = ecx
; _val$ = edx
; Line 30679
	test	eax, eax
	je	SHORT $LN1@sqlite3Vdb@7
	test	ecx, ecx
	jl	SHORT $LN1@sqlite3Vdb@7
	cmp	DWORD PTR [eax+12], ecx
	jle	SHORT $LN1@sqlite3Vdb@7
	mov	eax, DWORD PTR [eax+20]
	test	eax, eax
	je	SHORT $LN1@sqlite3Vdb@7
; Line 30680
	lea	ecx, DWORD PTR [ecx+ecx*4]
	mov	DWORD PTR [eax+ecx*4+8], edx
$LN1@sqlite3Vdb@7:
; Line 30682
	ret	0
_sqlite3VdbeChangeP2 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeJumpHere
_TEXT	SEGMENT
_sqlite3VdbeJumpHere PROC				; COMDAT
; _p$ = ecx
; _addr$ = eax
; Line 30689
	test	ecx, ecx
	je	SHORT $LN3@sqlite3Vdb@8
	test	eax, eax
	jl	SHORT $LN3@sqlite3Vdb@8
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, eax
	jle	SHORT $LN3@sqlite3Vdb@8
	mov	ecx, DWORD PTR [ecx+20]
	test	ecx, ecx
	je	SHORT $LN3@sqlite3Vdb@8
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN3@sqlite3Vdb@8:
; Line 30690
	ret	0
_sqlite3VdbeJumpHere ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeGetOp
_TEXT	SEGMENT
_sqlite3VdbeGetOp PROC					; COMDAT
; _p$ = ecx
; _addr$ = eax
; Line 30852
	test	eax, eax
	jl	SHORT $LN3@sqlite3Vdb@9
	cmp	eax, DWORD PTR [ecx+12]
	jge	SHORT $LN3@sqlite3Vdb@9
	mov	ecx, DWORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]
; Line 30853
	ret	0
$LN3@sqlite3Vdb@9:
; Line 30852
	xor	eax, eax
; Line 30853
	ret	0
_sqlite3VdbeGetOp ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeResetStepResult
_TEXT	SEGMENT
_sqlite3VdbeResetStepResult PROC			; COMDAT
; _p$ = eax
; Line 31788
	mov	DWORD PTR [eax+124], 0
; Line 31789
	ret	0
_sqlite3VdbeResetStepResult ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeDeleteAuxData
_TEXT	SEGMENT
_mask$ = 8						; size = 4
_sqlite3VdbeDeleteAuxData PROC				; COMDAT
; _pVdbeFunc$ = ebx
; Line 31896
	push	ebp
	mov	ebp, DWORD PTR _mask$[esp]
	push	esi
; Line 31898
	xor	esi, esi
	cmp	DWORD PTR [ebx+4], esi
	jle	SHORT $LN4@sqlite3Vdb@10
	push	edi
	lea	edi, DWORD PTR [ebx+8]
$LL6@sqlite3Vdb@10:
; Line 31900
	cmp	esi, 31					; 0000001fH
	jg	SHORT $LN11@sqlite3Vdb@10
	mov	eax, 1
	mov	ecx, esi
	shl	eax, cl
	test	eax, ebp
	jne	SHORT $LN5@sqlite3Vdb@10
$LN11@sqlite3Vdb@10:
	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	SHORT $LN5@sqlite3Vdb@10
; Line 31901
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN1@sqlite3Vdb@10
; Line 31902
	push	ecx
	call	eax
	add	esp, 4
$LN1@sqlite3Vdb@10:
; Line 31904
	mov	DWORD PTR [edi], 0
$LN5@sqlite3Vdb@10:
; Line 31898
	add	esi, 1
	add	edi, 8
	cmp	esi, DWORD PTR [ebx+4]
	jl	SHORT $LL6@sqlite3Vdb@10
	pop	edi
$LN4@sqlite3Vdb@10:
	pop	esi
	pop	ebp
; Line 31907
	ret	0
_sqlite3VdbeDeleteAuxData ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeSerialType
_TEXT	SEGMENT
_file_format$ = 8					; size = 4
_sqlite3VdbeSerialType PROC				; COMDAT
; _pMem$ = ecx
; Line 32018
	movzx	eax, WORD PTR [ecx+24]
; Line 32021
	test	al, 1
	je	SHORT $LN10@sqlite3Vdb@11
; Line 32022
	xor	eax, eax
; Line 32050
	ret	0
$LN10@sqlite3Vdb@11:
; Line 32024
	test	al, 4
	je	$LN9@sqlite3Vdb@11
; Line 32029
	cmp	DWORD PTR _file_format$[esp-4], 4
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	push	esi
	jl	SHORT $LN8@sqlite3Vdb@11
	mov	edx, eax
	and	edx, 1
	xor	esi, esi
	cmp	edx, eax
	jne	SHORT $LN8@sqlite3Vdb@11
	cmp	esi, ecx
	jne	SHORT $LN8@sqlite3Vdb@11
; Line 32030
	add	eax, 8
	pop	esi
; Line 32050
	ret	0
$LN8@sqlite3Vdb@11:
; Line 32032
	test	ecx, ecx
	jg	SHORT $LN22@sqlite3Vdb@11
	jl	SHORT $LN15@sqlite3Vdb@11
	test	eax, eax
	jae	SHORT $LN13@sqlite3Vdb@11
$LN15@sqlite3Vdb@11:
	neg	eax
	adc	ecx, 0
	neg	ecx
$LN13@sqlite3Vdb@11:
; Line 32033
	test	ecx, ecx
$LN22@sqlite3Vdb@11:
	ja	SHORT $LN7@sqlite3Vdb@11
	jb	SHORT $LN16@sqlite3Vdb@11
	cmp	eax, 127				; 0000007fH
	ja	SHORT $LN7@sqlite3Vdb@11
$LN16@sqlite3Vdb@11:
	mov	eax, 1
	pop	esi
; Line 32050
	ret	0
$LN7@sqlite3Vdb@11:
; Line 32034
	test	ecx, ecx
	ja	SHORT $LN4@sqlite3Vdb@11
	jb	SHORT $LN17@sqlite3Vdb@11
	cmp	eax, 32767				; 00007fffH
	ja	SHORT $LN6@sqlite3Vdb@11
$LN17@sqlite3Vdb@11:
	mov	eax, 2
	pop	esi
; Line 32050
	ret	0
$LN6@sqlite3Vdb@11:
; Line 32035
	test	ecx, ecx
	ja	SHORT $LN4@sqlite3Vdb@11
	jb	SHORT $LN18@sqlite3Vdb@11
	cmp	eax, 8388607				; 007fffffH
	ja	SHORT $LN5@sqlite3Vdb@11
$LN18@sqlite3Vdb@11:
	mov	eax, 3
	pop	esi
; Line 32050
	ret	0
$LN5@sqlite3Vdb@11:
; Line 32036
	test	ecx, ecx
	ja	SHORT $LN4@sqlite3Vdb@11
	jb	SHORT $LN19@sqlite3Vdb@11
	cmp	eax, 2147483647				; 7fffffffH
	ja	SHORT $LN4@sqlite3Vdb@11
$LN19@sqlite3Vdb@11:
	mov	eax, 4
	pop	esi
; Line 32050
	ret	0
$LN4@sqlite3Vdb@11:
; Line 32037
	cmp	ecx, 4095				; 00000fffH
	ja	SHORT $LN3@sqlite3Vdb@11
	jb	SHORT $LN20@sqlite3Vdb@11
	cmp	eax, -1
	ja	SHORT $LN3@sqlite3Vdb@11
$LN20@sqlite3Vdb@11:
	mov	eax, 5
	pop	esi
; Line 32050
	ret	0
$LN3@sqlite3Vdb@11:
; Line 32038
	mov	eax, 6
	pop	esi
; Line 32050
	ret	0
$LN9@sqlite3Vdb@11:
; Line 32040
	test	al, 8
	je	SHORT $LN2@sqlite3Vdb@11
; Line 32041
	mov	eax, 7
; Line 32050
	ret	0
$LN2@sqlite3Vdb@11:
; Line 32045
	test	eax, 2048				; 00000800H
	mov	edx, DWORD PTR [ecx+20]
	je	SHORT $LN1@sqlite3Vdb@11
; Line 32046
	add	edx, DWORD PTR [ecx]
$LN1@sqlite3Vdb@11:
; Line 32049
	shr	eax, 1
	and	eax, 1
	lea	eax, DWORD PTR [eax+edx*2+12]
; Line 32050
	ret	0
_sqlite3VdbeSerialType ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeSerialTypeLen
_TEXT	SEGMENT
_sqlite3VdbeSerialTypeLen PROC				; COMDAT
; _serial_type$ = eax
; Line 32056
	cmp	eax, 12					; 0000000cH
	jb	SHORT $LN2@sqlite3Vdb@12
; Line 32057
	add	eax, -12				; fffffff4H
	shr	eax, 1
; Line 32062
	ret	0
$LN2@sqlite3Vdb@12:
; Line 32060
	movzx	eax, BYTE PTR ?aSize@?3??sqlite3VdbeSerialTypeLen@@9@9[eax]
; Line 32062
	ret	0
_sqlite3VdbeSerialTypeLen ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeSerialPut
_TEXT	SEGMENT
_nBuf$ = 8						; size = 4
_sqlite3VdbeSerialPut PROC				; COMDAT
; _buf$ = ebx
; _pMem$ = ecx
; _file_format$ = eax
; Line 32122
	push	ebp
	mov	ebp, DWORD PTR _nBuf$[esp]
	push	esi
; Line 32123
	push	eax
	mov	esi, ecx
	call	_sqlite3VdbeSerialType
; Line 32127
	lea	ecx, DWORD PTR [eax-1]
	add	esp, 4
	cmp	ecx, 6
	ja	SHORT $LN8@sqlite3Vdb@13
; Line 32130
	cmp	eax, 7
	jne	SHORT $LN7@sqlite3Vdb@13
; Line 32133
	mov	edx, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi+12]
; Line 32137
$LN12@sqlite3Vdb@13:
	movzx	ecx, BYTE PTR ?aSize@?3??sqlite3VdbeSerialTypeLen@@9@9[eax]
$LN11@sqlite3Vdb@13:
; Line 32139
	test	ecx, ecx
	mov	eax, ecx
	je	SHORT $LN9@sqlite3Vdb@13
$LL5@sqlite3Vdb@13:
	sub	ecx, 1
; Line 32140
	mov	BYTE PTR [ecx+ebx], dl
; Line 32141
	shrd	edx, esi, 8
	shr	esi, 8
	test	ecx, ecx
	jne	SHORT $LL5@sqlite3Vdb@13
	pop	esi
	pop	ebp
; Line 32165
	ret	0
$LN7@sqlite3Vdb@13:
; Line 32137
	cmp	eax, 12					; 0000000cH
	mov	edx, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+4]
	jb	SHORT $LN12@sqlite3Vdb@13
	lea	ecx, DWORD PTR [eax-12]
	shr	ecx, 1
	jmp	SHORT $LN11@sqlite3Vdb@13
$LN8@sqlite3Vdb@13:
; Line 32147
	cmp	eax, 12					; 0000000cH
	jb	SHORT $LN3@sqlite3Vdb@13
; Line 32152
	mov	edx, DWORD PTR [esi+16]
	push	edi
	mov	edi, DWORD PTR [esi+20]
	push	edi
	push	edx
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 32153
	test	WORD PTR [esi+24], 2048			; 00000800H
	je	SHORT $LN2@sqlite3Vdb@13
; Line 32154
	add	edi, DWORD PTR [esi]
; Line 32155
	cmp	edi, ebp
	jle	SHORT $LN1@sqlite3Vdb@13
; Line 32156
	mov	edi, ebp
$LN1@sqlite3Vdb@13:
; Line 32158
	mov	esi, DWORD PTR [esi+20]
	mov	eax, edi
	sub	eax, esi
	push	eax
	push	0
	add	esi, ebx
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN2@sqlite3Vdb@13:
; Line 32160
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
; Line 32165
	ret	0
$LN3@sqlite3Vdb@13:
; Line 32164
	xor	eax, eax
$LN9@sqlite3Vdb@13:
	pop	esi
	pop	ebp
; Line 32165
	ret	0
_sqlite3VdbeSerialPut ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeSerialGet
_TEXT	SEGMENT
_sqlite3VdbeSerialGet PROC				; COMDAT
; _buf$ = ecx
; _serial_type$ = eax
; _pMem$ = esi
; Line 32175
	push	ebx
	mov	ebx, eax
; Line 32176
	cmp	ebx, 11					; 0000000bH
	push	edi
	ja	$LN3@sqlite3Vdb@14
	jmp	DWORD PTR $LN18@sqlite3Vdb@14[ebx*4]
$LN13@sqlite3Vdb@14:
	pop	edi
; Line 32180
	mov	WORD PTR [esi+24], 1
; Line 32261
	xor	eax, eax
	pop	ebx
; Line 32262
	ret	0
$LN12@sqlite3Vdb@14:
; Line 32184
	movsx	eax, BYTE PTR [ecx]
	cdq
	pop	edi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
; Line 32185
	mov	WORD PTR [esi+24], 4
; Line 32186
	mov	eax, 1
	pop	ebx
; Line 32262
	ret	0
$LN11@sqlite3Vdb@14:
; Line 32189
	movsx	eax, BYTE PTR [ecx]
	movzx	ecx, BYTE PTR [ecx+1]
	shl	eax, 8
	or	eax, ecx
	cdq
	pop	edi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
; Line 32190
	mov	WORD PTR [esi+24], 4
; Line 32191
	mov	eax, 2
	pop	ebx
; Line 32262
	ret	0
$LN10@sqlite3Vdb@14:
; Line 32194
	movsx	eax, BYTE PTR [ecx]
	movzx	edx, BYTE PTR [ecx+1]
	movzx	ecx, BYTE PTR [ecx+2]
	shl	eax, 8
	or	eax, edx
	shl	eax, 8
	or	eax, ecx
	cdq
	pop	edi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
; Line 32195
	mov	WORD PTR [esi+24], 4
; Line 32196
	mov	eax, 3
	pop	ebx
; Line 32262
	ret	0
$LN9@sqlite3Vdb@14:
; Line 32199
	movzx	edx, BYTE PTR [ecx+2]
	xor	eax, eax
	mov	ah, BYTE PTR [ecx]
	pop	edi
	pop	ebx
	mov	al, BYTE PTR [ecx+1]
	movzx	ecx, BYTE PTR [ecx+3]
	shl	eax, 8
	or	eax, edx
	shl	eax, 8
	or	eax, ecx
	cdq
	mov	DWORD PTR [esi], eax
; Line 32200
	mov	eax, 4
	mov	DWORD PTR [esi+4], edx
	mov	WORD PTR [esi+24], ax
; Line 32262
	ret	0
$LN8@sqlite3Vdb@14:
; Line 32207
	movzx	eax, BYTE PTR [ecx+4]
	xor	edx, edx
	mov	dh, BYTE PTR [ecx+2]
	xor	ebx, ebx
	mov	dl, BYTE PTR [ecx+3]
	shl	edx, 8
	or	edx, eax
	movzx	eax, BYTE PTR [ecx+5]
	shl	edx, 8
	or	edx, eax
	movsx	eax, BYTE PTR [ecx]
	movzx	ecx, BYTE PTR [ecx+1]
	shl	eax, 8
	or	eax, ecx
	mov	edi, edx
	cdq
	xor	edx, edx
	or	edi, edx
	or	ebx, eax
	mov	DWORD PTR [esi], edi
	pop	edi
	mov	DWORD PTR [esi+4], ebx
; Line 32208
	mov	WORD PTR [esi+24], 4
; Line 32209
	lea	eax, DWORD PTR [edx+6]
	pop	ebx
; Line 32262
	ret	0
$LN7@sqlite3Vdb@14:
; Line 32230
	movzx	edx, BYTE PTR [ecx+2]
	xor	eax, eax
	mov	ah, BYTE PTR [ecx]
	push	ebp
	xor	edi, edi
	mov	al, BYTE PTR [ecx+1]
	shl	eax, 8
	or	eax, edx
	movzx	edx, BYTE PTR [ecx+3]
	shl	eax, 8
	or	eax, edx
	cdq
	movzx	edx, BYTE PTR [ecx+6]
	mov	ebp, eax
	xor	eax, eax
	mov	ah, BYTE PTR [ecx+4]
	mov	al, BYTE PTR [ecx+5]
	movzx	ecx, BYTE PTR [ecx+7]
	shl	eax, 8
	or	eax, edx
	shl	eax, 8
	or	eax, ecx
	xor	edx, edx
	or	edi, eax
	or	ebp, edx
; Line 32231
	cmp	ebx, 6
	lea	eax, DWORD PTR [edx+8]
	jne	SHORT $LN6@sqlite3Vdb@14
; Line 32232
	mov	DWORD PTR [esi+4], ebp
	pop	ebp
	mov	DWORD PTR [esi], edi
	pop	edi
; Line 32233
	mov	WORD PTR [esi+24], 4
	pop	ebx
; Line 32262
	ret	0
$LN6@sqlite3Vdb@14:
; Line 32236
	mov	DWORD PTR [esi+12], ebp
	pop	ebp
	mov	DWORD PTR [esi+8], edi
	pop	edi
; Line 32238
	mov	WORD PTR [esi+24], ax
	pop	ebx
; Line 32262
	ret	0
$LN4@sqlite3Vdb@14:
; Line 32244
	add	ebx, -8					; fffffff8H
	pop	edi
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], 0
; Line 32245
	mov	WORD PTR [esi+24], 4
; Line 32246
	xor	eax, eax
	pop	ebx
; Line 32262
	ret	0
$LN3@sqlite3Vdb@14:
; Line 32249
	lea	eax, DWORD PTR [ebx-12]
; Line 32253
	and	bl, 1
	shr	eax, 1
	neg	bl
	pop	edi
	mov	DWORD PTR [esi+16], ecx
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [esi+28], 0
	sbb	ebx, ebx
	and	ebx, -14				; fffffff2H
	add	ebx, 272				; 00000110H
	mov	WORD PTR [esi+24], bx
	pop	ebx
; Line 32262
	ret	0
$LN18@sqlite3Vdb@14:
	DD	$LN13@sqlite3Vdb@14
	DD	$LN12@sqlite3Vdb@14
	DD	$LN11@sqlite3Vdb@14
	DD	$LN10@sqlite3Vdb@14
	DD	$LN9@sqlite3Vdb@14
	DD	$LN8@sqlite3Vdb@14
	DD	$LN7@sqlite3Vdb@14
	DD	$LN7@sqlite3Vdb@14
	DD	$LN4@sqlite3Vdb@14
	DD	$LN4@sqlite3Vdb@14
	DD	$LN13@sqlite3Vdb@14
	DD	$LN13@sqlite3Vdb@14
_sqlite3VdbeSerialGet ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeIdxRowidLen
_TEXT	SEGMENT
_typeRowid$ = -4					; size = 4
_szHdr$ = -4						; size = 4
_sqlite3VdbeIdxRowidLen PROC				; COMDAT
; _aKey$ = eax
; Line 32365
	push	ecx
	push	edi
	mov	edi, eax
; Line 32369
	lea	eax, DWORD PTR _szHdr$[esp+8]
	push	eax
	call	_sqlite3GetVarint32
; Line 32370
	mov	edx, DWORD PTR _szHdr$[esp+12]
	lea	ecx, DWORD PTR _typeRowid$[esp+12]
	push	ecx
	lea	edi, DWORD PTR [edx+edi-1]
	call	_sqlite3GetVarint32
; Line 32371
	mov	eax, DWORD PTR _typeRowid$[esp+16]
	add	esp, 8
	cmp	eax, 12					; 0000000cH
	pop	edi
	jb	SHORT $LN4@sqlite3Vdb@15
	add	eax, -12				; fffffff4H
	shr	eax, 1
; Line 32372
	pop	ecx
	ret	0
; Line 32371
$LN4@sqlite3Vdb@15:
	movzx	eax, BYTE PTR ?aSize@?3??sqlite3VdbeSerialTypeLen@@9@9[eax]
; Line 32372
	pop	ecx
	ret	0
_sqlite3VdbeIdxRowidLen ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeSetChanges
_TEXT	SEGMENT
_sqlite3VdbeSetChanges PROC				; COMDAT
; _db$ = eax
; _nChange$ = ecx
; Line 32447
	add	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+52], ecx
; Line 32448
	ret	0
_sqlite3VdbeSetChanges ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeCountChanges
_TEXT	SEGMENT
_sqlite3VdbeCountChanges PROC				; COMDAT
; _v$ = eax
; Line 32455
	mov	BYTE PTR [eax+562], 1
; Line 32456
	ret	0
_sqlite3VdbeCountChanges ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExpirePreparedStatements
_TEXT	SEGMENT
_sqlite3ExpirePreparedStatements PROC			; COMDAT
; _db$ = eax
; Line 32470
	mov	eax, DWORD PTR [eax+80]
	test	eax, eax
	je	SHORT $LN1@sqlite3Exp
	mov	cl, 1
	npad	7
$LL3@sqlite3Exp:
; Line 32471
	mov	BYTE PTR [eax+564], cl
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	jne	SHORT $LL3@sqlite3Exp
$LN1@sqlite3Exp:
; Line 32473
	ret	0
_sqlite3ExpirePreparedStatements ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeDb
_TEXT	SEGMENT
_sqlite3VdbeDb PROC					; COMDAT
; _v$ = eax
; Line 32479
	mov	eax, DWORD PTR [eax]
; Line 32480
	ret	0
_sqlite3VdbeDb ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_expired
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_sqlite3_expired PROC					; COMDAT
; Line 32510
	mov	eax, DWORD PTR _pStmt$[esp-4]
	test	eax, eax
	je	SHORT $LN3@sqlite3_ex
	cmp	BYTE PTR [eax+564], 0
	jne	SHORT $LN3@sqlite3_ex
	xor	eax, eax
; Line 32511
	ret	0
$LN3@sqlite3_ex:
; Line 32510
	mov	eax, 1
; Line 32511
	ret	0
_sqlite3_expired ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_type
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_type PROC				; COMDAT
; Line 32558
	mov	eax, DWORD PTR _pVal$[esp-4]
	movzx	eax, BYTE PTR [eax+26]
; Line 32559
	ret	0
_sqlite3_value_type ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_user_data
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3_user_data PROC					; COMDAT
; Line 32796
	mov	eax, DWORD PTR _p$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+8]
; Line 32797
	ret	0
_sqlite3_user_data ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_get_auxdata
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_iArg$ = 12						; size = 4
_sqlite3_get_auxdata PROC				; COMDAT
; Line 32852
	mov	eax, DWORD PTR _pCtx$[esp-4]
	mov	eax, DWORD PTR [eax+4]
; Line 32853
	test	eax, eax
	je	SHORT $LN1@sqlite3_ge
	mov	ecx, DWORD PTR _iArg$[esp-4]
	cmp	ecx, DWORD PTR [eax+4]
	jge	SHORT $LN1@sqlite3_ge
	test	ecx, ecx
	jl	SHORT $LN1@sqlite3_ge
; Line 32856
	mov	eax, DWORD PTR [eax+ecx*8+8]
; Line 32857
	ret	0
$LN1@sqlite3_ge:
; Line 32854
	xor	eax, eax
; Line 32857
	ret	0
_sqlite3_get_auxdata ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_aggregate_count
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3_aggregate_count PROC				; COMDAT
; Line 32905
	mov	eax, DWORD PTR _p$[esp-4]
	mov	ecx, DWORD PTR [eax+72]
	mov	eax, DWORD PTR [ecx+20]
; Line 32906
	ret	0
_sqlite3_aggregate_count ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_count
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_sqlite3_column_count PROC				; COMDAT
; Line 32913
	mov	eax, DWORD PTR _pStmt$[esp-4]
	test	eax, eax
	je	SHORT $LN3@sqlite3_co
	mov	eax, DWORD PTR [eax+544]
; Line 32914
	ret	0
$LN3@sqlite3_co:
; Line 32913
	xor	eax, eax
; Line 32914
	ret	0
_sqlite3_column_count ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_data_count
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_sqlite3_data_count PROC				; COMDAT
; Line 32922
	mov	eax, DWORD PTR _pStmt$[esp-4]
	test	eax, eax
	je	SHORT $LN1@sqlite3_da
	cmp	BYTE PTR [eax+560], 0
	je	SHORT $LN1@sqlite3_da
; Line 32923
	mov	eax, DWORD PTR [eax+544]
; Line 32924
	ret	0
$LN1@sqlite3_da:
; Line 32922
	xor	eax, eax
; Line 32924
	ret	0
_sqlite3_data_count ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_parameter_count
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_sqlite3_bind_parameter_count PROC			; COMDAT
; Line 33300
	mov	eax, DWORD PTR _pStmt$[esp-4]
	test	eax, eax
	je	SHORT $LN3@sqlite3_bi
	mov	eax, DWORD PTR [eax+60]
; Line 33301
	ret	0
$LN3@sqlite3_bi:
; Line 33300
	xor	eax, eax
; Line 33301
	ret	0
_sqlite3_bind_parameter_count ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _createVarMap
_TEXT	SEGMENT
_createVarMap PROC					; COMDAT
; _p$ = ecx
; Line 33309
	cmp	DWORD PTR [ecx+72], 0
	jne	SHORT $LN5@createVarM
; Line 33312
	mov	eax, DWORD PTR [ecx+20]
	xor	edx, edx
	cmp	DWORD PTR [ecx+12], edx
	jle	SHORT $LN2@createVarM
	push	ebx
	push	esi
	push	edi
$LL4@createVarM:
; Line 33313
	cmp	BYTE PTR [eax], 25			; 00000019H
	jne	SHORT $LN3@createVarM
; Line 33315
	mov	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [ecx+68]
	mov	ebx, DWORD PTR [eax+12]
	mov	DWORD PTR [edi+esi*4-4], ebx
$LN3@createVarM:
	add	edx, 1
	add	eax, 20					; 00000014H
	cmp	edx, DWORD PTR [ecx+12]
	jl	SHORT $LL4@createVarM
	pop	edi
	pop	esi
	pop	ebx
$LN2@createVarM:
; Line 33318
	mov	DWORD PTR [ecx+72], 1
$LN5@createVarM:
; Line 33320
	ret	0
_createVarMap ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_parameter_name
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_bind_parameter_name PROC			; COMDAT
; Line 33330
	mov	ecx, DWORD PTR _pStmt$[esp-4]
	test	ecx, ecx
	push	esi
	je	SHORT $LN1@sqlite3_bi@2
	mov	esi, DWORD PTR _i$[esp]
	cmp	esi, 1
	jl	SHORT $LN1@sqlite3_bi@2
	cmp	esi, DWORD PTR [ecx+60]
	jg	SHORT $LN1@sqlite3_bi@2
; Line 33333
	call	_createVarMap
; Line 33334
	mov	eax, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR [eax+esi*4-4]
	pop	esi
; Line 33335
	ret	0
$LN1@sqlite3_bi@2:
; Line 33331
	xor	eax, eax
	pop	esi
; Line 33335
	ret	0
_sqlite3_bind_parameter_name ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_parameter_index
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_zName$ = 12						; size = 4
_sqlite3_bind_parameter_index PROC			; COMDAT
; Line 33345
	mov	ecx, DWORD PTR _pStmt$[esp-4]
	test	ecx, ecx
	jne	SHORT $LN6@sqlite3_bi@3
; Line 33346
	xor	eax, eax
; Line 33358
	ret	0
$LN6@sqlite3_bi@3:
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 33348
	call	_createVarMap
; Line 33349
	mov	ebp, DWORD PTR _zName$[esp+12]
	test	ebp, ebp
	je	SHORT $LN2@sqlite3_bi@3
	mov	ebx, DWORD PTR [ecx+60]
; Line 33350
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN2@sqlite3_bi@3
	mov	edi, DWORD PTR [ecx+68]
$LL4@sqlite3_bi@3:
; Line 33351
	mov	eax, DWORD PTR [edi]
; Line 33352
	test	eax, eax
	je	SHORT $LN3@sqlite3_bi@3
	mov	ecx, ebp
$LL12@sqlite3_bi@3:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN13@sqlite3_bi@3
	test	dl, dl
	je	SHORT $LN14@sqlite3_bi@3
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN13@sqlite3_bi@3
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL12@sqlite3_bi@3
$LN14@sqlite3_bi@3:
	xor	eax, eax
	jmp	SHORT $LN15@sqlite3_bi@3
$LN13@sqlite3_bi@3:
	sbb	eax, eax
	sbb	eax, -1
$LN15@sqlite3_bi@3:
	test	eax, eax
	je	SHORT $LN10@sqlite3_bi@3
$LN3@sqlite3_bi@3:
; Line 33350
	add	esi, 1
	add	edi, 4
	cmp	esi, ebx
	jl	SHORT $LL4@sqlite3_bi@3
$LN2@sqlite3_bi@3:
	pop	edi
	pop	esi
	pop	ebp
; Line 33357
	xor	eax, eax
	pop	ebx
; Line 33358
	ret	0
$LN10@sqlite3_bi@3:
	pop	edi
; Line 33353
	lea	eax, DWORD PTR [esi+1]
	pop	esi
	pop	ebp
	pop	ebx
; Line 33358
	ret	0
_sqlite3_bind_parameter_index ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_db_handle
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_sqlite3_db_handle PROC					; COMDAT
; Line 33392
	mov	eax, DWORD PTR _pStmt$[esp-4]
	test	eax, eax
	je	SHORT $LN3@sqlite3_db
	mov	eax, DWORD PTR [eax]
; Line 33393
	ret	0
$LN3@sqlite3_db:
; Line 33392
	xor	eax, eax
; Line 33393
	ret	0
_sqlite3_db_handle ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT __storeTypeInfo
_TEXT	SEGMENT
__storeTypeInfo PROC					; COMDAT
; _pMem$ = ecx
; Line 33560
	movzx	eax, WORD PTR [ecx+24]
; Line 33561
	test	al, 1
	je	SHORT $LN8@storeTypeI
; Line 33562
	mov	BYTE PTR [ecx+26], 5
; Line 33575
	ret	0
$LN8@storeTypeI:
; Line 33564
	test	al, 4
	je	SHORT $LN6@storeTypeI
; Line 33565
	mov	BYTE PTR [ecx+26], 1
; Line 33575
	ret	0
$LN6@storeTypeI:
; Line 33567
	test	al, 8
	je	SHORT $LN4@storeTypeI
; Line 33568
	mov	BYTE PTR [ecx+26], 2
; Line 33575
	ret	0
$LN4@storeTypeI:
; Line 33570
	and	al, 2
	neg	al
	sbb	al, al
	add	eax, 4
	mov	BYTE PTR [ecx+26], al
; Line 33575
	ret	0
__storeTypeInfo ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_blob_bytes
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_blob_bytes
_TEXT	SEGMENT
_pBlob$ = 8						; size = 4
_sqlite3_blob_bytes PROC				; COMDAT
; Line 38877
	mov	eax, DWORD PTR _pBlob$[esp-4]
	mov	eax, DWORD PTR [eax+4]
; Line 38878
	ret	0
_sqlite3_blob_bytes ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprSpan
_TEXT	SEGMENT
_sqlite3ExprSpan PROC					; COMDAT
; _pExpr$ = eax
; _pLeft$ = esi
; _pRight$ = ecx
; Line 39204
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN3@sqlite3Exp@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN1@sqlite3Exp@2
$LN3@sqlite3Exp@2:
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@sqlite3Exp@2
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	SHORT $LN1@sqlite3Exp@2
; Line 39206
	test	BYTE PTR [esi+4], 1
	jne	SHORT $LN2@sqlite3Exp@2
	test	BYTE PTR [ecx+4], 1
	jne	SHORT $LN2@sqlite3Exp@2
; Line 39207
	mov	DWORD PTR [eax+28], edx
; Line 39208
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR [esi]
	and	ecx, -2					; fffffffeH
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, 1
	xor	edx, ecx
	mov	DWORD PTR [eax+32], edx
; Line 39213
	ret	0
$LN2@sqlite3Exp@2:
; Line 39210
	mov	DWORD PTR [eax+28], 0
$LN1@sqlite3Exp@2:
; Line 39213
	ret	0
_sqlite3ExprSpan ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _heightOfExpr
_TEXT	SEGMENT
_heightOfExpr PROC					; COMDAT
; _p$ = eax
; _pnHeight$ = ecx
; Line 39573
	test	eax, eax
	je	SHORT $LN1@heightOfEx
; Line 39574
	mov	eax, DWORD PTR [eax+68]
	cmp	eax, DWORD PTR [ecx]
	jle	SHORT $LN1@heightOfEx
; Line 39575
	mov	DWORD PTR [ecx], eax
$LN1@heightOfEx:
; Line 39578
	ret	0
_heightOfExpr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _heightOfExprList
_TEXT	SEGMENT
_heightOfExprList PROC					; COMDAT
; _p$ = ecx
; _pnHeight$ = edi
; Line 39580
	test	ecx, ecx
	je	SHORT $LN1@heightOfEx@2
	push	esi
; Line 39582
	xor	esi, esi
	cmp	DWORD PTR [ecx], esi
	jle	SHORT $LN13@heightOfEx@2
	xor	edx, edx
	npad	3
$LL3@heightOfEx@2:
; Line 39583
	mov	eax, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+eax]
	test	eax, eax
	je	SHORT $LN2@heightOfEx@2
	mov	eax, DWORD PTR [eax+68]
	cmp	eax, DWORD PTR [edi]
	jle	SHORT $LN2@heightOfEx@2
	mov	DWORD PTR [edi], eax
$LN2@heightOfEx@2:
; Line 39582
	add	esi, 1
	add	edx, 12					; 0000000cH
	cmp	esi, DWORD PTR [ecx]
	jl	SHORT $LL3@heightOfEx@2
$LN13@heightOfEx@2:
	pop	esi
$LN1@heightOfEx@2:
; Line 39586
	ret	0
_heightOfExprList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _heightOfSelect
_TEXT	SEGMENT
_heightOfSelect PROC					; COMDAT
; _p$ = ecx
; _pnHeight$ = eax
; Line 39587
	push	esi
	mov	esi, ecx
; Line 39588
	test	esi, esi
	push	edi
	mov	edi, eax
	je	SHORT $LN1@heightOfSe
	npad	6
$LL20@heightOfSe:
; Line 39589
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN4@heightOfSe
	mov	eax, DWORD PTR [eax+68]
	cmp	eax, DWORD PTR [edi]
	jle	SHORT $LN4@heightOfSe
	mov	DWORD PTR [edi], eax
$LN4@heightOfSe:
; Line 39590
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN8@heightOfSe
	mov	eax, DWORD PTR [eax+68]
	cmp	eax, DWORD PTR [edi]
	jle	SHORT $LN8@heightOfSe
	mov	DWORD PTR [edi], eax
$LN8@heightOfSe:
; Line 39591
	mov	eax, DWORD PTR [esi+40]
	test	eax, eax
	je	SHORT $LN12@heightOfSe
	mov	eax, DWORD PTR [eax+68]
	cmp	eax, DWORD PTR [edi]
	jle	SHORT $LN12@heightOfSe
	mov	DWORD PTR [edi], eax
$LN12@heightOfSe:
; Line 39592
	mov	eax, DWORD PTR [esi+44]
	test	eax, eax
	je	SHORT $LN16@heightOfSe
	mov	eax, DWORD PTR [eax+68]
	cmp	eax, DWORD PTR [edi]
	jle	SHORT $LN16@heightOfSe
	mov	DWORD PTR [edi], eax
$LN16@heightOfSe:
; Line 39593
	mov	ecx, DWORD PTR [esi]
	call	_heightOfExprList
; Line 39594
	mov	ecx, DWORD PTR [esi+20]
	call	_heightOfExprList
; Line 39595
	mov	ecx, DWORD PTR [esi+28]
	call	_heightOfExprList
; Line 39596
	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	jne	SHORT $LL20@heightOfSe
$LN1@heightOfSe:
	pop	edi
	pop	esi
; Line 39598
	ret	0
_heightOfSelect ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprSetHeight
_TEXT	SEGMENT
_nHeight$ = -4						; size = 4
_sqlite3ExprSetHeight PROC				; COMDAT
; _p$ = ebx
; Line 39607
	push	ecx
; Line 39609
	mov	eax, DWORD PTR [ebx+8]
	push	edi
	xor	edi, edi
	test	eax, eax
	mov	DWORD PTR _nHeight$[esp+8], edi
	je	SHORT $LN3@sqlite3Exp@3
	mov	eax, DWORD PTR [eax+68]
	test	eax, eax
	jle	SHORT $LN3@sqlite3Exp@3
	mov	edi, eax
	mov	DWORD PTR _nHeight$[esp+8], edi
$LN3@sqlite3Exp@3:
; Line 39610
	mov	eax, DWORD PTR [ebx+12]
	test	eax, eax
	je	SHORT $LN7@sqlite3Exp@3
	mov	eax, DWORD PTR [eax+68]
	cmp	eax, edi
	jle	SHORT $LN7@sqlite3Exp@3
	mov	edi, eax
	mov	DWORD PTR _nHeight$[esp+8], edi
$LN7@sqlite3Exp@3:
; Line 39611
	mov	ecx, DWORD PTR [ebx+16]
	test	ecx, ecx
	je	SHORT $LN11@sqlite3Exp@3
	push	esi
	xor	esi, esi
	cmp	DWORD PTR [ecx], esi
	jle	SHORT $LN23@sqlite3Exp@3
	xor	edx, edx
$LL13@sqlite3Exp@3:
	mov	eax, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+eax]
	test	eax, eax
	je	SHORT $LN12@sqlite3Exp@3
	mov	eax, DWORD PTR [eax+68]
	cmp	eax, edi
	jle	SHORT $LN12@sqlite3Exp@3
	mov	edi, eax
	mov	DWORD PTR _nHeight$[esp+12], edi
$LN12@sqlite3Exp@3:
	add	esi, 1
	add	edx, 12					; 0000000cH
	cmp	esi, DWORD PTR [ecx]
	jl	SHORT $LL13@sqlite3Exp@3
$LN23@sqlite3Exp@3:
	pop	esi
$LN11@sqlite3Exp@3:
; Line 39612
	mov	ecx, DWORD PTR [ebx+56]
	lea	eax, DWORD PTR _nHeight$[esp+8]
	call	_heightOfSelect
; Line 39613
	mov	ecx, DWORD PTR _nHeight$[esp+8]
	add	ecx, 1
	mov	DWORD PTR [ebx+68], ecx
	pop	edi
; Line 39614
	pop	ecx
	ret	0
_sqlite3ExprSetHeight ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SelectExprHeight
_TEXT	SEGMENT
_nHeight$ = -4						; size = 4
_sqlite3SelectExprHeight PROC				; COMDAT
; _p$ = ecx
; Line 39620
	push	ecx
; Line 39622
	lea	eax, DWORD PTR _nHeight$[esp+4]
	mov	DWORD PTR _nHeight$[esp+4], 0
	call	_heightOfSelect
; Line 39623
	mov	eax, DWORD PTR _nHeight$[esp+4]
; Line 39624
	pop	ecx
	ret	0
_sqlite3SelectExprHeight ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _walkExprList
_TEXT	SEGMENT
_xFunc$ = 8						; size = 4
_walkExprList PROC					; COMDAT
; _p$ = eax
; _pArg$ = ebx
; Line 39676
	test	eax, eax
	push	ebp
	mov	ebp, DWORD PTR _xFunc$[esp]
	jne	SHORT $LN5@walkExprLi
	pop	ebp
; Line 39681
	ret	0
$LN5@walkExprLi:
	push	esi
; Line 39677
	mov	esi, DWORD PTR [eax]
	test	esi, esi
	push	edi
	mov	edi, DWORD PTR [eax+12]
	jle	SHORT $LN2@walkExprLi
$LL4@walkExprLi:
; Line 39678
	mov	eax, DWORD PTR [edi]
	push	ebx
	push	ebp
	push	eax
	call	_walkExprTree
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN16@walkExprLi
	sub	esi, 1
	add	edi, 12					; 0000000cH
	test	esi, esi
	jg	SHORT $LL4@walkExprLi
$LN2@walkExprLi:
	pop	edi
	pop	esi
; Line 39680
	xor	eax, eax
	pop	ebp
; Line 39681
	ret	0
$LN16@walkExprLi:
	pop	edi
	pop	esi
; Line 39678
	mov	eax, 1
	pop	ebp
; Line 39681
	ret	0
_walkExprList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _exprNodeIsConstant
_TEXT	SEGMENT
_pArg$ = 8						; size = 4
_pExpr$ = 12						; size = 4
_exprNodeIsConstant PROC				; COMDAT
; Line 39720
	mov	edx, DWORD PTR _pExpr$[esp-4]
	push	esi
	mov	esi, DWORD PTR _pArg$[esp]
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, 3
	jne	SHORT $LN9@exprNodeIs
	test	BYTE PTR [edx+2], 1
; Line 39722
	jne	SHORT $LN5@exprNodeIs
$LN9@exprNodeIs:
; Line 39725
	movzx	eax, BYTE PTR [edx]
	add	eax, -17				; ffffffefH
	cmp	eax, 134				; 00000086H
	ja	SHORT $LN2@exprNodeIs
	movzx	eax, BYTE PTR $LN12@exprNodeIs[eax]
	jmp	DWORD PTR $LN14@exprNodeIs[eax*4]
$LN6@exprNodeIs:
; Line 39729
	cmp	ecx, 2
$LN13@exprNodeIs:
	je	SHORT $LN2@exprNodeIs
$LN5@exprNodeIs:
; Line 39740
	mov	DWORD PTR [esi], 0
; Line 39741
	mov	eax, 2
	pop	esi
; Line 39750
	ret	0
$LN3@exprNodeIs:
; Line 39743
	cmp	DWORD PTR [edx+56], 0
; Line 39745
	jmp	SHORT $LN13@exprNodeIs
$LN2@exprNodeIs:
; Line 39748
	xor	eax, eax
	pop	esi
; Line 39750
	ret	0
	npad	3
$LN14@exprNodeIs:
	DD	$LN5@exprNodeIs
	DD	$LN3@exprNodeIs
	DD	$LN6@exprNodeIs
	DD	$LN2@exprNodeIs
$LN12@exprNodeIs:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	3
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	0
	DB	0
	DB	0
_exprNodeIsConstant ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprIsInteger
_TEXT	SEGMENT
_v$92170 = 8						; size = 4
_p$ = 8							; size = 4
_pValue$ = 12						; size = 4
_sqlite3ExprIsInteger PROC				; COMDAT
; Line 39799
	mov	ecx, DWORD PTR _p$[esp-4]
	push	esi
$LL14@sqlite3Exp@4:
; Line 39800
	movzx	eax, BYTE PTR [ecx]
	sub	eax, 85					; 00000055H
	je	SHORT $LN3@sqlite3Exp@4
	sub	eax, 1
	jne	SHORT $LN17@sqlite3Exp@4
; Line 39808
	mov	ecx, DWORD PTR [ecx+8]
	jmp	SHORT $LL14@sqlite3Exp@4
$LN17@sqlite3Exp@4:
; Line 39800
	sub	eax, 38					; 00000026H
	jne	SHORT $LN2@sqlite3Exp@4
; Line 39802
	mov	esi, DWORD PTR [ecx+20]
	mov	edx, esi
	call	_sqlite3FitsIn32Bits
	test	eax, eax
	je	SHORT $LN2@sqlite3Exp@4
	push	esi
	call	_atoi
	mov	ecx, DWORD PTR _pValue$[esp+4]
	add	esp, 4
	mov	DWORD PTR [ecx], eax
; Line 39803
	mov	eax, 1
	pop	esi
; Line 39821
	ret	0
$LN3@sqlite3Exp@4:
; Line 39812
	mov	eax, DWORD PTR [ecx+8]
	lea	edx, DWORD PTR _v$92170[esp]
	push	edx
	push	eax
	call	_sqlite3ExprIsInteger
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@sqlite3Exp@4
; Line 39813
	mov	ecx, DWORD PTR _v$92170[esp]
	mov	edx, DWORD PTR _pValue$[esp]
	neg	ecx
	mov	DWORD PTR [edx], ecx
; Line 39814
	mov	eax, 1
	pop	esi
; Line 39821
	ret	0
$LN2@sqlite3Exp@4:
; Line 39820
	xor	eax, eax
	pop	esi
; Line 39821
	ret	0
_sqlite3ExprIsInteger ENDP
_TEXT	ENDS
PUBLIC	??_C@_03PGJCFEMG@OID?$AA@			; `string'
PUBLIC	??_C@_05GIFMDDGN@ROWID?$AA@			; `string'
PUBLIC	??_C@_07HKAAOBDA@_ROWID_?$AA@			; `string'
;	COMDAT ??_C@_03PGJCFEMG@OID?$AA@
CONST	SEGMENT
??_C@_03PGJCFEMG@OID?$AA@ DB 'OID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIFMDDGN@ROWID?$AA@
CONST	SEGMENT
??_C@_05GIFMDDGN@ROWID?$AA@ DB 'ROWID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKAAOBDA@_ROWID_?$AA@
CONST	SEGMENT
??_C@_07HKAAOBDA@_ROWID_?$AA@ DB '_ROWID_', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3IsRowid
_TEXT	SEGMENT
_sqlite3IsRowid PROC					; COMDAT
; _z$ = esi
; Line 39827
	mov	edx, OFFSET ??_C@_07HKAAOBDA@_ROWID_?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN3@sqlite3IsR
$LN6@sqlite3IsR:
	mov	eax, 1
; Line 39831
	ret	0
$LN3@sqlite3IsR:
; Line 39828
	mov	edx, OFFSET ??_C@_05GIFMDDGN@ROWID?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN6@sqlite3IsR
; Line 39829
	mov	edx, OFFSET ??_C@_03PGJCFEMG@OID?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 39831
	ret	0
_sqlite3IsRowid ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprCodeExprList
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_sqlite3ExprCodeExprList PROC				; COMDAT
; _pList$ = eax
; Line 40999
	test	eax, eax
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp]
	jne	SHORT $LN4@sqlite3Exp@5
	pop	ebp
; Line 41005
	ret	0
$LN4@sqlite3Exp@5:
	push	ebx
; Line 41000
	mov	ebx, DWORD PTR [eax]
; Line 41001
	test	ebx, ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax+12]
	mov	esi, ebx
	jle	SHORT $LN1@sqlite3Exp@5
	npad	7
$LL3@sqlite3Exp@5:
; Line 41002
	mov	eax, DWORD PTR [edi]
	push	eax
	push	ebp
	call	_sqlite3ExprCode
	sub	esi, 1
	add	esp, 8
	add	edi, 12					; 0000000cH
	test	esi, esi
	jg	SHORT $LL3@sqlite3Exp@5
$LN1@sqlite3Exp@5:
	pop	edi
	pop	esi
; Line 41004
	mov	eax, ebx
	pop	ebx
	pop	ebp
; Line 41005
	ret	0
_sqlite3ExprCodeExprList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprCompare
_TEXT	SEGMENT
_pA$ = 8						; size = 4
_pB$ = 12						; size = 4
_sqlite3ExprCompare PROC				; COMDAT
; Line 41227
	push	ebp
; Line 41229
	mov	ebp, DWORD PTR _pB$[esp]
	push	esi
	mov	esi, DWORD PTR _pA$[esp+4]
	test	esi, esi
	je	$LN22@sqlite3Exp@6
	test	ebp, ebp
	je	$LN22@sqlite3Exp@6
; Line 41232
	mov	al, BYTE PTR [esi]
	cmp	al, BYTE PTR [ebp]
	je	SHORT $LN21@sqlite3Exp@6
$LN31@sqlite3Exp@6:
	pop	esi
	xor	eax, eax
	pop	ebp
; Line 41257
	ret	0
$LN21@sqlite3Exp@6:
; Line 41233
	mov	cl, BYTE PTR [esi+2]
	xor	cl, BYTE PTR [ebp+2]
	test	cl, 16					; 00000010H
	jne	SHORT $LN31@sqlite3Exp@6
; Line 41234
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [esi+8]
	push	edx
	push	eax
	call	_sqlite3ExprCompare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN31@sqlite3Exp@6
; Line 41235
	mov	ecx, DWORD PTR [ebp+12]
	mov	edx, DWORD PTR [esi+12]
	push	ecx
	push	edx
	call	_sqlite3ExprCompare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN31@sqlite3Exp@6
; Line 41236
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	push	ebx
	push	edi
	je	SHORT $LN17@sqlite3Exp@6
; Line 41237
	mov	edx, DWORD PTR [ebp+16]
	test	edx, edx
	je	$LN7@sqlite3Exp@6
; Line 41238
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR [edx]
	jne	$LN7@sqlite3Exp@6
; Line 41239
	xor	ebx, ebx
	test	ecx, ecx
	jle	SHORT $LN9@sqlite3Exp@6
	xor	edi, edi
	npad	1
$LL14@sqlite3Exp@6:
; Line 41240
	mov	ecx, DWORD PTR [ebp+16]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [edx+edi]
	push	ecx
	push	eax
	call	_sqlite3ExprCompare
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@sqlite3Exp@6
	mov	eax, DWORD PTR [esi+16]
	add	ebx, 1
	add	edi, 12					; 0000000cH
	cmp	ebx, DWORD PTR [eax]
	jl	SHORT $LL14@sqlite3Exp@6
	jmp	SHORT $LN9@sqlite3Exp@6
$LN17@sqlite3Exp@6:
; Line 41244
	cmp	DWORD PTR [ebp+16], 0
; Line 41245
	jne	SHORT $LN7@sqlite3Exp@6
$LN9@sqlite3Exp@6:
; Line 41247
	cmp	DWORD PTR [esi+56], 0
	jne	SHORT $LN7@sqlite3Exp@6
	cmp	DWORD PTR [ebp+56], 0
	jne	SHORT $LN7@sqlite3Exp@6
; Line 41248
	mov	ecx, DWORD PTR [esi+36]
	cmp	ecx, DWORD PTR [ebp+36]
	jne	SHORT $LN7@sqlite3Exp@6
	mov	edx, DWORD PTR [esi+40]
	cmp	edx, DWORD PTR [ebp+40]
	jne	SHORT $LN7@sqlite3Exp@6
; Line 41249
	cmp	BYTE PTR [esi], 149			; 00000095H
	je	SHORT $LN1@sqlite3Exp@6
	mov	ecx, DWORD PTR [esi+20]
	test	ecx, ecx
	je	SHORT $LN1@sqlite3Exp@6
; Line 41250
	mov	edx, DWORD PTR [ebp+20]
	test	edx, edx
	je	SHORT $LN7@sqlite3Exp@6
; Line 41251
	mov	eax, DWORD PTR [ebp+24]
	mov	esi, DWORD PTR [esi+24]
	shr	eax, 1
	shr	esi, 1
	cmp	eax, esi
	jne	SHORT $LN7@sqlite3Exp@6
; Line 41252
	call	_sqlite3StrNICmp
	test	eax, eax
; Line 41253
	jne	SHORT $LN7@sqlite3Exp@6
$LN1@sqlite3Exp@6:
	pop	edi
	pop	ebx
	pop	esi
; Line 41256
	mov	eax, 1
	pop	ebp
; Line 41257
	ret	0
$LN7@sqlite3Exp@6:
	pop	edi
	pop	ebx
	pop	esi
; Line 41247
	xor	eax, eax
	pop	ebp
; Line 41257
	ret	0
$LN22@sqlite3Exp@6:
; Line 41230
	xor	eax, eax
	cmp	ebp, esi
	pop	esi
	sete	al
	pop	ebp
; Line 41257
	ret	0
_sqlite3ExprCompare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FixInit
_TEXT	SEGMENT
_zType$ = 8						; size = 4
_pName$ = 12						; size = 4
_sqlite3FixInit PROC					; COMDAT
; _pFix$ = eax
; _pParse$ = esi
; _iDb$ = ecx
; Line 42857
	test	ecx, ecx
	jl	SHORT $LN1@sqlite3Fix
	cmp	ecx, 1
	je	SHORT $LN1@sqlite3Fix
; Line 42858
	mov	edx, DWORD PTR [esi]
; Line 42860
	mov	DWORD PTR [eax], esi
; Line 42861
	mov	edx, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR [edx+ecx*8]
; Line 42862
	mov	edx, DWORD PTR _zType$[esp-4]
	mov	DWORD PTR [eax+4], ecx
; Line 42863
	mov	ecx, DWORD PTR _pName$[esp-4]
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
; Line 42864
	mov	eax, 1
; Line 42865
	ret	0
$LN1@sqlite3Fix:
; Line 42857
	xor	eax, eax
; Line 42865
	ret	0
_sqlite3FixInit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FixExprList
_TEXT	SEGMENT
_pFix$ = 8						; size = 4
_sqlite3FixExprList PROC				; COMDAT
; _pList$ = edi
; Line 42953
	test	edi, edi
	push	ebp
	mov	ebp, DWORD PTR _pFix$[esp]
	jne	SHORT $LN5@sqlite3Fix@2
	xor	eax, eax
	pop	ebp
; Line 42960
	ret	0
$LN5@sqlite3Fix@2:
	push	ebx
; Line 42954
	mov	ebx, DWORD PTR [edi+12]
	push	esi
	xor	esi, esi
	cmp	DWORD PTR [edi], esi
	jle	SHORT $LN2@sqlite3Fix@2
$LL4@sqlite3Fix@2:
; Line 42955
	mov	eax, DWORD PTR [ebx]
	push	eax
	push	ebp
	call	_sqlite3FixExpr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN65@sqlite3Fix@2
	add	esi, 1
	add	ebx, 12					; 0000000cH
	cmp	esi, DWORD PTR [edi]
	jl	SHORT $LL4@sqlite3Fix@2
$LN2@sqlite3Fix@2:
	pop	esi
	pop	ebx
; Line 42959
	xor	eax, eax
	pop	ebp
; Line 42960
	ret	0
$LN65@sqlite3Fix@2:
	pop	esi
	pop	ebx
; Line 42956
	mov	eax, 1
	pop	ebp
; Line 42960
	ret	0
_sqlite3FixExprList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_set_authorizer
_TEXT	SEGMENT
_db$ = 8						; size = 4
_xAuth$ = 12						; size = 4
_pArg$ = 16						; size = 4
_sqlite3_set_authorizer PROC				; COMDAT
; Line 43061
	mov	eax, DWORD PTR _db$[esp-4]
	mov	ecx, DWORD PTR _xAuth$[esp-4]
; Line 43062
	mov	edx, DWORD PTR _pArg$[esp-4]
	mov	DWORD PTR [eax+160], ecx
	mov	DWORD PTR [eax+164], edx
; Line 43063
	mov	eax, DWORD PTR [eax+80]
	test	eax, eax
	je	SHORT $LN10@sqlite3_se
	mov	cl, 1
$LL5@sqlite3_se:
	mov	BYTE PTR [eax+564], cl
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	jne	SHORT $LL5@sqlite3_se
$LN10@sqlite3_se:
; Line 43064
	xor	eax, eax
; Line 43065
	ret	0
_sqlite3_set_authorizer ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AuthContextPush
_TEXT	SEGMENT
_zContext$ = 8						; size = 4
_sqlite3AuthContextPush PROC				; COMDAT
; _pParse$ = eax
; _pContext$ = ecx
; Line 43200
	test	eax, eax
	mov	DWORD PTR [ecx+4], eax
	je	SHORT $LN1@sqlite3Aut
; Line 43201
	mov	edx, DWORD PTR [eax+176]
	mov	DWORD PTR [ecx], edx
; Line 43202
	mov	ecx, DWORD PTR _zContext$[esp-4]
	mov	DWORD PTR [eax+176], ecx
$LN1@sqlite3Aut:
; Line 43204
	ret	0
_sqlite3AuthContextPush ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AuthContextPop
_TEXT	SEGMENT
_sqlite3AuthContextPop PROC				; COMDAT
; _pContext$ = eax
; Line 43211
	mov	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN1@sqlite3Aut@2
; Line 43212
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+176], edx
; Line 43213
	mov	DWORD PTR [eax+4], 0
$LN1@sqlite3Aut@2:
; Line 43215
	ret	0
_sqlite3AuthContextPop ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BeginParse
_TEXT	SEGMENT
_explainFlag$ = 8					; size = 4
_sqlite3BeginParse PROC					; COMDAT
; _pParse$ = eax
; Line 43253
	mov	cl, BYTE PTR _explainFlag$[esp-4]
	mov	BYTE PTR [eax+128], cl
; Line 43254
	mov	DWORD PTR [eax+112], 0
; Line 43255
	ret	0
_sqlite3BeginParse ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FindTable
_TEXT	SEGMENT
_i$ = 8							; size = 4
_db$ = 8						; size = 4
_zDatabase$ = 12					; size = 4
_sqlite3FindTable PROC					; COMDAT
; _zName$ = ebx
; Line 43481
	push	ebp
	mov	ebp, DWORD PTR _db$[esp]
	push	esi
; Line 43485
	xor	esi, esi
	push	edi
	xor	edi, edi
	cmp	DWORD PTR [ebp], esi
	mov	DWORD PTR _i$[esp+8], esi
	jle	$LN25@sqlite3Fin
	jmp	SHORT $LN5@sqlite3Fin
	npad	6
$LL26@sqlite3Fin:
	mov	esi, DWORD PTR _i$[esp+8]
$LN5@sqlite3Fin:
; Line 43486
	cmp	esi, 2
	jge	SHORT $LN8@sqlite3Fin
	xor	esi, 1
$LN8@sqlite3Fin:
; Line 43487
	mov	ecx, DWORD PTR _zDatabase$[esp+8]
	test	ecx, ecx
	je	SHORT $LN2@sqlite3Fin
	mov	edx, DWORD PTR [ebp+4]
	lea	eax, DWORD PTR [esi+esi*2]
	mov	edx, DWORD PTR [edx+eax*8]
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN4@sqlite3Fin
$LN2@sqlite3Fin:
; Line 43488
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL23@sqlite3Fin:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL23@sqlite3Fin
	mov	ecx, DWORD PTR [ebp+4]
	sub	eax, edx
	lea	edi, DWORD PTR [eax+1]
	lea	eax, DWORD PTR [esi+esi*2]
	mov	esi, DWORD PTR [ecx+eax*8+20]
	add	esi, 4
	je	SHORT $LN14@sqlite3Fin
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN14@sqlite3Fin
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN16@sqlite3Fin
	mov	eax, OFFSET _binHash
$LN16@sqlite3Fin:
	push	edi
	push	ebx
	call	eax
	mov	edx, DWORD PTR [esi+20]
	sub	edx, 1
	push	edi
	and	edx, eax
	push	ebx
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN14@sqlite3Fin
	mov	edi, DWORD PTR [eax+8]
; Line 43489
	test	edi, edi
	jne	SHORT $LN25@sqlite3Fin
$LN4@sqlite3Fin:
; Line 43485
	mov	eax, DWORD PTR _i$[esp+8]
	add	eax, 1
	cmp	eax, DWORD PTR [ebp]
	mov	DWORD PTR _i$[esp+8], eax
	jl	$LL26@sqlite3Fin
$LN25@sqlite3Fin:
; Line 43491
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
; Line 43492
	ret	0
$LN14@sqlite3Fin:
; Line 43488
	xor	edi, edi
	jmp	SHORT $LN4@sqlite3Fin
_sqlite3FindTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FindIndex
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zDb$ = 12						; size = 4
_sqlite3FindIndex PROC					; COMDAT
; _zName$ = ebx
; Line 43540
	mov	ecx, DWORD PTR _db$[esp-4]
	push	ebp
	push	edi
	xor	edi, edi
	xor	ebp, ebp
	cmp	DWORD PTR [ecx], edi
	jle	$LN26@sqlite3Fin@2
	push	esi
$LL28@sqlite3Fin@2:
; Line 43541
	cmp	ebp, 2
	mov	eax, ebp
	jge	SHORT $LN10@sqlite3Fin@2
	xor	eax, 1
$LN10@sqlite3Fin@2:
; Line 43542
	mov	ecx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+eax*2]
	mov	esi, DWORD PTR [ecx+eax*8+20]
	lea	eax, DWORD PTR [ecx+eax*8]
; Line 43543
	mov	ecx, DWORD PTR _zDb$[esp+8]
	test	ecx, ecx
	je	SHORT $LN3@sqlite3Fin@2
	mov	edx, DWORD PTR [eax]
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN5@sqlite3Fin@2
$LN3@sqlite3Fin@2:
; Line 43545
	test	esi, esi
	je	SHORT $LN13@sqlite3Fin@2
; Line 43546
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL24@sqlite3Fin@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL24@sqlite3Fin@2
	sub	eax, edx
	add	esi, 32					; 00000020H
	lea	edi, DWORD PTR [eax+1]
	je	SHORT $LN15@sqlite3Fin@2
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN15@sqlite3Fin@2
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN17@sqlite3Fin@2
	mov	eax, OFFSET _binHash
$LN17@sqlite3Fin@2:
	push	edi
	push	ebx
	call	eax
	mov	edx, DWORD PTR [esi+20]
	sub	edx, 1
	push	edi
	and	edx, eax
	push	ebx
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN15@sqlite3Fin@2
	mov	edi, DWORD PTR [eax+8]
$LN13@sqlite3Fin@2:
; Line 43548
	test	edi, edi
	jne	SHORT $LN25@sqlite3Fin@2
$LN5@sqlite3Fin@2:
; Line 43540
	mov	ecx, DWORD PTR _db$[esp+8]
	add	ebp, 1
	cmp	ebp, DWORD PTR [ecx]
	jl	$LL28@sqlite3Fin@2
$LN25@sqlite3Fin@2:
	pop	esi
; Line 43550
	mov	eax, edi
	pop	edi
	pop	ebp
; Line 43551
	ret	0
; Line 43546
$LN15@sqlite3Fin@2:
	xor	edi, edi
	jmp	SHORT $LN5@sqlite3Fin@2
$LN26@sqlite3Fin@2:
; Line 43550
	mov	eax, edi
	pop	edi
	pop	ebp
; Line 43551
	ret	0
_sqlite3FindIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3CommitInternalChanges
_TEXT	SEGMENT
_sqlite3CommitInternalChanges PROC			; COMDAT
; _db$ = eax
; Line 43669
	and	DWORD PTR [eax+8], -17			; ffffffefH
; Line 43670
	ret	0
_sqlite3CommitInternalChanges ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AddNotNull
_TEXT	SEGMENT
_onError$ = 8						; size = 4
_sqlite3AddNotNull PROC					; COMDAT
; _pParse$ = eax
; Line 44176
	mov	ecx, DWORD PTR [eax+164]
	test	ecx, ecx
	je	SHORT $LN1@sqlite3Add
; Line 44177
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, 1
; Line 44178
	js	SHORT $LN1@sqlite3Add
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+8]
	mov	cl, BYTE PTR _onError$[esp-4]
	mov	BYTE PTR [eax+edx*4+16], cl
$LN1@sqlite3Add:
; Line 44179
	ret	0
_sqlite3AddNotNull ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AffinityType
_TEXT	SEGMENT
_sqlite3AffinityType PROC				; COMDAT
; _pType$ = edx
; Line 44206
	push	esi
; Line 44209
	mov	esi, DWORD PTR [edx]
; Line 44210
	mov	edx, DWORD PTR [edx+4]
	shr	edx, 1
	add	edx, esi
	xor	ecx, ecx
; Line 44212
	cmp	esi, edx
	mov	al, 99					; 00000063H
	je	$LN17@sqlite3Aff
	push	edi
	npad	9
$LL18@sqlite3Aff:
; Line 44213
	movzx	edi, BYTE PTR [esi]
	movzx	edi, BYTE PTR _sqlite3UpperToLower[edi]
	shl	ecx, 8
	add	ecx, edi
; Line 44214
	add	esi, 1
; Line 44215
	cmp	ecx, 1667785074				; 63686172H
	jne	SHORT $LN16@sqlite3Aff
; Line 44216
	mov	al, 97					; 00000061H
	jmp	SHORT $LN1@sqlite3Aff
$LN16@sqlite3Aff:
; Line 44217
	cmp	ecx, 1668050786				; 636c6f62H
	jne	SHORT $LN14@sqlite3Aff
; Line 44218
	mov	al, 97					; 00000061H
	jmp	SHORT $LN1@sqlite3Aff
$LN14@sqlite3Aff:
; Line 44219
	cmp	ecx, 1952807028				; 74657874H
	jne	SHORT $LN12@sqlite3Aff
; Line 44220
	mov	al, 97					; 00000061H
; Line 44221
	jmp	SHORT $LN1@sqlite3Aff
$LN12@sqlite3Aff:
; Line 44222
	cmp	ecx, 1651273570				; 626c6f62H
	jne	SHORT $LN10@sqlite3Aff
	cmp	al, 99					; 00000063H
	je	SHORT $LN9@sqlite3Aff
	cmp	al, 101					; 00000065H
	jne	SHORT $LN3@sqlite3Aff
$LN9@sqlite3Aff:
; Line 44223
	mov	al, 98					; 00000062H
; Line 44225
	jmp	SHORT $LN1@sqlite3Aff
$LN10@sqlite3Aff:
; Line 44226
	cmp	ecx, 1919246700				; 7265616cH
	jne	SHORT $LN7@sqlite3Aff
	cmp	al, 99					; 00000063H
	jne	SHORT $LN3@sqlite3Aff
; Line 44227
	mov	al, 101					; 00000065H
; Line 44228
	jmp	SHORT $LN1@sqlite3Aff
$LN7@sqlite3Aff:
; Line 44229
	cmp	ecx, 1718382433				; 666c6f61H
	jne	SHORT $LN5@sqlite3Aff
	cmp	al, 99					; 00000063H
	jne	SHORT $LN3@sqlite3Aff
; Line 44230
	mov	al, 101					; 00000065H
; Line 44231
	jmp	SHORT $LN1@sqlite3Aff
$LN5@sqlite3Aff:
; Line 44232
	cmp	ecx, 1685026146				; 646f7562H
	jne	SHORT $LN3@sqlite3Aff
	cmp	al, 99					; 00000063H
	jne	SHORT $LN3@sqlite3Aff
; Line 44233
	mov	al, 101					; 00000065H
	jmp	SHORT $LN1@sqlite3Aff
$LN3@sqlite3Aff:
; Line 44235
	mov	edi, ecx
	and	edi, 16777215				; 00ffffffH
	cmp	edi, 6909556				; 00696e74H
	je	SHORT $LN22@sqlite3Aff
$LN1@sqlite3Aff:
; Line 44212
	cmp	esi, edx
	jne	$LL18@sqlite3Aff
	pop	edi
	pop	esi
; Line 44242
	ret	0
$LN22@sqlite3Aff:
; Line 44236
	mov	al, 100					; 00000064H
	pop	edi
$LN17@sqlite3Aff:
	pop	esi
; Line 44242
	ret	0
_sqlite3AffinityType ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _identLength
_TEXT	SEGMENT
_identLength PROC					; COMDAT
; _z$ = ecx
; Line 44489
	mov	al, BYTE PTR [ecx]
	xor	edx, edx
	test	al, al
	je	SHORT $LN9@identLengt
$LL4@identLengt:
; Line 44490
	cmp	al, 34					; 00000022H
	jne	SHORT $LN3@identLengt
	add	edx, 1
$LN3@identLengt:
; Line 44489
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL4@identLengt
$LN9@identLengt:
; Line 44492
	lea	eax, DWORD PTR [edx+2]
; Line 44493
	ret	0
_identLength ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3RootPageMoved
_TEXT	SEGMENT
_sqlite3RootPageMoved PROC				; COMDAT
; _pDb$ = esi
; _iFrom$ = edx
; _iTo$ = edi
; Line 44991
	mov	eax, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [eax+12]
	test	eax, eax
	je	SHORT $LN6@sqlite3Roo
	npad	6
$LL8@sqlite3Roo:
; Line 44992
	mov	ecx, DWORD PTR [eax+8]
; Line 44993
	cmp	DWORD PTR [ecx+20], edx
	jne	SHORT $LN7@sqlite3Roo
; Line 44994
	mov	DWORD PTR [ecx+20], edi
$LN7@sqlite3Roo:
; Line 44991
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $LL8@sqlite3Roo
$LN6@sqlite3Roo:
; Line 44998
	mov	ecx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [ecx+40]
	test	eax, eax
	je	SHORT $LN2@sqlite3Roo
	npad	5
$LL4@sqlite3Roo:
; Line 44999
	mov	ecx, DWORD PTR [eax+8]
; Line 45000
	cmp	DWORD PTR [ecx+20], edx
	jne	SHORT $LN3@sqlite3Roo
; Line 45001
	mov	DWORD PTR [ecx+20], edi
$LN3@sqlite3Roo:
; Line 44998
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $LL4@sqlite3Roo
$LN2@sqlite3Roo:
; Line 45004
	ret	0
_sqlite3RootPageMoved ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3DeferForeignKey
_TEXT	SEGMENT
_isDeferred$ = 8					; size = 4
_sqlite3DeferForeignKey PROC				; COMDAT
; _pParse$ = eax
; Line 45372
	mov	eax, DWORD PTR [eax+164]
	test	eax, eax
	je	SHORT $LN1@sqlite3Def
	mov	eax, DWORD PTR [eax+36]
	test	eax, eax
	je	SHORT $LN1@sqlite3Def
; Line 45373
	mov	cl, BYTE PTR _isDeferred$[esp-4]
	mov	BYTE PTR [eax+24], cl
$LN1@sqlite3Def:
; Line 45375
	ret	0
_sqlite3DeferForeignKey ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3DefaultRowEst
_TEXT	SEGMENT
_sqlite3DefaultRowEst PROC				; COMDAT
; _pIdx$ = edx
; Line 45913
	mov	ecx, DWORD PTR [edx+12]
; Line 45916
	mov	DWORD PTR [ecx], 1000000		; 000f4240H
; Line 45917
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, 5
	jl	SHORT $LN10@sqlite3Def@2
$LL6@sqlite3Def@2:
; Line 45918
	mov	DWORD PTR [ecx+eax*4], 5
	sub	eax, 1
	cmp	eax, 5
	jge	SHORT $LL6@sqlite3Def@2
$LN10@sqlite3Def@2:
; Line 45920
	cmp	eax, 1
	jl	SHORT $LN2@sqlite3Def@2
	push	esi
$LL3@sqlite3Def@2:
; Line 45921
	mov	esi, 11					; 0000000bH
	sub	esi, eax
	mov	DWORD PTR [ecx+eax*4], esi
; Line 45922
	sub	eax, 1
	cmp	eax, 1
	jge	SHORT $LL3@sqlite3Def@2
	pop	esi
$LN2@sqlite3Def@2:
; Line 45924
	cmp	BYTE PTR [edx+24], 0
	je	SHORT $LN1@sqlite3Def@2
; Line 45925
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*4], 1
$LN1@sqlite3Def@2:
; Line 45927
	ret	0
_sqlite3DefaultRowEst ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3IdListIndex
_TEXT	SEGMENT
_zName$ = 8						; size = 4
_sqlite3IdListIndex PROC				; COMDAT
; _pList$ = eax
; Line 46084
	test	eax, eax
	push	ebp
	mov	ebp, DWORD PTR _zName$[esp]
	jne	SHORT $LN5@sqlite3IdL
	or	eax, -1
	pop	ebp
; Line 46089
	ret	0
$LN5@sqlite3IdL:
	push	ebx
	mov	ebx, DWORD PTR [eax+4]
	push	esi
; Line 46085
	xor	esi, esi
	test	ebx, ebx
	push	edi
	jle	SHORT $LN2@sqlite3IdL
	mov	edi, DWORD PTR [eax]
	npad	4
$LL4@sqlite3IdL:
; Line 46086
	mov	ecx, DWORD PTR [edi]
	mov	edx, ebp
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN9@sqlite3IdL
	add	esi, 1
	add	edi, 8
	cmp	esi, ebx
	jl	SHORT $LL4@sqlite3IdL
$LN2@sqlite3IdL:
	pop	edi
	pop	esi
	pop	ebx
; Line 46088
	or	eax, -1
	pop	ebp
; Line 46089
	ret	0
$LN9@sqlite3IdL:
	pop	edi
; Line 46086
	mov	eax, esi
	pop	esi
	pop	ebx
	pop	ebp
; Line 46089
	ret	0
_sqlite3IdListIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SrcListAssignCursors
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_pList$ = 12						; size = 4
_sqlite3SrcListAssignCursors PROC			; COMDAT
; Line 46155
	push	ebp
; Line 46159
	mov	ebp, DWORD PTR _pList$[esp]
	test	ebp, ebp
	je	SHORT $LN10@sqlite3Src
	push	ebx
; Line 46160
	xor	ebx, ebx
	cmp	WORD PTR [ebp], bx
	jle	SHORT $LN13@sqlite3Src
	push	esi
	push	edi
	mov	edi, DWORD PTR _pParse$[esp+12]
	lea	esi, DWORD PTR [ebp+24]
	npad	5
$LL12@sqlite3Src:
; Line 46161
	cmp	DWORD PTR [esi+8], 0
	jge	SHORT $LN14@sqlite3Src
; Line 46162
	mov	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [esi+8], eax
	add	DWORD PTR [edi+28], 1
; Line 46163
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN4@sqlite3Src
; Line 46164
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	edi
	call	_sqlite3SrcListAssignCursors
	add	esp, 8
$LN4@sqlite3Src:
	movsx	edx, WORD PTR [ebp]
	add	ebx, 1
	add	esi, 48					; 00000030H
	cmp	ebx, edx
	jl	SHORT $LL12@sqlite3Src
$LN14@sqlite3Src:
	pop	edi
	pop	esi
$LN13@sqlite3Src:
	pop	ebx
$LN10@sqlite3Src:
	pop	ebp
; Line 46168
	ret	0
_sqlite3SrcListAssignCursors ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SrcListShiftJoinType
_TEXT	SEGMENT
_sqlite3SrcListShiftJoinType PROC			; COMDAT
; _p$ = esi
; Line 46248
	test	esi, esi
	je	SHORT $LN4@sqlite3Src@2
	lea	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN4@sqlite3Src@2
; Line 46250
	movsx	eax, WORD PTR [esi]
	sub	eax, 1
	test	eax, eax
	jle	SHORT $LN1@sqlite3Src@2
	lea	ecx, DWORD PTR [eax+eax*2]
	shl	ecx, 4
	lea	ecx, DWORD PTR [ecx+esi+29]
	npad	1
$LL3@sqlite3Src@2:
; Line 46251
	mov	dl, BYTE PTR [ecx-48]
	mov	BYTE PTR [ecx], dl
	sub	eax, 1
	sub	ecx, 48					; 00000030H
	test	eax, eax
	jg	SHORT $LL3@sqlite3Src@2
$LN1@sqlite3Src@2:
; Line 46253
	mov	BYTE PTR [esi+29], 0
$LN4@sqlite3Src@2:
; Line 46255
	ret	0
_sqlite3SrcListShiftJoinType ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _collationMatch
_TEXT	SEGMENT
_zColl$ = 8						; size = 4
_collationMatch PROC					; COMDAT
; _pIndex$ = eax
; Line 46426
	push	ebx
	mov	ebx, DWORD PTR [eax+4]
	push	ebp
	mov	ebp, DWORD PTR _zColl$[esp+4]
	push	esi
; Line 46428
	xor	esi, esi
	test	ebx, ebx
	push	edi
	jle	SHORT $LN3@collationM
	mov	edi, DWORD PTR [eax+44]
$LL11@collationM:
; Line 46429
	mov	ecx, DWORD PTR [edi]
; Line 46430
	cmp	ecx, ebp
	je	SHORT $LN9@collationM
	test	ecx, ecx
	je	SHORT $LN4@collationM
	test	ebp, ebp
	je	SHORT $LN4@collationM
	mov	edx, ebp
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN9@collationM
$LN4@collationM:
; Line 46428
	add	esi, 1
	add	edi, 4
	cmp	esi, ebx
	jl	SHORT $LL11@collationM
$LN3@collationM:
	pop	edi
	pop	esi
	pop	ebp
; Line 46434
	xor	eax, eax
	pop	ebx
; Line 46435
	ret	0
$LN9@collationM:
	pop	edi
	pop	esi
	pop	ebp
; Line 46431
	mov	eax, 1
	pop	ebx
; Line 46435
	ret	0
_collationMatch ENDP
_TEXT	ENDS
PUBLIC	??_C@_07LFFDKBGI@explain?$AA@			; `string'
PUBLIC	??_C@_03JBJLGPFL@end?$AA@			; `string'
PUBLIC	??_C@_09CAHPDAG@temporary?$AA@			; `string'
PUBLIC	??_C@_04FGEHGIFJ@temp?$AA@			; `string'
PUBLIC	??_C@_06HBNONAG@create?$AA@			; `string'
;	COMDAT ??_C@_07LFFDKBGI@explain?$AA@
CONST	SEGMENT
??_C@_07LFFDKBGI@explain?$AA@ DB 'explain', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBJLGPFL@end?$AA@
CONST	SEGMENT
??_C@_03JBJLGPFL@end?$AA@ DB 'end', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CAHPDAG@temporary?$AA@
CONST	SEGMENT
??_C@_09CAHPDAG@temporary?$AA@ DB 'temporary', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FGEHGIFJ@temp?$AA@
CONST	SEGMENT
??_C@_04FGEHGIFJ@temp?$AA@ DB 'temp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBNONAG@create?$AA@
CONST	SEGMENT
??_C@_06HBNONAG@create?$AA@ DB 'create', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3_complete
_TEXT	SEGMENT
_zSql$ = 8						; size = 4
_sqlite3_complete PROC					; COMDAT
; Line 47051
	push	ebx
	push	esi
; Line 47082
	mov	esi, DWORD PTR _zSql$[esp+4]
	mov	al, BYTE PTR [esi]
	xor	bl, bl
	test	al, al
	push	edi
	je	$LN50@sqlite3_co@2
$LL51@sqlite3_co@2:
; Line 47083
	movsx	edx, al
	lea	ecx, DWORD PTR [edx-9]
	cmp	ecx, 87					; 00000057H
	ja	$LN26@sqlite3_co@2
	movzx	ecx, BYTE PTR $LN74@sqlite3_co@2[ecx]
	jmp	DWORD PTR $LN86@sqlite3_co@2[ecx*4]
$LN47@sqlite3_co@2:
; Line 47085
	xor	al, al
; Line 47086
	jmp	$LN1@sqlite3_co@2
$LN45@sqlite3_co@2:
; Line 47097
	cmp	BYTE PTR [esi+1], 42			; 0000002aH
	je	SHORT $LN44@sqlite3_co@2
; Line 47098
	mov	al, 2
; Line 47099
	jmp	$LN1@sqlite3_co@2
$LN44@sqlite3_co@2:
; Line 47102
	mov	al, BYTE PTR [esi+2]
	add	esi, 2
	test	al, al
	je	SHORT $LN63@sqlite3_co@2
	npad	2
$LL43@sqlite3_co@2:
	cmp	al, 42					; 0000002aH
	jne	SHORT $LN41@sqlite3_co@2
	cmp	BYTE PTR [esi+1], 47			; 0000002fH
	je	SHORT $LN42@sqlite3_co@2
$LN41@sqlite3_co@2:
	mov	al, BYTE PTR [esi+1]
	add	esi, 1
	test	al, al
	jne	SHORT $LL43@sqlite3_co@2
$LN63@sqlite3_co@2:
	pop	edi
	pop	esi
; Line 47121
	xor	eax, eax
	pop	ebx
; Line 47197
	ret	0
$LN42@sqlite3_co@2:
; Line 47103
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN63@sqlite3_co@2
; Line 47104
	add	esi, 1
$LN46@sqlite3_co@2:
; Line 47105
	mov	al, 1
; Line 47106
	jmp	$LN1@sqlite3_co@2
$LN39@sqlite3_co@2:
; Line 47109
	cmp	BYTE PTR [esi+1], 45			; 0000002dH
	je	SHORT $LL37@sqlite3_co@2
; Line 47110
	mov	al, 2
; Line 47111
	jmp	$LN1@sqlite3_co@2
$LL37@sqlite3_co@2:
; Line 47113
	cmp	al, 10					; 0000000aH
	je	SHORT $LN36@sqlite3_co@2
	mov	al, BYTE PTR [esi+1]
	add	esi, 1
	test	al, al
	jne	SHORT $LL37@sqlite3_co@2
$LN50@sqlite3_co@2:
	pop	edi
; Line 47196
	xor	eax, eax
	test	bl, bl
	pop	esi
	sete	al
	pop	ebx
; Line 47197
	ret	0
$LN36@sqlite3_co@2:
; Line 47114
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN50@sqlite3_co@2
; Line 47115
	mov	al, 1
; Line 47116
	jmp	$LN1@sqlite3_co@2
$LN34@sqlite3_co@2:
; Line 47120
	mov	al, BYTE PTR [esi+1]
	add	esi, 1
	test	al, al
	je	SHORT $LN63@sqlite3_co@2
$LL33@sqlite3_co@2:
	cmp	al, 93					; 0000005dH
	je	SHORT $LN32@sqlite3_co@2
	mov	al, BYTE PTR [esi+1]
	add	esi, 1
	test	al, al
	jne	SHORT $LL33@sqlite3_co@2
	pop	edi
	pop	esi
; Line 47121
	xor	eax, eax
	pop	ebx
; Line 47197
	ret	0
$LN32@sqlite3_co@2:
; Line 47121
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN63@sqlite3_co@2
; Line 47122
	mov	al, 2
; Line 47123
	jmp	$LN1@sqlite3_co@2
$LN30@sqlite3_co@2:
; Line 47130
	mov	al, BYTE PTR [esi+1]
	add	esi, 1
	test	al, al
	je	SHORT $LN63@sqlite3_co@2
	npad	1
$LL29@sqlite3_co@2:
	movsx	eax, al
	cmp	eax, edx
	je	SHORT $LN32@sqlite3_co@2
	mov	al, BYTE PTR [esi+1]
	add	esi, 1
	test	al, al
	jne	SHORT $LL29@sqlite3_co@2
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 47197
	ret	0
$LN26@sqlite3_co@2:
; Line 47137
	movzx	eax, al
	test	al, al
	js	SHORT $LN24@sqlite3_co@2
	cmp	eax, 31					; 0000001fH
	jle	SHORT $LN25@sqlite3_co@2
	cmp	BYTE PTR _sqlite3IsIdChar[eax-32], 0
	jne	SHORT $LN24@sqlite3_co@2
$LN25@sqlite3_co@2:
; Line 47188
	mov	al, 2
	jmp	$LN1@sqlite3_co@2
$LN24@sqlite3_co@2:
; Line 47140
	mov	edi, 1
$LL23@sqlite3_co@2:
	movsx	eax, BYTE PTR [edi+esi]
	test	al, al
	js	SHORT $LN22@sqlite3_co@2
	cmp	eax, 31					; 0000001fH
	jle	SHORT $LN21@sqlite3_co@2
	cmp	BYTE PTR _sqlite3IsIdChar[eax-32], 0
	je	SHORT $LN21@sqlite3_co@2
$LN22@sqlite3_co@2:
	add	edi, 1
	jmp	SHORT $LL23@sqlite3_co@2
$LN21@sqlite3_co@2:
; Line 47144
	lea	eax, DWORD PTR [edx-67]
	cmp	eax, 49					; 00000031H
	ja	$LN2@sqlite3_co@2
	movzx	ecx, BYTE PTR $LN75@sqlite3_co@2[eax]
	jmp	DWORD PTR $LN87@sqlite3_co@2[ecx*4]
$LN17@sqlite3_co@2:
; Line 47146
	cmp	edi, 6
	jne	$LN2@sqlite3_co@2
	mov	eax, edi
	mov	edx, OFFSET ??_C@_06HBNONAG@create?$AA@
	mov	ecx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	$LN2@sqlite3_co@2
; Line 47147
	mov	al, 4
; Line 47151
	jmp	SHORT $LN18@sqlite3_co@2
$LN14@sqlite3_co@2:
; Line 47154
	cmp	edi, 7
	jne	SHORT $LN13@sqlite3_co@2
	mov	eax, edi
	mov	edx, OFFSET ??_C@_07DIDNFGDE@trigger?$AA@
	mov	ecx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	SHORT $LN2@sqlite3_co@2
; Line 47155
	mov	al, 6
	jmp	SHORT $LN18@sqlite3_co@2
$LN13@sqlite3_co@2:
; Line 47156
	cmp	edi, 4
	jne	SHORT $LN11@sqlite3_co@2
	mov	eax, edi
	mov	edx, OFFSET ??_C@_04FGEHGIFJ@temp?$AA@
$LN85@sqlite3_co@2:
	mov	ecx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	SHORT $LN2@sqlite3_co@2
; Line 47157
	mov	al, 5
	jmp	SHORT $LN18@sqlite3_co@2
$LN11@sqlite3_co@2:
; Line 47158
	cmp	edi, 9
	jne	SHORT $LN2@sqlite3_co@2
	mov	eax, edi
	mov	edx, OFFSET ??_C@_09CAHPDAG@temporary?$AA@
; Line 47163
	jmp	SHORT $LN85@sqlite3_co@2
$LN7@sqlite3_co@2:
; Line 47166
	cmp	edi, 3
	jne	SHORT $LN6@sqlite3_co@2
	mov	eax, edi
	mov	edx, OFFSET ??_C@_03JBJLGPFL@end?$AA@
	mov	ecx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	SHORT $LN2@sqlite3_co@2
; Line 47167
	mov	al, 7
; Line 47168
	jmp	SHORT $LN18@sqlite3_co@2
$LN6@sqlite3_co@2:
; Line 47170
	cmp	edi, 7
	jne	SHORT $LN2@sqlite3_co@2
	mov	eax, edi
	mov	edx, OFFSET ??_C@_07LFFDKBGI@explain?$AA@
	mov	ecx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
; Line 47171
	mov	al, 3
	je	SHORT $LN18@sqlite3_co@2
$LN2@sqlite3_co@2:
; Line 47180
	mov	al, 2
$LN18@sqlite3_co@2:
; Line 47185
	lea	esi, DWORD PTR [esi+edi-1]
$LN1@sqlite3_co@2:
; Line 47193
	movzx	eax, al
	movzx	edx, bl
	mov	bl, BYTE PTR ?trans@?1??sqlite3_complete@@9@9[eax+edx*8]
	mov	al, BYTE PTR [esi+1]
; Line 47194
	add	esi, 1
	test	al, al
	jne	$LL51@sqlite3_co@2
	pop	edi
; Line 47196
	xor	eax, eax
	test	bl, bl
	pop	esi
	sete	al
	pop	ebx
; Line 47197
	ret	0
$LN86@sqlite3_co@2:
	DD	$LN46@sqlite3_co@2
	DD	$LN30@sqlite3_co@2
	DD	$LN39@sqlite3_co@2
	DD	$LN45@sqlite3_co@2
	DD	$LN47@sqlite3_co@2
	DD	$LN34@sqlite3_co@2
	DD	$LN26@sqlite3_co@2
$LN74@sqlite3_co@2:
	DB	0
	DB	0
	DB	6
	DB	0
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	0
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
$LN87@sqlite3_co@2:
	DD	$LN17@sqlite3_co@2
	DD	$LN7@sqlite3_co@2
	DD	$LN14@sqlite3_co@2
	DD	$LN2@sqlite3_co@2
$LN75@sqlite3_co@2:
	DB	0
	DB	3
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	3
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
_sqlite3_complete ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3GetFuncCollSeq
_TEXT	SEGMENT
_sqlite3GetFuncCollSeq PROC				; COMDAT
; _context$ = eax
; Line 47719
	mov	eax, DWORD PTR [eax+80]
; Line 47720
	ret	0
_sqlite3GetFuncCollSeq ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ReadUtf8
_TEXT	SEGMENT
_sqlite3ReadUtf8 PROC					; COMDAT
; _z$ = edx
; Line 48091
	movzx	eax, BYTE PTR [edx]
	add	edx, 1
	cmp	eax, 192				; 000000c0H
	jb	SHORT $LN2@sqlite3Rea
	movzx	ecx, BYTE PTR [edx]
	push	esi
	movzx	esi, BYTE PTR _sqlite3UtfTrans1[eax-192]
	mov	al, cl
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	SHORT $LN3@sqlite3Rea
$LL4@sqlite3Rea:
	and	ecx, 63					; 0000003fH
	shl	esi, 6
	add	edx, 1
	add	esi, ecx
	mov	cl, BYTE PTR [edx]
	mov	al, cl
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	je	SHORT $LL4@sqlite3Rea
$LN3@sqlite3Rea:
	cmp	esi, 128				; 00000080H
	jb	SHORT $LN1@sqlite3Rea
	mov	ecx, esi
	and	ecx, -2048				; fffff800H
	cmp	ecx, 55296				; 0000d800H
	je	SHORT $LN1@sqlite3Rea
	mov	edx, esi
	and	edx, -2					; fffffffeH
	cmp	edx, 65534				; 0000fffeH
	jne	SHORT $LN10@sqlite3Rea
$LN1@sqlite3Rea:
	mov	eax, 65533				; 0000fffdH
	pop	esi
; Line 48093
	ret	0
$LN10@sqlite3Rea:
; Line 48092
	mov	eax, esi
	pop	esi
$LN2@sqlite3Rea:
; Line 48093
	ret	0
_sqlite3ReadUtf8 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _patternCompare
_TEXT	SEGMENT
_matchOne$ = -12					; size = 1
_matchSet$ = -11					; size = 1
_noCase$ = -10						; size = 1
_matchAll$ = -9						; size = 1
_prevEscape$ = -8					; size = 4
_invert$ = -4						; size = 4
_seen$ = 8						; size = 4
_zPattern$ = 8						; size = 4
_zString$ = 12						; size = 4
_pInfo$ = 16						; size = 4
_esc$ = 20						; size = 4
_patternCompare PROC					; COMDAT
; Line 48128
	sub	esp, 12					; 0000000cH
; Line 48133
	mov	eax, DWORD PTR _pInfo$[esp+8]
	movzx	ecx, BYTE PTR [eax+1]
; Line 48135
	mov	dl, BYTE PTR [eax+2]
	push	ebx
	push	ebp
	push	esi
; Line 48139
	mov	esi, DWORD PTR _zString$[esp+20]
	push	edi
	mov	edi, DWORD PTR _zPattern$[esp+24]
	mov	bl, BYTE PTR [edi]
	mov	BYTE PTR _matchOne$[esp+28], cl
	mov	cl, BYTE PTR [eax]
	mov	al, BYTE PTR [eax+3]
	movzx	ebp, bl
	mov	BYTE PTR _noCase$[esp+28], al
	xor	eax, eax
	test	ebp, ebp
	mov	BYTE PTR _matchAll$[esp+28], cl
	mov	BYTE PTR _matchSet$[esp+28], dl
	mov	DWORD PTR _prevEscape$[esp+28], eax
	je	$LN72@patternCom
$LL73@patternCom:
; Line 48140
	test	eax, eax
	jne	SHORT $LN147@patternCom
	movzx	edx, cl
	cmp	ebp, edx
	je	$LN134@patternCom
; Line 48175
	movzx	ecx, BYTE PTR _matchOne$[esp+28]
	cmp	ebp, ecx
	jne	SHORT $LN147@patternCom
; Line 48176
	mov	al, BYTE PTR [esi]
	test	al, al
	je	$LN96@patternCom
; Line 48177
	add	esi, 1
	cmp	al, 192					; 000000c0H
	jb	SHORT $LN32@patternCom
	mov	dl, BYTE PTR [esi]
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN32@patternCom
$LL33@patternCom:
	mov	al, BYTE PTR [esi+1]
	add	esi, 1
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	je	SHORT $LL33@patternCom
$LN32@patternCom:
; Line 48178
	add	edi, 1
	jmp	$LN5@patternCom
$LN147@patternCom:
; Line 48179
	movzx	ecx, BYTE PTR _matchSet$[esp+28]
	cmp	ebp, ecx
	jne	$LN30@patternCom
; Line 48180
	xor	ebx, ebx
; Line 48184
	mov	edx, esi
	mov	DWORD PTR _seen$[esp+24], ebx
	mov	DWORD PTR _invert$[esp+28], ebx
	call	_sqlite3ReadUtf8
	mov	ebp, eax
; Line 48185
	test	ebp, ebp
	je	$LN96@patternCom
; Line 48186
	mov	ecx, 1
	movzx	eax, BYTE PTR [edi+ecx]
	add	edi, ecx
; Line 48187
	cmp	eax, 94					; 0000005eH
	jne	SHORT $LN28@patternCom
	movzx	eax, BYTE PTR [edi+ecx]
	add	edi, ecx
	mov	DWORD PTR _invert$[esp+28], ecx
$LN28@patternCom:
; Line 48188
	cmp	eax, 93					; 0000005dH
	jne	SHORT $LN87@patternCom
; Line 48189
	cmp	ebp, eax
	jne	SHORT $LN26@patternCom
	mov	DWORD PTR _seen$[esp+24], ecx
$LN26@patternCom:
; Line 48190
	add	edi, ecx
$LN87@patternCom:
; Line 48192
	mov	edx, edi
	call	_sqlite3ReadUtf8
	test	eax, eax
	je	$LN96@patternCom
	npad	7
$LL25@patternCom:
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN24@patternCom
; Line 48193
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN23@patternCom
	mov	cl, BYTE PTR [edi+1]
	cmp	cl, 93					; 0000005dH
	je	SHORT $LN23@patternCom
	test	cl, cl
	je	SHORT $LN23@patternCom
	test	ebx, ebx
	jle	SHORT $LN23@patternCom
	add	edi, 1
; Line 48196
	cmp	ebp, ebx
	jl	SHORT $LN22@patternCom
	mov	edx, edi
	call	_sqlite3ReadUtf8
	cmp	ebp, eax
	jg	SHORT $LN22@patternCom
	mov	DWORD PTR _seen$[esp+24], 1
$LN22@patternCom:
; Line 48197
	xor	ebx, ebx
	jmp	SHORT $LN19@patternCom
$LN23@patternCom:
; Line 48198
	cmp	ebp, eax
; Line 48200
	mov	ebx, eax
	jne	SHORT $LN19@patternCom
; Line 48199
	mov	DWORD PTR _seen$[esp+24], 1
$LN19@patternCom:
; Line 48204
	mov	dl, BYTE PTR [edi]
	add	edi, 1
	cmp	dl, 192					; 000000c0H
	jb	SHORT $LN16@patternCom
	mov	al, BYTE PTR [edi]
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	SHORT $LN16@patternCom
	npad	8
$LL17@patternCom:
	mov	cl, BYTE PTR [edi+1]
	add	edi, 1
	and	cl, 192					; 000000c0H
	cmp	cl, 128					; 00000080H
	je	SHORT $LL17@patternCom
$LN16@patternCom:
; Line 48192
	mov	edx, edi
	call	_sqlite3ReadUtf8
	test	eax, eax
	jne	SHORT $LL25@patternCom
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 48224
	add	esp, 12					; 0000000cH
	ret	0
$LN24@patternCom:
; Line 48206
	mov	eax, DWORD PTR _invert$[esp+28]
	xor	eax, DWORD PTR _seen$[esp+24]
	je	$LN96@patternCom
; Line 48207
	mov	dl, BYTE PTR [esi]
	add	esi, 1
	cmp	dl, 192					; 000000c0H
	jb	SHORT $LN11@patternCom
	mov	al, BYTE PTR [esi]
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	SHORT $LN11@patternCom
$LL12@patternCom:
	mov	cl, BYTE PTR [esi+1]
	add	esi, 1
	and	cl, 192					; 000000c0H
	cmp	cl, 128					; 00000080H
	je	SHORT $LL12@patternCom
$LN11@patternCom:
; Line 48208
	add	edi, 1
	jmp	SHORT $LN5@patternCom
$LN30@patternCom:
; Line 48209
	cmp	DWORD PTR _esc$[esp+24], 0
	je	SHORT $LN146@patternCom
	test	eax, eax
	jne	SHORT $LN146@patternCom
	mov	edx, edi
	call	_sqlite3ReadUtf8
	cmp	eax, DWORD PTR _esc$[esp+24]
	jne	SHORT $LN146@patternCom
; Line 48211
	add	edi, 1
	cmp	bl, 192					; 000000c0H
	mov	DWORD PTR _prevEscape$[esp+28], 1
	jb	SHORT $LN5@patternCom
	mov	dl, BYTE PTR [edi]
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN5@patternCom
$LL7@patternCom:
	mov	al, BYTE PTR [edi+1]
	add	edi, 1
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	je	SHORT $LL7@patternCom
; Line 48212
	jmp	SHORT $LN5@patternCom
$LN146@patternCom:
; Line 48213
	cmp	BYTE PTR _noCase$[esp+28], 0
	je	SHORT $LN4@patternCom
; Line 48214
	movzx	ecx, BYTE PTR [esi]
	mov	dl, BYTE PTR _sqlite3UpperToLower[ebp]
	cmp	dl, BYTE PTR _sqlite3UpperToLower[ecx]
; Line 48215
	jmp	SHORT $LN151@patternCom
$LN4@patternCom:
; Line 48216
	movzx	eax, BYTE PTR [esi]
	cmp	ebp, eax
$LN151@patternCom:
	jne	$LN96@patternCom
; Line 48218
	add	edi, 1
; Line 48219
	add	esi, 1
; Line 48220
	mov	DWORD PTR _prevEscape$[esp+28], 0
$LN5@patternCom:
	mov	bl, BYTE PTR [edi]
	movzx	ebp, bl
	test	ebp, ebp
	je	$LN72@patternCom
	mov	cl, BYTE PTR _matchAll$[esp+28]
	mov	eax, DWORD PTR _prevEscape$[esp+28]
	jmp	$LL73@patternCom
$LN134@patternCom:
; Line 48147
	movzx	edx, cl
	mov	cl, BYTE PTR _matchOne$[esp+28]
$LL70@patternCom:
	movzx	ebx, BYTE PTR [edi+1]
	cmp	ebx, edx
	je	SHORT $LN68@patternCom
	movzx	eax, cl
	cmp	ebx, eax
	jne	SHORT $LN69@patternCom
$LN68@patternCom:
; Line 48142
	movzx	eax, cl
	cmp	ebx, eax
	jne	SHORT $LN63@patternCom
; Line 48143
	mov	al, BYTE PTR [esi]
	test	al, al
	je	$LN96@patternCom
; Line 48144
	add	esi, 1
	cmp	al, 192					; 000000c0H
	jb	SHORT $LN63@patternCom
	mov	al, BYTE PTR [esi]
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	SHORT $LN63@patternCom
$LL64@patternCom:
	mov	al, BYTE PTR [esi+1]
	add	esi, 1
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	je	SHORT $LL64@patternCom
$LN63@patternCom:
; Line 48147
	add	edi, 1
	jmp	SHORT $LL70@patternCom
$LN69@patternCom:
; Line 48148
	test	ebx, ebx
	je	SHORT $LN118@patternCom
	cmp	DWORD PTR _esc$[esp+24], 0
	je	SHORT $LN62@patternCom
	lea	ebp, DWORD PTR [edi+1]
	mov	edx, ebp
	call	_sqlite3ReadUtf8
	cmp	eax, DWORD PTR _esc$[esp+24]
	jne	SHORT $LN62@patternCom
; Line 48149
	mov	eax, ebp
; Line 48150
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	cmp	cl, 192					; 000000c0H
	jb	SHORT $LN59@patternCom
	mov	dl, BYTE PTR [eax]
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN59@patternCom
$LL60@patternCom:
	mov	cl, BYTE PTR [eax+1]
	add	eax, 1
	and	cl, 192					; 000000c0H
	cmp	cl, 128					; 00000080H
	je	SHORT $LL60@patternCom
$LN59@patternCom:
; Line 48151
	movzx	ebx, BYTE PTR [eax]
$LN62@patternCom:
; Line 48153
	test	ebx, ebx
	jne	SHORT $LN58@patternCom
$LN118@patternCom:
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 48224
	add	esp, 12					; 0000000cH
	ret	0
$LN58@patternCom:
; Line 48154
	movzx	edx, BYTE PTR _matchSet$[esp+28]
	cmp	ebx, edx
	jne	SHORT $LN81@patternCom
; Line 48156
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN55@patternCom
	add	edi, 1
	npad	6
$LL56@patternCom:
	mov	eax, DWORD PTR _esc$[esp+24]
	mov	ecx, DWORD PTR _pInfo$[esp+24]
	push	eax
	push	ecx
	push	esi
	push	edi
	call	_patternCompare
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN55@patternCom
; Line 48157
	mov	dl, BYTE PTR [esi]
	add	esi, 1
	cmp	dl, 192					; 000000c0H
	jb	SHORT $LN52@patternCom
	mov	al, BYTE PTR [esi]
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	SHORT $LN52@patternCom
	npad	6
$LL53@patternCom:
	mov	cl, BYTE PTR [esi+1]
	add	esi, 1
	and	cl, 192					; 000000c0H
	cmp	cl, 128					; 00000080H
	je	SHORT $LL53@patternCom
$LN52@patternCom:
; Line 48156
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LL56@patternCom
$LN55@patternCom:
; Line 48159
	xor	eax, eax
	cmp	BYTE PTR [esi], al
	pop	edi
	pop	esi
	pop	ebp
	setne	al
	pop	ebx
; Line 48224
	add	esp, 12					; 0000000cH
	ret	0
$LN81@patternCom:
; Line 48161
	movzx	eax, BYTE PTR [esi]
	test	eax, eax
	je	$LN96@patternCom
	npad	3
$LL50@patternCom:
; Line 48162
	cmp	BYTE PTR _noCase$[esp+28], 0
	je	SHORT $LL44@patternCom
; Line 48163
	movzx	eax, BYTE PTR _sqlite3UpperToLower[eax]
; Line 48165
	test	eax, eax
	movzx	ebx, BYTE PTR _sqlite3UpperToLower[ebx]
	je	$LN96@patternCom
	npad	3
$LL47@patternCom:
	cmp	eax, ebx
	je	SHORT $LN148@patternCom
	movzx	edx, BYTE PTR [esi+1]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[edx]
	add	esi, 1
	test	eax, eax
	jne	SHORT $LL47@patternCom
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 48224
	add	esp, 12					; 0000000cH
	ret	0
	npad	2
$LL44@patternCom:
; Line 48167
	cmp	eax, ebx
	je	SHORT $LN148@patternCom
	movzx	eax, BYTE PTR [esi+1]
	add	esi, 1
	test	eax, eax
	jne	SHORT $LL44@patternCom
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 48224
	add	esp, 12					; 0000000cH
	ret	0
$LN148@patternCom:
; Line 48169
	test	eax, eax
	je	SHORT $LN96@patternCom
; Line 48170
	mov	eax, DWORD PTR _esc$[esp+24]
	mov	ecx, DWORD PTR _pInfo$[esp+24]
	push	eax
	push	ecx
	lea	edx, DWORD PTR [edi+1]
	push	esi
	push	edx
	call	_patternCompare
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN118@patternCom
; Line 48171
	mov	al, BYTE PTR [esi]
	add	esi, 1
	cmp	al, 192					; 000000c0H
	jb	SHORT $LN38@patternCom
	mov	cl, BYTE PTR [esi]
	and	cl, 192					; 000000c0H
	cmp	cl, 128					; 00000080H
	jne	SHORT $LN38@patternCom
	npad	3
$LL39@patternCom:
	mov	dl, BYTE PTR [esi+1]
	add	esi, 1
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	je	SHORT $LL39@patternCom
$LN38@patternCom:
; Line 48161
	movzx	eax, BYTE PTR [esi]
	test	eax, eax
	jne	$LL50@patternCom
$LN96@patternCom:
	pop	edi
	pop	esi
	pop	ebp
; Line 48143
	xor	eax, eax
	pop	ebx
; Line 48224
	add	esp, 12					; 0000000cH
	ret	0
$LN72@patternCom:
; Line 48223
	xor	eax, eax
	cmp	BYTE PTR [esi], al
	pop	edi
	pop	esi
	pop	ebp
	sete	al
	pop	ebx
; Line 48224
	add	esp, 12					; 0000000cH
	ret	0
_patternCompare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _selectReadsTable
_TEXT	SEGMENT
_p$ = 8							; size = 4
_pSchema$ = 12						; size = 4
_iTab$ = 16						; size = 4
_selectReadsTable PROC					; COMDAT
; Line 49285
	mov	eax, DWORD PTR _p$[esp-4]
	mov	eax, DWORD PTR [eax+12]
	test	eax, eax
	jne	SHORT $LN8@selectRead
; Line 49294
	ret	0
$LN8@selectRead:
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 49286
	xor	edi, edi
	cmp	WORD PTR [eax], di
	jle	SHORT $LN5@selectRead
	mov	ebp, DWORD PTR _iTab$[esp+12]
	mov	ebx, DWORD PTR _pSchema$[esp+12]
	lea	esi, DWORD PTR [eax+20]
$LL15@selectRead:
; Line 49287
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@selectRead
; Line 49288
	push	ebp
	push	ebx
	push	eax
	call	_selectReadsTable
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@selectRead
$LN13@selectRead:
	pop	edi
	pop	esi
	pop	ebp
; Line 49290
	mov	eax, 1
	pop	ebx
; Line 49294
	ret	0
$LN4@selectRead:
; Line 49290
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+76], ebx
	jne	SHORT $LN6@selectRead
	cmp	DWORD PTR [eax+20], ebp
	je	SHORT $LN13@selectRead
$LN6@selectRead:
; Line 49286
	mov	ecx, DWORD PTR _p$[esp+12]
	mov	edx, DWORD PTR [ecx+12]
	movsx	eax, WORD PTR [edx]
	add	edi, 1
	add	esi, 48					; 00000030H
	cmp	edi, eax
	jl	SHORT $LL15@selectRead
$LN5@selectRead:
	pop	edi
	pop	esi
	pop	ebp
; Line 49293
	xor	eax, eax
	pop	ebx
; Line 49294
	ret	0
_selectReadsTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _xferCompatibleCollation
_TEXT	SEGMENT
_xferCompatibleCollation PROC				; COMDAT
; _z1$ = ecx
; _z2$ = edx
; Line 50459
	test	ecx, ecx
	jne	SHORT $LN2@xferCompat
; Line 50460
	xor	eax, eax
	test	edx, edx
	sete	al
; Line 50466
	ret	0
$LN2@xferCompat:
; Line 50462
	test	edx, edx
	jne	SHORT $LN1@xferCompat
; Line 50463
	xor	eax, eax
; Line 50466
	ret	0
$LN1@xferCompat:
; Line 50465
	call	_sqlite3StrICmp
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 50466
	ret	0
_xferCompatibleCollation ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _xferCompatibleIndex
_TEXT	SEGMENT
_xferCompatibleIndex PROC				; COMDAT
; _pDest$ = esi
; _pSrc$ = edx
; Line 50483
	mov	ecx, DWORD PTR [edx+4]
	cmp	DWORD PTR [esi+4], ecx
	je	SHORT $LN8@xferCompat@2
$LN19@xferCompat@2:
; Line 50484
	xor	eax, eax
; Line 50503
	ret	0
$LN8@xferCompat@2:
; Line 50486
	mov	al, BYTE PTR [esi+24]
	cmp	al, BYTE PTR [edx+24]
; Line 50487
	jne	SHORT $LN19@xferCompat@2
	push	ebx
	push	ebp
; Line 50489
	xor	eax, eax
	test	ecx, ecx
	push	edi
	jle	SHORT $LN4@xferCompat@2
	mov	edi, DWORD PTR [edx+8]
	mov	ebp, DWORD PTR [esi+8]
	sub	ebp, edi
$LL6@xferCompat@2:
; Line 50490
	mov	ebx, DWORD PTR [edi+eax*4]
	lea	ecx, DWORD PTR [edi+eax*4]
	cmp	ebx, DWORD PTR [ecx+ebp]
	jne	SHORT $LN14@xferCompat@2
; Line 50493
	mov	ebx, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [esi+40]
	mov	bl, BYTE PTR [eax+ebx]
	cmp	bl, BYTE PTR [eax+ecx]
	jne	SHORT $LN14@xferCompat@2
; Line 50496
	mov	ebx, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [esi+44]
	mov	ebx, DWORD PTR [ebx+eax*4]
	cmp	ebx, DWORD PTR [ecx+eax*4]
	jne	SHORT $LN14@xferCompat@2
	add	eax, 1
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LL6@xferCompat@2
$LN4@xferCompat@2:
	pop	edi
	pop	ebp
; Line 50502
	mov	eax, 1
	pop	ebx
; Line 50503
	ret	0
$LN14@xferCompat@2:
	pop	edi
	pop	ebp
; Line 50497
	xor	eax, eax
	pop	ebx
; Line 50503
	ret	0
_xferCompatibleIndex ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_enable_load_extension
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_enable_load_extension
_TEXT	SEGMENT
_db$ = 8						; size = 4
_onoff$ = 12						; size = 4
_sqlite3_enable_load_extension PROC			; COMDAT
; Line 51527
	cmp	DWORD PTR _onoff$[esp-4], 0
; Line 51528
	mov	eax, DWORD PTR _db$[esp-4]
	je	SHORT $LN2@sqlite3_en
	or	DWORD PTR [eax+8], 131072		; 00020000H
; Line 51532
	xor	eax, eax
; Line 51533
	ret	0
$LN2@sqlite3_en:
; Line 51530
	and	DWORD PTR [eax+8], -131073		; fffdffffH
; Line 51532
	xor	eax, eax
; Line 51533
	ret	0
_sqlite3_enable_load_extension ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _getSafetyLevel
_TEXT	SEGMENT
_getSafetyLevel PROC					; COMDAT
; _z$ = ebx
; Line 51661
	movsx	eax, BYTE PTR [ebx]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@getSafetyL
; Line 51662
	push	ebx
	call	_atoi
	add	esp, 4
; Line 51671
	ret	0
$LN5@getSafetyL:
; Line 51664
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL11@getSafetyL:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL11@getSafetyL
	push	esi
	sub	eax, edx
	push	edi
	mov	edi, eax
; Line 51665
	xor	esi, esi
$LL4@getSafetyL:
; Line 51666
	movzx	ecx, BYTE PTR ?iLength@?1??getSafetyLevel@@9@9[esi]
	cmp	ecx, edi
	jne	SHORT $LN3@getSafetyL
	movzx	ecx, BYTE PTR ?iOffset@?1??getSafetyLevel@@9@9[esi]
	add	ecx, OFFSET ?zText@?1??getSafetyLevel@@9@9
	mov	eax, edi
	mov	edx, ebx
	call	_sqlite3StrNICmp
	test	eax, eax
	je	SHORT $LN9@getSafetyL
$LN3@getSafetyL:
; Line 51665
	add	esi, 1
	cmp	esi, 7
	jb	SHORT $LL4@getSafetyL
	pop	edi
; Line 51670
	mov	eax, 1
	pop	esi
; Line 51671
	ret	0
$LN9@getSafetyL:
; Line 51667
	movzx	eax, BYTE PTR ?iValue@?1??getSafetyLevel@@9@9[esi]
	pop	edi
	pop	esi
; Line 51671
	ret	0
_getSafetyLevel ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _getBoolean
_TEXT	SEGMENT
_getBoolean PROC					; COMDAT
; _z$ = ebx
; Line 51677
	call	_getSafetyLevel
	and	eax, 1
; Line 51678
	ret	0
_getBoolean ENDP
_TEXT	ENDS
PUBLIC	??_C@_06IKLLLDHL@normal?$AA@			; `string'
PUBLIC	??_C@_09JJPHINFN@exclusive?$AA@			; `string'
;	COMDAT ??_C@_06IKLLLDHL@normal?$AA@
CONST	SEGMENT
??_C@_06IKLLLDHL@normal?$AA@ DB 'normal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JJPHINFN@exclusive?$AA@
CONST	SEGMENT
??_C@_09JJPHINFN@exclusive?$AA@ DB 'exclusive', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _getLockingMode
_TEXT	SEGMENT
_getLockingMode PROC					; COMDAT
; _z$ = esi
; Line 51684
	test	esi, esi
	je	SHORT $LN1@getLocking
; Line 51685
	mov	edx, OFFSET ??_C@_09JJPHINFN@exclusive?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN2@getLocking
	mov	eax, 1
; Line 51689
	ret	0
$LN2@getLocking:
; Line 51686
	mov	edx, OFFSET ??_C@_06IKLLLDHL@normal?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN1@getLocking
; Line 51689
	ret	0
$LN1@getLocking:
; Line 51688
	or	eax, -1
; Line 51689
	ret	0
_getLockingMode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@LPKHOAFP@incremental?$AA@		; `string'
PUBLIC	??_C@_04PLMLMMEO@full?$AA@			; `string'
PUBLIC	??_C@_04CGFJFPFD@none?$AA@			; `string'
;	COMDAT ??_C@_0M@LPKHOAFP@incremental?$AA@
CONST	SEGMENT
??_C@_0M@LPKHOAFP@incremental?$AA@ DB 'incremental', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PLMLMMEO@full?$AA@
CONST	SEGMENT
??_C@_04PLMLMMEO@full?$AA@ DB 'full', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CGFJFPFD@none?$AA@
CONST	SEGMENT
??_C@_04CGFJFPFD@none?$AA@ DB 'none', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _getAutoVacuum
_TEXT	SEGMENT
_getAutoVacuum PROC					; COMDAT
; _z$ = esi
; Line 51700
	mov	edx, OFFSET ??_C@_04CGFJFPFD@none?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN3@getAutoVac
; Line 51705
	ret	0
$LN3@getAutoVac:
; Line 51701
	mov	edx, OFFSET ??_C@_04PLMLMMEO@full?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN2@getAutoVac
	mov	eax, 1
; Line 51705
	ret	0
$LN2@getAutoVac:
; Line 51702
	mov	edx, OFFSET ??_C@_0M@LPKHOAFP@incremental?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN1@getAutoVac
	mov	eax, 2
; Line 51705
	ret	0
$LN1@getAutoVac:
; Line 51703
	push	esi
	call	_atoi
	mov	ecx, eax
; Line 51704
	mov	eax, 2
	add	esp, 4
	cmp	eax, ecx
	sbb	eax, eax
	not	eax
	and	eax, ecx
; Line 51705
	ret	0
_getAutoVacuum ENDP
_TEXT	ENDS
PUBLIC	??_C@_06HLKELJGF@memory?$AA@			; `string'
PUBLIC	??_C@_04DAMGJPCA@file?$AA@			; `string'
;	COMDAT ??_C@_06HLKELJGF@memory?$AA@
CONST	SEGMENT
??_C@_06HLKELJGF@memory?$AA@ DB 'memory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DAMGJPCA@file?$AA@
CONST	SEGMENT
??_C@_04DAMGJPCA@file?$AA@ DB 'file', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _getTempStore
_TEXT	SEGMENT
_getTempStore PROC					; COMDAT
; _z$ = esi
; Line 51715
	mov	al, BYTE PTR [esi]
	cmp	al, 48					; 00000030H
	jl	SHORT $LN6@getTempSto
	cmp	al, 50					; 00000032H
	jg	SHORT $LN6@getTempSto
; Line 51716
	movsx	eax, al
	sub	eax, 48					; 00000030H
; Line 51724
	ret	0
$LN6@getTempSto:
; Line 51717
	mov	edx, OFFSET ??_C@_04DAMGJPCA@file?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN4@getTempSto
; Line 51718
	mov	eax, 1
; Line 51724
	ret	0
$LN4@getTempSto:
; Line 51719
	mov	edx, OFFSET ??_C@_06HLKELJGF@memory?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	neg	eax
	sbb	eax, eax
	and	eax, -2					; fffffffeH
	add	eax, 2
; Line 51724
	ret	0
_getTempStore ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SchemaToIndex
_TEXT	SEGMENT
_sqlite3SchemaToIndex PROC				; COMDAT
; _db$ = ecx
; _pSchema$ = esi
; Line 53191
	test	esi, esi
	mov	eax, -1000000				; fff0bdc0H
	je	SHORT $LN9@sqlite3Sch
	mov	edx, DWORD PTR [ecx]
; Line 53192
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN9@sqlite3Sch
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 20					; 00000014H
$LL4@sqlite3Sch:
; Line 53193
	cmp	DWORD PTR [ecx], esi
	je	SHORT $LN9@sqlite3Sch
	add	eax, 1
	add	ecx, 24					; 00000018H
	cmp	eax, edx
	jl	SHORT $LL4@sqlite3Sch
$LN9@sqlite3Sch:
; Line 53200
	ret	0
_sqlite3SchemaToIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _columnIndex
_TEXT	SEGMENT
_zCol$ = 8						; size = 4
_columnIndex PROC					; COMDAT
; _pTab$ = ecx
; Line 53620
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR [ecx+4]
	push	esi
; Line 53622
	xor	eax, eax
	test	ebp, ebp
	push	edi
	jle	SHORT $LN2@columnInde
	mov	edi, DWORD PTR [ecx+8]
$LL18@columnInde:
; Line 53623
	mov	edx, DWORD PTR [edi]
	mov	cl, BYTE PTR [edx]
	test	cl, cl
	mov	esi, DWORD PTR _zCol$[esp+12]
	je	SHORT $LN16@columnInde
	npad	4
$LL8@columnInde:
	movzx	ebx, BYTE PTR [esi]
	movzx	ecx, cl
	mov	cl, BYTE PTR _sqlite3UpperToLower[ecx]
	cmp	cl, BYTE PTR _sqlite3UpperToLower[ebx]
	jne	SHORT $LN16@columnInde
	mov	cl, BYTE PTR [edx+1]
	add	edx, 1
	add	esi, 1
	test	cl, cl
	jne	SHORT $LL8@columnInde
$LN16@columnInde:
	movzx	edx, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [esi]
	movzx	ecx, BYTE PTR _sqlite3UpperToLower[ecx]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[edx]
	sub	edx, ecx
	je	SHORT $LN5@columnInde
	add	eax, 1
	add	edi, 20					; 00000014H
	cmp	eax, ebp
	jl	SHORT $LL18@columnInde
$LN2@columnInde:
; Line 53625
	or	eax, -1
$LN5@columnInde:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 53626
	ret	0
_columnIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _setToken
_TEXT	SEGMENT
_setToken PROC						; COMDAT
; _p$ = esi
; _z$ = eax
; Line 53633
	test	eax, eax
	mov	DWORD PTR [esi], eax
	je	SHORT $LN3@setToken
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL5@setToken:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL5@setToken
	sub	eax, edx
; Line 53634
	add	eax, eax
	mov	DWORD PTR [esi+4], eax
; Line 53635
	ret	0
$LN3@setToken:
; Line 53633
	xor	eax, eax
; Line 53634
	mov	eax, eax
	mov	DWORD PTR [esi+4], eax
; Line 53635
	ret	0
_setToken ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _setJoinExpr
_TEXT	SEGMENT
_p$ = 8							; size = 4
_iTable$ = 12						; size = 4
_setJoinExpr PROC					; COMDAT
; Line 53713
	push	esi
; Line 53714
	mov	esi, DWORD PTR _p$[esp]
	test	esi, esi
	je	SHORT $LN1@setJoinExp
	push	edi
	mov	edi, DWORD PTR _iTable$[esp+4]
	npad	2
$LL2@setJoinExp:
; Line 53717
	mov	eax, DWORD PTR [esi+8]
	or	WORD PTR [esi+2], 1
	push	edi
	push	eax
	mov	DWORD PTR [esi+52], edi
	call	_setJoinExpr
; Line 53718
	mov	esi, DWORD PTR [esi+12]
	add	esp, 8
	test	esi, esi
	jne	SHORT $LL2@setJoinExp
	pop	edi
$LN1@setJoinExp:
	pop	esi
; Line 53720
	ret	0
_setJoinExpr ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KDMKNECD@rowid?$AA@			; `string'
PUBLIC	??_C@_07EHCIHKNF@INTEGER?$AA@			; `string'
PUBLIC	??_C@_04OEPMCOLO@TEXT?$AA@			; `string'
;	COMDAT ??_C@_05KDMKNECD@rowid?$AA@
CONST	SEGMENT
??_C@_05KDMKNECD@rowid?$AA@ DB 'rowid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EHCIHKNF@INTEGER?$AA@
CONST	SEGMENT
??_C@_07EHCIHKNF@INTEGER?$AA@ DB 'INTEGER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OEPMCOLO@TEXT?$AA@
CONST	SEGMENT
??_C@_04OEPMCOLO@TEXT?$AA@ DB 'TEXT', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _columnType
_TEXT	SEGMENT
_zType$ = -56						; size = 4
_zOriginCol$ = -52					; size = 4
_zOriginDb$ = -48					; size = 4
_zOriginTab$ = -44					; size = 4
_pS$98673 = -40						; size = 4
_sNC$98702 = -36					; size = 36
_sNC$98689 = -36					; size = 36
_pNC$ = 8						; size = 4
_pExpr$ = 12						; size = 4
_pzOriginDb$ = 16					; size = 4
_pzOriginTab$ = 20					; size = 4
_pzOriginCol$ = 24					; size = 4
_columnType PROC					; COMDAT
; Line 54266
	sub	esp, 56					; 00000038H
; Line 54272
	mov	eax, DWORD PTR _pExpr$[esp+52]
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	push	ebp
	mov	DWORD PTR _zType$[esp+64], ebx
	mov	DWORD PTR _zOriginDb$[esp+64], ebx
	mov	DWORD PTR _zOriginTab$[esp+64], ebx
	mov	DWORD PTR _zOriginCol$[esp+64], ebx
	je	$LN22@columnType
	mov	ebp, DWORD PTR _pNC$[esp+60]
	cmp	DWORD PTR [ebp+4], ebx
	je	$LN22@columnType
; Line 54274
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 110				; 0000006eH
	push	esi
	push	edi
	je	$LN2@columnType
	sub	ecx, 39					; 00000027H
	je	SHORT $LN19@columnType
	sub	ecx, 2
	jne	$LN32@columnType
$LN19@columnType:
; Line 54283
	mov	edi, DWORD PTR [eax+40]
	xor	ecx, ecx
	mov	DWORD PTR _pS$98673[esp+72], ecx
$LL18@columnType:
; Line 54284
	test	ebx, ebx
	jne	SHORT $LN31@columnType
; Line 54285
	mov	esi, DWORD PTR [ebp+4]
; Line 54286
	movsx	edx, WORD PTR [esi]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN14@columnType
	mov	ecx, DWORD PTR _pExpr$[esp+68]
	mov	ebp, DWORD PTR [ecx+36]
	lea	ecx, DWORD PTR [esi+32]
	npad	1
$LL16@columnType:
	cmp	DWORD PTR [ecx], ebp
	je	SHORT $LN29@columnType
	add	eax, 1
	add	ecx, 48					; 00000030H
	cmp	eax, edx
	jl	SHORT $LL16@columnType
$LN29@columnType:
	mov	ebp, DWORD PTR _pNC$[esp+68]
	mov	ecx, DWORD PTR _pS$98673[esp+72]
$LN14@columnType:
; Line 54287
	cmp	eax, edx
	jge	SHORT $LN13@columnType
; Line 54288
	lea	edx, DWORD PTR [eax+eax*2]
	shl	edx, 4
; Line 54289
	mov	ecx, DWORD PTR [edx+esi+24]
	mov	ebx, DWORD PTR [edx+esi+20]
	lea	eax, DWORD PTR [edx+esi]
	mov	DWORD PTR _pS$98673[esp+72], ecx
; Line 54290
	jmp	SHORT $LN12@columnType
$LN13@columnType:
; Line 54291
	mov	ebp, DWORD PTR [ebp+32]
	mov	DWORD PTR _pNC$[esp+68], ebp
$LN12@columnType:
; Line 54284
	test	ebp, ebp
	jne	SHORT $LL18@columnType
; Line 54295
	test	ebx, ebx
	jne	SHORT $LN31@columnType
; Line 54306
	mov	DWORD PTR _zType$[esp+72], OFFSET ??_C@_04OEPMCOLO@TEXT?$AA@
; Line 54307
	jmp	$LN32@columnType
$LN31@columnType:
; Line 54311
	test	ecx, ecx
	je	SHORT $LN10@columnType
; Line 54316
	test	edi, edi
	jl	$LN32@columnType
	mov	eax, DWORD PTR [ecx]
	cmp	edi, DWORD PTR [eax]
	jge	$LN32@columnType
; Line 54322
	mov	eax, DWORD PTR [eax+12]
; Line 54323
	mov	ecx, DWORD PTR [ecx+12]
	lea	edx, DWORD PTR [edi+edi*2]
	mov	eax, DWORD PTR [eax+edx*4]
; Line 54325
	mov	edx, DWORD PTR [ebp]
	mov	DWORD PTR _sNC$98689[esp+76], ecx
; Line 54326
	lea	ecx, DWORD PTR _zOriginCol$[esp+72]
	push	ecx
	mov	DWORD PTR _sNC$98689[esp+76], edx
	lea	edx, DWORD PTR _zOriginTab$[esp+76]
	push	edx
	lea	ecx, DWORD PTR _zOriginDb$[esp+80]
	push	ecx
	push	eax
	lea	edx, DWORD PTR _sNC$98689[esp+88]
	mov	DWORD PTR _sNC$98689[esp+120], 0
	push	edx
; Line 54327
	jmp	$LN33@columnType
$LN10@columnType:
; Line 54328
	cmp	DWORD PTR [ebx+76], 0
	je	$LN32@columnType
; Line 54331
	test	edi, edi
	jge	SHORT $LN5@columnType
	mov	edi, DWORD PTR [ebx+12]
; Line 54333
	test	edi, edi
	jge	SHORT $LN5@columnType
; Line 54334
	mov	DWORD PTR _zType$[esp+72], OFFSET ??_C@_07EHCIHKNF@INTEGER?$AA@
; Line 54335
	mov	DWORD PTR _zOriginCol$[esp+72], OFFSET ??_C@_05KDMKNECD@rowid?$AA@
; Line 54336
	jmp	SHORT $LN4@columnType
$LN5@columnType:
; Line 54337
	mov	ecx, DWORD PTR [ebx+8]
	lea	eax, DWORD PTR [edi+edi*4]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	lea	eax, DWORD PTR [ecx+eax*4]
; Line 54338
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _zType$[esp+72], edx
	mov	DWORD PTR _zOriginCol$[esp+72], eax
$LN4@columnType:
; Line 54340
	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _zOriginTab$[esp+72], ecx
; Line 54341
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	SHORT $LN32@columnType
; Line 54342
	mov	edi, DWORD PTR [eax]
	mov	esi, DWORD PTR [ebx+76]
	mov	ecx, edi
	call	_sqlite3SchemaToIndex
; Line 54343
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _zOriginDb$[esp+72], ecx
; Line 54346
	jmp	SHORT $LN32@columnType
$LN2@columnType:
; Line 54355
	mov	eax, DWORD PTR [eax+56]
; Line 54356
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+12]
; Line 54357
	mov	edx, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [ecx]
; Line 54359
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR _sNC$98702[esp+76], edx
; Line 54360
	lea	edx, DWORD PTR _zOriginCol$[esp+72]
	push	edx
	mov	DWORD PTR _sNC$98702[esp+76], eax
	lea	eax, DWORD PTR _zOriginTab$[esp+76]
	push	eax
	lea	edx, DWORD PTR _zOriginDb$[esp+80]
	push	edx
	push	ecx
	lea	eax, DWORD PTR _sNC$98702[esp+88]
	mov	DWORD PTR _sNC$98702[esp+120], ebp
	push	eax
$LN33@columnType:
	call	_columnType
	mov	DWORD PTR _zType$[esp+92], eax
	add	esp, 20					; 00000014H
$LN32@columnType:
; Line 54366
	mov	eax, DWORD PTR _pzOriginDb$[esp+68]
	test	eax, eax
	pop	edi
	pop	esi
	je	SHORT $LN1@columnType
; Line 54368
	mov	ecx, DWORD PTR _zOriginDb$[esp+64]
; Line 54369
	mov	edx, DWORD PTR _pzOriginTab$[esp+60]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _zOriginTab$[esp+64]
; Line 54370
	mov	ecx, DWORD PTR _pzOriginCol$[esp+60]
	mov	DWORD PTR [edx], eax
	mov	edx, DWORD PTR _zOriginCol$[esp+64]
	mov	DWORD PTR [ecx], edx
$LN1@columnType:
; Line 54372
	mov	eax, DWORD PTR _zType$[esp+64]
	pop	ebp
	pop	ebx
; Line 54373
	add	esp, 56					; 00000038H
	ret	0
$LN22@columnType:
	pop	ebp
; Line 54272
	xor	eax, eax
	pop	ebx
; Line 54373
	add	esp, 56					; 00000038H
	ret	0
_columnType ENDP
_TEXT	ENDS
PUBLIC	??_C@_09CDPONBKL@UNION?5ALL?$AA@		; `string'
PUBLIC	??_C@_06JFIPMMLD@EXCEPT?$AA@			; `string'
PUBLIC	??_C@_09JBOBNLLF@INTERSECT?$AA@			; `string'
PUBLIC	??_C@_05GJNJOPB@UNION?$AA@			; `string'
;	COMDAT ??_C@_09CDPONBKL@UNION?5ALL?$AA@
CONST	SEGMENT
??_C@_09CDPONBKL@UNION?5ALL?$AA@ DB 'UNION ALL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JFIPMMLD@EXCEPT?$AA@
CONST	SEGMENT
??_C@_06JFIPMMLD@EXCEPT?$AA@ DB 'EXCEPT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JBOBNLLF@INTERSECT?$AA@
CONST	SEGMENT
??_C@_09JBOBNLLF@INTERSECT?$AA@ DB 'INTERSECT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJNJOPB@UNION?$AA@
CONST	SEGMENT
??_C@_05GJNJOPB@UNION?$AA@ DB 'UNION', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _selectOpName
_TEXT	SEGMENT
_selectOpName PROC					; COMDAT
; _id$ = eax
; Line 54490
	sub	eax, 107				; 0000006bH
	je	SHORT $LN4@selectOpNa
	sub	eax, 1
	je	SHORT $LN2@selectOpNa
	sub	eax, 1
	je	SHORT $LN3@selectOpNa
; Line 54494
	mov	eax, OFFSET ??_C@_05GJNJOPB@UNION?$AA@
; Line 54497
	ret	0
$LN3@selectOpNa:
; Line 54492
	mov	eax, OFFSET ??_C@_09JBOBNLLF@INTERSECT?$AA@
; Line 54497
	ret	0
$LN2@selectOpNa:
; Line 54493
	mov	eax, OFFSET ??_C@_06JFIPMMLD@EXCEPT?$AA@
; Line 54497
	ret	0
$LN4@selectOpNa:
; Line 54491
	mov	eax, OFFSET ??_C@_09CDPONBKL@UNION?5ALL?$AA@
; Line 54497
	ret	0
_selectOpName ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _substSelect
_TEXT	SEGMENT
tv361 = -4						; size = 4
tv349 = -4						; size = 4
tv337 = -4						; size = 4
_p$ = 8							; size = 4
_substSelect PROC					; COMDAT
; _iTable$ = edi
; _pEList$ = esi
; Line 55527
	push	ecx
; Line 55528
	cmp	DWORD PTR _p$[esp], 0
	je	$LN74@substSelec
	push	ebx
	push	ebp
	npad	2
$LL79@substSelec:
; Line 55529
	mov	eax, DWORD PTR _p$[esp+8]
	mov	ebx, DWORD PTR [eax]
	xor	ebp, ebp
	cmp	ebx, ebp
	je	SHORT $LN4@substSelec
	cmp	DWORD PTR [ebx], ebp
	jle	SHORT $LN4@substSelec
	mov	DWORD PTR tv337[esp+12], ebp
$LL82@substSelec:
	mov	ecx, DWORD PTR [ebx+12]
	mov	edx, DWORD PTR tv337[esp+12]
	mov	eax, DWORD PTR [edx+ecx]
	push	esi
	push	edi
	push	eax
	call	_substExpr
	add	DWORD PTR tv337[esp+24], 12		; 0000000cH
	add	ebp, 1
	add	esp, 12					; 0000000cH
	cmp	ebp, DWORD PTR [ebx]
	jl	SHORT $LL82@substSelec
$LN4@substSelec:
; Line 55530
	mov	ecx, DWORD PTR _p$[esp+8]
	mov	ebx, DWORD PTR [ecx+20]
	xor	ebp, ebp
	cmp	ebx, ebp
	je	SHORT $LN10@substSelec
	cmp	DWORD PTR [ebx], ebp
	jle	SHORT $LN10@substSelec
	mov	DWORD PTR tv349[esp+12], ebp
	npad	6
$LL81@substSelec:
	mov	edx, DWORD PTR [ebx+12]
	mov	eax, DWORD PTR tv349[esp+12]
	mov	ecx, DWORD PTR [eax+edx]
	push	esi
	push	edi
	push	ecx
	call	_substExpr
	add	DWORD PTR tv349[esp+24], 12		; 0000000cH
	add	ebp, 1
	add	esp, 12					; 0000000cH
	cmp	ebp, DWORD PTR [ebx]
	jl	SHORT $LL81@substSelec
$LN10@substSelec:
; Line 55531
	mov	edx, DWORD PTR _p$[esp+8]
	mov	ebx, DWORD PTR [edx+28]
	xor	ebp, ebp
	cmp	ebx, ebp
	je	SHORT $LN16@substSelec
	cmp	DWORD PTR [ebx], ebp
	jle	SHORT $LN16@substSelec
	mov	DWORD PTR tv361[esp+12], ebp
$LL80@substSelec:
	mov	eax, DWORD PTR [ebx+12]
	mov	ecx, DWORD PTR tv361[esp+12]
	mov	edx, DWORD PTR [ecx+eax]
	push	esi
	push	edi
	push	edx
	call	_substExpr
	add	DWORD PTR tv361[esp+24], 12		; 0000000cH
	add	ebp, 1
	add	esp, 12					; 0000000cH
	cmp	ebp, DWORD PTR [ebx]
	jl	SHORT $LL80@substSelec
$LN16@substSelec:
; Line 55532
	mov	eax, DWORD PTR _p$[esp+8]
	mov	ecx, DWORD PTR [eax+24]
	push	esi
	push	edi
	push	ecx
	call	_substExpr
; Line 55533
	mov	ebx, DWORD PTR _p$[esp+20]
	mov	edx, DWORD PTR [ebx+16]
	push	esi
	push	edi
	push	edx
	call	_substExpr
; Line 55534
	mov	eax, DWORD PTR [ebx+32]
	add	esp, 24					; 00000018H
	test	eax, eax
	mov	DWORD PTR _p$[esp+8], eax
	jne	$LL79@substSelec
	pop	ebp
	pop	ebx
$LN74@substSelec:
; Line 55535
	pop	ecx
	ret	0
_substSelect ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _tableOfTrigger
_TEXT	SEGMENT
_tableOfTrigger PROC					; COMDAT
; _pTrigger$ = edx
; Line 57607
	push	ebx
; Line 57608
	mov	ebx, DWORD PTR [edx+4]
	push	esi
	mov	eax, ebx
	push	edi
	lea	esi, DWORD PTR [eax+1]
	npad	5
$LL13@tableOfTri:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL13@tableOfTri
	sub	eax, esi
; Line 57609
	mov	esi, DWORD PTR [edx+32]
	add	esi, 4
	lea	edi, DWORD PTR [eax+1]
	je	SHORT $LN14@tableOfTri
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN14@tableOfTri
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN9@tableOfTri
	mov	eax, OFFSET _binHash
$LN9@tableOfTri:
	push	edi
	push	ebx
	call	eax
	mov	edx, DWORD PTR [esi+20]
	sub	edx, 1
	push	edi
	and	edx, eax
	push	ebx
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN14@tableOfTri
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
; Line 57610
	ret	0
$LN14@tableOfTri:
	pop	edi
	pop	esi
; Line 57609
	xor	eax, eax
	pop	ebx
; Line 57610
	ret	0
_tableOfTrigger ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _checkColumnOverLap
_TEXT	SEGMENT
_pIdList$ = 8						; size = 4
_checkColumnOverLap PROC				; COMDAT
; _pEList$ = eax
; Line 57705
	push	ebp
	mov	ebp, DWORD PTR _pIdList$[esp]
; Line 57707
	test	ebp, ebp
	je	SHORT $LN5@checkColum
	test	eax, eax
	je	SHORT $LN5@checkColum
	push	ebx
	mov	ebx, DWORD PTR [eax]
	push	esi
; Line 57708
	xor	esi, esi
	test	ebx, ebx
	push	edi
	jle	SHORT $LN2@checkColum
	mov	edi, DWORD PTR [eax+12]
	add	edi, 4
	npad	2
$LL4@checkColum:
; Line 57709
	mov	eax, DWORD PTR [edi]
	push	eax
	mov	eax, ebp
	call	_sqlite3IdListIndex
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN10@checkColum
	add	esi, 1
	add	edi, 12					; 0000000cH
	cmp	esi, ebx
	jl	SHORT $LL4@checkColum
$LN2@checkColum:
	pop	edi
	pop	esi
	pop	ebx
; Line 57711
	xor	eax, eax
	pop	ebp
; Line 57712
	ret	0
$LN10@checkColum:
	pop	edi
	pop	esi
	pop	ebx
; Line 57709
	mov	eax, 1
	pop	ebp
; Line 57712
	ret	0
$LN5@checkColum:
; Line 57707
	mov	eax, 1
	pop	ebp
; Line 57712
	ret	0
_checkColumnOverLap ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3TriggersExist
_TEXT	SEGMENT
_op$ = 8						; size = 4
_sqlite3TriggersExist PROC				; COMDAT
; _pTab$ = eax
; _pChanges$ = ebx
; Line 57728
	push	ebp
	mov	ebp, DWORD PTR _op$[esp]
	push	edi
; Line 57730
	xor	edi, edi
; Line 57732
	cmp	BYTE PTR [eax+57], 0
	jne	SHORT $LN11@sqlite3Tri
	push	esi
	mov	esi, DWORD PTR [eax+32]
; Line 57733
	test	esi, esi
	je	SHORT $LN10@sqlite3Tri
$LL3@sqlite3Tri:
; Line 57734
	movzx	eax, BYTE PTR [esi+8]
	cmp	eax, ebp
	jne	SHORT $LN12@sqlite3Tri
	mov	ecx, DWORD PTR [esi+16]
	push	ecx
	mov	eax, ebx
	call	_checkColumnOverLap
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@sqlite3Tri
; Line 57735
	movzx	edx, BYTE PTR [esi+9]
	or	edi, edx
$LN12@sqlite3Tri:
; Line 57737
	mov	esi, DWORD PTR [esi+40]
	test	esi, esi
	jne	SHORT $LL3@sqlite3Tri
$LN10@sqlite3Tri:
	pop	esi
; Line 57739
	mov	eax, edi
	pop	edi
	pop	ebp
; Line 57740
	ret	0
$LN11@sqlite3Tri:
; Line 57739
	mov	eax, edi
	pop	edi
	pop	ebp
; Line 57740
	ret	0
_sqlite3TriggersExist ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabLock
_TEXT	SEGMENT
_sqlite3VtabLock PROC					; COMDAT
; _pVtab$ = eax
; Line 58890
	add	DWORD PTR [eax+4], 1
; Line 58891
	ret	0
_sqlite3VtabLock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabUnlock
_TEXT	SEGMENT
_sqlite3VtabUnlock PROC					; COMDAT
; _db$ = esi
; _pVtab$ = eax
; Line 58898
	add	DWORD PTR [eax+4], -1
; Line 58901
	jne	SHORT $LN1@sqlite3Vta
; Line 58902
	cmp	DWORD PTR [esi+48], -264537850		; f03b7906H
; Line 58904
	push	eax
	jne	SHORT $LN2@sqlite3Vta
	mov	DWORD PTR [esi+48], -1607883113		; a029a697H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
; Line 58905
	mov	eax, DWORD PTR [esi+48]
	add	esp, 4
	cmp	eax, -1607883113			; a029a697H
	jne	SHORT $LN12@sqlite3Vta
	mov	DWORD PTR [esi+48], -264537850		; f03b7906H
; Line 58910
	ret	0
; Line 58905
$LN12@sqlite3Vta:
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN1@sqlite3Vta
	mov	DWORD PTR [esi+48], -1254786768		; b5357930H
	mov	DWORD PTR [esi+152], 1
; Line 58910
	ret	0
$LN2@sqlite3Vta:
; Line 58907
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	pop	ecx
$LN1@sqlite3Vta:
; Line 58910
	ret	0
_sqlite3VtabUnlock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabArgExtend
_TEXT	SEGMENT
_sqlite3VtabArgExtend PROC				; COMDAT
; _pParse$ = eax
; _p$ = ecx
; Line 59125
	mov	edx, DWORD PTR [eax+180]
	test	edx, edx
	jne	SHORT $LN2@sqlite3Vta@2
; Line 59126
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+180], edx
; Line 59127
	mov	edx, DWORD PTR [ecx+4]
	xor	edx, DWORD PTR [eax+184]
	and	edx, 1
	xor	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+184], edx
; Line 59132
	ret	0
$LN2@sqlite3Vta@2:
	push	esi
; Line 59130
	mov	esi, DWORD PTR [ecx+4]
	shr	esi, 1
	sub	esi, edx
	add	esi, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [eax+184]
	add	esi, esi
	and	ecx, 1
	xor	esi, ecx
	mov	DWORD PTR [eax+184], esi
	pop	esi
; Line 59132
	ret	0
_sqlite3VtabArgExtend ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabCallDestroy
_TEXT	SEGMENT
_zTab$ = 8						; size = 4
_sqlite3VtabCallDestroy PROC				; COMDAT
; _db$ = esi
; _iDb$ = eax
; Line 59346
	mov	ecx, DWORD PTR [esi+4]
	push	ebx
	mov	ebx, DWORD PTR _zTab$[esp]
	push	ebp
	lea	eax, DWORD PTR [eax+eax*2]
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edi
	push	edx
	push	esi
	xor	ebp, ebp
	call	_sqlite3FindTable
	mov	edi, eax
	add	esp, 8
; Line 59348
	cmp	DWORD PTR [edi+64], ebp
	je	SHORT $LN16@sqlite3Vta@3
; Line 59350
	cmp	DWORD PTR [esi+48], -264537850		; f03b7906H
	mov	eax, DWORD PTR [edi+60]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+20]
	mov	ebp, -1254786768			; b5357930H
	mov	ebx, 1
	jne	SHORT $LN7@sqlite3Vta@3
	mov	DWORD PTR [esi+48], -1607883113		; a029a697H
	xor	eax, eax
	jmp	SHORT $LN6@sqlite3Vta@3
$LN7@sqlite3Vta@3:
	mov	DWORD PTR [esi+48], ebp
	mov	DWORD PTR [esi+152], ebx
	mov	eax, ebx
$LN6@sqlite3Vta@3:
; Line 59352
	test	ecx, ecx
	je	SHORT $LN2@sqlite3Vta@3
; Line 59353
	mov	edx, DWORD PTR [edi+64]
	push	edx
	call	ecx
	add	esp, 4
$LN2@sqlite3Vta@3:
; Line 59355
	mov	ecx, DWORD PTR [esi+48]
	cmp	ecx, -1607883113			; a029a697H
	jne	SHORT $LN12@sqlite3Vta@3
	mov	DWORD PTR [esi+48], -264537850		; f03b7906H
	jmp	SHORT $LN10@sqlite3Vta@3
$LN12@sqlite3Vta@3:
	cmp	ecx, -264537850				; f03b7906H
	jne	SHORT $LN10@sqlite3Vta@3
	mov	DWORD PTR [esi+48], ebp
	mov	DWORD PTR [esi+152], ebx
$LN10@sqlite3Vta@3:
; Line 59356
	test	eax, eax
	jne	SHORT $LN1@sqlite3Vta@3
; Line 59357
	mov	DWORD PTR [edi+64], eax
	pop	edi
	pop	ebp
	pop	ebx
; Line 59362
	ret	0
$LN16@sqlite3Vta@3:
; Line 59361
	mov	eax, ebp
$LN1@sqlite3Vta@3:
	pop	edi
	pop	ebp
	pop	ebx
; Line 59362
	ret	0
_sqlite3VtabCallDestroy ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabSync
_TEXT	SEGMENT
_sqlite3VtabSync PROC					; COMDAT
; _db$ = esi
; _rc2$ = eax
; Line 59394
	push	ebx
; Line 59398
	mov	ebx, DWORD PTR [esi+212]
	push	edi
; Line 59399
	xor	edi, edi
	cmp	eax, edi
	jne	$LN7@sqlite3Vta@4
; Line 59401
	cmp	DWORD PTR [esi+48], -264537850		; f03b7906H
	jne	SHORT $LN10@sqlite3Vta@4
	mov	DWORD PTR [esi+48], -1607883113		; a029a697H
	xor	eax, eax
	jmp	SHORT $LN9@sqlite3Vta@4
$LN10@sqlite3Vta@4:
	mov	DWORD PTR [esi+48], -1254786768		; b5357930H
	mov	DWORD PTR [esi+152], 1
	mov	eax, 1
$LN9@sqlite3Vta@4:
; Line 59403
	cmp	eax, edi
	mov	DWORD PTR [esi+212], edi
	jne	SHORT $LN3@sqlite3Vta@4
$LL20@sqlite3Vta@4:
	cmp	edi, DWORD PTR [esi+216]
	jge	SHORT $LN3@sqlite3Vta@4
	mov	ecx, DWORD PTR [ebx+edi*4]
	test	ecx, ecx
	je	SHORT $LN3@sqlite3Vta@4
; Line 59406
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+60]
; Line 59407
	test	edx, edx
	je	SHORT $LN4@sqlite3Vta@4
; Line 59408
	push	ecx
	call	edx
	add	esp, 4
$LN4@sqlite3Vta@4:
	add	edi, 1
	test	eax, eax
	je	SHORT $LL20@sqlite3Vta@4
$LN3@sqlite3Vta@4:
; Line 59412
	mov	ecx, DWORD PTR [esi+48]
	cmp	ecx, -1607883113			; a029a697H
	mov	DWORD PTR [esi+212], ebx
	jne	SHORT $LN15@sqlite3Vta@4
	mov	DWORD PTR [esi+48], -264537850		; f03b7906H
	xor	ecx, ecx
	jmp	SHORT $LN16@sqlite3Vta@4
$LN15@sqlite3Vta@4:
	cmp	ecx, -264537850				; f03b7906H
	jne	SHORT $LN13@sqlite3Vta@4
	mov	DWORD PTR [esi+48], -1254786768		; b5357930H
	mov	DWORD PTR [esi+152], 1
$LN13@sqlite3Vta@4:
	mov	ecx, 1
$LN16@sqlite3Vta@4:
; Line 59414
	test	eax, eax
	jne	SHORT $LN7@sqlite3Vta@4
; Line 59415
	mov	eax, ecx
$LN7@sqlite3Vta@4:
	pop	edi
	pop	ebx
; Line 59418
	ret	0
_sqlite3VtabSync ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _whereClauseInit
_TEXT	SEGMENT
_whereClauseInit PROC					; COMDAT
; _pWC$ = eax
; _pParse$ = ecx
; _pMaskSet$ = edx
; Line 59745
	mov	DWORD PTR [eax], ecx
; Line 59749
	lea	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 10			; 0000000aH
	mov	DWORD PTR [eax+16], ecx
; Line 59750
	ret	0
_whereClauseInit ENDP
_TEXT	ENDS
EXTRN	__allshl:PROC
; Function compile flags: /Ogtpy
;	COMDAT _getMask
_TEXT	SEGMENT
_getMask PROC						; COMDAT
; _pMaskSet$ = edx
; _iCursor$ = esi
; Line 59844
	mov	eax, DWORD PTR [edx]
; Line 59846
	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN2@getMask
	add	edx, 4
	npad	5
$LL4@getMask:
; Line 59847
	cmp	DWORD PTR [edx], esi
	je	SHORT $LN8@getMask
	add	ecx, 1
	add	edx, 4
	cmp	ecx, eax
	jl	SHORT $LL4@getMask
$LN2@getMask:
; Line 59851
	xor	eax, eax
	xor	edx, edx
; Line 59852
	ret	0
$LN8@getMask:
; Line 59848
	mov	eax, 1
	xor	edx, edx
	jmp	__allshl
_getMask ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _createMask
_TEXT	SEGMENT
_createMask PROC					; COMDAT
; _pMaskSet$ = eax
; _iCursor$ = edx
; Line 59864
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax+ecx*4+4], edx
	add	DWORD PTR [eax], 1
; Line 59865
	ret	0
_createMask ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _exprSelectTableUsage
_TEXT	SEGMENT
tv302 = -20						; size = 4
_i$107204 = -16						; size = 4
_mask$ = -16						; size = 8
_mask$107224 = -8					; size = 8
_mask$107186 = -8					; size = 8
_pMaskSet$ = 8						; size = 4
_pS$ = 12						; size = 4
_exprSelectTableUsage PROC				; COMDAT
; Line 59908
	mov	eax, DWORD PTR _pS$[esp-4]
	sub	esp, 20					; 00000014H
	xor	edx, edx
	cmp	eax, edx
	push	ebp
	mov	ebp, DWORD PTR _pMaskSet$[esp+20]
	jne	SHORT $LN2@exprSelect
; Line 59909
	xor	eax, eax
	pop	ebp
; Line 59918
	add	esp, 20					; 00000014H
	ret	0
$LN2@exprSelect:
	push	ebx
	push	esi
; Line 59911
	mov	esi, DWORD PTR [eax]
	cmp	esi, edx
	push	edi
	mov	DWORD PTR _mask$107186[esp+36], edx
	mov	DWORD PTR _mask$107186[esp+40], edx
	je	SHORT $LN5@exprSelect
	xor	edi, edi
	cmp	DWORD PTR [esi], edx
	jle	SHORT $LN5@exprSelect
	xor	ebx, ebx
$LL7@exprSelect:
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [ebx+eax]
	push	ecx
	push	ebp
	call	_exprTableUsage
	or	DWORD PTR _mask$107186[esp+44], eax
	or	DWORD PTR _mask$107186[esp+48], edx
	add	edi, 1
	add	esp, 8
	add	ebx, 12					; 0000000cH
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LL7@exprSelect
	mov	eax, DWORD PTR _pS$[esp+32]
	xor	edx, edx
$LN5@exprSelect:
; Line 59912
	mov	ebx, DWORD PTR [eax+20]
	xor	esi, esi
	xor	edi, edi
	cmp	ebx, edx
	je	SHORT $LN21@exprSelect
	cmp	DWORD PTR [ebx], edx
	mov	DWORD PTR _i$107204[esp+36], edx
	jle	SHORT $LN21@exprSelect
	mov	DWORD PTR tv302[esp+36], edx
$LL79@exprSelect:
	mov	edx, DWORD PTR [ebx+12]
	mov	eax, DWORD PTR tv302[esp+36]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	push	ebp
	call	_exprTableUsage
	add	DWORD PTR tv302[esp+44], 12		; 0000000cH
	or	esi, eax
	mov	eax, DWORD PTR _i$107204[esp+44]
	add	eax, 1
	add	esp, 8
	or	edi, edx
	cmp	eax, DWORD PTR [ebx]
	mov	DWORD PTR _i$107204[esp+36], eax
	jl	SHORT $LL79@exprSelect
	mov	eax, DWORD PTR _pS$[esp+32]
	xor	edx, edx
$LN21@exprSelect:
	or	esi, DWORD PTR _mask$107186[esp+36]
	or	edi, DWORD PTR _mask$107186[esp+40]
	mov	ebx, esi
; Line 59913
	mov	esi, DWORD PTR [eax+28]
	cmp	esi, edx
	mov	DWORD PTR _mask$[esp+36], ebx
	mov	DWORD PTR _mask$[esp+40], edi
	mov	DWORD PTR _mask$107224[esp+36], edx
	mov	DWORD PTR _mask$107224[esp+40], edx
	je	SHORT $LN37@exprSelect
	xor	edi, edi
	cmp	DWORD PTR [esi], edx
	jle	SHORT $LN37@exprSelect
	xor	ebx, ebx
	npad	4
$LL39@exprSelect:
	mov	edx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [edx+ebx]
	push	eax
	push	ebp
	call	_exprTableUsage
	or	DWORD PTR _mask$107224[esp+44], eax
	or	DWORD PTR _mask$107224[esp+48], edx
	add	edi, 1
	add	esp, 8
	add	ebx, 12					; 0000000cH
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LL39@exprSelect
	mov	eax, DWORD PTR _pS$[esp+32]
	mov	ebx, DWORD PTR _mask$[esp+36]
$LN37@exprSelect:
; Line 59914
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	ebp
	call	_exprTableUsage
	or	edx, DWORD PTR _mask$107224[esp+48]
	or	eax, DWORD PTR _mask$107224[esp+44]
	mov	esi, DWORD PTR _mask$[esp+48]
	or	esi, edx
; Line 59915
	mov	edx, DWORD PTR _pS$[esp+40]
	or	ebx, eax
	mov	eax, DWORD PTR [edx+24]
	push	eax
	push	ebp
	call	_exprTableUsage
	add	esp, 16					; 00000010H
	or	ebx, eax
	or	esi, edx
	pop	edi
; Line 59917
	mov	edx, esi
	pop	esi
	mov	eax, ebx
	pop	ebx
	pop	ebp
; Line 59918
	add	esp, 20					; 00000014H
	ret	0
_exprSelectTableUsage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _allowedOp
_TEXT	SEGMENT
_allowedOp PROC						; COMDAT
; _op$ = eax
; Line 59930
	cmp	eax, 64					; 00000040H
	je	SHORT $LN4@allowedOp
	cmp	eax, 68					; 00000044H
	jl	SHORT $LN3@allowedOp
	cmp	eax, 72					; 00000048H
	jle	SHORT $LN4@allowedOp
$LN3@allowedOp:
	cmp	eax, 65					; 00000041H
	je	SHORT $LN4@allowedOp
	xor	eax, eax
; Line 59931
	ret	0
$LN4@allowedOp:
; Line 59930
	mov	eax, 1
; Line 59931
	ret	0
_allowedOp ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _exprCommute
_TEXT	SEGMENT
_exprCommute PROC					; COMDAT
; _pExpr$ = eax
; Line 59944
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], esi
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+4], edx
; Line 59945
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+8], ecx
; Line 59946
	mov	cl, BYTE PTR [eax]
	cmp	cl, 69					; 00000045H
	mov	DWORD PTR [eax+12], edx
	pop	esi
	jb	SHORT $LN1@exprCommut@3
; Line 59952
	sub	cl, 69					; 00000045H
	xor	cl, 2
	add	cl, 69					; 00000045H
	mov	BYTE PTR [eax], cl
$LN1@exprCommut@3:
; Line 59954
	ret	0
_exprCommute ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _operatorMask
_TEXT	SEGMENT
_operatorMask PROC					; COMDAT
; _op$ = eax
; Line 59962
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN4@operatorMa
; Line 59963
	mov	eax, 1
; Line 59977
	ret	0
$LN4@operatorMa:
; Line 59964
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN2@operatorMa
; Line 59965
	mov	eax, 128				; 00000080H
; Line 59977
	ret	0
$LN2@operatorMa:
; Line 59967
	lea	ecx, DWORD PTR [eax-68]
	mov	eax, 2
	shl	eax, cl
; Line 59977
	ret	0
_operatorMask ENDP
_TEXT	ENDS
PUBLIC	??_C@_05FNONLPDI@match?$AA@			; `string'
;	COMDAT ??_C@_05FNONLPDI@match?$AA@
CONST	SEGMENT
??_C@_05FNONLPDI@match?$AA@ DB 'match', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _isMatchOfColumn
_TEXT	SEGMENT
_isMatchOfColumn PROC					; COMDAT
; _pExpr$ = esi
; Line 60122
	cmp	BYTE PTR [esi], 148			; 00000094H
; Line 60123
	jne	SHORT $LN3@isMatchOfC
; Line 60126
	mov	eax, DWORD PTR [esi+24]
	and	eax, -2					; fffffffeH
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN3@isMatchOfC
	mov	ecx, DWORD PTR [esi+20]
	mov	eax, 5
	mov	edx, OFFSET ??_C@_05FNONLPDI@match?$AA@
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	SHORT $LN3@isMatchOfC
; Line 60129
	mov	eax, DWORD PTR [esi+16]
; Line 60130
	cmp	DWORD PTR [eax], 2
; Line 60131
	jne	SHORT $LN3@isMatchOfC
; Line 60133
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	xor	eax, eax
	cmp	BYTE PTR [edx], 149			; 00000095H
	sete	al
; Line 60137
	ret	0
$LN3@isMatchOfC:
; Line 60127
	xor	eax, eax
; Line 60137
	ret	0
_isMatchOfColumn ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _transferJoinMarkings
_TEXT	SEGMENT
_transferJoinMarkings PROC				; COMDAT
; _pDerived$ = eax
; _pBase$ = ecx
; Line 60145
	movzx	edx, BYTE PTR [ecx+2]
	and	edx, 1
	or	WORD PTR [eax+2], dx
; Line 60146
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+52], ecx
; Line 60147
	ret	0
_transferJoinMarkings ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _orTermHasOkDuplicate
_TEXT	SEGMENT
_pOr$ = 8						; size = 4
_orTermHasOkDuplicate PROC				; COMDAT
; _pOrTerm$ = ecx
; Line 60219
	mov	al, BYTE PTR [ecx+12]
	test	al, 8
	je	SHORT $LN2@orTermHasO
$LN5@orTermHasO:
; Line 60222
	mov	eax, 1
; Line 60233
	ret	0
$LN2@orTermHasO:
; Line 60225
	test	al, 2
	je	SHORT $LN1@orTermHasO
	movsx	eax, WORD PTR [ecx+4]
	mov	ecx, DWORD PTR _pOr$[esp-4]
	mov	edx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [eax+eax*4]
	test	BYTE PTR [edx+eax*8+12], 16		; 00000010H
; Line 60228
	jne	SHORT $LN5@orTermHasO
$LN1@orTermHasO:
; Line 60232
	xor	eax, eax
; Line 60233
	ret	0
_orTermHasOkDuplicate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _estLog
_TEXT	SEGMENT
_N$ = 8							; size = 8
_estLog	PROC						; COMDAT
; Line 60679
	fld1
	fld	ST(0)
; Line 60680
	fld	QWORD PTR __real@4024000000000000
	fld	ST(0)
; Line 60681
	fld	QWORD PTR _N$[esp-4]
	fcom	ST(2)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN2@estLog
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(1)
; Line 60686
	ret	0
$LN11@estLog:
; Line 60681
	fxch	ST(1)
	fxch	ST(3)
$LN2@estLog:
; Line 60682
	fxch	ST(3)
	fadd	ST(0), ST(4)
; Line 60683
	fxch	ST(1)
	fmul	ST(0), ST(2)
	fcom	ST(3)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN11@estLog
	fstp	ST(0)
	fstp	ST(1)
	fstp	ST(2)
	fstp	ST(0)
; Line 60686
	ret	0
_estLog	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _disableTerm
_TEXT	SEGMENT
_disableTerm PROC					; COMDAT
; _pLevel$ = esi
; _pTerm$ = eax
; Line 61217
	test	eax, eax
	je	SHORT $LN1@disableTer
	mov	dl, 255					; 000000ffH
	push	edi
$LL7@disableTer:
	mov	cl, BYTE PTR [eax+12]
	test	cl, 4
	jne	SHORT $LN10@disableTer
	cmp	DWORD PTR [esi+12], 0
	je	SHORT $LN3@disableTer
	mov	edi, DWORD PTR [eax]
	test	BYTE PTR [edi+2], 1
	je	SHORT $LN10@disableTer
$LN3@disableTer:
; Line 61218
	or	cl, 4
	mov	BYTE PTR [eax+12], cl
; Line 61219
	movzx	ecx, WORD PTR [eax+4]
	test	cx, cx
	jl	SHORT $LN10@disableTer
; Line 61220
	mov	eax, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [eax+16]
	movsx	ecx, cx
	lea	ecx, DWORD PTR [ecx+ecx*4]
; Line 61221
	add	BYTE PTR [eax+ecx*8+13], dl
	lea	eax, DWORD PTR [eax+ecx*8]
	je	SHORT $LL7@disableTer
$LN10@disableTer:
	pop	edi
$LN1@disableTer:
; Line 61226
	ret	0
_disableTerm ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ParserAlloc
_TEXT	SEGMENT
_mallocProc$ = 8					; size = 4
_sqlite3ParserAlloc PROC				; COMDAT
; Line 63549
	push	2012					; 000007dcH
	call	DWORD PTR _mallocProc$[esp]
	add	esp, 4
; Line 63550
	test	eax, eax
	je	SHORT $LN1@sqlite3Par
; Line 63551
	mov	DWORD PTR [eax], -1
$LN1@sqlite3Par:
; Line 63557
	ret	0
_sqlite3ParserAlloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _yy_find_shift_action
_TEXT	SEGMENT
_yy_find_shift_action PROC				; COMDAT
; _pParser$ = edx
; _iLookAhead$ = ecx
; Line 63696
	mov	eax, DWORD PTR [edx]
	lea	eax, DWORD PTR [eax+eax*4]
	push	esi
	mov	esi, DWORD PTR [edx+eax*4+12]
; Line 63698
	cmp	esi, 385				; 00000181H
	jg	SHORT $LN8@yy_find_sh@5
$LL12@yy_find_sh@5:
	movsx	eax, WORD PTR _yy_shift_ofst[esi*2]
	cmp	eax, -62				; ffffffc2H
	je	SHORT $LN8@yy_find_sh@5
; Line 63701
	cmp	cl, 248					; 000000f8H
	je	SHORT $LN15@yy_find_sh@5
; Line 63704
	movzx	edx, cl
	add	eax, edx
; Line 63705
	cmp	eax, 1348				; 00000544H
	ja	SHORT $LN5@yy_find_sh@5
	cmp	BYTE PTR _yy_lookahead[eax], cl
	je	SHORT $LN6@yy_find_sh@5
$LN5@yy_find_sh@5:
; Line 63706
	test	cl, cl
	jbe	SHORT $LN8@yy_find_sh@5
; Line 63710
	cmp	cl, 138					; 0000008aH
	jae	SHORT $LN3@yy_find_sh@5
	movzx	edx, BYTE PTR _yyFallback[edx]
	test	edx, edx
	je	SHORT $LN3@yy_find_sh@5
	cmp	esi, 385				; 00000181H
; Line 63717
	mov	cl, dl
	jle	SHORT $LL12@yy_find_sh@5
$LN8@yy_find_sh@5:
; Line 63699
	movzx	eax, WORD PTR _yy_default[esi*2]
	pop	esi
; Line 63739
	ret	0
$LN15@yy_find_sh@5:
; Line 63702
	mov	eax, 899				; 00000383H
	pop	esi
; Line 63739
	ret	0
$LN3@yy_find_sh@5:
; Line 63722
	movzx	ecx, cl
	sub	eax, ecx
	add	eax, 59					; 0000003bH
; Line 63723
	cmp	eax, 1348				; 00000544H
	ja	SHORT $LN8@yy_find_sh@5
	cmp	BYTE PTR _yy_lookahead[eax], 59		; 0000003bH
	jne	SHORT $LN8@yy_find_sh@5
$LN6@yy_find_sh@5:
; Line 63730
	movzx	eax, WORD PTR _yy_action[eax*2]
	pop	esi
; Line 63739
	ret	0
_yy_find_shift_action ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _yy_find_reduce_action
_TEXT	SEGMENT
_yy_find_reduce_action PROC				; COMDAT
; _stateno$ = edx
; _iLookAhead$ = ecx
; Line 63757
	cmp	edx, 288				; 00000120H
	jg	SHORT $LN5@yy_find_re
	movsx	eax, WORD PTR _yy_reduce_ofst[edx*2]
	cmp	eax, -165				; ffffff5bH
	je	SHORT $LN5@yy_find_re
; Line 63760
	cmp	cl, 248					; 000000f8H
	jne	SHORT $LN4@yy_find_re
; Line 63761
	mov	eax, 899				; 00000383H
; Line 63769
	ret	0
$LN4@yy_find_re:
	push	esi
; Line 63763
	movzx	esi, cl
	add	eax, esi
; Line 63764
	cmp	eax, 1348				; 00000544H
	pop	esi
	ja	SHORT $LN5@yy_find_re
	cmp	BYTE PTR _yy_lookahead[eax], cl
	jne	SHORT $LN5@yy_find_re
; Line 63767
	movzx	eax, WORD PTR _yy_action[eax*2]
; Line 63769
	ret	0
$LN5@yy_find_re:
; Line 63758
	movzx	eax, WORD PTR _yy_default[edx*2]
; Line 63769
	ret	0
_yy_find_reduce_action ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _keywordCode
_TEXT	SEGMENT
_keywordCode PROC					; COMDAT
; _z$ = ebx
; _n$ = edi
; Line 65586
	cmp	edi, 2
	jge	SHORT $LN5@keywordCod
	mov	eax, 23					; 00000017H
; Line 65596
	ret	0
$LN5@keywordCod:
; Line 65590
	movzx	ecx, BYTE PTR [ebx]
	movzx	eax, BYTE PTR [ebx+edi-1]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[eax]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[ecx]
	add	edx, edx
	lea	eax, DWORD PTR [eax+eax*2]
	add	edx, edx
	xor	eax, edx
	xor	eax, edi
	cdq
	mov	ecx, 127				; 0000007fH
	idiv	ecx
	push	esi
	movzx	esi, BYTE PTR ?aHash@?1??keywordCode@@9@9[edx]
	sub	esi, 1
	js	SHORT $LN2@keywordCod
$LL4@keywordCod:
; Line 65591
	movzx	edx, BYTE PTR ?aLen@?1??keywordCode@@9@9[esi]
	cmp	edx, edi
	jne	SHORT $LN3@keywordCod
	movzx	ecx, WORD PTR ?aOffset@?1??keywordCode@@9@9[esi*2]
	add	ecx, OFFSET ?zText@?1??keywordCode@@9@9
	mov	eax, edi
	mov	edx, ebx
	call	_sqlite3StrNICmp
	test	eax, eax
	je	SHORT $LN9@keywordCod
$LN3@keywordCod:
; Line 65590
	movzx	esi, BYTE PTR ?aNext@?1??keywordCode@@9@9[esi]
	sub	esi, 1
	jns	SHORT $LL4@keywordCod
$LN2@keywordCod:
; Line 65595
	mov	eax, 23					; 00000017H
	pop	esi
; Line 65596
	ret	0
$LN9@keywordCod:
; Line 65592
	movzx	eax, BYTE PTR ?aCode@?1??keywordCode@@9@9[esi]
	pop	esi
; Line 65596
	ret	0
_keywordCode ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3KeywordCode
_TEXT	SEGMENT
_sqlite3KeywordCode PROC				; COMDAT
; _z$ = ebx
; _n$ = edi
; Line 65598
	jmp	_keywordCode
_sqlite3KeywordCode ENDP
_TEXT	ENDS
EXTRN	_isxdigit:PROC
; Function compile flags: /Ogtpy
;	COMDAT _getToken
_TEXT	SEGMENT
_tokenType$ = 8						; size = 4
_getToken PROC						; COMDAT
; _z$ = eax
; Line 65657
	push	ebx
	mov	ebx, eax
; Line 65659
	mov	dl, BYTE PTR [ebx]
	movzx	ecx, dl
	push	ebp
	push	esi
	lea	eax, DWORD PTR [ecx-9]
	cmp	eax, 117				; 00000075H
	push	edi
	mov	edi, DWORD PTR _tokenType$[esp+12]
	ja	$LN16@getToken
	movzx	eax, BYTE PTR $LN183@getToken[eax]
	jmp	DWORD PTR $LN204@getToken[eax*4]
$LN120@getToken:
; Line 65661
	movzx	ecx, BYTE PTR [ebx+1]
	push	ecx
	mov	esi, 1
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN117@getToken
	npad	1
$LL119@getToken:
	movzx	edx, BYTE PTR [esi+ebx+1]
	add	esi, 1
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL119@getToken
$LN117@getToken:
; Line 65662
	mov	DWORD PTR [edi], 145			; 00000091H
$LN50@getToken:
	pop	edi
; Line 65663
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN116@getToken:
; Line 65666
	cmp	BYTE PTR [ebx+1], 45			; 0000002dH
	jne	SHORT $LN115@getToken
; Line 65667
	movzx	ecx, BYTE PTR [ebx+2]
	test	ecx, ecx
	mov	eax, 2
	je	SHORT $LN112@getToken
$LL114@getToken:
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN112@getToken
	movzx	ecx, BYTE PTR [eax+ebx+1]
	add	eax, 1
	test	ecx, ecx
	jne	SHORT $LL114@getToken
$LN112@getToken:
; Line 65668
	mov	DWORD PTR [edi], 147			; 00000093H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN115@getToken:
; Line 65671
	mov	DWORD PTR [edi], 79			; 0000004fH
	pop	edi
	pop	esi
	pop	ebp
; Line 65672
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN111@getToken:
; Line 65675
	mov	DWORD PTR [edi], 19			; 00000013H
	pop	edi
	pop	esi
	pop	ebp
; Line 65676
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN110@getToken:
; Line 65679
	mov	DWORD PTR [edi], 20			; 00000014H
	pop	edi
	pop	esi
	pop	ebp
; Line 65680
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN109@getToken:
; Line 65683
	mov	DWORD PTR [edi], 1
	pop	edi
	pop	esi
	pop	ebp
; Line 65684
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN108@getToken:
; Line 65687
	mov	DWORD PTR [edi], 78			; 0000004eH
	pop	edi
	pop	esi
	pop	ebp
; Line 65688
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN107@getToken:
; Line 65691
	mov	DWORD PTR [edi], 80			; 00000050H
	pop	edi
	pop	esi
	pop	ebp
; Line 65692
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN106@getToken:
; Line 65695
	cmp	BYTE PTR [ebx+1], 42			; 0000002aH
	jne	SHORT $LN104@getToken
	mov	cl, BYTE PTR [ebx+2]
	test	cl, cl
	je	SHORT $LN104@getToken
; Line 65699
	mov	eax, 3
	movzx	ecx, cl
$LL103@getToken:
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN100@getToken
	cmp	BYTE PTR [eax+ebx], 47			; 0000002fH
	je	SHORT $LN163@getToken
$LN100@getToken:
	movzx	ecx, BYTE PTR [eax+ebx]
	test	ecx, ecx
	je	SHORT $LN99@getToken
	add	eax, 1
	jmp	SHORT $LL103@getToken
$LN163@getToken:
; Line 65700
	add	eax, 1
$LN99@getToken:
; Line 65701
	mov	DWORD PTR [edi], 147			; 00000093H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN104@getToken:
; Line 65696
	mov	DWORD PTR [edi], 81			; 00000051H
	pop	edi
	pop	esi
	pop	ebp
; Line 65697
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN98@getToken:
; Line 65705
	mov	DWORD PTR [edi], 82			; 00000052H
	pop	edi
	pop	esi
	pop	ebp
; Line 65706
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN97@getToken:
; Line 65710
	xor	eax, eax
	mov	DWORD PTR [edi], 68			; 00000044H
	cmp	BYTE PTR [ebx+1], 61			; 0000003dH
	pop	edi
	sete	al
	pop	esi
	pop	ebp
	pop	ebx
	add	eax, 1
; Line 65911
	ret	0
$LN96@getToken:
; Line 65713
	movzx	eax, BYTE PTR [ebx+1]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN95@getToken
; Line 65714
	mov	DWORD PTR [edi], 70			; 00000046H
	pop	edi
	pop	esi
	pop	ebp
; Line 65715
	mov	eax, 2
	pop	ebx
; Line 65911
	ret	0
$LN95@getToken:
; Line 65716
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN93@getToken
; Line 65717
	mov	DWORD PTR [edi], 67			; 00000043H
	pop	edi
	pop	esi
	pop	ebp
; Line 65718
	mov	eax, 2
	pop	ebx
; Line 65911
	ret	0
$LN93@getToken:
; Line 65719
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN91@getToken
; Line 65720
	mov	DWORD PTR [edi], 76			; 0000004cH
	pop	edi
	pop	esi
	pop	ebp
; Line 65721
	mov	eax, 2
	pop	ebx
; Line 65911
	ret	0
$LN91@getToken:
; Line 65723
	mov	DWORD PTR [edi], 71			; 00000047H
	pop	edi
	pop	esi
	pop	ebp
; Line 65724
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN90@getToken:
; Line 65728
	movzx	eax, BYTE PTR [ebx+1]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN88@getToken
; Line 65729
	mov	DWORD PTR [edi], 72			; 00000048H
	pop	edi
	pop	esi
	pop	ebp
; Line 65730
	mov	eax, 2
	pop	ebx
; Line 65911
	ret	0
$LN88@getToken:
; Line 65731
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN86@getToken
; Line 65732
	mov	DWORD PTR [edi], 77			; 0000004dH
	pop	edi
	pop	esi
	pop	ebp
; Line 65733
	mov	eax, 2
	pop	ebx
; Line 65911
	ret	0
$LN86@getToken:
; Line 65735
	mov	DWORD PTR [edi], 69			; 00000045H
	pop	edi
	pop	esi
	pop	ebp
; Line 65736
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN85@getToken:
; Line 65740
	cmp	BYTE PTR [ebx+1], 61			; 0000003dH
; Line 65742
	mov	eax, 2
	je	SHORT $LN83@getToken
$LN68@getToken:
; Line 65741
	mov	DWORD PTR [edi], 144			; 00000090H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN83@getToken:
; Line 65744
	mov	DWORD PTR [edi], 67			; 00000043H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN82@getToken:
; Line 65749
	cmp	BYTE PTR [ebx+1], 124			; 0000007cH
	je	SHORT $LN80@getToken
; Line 65750
	mov	DWORD PTR [edi], 75			; 0000004bH
	pop	edi
	pop	esi
	pop	ebp
; Line 65751
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN80@getToken:
; Line 65753
	mov	DWORD PTR [edi], 83			; 00000053H
	pop	edi
	pop	esi
	pop	ebp
; Line 65754
	mov	eax, 2
	pop	ebx
; Line 65911
	ret	0
$LN79@getToken:
; Line 65758
	mov	DWORD PTR [edi], 22			; 00000016H
	pop	edi
	pop	esi
	pop	ebp
; Line 65759
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN77@getToken:
; Line 65762
	mov	DWORD PTR [edi], 74			; 0000004aH
	pop	edi
	pop	esi
	pop	ebp
; Line 65763
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN76@getToken:
; Line 65766
	mov	DWORD PTR [edi], 87			; 00000057H
	pop	edi
	pop	esi
	pop	ebp
; Line 65767
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN75@getToken:
; Line 65773
	movzx	esi, BYTE PTR [ebx+1]
	test	esi, esi
	mov	eax, 1
	je	SHORT $LN68@getToken
$LL74@getToken:
; Line 65774
	cmp	esi, ecx
	jne	SHORT $LN73@getToken
; Line 65775
	movzx	edx, BYTE PTR [ebx+eax+1]
	cmp	edx, ecx
	jne	SHORT $LN70@getToken
; Line 65776
	add	eax, 1
$LN73@getToken:
; Line 65773
	movzx	esi, BYTE PTR [eax+ebx+1]
	add	eax, 1
	test	esi, esi
	jne	SHORT $LL74@getToken
	mov	DWORD PTR [edi], 144			; 00000090H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN70@getToken:
; Line 65782
	test	esi, esi
	je	$LN68@getToken
; Line 65783
	mov	DWORD PTR [edi], 88			; 00000058H
	pop	edi
	pop	esi
	pop	ebp
; Line 65784
	add	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN67@getToken:
; Line 65792
	movzx	eax, BYTE PTR [ebx+1]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN65@getToken
; Line 65795
	mov	DWORD PTR [edi], 112			; 00000070H
	pop	edi
	pop	esi
	pop	ebp
; Line 65796
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN65@getToken:
; Line 65803
	mov	DWORD PTR [edi], 124			; 0000007cH
; Line 65804
	movzx	ecx, BYTE PTR [ebx]
	push	ecx
	xor	esi, esi
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN61@getToken
	npad	2
$LL63@getToken:
	movzx	edx, BYTE PTR [esi+ebx+1]
	add	esi, 1
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL63@getToken
$LN61@getToken:
; Line 65806
	cmp	BYTE PTR [esi+ebx], 46			; 0000002eH
	jne	SHORT $LN60@getToken
; Line 65808
	movzx	eax, BYTE PTR [esi+ebx+1]
	add	esi, 1
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN58@getToken
$LL59@getToken:
	movzx	ecx, BYTE PTR [esi+ebx+1]
	add	esi, 1
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL59@getToken
$LN58@getToken:
; Line 65809
	mov	DWORD PTR [edi], 125			; 0000007dH
$LN60@getToken:
; Line 65815
	mov	al, BYTE PTR [esi+ebx]
	cmp	al, 101					; 00000065H
	je	SHORT $LN56@getToken
	cmp	al, 69					; 00000045H
	jne	SHORT $LL51@getToken
$LN56@getToken:
	movzx	edx, BYTE PTR [esi+ebx+1]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN55@getToken
	mov	al, BYTE PTR [esi+ebx+1]
	cmp	al, 43					; 0000002bH
	je	SHORT $LN54@getToken
	cmp	al, 45					; 0000002dH
	jne	SHORT $LL51@getToken
$LN54@getToken:
	movzx	eax, BYTE PTR [esi+ebx+2]
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LL51@getToken
$LN55@getToken:
; Line 65817
	movzx	ecx, BYTE PTR [esi+ebx+2]
	add	esi, 2
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN52@getToken
	npad	5
$LL53@getToken:
	movzx	edx, BYTE PTR [esi+ebx+1]
	add	esi, 1
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL53@getToken
$LN52@getToken:
; Line 65818
	mov	DWORD PTR [edi], 125			; 0000007dH
	npad	5
$LL51@getToken:
; Line 65821
	movzx	eax, BYTE PTR [esi+ebx]
	test	al, al
	js	SHORT $LN49@getToken
	cmp	eax, 31					; 0000001fH
	jle	$LN50@getToken
	cmp	BYTE PTR _sqlite3IsIdChar[eax-32], 0
	je	$LN50@getToken
$LN49@getToken:
; Line 65822
	mov	DWORD PTR [edi], 144			; 00000090H
; Line 65823
	add	esi, 1
; Line 65824
	jmp	SHORT $LL51@getToken
$LN48@getToken:
; Line 65828
	cmp	dl, 93					; 0000005dH
	mov	eax, 1
	je	SHORT $LN45@getToken
$LL47@getToken:
	movzx	ecx, BYTE PTR [eax+ebx]
	test	ecx, ecx
	je	SHORT $LN45@getToken
	add	eax, 1
	cmp	ecx, 93					; 0000005dH
	jne	SHORT $LL47@getToken
$LN45@getToken:
; Line 65829
	mov	DWORD PTR [edi], 23			; 00000017H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN44@getToken:
; Line 65833
	mov	DWORD PTR [edi], 128			; 00000080H
; Line 65834
	movzx	eax, BYTE PTR [ebx+1]
	push	eax
	mov	esi, 1
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN41@getToken
	npad	6
$LL43@getToken:
	movzx	ecx, BYTE PTR [esi+ebx+1]
	add	esi, 1
	push	ecx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL43@getToken
$LN41@getToken:
	pop	edi
; Line 65835
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN40@getToken:
; Line 65838
	movzx	edx, BYTE PTR [ebx+1]
	push	edx
	mov	esi, 1
	call	_isdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN36@getToken
$LL39@getToken:
	movzx	eax, BYTE PTR [esi+ebx+1]
	add	esi, 1
	push	eax
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL39@getToken
; Line 65839
	cmp	esi, 1
	jle	SHORT $LN36@getToken
; Line 65842
	mov	DWORD PTR [edi], 127			; 0000007fH
	pop	edi
; Line 65843
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN36@getToken:
; Line 65854
	mov	DWORD PTR [edi], 128			; 00000080H
; Line 65855
	movzx	eax, BYTE PTR [ebx+1]
	xor	ebp, ebp
	test	eax, eax
	lea	esi, DWORD PTR [ebp+1]
	je	$LN164@getToken
	lea	ecx, DWORD PTR [ebp+58]
$LL34@getToken:
; Line 65856
	test	al, al
	js	SHORT $LN30@getToken
	cmp	eax, 31					; 0000001fH
	jle	SHORT $LN31@getToken
	cmp	BYTE PTR _sqlite3IsIdChar[eax-32], 0
	jne	SHORT $LN30@getToken
$LN31@getToken:
; Line 65859
	cmp	eax, 40					; 00000028H
	je	SHORT $LN173@getToken
; Line 65869
	cmp	eax, ecx
	jne	SHORT $LN22@getToken
	cmp	BYTE PTR [ebx+esi+1], cl
	jne	SHORT $LN22@getToken
; Line 65870
	add	esi, 1
; Line 65872
	jmp	SHORT $LN33@getToken
$LN30@getToken:
; Line 65857
	add	ebp, 1
$LN33@getToken:
; Line 65855
	movzx	eax, BYTE PTR [esi+ebx+1]
	add	esi, 1
	test	eax, eax
	jne	SHORT $LL34@getToken
	jmp	SHORT $LN22@getToken
$LN173@getToken:
; Line 65859
	test	ebp, ebp
; Line 65869
	jle	SHORT $LN203@getToken
	npad	2
$LL27@getToken:
; Line 65862
	movzx	edi, BYTE PTR [esi+ebx+1]
	add	esi, 1
	test	edi, edi
	je	SHORT $LN24@getToken
	push	edi
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN24@getToken
	cmp	edi, 41					; 00000029H
	jne	SHORT $LL27@getToken
; Line 65864
	add	esi, 1
; Line 65865
	jmp	SHORT $LN22@getToken
$LN24@getToken:
; Line 65863
	cmp	edi, 41					; 00000029H
	jne	SHORT $LN23@getToken
; Line 65864
	add	esi, 1
; Line 65865
	jmp	SHORT $LN22@getToken
$LN23@getToken:
; Line 65866
	mov	ecx, DWORD PTR _tokenType$[esp+12]
	mov	DWORD PTR [ecx], 144			; 00000090H
$LN22@getToken:
; Line 65876
	test	ebp, ebp
$LN203@getToken:
	jne	SHORT $LN18@getToken
	mov	edi, DWORD PTR _tokenType$[esp+12]
$LN164@getToken:
	mov	DWORD PTR [edi], 144			; 00000090H
$LN18@getToken:
	pop	edi
; Line 65877
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN17@getToken:
; Line 65881
	movzx	eax, BYTE PTR [ebx+1]
	cmp	eax, 39					; 00000027H
	je	SHORT $LN15@getToken
	cmp	eax, 34					; 00000022H
	jne	$LN16@getToken
$LN15@getToken:
; Line 65883
	mov	ebp, DWORD PTR _tokenType$[esp+12]
	mov	edi, eax
	mov	DWORD PTR [ebp], 126			; 0000007eH
; Line 65884
	movzx	eax, BYTE PTR [ebx+2]
	test	eax, eax
	mov	esi, 2
	je	SHORT $LN8@getToken
$LL193@getToken:
; Line 65885
	cmp	eax, edi
	je	SHORT $LN141@getToken
; Line 65889
	push	eax
	call	_isxdigit
	add	esp, 4
	test	eax, eax
	je	SHORT $LN142@getToken
	movzx	eax, BYTE PTR [esi+ebx+1]
	add	esi, 1
	test	eax, eax
	jne	SHORT $LL193@getToken
	pop	edi
; Line 65895
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN141@getToken:
; Line 65886
	mov	edx, esi
	and	edx, -2147483647			; 80000001H
	jns	SHORT $LN202@getToken
	dec	edx
	or	edx, -2					; fffffffeH
	inc	edx
$LN202@getToken:
	je	SHORT $LN12@getToken
	mov	DWORD PTR [ebp], 144			; 00000090H
$LN12@getToken:
; Line 65894
	test	eax, eax
	je	SHORT $LN8@getToken
	add	esi, 1
$LN8@getToken:
	pop	edi
; Line 65895
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN142@getToken:
	pop	edi
; Line 65891
	mov	eax, esi
	pop	esi
	mov	DWORD PTR [ebp], 144			; 00000090H
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN16@getToken:
; Line 65901
	test	cl, cl
	js	SHORT $LN6@getToken
	cmp	ecx, 31					; 0000001fH
	jle	SHORT $LN5@getToken
	cmp	BYTE PTR _sqlite3IsIdChar[ecx-32], 0
	jne	SHORT $LN6@getToken
$LN5@getToken:
; Line 65909
	mov	DWORD PTR [edi], 144			; 00000090H
	pop	edi
	pop	esi
	pop	ebp
; Line 65910
	mov	eax, 1
	pop	ebx
; Line 65911
	ret	0
$LN6@getToken:
; Line 65904
	mov	edi, 1
$LL4@getToken:
	movzx	eax, BYTE PTR [edi+ebx]
	test	al, al
	js	SHORT $LN3@getToken
	cmp	eax, 31					; 0000001fH
	jle	SHORT $LN2@getToken
	cmp	BYTE PTR _sqlite3IsIdChar[eax-32], 0
	je	SHORT $LN2@getToken
$LN3@getToken:
	add	edi, 1
	jmp	SHORT $LL4@getToken
$LN2@getToken:
; Line 65905
	call	_keywordCode
	mov	ecx, DWORD PTR _tokenType$[esp+12]
	mov	DWORD PTR [ecx], eax
; Line 65906
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65911
	ret	0
$LN204@getToken:
	DD	$LN120@getToken
	DD	$LN85@getToken
	DD	$LN75@getToken
	DD	$LN40@getToken
	DD	$LN36@getToken
	DD	$LN98@getToken
	DD	$LN77@getToken
	DD	$LN111@getToken
	DD	$LN110@getToken
	DD	$LN107@getToken
	DD	$LN108@getToken
	DD	$LN79@getToken
	DD	$LN116@getToken
	DD	$LN67@getToken
	DD	$LN106@getToken
	DD	$LN65@getToken
	DD	$LN109@getToken
	DD	$LN96@getToken
	DD	$LN97@getToken
	DD	$LN90@getToken
	DD	$LN44@getToken
	DD	$LN17@getToken
	DD	$LN48@getToken
	DD	$LN82@getToken
	DD	$LN76@getToken
	DD	$LN16@getToken
$LN183@getToken:
	DB	0
	DB	0
	DB	25					; 00000019H
	DB	0
	DB	0
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	2
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	15					; 0000000fH
	DB	4
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	4
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	21					; 00000015H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	22					; 00000016H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	2
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	21					; 00000015H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	23					; 00000017H
	DB	25					; 00000019H
	DB	24					; 00000018H
_getToken ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3GetToken
_TEXT	SEGMENT
_z$ = 8							; size = 4
_sqlite3GetToken PROC					; COMDAT
; _tokenType$ = eax
; Line 65913
	push	eax
	mov	eax, DWORD PTR _z$[esp]
	call	_getToken
	add	esp, 4
; Line 65914
	ret	0
_sqlite3GetToken ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_libversion
_TEXT	SEGMENT
_sqlite3_libversion PROC				; COMDAT
; Line 66071
	mov	eax, OFFSET _sqlite3_version
	ret	0
_sqlite3_libversion ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_libversion_number
_TEXT	SEGMENT
_sqlite3_libversion_number PROC				; COMDAT
; Line 66072
	mov	eax, 3004000				; 002dd660H
	ret	0
_sqlite3_libversion_number ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _binCollFunc
_TEXT	SEGMENT
_NotUsed$ = 8						; size = 4
_nKey1$ = 12						; size = 4
_pKey1$ = 16						; size = 4
_nKey2$ = 20						; size = 4
_pKey2$ = 24						; size = 4
_binCollFunc PROC					; COMDAT
; Line 66100
	push	ebx
; Line 66102
	mov	ebx, DWORD PTR _nKey2$[esp]
	push	edi
	mov	edi, DWORD PTR _nKey1$[esp+4]
	cmp	edi, ebx
	mov	eax, edi
	jl	SHORT $LN5@binCollFun
	mov	eax, ebx
$LN5@binCollFun:
; Line 66103
	cmp	eax, 4
	mov	ecx, DWORD PTR _pKey2$[esp+4]
	mov	edx, DWORD PTR _pKey1$[esp+4]
	push	ebp
	push	esi
	jb	SHORT $LN14@binCollFun
$LL7@binCollFun:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN8@binCollFun
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL7@binCollFun
$LN14@binCollFun:
	test	eax, eax
	je	SHORT $LN9@binCollFun
$LN8@binCollFun:
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN17@binCollFun
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN9@binCollFun
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN17@binCollFun
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN9@binCollFun
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN17@binCollFun
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN9@binCollFun
	movzx	esi, BYTE PTR [edx]
	movzx	eax, BYTE PTR [ecx]
	sub	esi, eax
	je	SHORT $LN9@binCollFun
$LN17@binCollFun:
	test	esi, esi
	mov	eax, 1
	jg	SHORT $LN11@binCollFun
	or	eax, -1
	jmp	SHORT $LN11@binCollFun
$LN9@binCollFun:
	xor	eax, eax
$LN11@binCollFun:
; Line 66104
	test	eax, eax
	pop	esi
	pop	ebp
	jne	SHORT $LN1@binCollFun
; Line 66105
	sub	edi, ebx
	mov	eax, edi
$LN1@binCollFun:
	pop	edi
	pop	ebx
; Line 66108
	ret	0
_binCollFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _nocaseCollatingFunc
_TEXT	SEGMENT
_NotUsed$ = 8						; size = 4
_nKey1$ = 12						; size = 4
_pKey1$ = 16						; size = 4
_nKey2$ = 20						; size = 4
_pKey2$ = 24						; size = 4
_nocaseCollatingFunc PROC				; COMDAT
; Line 66123
	push	esi
; Line 66125
	mov	esi, DWORD PTR _nKey1$[esp]
	push	edi
	mov	edi, DWORD PTR _nKey2$[esp+4]
	cmp	esi, edi
	mov	eax, esi
	jl	SHORT $LN5@nocaseColl
	mov	eax, edi
$LN5@nocaseColl:
	mov	edx, DWORD PTR _pKey2$[esp+4]
	mov	ecx, DWORD PTR _pKey1$[esp+4]
	call	_sqlite3StrNICmp
; Line 66126
	test	eax, eax
	jne	SHORT $LN1@nocaseColl
; Line 66127
	sub	esi, edi
	mov	eax, esi
$LN1@nocaseColl:
	pop	edi
	pop	esi
; Line 66130
	ret	0
_nocaseCollatingFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_last_insert_rowid
_TEXT	SEGMENT
_db$ = 8						; size = 4
_sqlite3_last_insert_rowid PROC				; COMDAT
; Line 66136
	mov	ecx, DWORD PTR _db$[esp-4]
	mov	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [ecx+36]
; Line 66137
	ret	0
_sqlite3_last_insert_rowid ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_changes
_TEXT	SEGMENT
_db$ = 8						; size = 4
_sqlite3_changes PROC					; COMDAT
; Line 66143
	mov	eax, DWORD PTR _db$[esp-4]
	mov	eax, DWORD PTR [eax+52]
; Line 66144
	ret	0
_sqlite3_changes ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_total_changes
_TEXT	SEGMENT
_db$ = 8						; size = 4
_sqlite3_total_changes PROC				; COMDAT
; Line 66150
	mov	eax, DWORD PTR _db$[esp-4]
	mov	eax, DWORD PTR [eax+56]
; Line 66151
	ret	0
_sqlite3_total_changes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_C@_0CH@JKOMOHHH@file?5is?5encrypted?5or?5is?5not?5a?5da@ ; `string'
PUBLIC	??_C@_0CC@OHMKLHEA@bind?5or?5column?5index?5out?5of?5rang@ ; `string'
PUBLIC	??_C@_0CA@DBBJFBEG@auxiliary?5database?5format?5error?$AA@ ; `string'
PUBLIC	??_C@_0BF@LMCDAPDN@authorization?5denied?$AA@	; `string'
PUBLIC	??_C@_0CA@GPEHDHDC@kernel?5lacks?5large?5file?5support?$AA@ ; `string'
PUBLIC	??_C@_0CH@GCDGLLPA@library?5routine?5called?5out?5of?5se@ ; `string'
PUBLIC	??_C@_0BC@FILINGOB@datatype?5mismatch?$AA@	; `string'
PUBLIC	??_C@_0BC@IFKPGMGK@constraint?5failed?$AA@	; `string'
PUBLIC	??_C@_0CD@CFCKODOJ@String?5or?5BLOB?5exceeded?5size?5lim@ ; `string'
PUBLIC	??_C@_0BM@FKBOKANJ@database?5schema?5has?5changed?$AA@ ; `string'
PUBLIC	??_C@_0BH@OCNELEJF@table?5contains?5no?5data?$AA@ ; `string'
PUBLIC	??_C@_0BN@JLONMGIA@unable?5to?5open?5database?5file?$AA@ ; `string'
PUBLIC	??_C@_0BJ@GDNBBAEL@database?5or?5disk?5is?5full?$AA@ ; `string'
PUBLIC	??_C@_0CB@ONDDCPGK@database?5disk?5image?5is?5malformed@ ; `string'
PUBLIC	??_C@_0P@FOPPKBJH@disk?5I?1O?5error?$AA@	; `string'
PUBLIC	??_C@_0M@EGEKIIMP@interrupted?$AA@		; `string'
PUBLIC	??_C@_0CF@JBLJEMGC@attempt?5to?5write?5a?5readonly?5data@ ; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@		; `string'
PUBLIC	??_C@_0BJ@DNPONIEG@database?5table?5is?5locked?$AA@ ; `string'
PUBLIC	??_C@_0BD@DAAAMHOI@database?5is?5locked?$AA@	; `string'
PUBLIC	??_C@_0BP@BFMDEDKN@callback?5requested?5query?5abort?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OFHFLJKH@access?5permission?5denied?$AA@ ; `string'
PUBLIC	??_C@_0CE@BCMAPMOL@SQL?5logic?5error?5or?5missing?5datab@ ; `string'
PUBLIC	??_C@_0N@FKKFHCIB@not?5an?5error?$AA@		; `string'
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JKOMOHHH@file?5is?5encrypted?5or?5is?5not?5a?5da@
CONST	SEGMENT
??_C@_0CH@JKOMOHHH@file?5is?5encrypted?5or?5is?5not?5a?5da@ DB 'file is e'
	DB	'ncrypted or is not a database', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OHMKLHEA@bind?5or?5column?5index?5out?5of?5rang@
CONST	SEGMENT
??_C@_0CC@OHMKLHEA@bind?5or?5column?5index?5out?5of?5rang@ DB 'bind or co'
	DB	'lumn index out of range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DBBJFBEG@auxiliary?5database?5format?5error?$AA@
CONST	SEGMENT
??_C@_0CA@DBBJFBEG@auxiliary?5database?5format?5error?$AA@ DB 'auxiliary '
	DB	'database format error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LMCDAPDN@authorization?5denied?$AA@
CONST	SEGMENT
??_C@_0BF@LMCDAPDN@authorization?5denied?$AA@ DB 'authorization denied', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GPEHDHDC@kernel?5lacks?5large?5file?5support?$AA@
CONST	SEGMENT
??_C@_0CA@GPEHDHDC@kernel?5lacks?5large?5file?5support?$AA@ DB 'kernel la'
	DB	'cks large file support', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GCDGLLPA@library?5routine?5called?5out?5of?5se@
CONST	SEGMENT
??_C@_0CH@GCDGLLPA@library?5routine?5called?5out?5of?5se@ DB 'library rou'
	DB	'tine called out of sequence', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FILINGOB@datatype?5mismatch?$AA@
CONST	SEGMENT
??_C@_0BC@FILINGOB@datatype?5mismatch?$AA@ DB 'datatype mismatch', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IFKPGMGK@constraint?5failed?$AA@
CONST	SEGMENT
??_C@_0BC@IFKPGMGK@constraint?5failed?$AA@ DB 'constraint failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CFCKODOJ@String?5or?5BLOB?5exceeded?5size?5lim@
CONST	SEGMENT
??_C@_0CD@CFCKODOJ@String?5or?5BLOB?5exceeded?5size?5lim@ DB 'String or B'
	DB	'LOB exceeded size limit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FKBOKANJ@database?5schema?5has?5changed?$AA@
CONST	SEGMENT
??_C@_0BM@FKBOKANJ@database?5schema?5has?5changed?$AA@ DB 'database schem'
	DB	'a has changed', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OCNELEJF@table?5contains?5no?5data?$AA@
CONST	SEGMENT
??_C@_0BH@OCNELEJF@table?5contains?5no?5data?$AA@ DB 'table contains no d'
	DB	'ata', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JLONMGIA@unable?5to?5open?5database?5file?$AA@
CONST	SEGMENT
??_C@_0BN@JLONMGIA@unable?5to?5open?5database?5file?$AA@ DB 'unable to op'
	DB	'en database file', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GDNBBAEL@database?5or?5disk?5is?5full?$AA@
CONST	SEGMENT
??_C@_0BJ@GDNBBAEL@database?5or?5disk?5is?5full?$AA@ DB 'database or disk'
	DB	' is full', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@ONDDCPGK@database?5disk?5image?5is?5malformed@
CONST	SEGMENT
??_C@_0CB@ONDDCPGK@database?5disk?5image?5is?5malformed@ DB 'database dis'
	DB	'k image is malformed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FOPPKBJH@disk?5I?1O?5error?$AA@
CONST	SEGMENT
??_C@_0P@FOPPKBJH@disk?5I?1O?5error?$AA@ DB 'disk I/O error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EGEKIIMP@interrupted?$AA@
CONST	SEGMENT
??_C@_0M@EGEKIIMP@interrupted?$AA@ DB 'interrupted', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JBLJEMGC@attempt?5to?5write?5a?5readonly?5data@
CONST	SEGMENT
??_C@_0CF@JBLJEMGC@attempt?5to?5write?5a?5readonly?5data@ DB 'attempt to '
	DB	'write a readonly database', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DNPONIEG@database?5table?5is?5locked?$AA@
CONST	SEGMENT
??_C@_0BJ@DNPONIEG@database?5table?5is?5locked?$AA@ DB 'database table is'
	DB	' locked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DAAAMHOI@database?5is?5locked?$AA@
CONST	SEGMENT
??_C@_0BD@DAAAMHOI@database?5is?5locked?$AA@ DB 'database is locked', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BFMDEDKN@callback?5requested?5query?5abort?$AA@
CONST	SEGMENT
??_C@_0BP@BFMDEDKN@callback?5requested?5query?5abort?$AA@ DB 'callback re'
	DB	'quested query abort', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OFHFLJKH@access?5permission?5denied?$AA@
CONST	SEGMENT
??_C@_0BJ@OFHFLJKH@access?5permission?5denied?$AA@ DB 'access permission '
	DB	'denied', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BCMAPMOL@SQL?5logic?5error?5or?5missing?5datab@
CONST	SEGMENT
??_C@_0CE@BCMAPMOL@SQL?5logic?5error?5or?5missing?5datab@ DB 'SQL logic e'
	DB	'rror or missing database', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FKKFHCIB@not?5an?5error?$AA@
CONST	SEGMENT
??_C@_0N@FKKFHCIB@not?5an?5error?$AA@ DB 'not an error', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3ErrStr
_TEXT	SEGMENT
_sqlite3ErrStr PROC					; COMDAT
; _rc$ = eax
; Line 66299
	and	eax, 255				; 000000ffH
	cmp	eax, 101				; 00000065H
	ja	$LN1@sqlite3Err
	movzx	eax, BYTE PTR $LN30@sqlite3Err[eax]
	jmp	DWORD PTR $LN31@sqlite3Err[eax*4]
$LN25@sqlite3Err:
; Line 66302
	mov	eax, OFFSET ??_C@_0N@FKKFHCIB@not?5an?5error?$AA@
; Line 66329
	ret	0
$LN24@sqlite3Err:
; Line 66303
	mov	eax, OFFSET ??_C@_0CE@BCMAPMOL@SQL?5logic?5error?5or?5missing?5datab@
; Line 66329
	ret	0
$LN23@sqlite3Err:
; Line 66304
	mov	eax, OFFSET ??_C@_0BJ@OFHFLJKH@access?5permission?5denied?$AA@
; Line 66329
	ret	0
$LN22@sqlite3Err:
; Line 66305
	mov	eax, OFFSET ??_C@_0BP@BFMDEDKN@callback?5requested?5query?5abort?$AA@
; Line 66329
	ret	0
$LN21@sqlite3Err:
; Line 66306
	mov	eax, OFFSET ??_C@_0BD@DAAAMHOI@database?5is?5locked?$AA@
; Line 66329
	ret	0
$LN20@sqlite3Err:
; Line 66307
	mov	eax, OFFSET ??_C@_0BJ@DNPONIEG@database?5table?5is?5locked?$AA@
; Line 66329
	ret	0
$LN19@sqlite3Err:
; Line 66308
	mov	eax, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
; Line 66329
	ret	0
$LN18@sqlite3Err:
; Line 66309
	mov	eax, OFFSET ??_C@_0CF@JBLJEMGC@attempt?5to?5write?5a?5readonly?5data@
; Line 66329
	ret	0
$LN17@sqlite3Err:
; Line 66310
	mov	eax, OFFSET ??_C@_0M@EGEKIIMP@interrupted?$AA@
; Line 66329
	ret	0
$LN16@sqlite3Err:
; Line 66311
	mov	eax, OFFSET ??_C@_0P@FOPPKBJH@disk?5I?1O?5error?$AA@
; Line 66329
	ret	0
$LN15@sqlite3Err:
; Line 66312
	mov	eax, OFFSET ??_C@_0CB@ONDDCPGK@database?5disk?5image?5is?5malformed@
; Line 66329
	ret	0
$LN14@sqlite3Err:
; Line 66313
	mov	eax, OFFSET ??_C@_0BJ@GDNBBAEL@database?5or?5disk?5is?5full?$AA@
; Line 66329
	ret	0
$LN13@sqlite3Err:
; Line 66314
	mov	eax, OFFSET ??_C@_0BN@JLONMGIA@unable?5to?5open?5database?5file?$AA@
; Line 66329
	ret	0
$LN12@sqlite3Err:
; Line 66315
	mov	eax, OFFSET ??_C@_0BH@OCNELEJF@table?5contains?5no?5data?$AA@
; Line 66329
	ret	0
$LN11@sqlite3Err:
; Line 66316
	mov	eax, OFFSET ??_C@_0BM@FKBOKANJ@database?5schema?5has?5changed?$AA@
; Line 66329
	ret	0
$LN10@sqlite3Err:
; Line 66317
	mov	eax, OFFSET ??_C@_0CD@CFCKODOJ@String?5or?5BLOB?5exceeded?5size?5lim@
; Line 66329
	ret	0
$LN9@sqlite3Err:
; Line 66318
	mov	eax, OFFSET ??_C@_0BC@IFKPGMGK@constraint?5failed?$AA@
; Line 66329
	ret	0
$LN8@sqlite3Err:
; Line 66319
	mov	eax, OFFSET ??_C@_0BC@FILINGOB@datatype?5mismatch?$AA@
; Line 66329
	ret	0
$LN7@sqlite3Err:
; Line 66320
	mov	eax, OFFSET ??_C@_0CH@GCDGLLPA@library?5routine?5called?5out?5of?5se@
; Line 66329
	ret	0
$LN6@sqlite3Err:
; Line 66321
	mov	eax, OFFSET ??_C@_0CA@GPEHDHDC@kernel?5lacks?5large?5file?5support?$AA@
; Line 66329
	ret	0
$LN5@sqlite3Err:
; Line 66322
	mov	eax, OFFSET ??_C@_0BF@LMCDAPDN@authorization?5denied?$AA@
; Line 66329
	ret	0
$LN4@sqlite3Err:
; Line 66323
	mov	eax, OFFSET ??_C@_0CA@DBBJFBEG@auxiliary?5database?5format?5error?$AA@
; Line 66329
	ret	0
$LN3@sqlite3Err:
; Line 66324
	mov	eax, OFFSET ??_C@_0CC@OHMKLHEA@bind?5or?5column?5index?5out?5of?5rang@
; Line 66329
	ret	0
$LN2@sqlite3Err:
; Line 66325
	mov	eax, OFFSET ??_C@_0CH@JKOMOHHH@file?5is?5encrypted?5or?5is?5not?5a?5da@
; Line 66329
	ret	0
$LN1@sqlite3Err:
; Line 66326
	mov	eax, OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
; Line 66329
	ret	0
	npad	2
$LN31@sqlite3Err:
	DD	$LN25@sqlite3Err
	DD	$LN24@sqlite3Err
	DD	$LN23@sqlite3Err
	DD	$LN22@sqlite3Err
	DD	$LN21@sqlite3Err
	DD	$LN20@sqlite3Err
	DD	$LN19@sqlite3Err
	DD	$LN18@sqlite3Err
	DD	$LN17@sqlite3Err
	DD	$LN16@sqlite3Err
	DD	$LN15@sqlite3Err
	DD	$LN14@sqlite3Err
	DD	$LN13@sqlite3Err
	DD	$LN12@sqlite3Err
	DD	$LN11@sqlite3Err
	DD	$LN10@sqlite3Err
	DD	$LN9@sqlite3Err
	DD	$LN8@sqlite3Err
	DD	$LN7@sqlite3Err
	DD	$LN6@sqlite3Err
	DD	$LN5@sqlite3Err
	DD	$LN4@sqlite3Err
	DD	$LN3@sqlite3Err
	DD	$LN2@sqlite3Err
	DD	$LN1@sqlite3Err
$LN30@sqlite3Err:
	DB	0
	DB	1
	DB	24					; 00000018H
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	24					; 00000018H
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	24					; 00000018H
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	0
	DB	0
_sqlite3ErrStr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqliteDefaultBusyCallback
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
_sqliteDefaultBusyCallback PROC				; COMDAT
; Line 66347
	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [eax+288]
; Line 66351
	mov	eax, DWORD PTR _count$[esp-4]
	cmp	eax, 12					; 0000000cH
	jae	SHORT $LN4@sqliteDefa
; Line 66352
	movzx	ecx, BYTE PTR ?delays@?1??sqliteDefaultBusyCallback@@9@9[eax]
; Line 66353
	movzx	eax, BYTE PTR ?totals@?1??sqliteDefaultBusyCallback@@9@9[eax]
; Line 66354
	jmp	SHORT $LN3@sqliteDefa
$LN4@sqliteDefa:
; Line 66356
	imul	eax, 100				; 00000064H
	mov	ecx, 100				; 00000064H
	sub	eax, 872				; 00000368H
$LN3@sqliteDefa:
	push	esi
; Line 66358
	lea	esi, DWORD PTR [eax+ecx]
	cmp	esi, edx
	pop	esi
	jle	SHORT $LN1@sqliteDefa
; Line 66359
	sub	edx, eax
	mov	ecx, edx
; Line 66360
	test	ecx, ecx
	jg	SHORT $LN1@sqliteDefa
	xor	eax, eax
; Line 66372
	ret	0
$LN1@sqliteDefa:
; Line 66362
	push	ecx
	call	DWORD PTR __imp__Sleep@4
; Line 66363
	mov	eax, 1
; Line 66372
	ret	0
_sqliteDefaultBusyCallback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3InvokeBusyHandler
_TEXT	SEGMENT
_sqlite3InvokeBusyHandler PROC				; COMDAT
; _p$ = esi
; Line 66383
	test	esi, esi
	je	SHORT $LN3@sqlite3Inv
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN3@sqlite3Inv
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jl	SHORT $LN3@sqlite3Inv
; Line 66384
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	ecx
	add	esp, 8
; Line 66385
	test	eax, eax
	jne	SHORT $LN2@sqlite3Inv
; Line 66386
	mov	DWORD PTR [esi+8], -1
; Line 66391
	ret	0
$LN2@sqlite3Inv:
; Line 66388
	add	DWORD PTR [esi+8], 1
; Line 66391
	ret	0
$LN3@sqlite3Inv:
; Line 66383
	xor	eax, eax
; Line 66391
	ret	0
_sqlite3InvokeBusyHandler ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_busy_handler
_TEXT	SEGMENT
_db$ = 8						; size = 4
_xBusy$ = 12						; size = 4
_pArg$ = 16						; size = 4
_sqlite3_busy_handler PROC				; COMDAT
; Line 66402
	mov	eax, DWORD PTR _db$[esp-4]
	test	eax, eax
	je	SHORT $LN8@sqlite3_bu
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, -1623446221			; 9f3c2d33H
	je	SHORT $LN1@sqlite3_bu
	cmp	ecx, -1607883113			; a029a697H
	je	SHORT $LN1@sqlite3_bu
	cmp	ecx, -264537850				; f03b7906H
	je	SHORT $LN1@sqlite3_bu
$LN8@sqlite3_bu:
; Line 66403
	mov	eax, 21					; 00000015H
; Line 66409
	ret	0
$LN1@sqlite3_bu:
; Line 66405
	mov	ecx, DWORD PTR _xBusy$[esp-4]
; Line 66406
	mov	edx, DWORD PTR _pArg$[esp-4]
	mov	DWORD PTR [eax+276], ecx
	mov	DWORD PTR [eax+280], edx
; Line 66407
	mov	DWORD PTR [eax+284], 0
; Line 66408
	xor	eax, eax
; Line 66409
	ret	0
_sqlite3_busy_handler ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_progress_handler
_TEXT	SEGMENT
_db$ = 8						; size = 4
_nOps$ = 12						; size = 4
_xProgress$ = 16					; size = 4
_pArg$ = 20						; size = 4
_sqlite3_progress_handler PROC				; COMDAT
; Line 66423
	mov	eax, DWORD PTR _db$[esp-4]
	xor	edx, edx
	cmp	eax, edx
	je	SHORT $LN1@sqlite3_pr
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, -1623446221			; 9f3c2d33H
	je	SHORT $LN6@sqlite3_pr
	cmp	ecx, -1607883113			; a029a697H
	je	SHORT $LN6@sqlite3_pr
	cmp	ecx, -264537850				; f03b7906H
	jne	SHORT $LN1@sqlite3_pr
$LN6@sqlite3_pr:
; Line 66424
	mov	ecx, DWORD PTR _nOps$[esp-4]
	cmp	ecx, edx
	jle	SHORT $LN2@sqlite3_pr
; Line 66425
	mov	edx, DWORD PTR _xProgress$[esp-4]
; Line 66426
	mov	DWORD PTR [eax+176], ecx
; Line 66427
	mov	ecx, DWORD PTR _pArg$[esp-4]
	mov	DWORD PTR [eax+172], ecx
; Line 66429
	mov	DWORD PTR [eax+168], edx
; Line 66434
	ret	0
$LN2@sqlite3_pr:
; Line 66430
	mov	DWORD PTR [eax+176], edx
; Line 66431
	mov	DWORD PTR [eax+172], edx
	mov	DWORD PTR [eax+168], edx
$LN1@sqlite3_pr:
; Line 66434
	ret	0
_sqlite3_progress_handler ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_busy_timeout
_TEXT	SEGMENT
_db$ = 8						; size = 4
_ms$ = 12						; size = 4
_sqlite3_busy_timeout PROC				; COMDAT
; Line 66443
	mov	eax, DWORD PTR _db$[esp-4]
	test	eax, eax
	je	SHORT $LN10@sqlite3_bu@2
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, -1623446221			; 9f3c2d33H
	je	SHORT $LN3@sqlite3_bu@2
	cmp	ecx, -1607883113			; a029a697H
	je	SHORT $LN3@sqlite3_bu@2
	cmp	ecx, -264537850				; f03b7906H
	je	SHORT $LN3@sqlite3_bu@2
$LN10@sqlite3_bu@2:
; Line 66444
	mov	eax, 21					; 00000015H
; Line 66453
	ret	0
$LN3@sqlite3_bu@2:
; Line 66446
	mov	ecx, DWORD PTR _ms$[esp-4]
	test	ecx, ecx
	jle	SHORT $LN2@sqlite3_bu@2
; Line 66448
	push	eax
	push	OFFSET _sqliteDefaultBusyCallback
; Line 66450
	push	eax
	mov	DWORD PTR [eax+288], ecx
	call	_sqlite3_busy_handler
	add	esp, 12					; 0000000cH
; Line 66452
	xor	eax, eax
; Line 66453
	ret	0
$LN2@sqlite3_bu@2:
; Line 66450
	push	0
	push	0
	push	eax
	call	_sqlite3_busy_handler
	add	esp, 12					; 0000000cH
; Line 66452
	xor	eax, eax
; Line 66453
	ret	0
_sqlite3_busy_timeout ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_interrupt
_TEXT	SEGMENT
_db$ = 8						; size = 4
_sqlite3_interrupt PROC					; COMDAT
; Line 66459
	mov	ecx, DWORD PTR _db$[esp-4]
	test	ecx, ecx
	je	SHORT $LN2@sqlite3_in
	mov	eax, DWORD PTR [ecx+48]
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN1@sqlite3_in
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN2@sqlite3_in
$LN1@sqlite3_in:
; Line 66460
	mov	DWORD PTR [ecx+152], 1
$LN2@sqlite3_in:
; Line 66462
	ret	0
_sqlite3_interrupt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_free
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3_free PROC					; COMDAT
; Line 66474
	mov	eax, DWORD PTR _p$[esp-4]
	test	eax, eax
	je	SHORT $LN4@sqlite3_fr
	mov	DWORD PTR _p$[esp-4], eax
	jmp	_free
$LN4@sqlite3_fr:
	ret	0
_sqlite3_free ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_malloc
_TEXT	SEGMENT
_nByte$ = 8						; size = 4
_sqlite3_malloc PROC					; COMDAT
; Line 66475
	mov	eax, DWORD PTR _nByte$[esp-4]
	test	eax, eax
	jle	SHORT $LN3@sqlite3_ma
	mov	DWORD PTR _nByte$[esp-4], eax
	jmp	_malloc
$LN3@sqlite3_ma:
	xor	eax, eax
	ret	0
_sqlite3_malloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_realloc
_TEXT	SEGMENT
_pOld$ = 8						; size = 4
_nByte$ = 12						; size = 4
_sqlite3_realloc PROC					; COMDAT
; Line 66477
	mov	ecx, DWORD PTR _pOld$[esp-4]
	test	ecx, ecx
; Line 66478
	mov	eax, DWORD PTR _nByte$[esp-4]
	je	SHORT $LN4@sqlite3_re
	test	eax, eax
	jle	SHORT $LN3@sqlite3_re
; Line 66479
	mov	DWORD PTR _nByte$[esp-4], eax
	mov	DWORD PTR _pOld$[esp-4], ecx
	jmp	_realloc
$LN3@sqlite3_re:
; Line 66481
	push	ecx
	call	_free
	add	esp, 4
; Line 66485
$LN13@sqlite3_re:
	xor	eax, eax
; Line 66487
	ret	0
$LN4@sqlite3_re:
; Line 66485
	test	eax, eax
	jle	SHORT $LN13@sqlite3_re
	push	eax
	call	_malloc
	add	esp, 4
; Line 66487
	ret	0
_sqlite3_realloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_trace
_TEXT	SEGMENT
_db$ = 8						; size = 4
_xTrace$ = 12						; size = 4
_pArg$ = 16						; size = 4
_sqlite3_trace PROC					; COMDAT
; Line 66653
	mov	ecx, DWORD PTR _db$[esp-4]
; Line 66654
	mov	edx, DWORD PTR _xTrace$[esp-4]
	mov	eax, DWORD PTR [ecx+92]
	mov	DWORD PTR [ecx+88], edx
; Line 66655
	mov	edx, DWORD PTR _pArg$[esp-4]
	mov	DWORD PTR [ecx+92], edx
; Line 66657
	ret	0
_sqlite3_trace ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_profile
_TEXT	SEGMENT
_db$ = 8						; size = 4
_xProfile$ = 12						; size = 4
_pArg$ = 16						; size = 4
_sqlite3_profile PROC					; COMDAT
; Line 66671
	mov	ecx, DWORD PTR _db$[esp-4]
; Line 66672
	mov	edx, DWORD PTR _xProfile$[esp-4]
	mov	eax, DWORD PTR [ecx+100]
	mov	DWORD PTR [ecx+96], edx
; Line 66673
	mov	edx, DWORD PTR _pArg$[esp-4]
	mov	DWORD PTR [ecx+100], edx
; Line 66675
	ret	0
_sqlite3_profile ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_commit_hook
_TEXT	SEGMENT
_db$ = 8						; size = 4
_xCallback$ = 12					; size = 4
_pArg$ = 16						; size = 4
_sqlite3_commit_hook PROC				; COMDAT
; Line 66689
	mov	ecx, DWORD PTR _db$[esp-4]
; Line 66690
	mov	edx, DWORD PTR _xCallback$[esp-4]
	mov	eax, DWORD PTR [ecx+104]
	mov	DWORD PTR [ecx+108], edx
; Line 66691
	mov	edx, DWORD PTR _pArg$[esp-4]
	mov	DWORD PTR [ecx+104], edx
; Line 66693
	ret	0
_sqlite3_commit_hook ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_update_hook
_TEXT	SEGMENT
_db$ = 8						; size = 4
_xCallback$ = 12					; size = 4
_pArg$ = 16						; size = 4
_sqlite3_update_hook PROC				; COMDAT
; Line 66704
	mov	ecx, DWORD PTR _db$[esp-4]
; Line 66705
	mov	edx, DWORD PTR _xCallback$[esp-4]
	mov	eax, DWORD PTR [ecx+120]
	mov	DWORD PTR [ecx+124], edx
; Line 66706
	mov	edx, DWORD PTR _pArg$[esp-4]
	mov	DWORD PTR [ecx+120], edx
; Line 66708
	ret	0
_sqlite3_update_hook ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_rollback_hook
_TEXT	SEGMENT
_db$ = 8						; size = 4
_xCallback$ = 12					; size = 4
_pArg$ = 16						; size = 4
_sqlite3_rollback_hook PROC				; COMDAT
; Line 66719
	mov	ecx, DWORD PTR _db$[esp-4]
; Line 66720
	mov	edx, DWORD PTR _xCallback$[esp-4]
	mov	eax, DWORD PTR [ecx+112]
	mov	DWORD PTR [ecx+116], edx
; Line 66721
	mov	edx, DWORD PTR _pArg$[esp-4]
	mov	DWORD PTR [ecx+112], edx
; Line 66723
	ret	0
_sqlite3_rollback_hook ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_errcode
_TEXT	SEGMENT
_db$ = 8						; size = 4
_sqlite3_errcode PROC					; COMDAT
; Line 66861
	mov	ecx, DWORD PTR _db$[esp-4]
	test	ecx, ecx
	je	SHORT $LN2@sqlite3_er
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN3@sqlite3_er
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN2@sqlite3_er
$LN3@sqlite3_er:
; Line 66864
	mov	eax, DWORD PTR [ecx+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN1@sqlite3_er
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN1@sqlite3_er
	cmp	eax, -264537850				; f03b7906H
	je	SHORT $LN1@sqlite3_er
; Line 66865
	mov	eax, 21					; 00000015H
; Line 66868
	ret	0
$LN1@sqlite3_er:
; Line 66867
	mov	eax, DWORD PTR [ecx+16]
	and	eax, DWORD PTR [ecx+12]
; Line 66868
	ret	0
$LN2@sqlite3_er:
; Line 66862
	mov	eax, 7
; Line 66868
	ret	0
_sqlite3_errcode ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_collation_needed
_TEXT	SEGMENT
_db$ = 8						; size = 4
_pCollNeededArg$ = 12					; size = 4
_xCollNeeded$ = 16					; size = 4
_sqlite3_collation_needed PROC				; COMDAT
; Line 67236
	mov	eax, DWORD PTR _db$[esp-4]
	test	eax, eax
	je	SHORT $LN8@sqlite3_co@3
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, -1623446221			; 9f3c2d33H
	je	SHORT $LN1@sqlite3_co@3
	cmp	ecx, -1607883113			; a029a697H
	je	SHORT $LN1@sqlite3_co@3
	cmp	ecx, -264537850				; f03b7906H
	je	SHORT $LN1@sqlite3_co@3
$LN8@sqlite3_co@3:
; Line 67237
	mov	eax, 21					; 00000015H
; Line 67243
	ret	0
$LN1@sqlite3_co@3:
; Line 67239
	mov	ecx, DWORD PTR _xCollNeeded$[esp-4]
; Line 67241
	mov	edx, DWORD PTR _pCollNeededArg$[esp-4]
	mov	DWORD PTR [eax+128], ecx
	mov	DWORD PTR [eax+132], 0
	mov	DWORD PTR [eax+136], edx
; Line 67242
	xor	eax, eax
; Line 67243
	ret	0
_sqlite3_collation_needed ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_collation_needed16
_TEXT	SEGMENT
_db$ = 8						; size = 4
_pCollNeededArg$ = 12					; size = 4
_xCollNeeded16$ = 16					; size = 4
_sqlite3_collation_needed16 PROC			; COMDAT
; Line 67255
	mov	eax, DWORD PTR _db$[esp-4]
	test	eax, eax
	je	SHORT $LN8@sqlite3_co@4
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, -1623446221			; 9f3c2d33H
	je	SHORT $LN1@sqlite3_co@4
	cmp	ecx, -1607883113			; a029a697H
	je	SHORT $LN1@sqlite3_co@4
	cmp	ecx, -264537850				; f03b7906H
	je	SHORT $LN1@sqlite3_co@4
$LN8@sqlite3_co@4:
; Line 67256
	mov	eax, 21					; 00000015H
; Line 67262
	ret	0
$LN1@sqlite3_co@4:
; Line 67259
	mov	ecx, DWORD PTR _xCollNeeded16$[esp-4]
; Line 67260
	mov	edx, DWORD PTR _pCollNeededArg$[esp-4]
	mov	DWORD PTR [eax+128], 0
	mov	DWORD PTR [eax+132], ecx
	mov	DWORD PTR [eax+136], edx
; Line 67261
	xor	eax, eax
; Line 67262
	ret	0
_sqlite3_collation_needed16 ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_global_recover
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_global_recover
_TEXT	SEGMENT
_sqlite3_global_recover PROC				; COMDAT
; Line 67271
	xor	eax, eax
; Line 67272
	ret	0
_sqlite3_global_recover ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_get_autocommit
_TEXT	SEGMENT
_db$ = 8						; size = 4
_sqlite3_get_autocommit PROC				; COMDAT
; Line 67284
	mov	eax, DWORD PTR _db$[esp-4]
	movzx	eax, BYTE PTR [eax+20]
; Line 67285
	ret	0
_sqlite3_get_autocommit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_thread_cleanup
_TEXT	SEGMENT
_sqlite3_thread_cleanup PROC				; COMDAT
; Line 67332
	cmp	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, 0
	push	esi
	jne	SHORT $LN30@sqlite3_th
	mov	esi, 1
	add	DWORD PTR _inMutex, esi
	call	DWORD PTR __imp__TlsAlloc@0
	sub	DWORD PTR _inMutex, esi
	cmp	eax, -1
	mov	DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9, eax
	je	SHORT $LN1@sqlite3_th
	mov	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, esi
	jmp	SHORT $LN24@sqlite3_th
$LN30@sqlite3_th:
	mov	eax, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
$LN24@sqlite3_th:
	push	eax
	call	DWORD PTR __imp__TlsGetValue@4
; Line 67333
	test	eax, eax
	je	SHORT $LN1@sqlite3_th
; Line 67334
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
; Line 67335
	or	eax, -1
	pop	esi
	jmp	_sqlite3WinThreadSpecificData
$LN1@sqlite3_th:
	pop	esi
; Line 67337
	ret	0
_sqlite3_thread_cleanup ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_sleep
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_sleep
_TEXT	SEGMENT
_ms$ = 8						; size = 4
_sqlite3_sleep PROC					; COMDAT
; Line 67467
	push	esi
; Line 67468
	mov	esi, DWORD PTR _ms$[esp]
	push	esi
	call	DWORD PTR __imp__Sleep@4
	mov	eax, esi
	pop	esi
; Line 67469
	ret	0
_sqlite3_sleep ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_extended_result_codes
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_extended_result_codes
_TEXT	SEGMENT
_db$ = 8						; size = 4
_onoff$ = 12						; size = 4
_sqlite3_extended_result_codes PROC			; COMDAT
; Line 67475
	mov	eax, DWORD PTR _onoff$[esp-4]
	mov	ecx, DWORD PTR _db$[esp-4]
	neg	eax
	sbb	eax, eax
	and	eax, -256				; ffffff00H
	add	eax, 255				; 000000ffH
	mov	DWORD PTR [ecx+16], eax
; Line 67476
	xor	eax, eax
; Line 67477
	ret	0
_sqlite3_extended_result_codes ENDP
_TEXT	ENDS
PUBLIC	??_C@_03CGLHMDPP@now?$AA@			; `string'
;	COMDAT ??_C@_03CGLHMDPP@now?$AA@
CONST	SEGMENT
??_C@_03CGLHMDPP@now?$AA@ DB 'now', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _parseDateOrTime
_TEXT	SEGMENT
_r$81184 = -8						; size = 8
_parseDateOrTime PROC					; COMDAT
; _zDate$ = esi
; _p$ = eax
; Line 6592
	sub	esp, 8
	push	edi
; Line 6593
	push	48					; 00000030H
	mov	edi, eax
	push	0
	push	edi
	call	_memset
; Line 6594
	push	esi
	mov	eax, edi
	call	_parseYyyyMmDd
	add	esp, 16					; 00000010H
	test	eax, eax
; Line 6595
	je	SHORT $LN10@parseDateO
; Line 6596
	mov	eax, esi
	call	_parseHhMmSs
	test	eax, eax
; Line 6597
	je	SHORT $LN10@parseDateO
; Line 6598
	mov	edx, OFFSET ??_C@_03CGLHMDPP@now?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN3@parseDateO
; Line 6600
	lea	eax, DWORD PTR _r$81184[esp+12]
	push	eax
	call	_sqlite3WinCurrentTime
; Line 6601
	fld	QWORD PTR _r$81184[esp+16]
	fstp	QWORD PTR [edi]
	add	esp, 4
; Line 6602
	mov	BYTE PTR [edi+42], 1
$LN10@parseDateO:
; Line 6603
	xor	eax, eax
	pop	edi
; Line 6610
	add	esp, 8
	ret	0
$LN3@parseDateO:
	push	ebx
; Line 6604
	mov	al, 1
	xor	ebx, ebx
	mov	ecx, esi
	call	_sqlite3IsNumber
	test	eax, eax
	pop	ebx
	je	SHORT $LN1@parseDateO
; Line 6605
	push	edi
	mov	eax, esi
	call	_sqlite3AtoF
	add	esp, 4
; Line 6606
	mov	BYTE PTR [edi+42], 1
; Line 6607
	xor	eax, eax
	pop	edi
; Line 6610
	add	esp, 8
	ret	0
$LN1@parseDateO:
; Line 6609
	mov	eax, 1
	pop	edi
; Line 6610
	add	esp, 8
	ret	0
_parseDateOrTime ENDP
_TEXT	ENDS
PUBLIC	__real@41429ec5c0000000
;	COMDAT __real@41429ec5c0000000
CONST	SEGMENT
__real@41429ec5c0000000 DQ 041429ec5c0000000r	; 2.44059e+006
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _localtimeOffset
_TEXT	SEGMENT
tv236 = -104						; size = 4
_t$ = -104						; size = 8
_x$ = -96						; size = 48
_y$ = -48						; size = 48
_localtimeOffset PROC					; COMDAT
; _p$ = eax
; Line 6678
	sub	esp, 104				; 00000068H
	push	ebx
	push	esi
	push	edi
; Line 6681
	mov	esi, eax
	mov	ecx, 12					; 0000000cH
	lea	edi, DWORD PTR _x$[esp+116]
	rep movsd
; Line 6682
	lea	edi, DWORD PTR _x$[esp+116]
	call	_computeYMD
	mov	eax, edi
	call	_computeHMS
; Line 6683
	mov	eax, DWORD PTR _x$[esp+124]
	add	eax, -1971				; fffff84dH
	xor	ebx, ebx
	cmp	eax, 66					; 00000042H
	ja	SHORT $LN2@localtimeO
; Line 6691
	fld	QWORD PTR _x$[esp+148]
	fadd	QWORD PTR __real@3fe0000000000000
; Line 6692
	call	__ftol2_sse
	mov	DWORD PTR tv236[esp+116], eax
	fild	DWORD PTR tv236[esp+116]
	lea	edi, DWORD PTR [ebx+1]
	jmp	SHORT $LN14@localtimeO
$LN2@localtimeO:
; Line 6689
	fldz
	mov	edi, 1
	mov	DWORD PTR _x$[esp+124], 2000		; 000007d0H
	mov	DWORD PTR _x$[esp+128], edi
	mov	DWORD PTR _x$[esp+132], edi
	mov	DWORD PTR _x$[esp+136], ebx
	mov	DWORD PTR _x$[esp+140], ebx
$LN14@localtimeO:
; Line 6696
	lea	esi, DWORD PTR _x$[esp+116]
	fstp	QWORD PTR _x$[esp+148]
	mov	DWORD PTR _x$[esp+144], ebx
	mov	BYTE PTR _x$[esp+158], bl
	call	_computeJD
; Line 6697
	fld	QWORD PTR _x$[esp+116]
	fsub	QWORD PTR __real@41429ec5c0000000
	fmul	QWORD PTR __real@40f5180000000000
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2
; Line 6712
	add	DWORD PTR _inMutex, edi
; Line 6713
	lea	ecx, DWORD PTR _t$[esp+116]
	push	ecx
	mov	DWORD PTR _t$[esp+120], eax
	mov	DWORD PTR _t$[esp+124], edx
	call	__localtime64
; Line 6719
	fild	DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [eax+16]
; Line 6720
	sub	DWORD PTR _inMutex, edi
	fstp	QWORD PTR _y$[esp+152]
	add	edx, 1900				; 0000076cH
	mov	DWORD PTR _y$[esp+128], edx
	mov	edx, DWORD PTR [eax+12]
	add	ecx, edi
	mov	DWORD PTR _y$[esp+132], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _y$[esp+136], edx
	mov	edx, DWORD PTR [eax+4]
	add	esp, 4
; Line 6727
	lea	esi, DWORD PTR _y$[esp+116]
	mov	DWORD PTR _y$[esp+136], ecx
	mov	DWORD PTR _y$[esp+140], edx
	mov	BYTE PTR _y$[esp+156], 1
	mov	BYTE PTR _y$[esp+157], 1
	mov	BYTE PTR _y$[esp+158], bl
	mov	BYTE PTR _y$[esp+159], bl
	call	_computeJD
; Line 6728
	fld	QWORD PTR _y$[esp+116]
	fsub	QWORD PTR _x$[esp+116]
	pop	edi
	pop	esi
	pop	ebx
; Line 6729
	add	esp, 104				; 00000068H
	ret	0
_localtimeOffset ENDP
_TEXT	ENDS
PUBLIC	__real@403e000000000000
PUBLIC	??_C@_06BJCFNGJP@second?$AA@			; `string'
PUBLIC	__real@4096800000000000
PUBLIC	??_C@_06JGJIJFNK@minute?$AA@			; `string'
PUBLIC	__real@4038000000000000
PUBLIC	??_C@_04LMOJGCPE@hour?$AA@			; `string'
PUBLIC	??_C@_03NNBHCDBP@day?$AA@			; `string'
PUBLIC	??_C@_04JFPLDHAO@year?$AA@			; `string'
PUBLIC	??_C@_05MEBAADFH@month?$AA@			; `string'
PUBLIC	??_C@_09CABLEOFK@start?5of?5?$AA@		; `string'
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@401c000000000000
PUBLIC	??_C@_08IPAOEBNP@weekday?5?$AA@			; `string'
PUBLIC	??_C@_03JPHCIIKF@utc?$AA@			; `string'
PUBLIC	??_C@_09KNIMKLBK@unixepoch?$AA@			; `string'
PUBLIC	??_C@_09EKBOCLDN@localtime?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	_strncmp:PROC
EXTRN	_tolower:PROC
;	COMDAT __real@403e000000000000
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT ??_C@_06BJCFNGJP@second?$AA@
CONST	SEGMENT
??_C@_06BJCFNGJP@second?$AA@ DB 'second', 00H		; `string'
CONST	ENDS
;	COMDAT __real@4096800000000000
CONST	SEGMENT
__real@4096800000000000 DQ 04096800000000000r	; 1440
CONST	ENDS
;	COMDAT ??_C@_06JGJIJFNK@minute?$AA@
CONST	SEGMENT
??_C@_06JGJIJFNK@minute?$AA@ DB 'minute', 00H		; `string'
CONST	ENDS
;	COMDAT __real@4038000000000000
CONST	SEGMENT
__real@4038000000000000 DQ 04038000000000000r	; 24
CONST	ENDS
;	COMDAT ??_C@_04LMOJGCPE@hour?$AA@
CONST	SEGMENT
??_C@_04LMOJGCPE@hour?$AA@ DB 'hour', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NNBHCDBP@day?$AA@
CONST	SEGMENT
??_C@_03NNBHCDBP@day?$AA@ DB 'day', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFPLDHAO@year?$AA@
CONST	SEGMENT
??_C@_04JFPLDHAO@year?$AA@ DB 'year', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEBAADFH@month?$AA@
CONST	SEGMENT
??_C@_05MEBAADFH@month?$AA@ DB 'month', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CABLEOFK@start?5of?5?$AA@
CONST	SEGMENT
??_C@_09CABLEOFK@start?5of?5?$AA@ DB 'start of ', 00H	; `string'
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT ??_C@_08IPAOEBNP@weekday?5?$AA@
CONST	SEGMENT
??_C@_08IPAOEBNP@weekday?5?$AA@ DB 'weekday ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JPHCIIKF@utc?$AA@
CONST	SEGMENT
??_C@_03JPHCIIKF@utc?$AA@ DB 'utc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KNIMKLBK@unixepoch?$AA@
CONST	SEGMENT
??_C@_09KNIMKLBK@unixepoch?$AA@ DB 'unixepoch', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKBOCLDN@localtime?$AA@
CONST	SEGMENT
??_C@_09EKBOCLDN@localtime?$AA@ DB 'localtime', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _parseModifier
_TEXT	SEGMENT
tv748 = -104						; size = 4
tv659 = -104						; size = 4
tv633 = -104						; size = 4
_y$81303 = -104						; size = 4
_n$ = -104						; size = 4
_z$ = -104						; size = 4
_rc$ = -100						; size = 4
_r$ = -96						; size = 8
_c1$81255 = -96						; size = 8
_tx$81276 = -88						; size = 48
_zBuf$ = -36						; size = 30
__$ArrayPad$ = -4					; size = 4
_parseModifier PROC					; COMDAT
; _zMod$ = ecx
; _p$ = ebx
; Line 6752
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+104], eax
	push	esi
	push	edi
	mov	edi, ecx
; Line 6758
	lea	eax, DWORD PTR _zBuf$[esp+112]
	xor	esi, esi
	sub	eax, edi
	mov	DWORD PTR _rc$[esp+112], 1
	mov	DWORD PTR tv748[esp+112], eax
$LN45@parseModif:
	mov	al, BYTE PTR [edi]
	test	al, al
	je	SHORT $LN43@parseModif
; Line 6759
	movsx	eax, al
	push	eax
	call	_tolower
	mov	ecx, DWORD PTR tv748[esp+116]
	mov	BYTE PTR [ecx+edi], al
	add	esi, 1
	add	esp, 4
	add	edi, 1
	cmp	esi, 29					; 0000001dH
	jb	SHORT $LN45@parseModif
$LN43@parseModif:
; Line 6761
	mov	BYTE PTR _zBuf$[esp+esi+112], 0
; Line 6762
	movsx	eax, BYTE PTR _zBuf$[esp+112]
	add	eax, -43				; ffffffd5H
	cmp	eax, 76					; 0000004cH
	ja	$LN16@parseModif
	movzx	edx, BYTE PTR $LN74@parseModif[eax]
	jmp	DWORD PTR $LN107@parseModif[edx*4]
$LN40@parseModif:
; Line 6769
	mov	edi, OFFSET ??_C@_09EKBOCLDN@localtime?$AA@
	lea	esi, DWORD PTR _zBuf$[esp+112]
	mov	ecx, 10					; 0000000aH
	xor	eax, eax
	repe cmpsb
	jne	$LN16@parseModif
; Line 6770
	mov	esi, ebx
	call	_computeJD
; Line 6771
	mov	eax, ebx
	call	_localtimeOffset
; Line 6775
	jmp	$LN105@parseModif
$LN38@parseModif:
; Line 6784
	mov	edi, OFFSET ??_C@_09KNIMKLBK@unixepoch?$AA@
	lea	esi, DWORD PTR _zBuf$[esp+112]
	mov	ecx, 10					; 0000000aH
	xor	edx, edx
	repe cmpsb
	jne	SHORT $LN37@parseModif
	cmp	BYTE PTR [ebx+42], dl
	je	SHORT $LN37@parseModif
; Line 6785
	fld	QWORD PTR [ebx]
; Line 6786
	mov	BYTE PTR [ebx+40], dl
	fdiv	QWORD PTR __real@40f5180000000000
	mov	BYTE PTR [ebx+41], dl
	mov	BYTE PTR [ebx+43], dl
; Line 6787
	mov	DWORD PTR _rc$[esp+112], edx
; Line 6931
	mov	eax, edx
	fadd	QWORD PTR __real@41429ec5c0000000
	fstp	QWORD PTR [ebx]
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@parseModif:
; Line 6788
	mov	edi, OFFSET ??_C@_03JPHCIIKF@utc?$AA@
	lea	esi, DWORD PTR _zBuf$[esp+112]
	mov	ecx, 4
	xor	eax, eax
	repe cmpsb
	jne	$LN16@parseModif
; Line 6790
	mov	esi, ebx
	call	_computeJD
; Line 6791
	mov	eax, ebx
	call	_localtimeOffset
	fst	QWORD PTR _c1$81255[esp+112]
; Line 6792
	fsubr	QWORD PTR [ebx]
; Line 6794
	mov	eax, ebx
	mov	BYTE PTR [ebx+40], 0
	mov	BYTE PTR [ebx+41], 0
	fstp	QWORD PTR [ebx]
	mov	BYTE PTR [ebx+43], 0
	call	_localtimeOffset
	fsubr	QWORD PTR _c1$81255[esp+112]
; Line 6795
	mov	DWORD PTR _rc$[esp+112], 0
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN34@parseModif:
; Line 6808
	push	8
	lea	ecx, DWORD PTR _zBuf$[esp+116]
	push	OFFSET ??_C@_08IPAOEBNP@weekday?5?$AA@
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN16@parseModif
	lea	edx, DWORD PTR _r$[esp+112]
	push	edx
	lea	eax, DWORD PTR _zBuf$[esp+124]
	call	_sqlite3AtoF
	add	esp, 4
	test	eax, eax
	jle	$LN16@parseModif
	fld	QWORD PTR _r$[esp+112]
	fld	ST(0)
	call	__ftol2_sse
	mov	ecx, eax
	mov	DWORD PTR _n$[esp+112], ecx
	fild	DWORD PTR _n$[esp+112]
	fucomp	ST(1)
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN96@parseModif
	test	ecx, ecx
	jl	$LN96@parseModif
	fcomp	QWORD PTR __real@401c000000000000
	fnstsw	ax
	test	ah, 5
	jp	$LN16@parseModif
; Line 6810
	mov	edi, ebx
	call	_computeYMD
	mov	eax, ebx
	call	_computeHMS
; Line 6813
	mov	esi, ebx
	mov	BYTE PTR [ebx+43], 0
	mov	BYTE PTR [ebx+42], 0
	call	_computeJD
; Line 6814
	fld	QWORD PTR [ebx]
	fadd	QWORD PTR __real@3ff8000000000000
	call	__ftol2_sse
	mov	ecx, eax
; Line 6815
	mov	eax, 1840700269				; 6db6db6dH
	imul	ecx
	sub	edx, ecx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	lea	edx, DWORD PTR [eax*8]
	sub	edx, eax
; Line 6816
	mov	eax, DWORD PTR _n$[esp+112]
	add	ecx, edx
	cmp	ecx, eax
	jle	SHORT $LN32@parseModif
	sub	ecx, 7
$LN32@parseModif:
; Line 6817
	sub	eax, ecx
	mov	DWORD PTR tv659[esp+112], eax
	fild	DWORD PTR tv659[esp+112]
$LN105@parseModif:
	fadd	QWORD PTR [ebx]
; Line 6818
	mov	BYTE PTR [ebx+40], 0
	mov	BYTE PTR [ebx+41], 0
	mov	BYTE PTR [ebx+43], 0
	fstp	QWORD PTR [ebx]
$LN106@parseModif:
; Line 6819
	mov	DWORD PTR _rc$[esp+112], 0
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@parseModif:
; Line 6830
	push	9
	lea	eax, DWORD PTR _zBuf$[esp+116]
	push	OFFSET ??_C@_09CABLEOFK@start?5of?5?$AA@
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN16@parseModif
; Line 6832
	mov	edi, ebx
	call	_computeYMD
; Line 6835
	fldz
	xor	eax, eax
	fstp	QWORD PTR [ebx+32]
; Line 6838
	mov	edi, OFFSET ??_C@_05MEBAADFH@month?$AA@
	lea	esi, DWORD PTR _zBuf$[esp+121]
	mov	ecx, 6
	xor	edx, edx
	mov	BYTE PTR [ebx+41], 1
	mov	DWORD PTR [ebx+24], eax
	mov	DWORD PTR [ebx+20], eax
	mov	BYTE PTR [ebx+43], al
	mov	BYTE PTR [ebx+42], al
	repe cmpsb
	jne	SHORT $LN29@parseModif
; Line 6839
	mov	DWORD PTR [ebx+16], 1
; Line 6840
	mov	DWORD PTR _rc$[esp+112], edx
; Line 6931
	mov	eax, edx
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@parseModif:
; Line 6841
	mov	edi, OFFSET ??_C@_04JFPLDHAO@year?$AA@
	lea	esi, DWORD PTR _zBuf$[esp+121]
	mov	ecx, 5
	xor	eax, eax
	repe cmpsb
	jne	SHORT $LN27@parseModif
; Line 6842
	mov	edi, ebx
	call	_computeYMD
; Line 6843
	mov	eax, 1
	mov	DWORD PTR [ebx+12], eax
; Line 6844
	mov	DWORD PTR [ebx+16], eax
; Line 6845
	jmp	$LN106@parseModif
$LN27@parseModif:
; Line 6846
	mov	edi, OFFSET ??_C@_03NNBHCDBP@day?$AA@
	lea	esi, DWORD PTR _zBuf$[esp+121]
	mov	ecx, 4
	xor	edx, edx
	repe cmpsb
	jne	$LN16@parseModif
; Line 6847
	mov	DWORD PTR _rc$[esp+112], edx
; Line 6931
	mov	eax, edx
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@parseModif:
; Line 6863
	lea	eax, DWORD PTR _r$[esp+112]
	push	eax
	lea	eax, DWORD PTR _zBuf$[esp+116]
	call	_sqlite3AtoF
; Line 6865
	lea	esi, DWORD PTR _zBuf$[esp+eax+116]
	add	esp, 4
	cmp	BYTE PTR [esi], 58			; 0000003aH
	jne	$LN23@parseModif
; Line 6874
	movzx	ecx, BYTE PTR _zBuf$[esp+112]
	push	ecx
	lea	esi, DWORD PTR _zBuf$[esp+116]
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN22@parseModif
	lea	esi, DWORD PTR _zBuf$[esp+113]
$LN22@parseModif:
; Line 6875
	push	48					; 00000030H
	lea	edx, DWORD PTR _tx$81276[esp+116]
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 6876
	lea	edi, DWORD PTR _tx$81276[esp+112]
	mov	eax, esi
	call	_parseHhMmSs
	test	eax, eax
	jne	$LN16@parseModif
; Line 6877
	mov	esi, edi
	call	_computeJD
; Line 6878
	fld	QWORD PTR _tx$81276[esp+112]
	fsub	QWORD PTR __real@3fe0000000000000
; Line 6880
	fld	ST(0)
	call	__ftol2_sse
; Line 6881
	cmp	BYTE PTR _zBuf$[esp+112], 45		; 0000002dH
	mov	DWORD PTR tv633[esp+112], eax
	fild	DWORD PTR tv633[esp+112]
	fsubp	ST(1), ST(0)
	fst	QWORD PTR _tx$81276[esp+112]
	jne	SHORT $LN99@parseModif
	fchs
	fstp	QWORD PTR _tx$81276[esp+112]
	jmp	SHORT $LN20@parseModif
$LN99@parseModif:
	fstp	ST(0)
$LN20@parseModif:
; Line 6882
	mov	esi, ebx
	call	_computeJD
; Line 6884
	fld	QWORD PTR [ebx]
	fadd	QWORD PTR _tx$81276[esp+112]
; Line 6885
	mov	DWORD PTR _rc$[esp+112], 0
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	mov	BYTE PTR [ebx+40], 0
	fstp	QWORD PTR [ebx]
	mov	BYTE PTR [ebx+41], 0
	mov	BYTE PTR [ebx+43], 0
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@parseModif:
; Line 6889
	movzx	eax, BYTE PTR [esi]
	push	eax
	mov	DWORD PTR _z$[esp+116], esi
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@parseModif
	npad	1
$LL19@parseModif:
	movzx	ecx, BYTE PTR [esi+1]
	add	esi, 1
	push	ecx
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL19@parseModif
	mov	DWORD PTR _z$[esp+112], esi
$LN18@parseModif:
; Line 6890
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL81@parseModif:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL81@parseModif
	sub	eax, edx
	mov	edi, eax
; Line 6891
	lea	edx, DWORD PTR [edi-3]
	cmp	edx, 7
	ja	$LN16@parseModif
; Line 6892
	cmp	BYTE PTR [edi+esi-1], 115		; 00000073H
	jne	SHORT $LN15@parseModif
	mov	BYTE PTR [edi+esi-1], cl
	sub	edi, 1
$LN15@parseModif:
; Line 6893
	mov	esi, ebx
	call	_computeJD
; Line 6895
	cmp	edi, 3
	mov	DWORD PTR _rc$[esp+112], 0
	jne	SHORT $LN14@parseModif
	mov	esi, DWORD PTR _z$[esp+112]
	mov	edi, OFFSET ??_C@_03NNBHCDBP@day?$AA@
	mov	ecx, 4
	xor	eax, eax
	repe cmpsb
	jne	$LN3@parseModif
; Line 6896
	fld	QWORD PTR [ebx]
; Line 6924
	mov	BYTE PTR [ebx+40], al
	fadd	QWORD PTR _r$[esp+112]
	mov	BYTE PTR [ebx+41], al
	mov	BYTE PTR [ebx+43], al
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	fstp	QWORD PTR [ebx]
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@parseModif:
; Line 6897
	cmp	edi, 4
	jne	SHORT $LN12@parseModif
	mov	eax, DWORD PTR _z$[esp+112]
	mov	edi, OFFSET ??_C@_04LMOJGCPE@hour?$AA@
	mov	esi, eax
	mov	ecx, 5
	xor	edx, edx
	repe cmpsb
	jne	$LN72@parseModif
; Line 6898
	fld	QWORD PTR _r$[esp+112]
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	fdiv	QWORD PTR __real@4038000000000000
	mov	BYTE PTR [ebx+40], dl
	mov	BYTE PTR [ebx+41], dl
	mov	BYTE PTR [ebx+43], dl
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@parseModif:
; Line 6899
	cmp	edi, 6
	jne	$LN8@parseModif
	mov	eax, DWORD PTR _z$[esp+112]
	mov	edi, OFFSET ??_C@_06JGJIJFNK@minute?$AA@
	mov	esi, eax
	mov	ecx, 7
	xor	edx, edx
	repe cmpsb
	jne	SHORT $LN73@parseModif
; Line 6900
	fld	QWORD PTR _r$[esp+112]
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	fdiv	QWORD PTR __real@4096800000000000
	mov	BYTE PTR [ebx+40], dl
	mov	BYTE PTR [ebx+41], dl
	mov	BYTE PTR [ebx+43], dl
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN73@parseModif:
; Line 6901
	mov	esi, eax
	mov	edi, OFFSET ??_C@_06BJCFNGJP@second?$AA@
	mov	ecx, 7
	xor	eax, eax
	repe cmpsb
	jne	$LN3@parseModif
; Line 6902
	fld	QWORD PTR _r$[esp+112]
; Line 6924
	mov	BYTE PTR [ebx+40], al
	fdiv	QWORD PTR __real@40f5180000000000
	mov	BYTE PTR [ebx+41], al
	mov	BYTE PTR [ebx+43], al
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@parseModif:
; Line 6903
	cmp	edi, 5
	jne	$LN3@parseModif
	mov	esi, DWORD PTR _z$[esp+112]
	mov	edi, OFFSET ??_C@_05MEBAADFH@month?$AA@
	mov	ecx, 6
	xor	edx, edx
	repe cmpsb
	jne	$LN3@parseModif
; Line 6905
	mov	edi, ebx
	call	_computeYMD
	mov	eax, ebx
	call	_computeHMS
; Line 6906
	fild	DWORD PTR [ebx+12]
	fadd	QWORD PTR _r$[esp+112]
	call	__ftol2_sse
	mov	ecx, eax
; Line 6907
	test	ecx, ecx
	mov	DWORD PTR [ebx+12], ecx
	mov	eax, 715827883				; 2aaaaaabH
	lea	edx, DWORD PTR [ecx-1]
	jg	SHORT $LN104@parseModif
	lea	edx, DWORD PTR [ecx-12]
$LN104@parseModif:
	imul	edx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; Line 6908
	add	DWORD PTR [ebx+8], eax
; Line 6909
	lea	eax, DWORD PTR [eax+eax*2]
	add	eax, eax
	add	eax, eax
	sub	ecx, eax
; Line 6911
	mov	esi, ebx
	mov	DWORD PTR [ebx+12], ecx
	mov	BYTE PTR [ebx+42], 0
	call	_computeJD
; Line 6912
	fld	QWORD PTR _r$[esp+112]
	fld	ST(0)
	call	__ftol2_sse
	mov	DWORD PTR _y$81303[esp+112], eax
; Line 6913
	fild	DWORD PTR _y$81303[esp+112]
	fld	ST(1)
	fucomp	ST(1)
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$LN102@parseModif
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	fsubp	ST(1), ST(0)
	mov	BYTE PTR [ebx+40], 0
	mov	BYTE PTR [ebx+41], 0
	fmul	QWORD PTR __real@403e000000000000
	mov	BYTE PTR [ebx+43], 0
	fadd	QWORD PTR [ebx]
	fstp	QWORD PTR [ebx]
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN72@parseModif:
; Line 6916
	mov	edi, OFFSET ??_C@_04JFPLDHAO@year?$AA@
	mov	esi, eax
	mov	ecx, 5
	xor	edx, edx
	repe cmpsb
	jne	SHORT $LN3@parseModif
; Line 6917
	mov	edi, ebx
	call	_computeYMD
	mov	eax, ebx
	call	_computeHMS
; Line 6918
	fild	DWORD PTR [ebx+8]
	fadd	QWORD PTR _r$[esp+112]
	call	__ftol2_sse
; Line 6920
	mov	esi, ebx
	mov	DWORD PTR [ebx+8], eax
	mov	BYTE PTR [ebx+42], 0
	call	_computeJD
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	mov	BYTE PTR [ebx+40], 0
	mov	BYTE PTR [ebx+41], 0
	mov	BYTE PTR [ebx+43], 0
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@parseModif:
; Line 6922
	mov	DWORD PTR _rc$[esp+112], 1
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	mov	BYTE PTR [ebx+40], 0
	mov	BYTE PTR [ebx+41], 0
	mov	BYTE PTR [ebx+43], 0
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN102@parseModif:
; Line 6931
	mov	eax, DWORD PTR _rc$[esp+112]
	fstp	ST(0)
	fstp	ST(0)
	mov	BYTE PTR [ebx+40], 0
	mov	BYTE PTR [ebx+41], 0
	mov	BYTE PTR [ebx+43], 0
; Line 6932
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[esp+104]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN96@parseModif:
; Line 6808
	fstp	ST(0)
$LN16@parseModif:
; Line 6932
	mov	ecx, DWORD PTR __$ArrayPad$[esp+112]
	mov	eax, DWORD PTR _rc$[esp+112]
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN107@parseModif:
	DD	$LN24@parseModif
	DD	$LN40@parseModif
	DD	$LN31@parseModif
	DD	$LN38@parseModif
	DD	$LN34@parseModif
	DD	$LN16@parseModif
$LN74@parseModif:
	DB	0
	DB	5
	DB	0
	DB	5
	DB	5
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	3
	DB	5
	DB	4
_parseModifier ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FreeX
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3FreeX PROC					; COMDAT
; Line 8055
	mov	eax, DWORD PTR _p$[esp-4]
	test	eax, eax
	je	SHORT $LN4@sqlite3Fre
; Line 8057
	mov	DWORD PTR _p$[esp-4], eax
	jmp	_free
$LN4@sqlite3Fre:
; Line 8059
	ret	0
_sqlite3FreeX ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FailedMalloc
_TEXT	SEGMENT
_sqlite3FailedMalloc PROC				; COMDAT
; Line 8227
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN1@sqlite3Fai
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN2@sqlite3Fai
$LN1@sqlite3Fai:
; Line 8228
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
; Line 8230
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
$LN2@sqlite3Fai:
; Line 8232
	ret	0
_sqlite3FailedMalloc ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
_BSS	SEGMENT
?prng@?1??randomByte@@9@9 DB 0103H DUP (?)		; `randomByte'::`2'::prng
; Function compile flags: /Ogtpy
_BSS	ENDS
;	COMDAT _randomByte
_TEXT	SEGMENT
_k$82399 = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_randomByte PROC					; COMDAT
; Line 9176
	sub	esp, 260				; 00000104H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+260], eax
	push	ebx
; Line 9197
	xor	ebx, ebx
	cmp	BYTE PTR ?prng@?1??randomByte@@9@9, bl
	jne	$LN7@randomByte
; Line 9202
	push	256					; 00000100H
	lea	eax, DWORD PTR _k$82399[esp+268]
	push	ebx
	push	eax
	mov	BYTE PTR ?prng@?1??randomByte@@9@9+2, bl
	mov	BYTE PTR ?prng@?1??randomByte@@9@9+1, bl
	call	_memset
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _k$82399[esp+264]
	push	ecx
	call	DWORD PTR __imp__GetSystemTime@4
; Line 9203
	xor	eax, eax
	npad	1
$LL6@randomByte:
; Line 9204
	mov	BYTE PTR ?prng@?1??randomByte@@9@9[eax+3], al
	add	eax, 1
	cmp	eax, 256				; 00000100H
	jl	SHORT $LL6@randomByte
; Line 9206
	xor	eax, eax
$LL3@randomByte:
; Line 9207
	movzx	edx, BYTE PTR _k$82399[esp+eax+264]
	add	dl, BYTE PTR ?prng@?1??randomByte@@9@9[eax+3]
	mov	cl, BYTE PTR ?prng@?1??randomByte@@9@9+2
	add	cl, dl
	mov	BYTE PTR ?prng@?1??randomByte@@9@9+2, cl
; Line 9209
	mov	bl, BYTE PTR ?prng@?1??randomByte@@9@9[eax+3]
	movzx	ecx, cl
	mov	dl, BYTE PTR ?prng@?1??randomByte@@9@9[ecx+3]
	mov	BYTE PTR ?prng@?1??randomByte@@9@9[ecx+3], bl
; Line 9210
	mov	BYTE PTR ?prng@?1??randomByte@@9@9[eax+3], dl
	add	eax, 1
	cmp	eax, 256				; 00000100H
	jl	SHORT $LL3@randomByte
; Line 9212
	mov	BYTE PTR ?prng@?1??randomByte@@9@9, 1
$LN7@randomByte:
; Line 9217
	mov	al, BYTE PTR ?prng@?1??randomByte@@9@9+1
; Line 9219
	mov	dl, BYTE PTR ?prng@?1??randomByte@@9@9+2
	add	al, 1
	mov	BYTE PTR ?prng@?1??randomByte@@9@9+1, al
	movzx	ecx, al
	mov	al, BYTE PTR ?prng@?1??randomByte@@9@9[ecx+3]
	add	dl, al
	mov	BYTE PTR ?prng@?1??randomByte@@9@9+2, dl
; Line 9220
	movzx	edx, dl
	movzx	edx, BYTE PTR ?prng@?1??randomByte@@9@9[edx+3]
	mov	BYTE PTR ?prng@?1??randomByte@@9@9[ecx+3], dl
; Line 9221
	movzx	ecx, BYTE PTR ?prng@?1??randomByte@@9@9+2
	mov	BYTE PTR ?prng@?1??randomByte@@9@9[ecx+3], al
; Line 9223
	movzx	edx, BYTE PTR ?prng@?1??randomByte@@9@9+1
	mov	cl, BYTE PTR ?prng@?1??randomByte@@9@9[edx+3]
	add	cl, al
	movzx	edx, cl
; Line 9224
	mov	ecx, DWORD PTR __$ArrayPad$[esp+264]
	movzx	eax, BYTE PTR ?prng@?1??randomByte@@9@9[edx+3]
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	ret	0
_randomByte ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Randomness
_TEXT	SEGMENT
_sqlite3Randomness PROC					; COMDAT
; _N$ = eax
; _pBuf$ = ecx
; Line 9231
	add	DWORD PTR _inMutex, 1
	push	esi
	mov	esi, eax
; Line 9232
	test	esi, esi
	push	edi
	mov	edi, ecx
	je	SHORT $LN12@sqlite3Ran
$LL2@sqlite3Ran:
	sub	esi, 1
; Line 9233
	call	_randomByte
	mov	BYTE PTR [edi], al
	add	edi, 1
	test	esi, esi
	jne	SHORT $LL2@sqlite3Ran
$LN12@sqlite3Ran:
; Line 9235
	sub	DWORD PTR _inMutex, 1
	pop	edi
	pop	esi
; Line 9236
	ret	0
_sqlite3Randomness ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ErrorClear
_TEXT	SEGMENT
_sqlite3ErrorClear PROC					; COMDAT
; _pParse$ = esi
; Line 10307
	mov	eax, DWORD PTR [esi+8]
	push	edi
	xor	edi, edi
	cmp	eax, edi
	je	SHORT $LN8@sqlite3Err@2
	push	eax
	call	_free
	add	esp, 4
$LN8@sqlite3Err@2:
; Line 10309
	mov	DWORD PTR [esi+24], edi
	mov	DWORD PTR [esi+8], edi
	pop	edi
; Line 10310
	ret	0
_sqlite3ErrorClear ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ThreadData
_TEXT	SEGMENT
_sqlite3ThreadData PROC					; COMDAT
; Line 10863
	mov	eax, 1
	call	_sqlite3WinThreadSpecificData
; Line 10864
	test	eax, eax
	jne	SHORT $LN5@sqlite3Thr
; Line 10865
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN4@sqlite3Thr
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN5@sqlite3Thr
$LN4@sqlite3Thr:
	add	DWORD PTR _inMutex, 1
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN5@sqlite3Thr:
; Line 10868
	ret	0
_sqlite3ThreadData ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ThreadDataReadOnly
_TEXT	SEGMENT
_sqlite3ThreadDataReadOnly PROC				; COMDAT
; Line 10878
	cmp	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, 0
	push	esi
	jne	SHORT $LN31@sqlite3Thr@2
	mov	esi, 1
	add	DWORD PTR _inMutex, esi
	call	DWORD PTR __imp__TlsAlloc@0
	sub	DWORD PTR _inMutex, esi
	cmp	eax, -1
	mov	DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9, eax
	je	SHORT $LN3@sqlite3Thr@2
	mov	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, esi
	jmp	SHORT $LN25@sqlite3Thr@2
$LN31@sqlite3Thr@2:
	mov	eax, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
$LN25@sqlite3Thr@2:
	push	eax
	call	DWORD PTR __imp__TlsGetValue@4
; Line 10879
	test	eax, eax
	jne	SHORT $LN4@sqlite3Thr@2
$LN3@sqlite3Thr@2:
	mov	eax, OFFSET ?zeroData@?1??sqlite3ThreadDataReadOnly@@9@9
$LN4@sqlite3Thr@2:
	pop	esi
; Line 10880
	ret	0
_sqlite3ThreadDataReadOnly ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ReleaseThreadData
_TEXT	SEGMENT
_sqlite3ReleaseThreadData PROC				; COMDAT
; Line 10887
	or	eax, -1
	jmp	_sqlite3WinThreadSpecificData
_sqlite3ReleaseThreadData ENDP
_TEXT	ENDS
EXTRN	__imp__CloseHandle@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _winClose
_TEXT	SEGMENT
_pId$ = 8						; size = 4
_winClose PROC						; COMDAT
; Line 16969
	push	ebp
; Line 16972
	mov	ebp, DWORD PTR _pId$[esp]
	test	ebp, ebp
	je	SHORT $LN15@winClose
	push	esi
	mov	esi, DWORD PTR [ebp]
	test	esi, esi
	je	SHORT $LN16@winClose
; Line 16976
	mov	eax, DWORD PTR [esi+4]
	push	ebx
	mov	ebx, DWORD PTR __imp__CloseHandle@4
	push	edi
	push	eax
	xor	edi, edi
	call	ebx
; Line 16977
	test	eax, eax
	jne	SHORT $LN1@winClose
	mov	ebp, DWORD PTR __imp__Sleep@4
	npad	5
$LL4@winClose:
	mov	ecx, edi
	add	edi, 1
	cmp	ecx, 3
	jge	SHORT $LN17@winClose
	push	100					; 00000064H
	call	ebp
	mov	edx, DWORD PTR [esi+4]
	push	edx
	call	ebx
	test	eax, eax
	je	SHORT $LL4@winClose
$LN17@winClose:
	mov	ebp, DWORD PTR _pId$[esp+12]
$LN1@winClose:
; Line 16982
	push	esi
	call	_free
	add	esp, 4
	pop	edi
; Line 16983
	mov	DWORD PTR [ebp], 0
	pop	ebx
$LN16@winClose:
	pop	esi
$LN15@winClose:
; Line 16985
	xor	eax, eax
	pop	ebp
; Line 16986
	ret	0
_winClose ENDP
_TEXT	ENDS
EXTRN	__imp__LockFileEx@24:PROC
; Function compile flags: /Ogtpy
;	COMDAT _getReadLock
_TEXT	SEGMENT
_lk$83949 = -24						; size = 4
_ovlp$83947 = -20					; size = 20
_getReadLock PROC					; COMDAT
; _id$ = ebx
; Line 17117
	sub	esp, 24					; 00000018H
; Line 17119
	call	_isNT
	test	eax, eax
	je	SHORT $LN2@getReadLoc
; Line 17124
	mov	ecx, DWORD PTR [ebx+4]
	lea	eax, DWORD PTR _ovlp$83947[esp+24]
	push	eax
	push	0
	push	510					; 000001feH
	push	0
	push	1
	push	ecx
	mov	DWORD PTR _ovlp$83947[esp+56], 1073741826 ; 40000002H
	mov	DWORD PTR _ovlp$83947[esp+60], 0
	mov	DWORD PTR _ovlp$83947[esp+64], 0
	call	DWORD PTR __imp__LockFileEx@24
; Line 17132
	add	esp, 24					; 00000018H
	ret	0
$LN2@getReadLoc:
; Line 17127
	add	DWORD PTR _inMutex, 1
	push	esi
	push	edi
	mov	esi, 4
	lea	edi, DWORD PTR _lk$83949[esp+32]
$LL6@getReadLoc:
	sub	esi, 1
	call	_randomByte
	mov	BYTE PTR [edi], al
	add	edi, 1
	test	esi, esi
	jne	SHORT $LL6@getReadLoc
; Line 17128
	mov	eax, DWORD PTR _lk$83949[esp+32]
	and	eax, 2147483647				; 7fffffffH
	cdq
	mov	ecx, 509				; 000001fdH
	idiv	ecx
; Line 17129
	mov	eax, DWORD PTR [ebx+4]
	sub	DWORD PTR _inMutex, 1
	push	esi
	push	1
	push	esi
	mov	WORD PTR [ebx+10], dx
	movsx	edx, dx
	add	edx, 1073741826				; 40000002H
	push	edx
	push	eax
	call	DWORD PTR __imp__LockFile@20
	pop	edi
	pop	esi
; Line 17132
	add	esp, 24					; 00000018H
	ret	0
_getReadLock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _winLock
_TEXT	SEGMENT
_newLocktype$ = 8					; size = 4
_id$ = 8						; size = 4
_locktype$ = 12						; size = 4
_winLock PROC						; COMDAT
; Line 17221
	mov	edx, DWORD PTR _locktype$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _id$[esp]
	mov	al, BYTE PTR [ebx+8]
	movzx	ecx, al
	push	esi
	xor	esi, esi
	cmp	ecx, edx
	push	edi
	mov	edi, 1
	jl	SHORT $LN16@winLock
	pop	edi
	pop	esi
; Line 17222
	xor	eax, eax
	pop	ebx
; Line 17311
	ret	0
$LN16@winLock:
; Line 17238
	test	al, al
	mov	DWORD PTR _newLocktype$[esp+8], ecx
	je	SHORT $LN26@winLock
	cmp	edx, 4
	jne	SHORT $LN27@winLock
	cmp	al, 2
	jne	$LN23@winLock
$LN26@winLock:
; Line 17239
	mov	esi, DWORD PTR __imp__Sleep@4
	push	ebp
	mov	ebp, 3
$LL13@winLock:
; Line 17240
	mov	eax, DWORD PTR [ebx+4]
	push	0
	push	1
	push	0
	push	1073741824				; 40000000H
	push	eax
	sub	ebp, 1
	call	DWORD PTR __imp__LockFile@20
	mov	edi, eax
	test	edi, edi
	jne	SHORT $LN20@winLock
; Line 17245
	push	1
	call	esi
	test	ebp, ebp
	jg	SHORT $LL13@winLock
$LN20@winLock:
; Line 17247
	mov	esi, edi
	pop	ebp
$LN27@winLock:
; Line 17252
	mov	eax, DWORD PTR _locktype$[esp+8]
	cmp	eax, 1
	jne	SHORT $LN10@winLock
	test	edi, edi
	je	SHORT $LN25@winLock
; Line 17254
	call	_getReadLock
	mov	edi, eax
; Line 17255
	test	edi, edi
	je	SHORT $LN25@winLock
; Line 17256
	mov	DWORD PTR _newLocktype$[esp+8], 1
$LN25@winLock:
; Line 17295
	test	esi, esi
	je	SHORT $LN3@winLock
	cmp	DWORD PTR _locktype$[esp+8], 1
	jne	SHORT $LN3@winLock
; Line 17296
	mov	eax, DWORD PTR [ebx+4]
	push	0
	push	1
	push	0
	push	1073741824				; 40000000H
	push	eax
	call	DWORD PTR __imp__UnlockFile@20
$LN3@winLock:
; Line 17302
	test	edi, edi
	je	$LN2@winLock
; Line 17309
	mov	cl, BYTE PTR _newLocktype$[esp+8]
	pop	edi
	pop	esi
	mov	BYTE PTR [ebx+8], cl
	xor	eax, eax
	pop	ebx
; Line 17311
	ret	0
$LN10@winLock:
; Line 17262
	cmp	eax, 2
	jne	SHORT $LN8@winLock
	test	edi, edi
	je	SHORT $LN25@winLock
; Line 17264
	mov	ecx, DWORD PTR [ebx+4]
	push	0
	push	1
	push	0
	push	1073741825				; 40000001H
	push	ecx
	call	DWORD PTR __imp__LockFile@20
	mov	edi, eax
; Line 17265
	test	edi, edi
	je	SHORT $LN25@winLock
; Line 17266
	mov	DWORD PTR _newLocktype$[esp+8], 2
; Line 17272
	jmp	SHORT $LN25@winLock
$LN8@winLock:
	cmp	eax, 4
	jne	SHORT $LN25@winLock
	test	edi, edi
	je	SHORT $LN25@winLock
$LN23@winLock:
; Line 17281
	mov	esi, ebx
	mov	DWORD PTR _newLocktype$[esp+8], 3
	call	_unlockReadLock
; Line 17283
	mov	edx, DWORD PTR [ebx+4]
	push	0
	push	510					; 000001feH
	push	0
	push	1073741826				; 40000002H
	push	edx
	call	DWORD PTR __imp__LockFile@20
	mov	edi, eax
; Line 17284
	test	edi, edi
	je	SHORT $LN5@winLock
; Line 17285
	mov	DWORD PTR _newLocktype$[esp+8], 4
; Line 17286
	jmp	$LN3@winLock
$LN5@winLock:
; Line 17288
	call	_getReadLock
$LN2@winLock:
; Line 17309
	mov	cl, BYTE PTR _newLocktype$[esp+8]
	pop	edi
	pop	esi
	mov	BYTE PTR [ebx+8], cl
	mov	eax, 5
	pop	ebx
; Line 17311
	ret	0
_winLock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _winUnlock
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_id$ = 8						; size = 4
_locktype$ = 12						; size = 4
_winUnlock PROC						; COMDAT
; Line 17347
	push	ecx
	push	ebx
	push	ebp
; Line 17356
	mov	ebp, DWORD PTR __imp__UnlockFile@20
	push	esi
	mov	esi, DWORD PTR _id$[esp+12]
	push	edi
	movzx	edi, BYTE PTR [esi+8]
	cmp	edi, 4
	mov	DWORD PTR _rc$[esp+20], 0
	jl	SHORT $LN10@winUnlock
; Line 17357
	mov	eax, DWORD PTR [esi+4]
	push	0
	push	510					; 000001feH
	push	0
	push	1073741826				; 40000002H
	push	eax
	call	ebp
; Line 17358
	mov	ebx, DWORD PTR _locktype$[esp+16]
	cmp	ebx, 1
	jne	SHORT $LN11@winUnlock
	mov	ebx, esi
	call	_getReadLock
	test	eax, eax
	jne	SHORT $LN10@winUnlock
; Line 17361
	mov	DWORD PTR _rc$[esp+20], 2058		; 0000080aH
$LN10@winUnlock:
	mov	ebx, DWORD PTR _locktype$[esp+16]
$LN11@winUnlock:
; Line 17364
	cmp	edi, 2
	jl	SHORT $LN3@winUnlock
; Line 17365
	mov	ecx, DWORD PTR [esi+4]
	push	0
	push	1
	push	0
	push	1073741825				; 40000001H
	push	ecx
	call	ebp
$LN3@winUnlock:
; Line 17367
	test	ebx, ebx
	jne	SHORT $LN2@winUnlock
	cmp	edi, 1
	jl	SHORT $LN2@winUnlock
; Line 17368
	call	_unlockReadLock
$LN2@winUnlock:
; Line 17370
	cmp	edi, 3
	jl	SHORT $LN8@winUnlock
; Line 17371
	mov	edx, DWORD PTR [esi+4]
	push	0
	push	1
	push	0
	push	1073741824				; 40000000H
	push	edx
	call	ebp
$LN8@winUnlock:
; Line 17374
	mov	eax, DWORD PTR _rc$[esp+20]
	pop	edi
	mov	BYTE PTR [esi+8], bl
	pop	esi
	pop	ebp
	pop	ebx
; Line 17375
	pop	ecx
	ret	0
_winUnlock ENDP
_TEXT	ENDS
PUBLIC	??_C@_01LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_01LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_01LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _writeJournalHdr
_TEXT	SEGMENT
_zHeader$ = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
_writeJournalHdr PROC					; COMDAT
; _pPager$ = ecx
; Line 18488
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+28], eax
	push	esi
	mov	esi, ecx
; Line 18492
	mov	eax, DWORD PTR [esi+152]
	or	eax, DWORD PTR [esi+156]
	jne	SHORT $LN4@writeJourn
; Line 18493
	mov	ecx, DWORD PTR [esi+136]
	mov	edx, DWORD PTR [esi+140]
	mov	DWORD PTR [esi+152], ecx
	mov	DWORD PTR [esi+156], edx
$LN4@writeJourn:
; Line 18496
	mov	eax, esi
	call	_seekJournalHdr
; Line 18497
	test	eax, eax
	jne	$LN5@writeJourn
; Line 18499
	mov	ecx, DWORD PTR [esi+136]
; Line 18500
	mov	eax, DWORD PTR [esi+176]
	cdq
	add	eax, ecx
	push	ebx
	push	ebp
	push	edi
	mov	edi, DWORD PTR [esi+140]
	adc	edx, edi
	mov	DWORD PTR [esi+140], edx
	mov	DWORD PTR [esi+136], eax
	mov	DWORD PTR [esi+144], ecx
	mov	DWORD PTR [esi+148], edi
; Line 18510
	mov	eax, DWORD PTR _aJournalMagic
	mov	ecx, DWORD PTR _aJournalMagic+4
	mov	DWORD PTR _zHeader$[esp+44], eax
; Line 18512
	mov	al, BYTE PTR [esi+7]
	neg	al
	mov	DWORD PTR _zHeader$[esp+48], ecx
; Line 18514
	lea	ebp, DWORD PTR [esi+44]
	mov	edi, 4
	mov	ebx, ebp
	sbb	eax, eax
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR _zHeader$[esp+52], dl
	mov	ecx, eax
	mov	edx, eax
	shr	ecx, 16					; 00000010H
	shr	edx, 8
	add	DWORD PTR _inMutex, 1
	mov	BYTE PTR _zHeader$[esp+53], cl
	mov	BYTE PTR _zHeader$[esp+54], dl
	mov	BYTE PTR _zHeader$[esp+55], al
$LL10@writeJourn:
	sub	edi, 1
	call	_randomByte
	mov	BYTE PTR [ebx], al
	add	ebx, 1
	test	edi, edi
	jne	SHORT $LL10@writeJourn
; Line 18515
	mov	eax, DWORD PTR [ebp]
	mov	ecx, eax
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR _zHeader$[esp+56], cl
	sub	DWORD PTR _inMutex, 1
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR _zHeader$[esp+57], dl
	mov	BYTE PTR _zHeader$[esp+59], al
	mov	ecx, eax
; Line 18517
	mov	eax, DWORD PTR [esi+28]
	shr	ecx, 8
	mov	BYTE PTR _zHeader$[esp+58], cl
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR _zHeader$[esp+60], dl
	mov	ecx, eax
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR _zHeader$[esp+61], cl
	mov	BYTE PTR _zHeader$[esp+63], al
	mov	edx, eax
; Line 18519
	mov	eax, DWORD PTR [esi+176]
	mov	ecx, eax
	shr	ecx, 24					; 00000018H
	shr	edx, 8
	mov	BYTE PTR _zHeader$[esp+64], cl
	mov	BYTE PTR _zHeader$[esp+62], dl
	mov	ecx, eax
	mov	edx, eax
	shr	ecx, 8
	shr	edx, 16					; 00000010H
	mov	BYTE PTR _zHeader$[esp+66], cl
	mov	BYTE PTR _zHeader$[esp+67], al
; Line 18521
	mov	eax, DWORD PTR [esi+100]
	mov	BYTE PTR _zHeader$[esp+65], dl
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+12]
	push	24					; 00000018H
	lea	ecx, DWORD PTR _zHeader$[esp+48]
	push	ecx
	push	eax
	call	edx
	add	esp, 12					; 0000000cH
; Line 18526
	test	eax, eax
	jne	SHORT $LN1@writeJourn
; Line 18528
	mov	eax, DWORD PTR [esi+136]
	mov	ecx, DWORD PTR [esi+140]
	mov	edx, DWORD PTR [esi+100]
	sub	eax, 1
	sbb	ecx, edi
	mov	edi, DWORD PTR [edx]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edi+16]
	push	edx
	call	eax
	add	esp, 12					; 0000000cH
; Line 18529
	test	eax, eax
	jne	SHORT $LN1@writeJourn
; Line 18530
	mov	esi, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+12]
	push	1
	push	OFFSET ??_C@_01LOCGONAA@?$AA?$AA@
	push	esi
	call	edx
	add	esp, 12					; 0000000cH
$LN1@writeJourn:
	pop	edi
	pop	ebp
	pop	ebx
$LN5@writeJourn:
; Line 18534
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	ret	0
_writeJournalHdr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_reset
_TEXT	SEGMENT
_pager_reset PROC					; COMDAT
; _pPager$ = esi
; Line 18733
	push	ebx
; Line 18735
	xor	ebx, ebx
	cmp	DWORD PTR [esi+24], ebx
	jne	SHORT $LN5@pager_rese
; Line 18736
	mov	eax, DWORD PTR [esi+124]
	cmp	eax, ebx
	je	SHORT $LN1@pager_rese
	push	edi
$LL3@pager_rese:
; Line 18739
	mov	edi, DWORD PTR [eax+24]
; Line 18740
	push	eax
	call	_free
	add	esp, 4
	cmp	edi, ebx
	mov	eax, edi
	jne	SHORT $LL3@pager_rese
	pop	edi
$LN1@pager_rese:
; Line 18748
	mov	eax, DWORD PTR [esi+192]
	cmp	eax, ebx
	mov	DWORD PTR [esi+128], ebx
	mov	DWORD PTR [esi+112], ebx
	mov	DWORD PTR [esi+120], ebx
	mov	DWORD PTR [esi+116], ebx
	mov	DWORD PTR [esi+124], ebx
	mov	DWORD PTR [esi+188], ebx
	je	SHORT $LN15@pager_rese
	push	eax
	call	_free
	add	esp, 4
$LN15@pager_rese:
; Line 18749
	mov	DWORD PTR [esi+60], ebx
; Line 18750
	mov	DWORD PTR [esi+192], ebx
; Line 18751
	mov	DWORD PTR [esi+64], ebx
$LN5@pager_rese:
	pop	ebx
; Line 18752
	ret	0
_pager_reset ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_playback_one_page
_TEXT	SEGMENT
_ac$108073 = -12					; size = 4
_cksum$ = -12						; size = 4
_aData$ = -8						; size = 4
_pgno$ = -4						; size = 4
_useCksum$ = 8						; size = 4
_pager_playback_one_page PROC				; COMDAT
; _pPager$ = esi
; _jfd$ = eax
; Line 18872
	sub	esp, 12					; 0000000cH
	push	ebp
; Line 18877
	mov	ebp, DWORD PTR [esi+196]
	push	edi
	mov	edi, eax
; Line 18885
	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [eax+8]
	push	4
	lea	ecx, DWORD PTR _ac$108073[esp+24]
	push	ecx
	push	edi
	mov	DWORD PTR _aData$[esp+32], ebp
	call	edx
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN16@pager_play
	mov	eax, DWORD PTR _ac$108073[esp+20]
	movzx	ecx, BYTE PTR _ac$108073[esp+22]
	movzx	edx, BYTE PTR _ac$108073[esp+23]
	push	ebx
	xor	ebx, ebx
	mov	bh, al
	movzx	eax, ah
	or	ebx, eax
; Line 18887
	mov	eax, DWORD PTR [esi+56]
	shl	ebx, 8
	or	ebx, ecx
	mov	ecx, DWORD PTR [edi]
	push	eax
	shl	ebx, 8
	or	ebx, edx
	mov	edx, DWORD PTR [ecx+8]
	push	ebp
	push	edi
	mov	DWORD PTR _pgno$[esp+36], ebx
	call	edx
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 18888
	test	ebp, ebp
	jne	$LN31@pager_play
; Line 18889
	mov	ecx, DWORD PTR [esi+56]
	lea	eax, DWORD PTR [ecx+4]
	cdq
	add	DWORD PTR [esi+136], eax
	adc	DWORD PTR [esi+140], edx
; Line 18896
	test	ebx, ebx
	je	$LN12@pager_play
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ecx
	add	eax, 1
	cmp	ebx, eax
	je	$LN12@pager_play
; Line 18899
	cmp	ebx, DWORD PTR [esi+28]
	jbe	SHORT $LN11@pager_play
	pop	ebx
	pop	edi
; Line 18900
	xor	eax, eax
	pop	ebp
; Line 18980
	add	esp, 12					; 0000000cH
	ret	0
$LN11@pager_play:
; Line 18902
	cmp	DWORD PTR _useCksum$[esp+20], 0
	je	SHORT $LN8@pager_play
; Line 18903
	lea	eax, DWORD PTR _cksum$[esp+24]
	push	eax
	mov	eax, edi
	call	_read32bits
	mov	ebp, eax
	add	esp, 4
; Line 18904
	test	ebp, ebp
	jne	$LN31@pager_play
; Line 18905
	add	DWORD PTR [esi+136], 4
; Line 18906
	mov	edx, DWORD PTR _aData$[esp+24]
	mov	ecx, esi
	adc	DWORD PTR [esi+140], eax
	call	_pager_cksum
	cmp	eax, DWORD PTR _cksum$[esp+24]
; Line 18907
	jne	$LN12@pager_play
$LN8@pager_play:
; Line 18941
	mov	edx, ebx
	mov	ecx, esi
	call	_pager_lookup
; Line 18944
	cmp	BYTE PTR [esi+10], 4
	mov	edi, eax
	jb	SHORT $LN30@pager_play
	test	edi, edi
	je	SHORT $LN6@pager_play
	cmp	BYTE PTR [edi+30], 0
	jne	SHORT $LN30@pager_play
$LN6@pager_play:
; Line 18945
	mov	eax, DWORD PTR [esi+56]
	cdq
	push	edx
	push	eax
	push	0
	add	ebx, -1
	push	ebx
	call	__allmul
	push	edx
	push	eax
	mov	eax, DWORD PTR [esi+96]
	call	_sqlite3OsSeek
	mov	ebp, eax
	add	esp, 8
; Line 18946
	test	ebp, ebp
	jne	SHORT $LN5@pager_play
; Line 18947
	mov	ecx, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [esi+96]
	mov	edx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+12]
	push	ecx
	mov	ecx, DWORD PTR _aData$[esp+28]
	push	ecx
	push	eax
	call	edx
	add	esp, 12					; 0000000cH
	mov	ebp, eax
$LN5@pager_play:
; Line 18949
	test	edi, edi
	je	SHORT $LN1@pager_play
; Line 18950
	mov	eax, edi
	call	_makeClean
$LN30@pager_play:
; Line 18953
	test	edi, edi
	je	SHORT $LN1@pager_play
; Line 18963
	mov	eax, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR _aData$[esp+24]
	push	eax
	push	ecx
	lea	ebx, DWORD PTR [edi+48]
	push	ebx
	call	_memcpy
; Line 18964
	mov	eax, DWORD PTR [esi+184]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@pager_play
; Line 18965
	mov	edx, DWORD PTR [esi+56]
	push	edx
	push	edi
	call	eax
	add	esp, 8
$LN2@pager_play:
; Line 18972
	cmp	DWORD PTR _pgno$[esp+24], 1
	jne	SHORT $LN1@pager_play
; Line 18973
	mov	edx, DWORD PTR [ebx+24]
	lea	eax, DWORD PTR [ebx+24]
	lea	ecx, DWORD PTR [esi+200]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
$LN1@pager_play:
	pop	ebx
	pop	edi
; Line 18979
	mov	eax, ebp
	pop	ebp
; Line 18980
	add	esp, 12					; 0000000cH
	ret	0
$LN12@pager_play:
; Line 18897
	mov	eax, 101				; 00000065H
$LN31@pager_play:
	pop	ebx
$LN16@pager_play:
	pop	edi
	pop	ebp
; Line 18980
	add	esp, 12					; 0000000cH
	ret	0
_pager_playback_one_page ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerMaxPageCount
_TEXT	SEGMENT
_sqlite3PagerMaxPageCount PROC				; COMDAT
; _pPager$ = ecx
; _mxPage$ = eax
; Line 19681
	test	eax, eax
	push	esi
	mov	esi, ecx
	jle	SHORT $LN1@sqlite3Pag@11
; Line 19682
	mov	DWORD PTR [esi+72], eax
$LN1@sqlite3Pag@11:
; Line 19684
	call	_sqlite3PagerPagecount
; Line 19685
	mov	eax, DWORD PTR [esi+72]
	pop	esi
; Line 19686
	ret	0
_sqlite3PagerMaxPageCount ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _clearHistory
_TEXT	SEGMENT
_clearHistory PROC					; COMDAT
; _pHist$ = esi
; Line 19785
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@clearHisto
	push	eax
	call	_free
	add	esp, 4
$LN6@clearHisto:
; Line 19786
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN13@clearHisto
	push	eax
	call	_free
	add	esp, 4
$LN13@clearHisto:
; Line 19788
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi], 0
; Line 19789
	ret	0
_clearHistory ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _unlinkHashChain
_TEXT	SEGMENT
_unlinkHashChain PROC					; COMDAT
; _pPager$ = eax
; _pPg$ = esi
; Line 19805
	push	ebx
; Line 19806
	xor	ebx, ebx
	cmp	DWORD PTR [esi+4], ebx
	je	SHORT $LN6@unlinkHash
; Line 19810
	mov	ecx, DWORD PTR [esi+8]
	cmp	ecx, ebx
	je	SHORT $LN4@unlinkHash
; Line 19811
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [ecx+12], edx
$LN4@unlinkHash:
; Line 19813
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, ebx
	push	edi
	je	SHORT $LN3@unlinkHash
; Line 19815
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], edx
; Line 19816
	jmp	SHORT $LN2@unlinkHash
$LN3@unlinkHash:
; Line 19817
	mov	ecx, DWORD PTR [eax+188]
; Line 19818
	mov	edx, DWORD PTR [eax+192]
	mov	edi, DWORD PTR [esi+8]
	sub	ecx, 1
	and	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+ecx*4], edi
$LN2@unlinkHash:
; Line 19820
	cmp	BYTE PTR [eax+16], bl
	je	SHORT $LN8@unlinkHash
; Line 19821
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [ecx+esi+48]
	cmp	eax, ebx
	lea	edi, DWORD PTR [ecx+esi+48]
	je	SHORT $LN13@unlinkHash
	push	eax
	call	_free
	add	esp, 4
$LN13@unlinkHash:
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, ebx
	je	SHORT $LN18@unlinkHash
	push	eax
	call	_free
	add	esp, 4
$LN18@unlinkHash:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+4], ebx
$LN8@unlinkHash:
; Line 19823
	mov	DWORD PTR [esi+4], ebx
; Line 19824
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+8], ebx
	pop	edi
$LN6@unlinkHash:
	pop	ebx
; Line 19825
	ret	0
_unlinkHashChain ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _unlinkPage
_TEXT	SEGMENT
_unlinkPage PROC					; COMDAT
; _pPg$ = eax
; Line 19831
	push	esi
	mov	esi, eax
; Line 19832
	mov	eax, DWORD PTR [esi]
; Line 19835
	xor	edx, edx
	cmp	esi, DWORD PTR [eax+120]
	push	edi
	jne	SHORT $LN7@unlinkPage
; Line 19836
	mov	ecx, DWORD PTR [esi+16]
; Line 19837
	cmp	ecx, edx
	je	SHORT $LN5@unlinkPage
$LL6@unlinkPage:
	cmp	BYTE PTR [ecx+30], dl
	je	SHORT $LN5@unlinkPage
	mov	ecx, DWORD PTR [ecx+16]
	cmp	ecx, edx
	jne	SHORT $LL6@unlinkPage
$LN5@unlinkPage:
; Line 19838
	mov	DWORD PTR [eax+120], ecx
$LN7@unlinkPage:
; Line 19842
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, edx
	je	SHORT $LN4@unlinkPage
; Line 19843
	mov	edi, DWORD PTR [esi+16]
	mov	DWORD PTR [ecx+16], edi
; Line 19844
	jmp	SHORT $LN3@unlinkPage
$LN4@unlinkPage:
; Line 19846
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+112], ecx
$LN3@unlinkPage:
; Line 19848
	mov	ecx, DWORD PTR [esi+16]
	cmp	ecx, edx
	je	SHORT $LN2@unlinkPage
; Line 19849
	mov	edi, DWORD PTR [esi+20]
	mov	DWORD PTR [ecx+20], edi
; Line 19854
	mov	DWORD PTR [esi+20], edx
	mov	DWORD PTR [esi+16], edx
; Line 19857
	call	_unlinkHashChain
	pop	edi
	pop	esi
; Line 19858
	ret	0
$LN2@unlinkPage:
; Line 19852
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR [eax+116], ecx
; Line 19854
	mov	DWORD PTR [esi+20], edx
	mov	DWORD PTR [esi+16], edx
; Line 19857
	call	_unlinkHashChain
	pop	edi
	pop	esi
; Line 19858
	ret	0
_unlinkPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_truncate_cache
_TEXT	SEGMENT
_dbSize$ = 8						; size = 4
_pPager$ = 8						; size = 4
_pager_truncate_cache PROC				; COMDAT
; Line 19872
	push	ebp
	mov	ebp, DWORD PTR _pPager$[esp]
; Line 19875
	mov	eax, DWORD PTR [ebp+28]
	push	esi
; Line 19878
	mov	esi, DWORD PTR [ebp+124]
	test	esi, esi
	push	edi
	lea	edi, DWORD PTR [ebp+124]
	mov	DWORD PTR _dbSize$[esp+8], eax
	je	$LN5@pager_trun
	npad	4
$LL6@pager_trun:
; Line 19879
	mov	ecx, DWORD PTR _dbSize$[esp+8]
	cmp	DWORD PTR [esi+4], ecx
	ja	SHORT $LN4@pager_trun
; Line 19880
	lea	edi, DWORD PTR [esi+24]
	jmp	SHORT $LN1@pager_trun
$LN4@pager_trun:
; Line 19881
	cmp	WORD PTR [esi+34], 0
	jle	SHORT $LN2@pager_trun
; Line 19882
	mov	edx, DWORD PTR [ebp+56]
	push	edx
	lea	eax, DWORD PTR [esi+48]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 19883
	lea	edi, DWORD PTR [esi+24]
; Line 19884
	jmp	SHORT $LN1@pager_trun
$LN2@pager_trun:
; Line 19885
	mov	ecx, DWORD PTR [esi+24]
; Line 19888
	mov	eax, esi
	mov	DWORD PTR [edi], ecx
	call	_unlinkPage
; Line 19889
	cmp	BYTE PTR [esi+29], 0
	je	SHORT $LN9@pager_trun
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	mov	BYTE PTR [esi+29], 0
	je	SHORT $LN11@pager_trun
	mov	edx, DWORD PTR [esi+40]
	mov	DWORD PTR [eax+40], edx
$LN11@pager_trun:
	mov	eax, DWORD PTR [esi+40]
	test	eax, eax
	je	SHORT $LN10@pager_trun
	mov	ecx, DWORD PTR [esi+36]
	mov	DWORD PTR [eax+36], ecx
	jmp	SHORT $LN9@pager_trun
$LN10@pager_trun:
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edx+132], eax
$LN9@pager_trun:
; Line 19890
	push	esi
	call	_free
	add	esp, 4
; Line 19891
	add	DWORD PTR [ebp+60], -1
$LN1@pager_trun:
	mov	esi, DWORD PTR [edi]
	test	esi, esi
	jne	SHORT $LL6@pager_trun
$LN5@pager_trun:
	pop	edi
	pop	esi
	pop	ebp
; Line 19894
	ret	0
_pager_truncate_cache ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_wait_on_lock
_TEXT	SEGMENT
_pPager$ = 8						; size = 4
_pager_wait_on_lock PROC				; COMDAT
; _locktype$ = ebx
; Line 19904
	push	ebp
	mov	ebp, DWORD PTR _pPager$[esp]
; Line 19915
	movzx	eax, BYTE PTR [ebp+10]
	cmp	eax, ebx
	jl	SHORT $LN26@pager_wait
; Line 19916
	xor	eax, eax
	pop	ebp
; Line 19927
	ret	0
$LN26@pager_wait:
	push	esi
	push	edi
$LL5@pager_wait:
; Line 19919
	mov	eax, DWORD PTR [ebp+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+40]
	push	ebx
	push	eax
	call	edx
	mov	edi, eax
	add	esp, 8
; Line 19920
	cmp	edi, 5
	jne	SHORT $LN2@pager_wait
	mov	esi, DWORD PTR [ebp+108]
	test	esi, esi
	je	SHORT $LN25@pager_wait
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN25@pager_wait
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jl	SHORT $LN25@pager_wait
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	ecx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@pager_wait
	add	DWORD PTR [esi+8], 1
	jmp	SHORT $LL5@pager_wait
$LN21@pager_wait:
	mov	DWORD PTR [esi+8], -1
$LN25@pager_wait:
; Line 19926
	mov	eax, edi
$LN27@pager_wait:
	pop	edi
	pop	esi
	pop	ebp
; Line 19927
	ret	0
$LN2@pager_wait:
; Line 19921
	test	edi, edi
; Line 19926
	mov	eax, edi
	jne	SHORT $LN27@pager_wait
	pop	edi
	pop	esi
	mov	BYTE PTR [ebp+10], bl
	pop	ebp
; Line 19927
	ret	0
_pager_wait_on_lock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_write_pagelist
_TEXT	SEGMENT
_pager_write_pagelist PROC				; COMDAT
; _pList$ = eax
; Line 20270
	push	edi
	mov	edi, eax
; Line 20274
	test	edi, edi
	jne	SHORT $LN8@pager_writ
	pop	edi
; Line 20333
	ret	0
$LN8@pager_writ:
	push	ebx
	push	esi
; Line 20275
	mov	esi, DWORD PTR [edi]
; Line 20293
	push	esi
	mov	ebx, 4
	call	_pager_wait_on_lock
	add	esp, 4
; Line 20294
	test	eax, eax
; Line 20295
	jne	$LN21@pager_writ
	push	ebp
; Line 20298
	mov	eax, edi
	call	_sort_pagelist
	mov	edi, eax
; Line 20299
	test	edi, edi
	je	$LN5@pager_writ
	mov	ebx, 1
	npad	6
$LL6@pager_writ:
; Line 20301
	mov	eax, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR [edi+4]
	cdq
	push	edx
	push	eax
	sub	ecx, ebx
	push	0
	push	ecx
	call	__allmul
	mov	ecx, DWORD PTR [esi+96]
	mov	ebp, DWORD PTR [ecx]
	push	edx
	mov	edx, DWORD PTR [ebp+16]
	push	eax
	push	ecx
	call	edx
	add	esp, 12					; 0000000cH
; Line 20302
	test	eax, eax
	jne	SHORT $LN23@pager_writ
; Line 20308
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [esi+28]
	ja	SHORT $LN19@pager_writ
; Line 20313
	mov	ecx, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [esi+96]
	mov	edx, DWORD PTR [eax]
	push	ecx
	lea	ebp, DWORD PTR [edi+48]
	push	ebp
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 12					; 0000000cH
; Line 20316
	cmp	DWORD PTR [edi+4], ebx
	jne	SHORT $LN2@pager_writ
; Line 20317
	mov	edx, DWORD PTR [ebp+24]
	lea	ecx, DWORD PTR [ebp+24]
	mov	DWORD PTR [esi+200], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+204], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+208], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [esi+212], ecx
$LN2@pager_writ:
; Line 20325
	test	eax, eax
	jne	SHORT $LN23@pager_writ
$LN19@pager_writ:
; Line 20326
	mov	BYTE PTR [edi+29], 0
; Line 20330
	mov	edi, DWORD PTR [edi+36]
	test	edi, edi
	jne	SHORT $LL6@pager_writ
$LN5@pager_writ:
; Line 20332
	xor	eax, eax
$LN23@pager_writ:
	pop	ebp
$LN21@pager_writ:
	pop	esi
	pop	ebx
	pop	edi
; Line 20333
	ret	0
_pager_write_pagelist ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_recycle
_TEXT	SEGMENT
_syncOk$ = 8						; size = 4
_ppPg$ = 12						; size = 4
_pager_recycle PROC					; COMDAT
; _pPager$ = eax
; Line 20374
	push	ebp
	mov	ebp, DWORD PTR _ppPg$[esp]
	push	esi
	mov	esi, eax
	push	edi
; Line 20376
	mov	DWORD PTR [ebp], 0
; Line 20383
	mov	edi, DWORD PTR [esi+120]
; Line 20390
	test	edi, edi
	jne	SHORT $LN4@pager_recy
	cmp	DWORD PTR [esi+112], edi
	je	$LN17@pager_recy
	cmp	DWORD PTR _syncOk$[esp+8], edi
	je	$LN17@pager_recy
	cmp	BYTE PTR [esi+16], 0
	jne	SHORT $LN17@pager_recy
; Line 20391
	call	_syncJournal
; Line 20392
	test	eax, eax
; Line 20393
	jne	SHORT $LN9@pager_recy
; Line 20395
	cmp	BYTE PTR [esi+8], al
	je	SHORT $LN5@pager_recy
; Line 20405
	mov	ecx, esi
	mov	DWORD PTR [esi+40], eax
	call	_writeJournalHdr
; Line 20406
	test	eax, eax
; Line 20407
	jne	SHORT $LN9@pager_recy
$LN5@pager_recy:
; Line 20410
	mov	edi, DWORD PTR [esi+112]
; Line 20412
	test	edi, edi
; Line 20413
	je	SHORT $LN17@pager_recy
$LN4@pager_recy:
; Line 20420
	cmp	BYTE PTR [edi+29], 0
	je	SHORT $LN2@pager_recy
; Line 20423
	mov	eax, DWORD PTR [edi+36]
	test	eax, eax
	mov	BYTE PTR [edi+29], 0
	je	SHORT $LN13@pager_recy
	mov	ecx, DWORD PTR [edi+40]
	mov	DWORD PTR [eax+40], ecx
$LN13@pager_recy:
	mov	eax, DWORD PTR [edi+40]
	test	eax, eax
	je	SHORT $LN12@pager_recy
	mov	edx, DWORD PTR [edi+36]
	mov	DWORD PTR [eax+36], edx
	jmp	SHORT $LN11@pager_recy
$LN12@pager_recy:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi+36]
	mov	DWORD PTR [eax+132], ecx
$LN11@pager_recy:
; Line 20426
	mov	eax, edi
	mov	BYTE PTR [edi+29], 1
	mov	DWORD PTR [edi+36], 0
	call	_pager_write_pagelist
; Line 20427
	test	eax, eax
; Line 20428
	jne	SHORT $LN9@pager_recy
$LN2@pager_recy:
; Line 20441
	cmp	BYTE PTR [edi+31], 0
	je	SHORT $LN1@pager_recy
; Line 20443
	mov	BYTE PTR [esi+15], 1
$LN1@pager_recy:
; Line 20448
	mov	eax, edi
	call	_unlinkPage
; Line 20451
	mov	DWORD PTR [ebp], edi
$LN17@pager_recy:
; Line 20452
	xor	eax, eax
$LN9@pager_recy:
	pop	edi
	pop	esi
	pop	ebp
; Line 20453
	ret	0
_pager_recycle ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerStmtCommit
_TEXT	SEGMENT
_sqlite3PagerStmtCommit PROC				; COMDAT
; _pPager$ = edi
; Line 21965
	push	ebx
; Line 21966
	xor	ebx, ebx
	cmp	BYTE PTR [edi+5], bl
	je	$LN23@sqlite3Pag@12
; Line 21969
	cmp	BYTE PTR [edi+16], bl
	jne	SHORT $LN5@sqlite3Pag@12
; Line 21970
	mov	eax, DWORD PTR [edi+104]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	ebx
	push	ebx
	push	eax
	call	edx
; Line 21972
	mov	eax, DWORD PTR [edi+80]
	add	esp, 12					; 0000000cH
	cmp	eax, ebx
	je	SHORT $LN14@sqlite3Pag@12
	push	eax
	call	_free
	add	esp, 4
$LN14@sqlite3Pag@12:
; Line 21973
	mov	DWORD PTR [edi+80], ebx
; Line 21985
	mov	DWORD PTR [edi+48], ebx
; Line 21986
	mov	BYTE PTR [edi+5], bl
; Line 21987
	mov	DWORD PTR [edi+128], ebx
; Line 21989
	mov	BYTE PTR [edi+6], bl
; Line 21990
	xor	eax, eax
	pop	ebx
; Line 21991
	ret	0
$LN5@sqlite3Pag@12:
; Line 21975
	mov	eax, DWORD PTR [edi+128]
	cmp	eax, ebx
	je	SHORT $LN1@sqlite3Pag@12
	push	ebp
	push	esi
$LL3@sqlite3Pag@12:
; Line 21976
	mov	ecx, DWORD PTR [edi+52]
	mov	edx, DWORD PTR [edi+56]
	add	ecx, eax
; Line 21981
	mov	eax, DWORD PTR [ecx+edx+52]
	cmp	eax, ebx
	mov	ebp, DWORD PTR [ecx+edx+56]
	lea	esi, DWORD PTR [ecx+edx+48]
	mov	BYTE PTR [esi+16], bl
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	je	SHORT $LN19@sqlite3Pag@12
	push	eax
	call	_free
	add	esp, 4
$LN19@sqlite3Pag@12:
	cmp	ebp, ebx
; Line 21982
	mov	DWORD PTR [esi+4], ebx
	mov	eax, ebp
	jne	SHORT $LL3@sqlite3Pag@12
	pop	esi
	pop	ebp
$LN1@sqlite3Pag@12:
; Line 21985
	mov	DWORD PTR [edi+48], ebx
; Line 21986
	mov	BYTE PTR [edi+5], bl
; Line 21987
	mov	DWORD PTR [edi+128], ebx
$LN23@sqlite3Pag@12:
; Line 21989
	mov	BYTE PTR [edi+6], bl
; Line 21990
	xor	eax, eax
	pop	ebx
; Line 21991
	ret	0
_sqlite3PagerStmtCommit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _queryTableLock
_TEXT	SEGMENT
_iTab$ = 8						; size = 4
_queryTableLock PROC					; COMDAT
; _p$ = edi
; _eLock$ = ebx
; Line 22890
	cmp	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, 0
	push	ebp
	mov	ebp, DWORD PTR _iTab$[esp]
	push	esi
	mov	esi, DWORD PTR [edi+4]
	jne	SHORT $LN43@queryTable
	add	DWORD PTR _inMutex, 1
	call	DWORD PTR __imp__TlsAlloc@0
	cmp	eax, -1
	mov	DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9, eax
	jne	SHORT $LN20@queryTable
	sub	DWORD PTR _inMutex, 1
	jmp	SHORT $LN44@queryTable
$LN20@queryTable:
	mov	ecx, 1
	sub	DWORD PTR _inMutex, ecx
	mov	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, ecx
	jmp	SHORT $LN35@queryTable
$LN43@queryTable:
	mov	eax, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
$LN35@queryTable:
	push	eax
	call	DWORD PTR __imp__TlsGetValue@4
	test	eax, eax
	jne	SHORT $LN14@queryTable
$LN44@queryTable:
	mov	eax, OFFSET ?zeroData@?1??sqlite3ThreadDataReadOnly@@9@9
$LN14@queryTable:
	cmp	BYTE PTR [eax+4], 0
; Line 22891
	je	SHORT $LN3@queryTable
; Line 22913
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN6@queryTable
	test	DWORD PTR [eax+8], 16384		; 00004000H
	je	SHORT $LN6@queryTable
	cmp	bl, 2
	je	SHORT $LN6@queryTable
	cmp	ebp, 1
	jne	SHORT $LN3@queryTable
$LN6@queryTable:
; Line 22914
	mov	eax, DWORD PTR [esi+68]
	test	eax, eax
	je	SHORT $LN3@queryTable
$LL5@queryTable:
; Line 22916
	cmp	DWORD PTR [eax], edi
	je	SHORT $LN4@queryTable
	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN4@queryTable
	cmp	BYTE PTR [eax+8], bl
	jne	SHORT $LN1@queryTable
	cmp	bl, 1
	jne	SHORT $LN1@queryTable
$LN4@queryTable:
; Line 22914
	mov	eax, DWORD PTR [eax+12]
	test	eax, eax
	jne	SHORT $LL5@queryTable
$LN3@queryTable:
	pop	esi
; Line 22921
	xor	eax, eax
	pop	ebp
; Line 22922
	ret	0
$LN1@queryTable:
	pop	esi
; Line 22917
	mov	eax, 6
	pop	ebp
; Line 22922
	ret	0
_queryTableLock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _unlockAllTables
_TEXT	SEGMENT
_unlockAllTables PROC					; COMDAT
; _p$ = edi
; Line 22996
	push	esi
; Line 22997
	mov	esi, DWORD PTR [edi+4]
	add	esi, 68					; 00000044H
; Line 23005
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN3@unlockAllT
	npad	4
$LL4@unlockAllT:
; Line 23006
	mov	eax, DWORD PTR [esi]
; Line 23007
	cmp	DWORD PTR [eax], edi
	jne	SHORT $LN2@unlockAllT
; Line 23008
	mov	ecx, DWORD PTR [eax+12]
; Line 23009
	push	eax
	mov	DWORD PTR [esi], ecx
	call	_free
	add	esp, 4
; Line 23010
	jmp	SHORT $LN1@unlockAllT
$LN2@unlockAllT:
; Line 23011
	lea	esi, DWORD PTR [eax+12]
$LN1@unlockAllT:
; Line 23005
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LL4@unlockAllT
$LN3@unlockAllT:
	pop	esi
; Line 23014
	ret	0
_unlockAllTables ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _invalidateOverflowCache
_TEXT	SEGMENT
_invalidateOverflowCache PROC				; COMDAT
; _pCur$ = esi
; Line 23024
	mov	eax, DWORD PTR [esi+88]
	test	eax, eax
	je	SHORT $LN8@invalidate
	push	eax
	call	_free
	add	esp, 4
$LN8@invalidate:
; Line 23025
	mov	DWORD PTR [esi+88], 0
; Line 23026
	ret	0
_invalidateOverflowCache ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _invalidateAllOverflowCache
_TEXT	SEGMENT
_invalidateAllOverflowCache PROC			; COMDAT
; _pBt$ = eax
; Line 23032
	push	esi
; Line 23034
	mov	esi, DWORD PTR [eax+4]
	test	esi, esi
	je	SHORT $LN1@invalidate@2
$LL3@invalidate@2:
; Line 23035
	mov	eax, DWORD PTR [esi+88]
	test	eax, eax
	je	SHORT $LN11@invalidate@2
	push	eax
	call	_free
	add	esp, 4
$LN11@invalidate@2:
	mov	DWORD PTR [esi+88], 0
	mov	esi, DWORD PTR [esi+4]
	test	esi, esi
	jne	SHORT $LL3@invalidate@2
$LN1@invalidate@2:
	pop	esi
; Line 23037
	ret	0
_invalidateAllOverflowCache ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _clearCursorPosition
_TEXT	SEGMENT
_clearCursorPosition PROC				; COMDAT
; _pCur$ = esi
; Line 23109
	mov	eax, DWORD PTR [esi+68]
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN8@clearCurso
	push	eax
	call	_free
	add	esp, 4
$LN8@clearCurso:
; Line 23111
	mov	BYTE PTR [esi+65], bl
	mov	DWORD PTR [esi+68], ebx
	pop	ebx
; Line 23112
	ret	0
_clearCursorPosition ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeMaxPageCount
_TEXT	SEGMENT
_sqlite3BtreeMaxPageCount PROC				; COMDAT
; _p$ = ecx
; _mxPage$ = eax
; Line 24173
	test	eax, eax
	mov	edx, DWORD PTR [ecx+4]
	push	esi
	mov	esi, DWORD PTR [edx]
	jle	SHORT $LN3@sqlite3Btr@15
	mov	DWORD PTR [esi+72], eax
$LN3@sqlite3Btr@15:
	call	_sqlite3PagerPagecount
	mov	eax, DWORD PTR [esi+72]
	pop	esi
; Line 24174
	ret	0
_sqlite3BtreeMaxPageCount ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeCommitStmt
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3BtreeCommitStmt PROC				; COMDAT
; Line 25093
	mov	eax, DWORD PTR _p$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+4]
; Line 25094
	cmp	BYTE PTR [esi+12], 0
	je	SHORT $LN2@sqlite3Btr@16
	cmp	BYTE PTR [esi+13], 0
	jne	SHORT $LN2@sqlite3Btr@16
	push	edi
; Line 25095
	mov	edi, DWORD PTR [esi]
	call	_sqlite3PagerStmtCommit
	pop	edi
; Line 25099
	mov	BYTE PTR [esi+12], 0
	pop	esi
; Line 25101
	ret	0
$LN2@sqlite3Btr@16:
; Line 25097
	xor	eax, eax
; Line 25099
	mov	BYTE PTR [esi+12], al
	pop	esi
; Line 25101
	ret	0
_sqlite3BtreeCommitStmt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeSchemaLocked
_TEXT	SEGMENT
_sqlite3BtreeSchemaLocked PROC				; COMDAT
; _p$ = edi
; Line 29099
	push	ebx
; Line 29100
	push	1
	mov	bl, 1
	call	_queryTableLock
	add	esp, 4
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	ebx
; Line 29101
	ret	0
_sqlite3BtreeSchemaLocked ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeFifoPop
_TEXT	SEGMENT
_sqlite3VdbeFifoPop PROC				; COMDAT
; _pFifo$ = esi
; _pVal$ = edx
; Line 29248
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN5@sqlite3Vdb@16
; Line 29249
	mov	eax, 101				; 00000065H
; Line 29273
	ret	0
$LN5@sqlite3Vdb@16:
; Line 29252
	mov	eax, DWORD PTR [esi+4]
; Line 29258
	mov	ecx, DWORD PTR [eax+8]
	push	edi
	mov	edi, DWORD PTR [eax+ecx*8+16]
	mov	DWORD PTR [edx], edi
	mov	ecx, DWORD PTR [eax+ecx*8+20]
	mov	DWORD PTR [edx+4], ecx
	add	DWORD PTR [eax+8], 1
; Line 29259
	add	DWORD PTR [esi], -1
; Line 29260
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [eax+4]
	pop	edi
	jl	SHORT $LN3@sqlite3Vdb@16
; Line 29261
	mov	ecx, DWORD PTR [eax+12]
; Line 29262
	push	eax
	mov	DWORD PTR [esi+4], ecx
	call	_free
	add	esp, 4
; Line 29263
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LN3@sqlite3Vdb@16
; Line 29265
	mov	DWORD PTR [esi+8], 0
$LN3@sqlite3Vdb@16:
; Line 29272
	xor	eax, eax
; Line 29273
	ret	0
_sqlite3VdbeFifoPop ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeFifoClear
_TEXT	SEGMENT
_sqlite3VdbeFifoClear PROC				; COMDAT
; _pFifo$ = edi
; Line 29281
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN1@sqlite3Vdb@17
	push	esi
	npad	8
$LL3@sqlite3Vdb@17:
; Line 29282
	mov	esi, DWORD PTR [eax+12]
; Line 29283
	push	eax
	call	_free
	add	esp, 4
	test	esi, esi
	mov	eax, esi
	jne	SHORT $LL3@sqlite3Vdb@17
	pop	esi
$LN1@sqlite3Vdb@17:
; Line 29285
	xor	eax, eax
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax
; Line 29286
	ret	0
_sqlite3VdbeFifoClear ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3VdbeMemFinalize
_TEXT	SEGMENT
_ctx$88433 = -92					; size = 88
__$ArrayPad$ = -4					; size = 4
_pFunc$ = 8						; size = 4
_sqlite3VdbeMemFinalize PROC				; COMDAT
; _pMem$ = ebx
; Line 29522
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+92], eax
	mov	eax, DWORD PTR _pFunc$[esp+88]
; Line 29523
	xor	edx, edx
; Line 29524
	test	eax, eax
	je	$LN14@sqlite3Vdb@18
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	$LN14@sqlite3Vdb@18
; Line 29530
	mov	DWORD PTR _ctx$88433[esp+92], eax
	push	ebp
; Line 29532
	lea	eax, DWORD PTR _ctx$88433[esp+96]
	lea	ebp, DWORD PTR [ebx+32]
	push	eax
	mov	WORD PTR _ctx$88433[esp+132], 1
	mov	DWORD PTR _ctx$88433[esp+124], ebp
	mov	DWORD PTR _ctx$88433[esp+172], ebx
	mov	BYTE PTR _ctx$88433[esp+176], dl
	call	ecx
; Line 29533
	mov	eax, DWORD PTR [ebx+16]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@sqlite3Vdb@18
	cmp	eax, ebp
	je	SHORT $LN10@sqlite3Vdb@18
; Line 29534
	push	eax
	call	_free
	add	esp, 4
$LN10@sqlite3Vdb@18:
	push	esi
	push	edi
; Line 29536
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _ctx$88433[esp+112]
	mov	edi, ebx
	rep movsd
; Line 29537
	test	WORD PTR [ebx+24], 512			; 00000200H
	pop	edi
	pop	esi
	je	SHORT $LN2@sqlite3Vdb@18
; Line 29538
	mov	DWORD PTR [ebx+16], ebp
$LN2@sqlite3Vdb@18:
; Line 29540
	cmp	BYTE PTR _ctx$88433[esp+172], 0
	pop	ebp
	je	SHORT $LN12@sqlite3Vdb@18
; Line 29541
	mov	eax, 1
; Line 29545
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	ret	0
$LN12@sqlite3Vdb@18:
; Line 29544
	xor	eax, eax
; Line 29545
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	ret	0
$LN14@sqlite3Vdb@18:
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	xor	ecx, esp
	mov	eax, edx
	call	@__security_check_cookie@4
	add	esp, 92					; 0000005cH
	ret	0
_sqlite3VdbeMemFinalize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemRelease
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3VdbeMemRelease PROC				; COMDAT
; Line 29552
	push	ebx
; Line 29553
	mov	ebx, DWORD PTR _p$[esp]
	movzx	ecx, WORD PTR [ebx+24]
	test	ecx, 1088				; 00000440H
	je	SHORT $LN5@sqlite3Vdb@19
; Line 29554
	mov	eax, DWORD PTR [ebx+28]
	test	eax, eax
	je	SHORT $LN4@sqlite3Vdb@19
; Line 29555
	test	ecx, 1024				; 00000400H
	je	SHORT $LN3@sqlite3Vdb@19
; Line 29556
	mov	eax, DWORD PTR [ebx]
	push	eax
	call	_sqlite3VdbeMemFinalize
; Line 29558
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 8
; Line 29565
	mov	DWORD PTR [ebx+16], 0
; Line 29566
	mov	DWORD PTR [ebx+28], 0
	pop	ebx
; Line 29568
	ret	0
$LN3@sqlite3Vdb@19:
; Line 29560
	mov	ecx, DWORD PTR [ebx+16]
	push	ecx
	call	eax
; Line 29563
	add	esp, 4
; Line 29565
	mov	DWORD PTR [ebx+16], 0
; Line 29566
	mov	DWORD PTR [ebx+28], 0
	pop	ebx
; Line 29568
	ret	0
$LN4@sqlite3Vdb@19:
; Line 29563
	mov	eax, DWORD PTR [ebx+16]
	test	eax, eax
	je	SHORT $LN11@sqlite3Vdb@19
	push	eax
	call	_free
	add	esp, 4
$LN11@sqlite3Vdb@19:
; Line 29565
	mov	DWORD PTR [ebx+16], 0
; Line 29566
	mov	DWORD PTR [ebx+28], 0
$LN5@sqlite3Vdb@19:
	pop	ebx
; Line 29568
	ret	0
_sqlite3VdbeMemRelease ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemSetNull
_TEXT	SEGMENT
_sqlite3VdbeMemSetNull PROC				; COMDAT
; _pMem$ = esi
; Line 29686
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
; Line 29687
	mov	WORD PTR [esi+24], 1
; Line 29688
	mov	BYTE PTR [esi+26], 5
; Line 29689
	mov	DWORD PTR [esi+20], 0
; Line 29690
	ret	0
_sqlite3VdbeMemSetNull ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemSetZeroBlob
_TEXT	SEGMENT
_sqlite3VdbeMemSetZeroBlob PROC				; COMDAT
; _pMem$ = esi
; _n$ = eax
; Line 29696
	push	edi
; Line 29697
	push	esi
	mov	edi, eax
	call	_sqlite3VdbeMemRelease
	add	esp, 4
; Line 29701
	test	edi, edi
	mov	WORD PTR [esi+24], 2576			; 00000a10H
	mov	BYTE PTR [esi+26], 4
	mov	DWORD PTR [esi+20], 0
	jge	SHORT $LN1@sqlite3Vdb@20
	xor	edi, edi
$LN1@sqlite3Vdb@20:
; Line 29702
	mov	eax, edi
	cdq
	mov	DWORD PTR [esi], eax
; Line 29703
	lea	eax, DWORD PTR [esi+32]
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+16], eax
; Line 29704
	mov	BYTE PTR [esi+27], 1
	pop	edi
; Line 29705
	ret	0
_sqlite3VdbeMemSetZeroBlob ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemSetInt64
_TEXT	SEGMENT
_val$ = 8						; size = 8
_sqlite3VdbeMemSetInt64 PROC				; COMDAT
; _pMem$ = esi
; Line 29712
	push	esi
	call	_sqlite3VdbeMemRelease
; Line 29713
	mov	eax, DWORD PTR _val$[esp]
	mov	ecx, DWORD PTR _val$[esp+4]
	add	esp, 4
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
; Line 29714
	mov	WORD PTR [esi+24], 4
; Line 29715
	mov	BYTE PTR [esi+26], 1
; Line 29716
	ret	0
_sqlite3VdbeMemSetInt64 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemSetDouble
_TEXT	SEGMENT
_val$ = 8						; size = 8
_sqlite3VdbeMemSetDouble PROC				; COMDAT
; _pMem$ = esi
; Line 29723
	fld	QWORD PTR _val$[esp-4]
; Line 29724
	push	esi
	fld	ST(0)
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@sqlite3Vdb@21
	call	_sqlite3VdbeMemRelease
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	mov	DWORD PTR [esi+20], 0
; Line 29726
	add	esp, 4
; Line 29731
	ret	0
$LN2@sqlite3Vdb@21:
; Line 29726
	call	_sqlite3VdbeMemRelease
; Line 29727
	fld	QWORD PTR _val$[esp]
	fstp	QWORD PTR [esi+8]
; Line 29728
	mov	WORD PTR [esi+24], 8
; Line 29729
	mov	BYTE PTR [esi+26], 2
	add	esp, 4
; Line 29731
	ret	0
_sqlite3VdbeMemSetDouble ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _resolveP2Values
_TEXT	SEGMENT
_nMaxStack$ = -16					; size = 4
_hasStatementBegin$ = -12				; size = 4
_doesStatementRollback$ = -8				; size = 4
_aLabel$ = -4						; size = 4
_pMaxFuncArgs$ = 8					; size = 4
_pMaxStack$ = 12					; size = 4
_resolveP2Values PROC					; COMDAT
; _p$ = esi
; Line 30559
	sub	esp, 16					; 00000010H
; Line 30564
	mov	eax, DWORD PTR [esi+32]
; Line 30567
	mov	edx, DWORD PTR [esi+20]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR [esi+12]
	xor	ebx, ebx
	push	edi
	lea	edi, DWORD PTR [ebp-1]
	cmp	edi, ebx
	mov	DWORD PTR _nMaxStack$[esp+28], ebp
	mov	DWORD PTR _aLabel$[esp+28], eax
	mov	DWORD PTR _doesStatementRollback$[esp+28], ebx
	mov	DWORD PTR _hasStatementBegin$[esp+28], ebx
	jl	$LN19@resolveP2V@2
	npad	4
$LL35@resolveP2V@2:
; Line 30568
	mov	al, BYTE PTR [edx]
; Line 30574
	cmp	al, 20					; 00000014H
	je	SHORT $LN17@resolveP2V@2
	cmp	al, 102					; 00000066H
	je	SHORT $LN17@resolveP2V@2
	cmp	al, 130					; 00000082H
	je	SHORT $LN17@resolveP2V@2
; Line 30576
	cmp	al, 36					; 00000024H
	jne	SHORT $LN14@resolveP2V@2
; Line 30577
	cmp	DWORD PTR [edx+4], 19			; 00000013H
	jne	SHORT $LN16@resolveP2V@2
	cmp	DWORD PTR [edx+8], 2
	jne	SHORT $LN16@resolveP2V@2
; Line 30578
	mov	DWORD PTR _doesStatementRollback$[esp+28], 1
; Line 30579
	jmp	SHORT $LN16@resolveP2V@2
$LN14@resolveP2V@2:
; Line 30580
	cmp	al, 40					; 00000028H
	jne	SHORT $LN11@resolveP2V@2
; Line 30581
	mov	DWORD PTR _hasStatementBegin$[esp+28], 1
	jmp	SHORT $LN16@resolveP2V@2
$LN11@resolveP2V@2:
; Line 30582
	cmp	al, 107					; 0000006bH
	jne	SHORT $LN16@resolveP2V@2
; Line 30586
	mov	ecx, DWORD PTR [edx-36]
; Line 30587
	jmp	SHORT $LN38@resolveP2V@2
$LN17@resolveP2V@2:
; Line 30575
	mov	ecx, DWORD PTR [edx+8]
$LN38@resolveP2V@2:
	cmp	ecx, ebx
	jle	SHORT $LN16@resolveP2V@2
	mov	ebx, ecx
$LN16@resolveP2V@2:
; Line 30589
	movzx	eax, al
	mov	ecx, eax
	and	ecx, 31					; 0000001fH
	mov	ebp, 1
	shl	ebp, cl
	shr	eax, 5
	test	ebp, DWORD PTR ?masks@?1??opcodeNoPush@@9@9[eax*4]
	je	SHORT $LN36@resolveP2V@2
; Line 30590
	sub	DWORD PTR _nMaxStack$[esp+28], 1
$LN36@resolveP2V@2:
; Line 30593
	mov	eax, DWORD PTR [edx+8]
	test	eax, eax
	jge	SHORT $LN20@resolveP2V@2
; Line 30595
	lea	ecx, DWORD PTR [eax*4+4]
	mov	eax, DWORD PTR _aLabel$[esp+28]
	sub	eax, ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx
$LN20@resolveP2V@2:
	sub	edi, 1
	add	edx, 20					; 00000014H
	test	edi, edi
	jge	$LL35@resolveP2V@2
; Line 30567
	mov	ebp, DWORD PTR _nMaxStack$[esp+28]
$LN19@resolveP2V@2:
; Line 30597
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN29@resolveP2V@2
	push	eax
	call	_free
	add	esp, 4
$LN29@resolveP2V@2:
; Line 30608
	cmp	DWORD PTR _hasStatementBegin$[esp+28], 0
	mov	edx, DWORD PTR _pMaxFuncArgs$[esp+24]
	mov	eax, DWORD PTR _pMaxStack$[esp+24]
	mov	DWORD PTR [esi+32], 0
	mov	DWORD PTR [edx], ebx
	pop	edi
	mov	DWORD PTR [eax], ebp
	pop	ebp
	pop	ebx
	je	SHORT $LN2@resolveP2V@2
	cmp	DWORD PTR _doesStatementRollback$[esp+16], 0
	jne	SHORT $LN2@resolveP2V@2
; Line 30609
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	mov	ecx, DWORD PTR [esi+20]
	js	SHORT $LN2@resolveP2V@2
$LL4@resolveP2V@2:
; Line 30610
	cmp	BYTE PTR [ecx], 40			; 00000028H
	jne	SHORT $LN3@resolveP2V@2
; Line 30611
	mov	BYTE PTR [ecx], 21			; 00000015H
$LN3@resolveP2V@2:
; Line 30609
	sub	eax, 1
	add	ecx, 20					; 00000014H
	test	eax, eax
	jge	SHORT $LL4@resolveP2V@2
$LN2@resolveP2V@2:
; Line 30615
	add	esp, 16					; 00000010H
	ret	0
_resolveP2Values ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _freeEphemeralFunction
_TEXT	SEGMENT
_freeEphemeralFunction PROC				; COMDAT
; _pDef$ = eax
; Line 30698
	test	eax, eax
	je	SHORT $LN7@freeEpheme
	test	BYTE PTR [eax+4], 4
	je	SHORT $LN7@freeEpheme
; Line 30699
	push	eax
	call	_free
	pop	ecx
$LN7@freeEpheme:
; Line 30701
	ret	0
_freeEphemeralFunction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _releaseMemArray
_TEXT	SEGMENT
_releaseMemArray PROC					; COMDAT
; _p$ = ecx
; _N$ = eax
; Line 30947
	push	esi
	push	edi
	mov	edi, ecx
; Line 30948
	test	edi, edi
	mov	esi, eax
	je	SHORT $LN7@releaseMem
; Line 30949
	test	esi, esi
	jle	SHORT $LN7@releaseMem
	npad	2
$LL2@releaseMem:
; Line 30950
	push	edi
	sub	esi, 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	add	edi, 64					; 00000040H
	test	esi, esi
	jg	SHORT $LL2@releaseMem
$LN7@releaseMem:
	pop	edi
	pop	esi
; Line 30953
	ret	0
_releaseMemArray ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_double
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_rVal$ = 12						; size = 8
_sqlite3_result_double PROC				; COMDAT
; Line 32576
	fld	QWORD PTR _rVal$[esp-4]
	push	esi
	mov	esi, DWORD PTR _pCtx$[esp]
	fld	ST(0)
	fucompp
	add	esi, 8
	push	esi
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@sqlite3_re@2
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	mov	DWORD PTR [esi+20], 0
	pop	esi
; Line 32577
	ret	0
; Line 32576
$LN4@sqlite3_re@2:
	call	_sqlite3VdbeMemRelease
	fld	QWORD PTR _rVal$[esp+4]
	add	esp, 4
	fstp	QWORD PTR [esi+8]
	mov	WORD PTR [esi+24], 8
	mov	BYTE PTR [esi+26], 2
	pop	esi
; Line 32577
	ret	0
_sqlite3_result_double ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_int
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_iVal$ = 12						; size = 4
_sqlite3_result_int PROC				; COMDAT
; Line 32588
	push	esi
; Line 32589
	mov	esi, DWORD PTR _pCtx$[esp]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	eax, DWORD PTR _iVal$[esp+4]
	cdq
	add	esp, 4
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
	pop	esi
; Line 32590
	ret	0
_sqlite3_result_int ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_int64
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_iVal$ = 12						; size = 8
_sqlite3_result_int64 PROC				; COMDAT
; Line 32591
	push	esi
; Line 32592
	mov	esi, DWORD PTR _pCtx$[esp]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	eax, DWORD PTR _iVal$[esp+4]
	mov	ecx, DWORD PTR _iVal$[esp+8]
	add	esp, 4
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ecx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
	pop	esi
; Line 32593
	ret	0
_sqlite3_result_int64 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_null
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_sqlite3_result_null PROC				; COMDAT
; Line 32594
	push	esi
; Line 32595
	mov	esi, DWORD PTR _pCtx$[esp]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	mov	DWORD PTR [esi+20], 0
	pop	esi
; Line 32596
	ret	0
_sqlite3_result_null ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_result_zeroblob
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_result_zeroblob
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_n$ = 12						; size = 4
_sqlite3_result_zeroblob PROC				; COMDAT
; Line 32634
	push	esi
; Line 32635
	mov	esi, DWORD PTR _pCtx$[esp]
	push	edi
	mov	edi, DWORD PTR _n$[esp+4]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	edi, edi
	mov	WORD PTR [esi+24], 2576			; 00000a10H
	mov	BYTE PTR [esi+26], 4
	mov	DWORD PTR [esi+20], 0
	jge	SHORT $LN3@sqlite3_re@3
	xor	edi, edi
$LN3@sqlite3_re@3:
	mov	eax, edi
	cdq
	mov	DWORD PTR [esi], eax
	lea	eax, DWORD PTR [esi+32]
	pop	edi
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+16], eax
	mov	BYTE PTR [esi+27], 1
	pop	esi
; Line 32636
	ret	0
_sqlite3_result_zeroblob ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_result_error_toobig
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_result_error_toobig
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_sqlite3_result_error_toobig PROC			; COMDAT
; Line 32639
	push	esi
; Line 32640
	mov	esi, DWORD PTR _pCtx$[esp]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	xor	eax, eax
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [esi+4], eax
	lea	eax, DWORD PTR [esi+32]
	add	esp, 4
	mov	WORD PTR [esi+24], 2576			; 00000a10H
	mov	BYTE PTR [esi+26], 4
	mov	DWORD PTR [esi], 1000000001		; 3b9aca01H
	mov	DWORD PTR [esi+16], eax
	mov	BYTE PTR [esi+27], 1
	pop	esi
; Line 32641
	ret	0
_sqlite3_result_error_toobig ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _popStack
_TEXT	SEGMENT
_ppTos$ = 8						; size = 4
_popStack PROC						; COMDAT
; _N$ = eax
; Line 33580
	push	ebp
	mov	ebp, DWORD PTR _ppTos$[esp]
	push	esi
; Line 33581
	mov	esi, DWORD PTR [ebp]
	push	edi
	mov	edi, eax
; Line 33582
	test	edi, edi
	jle	SHORT $LN8@popStack
$LL3@popStack:
; Line 33583
	sub	edi, 1
; Line 33584
	test	BYTE PTR [esi+24], 64			; 00000040H
	je	SHORT $LN1@popStack
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN1@popStack:
; Line 33585
	sub	esi, 64					; 00000040H
	test	edi, edi
	jg	SHORT $LL3@popStack
$LN8@popStack:
	pop	edi
; Line 33587
	mov	DWORD PTR [ebp], esi
	pop	esi
	pop	ebp
; Line 33588
	ret	0
_popStack ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprAffinity
_TEXT	SEGMENT
_sqlite3ExprAffinity PROC				; COMDAT
; _pExpr$ = eax
; Line 38918
	movzx	ecx, BYTE PTR [eax]
; Line 38919
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN2@sqlite3Exp@7
$LL5@sqlite3Exp@7:
; Line 38920
	mov	eax, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 110				; 0000006eH
	je	SHORT $LL5@sqlite3Exp@7
$LN2@sqlite3Exp@7:
; Line 38923
	cmp	ecx, 31					; 0000001fH
	jne	SHORT $LN1@sqlite3Exp@7
; Line 38924
	lea	edx, DWORD PTR [eax+20]
	jmp	_sqlite3AffinityType
$LN1@sqlite3Exp@7:
; Line 38927
	mov	al, BYTE PTR [eax+1]
; Line 38928
	ret	0
_sqlite3ExprAffinity ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3CompareAffinity
_TEXT	SEGMENT
_sqlite3CompareAffinity PROC				; COMDAT
; _pExpr$ = eax
; _aff2$ = ebx
; Line 38972
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN11@sqlite3Com
	mov	eax, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	call	_sqlite3ExprAffinity
	jmp	SHORT $LN12@sqlite3Com
$LN11@sqlite3Com:
	cmp	ecx, 31					; 0000001fH
	jne	SHORT $LN10@sqlite3Com
	lea	edx, DWORD PTR [eax+20]
	call	_sqlite3AffinityType
	jmp	SHORT $LN12@sqlite3Com
$LN10@sqlite3Com:
	mov	al, BYTE PTR [eax+1]
$LN12@sqlite3Com:
; Line 38973
	test	al, al
	je	SHORT $LN14@sqlite3Com
	test	bl, bl
	je	SHORT $LN2@sqlite3Com
; Line 38977
	cmp	al, 99					; 00000063H
	jge	SHORT $LN5@sqlite3Com
	cmp	bl, 99					; 00000063H
	jge	SHORT $LN5@sqlite3Com
$LN15@sqlite3Com:
; Line 38980
	mov	al, 98					; 00000062H
; Line 38992
	ret	0
$LN5@sqlite3Com:
; Line 38978
	mov	al, 99					; 00000063H
; Line 38992
	ret	0
$LN14@sqlite3Com:
; Line 38982
	test	bl, bl
; Line 38986
	je	SHORT $LN15@sqlite3Com
$LN2@sqlite3Com:
; Line 38990
	add	eax, ebx
; Line 38992
	ret	0
_sqlite3CompareAffinity ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _comparisonAffinity
_TEXT	SEGMENT
_comparisonAffinity PROC				; COMDAT
; _pExpr$ = esi
; Line 39004
	mov	eax, DWORD PTR [esi+8]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN9@comparison
	mov	eax, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	call	_sqlite3ExprAffinity
	jmp	SHORT $LN10@comparison
$LN9@comparison:
	cmp	ecx, 31					; 0000001fH
	jne	SHORT $LN8@comparison
	lea	edx, DWORD PTR [eax+20]
	call	_sqlite3AffinityType
	jmp	SHORT $LN10@comparison
$LN8@comparison:
	mov	al, BYTE PTR [eax+1]
$LN10@comparison:
; Line 39005
	mov	ecx, DWORD PTR [esi+12]
	test	ecx, ecx
	push	ebx
	je	SHORT $LN5@comparison
; Line 39006
	mov	bl, al
	mov	eax, ecx
	call	_sqlite3CompareAffinity
	pop	ebx
; Line 39015
	ret	0
$LN5@comparison:
; Line 39008
	mov	ecx, DWORD PTR [esi+56]
	test	ecx, ecx
	je	SHORT $LN3@comparison
; Line 39009
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+12]
	mov	bl, al
	mov	eax, DWORD PTR [edx]
	call	_sqlite3CompareAffinity
	pop	ebx
; Line 39015
	ret	0
$LN3@comparison:
; Line 39011
	test	al, al
	jne	SHORT $LN1@comparison
; Line 39012
	mov	al, 98					; 00000062H
$LN1@comparison:
	pop	ebx
; Line 39015
	ret	0
_comparisonAffinity ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3IndexAffinityOk
_TEXT	SEGMENT
_sqlite3IndexAffinityOk PROC				; COMDAT
; _pExpr$ = esi
; _idx_affinity$ = ebx
; Line 39024
	call	_comparisonAffinity
; Line 39025
	movsx	eax, al
	sub	eax, 97					; 00000061H
	je	SHORT $LN2@sqlite3Ind
	sub	eax, 1
	je	SHORT $LN3@sqlite3Ind
; Line 39031
	xor	eax, eax
	cmp	bl, 99					; 00000063H
	setge	al
; Line 39033
	ret	0
$LN3@sqlite3Ind:
; Line 39027
	mov	eax, 1
; Line 39033
	ret	0
$LN2@sqlite3Ind:
; Line 39029
	xor	eax, eax
	cmp	bl, 97					; 00000061H
	sete	al
; Line 39033
	ret	0
_sqlite3IndexAffinityOk ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _binaryCompareP1
_TEXT	SEGMENT
_jumpIfNull$ = 8					; size = 4
_binaryCompareP1 PROC					; COMDAT
; _pExpr1$ = esi
; _pExpr2$ = ecx
; Line 39043
	movzx	eax, BYTE PTR [ecx]
	cmp	eax, 110				; 0000006eH
	push	ebx
	jne	SHORT $LN4@binaryComp
	mov	eax, DWORD PTR [ecx+56]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	call	_sqlite3ExprAffinity
	mov	bl, al
	jmp	SHORT $LN5@binaryComp
$LN4@binaryComp:
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN3@binaryComp
	lea	edx, DWORD PTR [ecx+20]
	call	_sqlite3AffinityType
	mov	bl, al
	jmp	SHORT $LN5@binaryComp
$LN3@binaryComp:
	mov	bl, BYTE PTR [ecx+1]
$LN5@binaryComp:
; Line 39044
	movzx	eax, BYTE PTR [esi]
	cmp	eax, 110				; 0000006eH
	jne	SHORT $LN17@binaryComp
	mov	eax, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	call	_sqlite3ExprAffinity
	jmp	SHORT $LN18@binaryComp
$LN17@binaryComp:
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN16@binaryComp
	lea	edx, DWORD PTR [esi+20]
	call	_sqlite3AffinityType
	jmp	SHORT $LN18@binaryComp
$LN16@binaryComp:
	mov	al, BYTE PTR [esi+1]
$LN18@binaryComp:
	test	al, al
	je	SHORT $LN20@binaryComp
	test	bl, bl
	je	SHORT $LN8@binaryComp
	cmp	al, 99					; 00000063H
	jge	SHORT $LN11@binaryComp
	cmp	bl, 99					; 00000063H
	jge	SHORT $LN11@binaryComp
$LN21@binaryComp:
	mov	eax, DWORD PTR _jumpIfNull$[esp]
	neg	eax
	mov	cl, 98					; 00000062H
	sbb	eax, eax
	movsx	ecx, cl
	and	eax, 256				; 00000100H
	add	eax, ecx
	pop	ebx
; Line 39045
	ret	0
; Line 39044
$LN11@binaryComp:
	mov	eax, DWORD PTR _jumpIfNull$[esp]
	neg	eax
	mov	cl, 99					; 00000063H
	sbb	eax, eax
	movsx	ecx, cl
	and	eax, 256				; 00000100H
	add	eax, ecx
	pop	ebx
; Line 39045
	ret	0
$LN20@binaryComp:
; Line 39044
	test	bl, bl
	je	SHORT $LN21@binaryComp
$LN8@binaryComp:
	add	al, bl
	mov	cl, al
	mov	eax, DWORD PTR _jumpIfNull$[esp]
	neg	eax
	sbb	eax, eax
	movsx	ecx, cl
	and	eax, 256				; 00000100H
	add	eax, ecx
	pop	ebx
; Line 39045
	ret	0
_binaryCompareP1 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprListDelete
_TEXT	SEGMENT
_sqlite3ExprListDelete PROC				; COMDAT
; _pList$ = ebx
; Line 39633
	test	ebx, ebx
	je	SHORT $LN50@sqlite3Exp@8
	push	esi
; Line 39636
	mov	esi, DWORD PTR [ebx+12]
	push	edi
	xor	edi, edi
	cmp	DWORD PTR [ebx], edi
	jle	SHORT $LN1@sqlite3Exp@8
	npad	1
$LL3@sqlite3Exp@8:
; Line 39637
	mov	eax, DWORD PTR [esi]
	push	eax
	call	_sqlite3ExprDelete
; Line 39638
	mov	eax, DWORD PTR [esi+4]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@sqlite3Exp@8
	push	eax
	call	_free
	add	esp, 4
$LN2@sqlite3Exp@8:
	add	edi, 1
	add	esi, 12					; 0000000cH
	cmp	edi, DWORD PTR [ebx]
	jl	SHORT $LL3@sqlite3Exp@8
$LN1@sqlite3Exp@8:
; Line 39640
	mov	eax, DWORD PTR [ebx+12]
	test	eax, eax
	pop	edi
	pop	esi
	je	SHORT $LN45@sqlite3Exp@8
	push	eax
	call	_free
	add	esp, 4
$LN45@sqlite3Exp@8:
; Line 39641
	push	ebx
	call	_free
	pop	ecx
$LN50@sqlite3Exp@8:
; Line 39642
	ret	0
_sqlite3ExprListDelete ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _walkExprTree
_TEXT	SEGMENT
_pExpr$ = 8						; size = 4
_xFunc$ = 12						; size = 4
_pArg$ = 16						; size = 4
_walkExprTree PROC					; COMDAT
; Line 39658
	push	esi
; Line 39660
	mov	esi, DWORD PTR _pExpr$[esp]
	test	esi, esi
	jne	SHORT $LN5@walkExprTr
	xor	eax, eax
	pop	esi
; Line 39668
	ret	0
$LN5@walkExprTr:
	push	ebx
; Line 39661
	mov	ebx, DWORD PTR _pArg$[esp+4]
	push	ebp
	push	edi
	mov	edi, DWORD PTR _xFunc$[esp+12]
	push	esi
	push	ebx
	call	edi
	mov	ebp, eax
	add	esp, 8
; Line 39662
	test	ebp, ebp
	jne	SHORT $LN1@walkExprTr
; Line 39663
	mov	eax, DWORD PTR [esi+8]
	push	ebx
	push	edi
	push	eax
	call	_walkExprTree
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN11@walkExprTr
; Line 39664
	mov	ecx, DWORD PTR [esi+12]
	push	ebx
	push	edi
	push	ecx
	call	_walkExprTree
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN11@walkExprTr
; Line 39665
	mov	eax, DWORD PTR [esi+16]
	push	edi
	call	_walkExprList
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@walkExprTr
$LN11@walkExprTr:
	pop	edi
	pop	ebp
	pop	ebx
	mov	eax, 1
	pop	esi
; Line 39668
	ret	0
$LN1@walkExprTr:
	pop	edi
; Line 39667
	xor	eax, eax
	cmp	ebp, 1
	pop	ebp
	pop	ebx
	setg	al
	pop	esi
; Line 39668
	ret	0
_walkExprTree ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _walkSelectExpr
_TEXT	SEGMENT
_p$ = 8							; size = 4
_xFunc$ = 12						; size = 4
_pArg$ = 16						; size = 4
_walkSelectExpr PROC					; COMDAT
; Line 39688
	push	ebx
; Line 39689
	mov	ebx, DWORD PTR _pArg$[esp]
	push	esi
	mov	esi, DWORD PTR _p$[esp+4]
	mov	eax, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR _xFunc$[esp+8]
	push	edi
	call	_walkExprList
; Line 39690
	mov	eax, DWORD PTR [esi+16]
	push	ebx
	push	edi
	push	eax
	call	_walkExprTree
; Line 39691
	mov	eax, DWORD PTR [esi+20]
	push	edi
	call	_walkExprList
; Line 39692
	mov	ecx, DWORD PTR [esi+24]
	push	ebx
	push	edi
	push	ecx
	call	_walkExprTree
; Line 39693
	mov	eax, DWORD PTR [esi+28]
	push	edi
	call	_walkExprList
; Line 39694
	mov	esi, DWORD PTR [esi+32]
	add	esp, 36					; 00000024H
	test	esi, esi
	je	SHORT $LN4@walkSelect
; Line 39695
	push	ebx
	push	edi
	push	esi
	call	_walkSelectExpr
	add	esp, 12					; 0000000cH
$LN4@walkSelect:
	pop	edi
	pop	esi
; Line 39697
	xor	eax, eax
	pop	ebx
; Line 39698
	ret	0
_walkSelectExpr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprIsConstant
_TEXT	SEGMENT
_isConst$ = -4						; size = 4
_sqlite3ExprIsConstant PROC				; COMDAT
; _p$ = ecx
; Line 39760
	push	ecx
; Line 39762
	lea	eax, DWORD PTR _isConst$[esp+4]
	push	eax
	push	OFFSET _exprNodeIsConstant
	push	ecx
	mov	DWORD PTR _isConst$[esp+16], 1
	call	_walkExprTree
; Line 39763
	mov	eax, DWORD PTR _isConst$[esp+16]
; Line 39764
	add	esp, 16					; 00000010H
	ret	0
_sqlite3ExprIsConstant ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprIsConstantNotJoin
_TEXT	SEGMENT
_isConst$ = -4						; size = 4
_sqlite3ExprIsConstantNotJoin PROC			; COMDAT
; _p$ = ecx
; Line 39772
	push	ecx
; Line 39774
	lea	eax, DWORD PTR _isConst$[esp+4]
	push	eax
	push	OFFSET _exprNodeIsConstant
	push	ecx
	mov	DWORD PTR _isConst$[esp+16], 3
	call	_walkExprTree
; Line 39775
	xor	eax, eax
	cmp	DWORD PTR _isConst$[esp+16], eax
	setne	al
; Line 39776
	add	esp, 16					; 00000010H
	ret	0
_sqlite3ExprIsConstantNotJoin ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprIsConstantOrFunction
_TEXT	SEGMENT
_isConst$ = -4						; size = 4
_sqlite3ExprIsConstantOrFunction PROC			; COMDAT
; _p$ = ecx
; Line 39787
	push	ecx
; Line 39789
	lea	eax, DWORD PTR _isConst$[esp+4]
	push	eax
	push	OFFSET _exprNodeIsConstant
	push	ecx
	mov	DWORD PTR _isConst$[esp+16], 2
	call	_walkExprTree
; Line 39790
	xor	eax, eax
	cmp	DWORD PTR _isConst$[esp+16], eax
	setne	al
; Line 39791
	add	esp, 16					; 00000010H
	ret	0
_sqlite3ExprIsConstantOrFunction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _analysisLoader
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_azNotUsed$ = 20					; size = 4
_analysisLoader PROC					; COMDAT
; Line 42402
	push	ebx
	push	esi
; Line 42410
	mov	esi, DWORD PTR _argv$[esp+4]
	test	esi, esi
	je	SHORT $LN8@analysisLo
	mov	ebx, DWORD PTR [esi]
	test	ebx, ebx
	je	SHORT $LN8@analysisLo
	cmp	DWORD PTR [esi+4], 0
	je	SHORT $LN8@analysisLo
; Line 42413
	mov	eax, DWORD PTR _pData$[esp+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	edx
	call	_sqlite3FindIndex
	add	esp, 8
; Line 42414
	test	eax, eax
; Line 42415
	je	SHORT $LN8@analysisLo
; Line 42417
	mov	esi, DWORD PTR [esi+4]
; Line 42418
	mov	cl, BYTE PTR [esi]
	push	edi
	xor	edi, edi
	test	cl, cl
	je	SHORT $LN4@analysisLo
	npad	7
$LL6@analysisLo:
	cmp	edi, DWORD PTR [eax+4]
	jg	SHORT $LN4@analysisLo
; Line 42420
	movsx	ecx, cl
	xor	edx, edx
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN2@analysisLo
	npad	1
$LL3@analysisLo:
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN2@analysisLo
; Line 42421
	lea	edx, DWORD PTR [edx+edx*4]
; Line 42422
	add	esi, 1
	lea	edx, DWORD PTR [ecx+edx*2-48]
	movsx	ecx, BYTE PTR [esi]
	cmp	ecx, 48					; 00000030H
	jge	SHORT $LL3@analysisLo
$LN2@analysisLo:
; Line 42424
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+edi*4], edx
; Line 42425
	cmp	BYTE PTR [esi], 32			; 00000020H
	jne	SHORT $LN5@analysisLo
	add	esi, 1
$LN5@analysisLo:
; Line 42418
	mov	cl, BYTE PTR [esi]
	add	edi, 1
	test	cl, cl
	jne	SHORT $LL6@analysisLo
$LN4@analysisLo:
	pop	edi
$LN8@analysisLo:
	pop	esi
; Line 42411
	xor	eax, eax
	pop	ebx
; Line 42428
	ret	0
_analysisLoader ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FixExpr
_TEXT	SEGMENT
_pFix$ = 8						; size = 4
_pExpr$ = 12						; size = 4
_sqlite3FixExpr PROC					; COMDAT
; Line 42932
	push	ebx
	push	ebp
; Line 42933
	mov	ebp, DWORD PTR _pExpr$[esp+4]
	test	ebp, ebp
	push	esi
	push	edi
	je	SHORT $LN4@sqlite3Fix@3
	npad	4
$LL5@sqlite3Fix@3:
; Line 42934
	mov	eax, DWORD PTR [ebp+56]
	mov	ecx, DWORD PTR _pFix$[esp+12]
	push	eax
	push	ecx
	call	_sqlite3FixSelect
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN74@sqlite3Fix@3
; Line 42937
	mov	edi, DWORD PTR [ebp+16]
	test	edi, edi
	je	SHORT $LN81@sqlite3Fix@3
	mov	ebx, DWORD PTR [edi+12]
	xor	esi, esi
	cmp	DWORD PTR [edi], esi
	jle	SHORT $LN81@sqlite3Fix@3
$LL67@sqlite3Fix@3:
	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _pFix$[esp+12]
	push	edx
	push	eax
	call	_sqlite3FixExpr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN74@sqlite3Fix@3
	add	esi, 1
	add	ebx, 12					; 0000000cH
	cmp	esi, DWORD PTR [edi]
	jl	SHORT $LL67@sqlite3Fix@3
$LN81@sqlite3Fix@3:
; Line 42940
	mov	ecx, DWORD PTR [ebp+12]
	mov	edx, DWORD PTR _pFix$[esp+12]
	push	ecx
	push	edx
	call	_sqlite3FixExpr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN74@sqlite3Fix@3
; Line 42943
	mov	ebp, DWORD PTR [ebp+8]
	test	ebp, ebp
	jne	SHORT $LL5@sqlite3Fix@3
$LN4@sqlite3Fix@3:
	pop	edi
	pop	esi
	pop	ebp
; Line 42945
	xor	eax, eax
	pop	ebx
; Line 42946
	ret	0
$LN74@sqlite3Fix@3:
	pop	edi
	pop	esi
	pop	ebp
; Line 42935
	mov	eax, 1
	pop	ebx
; Line 42946
	ret	0
_sqlite3FixExpr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _freeIndex
_TEXT	SEGMENT
_freeIndex PROC						; COMDAT
; _p$ = esi
; Line 43557
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN6@freeIndex
	push	eax
	call	_free
	add	esp, 4
$LN6@freeIndex:
; Line 43558
	push	esi
	call	_free
	pop	ecx
; Line 43559
	ret	0
_freeIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqliteDeleteIndex
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqliteDeleteIndex PROC					; COMDAT
; Line 43571
	mov	edx, DWORD PTR _p$[esp-4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR [edx]
	push	esi
; Line 43573
	mov	eax, ebp
	push	edi
	lea	esi, DWORD PTR [eax+1]
	npad	1
$LL33@sqliteDele:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL33@sqliteDele
	mov	ebx, DWORD PTR [edx+36]
	sub	eax, esi
	add	ebx, 32					; 00000020H
	cmp	BYTE PTR [ebx], 3
	lea	edi, DWORD PTR [eax+1]
	mov	eax, OFFSET _strHash
	je	SHORT $LN17@sqliteDele
	mov	eax, OFFSET _binHash
$LN17@sqliteDele:
	push	edi
	push	ebp
	call	eax
	mov	esi, DWORD PTR [ebx+20]
	sub	esi, 1
	and	esi, eax
	push	edi
	push	ebp
	mov	edx, esi
	mov	ecx, ebx
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN14@sqliteDele
	mov	edi, eax
	push	esi
	mov	eax, ebx
	call	_removeElementGivenHash
	add	esp, 4
$LN14@sqliteDele:
; Line 43575
	mov	esi, DWORD PTR _p$[esp+12]
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN26@sqliteDele
	push	eax
	call	_free
	add	esp, 4
$LN26@sqliteDele:
	push	esi
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 43576
	ret	0
_sqliteDeleteIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3UnlinkAndDeleteIndex
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zIdxName$ = 12						; size = 4
_sqlite3UnlinkAndDeleteIndex PROC			; COMDAT
; _iDb$ = eax
; Line 43587
	mov	ecx, DWORD PTR _db$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zIdxName$[esp+4]
	lea	eax, DWORD PTR [eax+eax*2]
	mov	ebx, DWORD PTR [edx+eax*8+20]
	push	esi
; Line 43589
	mov	eax, ebp
	push	edi
	add	ebx, 32					; 00000020H
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL42@sqlite3Unl:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL42@sqlite3Unl
	sub	eax, edx
; Line 43590
	cmp	BYTE PTR [ebx], 3
	lea	edi, DWORD PTR [eax+1]
	mov	eax, OFFSET _strHash
	je	SHORT $LN24@sqlite3Unl
	mov	eax, OFFSET _binHash
$LN24@sqlite3Unl:
	push	edi
	push	ebp
	call	eax
	mov	esi, DWORD PTR [ebx+20]
	sub	esi, 1
	and	esi, eax
	push	edi
	push	ebp
	mov	edx, esi
	mov	ecx, ebx
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN44@sqlite3Unl
	mov	ebp, DWORD PTR [eax+8]
	mov	edi, eax
	push	esi
	mov	eax, ebx
	call	_removeElementGivenHash
	add	esp, 4
; Line 43591
	test	ebp, ebp
	je	SHORT $LN44@sqlite3Unl
; Line 43592
	mov	ecx, DWORD PTR [ebp+16]
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, ebp
	jne	SHORT $LN6@sqlite3Unl
; Line 43593
	mov	eax, DWORD PTR [ebp+32]
	mov	DWORD PTR [ecx+16], eax
; Line 43594
	jmp	SHORT $LN1@sqlite3Unl
$LN6@sqlite3Unl:
; Line 43596
	test	eax, eax
	je	SHORT $LN1@sqlite3Unl
$LL4@sqlite3Unl:
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, ebp
	je	SHORT $LN46@sqlite3Unl
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LL4@sqlite3Unl
; Line 43597
	jmp	SHORT $LN1@sqlite3Unl
$LN46@sqlite3Unl:
; Line 43598
	mov	ecx, DWORD PTR [ebp+32]
	mov	DWORD PTR [eax+32], ecx
$LN1@sqlite3Unl:
; Line 43601
	mov	eax, DWORD PTR [ebp+28]
	test	eax, eax
	je	SHORT $LN33@sqlite3Unl
	push	eax
	call	_free
	add	esp, 4
$LN33@sqlite3Unl:
	push	ebp
	call	_free
	add	esp, 4
$LN44@sqlite3Unl:
; Line 43603
	mov	eax, DWORD PTR _db$[esp+12]
	or	DWORD PTR [eax+8], 16			; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 43604
	ret	0
_sqlite3UnlinkAndDeleteIndex ENDP
_TEXT	ENDS
EXTRN	_isalnum:PROC
; Function compile flags: /Ogtpy
;	COMDAT _identPut
_TEXT	SEGMENT
_z$ = 8							; size = 4
_pIdx$ = 12						; size = 4
_identPut PROC						; COMDAT
; _zSignedIdent$ = eax
; Line 44499
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _z$[esp+4]
	push	esi
	mov	ebx, eax
; Line 44502
	mov	eax, DWORD PTR _pIdx$[esp+8]
	mov	esi, DWORD PTR [eax]
	push	edi
; Line 44503
	xor	edi, edi
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN25@identPut
	npad	9
$LL10@identPut:
; Line 44504
	movzx	ecx, BYTE PTR [edi+ebx]
	push	ecx
	call	_isalnum
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN9@identPut
	cmp	BYTE PTR [edi+ebx], 95			; 0000005fH
	jne	SHORT $LN25@identPut
$LN9@identPut:
; Line 44503
	add	edi, 1
	cmp	BYTE PTR [edi+ebx], 0
	jne	SHORT $LL10@identPut
$LN25@identPut:
; Line 44507
	cmp	BYTE PTR [edi+ebx], 0
	jne	SHORT $LN24@identPut
	movzx	edx, BYTE PTR [ebx]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN24@identPut
	call	_keywordCode
	cmp	eax, 23					; 00000017H
	jne	SHORT $LN24@identPut
	xor	eax, eax
	jmp	SHORT $LN6@identPut
$LN24@identPut:
	mov	eax, 1
; Line 44508
	mov	BYTE PTR [esi+ebp], 34			; 00000022H
	add	esi, eax
$LN6@identPut:
; Line 44509
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN27@identPut
$LL5@identPut:
; Line 44510
	mov	cl, BYTE PTR [ebx]
	mov	BYTE PTR [esi+ebp], cl
	add	esi, 1
; Line 44511
	cmp	BYTE PTR [ebx], 34			; 00000022H
	jne	SHORT $LN4@identPut
	mov	BYTE PTR [esi+ebp], 34			; 00000022H
	add	esi, 1
$LN4@identPut:
	add	ebx, 1
	cmp	BYTE PTR [ebx], 0
	jne	SHORT $LL5@identPut
$LN27@identPut:
; Line 44513
	test	eax, eax
	je	SHORT $LN23@identPut
; Line 44515
	mov	edx, DWORD PTR _pIdx$[esp+12]
	mov	BYTE PTR [esi+ebp], 34			; 00000022H
	add	esi, 1
	mov	BYTE PTR [esi+ebp], 0
	pop	edi
	mov	DWORD PTR [edx], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44516
	ret	0
$LN23@identPut:
; Line 44515
	mov	eax, DWORD PTR _pIdx$[esp+12]
	mov	BYTE PTR [esi+ebp], 0
	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44516
	ret	0
_identPut ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3IdListDelete
_TEXT	SEGMENT
_sqlite3IdListDelete PROC				; COMDAT
; _pList$ = edi
; Line 46070
	test	edi, edi
	je	SHORT $LN20@sqlite3IdL@2
	push	esi
; Line 46071
	xor	esi, esi
	cmp	DWORD PTR [edi+4], esi
	jle	SHORT $LN1@sqlite3IdL@2
	npad	4
$LL3@sqlite3IdL@2:
; Line 46072
	mov	eax, DWORD PTR [edi]
	mov	eax, DWORD PTR [eax+esi*8]
	test	eax, eax
	je	SHORT $LN2@sqlite3IdL@2
	push	eax
	call	_free
	add	esp, 4
$LN2@sqlite3IdL@2:
	add	esi, 1
	cmp	esi, DWORD PTR [edi+4]
	jl	SHORT $LL3@sqlite3IdL@2
$LN1@sqlite3IdL@2:
; Line 46074
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	pop	esi
	je	SHORT $LN15@sqlite3IdL@2
	push	eax
	call	_free
	add	esp, 4
$LN15@sqlite3IdL@2:
; Line 46075
	push	edi
	call	_free
	pop	ecx
$LN20@sqlite3IdL@2:
; Line 46076
	ret	0
_sqlite3IdListDelete ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SrcListDelete
_TEXT	SEGMENT
_pList$ = 8						; size = 4
_sqlite3SrcListDelete PROC				; COMDAT
; Line 46173
	push	edi
; Line 46176
	mov	edi, DWORD PTR _pList$[esp]
	test	edi, edi
	je	$LN150@sqlite3Src@3
	push	ebx
	push	ebp
; Line 46177
	xor	ebp, ebp
	cmp	WORD PTR [edi], bp
	lea	ebx, DWORD PTR [edi+8]
	jle	$LN1@sqlite3Src@3
	push	esi
	npad	2
$LL156@sqlite3Src@3:
; Line 46178
	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN10@sqlite3Src@3
	push	eax
	call	_free
	add	esp, 4
$LN10@sqlite3Src@3:
; Line 46179
	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN15@sqlite3Src@3
	push	eax
	call	_free
	add	esp, 4
$LN15@sqlite3Src@3:
; Line 46180
	mov	eax, DWORD PTR [ebx+8]
	test	eax, eax
	je	SHORT $LN20@sqlite3Src@3
	push	eax
	call	_free
	add	esp, 4
$LN20@sqlite3Src@3:
; Line 46181
	mov	eax, DWORD PTR [ebx+12]
	push	eax
	call	_sqlite3DeleteTable
; Line 46182
	mov	esi, DWORD PTR [ebx+16]
	add	esp, 4
	test	esi, esi
	je	SHORT $LN94@sqlite3Src@3
	push	esi
	call	_clearSelect
	push	esi
	call	_free
	add	esp, 8
$LN94@sqlite3Src@3:
; Line 46183
	mov	ecx, DWORD PTR [ebx+28]
	push	ecx
	call	_sqlite3ExprDelete
; Line 46184
	mov	esi, DWORD PTR [ebx+32]
	add	esp, 4
	test	esi, esi
	je	SHORT $LN2@sqlite3Src@3
	xor	edi, edi
	cmp	DWORD PTR [esi+4], edi
	jle	SHORT $LN126@sqlite3Src@3
	npad	5
$LL157@sqlite3Src@3:
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+edi*8]
	test	eax, eax
	je	SHORT $LN127@sqlite3Src@3
	push	eax
	call	_free
	add	esp, 4
$LN127@sqlite3Src@3:
	add	edi, 1
	cmp	edi, DWORD PTR [esi+4]
	jl	SHORT $LL157@sqlite3Src@3
$LN126@sqlite3Src@3:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN140@sqlite3Src@3
	push	eax
	call	_free
	add	esp, 4
$LN140@sqlite3Src@3:
	push	esi
	call	_free
	mov	edi, DWORD PTR _pList$[esp+16]
	add	esp, 4
$LN2@sqlite3Src@3:
	movsx	eax, WORD PTR [edi]
	add	ebp, 1
	add	ebx, 48					; 00000030H
	cmp	ebp, eax
	jl	$LL156@sqlite3Src@3
	pop	esi
$LN1@sqlite3Src@3:
; Line 46186
	push	edi
	call	_free
	add	esp, 4
	pop	ebp
	pop	ebx
$LN150@sqlite3Src@3:
	pop	edi
; Line 46187
	ret	0
_sqlite3SrcListDelete ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _randomFunc
_TEXT	SEGMENT
_r$ = -8						; size = 8
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_randomFunc PROC					; COMDAT
; Line 47994
	sub	esp, 8
	push	ebx
	push	esi
; Line 47996
	mov	ebx, 1
	add	DWORD PTR _inMutex, ebx
	push	edi
	mov	esi, 8
	lea	edi, DWORD PTR _r$[esp+20]
	npad	6
$LL5@randomFunc:
	sub	esi, ebx
	call	_randomByte
	mov	BYTE PTR [edi], al
	add	edi, ebx
	test	esi, esi
	jne	SHORT $LL5@randomFunc
	sub	DWORD PTR _inMutex, ebx
; Line 47997
	mov	ebx, DWORD PTR _r$[esp+24]
	mov	edi, DWORD PTR _r$[esp+20]
	mov	ecx, ebx
	and	ecx, 2147483647				; 7fffffffH
	mov	eax, edi
	or	eax, ecx
	jne	SHORT $LN1@randomFunc
	xor	edi, edi
	xor	ebx, ebx
$LN1@randomFunc:
; Line 47999
	mov	esi, DWORD PTR _context$[esp+16]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi], edi
	pop	edi
	mov	DWORD PTR [esi+4], ebx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
	pop	esi
	pop	ebx
; Line 48000
	add	esp, 8
	ret	0
_randomFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _last_insert_rowid
_TEXT	SEGMENT
_context$ = 8						; size = 4
_arg$ = 12						; size = 4
_argv$ = 16						; size = 4
_last_insert_rowid PROC					; COMDAT
; Line 48039
	mov	ecx, DWORD PTR _context$[esp-4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+8]
	push	ebx
	mov	ebx, DWORD PTR [eax+36]
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax+32]
	lea	esi, DWORD PTR [ecx+8]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi], edi
	pop	edi
	mov	DWORD PTR [esi+4], ebx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
	pop	esi
	pop	ebx
; Line 48040
	ret	0
_last_insert_rowid ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _changes
_TEXT	SEGMENT
_context$ = 8						; size = 4
_arg$ = 12						; size = 4
_argv$ = 16						; size = 4
_changes PROC						; COMDAT
; Line 48052
	mov	eax, DWORD PTR _context$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	esi
	push	edi
	mov	edi, DWORD PTR [edx+52]
	lea	esi, DWORD PTR [eax+8]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	eax, edi
	add	esp, 4
	cdq
	pop	edi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
	pop	esi
; Line 48053
	ret	0
_changes ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _total_changes
_TEXT	SEGMENT
_context$ = 8						; size = 4
_arg$ = 12						; size = 4
_argv$ = 16						; size = 4
_total_changes PROC					; COMDAT
; Line 48065
	mov	eax, DWORD PTR _context$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	push	esi
	push	edi
	mov	edi, DWORD PTR [edx+56]
	lea	esi, DWORD PTR [eax+8]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	eax, edi
	add	esp, 4
	cdq
	pop	edi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
	pop	esi
; Line 48066
	ret	0
_total_changes ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3CloseExtensions
_TEXT	SEGMENT
_sqlite3CloseExtensions PROC				; COMDAT
; _db$ = eax
; Line 51514
	push	esi
	push	edi
	mov	edi, eax
; Line 51516
	xor	esi, esi
	cmp	DWORD PTR [edi+72], esi
	jle	SHORT $LN1@sqlite3Clo
	push	ebx
	mov	ebx, DWORD PTR __imp__FreeLibrary@4
$LL3@sqlite3Clo:
; Line 51517
	mov	eax, DWORD PTR [edi+76]
	mov	ecx, DWORD PTR [eax+esi*4]
	push	ecx
	call	ebx
	add	esi, 1
	cmp	esi, DWORD PTR [edi+72]
	jl	SHORT $LL3@sqlite3Clo
	pop	ebx
$LN1@sqlite3Clo:
; Line 51519
	mov	edi, DWORD PTR [edi+76]
	test	edi, edi
	je	SHORT $LN11@sqlite3Clo
	push	edi
	call	_free
	add	esp, 4
$LN11@sqlite3Clo:
	pop	edi
	pop	esi
; Line 51520
	ret	0
_sqlite3CloseExtensions ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_reset_auto_extension
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_reset_auto_extension
_TEXT	SEGMENT
_sqlite3_reset_auto_extension PROC			; COMDAT
; Line 51577
	mov	eax, DWORD PTR _aAutoExtension
	add	DWORD PTR _inMutex, 1
	test	eax, eax
	je	SHORT $LN8@sqlite3_re@4
	push	eax
	call	_free
	add	esp, 4
$LN8@sqlite3_re@4:
; Line 51580
	sub	DWORD PTR _inMutex, 1
	mov	DWORD PTR _aAutoExtension, 0
	mov	DWORD PTR _nAutoExtension, 0
; Line 51581
	ret	0
_sqlite3_reset_auto_extension ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _clearSelect
_TEXT	SEGMENT
_p$ = 8							; size = 4
_clearSelect PROC					; COMDAT
; Line 53473
	push	ebx
	push	esi
; Line 53474
	mov	esi, DWORD PTR _p$[esp+4]
	mov	ebx, DWORD PTR [esi]
	push	edi
	call	_sqlite3ExprListDelete
; Line 53475
	mov	eax, DWORD PTR [esi+12]
	push	eax
	call	_sqlite3SrcListDelete
; Line 53476
	mov	ecx, DWORD PTR [esi+16]
	push	ecx
	call	_sqlite3ExprDelete
; Line 53477
	mov	ebx, DWORD PTR [esi+20]
	call	_sqlite3ExprListDelete
; Line 53478
	mov	edx, DWORD PTR [esi+24]
	push	edx
	call	_sqlite3ExprDelete
; Line 53479
	mov	ebx, DWORD PTR [esi+28]
	add	esp, 12					; 0000000cH
	call	_sqlite3ExprListDelete
; Line 53480
	mov	edi, DWORD PTR [esi+32]
	test	edi, edi
	je	SHORT $LN65@clearSelec
	push	edi
	call	_clearSelect
	push	edi
	call	_free
	add	esp, 8
$LN65@clearSelec:
; Line 53481
	mov	eax, DWORD PTR [esi+40]
	push	eax
	call	_sqlite3ExprDelete
; Line 53482
	mov	ecx, DWORD PTR [esi+44]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR _p$[esp-4], ecx
	jmp	_sqlite3ExprDelete
_clearSelect ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SelectDelete
_TEXT	SEGMENT
_sqlite3SelectDelete PROC				; COMDAT
; _p$ = esi
; Line 53539
	test	esi, esi
	je	SHORT $LN7@sqlite3Sel
; Line 53540
	push	esi
	call	_clearSelect
; Line 53541
	push	esi
	call	_free
	add	esp, 8
$LN7@sqlite3Sel:
; Line 53543
	ret	0
_sqlite3SelectDelete ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_free_table
_TEXT	SEGMENT
_azResult$ = 8						; size = 4
_sqlite3_free_table PROC				; COMDAT
; Line 57105
	push	edi
; Line 57106
	mov	edi, DWORD PTR _azResult$[esp]
	test	edi, edi
	je	SHORT $LN17@sqlite3_fr@2
; Line 57108
	sub	edi, 4
; Line 57109
	je	SHORT $LN17@sqlite3_fr@2
	push	ebx
; Line 57110
	mov	ebx, DWORD PTR [edi]
	push	esi
; Line 57111
	mov	esi, 1
	cmp	ebx, esi
	jle	SHORT $LN2@sqlite3_fr@2
	npad	5
$LL4@sqlite3_fr@2:
	mov	eax, DWORD PTR [edi+esi*4]
	test	eax, eax
	je	SHORT $LN3@sqlite3_fr@2
	push	eax
	call	_free
	add	esp, 4
$LN3@sqlite3_fr@2:
	add	esi, 1
	cmp	esi, ebx
	jl	SHORT $LL4@sqlite3_fr@2
$LN2@sqlite3_fr@2:
; Line 57112
	push	edi
	call	_free
	add	esp, 4
	pop	esi
	pop	ebx
$LN17@sqlite3_fr@2:
	pop	edi
; Line 57114
	ret	0
_sqlite3_free_table ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabClear
_TEXT	SEGMENT
_sqlite3VtabClear PROC					; COMDAT
; _p$ = eax
; Line 58917
	push	esi
	push	edi
	mov	edi, eax
; Line 58918
	mov	eax, DWORD PTR [edi+64]
; Line 58919
	test	eax, eax
	je	SHORT $LN5@sqlite3Vta@6
; Line 58921
	mov	ecx, DWORD PTR [edi+76]
	mov	esi, DWORD PTR [ecx+128]
	call	_sqlite3VtabUnlock
; Line 58922
	mov	DWORD PTR [edi+64], 0
$LN5@sqlite3Vta@6:
; Line 58924
	cmp	DWORD PTR [edi+72], 0
	je	SHORT $LN16@sqlite3Vta@6
; Line 58926
	xor	esi, esi
	cmp	DWORD PTR [edi+68], esi
	jle	SHORT $LN1@sqlite3Vta@6
	npad	3
$LL3@sqlite3Vta@6:
; Line 58927
	mov	edx, DWORD PTR [edi+72]
	mov	eax, DWORD PTR [edx+esi*4]
	test	eax, eax
	je	SHORT $LN2@sqlite3Vta@6
	push	eax
	call	_free
	add	esp, 4
$LN2@sqlite3Vta@6:
	add	esi, 1
	cmp	esi, DWORD PTR [edi+68]
	jl	SHORT $LL3@sqlite3Vta@6
$LN1@sqlite3Vta@6:
; Line 58929
	mov	edi, DWORD PTR [edi+72]
	test	edi, edi
	je	SHORT $LN16@sqlite3Vta@6
	push	edi
	call	_free
	add	esp, 4
$LN16@sqlite3Vta@6:
	pop	edi
	pop	esi
; Line 58931
	ret	0
_sqlite3VtabClear ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _callFinaliser
_TEXT	SEGMENT
_offset$ = 8						; size = 4
_callFinaliser PROC					; COMDAT
; _db$ = eax
; Line 59372
	push	ebp
	mov	ebp, DWORD PTR _offset$[esp]
	push	esi
	mov	esi, eax
; Line 59374
	cmp	DWORD PTR [esi+212], 0
	je	SHORT $LN5@callFinali
	push	ebx
; Line 59375
	xor	ebx, ebx
	cmp	DWORD PTR [esi+216], ebx
	push	edi
	jle	SHORT $LN2@callFinali
	npad	3
$LL15@callFinali:
	mov	eax, DWORD PTR [esi+212]
	cmp	DWORD PTR [eax+ebx*4], 0
	lea	eax, DWORD PTR [eax+ebx*4]
	je	SHORT $LN2@callFinali
; Line 59376
	mov	edi, DWORD PTR [eax]
; Line 59378
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ecx+ebp]
; Line 59379
	test	eax, eax
	je	SHORT $LN1@callFinali
	push	edi
	call	eax
	add	esp, 4
$LN1@callFinali:
; Line 59380
	mov	eax, edi
	call	_sqlite3VtabUnlock
	add	ebx, 1
	cmp	ebx, DWORD PTR [esi+216]
	jl	SHORT $LL15@callFinali
$LN2@callFinali:
; Line 59382
	mov	eax, DWORD PTR [esi+212]
	xor	edi, edi
	cmp	eax, edi
	je	SHORT $LN11@callFinali
	push	eax
	call	_free
	add	esp, 4
$LN11@callFinali:
; Line 59383
	mov	DWORD PTR [esi+216], edi
; Line 59384
	mov	DWORD PTR [esi+212], edi
	pop	edi
	pop	ebx
$LN5@callFinali:
	pop	esi
	pop	ebp
; Line 59386
	ret	0
_callFinaliser ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabRollback
_TEXT	SEGMENT
_sqlite3VtabRollback PROC				; COMDAT
; _db$ = eax
; Line 59425
	push	68					; 00000044H
	call	_callFinaliser
	add	esp, 4
; Line 59426
	xor	eax, eax
; Line 59427
	ret	0
_sqlite3VtabRollback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabCommit
_TEXT	SEGMENT
_sqlite3VtabCommit PROC					; COMDAT
; _db$ = eax
; Line 59434
	push	64					; 00000040H
	call	_callFinaliser
	add	esp, 4
; Line 59435
	xor	eax, eax
; Line 59436
	ret	0
_sqlite3VtabCommit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _exprTableUsage
_TEXT	SEGMENT
_mask$109808 = -16					; size = 8
_mask$ = -8						; size = 8
_pMaskSet$ = 8						; size = 4
_p$ = 12						; size = 4
_exprTableUsage PROC					; COMDAT
; Line 59883
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
; Line 59885
	mov	ebp, DWORD PTR _p$[esp+20]
	xor	ebx, ebx
	cmp	ebp, ebx
	jne	SHORT $LN2@exprTableU@2
	pop	ebp
	xor	eax, eax
	xor	edx, edx
	pop	ebx
; Line 59895
	add	esp, 16					; 00000010H
	ret	0
$LN2@exprTableU@2:
; Line 59886
	cmp	BYTE PTR [ebp], 149			; 00000095H
	push	esi
	jne	SHORT $LN1@exprTableU@2
; Line 59887
	mov	esi, DWORD PTR [ebp+36]
	mov	edx, DWORD PTR _pMaskSet$[esp+24]
	call	_getMask
	pop	esi
	pop	ebp
	pop	ebx
; Line 59895
	add	esp, 16					; 00000010H
	ret	0
$LN1@exprTableU@2:
; Line 59890
	mov	eax, DWORD PTR [ebp+12]
	push	edi
	mov	edi, DWORD PTR _pMaskSet$[esp+28]
	push	eax
	push	edi
	call	_exprTableUsage
; Line 59891
	mov	ecx, DWORD PTR [ebp+8]
	push	ecx
	push	edi
	mov	esi, eax
	mov	DWORD PTR _mask$[esp+52], edx
	call	_exprTableUsage
	or	DWORD PTR _mask$[esp+52], edx
	or	esi, eax
	mov	DWORD PTR _mask$[esp+48], esi
; Line 59892
	mov	esi, DWORD PTR [ebp+16]
	add	esp, 16					; 00000010H
	cmp	esi, ebx
	mov	DWORD PTR _mask$109808[esp+32], ebx
	mov	DWORD PTR _mask$109808[esp+36], ebx
	je	SHORT $LN13@exprTableU@2
	cmp	DWORD PTR [esi], ebx
	jle	SHORT $LN13@exprTableU@2
	xor	ebp, ebp
$LL7@exprTableU@2:
	mov	edx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [edx+ebp]
	push	eax
	push	edi
	call	_exprTableUsage
	or	DWORD PTR _mask$109808[esp+40], eax
	or	DWORD PTR _mask$109808[esp+44], edx
	add	ebx, 1
	add	esp, 8
	add	ebp, 12					; 0000000cH
	cmp	ebx, DWORD PTR [esi]
	jl	SHORT $LL7@exprTableU@2
	mov	ebp, DWORD PTR _p$[esp+28]
$LN13@exprTableU@2:
; Line 59893
	mov	ecx, DWORD PTR [ebp+56]
	push	ecx
	push	edi
	call	_exprSelectTableUsage
	or	eax, DWORD PTR _mask$109808[esp+40]
	or	edx, DWORD PTR _mask$109808[esp+44]
; Line 59894
	or	eax, DWORD PTR _mask$[esp+40]
	add	esp, 8
	or	edx, DWORD PTR _mask$[esp+36]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 59895
	add	esp, 16					; 00000010H
	ret	0
_exprTableUsage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _exprListTableUsage
_TEXT	SEGMENT
_mask$ = -8						; size = 8
_pMaskSet$ = 8						; size = 4
_exprListTableUsage PROC				; COMDAT
; _pList$ = esi
; Line 59896
	sub	esp, 8
	push	ebp
; Line 59898
	xor	edx, edx
	xor	ebp, ebp
; Line 59899
	test	esi, esi
	mov	DWORD PTR _mask$[esp+16], edx
	je	SHORT $LN10@exprListTa
	push	edi
; Line 59900
	xor	edi, edi
	cmp	DWORD PTR [esi], edx
	jle	SHORT $LN9@exprListTa
	push	ebx
	xor	ebx, ebx
	npad	6
$LL3@exprListTa:
; Line 59901
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [eax+ebx]
	mov	edx, DWORD PTR _pMaskSet$[esp+16]
	push	ecx
	push	edx
	call	_exprTableUsage
	or	DWORD PTR _mask$[esp+32], edx
	add	edi, 1
	add	esp, 8
	or	ebp, eax
	add	ebx, 12					; 0000000cH
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LL3@exprListTa
; Line 59904
	mov	edx, DWORD PTR _mask$[esp+24]
	pop	ebx
	pop	edi
	mov	eax, ebp
	pop	ebp
; Line 59905
	add	esp, 8
	ret	0
$LN9@exprListTa:
	pop	edi
; Line 59904
	mov	eax, ebp
	pop	ebp
; Line 59905
	add	esp, 8
	ret	0
$LN10@exprListTa:
; Line 59904
	mov	eax, ebp
	pop	ebp
; Line 59905
	add	esp, 8
	ret	0
_exprListTableUsage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _orTermIsOptCandidate
_TEXT	SEGMENT
_iCursor$ = 8						; size = 4
_iColumn$ = 12						; size = 4
_orTermIsOptCandidate PROC				; COMDAT
; _pOrTerm$ = eax
; Line 60177
	movsx	ecx, WORD PTR [eax+6]
	cmp	ecx, DWORD PTR _iCursor$[esp-4]
	je	SHORT $LN4@orTermIsOp
$LN9@orTermIsOp:
; Line 60178
	xor	eax, eax
; Line 60192
	ret	0
$LN4@orTermIsOp:
; Line 60180
	movsx	edx, WORD PTR [eax+8]
	cmp	edx, DWORD PTR _iColumn$[esp-4]
; Line 60181
	jne	SHORT $LN9@orTermIsOp
	push	esi
; Line 60183
	mov	esi, DWORD PTR [eax]
	mov	eax, DWORD PTR [esi+12]
	push	edi
	call	_sqlite3ExprAffinity
	movsx	edi, al
; Line 60184
	test	edi, edi
	jne	SHORT $LN2@orTermIsOp
; Line 60185
	lea	eax, DWORD PTR [edi+1]
	pop	edi
	pop	esi
; Line 60192
	ret	0
$LN2@orTermIsOp:
; Line 60187
	mov	eax, DWORD PTR [esi+8]
	call	_sqlite3ExprAffinity
; Line 60188
	movsx	eax, al
	xor	ecx, ecx
	cmp	edi, eax
	sete	cl
	pop	edi
	pop	esi
	mov	eax, ecx
; Line 60192
	ret	0
_orTermIsOptCandidate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _referencesOtherTables
_TEXT	SEGMENT
_pList$ = 8						; size = 4
_pMaskSet$ = 12						; size = 4
_iFirst$ = 16						; size = 4
_referencesOtherTables PROC				; COMDAT
; _iBase$ = eax
; Line 60504
	mov	edx, DWORD PTR _pMaskSet$[esp-4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _iFirst$[esp+4]
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR [edx]
	xor	ecx, ecx
	test	eax, eax
	push	edi
	jle	SHORT $LN7@references
	add	edx, 4
	npad	7
$LL9@references:
	cmp	DWORD PTR [edx], esi
	je	SHORT $LN14@references
	add	ecx, 1
	add	edx, 4
	cmp	ecx, eax
	jl	SHORT $LL9@references
$LN7@references:
	xor	eax, eax
	xor	edx, edx
$LN10@references:
	not	eax
	mov	edi, eax
; Line 60505
	mov	eax, DWORD PTR _pList$[esp+12]
	cmp	ebp, DWORD PTR [eax]
	not	edx
	mov	ebx, edx
	jge	SHORT $LN2@references
	lea	esi, DWORD PTR [ebp+ebp*2]
	add	esi, esi
	add	esi, esi
	npad	6
$LL3@references:
; Line 60506
	mov	ecx, DWORD PTR _pList$[esp+12]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [esi+edx]
	push	eax
	mov	eax, DWORD PTR _pMaskSet$[esp+16]
	push	eax
	call	_exprTableUsage
	and	eax, edi
	and	edx, ebx
	add	esp, 8
	add	ebp, 1
	add	esi, 12					; 0000000cH
	or	eax, edx
	jne	SHORT $LN15@references
	mov	ecx, DWORD PTR _pList$[esp+12]
	cmp	ebp, DWORD PTR [ecx]
	jl	SHORT $LL3@references
$LN2@references:
	pop	edi
	pop	esi
	pop	ebp
; Line 60510
	xor	eax, eax
	pop	ebx
; Line 60511
	ret	0
$LN14@references:
; Line 60504
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	jmp	SHORT $LN10@references
$LN15@references:
	pop	edi
	pop	esi
	pop	ebp
; Line 60507
	mov	eax, 1
	pop	ebx
; Line 60511
	ret	0
_referencesOtherTables ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sortableByRowid
_TEXT	SEGMENT
_pbRev$ = 8						; size = 4
_sortableByRowid PROC					; COMDAT
; _base$ = eax
; _pOrderBy$ = esi
; _pMaskSet$ = edx
; Line 60662
	mov	ecx, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [ecx]
; Line 60664
	cmp	BYTE PTR [ecx], 149			; 00000095H
	jne	SHORT $LN1@sortableBy
	cmp	DWORD PTR [ecx+36], eax
	jne	SHORT $LN1@sortableBy
	cmp	DWORD PTR [ecx+40], -1
	jne	SHORT $LN1@sortableBy
	push	1
	push	edx
	push	esi
	call	_referencesOtherTables
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@sortableBy
; Line 60665
	mov	eax, DWORD PTR [esi+12]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _pbRev$[esp-4]
	mov	DWORD PTR [edx], ecx
; Line 60666
	mov	eax, 1
; Line 60669
	ret	0
$LN1@sortableBy:
; Line 60668
	xor	eax, eax
; Line 60669
	ret	0
_sortableByRowid ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _whereInfoFree
_TEXT	SEGMENT
_pWInfo$ = 8						; size = 4
_whereInfoFree PROC					; COMDAT
; Line 61388
	push	ebp
	mov	ebp, DWORD PTR _pWInfo$[esp]
; Line 61389
	test	ebp, ebp
	je	SHORT $LN22@whereInfoF
	push	edi
; Line 61391
	xor	edi, edi
	cmp	DWORD PTR [ebp+20], edi
	jle	SHORT $LN3@whereInfoF
	push	ebx
	push	esi
	lea	ebx, DWORD PTR [ebp+100]
$LL26@whereInfoF:
; Line 61392
	mov	esi, DWORD PTR [ebx]
; Line 61393
	test	esi, esi
	je	SHORT $LN4@whereInfoF
; Line 61394
	cmp	DWORD PTR [esi+28], 0
	je	SHORT $LN12@whereInfoF
; Line 61399
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN12@whereInfoF
	push	eax
	call	_free
	add	esp, 4
$LN12@whereInfoF:
; Line 61401
	push	esi
	call	_free
	add	esp, 4
$LN4@whereInfoF:
	add	edi, 1
	add	ebx, 76					; 0000004cH
	cmp	edi, DWORD PTR [ebp+20]
	jl	SHORT $LL26@whereInfoF
	pop	esi
	pop	ebx
$LN3@whereInfoF:
; Line 61404
	push	ebp
	call	_free
	add	esp, 4
	pop	edi
$LN22@whereInfoF:
	pop	ebp
; Line 61406
	ret	0
_whereInfoFree ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3MallocRaw
_TEXT	SEGMENT
_sqlite3MallocRaw PROC					; COMDAT
; _n$ = ecx
; Line 8007
	xor	eax, eax
; Line 8008
	test	ecx, ecx
	jle	SHORT $LN16@sqlite3Mal
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	push	esi
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN5@sqlite3Mal
	test	esi, esi
	jg	SHORT $LN27@sqlite3Mal
$LN5@sqlite3Mal:
; Line 8009
	push	ecx
	call	_malloc
	add	esp, 4
; Line 8010
	test	eax, eax
	jne	SHORT $LN27@sqlite3Mal
; Line 8011
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN15@sqlite3Mal
	test	esi, esi
	jg	SHORT $LN27@sqlite3Mal
$LN15@sqlite3Mal:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN27@sqlite3Mal:
	pop	esi
$LN16@sqlite3Mal:
; Line 8018
	ret	0
_sqlite3MallocRaw ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Malloc
_TEXT	SEGMENT
_sqlite3Malloc PROC					; COMDAT
; _n$ = edi
; Line 8077
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN1@sqlite3Mal@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	push	ebx
	mov	ebx, DWORD PTR _inMutex
	je	SHORT $LN8@sqlite3Mal@2
	test	ebx, ebx
	jg	SHORT $LN30@sqlite3Mal@2
$LN8@sqlite3Mal@2:
	push	esi
	push	edi
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN26@sqlite3Mal@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN18@sqlite3Mal@2
	test	ebx, ebx
	jg	SHORT $LN31@sqlite3Mal@2
$LN18@sqlite3Mal@2:
	add	ebx, 1
	pop	esi
	mov	DWORD PTR _inMutex, ebx
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	pop	ebx
; Line 8082
	ret	0
$LN26@sqlite3Mal@2:
; Line 8079
	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 8081
	mov	eax, esi
$LN31@sqlite3Mal@2:
	pop	esi
$LN30@sqlite3Mal@2:
	pop	ebx
$LN1@sqlite3Mal@2:
; Line 8082
	ret	0
_sqlite3Malloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3StrDup
_TEXT	SEGMENT
_sqlite3StrDup PROC					; COMDAT
; _z$ = ebx
; Line 8145
	test	ebx, ebx
	jne	SHORT $LN2@sqlite3Str@4
	xor	eax, eax
; Line 8150
	ret	0
$LN2@sqlite3Str@4:
; Line 8146
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL5@sqlite3Str@4:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL5@sqlite3Str@4
	push	esi
	sub	eax, edx
	push	edi
	lea	edi, DWORD PTR [eax+1]
; Line 8147
	mov	ecx, edi
	call	_sqlite3MallocRaw
	mov	esi, eax
; Line 8148
	test	esi, esi
	je	SHORT $LN1@sqlite3Str@4
	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@sqlite3Str@4:
	pop	edi
; Line 8149
	mov	eax, esi
	pop	esi
; Line 8150
	ret	0
_sqlite3StrDup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3StrNDup
_TEXT	SEGMENT
_sqlite3StrNDup PROC					; COMDAT
; _z$ = ebx
; _n$ = edi
; Line 8153
	test	ebx, ebx
	jne	SHORT $LN2@sqlite3Str@5
	xor	eax, eax
; Line 8160
	ret	0
$LN2@sqlite3Str@5:
	push	esi
; Line 8154
	lea	ecx, DWORD PTR [edi+1]
	call	_sqlite3MallocRaw
	mov	esi, eax
; Line 8155
	test	esi, esi
	je	SHORT $LN1@sqlite3Str@5
; Line 8156
	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 8157
	mov	BYTE PTR [esi+edi], 0
$LN1@sqlite3Str@5:
; Line 8159
	mov	eax, esi
	pop	esi
; Line 8160
	ret	0
_sqlite3StrNDup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SetString
_TEXT	SEGMENT
_pz$ = 8						; size = 4
_sqlite3SetString PROC					; COMDAT
; Line 8169
	push	ebx
; Line 8178
	mov	ebx, DWORD PTR _pz$[esp+4]
	test	ebx, ebx
	push	ebp
	mov	ebp, DWORD PTR _pz$[esp+4]
	push	esi
	push	edi
	mov	edi, 1
	mov	eax, ebx
	je	SHORT $LN4@sqlite3Set
; Line 8176
	lea	ecx, DWORD PTR _pz$[esp+16]
	npad	5
$LL5@sqlite3Set:
; Line 8179
	lea	esi, DWORD PTR [eax+1]
$LL39@sqlite3Set:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL39@sqlite3Set
	sub	eax, esi
	add	ecx, 4
	add	edi, eax
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $LL5@sqlite3Set
$LN4@sqlite3Set:
; Line 8182
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	SHORT $LN11@sqlite3Set
	push	eax
	call	_free
	add	esp, 4
$LN11@sqlite3Set:
; Line 8183
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN41@sqlite3Set
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN17@sqlite3Set
	test	esi, esi
	jg	SHORT $LN41@sqlite3Set
$LN17@sqlite3Set:
	push	edi
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN41@sqlite3Set
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN27@sqlite3Set
	test	esi, esi
	jg	SHORT $LN41@sqlite3Set
$LN27@sqlite3Set:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN41@sqlite3Set:
; Line 8184
	test	eax, eax
	mov	edi, eax
	mov	DWORD PTR [ebp], eax
	je	SHORT $LN6@sqlite3Set
; Line 8189
	test	ebx, ebx
	mov	BYTE PTR [eax], 0
	mov	ecx, ebx
	je	SHORT $LN1@sqlite3Set
; Line 8187
	lea	ebp, DWORD PTR _pz$[esp+16]
$LL2@sqlite3Set:
; Line 8190
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL40@sqlite3Set:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL40@sqlite3Set
	sub	eax, esi
	mov	esi, eax
; Line 8191
	push	esi
	push	ecx
	push	edi
	call	_memcpy
	mov	ecx, DWORD PTR [ebp+4]
	add	ebp, 4
	add	esp, 12					; 0000000cH
; Line 8192
	add	edi, esi
	test	ecx, ecx
	jne	SHORT $LL2@sqlite3Set
$LN1@sqlite3Set:
; Line 8194
	mov	BYTE PTR [edi], 0
$LN6@sqlite3Set:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 8196
	ret	0
_sqlite3SetString ENDP
_TEXT	ENDS
PUBLIC	??_C@_01FGNFDNOH@?$CF?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@		; `string'
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
PUBLIC	??_C@_03EJEJBNFP@Inf?$AA@			; `string'
PUBLIC	??_C@_04BIDOCLEL@?$CLInf?$AA@			; `string'
PUBLIC	??_C@_04JHHONOOL@?9Inf?$AA@			; `string'
PUBLIC	__real@3e45798ee2308c3a
PUBLIC	__real@4197d78400000000
PUBLIC	__real@3949f623d5a8a733
PUBLIC	__real@4693b8b5b5056e17
PUBLIC	??_C@_03ICJPMMHB@NaN?$AA@			; `string'
PUBLIC	_fmt$GSCopy$
PUBLIC	__real@3fb999999999999a
PUBLIC	_ap$GSCopy$
PUBLIC	_arg$GSCopy$
PUBLIC	_func$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__aulldvrm:PROC
;	COMDAT ??_C@_01FGNFDNOH@?$CF?$AA@
CONST	SEGMENT
??_C@_01FGNFDNOH@?$CF?$AA@ DB '%', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@
CONST	SEGMENT
??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@ DB '(NULL)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EJEJBNFP@Inf?$AA@
CONST	SEGMENT
??_C@_03EJEJBNFP@Inf?$AA@ DB 'Inf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BIDOCLEL@?$CLInf?$AA@
CONST	SEGMENT
??_C@_04BIDOCLEL@?$CLInf?$AA@ DB '+Inf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JHHONOOL@?9Inf?$AA@
CONST	SEGMENT
??_C@_04JHHONOOL@?9Inf?$AA@ DB '-Inf', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3e45798ee2308c3a
CONST	SEGMENT
__real@3e45798ee2308c3a DQ 03e45798ee2308c3ar	; 1e-008
CONST	ENDS
;	COMDAT __real@4197d78400000000
CONST	SEGMENT
__real@4197d78400000000 DQ 04197d78400000000r	; 1e+008
CONST	ENDS
;	COMDAT __real@3949f623d5a8a733
CONST	SEGMENT
__real@3949f623d5a8a733 DQ 03949f623d5a8a733r	; 1e-032
CONST	ENDS
;	COMDAT __real@4693b8b5b5056e17
CONST	SEGMENT
__real@4693b8b5b5056e17 DQ 04693b8b5b5056e17r	; 1e+032
CONST	ENDS
;	COMDAT ??_C@_03ICJPMMHB@NaN?$AA@
CONST	SEGMENT
??_C@_03ICJPMMHB@NaN?$AA@ DB 'NaN', 00H			; `string'
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _vxprintf
_TEXT	SEGMENT
_prefix$ = -426						; size = 1
_flag_plussign$ = -426					; size = 1
_xtype$ = -425						; size = 1
_ap$GSCopy$ = -424					; size = 4
_flag_rtz$ = -420					; size = 1
_flag_blanksign$ = -420					; size = 1
_flag_leftjustify$ = -419				; size = 1
_flag_dp$ = -418					; size = 1
_flag_long$ = -418					; size = 1
_flag_alternateform$ = -417				; size = 1
_precision$ = -416					; size = 4
_bufpt$ = -412						; size = 4
_flag_zeropad$ = -406					; size = 1
_flag_altform2$ = -405					; size = 1
_fmt$GSCopy$ = -404					; size = 4
_width$ = -400						; size = 4
tv2357 = -396						; size = 8
_digit$110070 = -396					; size = 4
_digit$110063 = -396					; size = 4
_length$ = -396						; size = 4
_count$ = -388						; size = 4
_arg$GSCopy$ = -384					; size = 4
_func$GSCopy$ = -380					; size = 4
_flag_exp$ = -373					; size = 1
_infop$ = -372						; size = 4
_zExtra$ = -368						; size = 4
tv1048 = -364						; size = 8
_buf$ = -356						; size = 350
__$ArrayPad$ = -4					; size = 4
_arg$ = 8						; size = 4
_useExtended$ = 12					; size = 4
_fmt$ = 16						; size = 4
_vxprintf PROC						; COMDAT
; _func$ = edx
; _ap$ = ecx
; Line 8465
	sub	esp, 428				; 000001acH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+428], eax
	mov	eax, DWORD PTR _arg$[esp+424]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _fmt$[esp+432]
	push	esi
	push	edi
; Line 8502
	xor	edi, edi
	push	edi
	mov	esi, edx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	eax
; Line 8503
	mov	DWORD PTR _func$GSCopy$[esp+456], esi
	mov	DWORD PTR _arg$GSCopy$[esp+456], eax
	mov	DWORD PTR _ap$GSCopy$[esp+456], ecx
	call	esi
; Line 8505
	movsx	eax, BYTE PTR [ebp]
	add	esp, 12					; 0000000cH
	cmp	eax, edi
	mov	DWORD PTR _length$[esp+444], edi
	mov	DWORD PTR _count$[esp+444], edi
	mov	DWORD PTR _bufpt$[esp+444], edi
	je	$LN358@vxprintf
	fld	QWORD PTR __real@3fb999999999999a
$LN346@vxprintf:
; Line 8506
	cmp	eax, 37					; 00000025H
	je	SHORT $LN334@vxprintf
; Line 8510
	movsx	edi, BYTE PTR [ebp+1]
	fstp	ST(0)
	mov	eax, ebp
	add	ebp, 1
	cmp	edi, 37					; 00000025H
	mov	DWORD PTR _bufpt$[esp+444], eax
	mov	ebx, 1
	je	SHORT $LN190@vxprintf
	npad	2
$LL191@vxprintf:
	test	edi, edi
	je	SHORT $LN190@vxprintf
	movsx	edi, BYTE PTR [ebp+1]
	add	ebp, 1
	add	ebx, 1
	cmp	edi, 37					; 00000025H
	jne	SHORT $LL191@vxprintf
$LN190@vxprintf:
; Line 8511
	mov	edx, DWORD PTR _arg$GSCopy$[esp+444]
	push	ebx
	push	eax
	push	edx
	call	esi
; Line 8512
	add	DWORD PTR _count$[esp+456], ebx
	add	esp, 12					; 0000000cH
; Line 8513
	test	edi, edi
	je	$LN358@vxprintf
	fld	QWORD PTR __real@3fb999999999999a
$LN334@vxprintf:
; Line 8515
	movsx	eax, BYTE PTR [ebp+1]
	add	ebp, 1
	test	eax, eax
	je	$LN395@vxprintf
; Line 8523
	mov	BYTE PTR _flag_zeropad$[esp+444], 0
	mov	BYTE PTR _flag_altform2$[esp+444], 0
	mov	BYTE PTR _flag_alternateform$[esp+444], 0
	mov	BYTE PTR _flag_blanksign$[esp+444], 0
	mov	BYTE PTR _flag_plussign$[esp+444], 0
	mov	BYTE PTR _flag_leftjustify$[esp+444], 0
$LN187@vxprintf:
; Line 8526
	lea	ecx, DWORD PTR [eax-32]
	cmp	ecx, 16					; 00000010H
	ja	SHORT $LN374@vxprintf
	movzx	ecx, BYTE PTR $LN313@vxprintf[ecx]
	jmp	DWORD PTR $LN808@vxprintf[ecx*4]
$LN182@vxprintf:
; Line 8527
	mov	BYTE PTR _flag_leftjustify$[esp+444], 1
	jmp	SHORT $LN186@vxprintf
$LN181@vxprintf:
; Line 8528
	mov	BYTE PTR _flag_plussign$[esp+444], 1
	jmp	SHORT $LN186@vxprintf
$LN180@vxprintf:
; Line 8529
	mov	BYTE PTR _flag_blanksign$[esp+444], 1
	jmp	SHORT $LN186@vxprintf
$LN179@vxprintf:
; Line 8530
	mov	BYTE PTR _flag_alternateform$[esp+444], 1
	jmp	SHORT $LN186@vxprintf
$LN178@vxprintf:
; Line 8531
	mov	BYTE PTR _flag_altform2$[esp+444], 1
	jmp	SHORT $LN186@vxprintf
$LN177@vxprintf:
; Line 8532
	mov	BYTE PTR _flag_zeropad$[esp+444], 1
$LN186@vxprintf:
; Line 8535
	movsx	eax, BYTE PTR [ebp+1]
	add	ebp, 1
	test	eax, eax
	jne	SHORT $LN187@vxprintf
$LN374@vxprintf:
; Line 8537
	xor	ecx, ecx
; Line 8538
	cmp	eax, 42					; 0000002aH
	mov	DWORD PTR _fmt$GSCopy$[esp+444], ebp
	mov	DWORD PTR _width$[esp+444], ecx
	jne	SHORT $LN220@vxprintf
; Line 8539
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
	mov	ecx, DWORD PTR [eax]
	add	eax, 4
; Line 8540
	test	ecx, ecx
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
	mov	DWORD PTR _width$[esp+444], ecx
	jge	SHORT $LN173@vxprintf
; Line 8542
	neg	ecx
	mov	BYTE PTR _flag_leftjustify$[esp+444], 1
	mov	DWORD PTR _width$[esp+444], ecx
$LN173@vxprintf:
; Line 8544
	movsx	eax, BYTE PTR [ebp+1]
	add	ebp, 1
; Line 8545
	jmp	SHORT $LN802@vxprintf
$LN220@vxprintf:
; Line 8546
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN336@vxprintf
$LN171@vxprintf:
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN376@vxprintf
; Line 8547
	lea	edx, DWORD PTR [ecx+ecx*4]
; Line 8548
	add	ebp, 1
	lea	ecx, DWORD PTR [eax+edx*2-48]
	movsx	eax, BYTE PTR [ebp]
	cmp	eax, 48					; 00000030H
	jge	SHORT $LN171@vxprintf
$LN376@vxprintf:
; Line 8547
	mov	DWORD PTR _width$[esp+444], ecx
$LN802@vxprintf:
; Line 8551
	cmp	ecx, 340				; 00000154H
	mov	DWORD PTR _fmt$GSCopy$[esp+444], ebp
	jle	SHORT $LN336@vxprintf
; Line 8552
	mov	DWORD PTR _width$[esp+444], 340		; 00000154H
$LN336@vxprintf:
; Line 8555
	cmp	eax, 46					; 0000002eH
	jne	$LN168@vxprintf
; Line 8557
	movsx	eax, BYTE PTR [ebp+1]
	add	ebp, 1
	xor	edx, edx
; Line 8558
	cmp	eax, 42					; 0000002aH
	mov	DWORD PTR _precision$[esp+444], edx
	mov	DWORD PTR _fmt$GSCopy$[esp+444], ebp
	jne	SHORT $LN221@vxprintf
; Line 8559
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
	mov	edx, DWORD PTR [eax]
	add	eax, 4
; Line 8560
	test	edx, edx
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
	mov	DWORD PTR _precision$[esp+444], edx
	jge	SHORT $LN166@vxprintf
	neg	edx
	mov	DWORD PTR _precision$[esp+444], edx
$LN166@vxprintf:
; Line 8561
	movsx	eax, BYTE PTR [ebp+1]
	add	ebp, 1
; Line 8562
	jmp	SHORT $LN803@vxprintf
$LN221@vxprintf:
; Line 8563
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN162@vxprintf
$LN164@vxprintf:
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN377@vxprintf
; Line 8564
	lea	ecx, DWORD PTR [edx+edx*4]
; Line 8565
	add	ebp, 1
	lea	edx, DWORD PTR [eax+ecx*2-48]
	movsx	eax, BYTE PTR [ebp]
	cmp	eax, 48					; 00000030H
	jge	SHORT $LN164@vxprintf
$LN377@vxprintf:
; Line 8564
	mov	DWORD PTR _precision$[esp+444], edx
$LN803@vxprintf:
; Line 8565
	mov	DWORD PTR _fmt$GSCopy$[esp+444], ebp
$LN162@vxprintf:
; Line 8572
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN161@vxprintf
; Line 8574
	movsx	eax, BYTE PTR [ebp+1]
	add	ebp, 1
; Line 8575
	cmp	eax, 108				; 0000006cH
	mov	BYTE PTR _flag_long$[esp+444], 1
	mov	DWORD PTR _fmt$GSCopy$[esp+444], ebp
	jne	SHORT $LN160@vxprintf
; Line 8577
	movsx	eax, BYTE PTR [ebp+1]
	add	ebp, 1
	mov	bl, 1
	mov	DWORD PTR _fmt$GSCopy$[esp+444], ebp
; Line 8578
	jmp	SHORT $LN158@vxprintf
$LN168@vxprintf:
; Line 8569
	or	edx, -1
	mov	DWORD PTR _precision$[esp+444], edx
	jmp	SHORT $LN162@vxprintf
$LN161@vxprintf:
; Line 8582
	mov	BYTE PTR _flag_long$[esp+444], 0
$LN160@vxprintf:
	xor	bl, bl
$LN158@vxprintf:
; Line 8585
	xor	esi, esi
; Line 8586
	xor	edi, edi
	mov	DWORD PTR _infop$[esp+444], esi
	xor	ecx, ecx
$LN157@vxprintf:
; Line 8587
	movsx	ebp, BYTE PTR _fmtinfo[ecx]
	cmp	eax, ebp
	je	SHORT $LN243@vxprintf
	add	ecx, 6
	add	edi, 1
	cmp	ecx, 126				; 0000007eH
	jb	SHORT $LN157@vxprintf
; Line 8881
	jmp	SHORT $LN151@vxprintf
$LN243@vxprintf:
; Line 8589
	cmp	DWORD PTR _useExtended$[esp+440], 0
	lea	esi, DWORD PTR [edi+edi*2]
	lea	esi, DWORD PTR _fmtinfo[esi*2]
	mov	DWORD PTR _infop$[esp+444], esi
	jne	SHORT $LN337@vxprintf
	test	BYTE PTR [esi+2], 2
	jne	$LN789@vxprintf
$LN337@vxprintf:
; Line 8590
	mov	al, BYTE PTR [esi+3]
	mov	BYTE PTR _xtype$[esp+444], al
$LN151@vxprintf:
; Line 8598
	test	esi, esi
	mov	DWORD PTR _zExtra$[esp+444], 0
	je	$LN789@vxprintf
; Line 8604
	cmp	edx, 310				; 00000136H
	jle	SHORT $LN149@vxprintf
	test	BYTE PTR [esi+2], 4
	jne	SHORT $LN149@vxprintf
; Line 8605
	mov	DWORD PTR _precision$[esp+444], 310	; 00000136H
$LN149@vxprintf:
; Line 8629
	movzx	eax, BYTE PTR _xtype$[esp+444]
	add	eax, -1
	cmp	eax, 14					; 0000000eH
	ja	$LN353@vxprintf
	jmp	DWORD PTR $LN809@vxprintf[eax*4]
$LN146@vxprintf:
; Line 8631
	xor	bl, bl
; Line 8632
	mov	al, 1
	jmp	SHORT $LN145@vxprintf
$LN363@vxprintf:
	mov	al, BYTE PTR _flag_long$[esp+444]
$LN145@vxprintf:
; Line 8635
	mov	ecx, DWORD PTR _infop$[esp+444]
	test	BYTE PTR [ecx+2], 1
	je	SHORT $LN144@vxprintf
; Line 8637
	test	bl, bl
	je	SHORT $LN143@vxprintf
	mov	ecx, DWORD PTR _ap$GSCopy$[esp+444]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]
	add	ecx, 8
	mov	DWORD PTR _ap$GSCopy$[esp+444], ecx
	jmp	SHORT $LN140@vxprintf
$LN143@vxprintf:
; Line 8638
	test	al, al
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
; Line 8639
	add	eax, 4
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
	mov	eax, DWORD PTR [eax-4]
	cdq
$LN140@vxprintf:
; Line 8640
	test	edx, edx
	jg	SHORT $LN139@vxprintf
	jl	SHORT $LN314@vxprintf
	test	eax, eax
	jae	SHORT $LN139@vxprintf
$LN314@vxprintf:
; Line 8641
	neg	eax
	adc	edx, 0
	neg	edx
	mov	esi, eax
	mov	ecx, edx
; Line 8642
	mov	BYTE PTR _prefix$[esp+444], 45		; 0000002dH
; Line 8643
	jmp	SHORT $LN133@vxprintf
$LN139@vxprintf:
; Line 8645
	cmp	BYTE PTR _flag_plussign$[esp+444], 0
	mov	esi, eax
	mov	ecx, edx
	je	SHORT $LN137@vxprintf
	mov	BYTE PTR _prefix$[esp+444], 43		; 0000002bH
	jmp	SHORT $LN133@vxprintf
$LN137@vxprintf:
; Line 8646
	mov	al, BYTE PTR _flag_blanksign$[esp+444]
	neg	al
	sbb	al, al
	and	eax, 32					; 00000020H
	mov	BYTE PTR _prefix$[esp+444], al
; Line 8649
	jmp	SHORT $LN133@vxprintf
$LN144@vxprintf:
; Line 8650
	test	bl, bl
	je	SHORT $LN132@vxprintf
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	add	eax, 8
	jmp	SHORT $LN804@vxprintf
$LN132@vxprintf:
; Line 8651
	test	al, al
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
; Line 8652
	mov	esi, DWORD PTR [eax]
	add	eax, 4
	xor	ecx, ecx
$LN804@vxprintf:
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
; Line 8653
	mov	BYTE PTR _prefix$[esp+444], 0
$LN133@vxprintf:
; Line 8655
	mov	edx, esi
	or	edx, ecx
	jne	SHORT $LN128@vxprintf
	mov	BYTE PTR _flag_alternateform$[esp+444], dl
$LN128@vxprintf:
; Line 8656
	cmp	BYTE PTR _flag_zeropad$[esp+444], 0
	je	SHORT $LN127@vxprintf
	mov	eax, DWORD PTR _width$[esp+444]
	xor	edx, edx
	cmp	BYTE PTR _prefix$[esp+444], dl
	setne	dl
	sub	eax, edx
	cmp	DWORD PTR _precision$[esp+444], eax
	jge	SHORT $LN127@vxprintf
; Line 8657
	mov	DWORD PTR _precision$[esp+444], eax
$LN127@vxprintf:
; Line 8659
	lea	eax, DWORD PTR _buf$[esp+793]
	mov	DWORD PTR _bufpt$[esp+444], eax
; Line 8663
	mov	eax, DWORD PTR _infop$[esp+444]
	movzx	edi, BYTE PTR [eax+4]
; Line 8664
	movzx	eax, BYTE PTR [eax+1]
; Line 8668
	cdq
	add	edi, OFFSET _aDigits
	mov	ebp, eax
	mov	DWORD PTR tv1048[esp+448], edx
$LN126@vxprintf:
	mov	edx, DWORD PTR tv1048[esp+448]
	sub	DWORD PTR _bufpt$[esp+444], 1
	push	edx
	push	ebp
	push	ecx
	push	esi
	call	__aulldvrm
	mov	cl, BYTE PTR [ecx+edi]
	mov	esi, DWORD PTR _bufpt$[esp+444]
	mov	BYTE PTR [esi], cl
	mov	ecx, edx
	test	ecx, ecx
	mov	DWORD PTR tv2357[esp+448], ebx
	mov	esi, eax
	ja	SHORT $LN126@vxprintf
	jb	SHORT $LN315@vxprintf
	test	esi, esi
	ja	SHORT $LN126@vxprintf
$LN315@vxprintf:
; Line 8671
	mov	eax, DWORD PTR _precision$[esp+444]
	lea	edx, DWORD PTR _buf$[esp+793]
	sub	eax, edx
	mov	edx, DWORD PTR _bufpt$[esp+444]
	add	eax, edx
	test	eax, eax
	jle	SHORT $LN121@vxprintf
$LN123@vxprintf:
; Line 8672
	sub	edx, 1
	sub	eax, 1
	test	eax, eax
	mov	BYTE PTR [edx], 48			; 00000030H
	jg	SHORT $LN123@vxprintf
	mov	DWORD PTR _bufpt$[esp+444], edx
$LN121@vxprintf:
; Line 8674
	mov	al, BYTE PTR _prefix$[esp+444]
	test	al, al
	je	SHORT $LN339@vxprintf
	sub	edx, 1
	mov	DWORD PTR _bufpt$[esp+444], edx
	mov	BYTE PTR [edx], al
$LN339@vxprintf:
; Line 8675
	cmp	BYTE PTR _flag_alternateform$[esp+444], 0
	je	SHORT $LN115@vxprintf
	mov	eax, DWORD PTR _infop$[esp+444]
	mov	al, BYTE PTR [eax+5]
	test	al, al
	je	SHORT $LN115@vxprintf
; Line 8678
	movzx	eax, al
	add	eax, OFFSET _aPrefix
; Line 8679
	mov	cl, BYTE PTR [eax]
	cmp	BYTE PTR [edx], cl
	je	SHORT $LN115@vxprintf
; Line 8680
	test	cl, cl
	je	SHORT $LN115@vxprintf
$LN117@vxprintf:
	sub	edx, 1
	add	eax, 1
	mov	BYTE PTR [edx], cl
	mov	cl, BYTE PTR [eax]
	test	cl, cl
	jne	SHORT $LN117@vxprintf
	mov	DWORD PTR _bufpt$[esp+444], edx
$LN115@vxprintf:
; Line 8683
	lea	eax, DWORD PTR _buf$[esp+793]
	sub	eax, edx
	mov	DWORD PTR _length$[esp+444], eax
; Line 8684
	jmp	$LN353@vxprintf
$LN114@vxprintf:
; Line 8688
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
; Line 8690
	mov	edx, DWORD PTR _precision$[esp+444]
	fld	QWORD PTR [eax]
	add	eax, 8
	test	edx, edx
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
	jge	SHORT $LN113@vxprintf
	mov	edx, 6
; Line 8691
	jmp	SHORT $LN805@vxprintf
$LN113@vxprintf:
	cmp	edx, 165				; 000000a5H
	jle	SHORT $LN112@vxprintf
	mov	edx, 165				; 000000a5H
$LN805@vxprintf:
	mov	DWORD PTR _precision$[esp+444], edx
$LN112@vxprintf:
; Line 8692
	fldz
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN111@vxprintf
; Line 8693
	fxch	ST(1)
; Line 8694
	mov	BYTE PTR _prefix$[esp+444], 45		; 0000002dH
	fchs
; Line 8695
	jmp	SHORT $LN107@vxprintf
$LN111@vxprintf:
; Line 8696
	cmp	BYTE PTR _flag_plussign$[esp+444], 0
	je	SHORT $LN109@vxprintf
	mov	BYTE PTR _prefix$[esp+444], 43		; 0000002bH
	jmp	SHORT $LN720@vxprintf
$LN109@vxprintf:
; Line 8697
	mov	al, BYTE PTR _flag_blanksign$[esp+444]
	neg	al
	sbb	al, al
	and	eax, 32					; 00000020H
	mov	BYTE PTR _prefix$[esp+444], al
$LN720@vxprintf:
; Line 8696
	fxch	ST(1)
$LN107@vxprintf:
; Line 8700
	mov	bl, BYTE PTR _xtype$[esp+444]
	cmp	bl, 4
	jne	SHORT $LN342@vxprintf
	test	edx, edx
	jle	SHORT $LN342@vxprintf
	sub	edx, 1
	mov	DWORD PTR _precision$[esp+444], edx
$LN342@vxprintf:
; Line 8706
	cmp	edx, 8
	fld	QWORD PTR __real@3fe0000000000000
	mov	eax, edx
	jl	SHORT $LN365@vxprintf
	lea	ecx, DWORD PTR [edx-8]
	shr	ecx, 3
	add	ecx, 1
	lea	eax, DWORD PTR [ecx*8]
	mov	esi, eax
	mov	eax, edx
	sub	eax, esi
$LN276@vxprintf:
	sub	ecx, 1
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	jne	SHORT $LN276@vxprintf
$LN365@vxprintf:
	test	eax, eax
	jle	SHORT $LN369@vxprintf
$LC104@vxprintf:
	sub	eax, 1
	fmul	ST(0), ST(3)
	test	eax, eax
	jg	SHORT $LC104@vxprintf
$LN369@vxprintf:
; Line 8708
	cmp	bl, 2
	jne	SHORT $LN101@vxprintf
	fld	ST(0)
	faddp	ST(2), ST(0)
$LN101@vxprintf:
; Line 8711
	fld	ST(1)
	xor	ebx, ebx
	fucomp	ST(2)
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN100@vxprintf
	fstp	ST(0)
; Line 8712
	mov	DWORD PTR _bufpt$[esp+444], OFFSET ??_C@_03ICJPMMHB@NaN?$AA@
	fstp	ST(1)
; Line 8713
	mov	DWORD PTR _length$[esp+444], 3
	fstp	ST(0)
; Line 8714
	jmp	$LN353@vxprintf
$LN100@vxprintf:
; Line 8716
	fxch	ST(2)
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	$LN333@vxprintf
; Line 8717
	fld	QWORD PTR __real@4693b8b5b5056e17
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	SHORT $LN98@vxprintf
$LN554@vxprintf:
	fstp	ST(0)
	jmp	SHORT $LN347@vxprintf
$LN560@vxprintf:
	fxch	ST(1)
$LN98@vxprintf:
	cmp	ebx, 350				; 0000015eH
	jg	SHORT $LN554@vxprintf
	fxch	ST(1)
	add	ebx, 32					; 00000020H
	fmul	QWORD PTR __real@3949f623d5a8a733
	fcom	ST(1)
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN560@vxprintf
	fstp	ST(1)
$LN347@vxprintf:
; Line 8718
	fld	QWORD PTR __real@4197d78400000000
	fcom	ST(1)
	fnstsw	ax
	fld	QWORD PTR __real@3e45798ee2308c3a
	test	ah, 65					; 00000041H
	jp	SHORT $LN229@vxprintf
$LN96@vxprintf:
	cmp	ebx, 350				; 0000015eH
	jg	SHORT $LN229@vxprintf
	fmul	ST(2), ST(0)
	add	ebx, 8
	fxch	ST(2)
	fcom	ST(1)
	fnstsw	ax
	fxch	ST(2)
	test	ah, 1
	je	SHORT $LN96@vxprintf
$LN229@vxprintf:
; Line 8719
	fld	QWORD PTR __real@4024000000000000
	fcom	ST(3)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN370@vxprintf
$LN94@vxprintf:
	cmp	ebx, 350				; 0000015eH
	jg	SHORT $LN370@vxprintf
	fxch	ST(3)
	add	ebx, 1
	fmul	ST(0), ST(5)
	fcom	ST(3)
	fnstsw	ax
	fxch	ST(3)
	test	ah, 1
	je	SHORT $LN94@vxprintf
$LN370@vxprintf:
; Line 8720
	fxch	ST(3)
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN583@vxprintf
$LN92@vxprintf:
	cmp	ebx, -350				; fffffea2H
	jl	SHORT $LN583@vxprintf
	fmul	ST(0), ST(2)
	sub	ebx, 8
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN92@vxprintf
$LN583@vxprintf:
	fstp	ST(1)
	fstp	ST(1)
; Line 8721
	fld1
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN90@vxprintf
$LN584@vxprintf:
	fstp	ST(0)
	jmp	SHORT $LN366@vxprintf
$LN590@vxprintf:
	fxch	ST(1)
$LN90@vxprintf:
	cmp	ebx, -350				; fffffea2H
	jl	SHORT $LN584@vxprintf
	fxch	ST(1)
	sub	ebx, 1
	fmul	ST(0), ST(2)
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN590@vxprintf
	fstp	ST(1)
$LN366@vxprintf:
; Line 8722
	cmp	ebx, 350				; 0000015eH
	jg	SHORT $LN594@vxprintf
	cmp	ebx, -350				; fffffea2H
	jge	SHORT $LN88@vxprintf
$LN594@vxprintf:
; Line 8723
	mov	al, BYTE PTR _prefix$[esp+444]
	fstp	ST(2)
	cmp	al, 45					; 0000002dH
	fstp	ST(1)
	fstp	ST(0)
	jne	SHORT $LN86@vxprintf
; Line 8724
	mov	eax, OFFSET ??_C@_04JHHONOOL@?9Inf?$AA@
	jmp	SHORT $LN806@vxprintf
$LN86@vxprintf:
; Line 8725
	cmp	al, 43					; 0000002bH
; Line 8726
	mov	eax, OFFSET ??_C@_04BIDOCLEL@?$CLInf?$AA@
	je	SHORT $LN806@vxprintf
; Line 8728
	mov	eax, OFFSET ??_C@_03EJEJBNFP@Inf?$AA@
$LN806@vxprintf:
	mov	DWORD PTR _bufpt$[esp+444], eax
; Line 8730
	lea	edx, DWORD PTR [eax+1]
$LN316@vxprintf:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LN316@vxprintf
	sub	eax, edx
	mov	DWORD PTR _length$[esp+444], eax
; Line 8731
	jmp	$LN353@vxprintf
$LN333@vxprintf:
	fld	QWORD PTR __real@4024000000000000
	fxch	ST(1)
$LN88@vxprintf:
; Line 8739
	mov	cl, BYTE PTR _xtype$[esp+444]
	cmp	cl, 3
	sete	BYTE PTR _flag_exp$[esp+444]
; Line 8740
	cmp	cl, 2
	lea	esi, DWORD PTR _buf$[esp+444]
	je	SHORT $LN597@vxprintf
; Line 8741
	faddp	ST(2), ST(0)
; Line 8742
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN81@vxprintf
	fxch	ST(1)
	add	ebx, 1
	fmul	ST(0), ST(2)
	fxch	ST(1)
$LN81@vxprintf:
; Line 8744
	cmp	cl, 4
	jne	SHORT $LN80@vxprintf
; Line 8745
	cmp	BYTE PTR _flag_alternateform$[esp+444], 0
	sete	BYTE PTR _flag_rtz$[esp+444]
; Line 8746
	cmp	ebx, -4					; fffffffcH
	jl	SHORT $LN78@vxprintf
	cmp	ebx, edx
	jg	SHORT $LN78@vxprintf
; Line 8749
	sub	edx, ebx
	mov	DWORD PTR _precision$[esp+444], edx
; Line 8750
	mov	BYTE PTR _xtype$[esp+444], 2
$LN352@vxprintf:
; Line 8758
	mov	edi, ebx
$LN74@vxprintf:
; Line 8763
	mov	al, BYTE PTR _prefix$[esp+444]
	xor	ebp, ebp
	test	edx, edx
	setg	cl
	or	cl, BYTE PTR _flag_altform2$[esp+444]
	or	cl, BYTE PTR _flag_alternateform$[esp+444]
	test	al, al
	mov	BYTE PTR _flag_dp$[esp+444], cl
	je	SHORT $LN73@vxprintf
; Line 8764
	mov	BYTE PTR _buf$[esp+444], al
	lea	esi, DWORD PTR _buf$[esp+445]
$LN73@vxprintf:
; Line 8767
	test	edi, edi
	jge	SHORT $LN378@vxprintf
; Line 8768
	mov	BYTE PTR [esi], 48			; 00000030H
	add	esi, 1
; Line 8769
	jmp	SHORT $LN68@vxprintf
$LN597@vxprintf:
; Line 8742
	fstp	ST(2)
; Line 8740
	jmp	SHORT $LN81@vxprintf
$LN78@vxprintf:
; Line 8747
	mov	BYTE PTR _xtype$[esp+444], 3
; Line 8756
	xor	edi, edi
; Line 8757
	jmp	SHORT $LN74@vxprintf
$LN80@vxprintf:
; Line 8755
	cmp	cl, 3
	mov	BYTE PTR _flag_rtz$[esp+444], 0
	jne	SHORT $LN352@vxprintf
; Line 8756
	xor	edi, edi
; Line 8757
	jmp	SHORT $LN74@vxprintf
$LN378@vxprintf:
; Line 8771
	mov	eax, ebp
	add	ebp, 1
	cmp	eax, 16					; 00000010H
	jl	SHORT $LN206@vxprintf
	mov	eax, 48					; 00000030H
	jmp	SHORT $LN207@vxprintf
$LN206@vxprintf:
	fld	ST(1)
	call	__ftol2_sse
	mov	cl, BYTE PTR _flag_dp$[esp+444]
	mov	edx, DWORD PTR _precision$[esp+444]
	mov	DWORD PTR _digit$110063[esp+444], eax
	fild	DWORD PTR _digit$110063[esp+444]
	add	eax, 48					; 00000030H
	fsubp	ST(2), ST(0)
	fmul	ST(1), ST(0)
$LN207@vxprintf:
	mov	BYTE PTR [esi], al
	add	esi, 1
	sub	edi, 1
	jns	SHORT $LN378@vxprintf
$LN68@vxprintf:
; Line 8775
	test	cl, cl
	je	SHORT $LN367@vxprintf
; Line 8776
	mov	BYTE PTR [esi], 46			; 0000002eH
	add	esi, 1
$LN367@vxprintf:
; Line 8780
	add	edi, 1
	jns	SHORT $LN234@vxprintf
$LN379@vxprintf:
	test	edx, edx
	jle	SHORT $LN699@vxprintf
; Line 8781
	mov	BYTE PTR [esi], 48			; 00000030H
	add	esi, 1
	sub	edx, 1
	add	edi, 1
	js	SHORT $LN379@vxprintf
$LN234@vxprintf:
; Line 8784
	test	edx, edx
	jle	SHORT $LN699@vxprintf
$LN63@vxprintf:
; Line 8785
	mov	eax, ebp
	sub	edx, 1
	add	ebp, 1
	cmp	eax, 16					; 00000010H
	mov	DWORD PTR _precision$[esp+444], edx
	jl	SHORT $LN209@vxprintf
	mov	eax, 48					; 00000030H
	jmp	SHORT $LN210@vxprintf
$LN209@vxprintf:
	fld	ST(1)
	call	__ftol2_sse
	mov	cl, BYTE PTR _flag_dp$[esp+444]
	mov	edx, DWORD PTR _precision$[esp+444]
	mov	DWORD PTR _digit$110070[esp+444], eax
	fild	DWORD PTR _digit$110070[esp+444]
	add	eax, 48					; 00000030H
	fsubp	ST(2), ST(0)
	fmul	ST(1), ST(0)
$LN210@vxprintf:
	mov	BYTE PTR [esi], al
	add	esi, 1
	test	edx, edx
	jg	SHORT $LN63@vxprintf
$LN699@vxprintf:
; Line 8788
	cmp	BYTE PTR _flag_rtz$[esp+444], 0
	fstp	ST(1)
	fstp	ST(0)
	je	SHORT $LN361@vxprintf
	test	cl, cl
	je	SHORT $LN361@vxprintf
; Line 8789
	cmp	BYTE PTR [esi-1], 48			; 00000030H
	jne	SHORT $LN59@vxprintf
$LN60@vxprintf:
	add	esi, -1
	mov	BYTE PTR [esi], 0
	cmp	BYTE PTR [esi-1], 48			; 00000030H
	je	SHORT $LN60@vxprintf
$LN59@vxprintf:
; Line 8791
	cmp	BYTE PTR [esi-1], 46			; 0000002eH
	jne	SHORT $LN361@vxprintf
; Line 8792
	cmp	BYTE PTR _flag_altform2$[esp+444], 0
	je	SHORT $LN57@vxprintf
; Line 8793
	mov	BYTE PTR [esi], 48			; 00000030H
	add	esi, 1
; Line 8794
	jmp	SHORT $LN361@vxprintf
$LN57@vxprintf:
; Line 8791
	add	esi, -1
; Line 8795
	mov	BYTE PTR [esi], 0
$LN361@vxprintf:
; Line 8800
	cmp	BYTE PTR _flag_exp$[esp+444], 0
	jne	SHORT $LN362@vxprintf
	cmp	BYTE PTR _xtype$[esp+444], 3
	jne	SHORT $LN55@vxprintf
	test	ebx, ebx
	je	SHORT $LN55@vxprintf
$LN362@vxprintf:
; Line 8801
	mov	ecx, DWORD PTR _infop$[esp+444]
	movzx	edx, BYTE PTR [ecx+4]
	mov	al, BYTE PTR _aDigits[edx]
	mov	BYTE PTR [esi], al
	add	esi, 1
; Line 8802
	test	ebx, ebx
	jge	SHORT $LN53@vxprintf
; Line 8803
	mov	BYTE PTR [esi], 45			; 0000002dH
	add	esi, 1
	neg	ebx
; Line 8804
	jmp	SHORT $LN52@vxprintf
$LN53@vxprintf:
; Line 8805
	mov	BYTE PTR [esi], 43			; 0000002bH
	add	esi, 1
$LN52@vxprintf:
; Line 8807
	cmp	ebx, 100				; 00000064H
	jl	SHORT $LN360@vxprintf
; Line 8808
	mov	eax, 1374389535				; 51eb851fH
	imul	ebx
	sar	edx, 5
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	cl, al
; Line 8809
	imul	eax, -100				; ffffff9cH
	add	cl, 48					; 00000030H
	mov	BYTE PTR [esi], cl
	add	esi, 1
	add	ebx, eax
$LN360@vxprintf:
; Line 8811
	mov	eax, 1717986919				; 66666667H
	imul	ebx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	dl, al
; Line 8812
	mov	cl, 10					; 0000000aH
	imul	cl
	add	dl, 48					; 00000030H
	mov	BYTE PTR [esi], dl
	sub	bl, al
	add	esi, 1
	add	bl, 48					; 00000030H
	mov	BYTE PTR [esi], bl
	add	esi, 1
$LN55@vxprintf:
; Line 8819
	lea	edx, DWORD PTR _buf$[esp+444]
	mov	BYTE PTR [esi], 0
	sub	esi, edx
; Line 8824
	cmp	BYTE PTR _flag_zeropad$[esp+444], 0
	mov	eax, edx
	mov	DWORD PTR _length$[esp+444], esi
	mov	DWORD PTR _bufpt$[esp+444], eax
	je	$LN353@vxprintf
	cmp	BYTE PTR _flag_leftjustify$[esp+444], 0
	jne	$LN355@vxprintf
	mov	ecx, esi
	cmp	ecx, DWORD PTR _width$[esp+444]
	jge	$LN354@vxprintf
; Line 8826
	mov	edi, DWORD PTR _width$[esp+444]
	mov	ecx, edi
	sub	ecx, esi
; Line 8827
	cmp	edi, ecx
	mov	eax, edi
	jl	SHORT $LN343@vxprintf
	mov	esi, edx
	sub	esi, ecx
$LN382@vxprintf:
; Line 8828
	mov	dl, BYTE PTR [esi+eax]
	mov	BYTE PTR _buf$[esp+eax+444], dl
	sub	eax, 1
	cmp	eax, ecx
	jge	SHORT $LN382@vxprintf
$LN343@vxprintf:
; Line 8830
	xor	eax, eax
	cmp	BYTE PTR _prefix$[esp+444], al
	setne	al
; Line 8831
	test	ecx, ecx
	je	SHORT $LN46@vxprintf
	push	ecx
	fstp	ST(0)
	lea	eax, DWORD PTR _buf$[esp+eax+448]
	push	48					; 00000030H
	push	eax
	call	_memset
	fld	QWORD PTR __real@3fb999999999999a
	add	esp, 12					; 0000000cH
$LN46@vxprintf:
; Line 8832
	mov	DWORD PTR _length$[esp+444], edi
; Line 8835
	jmp	$LN354@vxprintf
$LN44@vxprintf:
; Line 8837
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
	mov	ecx, DWORD PTR _count$[esp+444]
	add	eax, 4
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
	mov	eax, DWORD PTR [eax-4]
	mov	DWORD PTR [eax], ecx
; Line 8838
	xor	eax, eax
	mov	DWORD PTR _width$[esp+444], eax
	mov	DWORD PTR _length$[esp+444], eax
; Line 8839
	jmp	$LN353@vxprintf
$LN43@vxprintf:
; Line 8842
	lea	edx, DWORD PTR _buf$[esp+444]
	mov	BYTE PTR _buf$[esp+444], 37		; 00000025H
	mov	DWORD PTR _bufpt$[esp+444], edx
; Line 8843
	mov	DWORD PTR _length$[esp+444], 1
; Line 8844
	jmp	$LN353@vxprintf
$LN42@vxprintf:
; Line 8847
	cmp	BYTE PTR _xtype$[esp+444], 9
	jne	SHORT $LN198@vxprintf
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
	add	eax, 4
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
	mov	al, BYTE PTR [eax-4]
	jmp	SHORT $LN807@vxprintf
$LN198@vxprintf:
	mov	eax, DWORD PTR _fmt$GSCopy$[esp+444]
	add	eax, 1
	mov	DWORD PTR _fmt$GSCopy$[esp+444], eax
	mov	al, BYTE PTR [eax]
$LN807@vxprintf:
; Line 8848
	mov	esi, DWORD PTR _precision$[esp+444]
	test	esi, esi
	mov	BYTE PTR _buf$[esp+444], al
	movsx	eax, al
	jl	SHORT $LN41@vxprintf
; Line 8849
	cmp	esi, 1
	jle	SHORT $LN40@vxprintf
	lea	ecx, DWORD PTR [esi-1]
	fstp	ST(0)
	push	ecx
	push	eax
	lea	edx, DWORD PTR _buf$[esp+453]
	push	edx
	call	_memset
	fld	QWORD PTR __real@3fb999999999999a
	add	esp, 12					; 0000000cH
$LN40@vxprintf:
; Line 8854
	lea	eax, DWORD PTR _buf$[esp+444]
	mov	DWORD PTR _length$[esp+444], esi
	mov	DWORD PTR _bufpt$[esp+444], eax
; Line 8855
	jmp	$LN353@vxprintf
$LN41@vxprintf:
; Line 8854
	lea	eax, DWORD PTR _buf$[esp+444]
	mov	DWORD PTR _length$[esp+444], 1
	mov	DWORD PTR _bufpt$[esp+444], eax
; Line 8855
	jmp	$LN353@vxprintf
$LN36@vxprintf:
; Line 8858
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
	add	eax, 4
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
	mov	eax, DWORD PTR [eax-4]
; Line 8859
	test	eax, eax
	mov	DWORD PTR _bufpt$[esp+444], eax
	jne	SHORT $LN35@vxprintf
; Line 8860
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	DWORD PTR _bufpt$[esp+444], eax
	jmp	SHORT $LN33@vxprintf
$LN35@vxprintf:
; Line 8861
	cmp	BYTE PTR _xtype$[esp+444], 7
	jne	SHORT $LN33@vxprintf
; Line 8862
	mov	DWORD PTR _zExtra$[esp+444], eax
$LN33@vxprintf:
; Line 8864
	lea	edx, DWORD PTR [eax+1]
$LN383@vxprintf:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LN383@vxprintf
	sub	eax, edx
; Line 8865
	cmp	DWORD PTR _precision$[esp+444], 0
	mov	DWORD PTR _length$[esp+444], eax
	jl	$LN353@vxprintf
	mov	ecx, eax
	cmp	DWORD PTR _precision$[esp+444], ecx
	jge	$LN353@vxprintf
	mov	edx, DWORD PTR _precision$[esp+444]
	mov	DWORD PTR _length$[esp+444], edx
; Line 8866
	jmp	$LN353@vxprintf
$LN31@vxprintf:
; Line 8871
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
	mov	esi, DWORD PTR [eax]
	add	eax, 4
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
; Line 8872
	xor	eax, eax
	test	esi, esi
	sete	al
	mov	edi, eax
; Line 8873
	test	edi, edi
	je	SHORT $LN340@vxprintf
	cmp	BYTE PTR _xtype$[esp+444], 12		; 0000000cH
	mov	esi, OFFSET ??_C@_04HIBGFPH@NULL?$AA@
	je	SHORT $LN340@vxprintf
	mov	esi, OFFSET ??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@
$LN340@vxprintf:
; Line 8874
	movsx	eax, BYTE PTR [esi]
	xor	edx, edx
	xor	ecx, ecx
	test	eax, eax
	je	SHORT $LN341@vxprintf
$LN384@vxprintf:
; Line 8875
	cmp	eax, 39					; 00000027H
	jne	SHORT $LN28@vxprintf
	add	edx, 1
$LN28@vxprintf:
; Line 8874
	movsx	eax, BYTE PTR [ecx+esi+1]
	add	ecx, 1
	test	eax, eax
	jne	SHORT $LN384@vxprintf
$LN341@vxprintf:
; Line 8877
	test	edi, edi
	jne	SHORT $LN202@vxprintf
	cmp	BYTE PTR _xtype$[esp+444], 12		; 0000000cH
	jne	SHORT $LN202@vxprintf
	lea	ebx, DWORD PTR [edi+1]
	jmp	SHORT $LN203@vxprintf
$LN202@vxprintf:
	xor	ebx, ebx
$LN203@vxprintf:
; Line 8878
	lea	ecx, DWORD PTR [ecx+ebx*2]
	lea	edi, DWORD PTR [edx+ecx+1]
; Line 8879
	cmp	edi, 350				; 0000015eH
	jle	SHORT $LN25@vxprintf
	fstp	ST(0)
; Line 8880
	call	_sqlite3Malloc
; Line 8881
	test	eax, eax
	mov	DWORD PTR _zExtra$[esp+444], eax
	mov	edx, eax
	mov	DWORD PTR _bufpt$[esp+444], eax
	je	$LN247@vxprintf
; Line 8882
	fld	QWORD PTR __real@3fb999999999999a
	jmp	SHORT $LN23@vxprintf
$LN25@vxprintf:
; Line 8883
	lea	edx, DWORD PTR _buf$[esp+444]
	mov	DWORD PTR _bufpt$[esp+444], edx
$LN23@vxprintf:
; Line 8885
	xor	eax, eax
; Line 8886
	test	ebx, ebx
	je	SHORT $LN371@vxprintf
	mov	BYTE PTR [edx], 39			; 00000027H
	mov	eax, 1
$LN371@vxprintf:
; Line 8887
	movsx	ecx, BYTE PTR [esi]
	test	ecx, ecx
	je	SHORT $LN372@vxprintf
$LN385@vxprintf:
; Line 8888
	mov	BYTE PTR [eax+edx], cl
	add	eax, 1
; Line 8889
	cmp	ecx, 39					; 00000027H
	jne	SHORT $LN20@vxprintf
	mov	BYTE PTR [eax+edx], cl
	add	eax, 1
$LN20@vxprintf:
	movsx	ecx, BYTE PTR [esi+1]
	add	esi, 1
	test	ecx, ecx
	jne	SHORT $LN385@vxprintf
$LN372@vxprintf:
; Line 8891
	test	ebx, ebx
	je	SHORT $LN17@vxprintf
	mov	BYTE PTR [eax+edx], 39			; 00000027H
	add	eax, 1
$LN17@vxprintf:
; Line 8892
	mov	BYTE PTR [eax+edx], 0
; Line 8893
	mov	DWORD PTR _length$[esp+444], eax
; Line 8896
	jmp	$LN353@vxprintf
$LN16@vxprintf:
; Line 8899
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
	add	eax, 4
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
	mov	eax, DWORD PTR [eax-4]
; Line 8900
	xor	esi, esi
	cmp	eax, esi
	je	SHORT $LN15@vxprintf
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, esi
	je	SHORT $LN15@vxprintf
; Line 8901
	mov	edx, DWORD PTR [eax+4]
	fstp	ST(0)
	mov	eax, DWORD PTR _arg$GSCopy$[esp+444]
	shr	edx, 1
	push	edx
	push	ecx
	push	eax
	call	DWORD PTR _func$GSCopy$[esp+456]
	fld	QWORD PTR __real@3fb999999999999a
	add	esp, 12					; 0000000cH
$LN15@vxprintf:
; Line 8903
	mov	DWORD PTR _width$[esp+444], esi
	mov	DWORD PTR _length$[esp+444], esi
; Line 8904
	jmp	$LN353@vxprintf
$LN457@vxprintf:
; Line 8907
	mov	eax, DWORD PTR _ap$GSCopy$[esp+444]
; Line 8916
	fstp	ST(0)
	mov	ecx, DWORD PTR [eax]
	add	eax, 4
	add	eax, 4
	mov	DWORD PTR _ap$GSCopy$[esp+444], eax
	mov	eax, DWORD PTR [eax-4]
	lea	edx, DWORD PTR [eax+eax*2]
	shl	edx, 4
	lea	ebx, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR [ebx]
	xor	ebp, ebp
	cmp	ecx, ebp
	je	SHORT $LN349@vxprintf
; Line 8911
	cmp	BYTE PTR [ecx], 0
	je	SHORT $LN349@vxprintf
; Line 8912
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
	npad	6
$LL386@vxprintf:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL386@vxprintf
	mov	edi, DWORD PTR _arg$GSCopy$[esp+444]
	sub	eax, esi
	mov	esi, DWORD PTR _func$GSCopy$[esp+444]
	push	eax
	push	ecx
	push	edi
	call	esi
; Line 8913
	push	1
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	push	edi
	call	esi
	add	esp, 24					; 00000018H
	jmp	SHORT $LN13@vxprintf
$LN349@vxprintf:
	mov	esi, DWORD PTR _func$GSCopy$[esp+444]
	mov	edi, DWORD PTR _arg$GSCopy$[esp+444]
$LN13@vxprintf:
; Line 8915
	mov	ecx, DWORD PTR [ebx+4]
	mov	eax, ecx
	lea	ebx, DWORD PTR [eax+1]
$LL387@vxprintf:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL387@vxprintf
	sub	eax, ebx
	push	eax
	push	ecx
	push	edi
	call	esi
; Line 8916
	fld	QWORD PTR __real@3fb999999999999a
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _width$[esp+444], ebp
	mov	DWORD PTR _length$[esp+444], ebp
$LN353@vxprintf:
; Line 8925
	cmp	BYTE PTR _flag_leftjustify$[esp+444], 0
	jne	SHORT $LN355@vxprintf
$LN354@vxprintf:
; Line 8927
	mov	ebx, DWORD PTR _width$[esp+444]
	sub	ebx, DWORD PTR _length$[esp+444]
; Line 8928
	test	ebx, ebx
	jle	SHORT $LN355@vxprintf
; Line 8929
	add	DWORD PTR _count$[esp+444], ebx
; Line 8930
	cmp	ebx, 73					; 00000049H
	jb	SHORT $LN357@vxprintf
	mov	eax, -1059033031			; c0e07039H
	fstp	ST(0)
	mul	ebx
	mov	ebp, DWORD PTR _func$GSCopy$[esp+444]
	mov	esi, DWORD PTR _arg$GSCopy$[esp+444]
	mov	edi, ebx
	sub	edi, edx
	shr	edi, 1
	add	edi, edx
	shr	edi, 6
	mov	eax, edi
	imul	eax, -73				; ffffffb7H
	add	ebx, eax
$LL10@vxprintf:
; Line 8931
	push	73					; 00000049H
	push	OFFSET ?spaces@?1??vxprintf@@9@9
	push	esi
	call	ebp
	add	esp, 12					; 0000000cH
	sub	edi, 1
	jne	SHORT $LL10@vxprintf
; Line 8930
	fld	QWORD PTR __real@3fb999999999999a
$LN357@vxprintf:
; Line 8934
	test	ebx, ebx
	jle	SHORT $LN355@vxprintf
	mov	ecx, DWORD PTR _arg$GSCopy$[esp+444]
	fstp	ST(0)
	push	ebx
	push	OFFSET ?spaces@?1??vxprintf@@9@9
	push	ecx
	call	DWORD PTR _func$GSCopy$[esp+456]
	fld	QWORD PTR __real@3fb999999999999a
	add	esp, 12					; 0000000cH
$LN355@vxprintf:
; Line 8937
	mov	edi, DWORD PTR _length$[esp+444]
	test	edi, edi
; Line 8938
	mov	ebp, DWORD PTR _arg$GSCopy$[esp+444]
	mov	esi, DWORD PTR _func$GSCopy$[esp+444]
	jle	SHORT $LN7@vxprintf
	mov	edx, DWORD PTR _bufpt$[esp+444]
	fstp	ST(0)
	push	edi
	push	edx
	push	ebp
	call	esi
; Line 8939
	fld	QWORD PTR __real@3fb999999999999a
	add	esp, 12					; 0000000cH
	add	DWORD PTR _count$[esp+444], edi
$LN7@vxprintf:
; Line 8941
	cmp	BYTE PTR _flag_leftjustify$[esp+444], 0
	je	SHORT $LN359@vxprintf
; Line 8943
	mov	ebx, DWORD PTR _width$[esp+444]
	sub	ebx, edi
; Line 8944
	test	ebx, ebx
	jle	SHORT $LN359@vxprintf
; Line 8945
	add	DWORD PTR _count$[esp+444], ebx
; Line 8946
	cmp	ebx, 73					; 00000049H
	jb	SHORT $LN351@vxprintf
	mov	eax, -1059033031			; c0e07039H
	fstp	ST(0)
	mul	ebx
	mov	edi, ebx
	sub	edi, edx
	shr	edi, 1
	add	edi, edx
	shr	edi, 6
	mov	eax, edi
	imul	eax, -73				; ffffffb7H
	add	ebx, eax
	npad	6
$LL4@vxprintf:
; Line 8947
	push	73					; 00000049H
	push	OFFSET ?spaces@?1??vxprintf@@9@9
	push	ebp
	call	esi
	add	esp, 12					; 0000000cH
	sub	edi, 1
	jne	SHORT $LL4@vxprintf
; Line 8946
	fld	QWORD PTR __real@3fb999999999999a
$LN351@vxprintf:
; Line 8950
	test	ebx, ebx
	jle	SHORT $LN359@vxprintf
	push	ebx
	fstp	ST(0)
	push	OFFSET ?spaces@?1??vxprintf@@9@9
	push	ebp
	call	esi
	fld	QWORD PTR __real@3fb999999999999a
	add	esp, 12					; 0000000cH
$LN359@vxprintf:
; Line 8953
	mov	eax, DWORD PTR _zExtra$[esp+444]
	test	eax, eax
	je	SHORT $LN194@vxprintf
; Line 8954
	push	eax
	fstp	ST(0)
	call	_free
	fld	QWORD PTR __real@3fb999999999999a
	add	esp, 4
$LN194@vxprintf:
	mov	ebp, DWORD PTR _fmt$GSCopy$[esp+444]
	movsx	eax, BYTE PTR [ebp+1]
	add	ebp, 1
	test	eax, eax
	jne	$LN346@vxprintf
; Line 8505
	fstp	ST(0)
$LN358@vxprintf:
; Line 8957
	mov	eax, DWORD PTR _count$[esp+444]
$LN196@vxprintf:
; Line 8958
	mov	ecx, DWORD PTR __$ArrayPad$[esp+444]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 428				; 000001acH
	ret	0
$LN395@vxprintf:
; Line 8517
	mov	ecx, DWORD PTR _arg$GSCopy$[esp+444]
	fstp	ST(0)
	push	1
	push	OFFSET ??_C@_01FGNFDNOH@?$CF?$AA@
	push	ecx
	call	esi
	add	esp, 12					; 0000000cH
; Line 8592
	or	eax, -1
	jmp	SHORT $LN196@vxprintf
$LN789@vxprintf:
; Line 8589
	fstp	ST(0)
$LN247@vxprintf:
; Line 8592
	or	eax, -1
	jmp	SHORT $LN196@vxprintf
	npad	2
$LN808@vxprintf:
; Line 8958
	DD	$LN180@vxprintf
	DD	$LN178@vxprintf
	DD	$LN179@vxprintf
	DD	$LN181@vxprintf
	DD	$LN182@vxprintf
	DD	$LN177@vxprintf
	DD	$LN374@vxprintf
$LN313@vxprintf:
	DB	0
	DB	1
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	4
	DB	6
	DB	6
	DB	5
	npad	3
$LN809@vxprintf:
	DD	$LN363@vxprintf
	DD	$LN114@vxprintf
	DD	$LN114@vxprintf
	DD	$LN114@vxprintf
	DD	$LN44@vxprintf
	DD	$LN36@vxprintf
	DD	$LN36@vxprintf
	DD	$LN43@vxprintf
	DD	$LN42@vxprintf
	DD	$LN42@vxprintf
	DD	$LN31@vxprintf
	DD	$LN31@vxprintf
	DD	$LN16@vxprintf
	DD	$LN457@vxprintf
	DD	$LN146@vxprintf
_vxprintf ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _base_vprintf
_TEXT	SEGMENT
_sM$ = -24						; size = 24
_nInitBuf$ = 8						; size = 4
_ap$ = 12						; size = 4
_base_vprintf PROC					; COMDAT
; _xRealloc$ = esi
; _useInternal$ = edx
; _zInitBuf$ = eax
; _zFormat$ = ecx
; Line 9024
	sub	esp, 24					; 00000018H
; Line 9026
	mov	DWORD PTR _sM$[esp+28], eax
	mov	DWORD PTR _sM$[esp+24], eax
; Line 9028
	mov	eax, DWORD PTR _nInitBuf$[esp+20]
; Line 9030
	push	ecx
	mov	ecx, DWORD PTR _ap$[esp+24]
	mov	DWORD PTR _sM$[esp+44], eax
	push	edx
	lea	eax, DWORD PTR _sM$[esp+32]
	push	eax
	mov	edx, OFFSET _mout
	mov	DWORD PTR _sM$[esp+48], 0
	mov	DWORD PTR _sM$[esp+44], 0
	mov	DWORD PTR _sM$[esp+56], esi
	call	_vxprintf
; Line 9032
	mov	eax, DWORD PTR _sM$[esp+40]
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN1@base_vprin
	cmp	eax, DWORD PTR _sM$[esp+24]
; Line 9033
	mov	ecx, DWORD PTR _sM$[esp+32]
	jne	SHORT $LN5@base_vprin
	add	ecx, 1
	push	ecx
	push	0
	call	esi
	add	esp, 8
; Line 9034
	test	eax, eax
	mov	DWORD PTR _sM$[esp+28], eax
	je	SHORT $LN1@base_vprin
; Line 9035
	mov	edx, DWORD PTR _sM$[esp+32]
	mov	ecx, DWORD PTR _sM$[esp+24]
	add	edx, 1
	push	edx
	push	ecx
	push	eax
	call	_memcpy
; Line 9044
	mov	eax, DWORD PTR _sM$[esp+40]
	add	esp, 12					; 0000000cH
; Line 9045
	add	esp, 24					; 00000018H
	ret	0
$LN5@base_vprin:
; Line 9037
	lea	edx, DWORD PTR [ecx+10]
	cmp	DWORD PTR _sM$[esp+40], edx
	jle	SHORT $LN1@base_vprin
; Line 9038
	add	ecx, 1
	push	ecx
	push	eax
	call	esi
	add	esp, 8
; Line 9039
	test	eax, eax
; Line 9040
	jne	SHORT $LN1@base_vprin
; Line 9044
	mov	eax, DWORD PTR _sM$[esp+28]
$LN1@base_vprin:
; Line 9045
	add	esp, 24					; 00000018H
	ret	0
_base_vprintf ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_vmprintf
_TEXT	SEGMENT
_zBase$ = -356						; size = 350
__$ArrayPad$ = -4					; size = 4
_zFormat$ = 8						; size = 4
_ap$ = 12						; size = 4
_sqlite3_vmprintf PROC					; COMDAT
; Line 9081
	sub	esp, 356				; 00000164H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+356], eax
	mov	eax, DWORD PTR _ap$[esp+352]
	mov	ecx, DWORD PTR _zFormat$[esp+352]
	push	esi
; Line 9083
	push	eax
	push	350					; 0000015eH
	lea	eax, DWORD PTR _zBase$[esp+368]
	xor	edx, edx
	mov	esi, OFFSET _sqlite3_realloc
	call	_base_vprintf
; Line 9084
	mov	ecx, DWORD PTR __$ArrayPad$[esp+368]
	add	esp, 8
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	ret	0
_sqlite3_vmprintf ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_mprintf
_TEXT	SEGMENT
_zFormat$ = 8						; size = 4
_sqlite3_mprintf PROC					; COMDAT
; Line 9094
	mov	ecx, DWORD PTR _zFormat$[esp-4]
	lea	eax, DWORD PTR _zFormat$[esp]
	push	eax
	push	ecx
	call	_sqlite3_vmprintf
	add	esp, 8
; Line 9097
	ret	0
_sqlite3_mprintf ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_snprintf
_TEXT	SEGMENT
_sM$110714 = -24					; size = 24
_n$ = 8							; size = 4
_zBuf$ = 12						; size = 4
_zFormat$ = 16						; size = 4
_sqlite3_snprintf PROC					; COMDAT
; Line 9109
	mov	ecx, DWORD PTR _n$[esp-4]
; Line 9110
	mov	eax, DWORD PTR _zBuf$[esp-4]
	xor	edx, edx
	sub	esp, 24					; 00000018H
	cmp	ecx, edx
	jle	SHORT $LN2@sqlite3_sn
; Line 9112
	mov	BYTE PTR [eax], dl
; Line 9114
	mov	DWORD PTR _sM$110714[esp+28], eax
	mov	DWORD PTR _sM$110714[esp+24], eax
	mov	eax, DWORD PTR _zFormat$[esp+20]
	push	eax
	mov	DWORD PTR _sM$110714[esp+44], ecx
	push	edx
	lea	ecx, DWORD PTR _sM$110714[esp+32]
	mov	DWORD PTR _sM$110714[esp+44], edx
	mov	DWORD PTR _sM$110714[esp+40], edx
	mov	DWORD PTR _sM$110714[esp+52], edx
	push	ecx
	lea	ecx, DWORD PTR _zFormat$[esp+36]
	mov	edx, OFFSET _mout
	call	_vxprintf
; Line 9116
	mov	eax, DWORD PTR _sM$110714[esp+40]
	add	esp, 12					; 0000000cH
$LN2@sqlite3_sn:
; Line 9117
	add	esp, 24					; 00000018H
	ret	0
_sqlite3_snprintf ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3HexToBlob
_TEXT	SEGMENT
_z$ = 8							; size = 4
_sqlite3HexToBlob PROC					; COMDAT
; Line 10790
	push	ebx
; Line 10793
	mov	ebx, DWORD PTR _z$[esp]
	mov	eax, ebx
	push	ebp
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL22@sqlite3Hex:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL22@sqlite3Hex
	sub	eax, edx
	mov	ebp, eax
; Line 10794
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN24@sqlite3Hex
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN24@sqlite3Hex:
	je	SHORT $LN5@sqlite3Hex
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 10803
	ret	0
$LN5@sqlite3Hex:
; Line 10796
	mov	eax, ebp
	cdq
	push	edi
	sub	eax, edx
	mov	edi, eax
	sar	edi, 1
	call	_sqlite3Malloc
; Line 10797
	test	eax, eax
	je	SHORT $LN1@sqlite3Hex
; Line 10798
	xor	edx, edx
	test	ebp, ebp
	jle	SHORT $LN1@sqlite3Hex
	push	esi
	jmp	SHORT $LN3@sqlite3Hex
	npad	4
$LL23@sqlite3Hex:
	mov	ebx, DWORD PTR _z$[esp+12]
$LN3@sqlite3Hex:
; Line 10799
	movsx	esi, BYTE PTR [ebx+edx]
	lea	ecx, DWORD PTR [esi-48]
	cmp	ecx, 9
	jbe	SHORT $LN8@sqlite3Hex
	lea	ecx, DWORD PTR [esi-97]
	cmp	ecx, 5
	lea	ecx, DWORD PTR [esi-87]
	jbe	SHORT $LN8@sqlite3Hex
	lea	ecx, DWORD PTR [esi-55]
$LN8@sqlite3Hex:
	movsx	esi, BYTE PTR [ebx+edx+1]
	lea	ebx, DWORD PTR [esi-48]
	cmp	ebx, 9
	jbe	SHORT $LN14@sqlite3Hex
	lea	edi, DWORD PTR [esi-97]
	cmp	edi, 5
	lea	ebx, DWORD PTR [esi-87]
	jbe	SHORT $LN14@sqlite3Hex
	lea	ebx, DWORD PTR [esi-55]
$LN14@sqlite3Hex:
	shl	cl, 4
	mov	esi, edx
	or	cl, bl
	shr	esi, 1
	add	edx, 2
	cmp	edx, ebp
	mov	BYTE PTR [esi+eax], cl
	jl	SHORT $LL23@sqlite3Hex
	pop	esi
$LN1@sqlite3Hex:
	pop	edi
	pop	ebp
	pop	ebx
; Line 10803
	ret	0
_sqlite3HexToBlob ENDP
_TEXT	ENDS
EXTRN	__imp__MultiByteToWideChar@24:PROC
; Function compile flags: /Ogtpy
;	COMDAT _utf8ToUnicode
_TEXT	SEGMENT
_zFilename$ = 8						; size = 4
_utf8ToUnicode PROC					; COMDAT
; Line 16128
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zFilename$[esp+4]
	push	esi
	push	edi
; Line 16132
	push	0
	push	0
	push	-1
	push	ebp
	push	0
	push	65001					; 0000fde9H
	call	DWORD PTR __imp__MultiByteToWideChar@24
	mov	ebx, eax
; Line 16133
	lea	edi, DWORD PTR [ebx+ebx]
	call	_sqlite3Malloc
	mov	esi, eax
; Line 16134
	test	esi, esi
	jne	SHORT $LN2@utf8ToUnic
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 16143
	ret	0
$LN2@utf8ToUnic:
; Line 16137
	push	ebx
	push	esi
	push	-1
	push	ebp
	push	0
	push	65001					; 0000fde9H
	call	DWORD PTR __imp__MultiByteToWideChar@24
; Line 16138
	test	eax, eax
	jne	SHORT $LN1@utf8ToUnic
; Line 16139
	push	esi
	call	_free
	add	esp, 4
; Line 16140
	xor	esi, esi
$LN1@utf8ToUnic:
	pop	edi
; Line 16142
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 16143
	ret	0
_utf8ToUnicode ENDP
_TEXT	ENDS
EXTRN	__imp__WideCharToMultiByte@32:PROC
; Function compile flags: /Ogtpy
;	COMDAT _unicodeToUtf8
_TEXT	SEGMENT
_unicodeToUtf8 PROC					; COMDAT
; _zWideFilename$ = ebx
; Line 16149
	push	ebp
; Line 16153
	mov	ebp, DWORD PTR __imp__WideCharToMultiByte@32
	push	esi
	push	edi
	push	0
	push	0
	push	0
	push	0
	push	-1
	push	ebx
	push	0
	push	65001					; 0000fde9H
	call	ebp
	mov	edi, eax
; Line 16154
	call	_sqlite3Malloc
	mov	esi, eax
; Line 16155
	test	esi, esi
	jne	SHORT $LN2@unicodeToU
	pop	edi
	pop	esi
	pop	ebp
; Line 16165
	ret	0
$LN2@unicodeToU:
; Line 16159
	push	0
	push	0
	push	edi
	push	esi
	push	-1
	push	ebx
	push	0
	push	65001					; 0000fde9H
	call	ebp
; Line 16160
	test	eax, eax
	jne	SHORT $LN1@unicodeToU
; Line 16161
	push	esi
	call	_free
	add	esp, 4
; Line 16162
	xor	esi, esi
$LN1@unicodeToU:
	pop	edi
; Line 16164
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 16165
	ret	0
_unicodeToUtf8 ENDP
_TEXT	ENDS
EXTRN	__imp__AreFileApisANSI@0:PROC
; Function compile flags: /Ogtpy
;	COMDAT _mbcsToUnicode
_TEXT	SEGMENT
_zFilename$ = 8						; size = 4
_mbcsToUnicode PROC					; COMDAT
; Line 16174
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zFilename$[esp+4]
	push	esi
	push	edi
; Line 16177
	call	DWORD PTR __imp__AreFileApisANSI@0
; Line 16179
	push	0
	push	0
	mov	esi, eax
	push	-1
	neg	esi
	push	ebp
	sbb	esi, esi
	push	0
	add	esi, 1
	push	esi
	call	DWORD PTR __imp__MultiByteToWideChar@24
	mov	ebx, eax
	add	ebx, ebx
; Line 16180
	lea	edi, DWORD PTR [ebx+ebx]
	call	_sqlite3Malloc
	mov	edi, eax
; Line 16181
	test	edi, edi
	jne	SHORT $LN2@mbcsToUnic
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 16190
	ret	0
$LN2@mbcsToUnic:
; Line 16184
	push	ebx
	push	edi
	push	-1
	push	ebp
	push	0
	push	esi
	call	DWORD PTR __imp__MultiByteToWideChar@24
; Line 16185
	test	eax, eax
	jne	SHORT $LN1@mbcsToUnic
; Line 16186
	push	edi
	call	_free
	add	esp, 4
; Line 16187
	xor	edi, edi
$LN1@mbcsToUnic:
; Line 16189
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 16190
	ret	0
_mbcsToUnicode ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _unicodeToMbcs
_TEXT	SEGMENT
_zWideFilename$ = 8					; size = 4
_unicodeToMbcs PROC					; COMDAT
; Line 16199
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zWideFilename$[esp+4]
	push	esi
	push	edi
; Line 16202
	call	DWORD PTR __imp__AreFileApisANSI@0
; Line 16204
	push	0
	push	0
	push	0
	push	0
	mov	esi, eax
	push	-1
	neg	esi
	push	ebp
	sbb	esi, esi
	push	0
	add	esi, 1
	push	esi
	call	DWORD PTR __imp__WideCharToMultiByte@32
	mov	edi, eax
; Line 16205
	call	_sqlite3Malloc
	mov	ebx, eax
; Line 16206
	test	ebx, ebx
	jne	SHORT $LN2@unicodeToM
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 16216
	ret	0
$LN2@unicodeToM:
; Line 16210
	push	0
	push	0
	push	edi
	push	ebx
	push	-1
	push	ebp
	push	0
	push	esi
	call	DWORD PTR __imp__WideCharToMultiByte@32
; Line 16211
	test	eax, eax
	jne	SHORT $LN1@unicodeToM
; Line 16212
	push	ebx
	call	_free
	add	esp, 4
; Line 16213
	xor	ebx, ebx
$LN1@unicodeToM:
	pop	edi
	pop	esi
	pop	ebp
; Line 16215
	mov	eax, ebx
	pop	ebx
; Line 16216
	ret	0
_unicodeToMbcs ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _mbcsToUtf8
_TEXT	SEGMENT
_mbcsToUtf8 PROC					; COMDAT
; _zFilename$ = eax
; Line 16222
	push	ebx
; Line 16226
	push	eax
	call	_mbcsToUnicode
	mov	ebx, eax
	add	esp, 4
; Line 16227
	test	ebx, ebx
	jne	SHORT $LN1@mbcsToUtf8
	pop	ebx
; Line 16233
	ret	0
$LN1@mbcsToUtf8:
	push	esi
; Line 16230
	call	_unicodeToUtf8
; Line 16231
	push	ebx
	mov	esi, eax
	call	_free
	add	esp, 4
; Line 16232
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 16233
	ret	0
_mbcsToUtf8 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _utf8ToMbcs
_TEXT	SEGMENT
_utf8ToMbcs PROC					; COMDAT
; _zFilename$ = eax
; Line 16239
	push	esi
; Line 16243
	push	eax
	call	_utf8ToUnicode
	mov	esi, eax
	add	esp, 4
; Line 16244
	test	esi, esi
	jne	SHORT $LN1@utf8ToMbcs
	pop	esi
; Line 16250
	ret	0
$LN1@utf8ToMbcs:
	push	edi
; Line 16247
	push	esi
	call	_unicodeToMbcs
; Line 16248
	push	esi
	mov	edi, eax
	call	_free
	add	esp, 8
; Line 16249
	mov	eax, edi
	pop	edi
	pop	esi
; Line 16250
	ret	0
_utf8ToMbcs ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _convertUtf8Filename
_TEXT	SEGMENT
_convertUtf8Filename PROC				; COMDAT
; _zFilename$ = eax
; Line 16569
	push	esi
	mov	esi, eax
; Line 16571
	call	_isNT
	test	eax, eax
; Line 16572
	push	esi
	je	SHORT $LN2@convertUtf
	call	_utf8ToUnicode
	add	esp, 4
	pop	esi
; Line 16578
	ret	0
$LN2@convertUtf:
; Line 16574
	call	_utf8ToUnicode
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN5@convertUtf
	pop	esi
; Line 16578
	ret	0
; Line 16574
$LN5@convertUtf:
	push	edi
	push	esi
	call	_unicodeToMbcs
	push	esi
	mov	edi, eax
	call	_free
	add	esp, 8
; Line 16577
	mov	eax, edi
	pop	edi
	pop	esi
; Line 16578
	ret	0
_convertUtf8Filename ENDP
_TEXT	ENDS
EXTRN	__imp__GetFileAttributesA@4:PROC
EXTRN	__imp__DeleteFileA@4:PROC
EXTRN	__imp__GetFileAttributesW@4:PROC
EXTRN	__imp__DeleteFileW@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3WinDelete
_TEXT	SEGMENT
_cnt$ = -4						; size = 4
_sqlite3WinDelete PROC					; COMDAT
; _zFilename$ = eax
; Line 16593
	push	ecx
	push	esi
	push	edi
	mov	esi, eax
; Line 16594
	mov	DWORD PTR _cnt$[esp+12], 0
; Line 16596
	call	_isNT
	test	eax, eax
	push	esi
	je	SHORT $LN15@sqlite3Win@3
	call	_utf8ToUnicode
	add	esp, 4
	mov	edi, eax
	jmp	SHORT $LN19@sqlite3Win@3
$LN15@sqlite3Win@3:
	call	_utf8ToUnicode
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	SHORT $LN35@sqlite3Win@3
	push	esi
	call	_unicodeToMbcs
	push	esi
	mov	edi, eax
	call	_free
	add	esp, 8
$LN19@sqlite3Win@3:
; Line 16597
	test	edi, edi
	jne	SHORT $LN11@sqlite3Win@3
$LN35@sqlite3Win@3:
	pop	edi
; Line 16598
	mov	eax, 7
	pop	esi
; Line 16619
	pop	ecx
	ret	0
$LN11@sqlite3Win@3:
	push	ebx
	push	ebp
; Line 16601
	call	_isNT
	test	eax, eax
; Line 16603
	push	edi
	je	SHORT $LN32@sqlite3Win@3
	mov	ebx, DWORD PTR __imp__DeleteFileW@4
	call	ebx
	mov	esi, eax
; Line 16605
	test	esi, esi
	jne	SHORT $LN2@sqlite3Win@3
	mov	ebp, DWORD PTR __imp__Sleep@4
	npad	1
$LL9@sqlite3Win@3:
	push	edi
	call	DWORD PTR __imp__GetFileAttributesW@4
	cmp	eax, -1
	je	SHORT $LN2@sqlite3Win@3
	mov	eax, DWORD PTR _cnt$[esp+20]
	mov	ecx, eax
	add	eax, 1
	cmp	ecx, 3
	mov	DWORD PTR _cnt$[esp+20], eax
	jge	SHORT $LN2@sqlite3Win@3
	push	100					; 00000064H
	call	ebp
	push	edi
	call	ebx
	mov	esi, eax
	test	esi, esi
	je	SHORT $LL9@sqlite3Win@3
; Line 16606
	jmp	SHORT $LN2@sqlite3Win@3
$LN32@sqlite3Win@3:
; Line 16611
	mov	ebx, DWORD PTR __imp__DeleteFileA@4
	call	ebx
	mov	esi, eax
; Line 16613
	test	esi, esi
	jne	SHORT $LN2@sqlite3Win@3
	mov	ebp, DWORD PTR __imp__Sleep@4
$LL4@sqlite3Win@3:
	push	edi
	call	DWORD PTR __imp__GetFileAttributesA@4
	cmp	eax, -1
	je	SHORT $LN2@sqlite3Win@3
	mov	eax, DWORD PTR _cnt$[esp+20]
	mov	edx, eax
	add	eax, 1
	cmp	edx, 3
	mov	DWORD PTR _cnt$[esp+20], eax
	jge	SHORT $LN2@sqlite3Win@3
	push	100					; 00000064H
	call	ebp
	push	edi
	call	ebx
	mov	esi, eax
	test	esi, esi
	je	SHORT $LL4@sqlite3Win@3
$LN2@sqlite3Win@3:
; Line 16616
	push	edi
	call	_free
	add	esp, 4
; Line 16618
	mov	eax, esi
	neg	eax
	pop	ebp
	sbb	eax, eax
	pop	ebx
	and	eax, -10				; fffffff6H
	pop	edi
	add	eax, 10					; 0000000aH
	pop	esi
; Line 16619
	pop	ecx
	ret	0
_sqlite3WinDelete ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3WinFileExists
_TEXT	SEGMENT
_sqlite3WinFileExists PROC				; COMDAT
; _zFilename$ = eax
; Line 16624
	push	esi
	push	edi
	mov	esi, eax
; Line 16626
	call	_isNT
	test	eax, eax
	push	esi
	je	SHORT $LN7@sqlite3Win@4
	call	_utf8ToUnicode
	add	esp, 4
	mov	esi, eax
	jmp	SHORT $LN11@sqlite3Win@4
$LN7@sqlite3Win@4:
	call	_utf8ToUnicode
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $LN23@sqlite3Win@4
	push	edi
	call	_unicodeToMbcs
	push	edi
	mov	esi, eax
	call	_free
	add	esp, 8
$LN11@sqlite3Win@4:
; Line 16627
	test	esi, esi
	jne	SHORT $LN3@sqlite3Win@4
$LN23@sqlite3Win@4:
	pop	edi
; Line 16628
	mov	eax, 7
	pop	esi
; Line 16641
	ret	0
$LN3@sqlite3Win@4:
; Line 16630
	call	_isNT
	test	eax, eax
; Line 16631
	push	esi
	je	SHORT $LN2@sqlite3Win@4
	call	DWORD PTR __imp__GetFileAttributesW@4
	xor	ecx, ecx
	cmp	eax, -1
	setne	cl
; Line 16639
	push	esi
	mov	edi, ecx
	call	_free
	add	esp, 4
; Line 16640
	mov	eax, edi
	pop	edi
	pop	esi
; Line 16641
	ret	0
$LN2@sqlite3Win@4:
; Line 16636
	call	DWORD PTR __imp__GetFileAttributesA@4
	xor	edx, edx
	cmp	eax, -1
	setne	dl
; Line 16639
	push	esi
	mov	edi, edx
	call	_free
	add	esp, 4
; Line 16640
	mov	eax, edi
	pop	edi
	pop	esi
; Line 16641
	ret	0
_sqlite3WinFileExists ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@KBKJCPCN@?$CFs?2etilqs_?$AA@		; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__GetTempPathA@8:PROC
EXTRN	__imp__GetTempPathW@8:PROC
EXTRN	_strncpy:PROC
;	COMDAT ??_C@_0L@KBKJCPCN@?$CFs?2etilqs_?$AA@
CONST	SEGMENT
??_C@_0L@KBKJCPCN@?$CFs?2etilqs_?$AA@ DB '%s\etilqs_', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3WinTempFileName
_TEXT	SEGMENT
_zTempPath$ = -936					; size = 310
_zMbcsPath$83828 = -624					; size = 310
_zWidePath$83823 = -624					; size = 620
__$ArrayPad$ = -4					; size = 4
_sqlite3WinTempFileName PROC				; COMDAT
; _zBuf$ = edi
; Line 16906
	sub	esp, 936				; 000003a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+936], eax
; Line 16913
	mov	eax, DWORD PTR _sqlite3_temp_directory
	test	eax, eax
	push	ebx
	push	esi
	je	SHORT $LN17@sqlite3Win@5
; Line 16914
	push	280					; 00000118H
	push	eax
	lea	eax, DWORD PTR _zTempPath$[esp+952]
	push	eax
	call	_strncpy
	add	esp, 12					; 0000000cH
; Line 16915
	mov	BYTE PTR _zTempPath$[esp+1224], 0
	jmp	$LN36@sqlite3Win@5
$LN17@sqlite3Win@5:
; Line 16916
	call	_isNT
	test	eax, eax
	je	SHORT $LN15@sqlite3Win@5
; Line 16919
	lea	ecx, DWORD PTR _zWidePath$83823[esp+944]
	push	ecx
	push	280					; 00000118H
	call	DWORD PTR __imp__GetTempPathW@8
; Line 16920
	lea	ebx, DWORD PTR _zWidePath$83823[esp+944]
	call	_unicodeToUtf8
	mov	esi, eax
; Line 16921
	test	esi, esi
; Line 16928
	jne	SHORT $LN59@sqlite3Win@5
$LN11@sqlite3Win@5:
	pop	esi
; Line 16938
	mov	eax, 7
	pop	ebx
; Line 16956
	mov	ecx, DWORD PTR __$ArrayPad$[esp+936]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 936				; 000003a8H
	ret	0
$LN15@sqlite3Win@5:
; Line 16931
	lea	eax, DWORD PTR _zMbcsPath$83828[esp+944]
	push	eax
	push	280					; 00000118H
	call	DWORD PTR __imp__GetTempPathA@8
; Line 16932
	lea	ecx, DWORD PTR _zMbcsPath$83828[esp+944]
	push	ecx
	call	_mbcsToUnicode
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	je	SHORT $LN11@sqlite3Win@5
	call	_unicodeToUtf8
	push	ebx
	mov	esi, eax
	call	_free
	add	esp, 4
; Line 16933
	test	esi, esi
	je	SHORT $LN11@sqlite3Win@5
$LN59@sqlite3Win@5:
; Line 16934
	push	280					; 00000118H
	lea	edx, DWORD PTR _zTempPath$[esp+948]
	push	esi
	push	edx
	call	_strncpy
; Line 16936
	push	esi
	mov	BYTE PTR _zTempPath$[esp+1240], 0
	call	_free
	add	esp, 16					; 00000010H
$LN36@sqlite3Win@5:
; Line 16941
	lea	eax, DWORD PTR _zTempPath$[esp+944]
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL56@sqlite3Win@5:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL56@sqlite3Win@5
	sub	eax, edx
	test	eax, eax
	jle	SHORT $LN7@sqlite3Win@5
	lea	ecx, DWORD PTR _zTempPath$[esp+944]
	sub	ecx, 1
$LL9@sqlite3Win@5:
	cmp	BYTE PTR [ecx+eax], 92			; 0000005cH
	jne	SHORT $LN7@sqlite3Win@5
	sub	eax, 1
	test	eax, eax
	jg	SHORT $LL9@sqlite3Win@5
$LN7@sqlite3Win@5:
; Line 16942
	mov	BYTE PTR _zTempPath$[esp+eax+944], 0
	push	ebp
	npad	7
$LL6@sqlite3Win@5:
; Line 16945
	lea	eax, DWORD PTR _zTempPath$[esp+948]
	push	eax
	push	OFFSET ??_C@_0L@KBKJCPCN@?$CFs?2etilqs_?$AA@
	push	edi
	push	310					; 00000136H
	call	_sqlite3_snprintf
; Line 16946
	mov	esi, edi
	add	esp, 16					; 00000010H
	lea	ecx, DWORD PTR [esi+1]
	npad	3
$LL57@sqlite3Win@5:
	mov	al, BYTE PTR [esi]
	add	esi, 1
	test	al, al
	jne	SHORT $LL57@sqlite3Win@5
	sub	esi, ecx
; Line 16947
	add	DWORD PTR _inMutex, 1
	mov	ebx, 15					; 0000000fH
	lea	ebp, DWORD PTR [edi+esi]
	npad	6
$LL39@sqlite3Win@5:
	sub	ebx, 1
	call	_randomByte
	mov	BYTE PTR [ebp], al
	add	ebp, 1
	test	ebx, ebx
	jne	SHORT $LL39@sqlite3Win@5
	sub	DWORD PTR _inMutex, 1
	lea	ecx, DWORD PTR [ebx+3]
	npad	4
$LL4@sqlite3Win@5:
; Line 16949
	movzx	eax, BYTE PTR [edi+esi]
	xor	edx, edx
	mov	ebx, 62					; 0000003eH
	div	ebx
	movzx	eax, BYTE PTR [edi+esi+1]
	add	esi, 5
	movzx	edx, BYTE PTR ?zChars@?1??sqlite3WinTempFileName@@9@9[edx]
	mov	BYTE PTR [edi+esi-5], dl
	xor	edx, edx
	div	ebx
	movzx	eax, BYTE PTR ?zChars@?1??sqlite3WinTempFileName@@9@9[edx]
	mov	BYTE PTR [edi+esi-4], al
	movzx	eax, BYTE PTR [edi+esi-3]
	xor	edx, edx
	div	ebx
	movzx	eax, BYTE PTR [edi+esi-2]
	movzx	edx, BYTE PTR ?zChars@?1??sqlite3WinTempFileName@@9@9[edx]
	mov	BYTE PTR [edi+esi-3], dl
	xor	edx, edx
	div	ebx
	movzx	eax, BYTE PTR ?zChars@?1??sqlite3WinTempFileName@@9@9[edx]
	mov	BYTE PTR [edi+esi-2], al
	movzx	eax, BYTE PTR [edi+esi-1]
	xor	edx, edx
	div	ebx
	sub	ecx, 1
	movzx	edx, BYTE PTR ?zChars@?1??sqlite3WinTempFileName@@9@9[edx]
	mov	BYTE PTR [edi+esi-1], dl
	jne	SHORT $LL4@sqlite3Win@5
; Line 16952
	mov	eax, edi
	mov	BYTE PTR [edi+esi], cl
	call	_sqlite3WinFileExists
	test	eax, eax
	jne	$LL6@sqlite3Win@5
; Line 16956
	mov	ecx, DWORD PTR __$ArrayPad$[esp+948]
	pop	ebp
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 936				; 000003a8H
	ret	0
_sqlite3WinTempFileName ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3WinIsDirWritable
_TEXT	SEGMENT
_sqlite3WinIsDirWritable PROC				; COMDAT
; _zDirname$ = eax
; Line 17152
	push	esi
	mov	esi, eax
; Line 17155
	test	esi, esi
	jne	SHORT $LN7@sqlite3Win@6
$LN32@sqlite3Win@6:
	xor	eax, eax
	pop	esi
; Line 17177
	ret	0
$LN7@sqlite3Win@6:
; Line 17156
	call	_isNT
	test	eax, eax
	jne	SHORT $LN6@sqlite3Win@6
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL28@sqlite3Win@6:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL28@sqlite3Win@6
	sub	eax, edx
	cmp	eax, 260				; 00000104H
	ja	SHORT $LN32@sqlite3Win@6
$LN6@sqlite3Win@6:
	push	edi
; Line 17158
	call	_isNT
	test	eax, eax
	push	esi
	je	SHORT $LN11@sqlite3Win@6
	call	_utf8ToUnicode
	add	esp, 4
	mov	esi, eax
	jmp	SHORT $LN15@sqlite3Win@6
$LN11@sqlite3Win@6:
	call	_utf8ToUnicode
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $LN27@sqlite3Win@6
	push	edi
	call	_unicodeToMbcs
	push	edi
	mov	esi, eax
	call	_free
	add	esp, 8
$LN15@sqlite3Win@6:
; Line 17159
	test	esi, esi
	jne	SHORT $LN5@sqlite3Win@6
$LN27@sqlite3Win@6:
	pop	edi
; Line 17160
	mov	eax, 7
	pop	esi
; Line 17177
	ret	0
$LN5@sqlite3Win@6:
	push	ebx
; Line 17162
	call	_isNT
	test	eax, eax
; Line 17163
	push	esi
	je	SHORT $LN4@sqlite3Win@6
	call	DWORD PTR __imp__GetFileAttributesW@4
; Line 17164
	jmp	SHORT $LN31@sqlite3Win@6
$LN4@sqlite3Win@6:
; Line 17168
	call	DWORD PTR __imp__GetFileAttributesA@4
$LN31@sqlite3Win@6:
; Line 17171
	push	esi
	mov	ebx, eax
	call	_free
	add	esp, 4
; Line 17172
	xor	eax, eax
	cmp	ebx, -1
	je	SHORT $LN30@sqlite3Win@6
; Line 17173
	and	bl, 16					; 00000010H
	cmp	bl, 16					; 00000010H
	sete	al
$LN30@sqlite3Win@6:
	pop	ebx
	pop	edi
	pop	esi
; Line 17177
	ret	0
_sqlite3WinIsDirWritable ENDP
_TEXT	ENDS
EXTRN	__imp__GetFullPathNameA@16:PROC
EXTRN	__imp__GetFullPathNameW@16:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3WinFullPathname
_TEXT	SEGMENT
_sqlite3WinFullPathname PROC				; COMDAT
; _zRelative$ = eax
; Line 17383
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	esi, eax
; Line 17397
	call	_isNT
	test	eax, eax
	push	esi
	je	SHORT $LN8@sqlite3Win@7
	call	_utf8ToUnicode
	add	esp, 4
	mov	esi, eax
	jmp	SHORT $LN12@sqlite3Win@7
$LN8@sqlite3Win@7:
	call	_utf8ToUnicode
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN11@sqlite3Win@7
	xor	esi, esi
	jmp	SHORT $LN12@sqlite3Win@7
$LN11@sqlite3Win@7:
	push	edi
	call	_unicodeToMbcs
	push	edi
	mov	esi, eax
	call	_free
	add	esp, 8
$LN12@sqlite3Win@7:
; Line 17398
	call	_isNT
	test	eax, eax
; Line 17400
	push	0
	push	0
	push	0
	push	esi
	je	SHORT $LN4@sqlite3Win@7
	mov	ebx, DWORD PTR __imp__GetFullPathNameW@16
	call	ebx
	mov	ebp, eax
	add	ebp, 3
; Line 17401
	lea	edi, DWORD PTR [ebp+ebp]
	call	_sqlite3Malloc
	mov	edi, eax
; Line 17402
	test	edi, edi
	jne	SHORT $LN3@sqlite3Win@7
$LN58@sqlite3Win@7:
; Line 17403
	test	esi, esi
	je	SHORT $LN22@sqlite3Win@7
	push	esi
	call	_free
	add	esp, 4
$LN22@sqlite3Win@7:
	pop	edi
	pop	esi
	pop	ebp
; Line 17404
	xor	eax, eax
	pop	ebx
; Line 17425
	ret	0
$LN3@sqlite3Win@7:
; Line 17406
	push	0
	push	edi
	push	ebp
	push	esi
	call	ebx
; Line 17407
	test	esi, esi
	je	SHORT $LN27@sqlite3Win@7
	push	esi
	call	_free
	add	esp, 4
$LN27@sqlite3Win@7:
; Line 17408
	mov	ebx, edi
	call	_unicodeToUtf8
; Line 17409
	push	edi
	mov	esi, eax
; Line 17421
	call	_free
	add	esp, 4
	pop	edi
; Line 17424
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 17425
	ret	0
$LN4@sqlite3Win@7:
; Line 17412
	mov	ebx, DWORD PTR __imp__GetFullPathNameA@16
	call	ebx
	mov	edi, eax
	add	edi, 3
; Line 17413
	call	_sqlite3Malloc
	mov	ebp, eax
; Line 17414
	test	ebp, ebp
; Line 17416
	je	SHORT $LN58@sqlite3Win@7
; Line 17418
	push	0
	push	ebp
	push	edi
	push	esi
	call	ebx
; Line 17419
	test	esi, esi
	je	SHORT $LN42@sqlite3Win@7
	push	esi
	call	_free
	add	esp, 4
$LN42@sqlite3Win@7:
; Line 17420
	push	ebp
	call	_mbcsToUnicode
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN44@sqlite3Win@7
; Line 17421
	push	ebp
	xor	esi, esi
	call	_free
	add	esp, 4
	pop	edi
; Line 17424
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 17425
	ret	0
; Line 17420
$LN44@sqlite3Win@7:
	call	_unicodeToUtf8
	push	ebx
	mov	esi, eax
	call	_free
	add	esp, 4
; Line 17421
	push	ebp
	call	_free
	add	esp, 4
	pop	edi
; Line 17424
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 17425
	ret	0
_sqlite3WinFullPathname ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _allocateWinFile
_TEXT	SEGMENT
_pId$ = 8						; size = 4
_allocateWinFile PROC					; COMDAT
; _pInit$ = esi
; Line 17492
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebp
	mov	ebp, DWORD PTR _pId$[esp]
	push	edi
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN12@allocateWi
	test	edi, edi
	jg	SHORT $LN30@allocateWi
$LN12@allocateWi:
	push	12					; 0000000cH
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN31@allocateWi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN22@allocateWi
	test	edi, edi
	jg	SHORT $LN5@allocateWi
$LN22@allocateWi:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN5@allocateWi
$LN31@allocateWi:
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
$LN5@allocateWi:
; Line 17493
	test	eax, eax
	jne	SHORT $LN2@allocateWi
$LN30@allocateWi:
; Line 17494
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	pop	edi
; Line 17498
	mov	DWORD PTR [ebp], 0
; Line 17499
	mov	eax, 7
	pop	ebp
; Line 17509
	ret	0
$LN2@allocateWi:
; Line 17501
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
; Line 17502
	mov	DWORD PTR [eax], OFFSET _sqlite3WinIoMethod
; Line 17503
	mov	BYTE PTR [eax+8], 0
; Line 17504
	mov	WORD PTR [eax+10], 0
; Line 17505
	mov	DWORD PTR [ebp], eax
	pop	edi
; Line 17507
	xor	eax, eax
	pop	ebp
; Line 17509
	ret	0
_allocateWinFile ENDP
_TEXT	ENDS
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__LoadLibraryW@4:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3WinDlopen
_TEXT	SEGMENT
_sqlite3WinDlopen PROC					; COMDAT
; _zFilename$ = eax
; Line 17523
	push	esi
	push	edi
	mov	esi, eax
; Line 17525
	call	_isNT
	test	eax, eax
	push	esi
	je	SHORT $LN7@sqlite3Win@8
	call	_utf8ToUnicode
	add	esp, 4
	mov	esi, eax
	jmp	SHORT $LN11@sqlite3Win@8
$LN7@sqlite3Win@8:
	call	_utf8ToUnicode
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $LN23@sqlite3Win@8
	push	edi
	call	_unicodeToMbcs
	push	edi
	mov	esi, eax
	call	_free
	add	esp, 8
$LN11@sqlite3Win@8:
; Line 17526
	test	esi, esi
	jne	SHORT $LN3@sqlite3Win@8
$LN23@sqlite3Win@8:
	pop	edi
; Line 17527
	xor	eax, eax
	pop	esi
; Line 17541
	ret	0
$LN3@sqlite3Win@8:
; Line 17529
	call	_isNT
	test	eax, eax
; Line 17530
	push	esi
	je	SHORT $LN2@sqlite3Win@8
	call	DWORD PTR __imp__LoadLibraryW@4
; Line 17538
	push	esi
	mov	edi, eax
	call	_free
	add	esp, 4
; Line 17539
	mov	eax, edi
	pop	edi
	pop	esi
; Line 17541
	ret	0
$LN2@sqlite3Win@8:
; Line 17535
	call	DWORD PTR __imp__LoadLibraryA@4
; Line 17538
	push	esi
	mov	edi, eax
	call	_free
	add	esp, 4
; Line 17539
	mov	eax, edi
	pop	edi
	pop	esi
; Line 17541
	ret	0
_sqlite3WinDlopen ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_resize_hash_table
_TEXT	SEGMENT
_N$ = 8							; size = 4
_pager_resize_hash_table PROC				; COMDAT
; _pPager$ = ebx
; Line 18246
	push	ebp
	mov	ebp, DWORD PTR _N$[esp]
	push	esi
	push	edi
; Line 18249
	lea	edi, DWORD PTR [ebp*4]
	call	_sqlite3Malloc
	mov	esi, eax
; Line 18250
	xor	edi, edi
	cmp	esi, edi
	je	SHORT $LN3@pager_resi
; Line 18254
	mov	eax, DWORD PTR [ebx+192]
	cmp	eax, edi
	je	SHORT $LN12@pager_resi
	push	eax
	call	_free
	add	esp, 4
$LN12@pager_resi:
; Line 18257
	mov	ecx, DWORD PTR [ebx+124]
	cmp	ecx, edi
	mov	DWORD PTR [ebx+188], ebp
	mov	DWORD PTR [ebx+192], esi
	je	SHORT $LN3@pager_resi
$LL5@pager_resi:
; Line 18259
	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, edi
	je	SHORT $LN4@pager_resi
; Line 18263
	lea	eax, DWORD PTR [ebp-1]
	and	eax, edx
; Line 18264
	mov	edx, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [ecx+8], edx
; Line 18265
	mov	edx, DWORD PTR [esi+eax*4]
	cmp	edx, edi
	je	SHORT $LN1@pager_resi
; Line 18266
	mov	DWORD PTR [edx+12], ecx
$LN1@pager_resi:
; Line 18268
	mov	DWORD PTR [esi+eax*4], ecx
; Line 18269
	mov	DWORD PTR [ecx+12], edi
$LN4@pager_resi:
	mov	ecx, DWORD PTR [ecx+24]
	cmp	ecx, edi
	jne	SHORT $LL5@pager_resi
$LN3@pager_resi:
	pop	edi
	pop	esi
	pop	ebp
; Line 18271
	ret	0
_pager_resize_hash_table ENDP
_TEXT	ENDS
PUBLIC	_pzMaster$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _readMasterJournal
_TEXT	SEGMENT
_pzMaster$GSCopy$ = -32					; size = 4
_cksum$ = -28						; size = 4
_szJ$ = -24						; size = 8
_len$ = -16						; size = 4
_aMagic$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_pzMaster$ = 8						; size = 4
_readMasterJournal PROC					; COMDAT
; _pJrnl$ = ebx
; Line 18388
	sub	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+32], eax
	push	ebp
	mov	ebp, DWORD PTR _pzMaster$[esp+32]
; Line 18396
	mov	DWORD PTR [ebp], 0
; Line 18398
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+36]
	lea	ecx, DWORD PTR _szJ$[esp+36]
	push	ecx
	push	ebx
; Line 18411
	mov	DWORD PTR _pzMaster$GSCopy$[esp+44], ebp
	call	edx
	add	esp, 8
	test	eax, eax
	jne	$LN16@readMaster
	mov	edx, DWORD PTR _szJ$[esp+40]
	test	edx, edx
	jl	$LN16@readMaster
; Line 18399
	mov	ecx, DWORD PTR _szJ$[esp+36]
	jg	SHORT $LN40@readMaster
	cmp	ecx, 16					; 00000010H
	jb	$LN16@readMaster
$LN40@readMaster:
; Line 18401
	mov	eax, DWORD PTR [ebx]
	sub	ecx, 16					; 00000010H
	sbb	edx, 0
	push	edx
	push	ecx
	mov	ecx, DWORD PTR [eax+16]
	push	ebx
	call	ecx
	add	esp, 12					; 0000000cH
; Line 18402
	test	eax, eax
	jne	$LN16@readMaster
; Line 18404
	lea	edx, DWORD PTR _len$[esp+36]
	push	edx
	mov	eax, ebx
	call	_read32bits
	add	esp, 4
; Line 18405
	test	eax, eax
	jne	$LN16@readMaster
; Line 18407
	lea	eax, DWORD PTR _cksum$[esp+36]
	push	eax
	mov	eax, ebx
	call	_read32bits
	add	esp, 4
; Line 18408
	test	eax, eax
	jne	$LN16@readMaster
; Line 18410
	mov	ecx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ecx+8]
	push	esi
	push	edi
	push	8
	lea	edx, DWORD PTR _aMagic$[esp+48]
	push	edx
	push	ebx
	call	eax
	add	esp, 12					; 0000000cH
; Line 18411
	test	eax, eax
	jne	$LN46@readMaster
	lea	ecx, DWORD PTR [eax+8]
	mov	edx, OFFSET _aJournalMagic
	lea	esi, DWORD PTR _aMagic$[esp+44]
$LL19@readMaster:
	mov	edi, DWORD PTR [esi]
	cmp	edi, DWORD PTR [edx]
	jne	SHORT $LN20@readMaster
	sub	ecx, 4
	add	edx, 4
	add	esi, 4
	cmp	ecx, 4
	jae	SHORT $LL19@readMaster
	test	ecx, ecx
	je	SHORT $LN45@readMaster
$LN20@readMaster:
	movzx	edi, BYTE PTR [esi]
	movzx	ebp, BYTE PTR [edx]
	sub	edi, ebp
	jne	SHORT $LN42@readMaster
	sub	ecx, 1
	add	edx, 1
	add	esi, 1
	test	ecx, ecx
	je	SHORT $LN43@readMaster
	movzx	edi, BYTE PTR [esi]
	movzx	ebp, BYTE PTR [edx]
	sub	edi, ebp
	jne	SHORT $LN42@readMaster
	sub	ecx, 1
	add	edx, 1
	add	esi, 1
	test	ecx, ecx
	je	SHORT $LN43@readMaster
	movzx	edi, BYTE PTR [esi]
	movzx	ebp, BYTE PTR [edx]
	sub	edi, ebp
	jne	SHORT $LN42@readMaster
	sub	ecx, 1
	add	edx, 1
	add	esi, 1
	test	ecx, ecx
	je	SHORT $LN43@readMaster
	movzx	edi, BYTE PTR [esi]
	movzx	ecx, BYTE PTR [edx]
	sub	edi, ecx
	je	SHORT $LN43@readMaster
$LN42@readMaster:
	test	edi, edi
	mov	ebp, DWORD PTR _pzMaster$GSCopy$[esp+44]
	mov	ecx, 1
	jg	SHORT $LN23@readMaster
	or	ecx, -1
	jmp	SHORT $LN23@readMaster
$LN43@readMaster:
	mov	ebp, DWORD PTR _pzMaster$GSCopy$[esp+44]
$LN45@readMaster:
	xor	ecx, ecx
$LN23@readMaster:
	test	ecx, ecx
	jne	$LN46@readMaster
; Line 18413
	mov	eax, DWORD PTR _szJ$[esp+44]
	mov	esi, DWORD PTR _len$[esp+44]
	mov	ecx, DWORD PTR _szJ$[esp+48]
	xor	edx, edx
	sub	eax, esi
	sbb	ecx, edx
	sub	eax, 16					; 00000010H
	sbb	ecx, edx
	mov	edx, DWORD PTR [ebx]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edx+16]
	push	ebx
	call	eax
	add	esp, 12					; 0000000cH
; Line 18414
	test	eax, eax
	jne	$LN46@readMaster
; Line 18416
	lea	edi, DWORD PTR [esi+1]
	call	_sqlite3Malloc
; Line 18417
	test	eax, eax
	mov	DWORD PTR [ebp], eax
	jne	SHORT $LN7@readMaster
	pop	edi
	pop	esi
; Line 18418
	mov	eax, 7
	pop	ebp
; Line 18444
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN7@readMaster:
; Line 18420
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+8]
	push	esi
	push	eax
	push	ebx
	call	edx
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 18421
	test	edi, edi
	je	SHORT $LN6@readMaster
; Line 18422
	mov	eax, DWORD PTR [ebp]
	push	eax
	call	_sqlite3FreeX
	add	esp, 4
; Line 18424
	mov	eax, edi
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp], 0
	pop	ebp
; Line 18444
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN6@readMaster:
; Line 18428
	mov	ecx, DWORD PTR _cksum$[esp+44]
	xor	eax, eax
	test	esi, esi
	jbe	SHORT $LN3@readMaster
	mov	edx, DWORD PTR [ebp]
$LL5@readMaster:
; Line 18429
	movsx	edi, BYTE PTR [edx+eax]
	add	eax, 1
	sub	ecx, edi
	cmp	eax, esi
	jb	SHORT $LL5@readMaster
$LN3@readMaster:
; Line 18431
	test	ecx, ecx
	je	SHORT $LN2@readMaster
; Line 18437
	mov	ecx, DWORD PTR [ebp]
	push	ecx
	call	_sqlite3FreeX
	add	esp, 4
	pop	edi
	pop	esi
; Line 18438
	mov	DWORD PTR [ebp], 0
; Line 18443
	xor	eax, eax
	pop	ebp
; Line 18444
	mov	ecx, DWORD PTR __$ArrayPad$[esp+32]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
$LN2@readMaster:
; Line 18440
	mov	edx, DWORD PTR [ebp]
	mov	BYTE PTR [esi+edx], 0
; Line 18443
	xor	eax, eax
$LN46@readMaster:
	pop	edi
	pop	esi
$LN16@readMaster:
; Line 18444
	mov	ecx, DWORD PTR __$ArrayPad$[esp+36]
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	ret	0
_readMasterJournal ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_end_transaction
_TEXT	SEGMENT
_pager_end_transaction PROC				; COMDAT
; _pPager$ = eax
; Line 18771
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, eax
; Line 18773
	xor	ebx, ebx
	xor	esi, esi
; Line 18774
	xor	ebp, ebp
; Line 18776
	cmp	BYTE PTR [edi+10], 2
	jae	SHORT $LN13@pager_end_
	pop	edi
	pop	esi
	pop	ebp
; Line 18777
	xor	eax, eax
	pop	ebx
; Line 18829
	ret	0
$LN13@pager_end_:
; Line 18779
	call	_sqlite3PagerStmtCommit
; Line 18780
	cmp	BYTE PTR [edi+4], bl
	je	SHORT $LN12@pager_end_
	cmp	BYTE PTR [edi+19], bl
	jne	SHORT $LN12@pager_end_
; Line 18781
	lea	eax, DWORD PTR [edi+104]
	cmp	eax, ebx
	je	SHORT $LN19@pager_end_
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebx
	je	SHORT $LN19@pager_end_
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	edx
	add	esp, 4
$LN19@pager_end_:
; Line 18782
	mov	BYTE PTR [edi+4], bl
$LN12@pager_end_:
; Line 18784
	cmp	BYTE PTR [edi], bl
	je	$LN11@pager_end_
; Line 18786
	cmp	BYTE PTR [edi+19], bl
	je	SHORT $LN10@pager_end_
	mov	eax, DWORD PTR [edi+100]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	push	ebx
	push	ebx
	push	eax
	call	edx
	mov	esi, eax
	add	esp, 12					; 0000000cH
	cmp	esi, ebx
	jne	SHORT $LN10@pager_end_
; Line 18787
	mov	eax, DWORD PTR [edi+100]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	ebx
	push	ebx
	push	eax
	call	edx
	add	esp, 12					; 0000000cH
; Line 18788
	mov	DWORD PTR [edi+136], ebx
	mov	DWORD PTR [edi+140], ebx
; Line 18789
	mov	BYTE PTR [edi+1], bl
; Line 18790
	jmp	SHORT $LN8@pager_end_
$LN10@pager_end_:
; Line 18791
	lea	eax, DWORD PTR [edi+100]
	cmp	eax, ebx
	je	SHORT $LN27@pager_end_
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebx
	je	SHORT $LN27@pager_end_
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	edx
	add	esp, 4
$LN27@pager_end_:
; Line 18793
	cmp	esi, ebx
	mov	BYTE PTR [edi], bl
	jne	SHORT $LN8@pager_end_
; Line 18794
	mov	eax, DWORD PTR [edi+88]
	call	_sqlite3WinDelete
	mov	esi, eax
$LN8@pager_end_:
; Line 18797
	mov	eax, DWORD PTR [edi+76]
	cmp	eax, ebx
	je	SHORT $LN33@pager_end_
	push	eax
	call	_free
	add	esp, 4
$LN33@pager_end_:
; Line 18799
	mov	eax, DWORD PTR [edi+124]
	cmp	eax, ebx
	mov	DWORD PTR [edi+76], ebx
	je	SHORT $LN5@pager_end_
$LL7@pager_end_:
; Line 18800
	mov	BYTE PTR [eax+28], bl
; Line 18801
	mov	BYTE PTR [eax+29], bl
; Line 18802
	mov	BYTE PTR [eax+30], bl
; Line 18803
	mov	BYTE PTR [eax+31], bl
	mov	eax, DWORD PTR [eax+24]
	cmp	eax, ebx
	jne	SHORT $LL7@pager_end_
$LN5@pager_end_:
; Line 18808
	mov	DWORD PTR [edi+132], ebx
; Line 18809
	mov	BYTE PTR [edi+14], bl
; Line 18810
	mov	DWORD PTR [edi+40], ebx
$LN11@pager_end_:
; Line 18816
	cmp	BYTE PTR [edi+19], bl
	jne	SHORT $LN3@pager_end_
; Line 18817
	mov	eax, DWORD PTR [edi+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	push	1
	push	eax
	call	edx
	add	esp, 8
	mov	ebp, eax
; Line 18818
	mov	BYTE PTR [edi+10], 1
	jmp	SHORT $LN1@pager_end_
$LN3@pager_end_:
; Line 18819
	cmp	BYTE PTR [edi+10], 5
	jne	SHORT $LN1@pager_end_
; Line 18820
	mov	BYTE PTR [edi+10], 4
$LN1@pager_end_:
; Line 18828
	cmp	esi, ebx
	mov	eax, DWORD PTR [edi+112]
	mov	DWORD PTR [edi+120], eax
	mov	DWORD PTR [edi+32], ebx
	mov	BYTE PTR [edi+17], bl
	mov	BYTE PTR [edi+13], bl
	mov	DWORD PTR [edi+28], -1
	mov	eax, ebp
	je	SHORT $LN14@pager_end_
	mov	eax, esi
$LN14@pager_end_:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 18829
	ret	0
_pager_end_transaction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_truncate
_TEXT	SEGMENT
_pager_truncate PROC					; COMDAT
; _pPager$ = esi
; _nPage$ = ebx
; Line 19077
	push	edi
; Line 19078
	xor	edi, edi
; Line 19079
	cmp	BYTE PTR [esi+10], 4
	jb	SHORT $LN7@pager_trun@2
; Line 19080
	mov	eax, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR [esi+96]
	imul	ebx
	mov	edi, DWORD PTR [ecx]
	push	edx
	push	eax
	mov	eax, DWORD PTR [edi+20]
	push	ecx
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 19082
	test	edi, edi
	jne	SHORT $LN1@pager_trun@2
$LN7@pager_trun@2:
; Line 19084
	push	esi
	mov	DWORD PTR [esi+28], ebx
	call	_pager_truncate_cache
	add	esp, 4
; Line 19086
	mov	eax, edi
$LN1@pager_trun@2:
	pop	edi
; Line 19087
	ret	0
_pager_truncate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_stmt_playback
_TEXT	SEGMENT
_nJRec$84634 = -20					; size = 4
_dummy$84635 = -16					; size = 4
_hdrOff$ = -16						; size = 8
_szJ$ = -8						; size = 8
_pager_stmt_playback PROC				; COMDAT
; _pPager$ = eax
; Line 19287
	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	push	esi
	mov	esi, eax
; Line 19309
	mov	ebx, DWORD PTR [esi+152]
	mov	ebp, DWORD PTR [esi+156]
	mov	eax, DWORD PTR [esi+136]
	mov	ecx, DWORD PTR [esi+140]
; Line 19311
	mov	edx, ebx
	or	edx, ebp
	push	edi
	mov	DWORD PTR _szJ$[esp+36], eax
	mov	DWORD PTR _szJ$[esp+40], ecx
	mov	DWORD PTR _hdrOff$[esp+40], ebp
	jne	SHORT $LN18@pager_stmt
; Line 19312
	mov	ebp, ecx
	mov	ebx, eax
	mov	DWORD PTR _hdrOff$[esp+40], ebp
$LN18@pager_stmt:
; Line 19317
	cmp	BYTE PTR [esi+10], 4
	mov	edi, DWORD PTR [esi+36]
	jb	SHORT $LN41@pager_stmt
	mov	eax, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR [esi+96]
	imul	edi
	mov	ebp, DWORD PTR [ecx]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ebp+20]
	push	ecx
	call	eax
	mov	ebp, DWORD PTR _hdrOff$[esp+52]
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN21@pager_stmt
$LN41@pager_stmt:
	push	esi
	mov	DWORD PTR [esi+28], edi
	call	_pager_truncate_cache
	add	esp, 4
$LN21@pager_stmt:
; Line 19323
	mov	eax, DWORD PTR [esi+104]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	0
	push	0
	push	eax
	call	edx
; Line 19331
	mov	edi, DWORD PTR [esi+48]
	add	esp, 12					; 0000000cH
	sub	edi, 1
	js	SHORT $LN15@pager_stmt
	npad	9
$LL17@pager_stmt:
; Line 19332
	mov	eax, DWORD PTR [esi+104]
	push	0
	call	_pager_playback_one_page
	add	esp, 4
; Line 19334
	test	eax, eax
	jne	$LN1@pager_stmt
; Line 19331
	sub	edi, 1
	jns	SHORT $LL17@pager_stmt
$LN15@pager_stmt:
; Line 19345
	mov	edx, DWORD PTR [esi+172]
	mov	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR [esi+168]
	mov	edi, DWORD PTR [eax]
	push	edx
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edi+16]
	call	eax
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 19346
	test	edi, edi
	jne	$LN53@pager_stmt
; Line 19349
	mov	ecx, DWORD PTR [esi+168]
	mov	edx, DWORD PTR [esi+172]
; Line 19350
	mov	eax, DWORD PTR [esi+160]
	mov	DWORD PTR [esi+136], ecx
; Line 19351
	mov	ecx, edx
	cmp	ecx, ebp
	mov	DWORD PTR [esi+140], edx
	mov	DWORD PTR [esi+44], eax
	jg	SHORT $LN43@pager_stmt
	jl	SHORT $LL12@pager_stmt
	mov	edx, DWORD PTR [esi+136]
	cmp	edx, ebx
	jae	SHORT $LN43@pager_stmt
$LL12@pager_stmt:
; Line 19352
	mov	eax, DWORD PTR [esi+100]
	push	1
	call	_pager_playback_one_page
	mov	edi, eax
	add	esp, 4
; Line 19354
	test	edi, edi
	jne	$LN53@pager_stmt
	mov	eax, DWORD PTR [esi+140]
	cmp	eax, ebp
	jl	SHORT $LL12@pager_stmt
; Line 19351
	jg	SHORT $LN43@pager_stmt
	mov	ecx, DWORD PTR [esi+136]
	cmp	ecx, ebx
	jb	SHORT $LL12@pager_stmt
$LN43@pager_stmt:
; Line 19357
	mov	edx, DWORD PTR [esi+140]
	mov	ebx, DWORD PTR _szJ$[esp+40]
	cmp	edx, ebx
	mov	ebp, DWORD PTR _szJ$[esp+36]
	jg	$LN46@pager_stmt
	jl	SHORT $LN9@pager_stmt
	mov	eax, DWORD PTR [esi+136]
	cmp	eax, ebp
	jae	$LN46@pager_stmt
	jmp	SHORT $LN9@pager_stmt
	npad	8
$LL58@pager_stmt:
	mov	ebx, DWORD PTR _szJ$[esp+40]
$LN9@pager_stmt:
; Line 19360
	lea	ecx, DWORD PTR _nJRec$84634[esp+36]
	push	ecx
	push	ebx
	push	ebp
	lea	ecx, DWORD PTR _dummy$84635[esp+48]
	mov	edi, esi
	call	_readJournalHdr
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 19361
	test	edi, edi
	jne	$LN53@pager_stmt
; Line 19365
	mov	eax, DWORD PTR _nJRec$84634[esp+36]
	test	eax, eax
	jne	SHORT $LN6@pager_stmt
; Line 19366
	mov	eax, DWORD PTR [esi+56]
	add	eax, 8
	cdq
	mov	ecx, ebp
	sub	ecx, DWORD PTR [esi+136]
	push	edx
	sbb	ebx, DWORD PTR [esi+140]
	push	eax
	push	ebx
	push	ecx
	call	__alldiv
	mov	DWORD PTR _nJRec$84634[esp+36], eax
$LN6@pager_stmt:
; Line 19368
	lea	ebx, DWORD PTR [eax-1]
	test	ebx, ebx
	jl	SHORT $LN59@pager_stmt
$LL5@pager_stmt:
	mov	edx, DWORD PTR [esi+140]
	cmp	edx, DWORD PTR _szJ$[esp+40]
	jg	SHORT $LN59@pager_stmt
	jl	SHORT $LN45@pager_stmt
	mov	eax, DWORD PTR [esi+136]
	cmp	eax, ebp
	jae	SHORT $LN59@pager_stmt
$LN45@pager_stmt:
; Line 19369
	mov	eax, DWORD PTR [esi+100]
	push	1
	call	_pager_playback_one_page
	mov	edi, eax
	add	esp, 4
; Line 19371
	test	edi, edi
	jne	SHORT $LN53@pager_stmt
; Line 19368
	sub	ebx, 1
	jns	SHORT $LL5@pager_stmt
$LN59@pager_stmt:
; Line 19357
	mov	ecx, DWORD PTR [esi+140]
	cmp	ecx, DWORD PTR _szJ$[esp+40]
	jl	$LL58@pager_stmt
	jg	SHORT $LN60@pager_stmt
	mov	edx, DWORD PTR [esi+136]
	cmp	edx, ebp
	jb	$LL58@pager_stmt
$LN60@pager_stmt:
	mov	ebx, DWORD PTR _szJ$[esp+40]
$LN46@pager_stmt:
$end_stmt_playback$84624:
; Line 19379
	mov	DWORD PTR [esi+136], ebp
	mov	DWORD PTR [esi+140], ebx
$LN53@pager_stmt:
; Line 19382
	mov	eax, edi
$LN1@pager_stmt:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 19383
	add	esp, 20					; 00000014H
	ret	0
_pager_stmt_playback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerTruncate
_TEXT	SEGMENT
_sqlite3PagerTruncate PROC				; COMDAT
; _pPager$ = eax
; _nPage$ = edi
; Line 19932
	push	esi
	mov	esi, eax
; Line 19935
	call	_sqlite3PagerPagecount
; Line 19936
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
; Line 19938
	jne	SHORT $LN6@sqlite3Pag@13
; Line 19940
	cmp	edi, DWORD PTR [esi+28]
; Line 19941
	jae	SHORT $LN9@sqlite3Pag@13
; Line 19943
	cmp	BYTE PTR [esi+16], al
	je	SHORT $LN3@sqlite3Pag@13
; Line 19945
	push	esi
	mov	DWORD PTR [esi+28], edi
	call	_pager_truncate_cache
	add	esp, 4
$LN9@sqlite3Pag@13:
; Line 19946
	xor	eax, eax
	pop	esi
; Line 19961
	ret	0
$LN3@sqlite3Pag@13:
; Line 19948
	call	_syncJournal
; Line 19949
	test	eax, eax
; Line 19950
	jne	SHORT $LN6@sqlite3Pag@13
	push	ebx
; Line 19954
	push	esi
	lea	ebx, DWORD PTR [eax+4]
	call	_pager_wait_on_lock
	add	esp, 4
; Line 19955
	test	eax, eax
; Line 19956
	jne	SHORT $LN8@sqlite3Pag@13
; Line 19959
	mov	ebx, edi
	call	_pager_truncate
$LN8@sqlite3Pag@13:
	pop	ebx
$LN6@sqlite3Pag@13:
	pop	esi
; Line 19961
	ret	0
_sqlite3PagerTruncate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _hasHotJournal
_TEXT	SEGMENT
_hasHotJournal PROC					; COMDAT
; _pPager$ = eax
; Line 20352
	push	esi
	mov	esi, eax
; Line 20353
	cmp	BYTE PTR [esi+2], 0
	je	SHORT $LN10@hasHotJour
; Line 20354
	mov	eax, DWORD PTR [esi+88]
	call	_sqlite3WinFileExists
	test	eax, eax
; Line 20355
	je	SHORT $LN10@hasHotJour
; Line 20357
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+52]
	push	eax
	call	edx
	add	esp, 4
	test	eax, eax
; Line 20358
	jne	SHORT $LN10@hasHotJour
; Line 20360
	call	_sqlite3PagerPagecount
	test	eax, eax
	jne	SHORT $LN2@hasHotJour
; Line 20361
	mov	eax, DWORD PTR [esi+88]
	call	_sqlite3WinDelete
$LN10@hasHotJour:
; Line 20362
	xor	eax, eax
	pop	esi
; Line 20366
	ret	0
$LN2@hasHotJour:
; Line 20364
	mov	eax, 1
	pop	esi
; Line 20366
	ret	0
_hasHotJournal ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pagerAllocatePage
_TEXT	SEGMENT
_pPg$ = -4						; size = 4
_rc$ = -4						; size = 4
_ppPg$ = 8						; size = 4
_pagerAllocatePage PROC					; COMDAT
; _pPager$ = eax
; Line 20744
	push	ecx
	push	ebx
	mov	ebx, eax
; Line 20754
	mov	ecx, DWORD PTR [ebx+60]
	cmp	ecx, DWORD PTR [ebx+68]
	push	esi
	mov	DWORD PTR _rc$[esp+12], 0
	jl	SHORT $LN8@pagerAlloc
	cmp	DWORD PTR [ebx+112], 0
	je	SHORT $LN8@pagerAlloc
	cmp	BYTE PTR [ebx+16], 0
	jne	SHORT $LN8@pagerAlloc
	cmp	DWORD PTR [ebx+120], 0
	jne	SHORT $LN9@pagerAlloc
	cmp	BYTE PTR [ebx+18], 0
	jne	SHORT $LN8@pagerAlloc
$LN9@pagerAlloc:
; Line 20780
	lea	eax, DWORD PTR _pPg$[esp+12]
	push	eax
	push	1
	mov	eax, ebx
	call	_pager_recycle
	add	esp, 8
; Line 20781
	cmp	eax, 5
	jne	SHORT $LN2@pagerAlloc
	pop	esi
; Line 20782
	mov	eax, 2826				; 00000b0aH
	pop	ebx
; Line 20794
	pop	ecx
	ret	0
$LN2@pagerAlloc:
; Line 20784
	test	eax, eax
	jne	SHORT $pager_allocate_out$85052
	mov	esi, DWORD PTR _pPg$[esp+12]
; Line 20790
	mov	ecx, DWORD PTR _ppPg$[esp+8]
	mov	DWORD PTR [ecx], esi
$pager_allocate_out$85052:
	pop	esi
	pop	ebx
; Line 20794
	pop	ecx
	ret	0
$LN8@pagerAlloc:
; Line 20755
	mov	eax, DWORD PTR [ebx+188]
	cmp	ecx, eax
	jl	SHORT $LN38@pagerAlloc
; Line 20757
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN12@pagerAlloc
	mov	eax, 256				; 00000100H
	jmp	SHORT $LN13@pagerAlloc
$LN12@pagerAlloc:
	add	eax, eax
$LN13@pagerAlloc:
	push	eax
	call	_pager_resize_hash_table
	add	esp, 4
; Line 20758
	cmp	DWORD PTR [ebx+188], 0
	jne	SHORT $LN38@pagerAlloc
$LN41@pagerAlloc:
	pop	esi
; Line 20759
	mov	eax, 7
	pop	ebx
; Line 20794
	pop	ecx
	ret	0
$LN38@pagerAlloc:
; Line 20765
	movzx	eax, BYTE PTR [ebx+16]
	mov	edx, DWORD PTR [ebx+56]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [ebx+52]
	lea	eax, DWORD PTR [eax+ecx+52]
	xor	esi, esi
	test	eax, eax
	jle	SHORT $LN39@pagerAlloc
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	push	edi
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN18@pagerAlloc
	test	edi, edi
	jg	SHORT $LN40@pagerAlloc
$LN18@pagerAlloc:
	push	eax
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN40@pagerAlloc
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN28@pagerAlloc
	test	edi, edi
	jg	SHORT $LN40@pagerAlloc
$LN28@pagerAlloc:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN40@pagerAlloc:
	pop	edi
$LN39@pagerAlloc:
; Line 20766
	test	esi, esi
; Line 20768
	je	SHORT $LN41@pagerAlloc
; Line 20770
	push	48					; 00000030H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 20771
	cmp	BYTE PTR [ebx+16], 0
	je	SHORT $LN4@pagerAlloc
; Line 20772
	mov	edx, DWORD PTR [ebx+56]
	xor	eax, eax
	add	edx, DWORD PTR [ebx+52]
	mov	DWORD PTR [edx+esi+48], eax
	lea	ecx, DWORD PTR [edx+esi+48]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
$LN4@pagerAlloc:
; Line 20790
	mov	ecx, DWORD PTR _ppPg$[esp+8]
	mov	DWORD PTR [esi], ebx
	mov	eax, DWORD PTR [ebx+124]
	mov	DWORD PTR [esi+24], eax
	add	DWORD PTR [ebx+60], 1
	mov	eax, DWORD PTR _rc$[esp+12]
	mov	DWORD PTR [ebx+124], esi
	mov	DWORD PTR [ecx], esi
	pop	esi
	pop	ebx
; Line 20794
	pop	ecx
	ret	0
_pagerAllocatePage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerCommitPhaseTwo
_TEXT	SEGMENT
_pPager$ = 8						; size = 4
_sqlite3PagerCommitPhaseTwo PROC			; COMDAT
; Line 21748
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pPager$[esp+4]
; Line 21752
	mov	eax, DWORD PTR [ebp+24]
	xor	ebx, ebx
	cmp	eax, ebx
; Line 21753
	jne	$LN6@sqlite3Pag@14
; Line 21755
	cmp	BYTE PTR [ebp+10], 2
	jae	SHORT $LN4@sqlite3Pag@14
	pop	ebp
; Line 21756
	lea	eax, DWORD PTR [ebx+1]
	pop	ebx
; Line 21788
	ret	0
$LN4@sqlite3Pag@14:
; Line 21759
	cmp	BYTE PTR [ebp+16], bl
	je	SHORT $LN3@sqlite3Pag@14
	push	edi
; Line 21760
	mov	edi, DWORD PTR [ebp+132]
; Line 21761
	cmp	edi, ebx
	je	SHORT $LN1@sqlite3Pag@14
	push	esi
$LL2@sqlite3Pag@14:
; Line 21762
	mov	eax, DWORD PTR [ebp+52]
	mov	ecx, DWORD PTR [ebp+56]
	add	eax, edi
	lea	esi, DWORD PTR [eax+ecx+48]
; Line 21763
	mov	eax, DWORD PTR [esi]
	cmp	eax, ebx
	je	SHORT $LN15@sqlite3Pag@14
	push	eax
	call	_free
	add	esp, 4
$LN15@sqlite3Pag@14:
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, ebx
	je	SHORT $LN20@sqlite3Pag@14
	push	eax
	call	_free
	add	esp, 4
$LN20@sqlite3Pag@14:
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], ebx
; Line 21764
	mov	BYTE PTR [edi+29], bl
; Line 21765
	mov	BYTE PTR [edi+28], bl
; Line 21766
	mov	BYTE PTR [esi+16], bl
; Line 21767
	mov	BYTE PTR [edi+30], bl
; Line 21768
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
; Line 21769
	mov	edi, DWORD PTR [edi+36]
	cmp	edi, ebx
	jne	SHORT $LL2@sqlite3Pag@14
	pop	esi
$LN1@sqlite3Pag@14:
	pop	edi
; Line 21771
	mov	DWORD PTR [ebp+132], ebx
; Line 21780
	mov	DWORD PTR [ebp+128], ebx
; Line 21781
	mov	BYTE PTR [ebp+10], 1
	pop	ebp
; Line 21782
	xor	eax, eax
	pop	ebx
; Line 21788
	ret	0
$LN3@sqlite3Pag@14:
; Line 21786
	mov	eax, ebp
	call	_pager_end_transaction
; Line 21787
	mov	ecx, eax
	and	ecx, 255				; 000000ffH
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN22@sqlite3Pag@14
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN22@sqlite3Pag@14
	cmp	ecx, 11					; 0000000bH
	jne	SHORT $LN6@sqlite3Pag@14
$LN22@sqlite3Pag@14:
	mov	DWORD PTR [ebp+24], eax
$LN6@sqlite3Pag@14:
	pop	ebp
	pop	ebx
; Line 21788
	ret	0
_sqlite3PagerCommitPhaseTwo ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerStmtRollback
_TEXT	SEGMENT
_sqlite3PagerStmtRollback PROC				; COMDAT
; _pPager$ = eax
; Line 21996
	push	ebx
	push	edi
	mov	edi, eax
; Line 21998
	xor	ebx, ebx
	cmp	BYTE PTR [edi+5], bl
	je	$LN8@sqlite3Pag@15
; Line 22000
	cmp	BYTE PTR [edi+16], bl
	push	esi
	je	SHORT $LN7@sqlite3Pag@15
; Line 22003
	mov	eax, DWORD PTR [edi+128]
	cmp	eax, ebx
	je	SHORT $LN4@sqlite3Pag@15
	npad	1
$LL6@sqlite3Pag@15:
; Line 22004
	mov	ecx, DWORD PTR [edi+56]
	mov	edx, DWORD PTR [edi+52]
	add	edx, ecx
	lea	esi, DWORD PTR [edx+eax+48]
; Line 22005
	mov	edx, DWORD PTR [esi+4]
	cmp	edx, ebx
	je	SHORT $LN5@sqlite3Pag@15
; Line 22006
	push	ecx
	push	edx
	add	eax, 48					; 00000030H
	push	eax
	call	_memcpy
; Line 22007
	mov	eax, DWORD PTR [esi+4]
	add	esp, 12					; 0000000cH
	cmp	eax, ebx
	je	SHORT $LN14@sqlite3Pag@15
	push	eax
	call	_free
	add	esp, 4
$LN14@sqlite3Pag@15:
; Line 22008
	mov	DWORD PTR [esi+4], ebx
$LN5@sqlite3Pag@15:
; Line 22003
	mov	eax, DWORD PTR [esi+8]
	cmp	eax, ebx
	jne	SHORT $LL6@sqlite3Pag@15
$LN4@sqlite3Pag@15:
; Line 22011
	mov	eax, DWORD PTR [edi+36]
; Line 22012
	push	edi
	mov	DWORD PTR [edi+28], eax
	call	_pager_truncate_cache
	add	esp, 4
; Line 22013
	xor	esi, esi
; Line 22017
	call	_sqlite3PagerStmtCommit
; Line 22022
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [edi+6], bl
	pop	edi
	pop	ebx
; Line 22023
	ret	0
$LN7@sqlite3Pag@15:
; Line 22015
	call	_pager_stmt_playback
	mov	esi, eax
; Line 22017
	call	_sqlite3PagerStmtCommit
; Line 22022
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [edi+6], bl
	pop	edi
	pop	ebx
; Line 22023
	ret	0
$LN8@sqlite3Pag@15:
; Line 22021
	mov	BYTE PTR [edi+6], bl
	pop	edi
	xor	eax, eax
	pop	ebx
; Line 22023
	ret	0
_sqlite3PagerStmtRollback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _lockTable
_TEXT	SEGMENT
_iTable$ = 8						; size = 4
_eLock$ = 12						; size = 1
_lockTable PROC						; COMDAT
; _p$ = esi
; Line 22938
	cmp	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, 0
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _iTable$[esp+4]
	push	edi
	mov	edi, DWORD PTR [esi+4]
	mov	ebx, 1
	jne	SHORT $LN72@lockTable
	add	DWORD PTR _inMutex, ebx
	call	DWORD PTR __imp__TlsAlloc@0
	sub	DWORD PTR _inMutex, ebx
	cmp	eax, -1
	mov	DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9, eax
	je	SHORT $LN73@lockTable
	mov	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, ebx
	jmp	SHORT $LN36@lockTable
$LN72@lockTable:
	mov	eax, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
$LN36@lockTable:
	push	eax
	call	DWORD PTR __imp__TlsGetValue@4
	test	eax, eax
	jne	SHORT $LN15@lockTable
$LN73@lockTable:
	mov	eax, OFFSET ?zeroData@?1??sqlite3ThreadDataReadOnly@@9@9
$LN15@lockTable:
	cmp	BYTE PTR [eax+4], 0
; Line 22939
	je	$LN1@lockTable
; Line 22954
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN74@lockTable
	test	DWORD PTR [eax+8], 16384		; 00004000H
	je	SHORT $LN74@lockTable
	cmp	BYTE PTR _eLock$[esp+8], bl
	jne	SHORT $LN74@lockTable
	cmp	ebp, ebx
; Line 22955
	jne	$LN1@lockTable
$LN74@lockTable:
; Line 22959
	mov	eax, DWORD PTR [edi+68]
	test	eax, eax
	je	SHORT $LN70@lockTable
	npad	1
$LL7@lockTable:
; Line 22960
	cmp	DWORD PTR [eax+4], ebp
	jne	SHORT $LN6@lockTable
	cmp	DWORD PTR [eax], esi
	je	SHORT $LN3@lockTable
$LN6@lockTable:
; Line 22959
	mov	eax, DWORD PTR [eax+12]
	test	eax, eax
	jne	SHORT $LL7@lockTable
$LN70@lockTable:
; Line 22970
	xor	eax, eax
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN49@lockTable
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN76@lockTable
$LN49@lockTable:
	push	16					; 00000010H
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN71@lockTable
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN75@lockTable
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN76@lockTable
$LN75@lockTable:
	add	DWORD PTR _inMutex, ebx
	mov	DWORD PTR _sqlite3_mallocHasFailed, ebx
	jmp	SHORT $LN76@lockTable
$LN71@lockTable:
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
$LN76@lockTable:
; Line 22971
	test	eax, eax
	jne	SHORT $LN2@lockTable
	pop	edi
	pop	ebp
; Line 22972
	mov	eax, 7
	pop	ebx
; Line 22990
	ret	0
$LN2@lockTable:
; Line 22974
	mov	DWORD PTR [eax+4], ebp
; Line 22975
	mov	DWORD PTR [eax], esi
; Line 22976
	mov	ecx, DWORD PTR [edi+68]
	mov	DWORD PTR [eax+12], ecx
; Line 22977
	mov	DWORD PTR [edi+68], eax
$LN3@lockTable:
; Line 22985
	mov	cl, BYTE PTR _eLock$[esp+8]
	cmp	cl, BYTE PTR [eax+8]
	jbe	SHORT $LN1@lockTable
; Line 22986
	mov	BYTE PTR [eax+8], cl
$LN1@lockTable:
	pop	edi
	pop	ebp
; Line 22989
	xor	eax, eax
	pop	ebx
; Line 22990
	ret	0
_lockTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _defragmentPage
_TEXT	SEGMENT
tv185 = -56						; size = 4
_nCell$ = -52						; size = 4
_cellOffset$ = -48					; size = 4
_temp$ = -44						; size = 4
tv278 = -40						; size = 4
_hdr$ = -36						; size = 4
_info$111815 = -32					; size = 32
_pPage$ = 8						; size = 4
_defragmentPage PROC					; COMDAT
; Line 23417
	sub	esp, 56					; 00000038H
	push	esi
; Line 23434
	mov	esi, DWORD PTR _pPage$[esp+56]
	mov	eax, DWORD PTR [esi+64]
	push	edi
	movzx	edi, WORD PTR [eax+24]
	call	_sqlite3Malloc
; Line 23435
	test	eax, eax
	mov	DWORD PTR _temp$[esp+64], eax
	jne	SHORT $LN4@defragment
	pop	edi
	mov	eax, 7
	pop	esi
; Line 23464
	add	esp, 56					; 00000038H
	ret	0
$LN4@defragment:
; Line 23438
	movzx	ecx, WORD PTR [esi+14]
	movzx	edi, BYTE PTR [esi+8]
; Line 23439
	movzx	edx, WORD PTR [esi+20]
	mov	DWORD PTR _cellOffset$[esp+64], ecx
; Line 23441
	mov	ecx, DWORD PTR [esi+64]
	push	ebx
	movzx	ebx, WORD PTR [ecx+26]
; Line 23442
	xor	ecx, ecx
	push	ebp
	mov	ebp, DWORD PTR [esi+68]
	mov	ch, BYTE PTR [edi+ebp+5]
	mov	DWORD PTR _nCell$[esp+72], edx
; Line 23443
	mov	edx, ebx
	mov	DWORD PTR _hdr$[esp+72], edi
	mov	cl, BYTE PTR [edi+ebp+6]
	sub	edx, ecx
	push	edx
	lea	edx, DWORD PTR [ecx+ebp]
	push	edx
	add	ecx, eax
	push	ecx
	call	_memcpy
; Line 23445
	mov	eax, DWORD PTR _nCell$[esp+84]
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN1@defragment
	mov	ecx, DWORD PTR _cellOffset$[esp+72]
	lea	edi, DWORD PTR [ecx+ebp]
	mov	DWORD PTR tv185[esp+72], eax
	jmp	SHORT $LN3@defragment
	npad	1
$LL16@defragment:
; Line 23436
	mov	esi, DWORD PTR _pPage$[esp+68]
$LN3@defragment:
; Line 23450
	mov	edx, DWORD PTR _temp$[esp+72]
	xor	eax, eax
	mov	ah, BYTE PTR [edi]
	mov	al, BYTE PTR [edi+1]
	add	eax, edx
	push	eax
	push	esi
	lea	esi, DWORD PTR _info$111815[esp+80]
	mov	DWORD PTR tv278[esp+80], eax
	call	_sqlite3BtreeParseCellPtr
	movzx	eax, WORD PTR _info$111815[esp+110]
; Line 23452
	push	eax
	sub	ebx, eax
	mov	eax, DWORD PTR tv278[esp+84]
	push	eax
	lea	ecx, DWORD PTR [ebx+ebp]
	push	ecx
	call	_memcpy
; Line 23453
	mov	edx, ebx
	sar	edx, 8
	mov	BYTE PTR [edi], dl
	mov	BYTE PTR [edi+1], bl
	add	esp, 20					; 00000014H
	add	edi, 2
	sub	DWORD PTR tv185[esp+72], 1
	jne	SHORT $LL16@defragment
	mov	edi, DWORD PTR _hdr$[esp+72]
	mov	eax, DWORD PTR _nCell$[esp+72]
$LN1@defragment:
; Line 23460
	mov	edx, DWORD PTR _cellOffset$[esp+72]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	ecx, ebx
	mov	BYTE PTR [edi+ebp+6], bl
; Line 23461
	sub	ebx, eax
	push	ebx
	add	eax, ebp
	sar	ecx, 8
	push	0
	push	eax
	mov	BYTE PTR [edi+ebp+5], cl
	mov	BYTE PTR [edi+ebp+1], 0
	mov	BYTE PTR [edi+ebp+2], 0
	mov	BYTE PTR [edi+ebp+7], 0
	call	_memset
; Line 23462
	mov	eax, DWORD PTR _temp$[esp+84]
	push	eax
	call	_free
	add	esp, 16					; 00000010H
	pop	ebp
	pop	ebx
	pop	edi
; Line 23463
	xor	eax, eax
	pop	esi
; Line 23464
	add	esp, 56					; 00000038H
	ret	0
_defragmentPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _allocateSpace
_TEXT	SEGMENT
tv307 = -4						; size = 4
tv364 = 8						; size = 4
_pPage$ = 8						; size = 4
_allocateSpace PROC					; COMDAT
; _nByte$ = eax
; Line 23478
	push	ecx
	push	ebx
	push	esi
; Line 23487
	mov	esi, DWORD PTR _pPage$[esp+8]
	mov	ecx, DWORD PTR [esi+68]
	mov	ebx, eax
; Line 23490
	cmp	ebx, 4
	jge	SHORT $LN12@allocateSp
	mov	ebx, 4
$LN12@allocateSp:
; Line 23491
	movzx	eax, WORD PTR [esi+18]
	movzx	edx, ax
	cmp	edx, ebx
	jl	$LN10@allocateSp
	cmp	BYTE PTR [esi+2], 0
	ja	$LN10@allocateSp
	push	ebp
	push	edi
; Line 23493
	movzx	edi, BYTE PTR [esi+8]
	sub	eax, ebx
	mov	WORD PTR [esi+18], ax
; Line 23495
	movzx	edx, BYTE PTR [edi+ecx+7]
; Line 23496
	cmp	edx, 60					; 0000003cH
	lea	eax, DWORD PTR [edi+ecx+7]
	mov	DWORD PTR tv307[esp+20], eax
	jge	SHORT $LN7@allocateSp
; Line 23500
	movzx	eax, BYTE PTR [ecx+edi+2]
	mov	ah, BYTE PTR [ecx+edi+1]
	lea	ebp, DWORD PTR [edi+1]
	mov	esi, eax
	test	esi, esi
	jle	SHORT $LN18@allocateSp
	npad	1
$LL8@allocateSp:
; Line 23501
	xor	eax, eax
	mov	ah, BYTE PTR [ecx+esi+2]
	mov	al, BYTE PTR [ecx+esi+3]
; Line 23502
	cmp	eax, ebx
	jge	SHORT $LN16@allocateSp
	xor	eax, eax
	mov	ah, BYTE PTR [esi+ecx]
; Line 23512
	mov	ebp, esi
	mov	al, BYTE PTR [esi+ecx+1]
	mov	esi, eax
	test	esi, esi
	jg	SHORT $LL8@allocateSp
$LN18@allocateSp:
; Line 23502
	mov	esi, DWORD PTR _pPage$[esp+16]
$LN7@allocateSp:
; Line 23519
	lea	ebp, DWORD PTR [edi+ecx+5]
	xor	eax, eax
; Line 23522
	cmp	edx, 60					; 0000003cH
	mov	ah, BYTE PTR [ebp]
	mov	DWORD PTR tv364[esp+16], ebp
	lea	ebp, DWORD PTR [edi+ecx+6]
	mov	al, BYTE PTR [ebp]
	jge	SHORT $LN2@allocateSp
	xor	edx, edx
	mov	dh, BYTE PTR [edi+ecx+3]
	mov	dl, BYTE PTR [edi+ecx+4]
	movzx	ecx, WORD PTR [esi+14]
	lea	edx, DWORD PTR [ecx+edx*2]
	mov	ecx, eax
	sub	ecx, ebx
	cmp	edx, ecx
	jle	SHORT $LN19@allocateSp
$LN2@allocateSp:
; Line 23523
	push	esi
	call	_defragmentPage
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@allocateSp
	pop	edi
	pop	ebp
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 23530
	pop	ecx
	ret	0
$LN16@allocateSp:
; Line 23503
	lea	edi, DWORD PTR [ebx+4]
	cmp	eax, edi
	jge	SHORT $LN5@allocateSp
; Line 23504
	mov	di, WORD PTR [esi+ecx]
	mov	WORD PTR [ecx+ebp], di
; Line 23505
	mov	ecx, DWORD PTR tv307[esp+20]
	pop	edi
	sub	dl, bl
	add	dl, al
	pop	ebp
; Line 23506
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [ecx], dl
	pop	ebx
; Line 23530
	pop	ecx
	ret	0
$LN5@allocateSp:
; Line 23508
	mov	edi, eax
	sub	edi, ebx
	mov	edx, edi
	sar	edx, 8
	sub	al, bl
	mov	BYTE PTR [esi+ecx+3], al
; Line 23509
	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	ebp
	mov	BYTE PTR [esi+ecx+2], dl
	pop	esi
	pop	ebx
; Line 23530
	pop	ecx
	ret	0
$LN1@allocateSp:
; Line 23524
	mov	edx, DWORD PTR tv364[esp+16]
	xor	eax, eax
	mov	ah, BYTE PTR [edx]
	mov	al, BYTE PTR [ebp]
$LN19@allocateSp:
; Line 23528
	mov	edx, DWORD PTR tv364[esp+16]
	sub	eax, ebx
	pop	edi
	mov	BYTE PTR [ebp], al
	pop	ebp
	mov	ecx, eax
	sar	ecx, 8
	pop	esi
	mov	BYTE PTR [edx], cl
	pop	ebx
; Line 23530
	pop	ecx
	ret	0
$LN10@allocateSp:
	pop	esi
; Line 23491
	xor	eax, eax
	pop	ebx
; Line 23530
	pop	ecx
	ret	0
_allocateSpace ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeRollbackStmt
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3BtreeRollbackStmt PROC				; COMDAT
; Line 25113
	mov	ecx, DWORD PTR _p$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx+4]
	xor	eax, eax
; Line 25115
	cmp	BYTE PTR [esi+12], al
	je	SHORT $LN1@sqlite3Btr@17
	cmp	BYTE PTR [esi+13], al
	jne	SHORT $LN1@sqlite3Btr@17
; Line 25116
	mov	eax, DWORD PTR [esi]
	call	_sqlite3PagerStmtRollback
; Line 25118
	mov	BYTE PTR [esi+12], 0
$LN1@sqlite3Btr@17:
	pop	esi
; Line 25122
	ret	0
_sqlite3BtreeRollbackStmt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _assemblePage
_TEXT	SEGMENT
tv184 = -8						; size = 4
_cellptr$ = -8						; size = 4
tv317 = -4						; size = 4
_pPage$ = 8						; size = 4
_nCell$ = 12						; size = 4
_apCell$ = 16						; size = 4
_assemblePage PROC					; COMDAT
; _aSize$ = eax
; Line 26955
	mov	edx, DWORD PTR _nCell$[esp-4]
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	mov	esi, eax
	xor	eax, eax
	xor	ecx, ecx
	test	edx, edx
	push	edi
	jle	SHORT $LN5@assemblePa
$LL7@assemblePa:
; Line 26956
	add	eax, DWORD PTR [esi+ecx*4]
	add	ecx, 1
	cmp	ecx, edx
	jl	SHORT $LL7@assemblePa
$LN5@assemblePa:
; Line 26960
	mov	edi, DWORD PTR _pPage$[esp+20]
	movzx	ecx, WORD PTR [edi+14]
; Line 26961
	mov	ebp, DWORD PTR [edi+68]
	mov	DWORD PTR _cellptr$[esp+24], ecx
; Line 26962
	movzx	ecx, BYTE PTR [edi+8]
; Line 26963
	mov	ebx, edx
	sar	ebx, 8
; Line 26964
	test	edx, edx
	mov	BYTE PTR [ecx+ebp+3], bl
	mov	BYTE PTR [ecx+ebp+4], dl
	je	$LN15@assemblePa
; Line 26965
	push	edi
	call	_allocateSpace
; Line 26968
	mov	ecx, DWORD PTR _nCell$[esp+24]
	mov	edx, ecx
	imul	edx, 65534				; 0000fffeH
	add	WORD PTR [edi+18], dx
	add	esp, 4
; Line 26969
	test	ecx, ecx
	mov	ebx, eax
	jle	SHORT $LN14@assemblePa
	mov	eax, DWORD PTR _cellptr$[esp+24]
	lea	edi, DWORD PTR [eax+ebp+1]
	mov	eax, DWORD PTR _apCell$[esp+20]
	sub	eax, esi
	mov	DWORD PTR tv317[esp+24], eax
	mov	DWORD PTR tv184[esp+24], ecx
	jmp	SHORT $LN3@assemblePa
	npad	2
$LL16@assemblePa:
; Line 26965
	mov	eax, DWORD PTR tv317[esp+24]
$LN3@assemblePa:
; Line 26970
	mov	ecx, ebx
	sar	ecx, 8
	mov	BYTE PTR [edi-1], cl
	mov	BYTE PTR [edi], bl
; Line 26971
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+esi]
	push	edx
	push	eax
	lea	ecx, DWORD PTR [ebx+ebp]
	push	ecx
	call	_memcpy
; Line 26973
	add	ebx, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	add	edi, 2
	add	esi, 4
	sub	DWORD PTR tv184[esp+24], 1
	jne	SHORT $LL16@assemblePa
; Line 26977
	mov	dx, WORD PTR _nCell$[esp+20]
	mov	eax, DWORD PTR _pPage$[esp+20]
	pop	edi
	pop	esi
	pop	ebp
	mov	WORD PTR [eax+20], dx
	pop	ebx
; Line 26978
	add	esp, 8
	ret	0
$LN14@assemblePa:
; Line 26977
	mov	WORD PTR [edi+20], cx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 26978
	add	esp, 8
	ret	0
$LN15@assemblePa:
; Line 26977
	mov	WORD PTR [edi+20], dx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 26978
	add	esp, 8
	ret	0
_assemblePage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeSchema
_TEXT	SEGMENT
_xFree$ = 8						; size = 4
_sqlite3BtreeSchema PROC				; COMDAT
; _p$ = eax
; _nBytes$ = edi
; Line 29086
	push	esi
; Line 29087
	mov	esi, DWORD PTR [eax+4]
; Line 29088
	cmp	DWORD PTR [esi+60], 0
	jne	SHORT $LN4@sqlite3Btr@18
; Line 29089
	call	_sqlite3Malloc
; Line 29090
	mov	ecx, DWORD PTR _xFree$[esp]
	mov	DWORD PTR [esi+60], eax
	mov	DWORD PTR [esi+64], ecx
	pop	esi
; Line 29093
	ret	0
$LN4@sqlite3Btr@18:
; Line 29092
	mov	eax, DWORD PTR [esi+60]
	pop	esi
; Line 29093
	ret	0
_sqlite3BtreeSchema ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeLockTable
_TEXT	SEGMENT
_iTab$ = 8						; size = 4
_lockType$ = 12						; size = 1
_isWriteLock$ = 12					; size = 1
_sqlite3BtreeLockTable PROC				; COMDAT
; _p$ = eax
; Line 29112
	cmp	BYTE PTR _isWriteLock$[esp-4], 0
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _iTab$[esp+4]
	push	esi
	setne	bl
	push	edi
	mov	esi, eax
	add	bl, 1
; Line 29113
	push	ebp
	mov	edi, esi
	mov	BYTE PTR _lockType$[esp+16], bl
	call	_queryTableLock
	add	esp, 4
; Line 29114
	test	eax, eax
	jne	SHORT $LN1@sqlite3Btr@19
; Line 29115
	mov	eax, DWORD PTR _lockType$[esp+12]
	push	eax
	push	ebp
	call	_lockTable
	add	esp, 8
$LN1@sqlite3Btr@19:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 29118
	ret	0
_sqlite3BtreeLockTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _allocateFifoPage
_TEXT	SEGMENT
_allocateFifoPage PROC					; COMDAT
; _nEntry$ = eax
; Line 29194
	push	esi
	mov	esi, eax
; Line 29196
	cmp	esi, 32767				; 00007fffH
	jle	SHORT $LN2@allocateFi
; Line 29197
	mov	esi, 32767				; 00007fffH
$LN2@allocateFi:
; Line 29199
	lea	ecx, DWORD PTR [esi*8+16]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN1@allocateFi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	push	edi
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN9@allocateFi
	test	edi, edi
	jg	SHORT $LN31@allocateFi
$LN9@allocateFi:
	push	ecx
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN27@allocateFi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN19@allocateFi
	test	edi, edi
	jg	SHORT $LN31@allocateFi
$LN19@allocateFi:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	pop	edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	pop	esi
; Line 29207
	ret	0
$LN27@allocateFi:
; Line 29201
	mov	DWORD PTR [eax], esi
; Line 29202
	mov	DWORD PTR [eax+4], 0
; Line 29203
	mov	DWORD PTR [eax+8], 0
; Line 29204
	mov	DWORD PTR [eax+12], 0
$LN31@allocateFi:
	pop	edi
$LN1@allocateFi:
	pop	esi
; Line 29207
	ret	0
_allocateFifoPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeFifoPush
_TEXT	SEGMENT
_val$ = 8						; size = 8
_sqlite3VdbeFifoPush PROC				; COMDAT
; _pFifo$ = edi
; Line 29221
	push	esi
; Line 29223
	mov	esi, DWORD PTR [edi+8]
; Line 29224
	test	esi, esi
	jne	SHORT $LN5@sqlite3Vdb@22
; Line 29225
	lea	eax, DWORD PTR [esi+20]
	call	_allocateFifoPage
	mov	esi, eax
; Line 29226
	test	esi, esi
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi+8], eax
	jne	SHORT $LN2@sqlite3Vdb@22
$LN8@sqlite3Vdb@22:
; Line 29227
	mov	eax, 7
	pop	esi
; Line 29239
	ret	0
$LN5@sqlite3Vdb@22:
; Line 29229
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, DWORD PTR [esi]
	jl	SHORT $LN2@sqlite3Vdb@22
; Line 29230
	mov	eax, DWORD PTR [edi]
	call	_allocateFifoPage
; Line 29231
	test	eax, eax
	mov	DWORD PTR [esi+12], eax
; Line 29232
	je	SHORT $LN8@sqlite3Vdb@22
; Line 29234
	mov	DWORD PTR [edi+8], eax
	mov	esi, eax
$LN2@sqlite3Vdb@22:
; Line 29236
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR _val$[esp]
	mov	edx, DWORD PTR _val$[esp+4]
	mov	DWORD PTR [esi+eax*8+16], ecx
	mov	DWORD PTR [esi+eax*8+20], edx
	add	DWORD PTR [esi+4], 1
; Line 29237
	add	DWORD PTR [edi], 1
; Line 29238
	xor	eax, eax
	pop	esi
; Line 29239
	ret	0
_sqlite3VdbeFifoPush ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemExpandBlob
_TEXT	SEGMENT
_sqlite3VdbeMemExpandBlob PROC				; COMDAT
; _pMem$ = esi
; Line 29383
	test	WORD PTR [esi+24], 2048			; 00000800H
	push	edi
	je	SHORT $LN3@sqlite3Vdb@23
; Line 29387
	mov	edi, DWORD PTR [esi+20]
	add	edi, DWORD PTR [esi]
; Line 29388
	test	edi, edi
	jg	SHORT $LN2@sqlite3Vdb@23
	mov	edi, 1
$LN2@sqlite3Vdb@23:
; Line 29389
	call	_sqlite3Malloc
	mov	edi, eax
; Line 29390
	test	edi, edi
	jne	SHORT $LN1@sqlite3Vdb@23
; Line 29391
	mov	eax, 7
	pop	edi
; Line 29403
	ret	0
$LN1@sqlite3Vdb@23:
; Line 29393
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+16]
	push	eax
	push	ecx
	push	edi
	call	_memcpy
; Line 29394
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+20]
	push	edx
	add	eax, edi
	push	0
	push	eax
	call	_memset
; Line 29395
	push	esi
	call	_sqlite3VdbeMemRelease
; Line 29397
	mov	ecx, DWORD PTR [esi]
; Line 29399
	mov	dx, WORD PTR [esi+24]
	add	DWORD PTR [esi+20], ecx
	and	dx, 62559				; 0000f45fH
	add	esp, 28					; 0000001cH
; Line 29400
	or	dx, 64					; 00000040H
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	WORD PTR [esi+24], dx
$LN3@sqlite3Vdb@23:
; Line 29402
	xor	eax, eax
	pop	edi
; Line 29403
	ret	0
_sqlite3VdbeMemExpandBlob ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemMakeWriteable
_TEXT	SEGMENT
_sqlite3VdbeMemMakeWriteable PROC			; COMDAT
; _pMem$ = eax
; Line 29413
	push	esi
	mov	esi, eax
; Line 29416
	test	WORD PTR [esi+24], 2048			; 00000800H
	je	SHORT $LN7@sqlite3Vdb@24
	call	_sqlite3VdbeMemExpandBlob
$LN7@sqlite3Vdb@24:
; Line 29417
	movzx	eax, WORD PTR [esi+24]
	test	eax, 384				; 00000180H
	jne	SHORT $LN4@sqlite3Vdb@24
; Line 29418
	xor	eax, eax
	pop	esi
; Line 29440
	ret	0
$LN4@sqlite3Vdb@24:
	push	ebp
; Line 29422
	mov	ebp, DWORD PTR [esi+20]
	lea	ecx, DWORD PTR [ebp+2]
	cmp	ecx, 32					; 00000020H
	push	edi
	jae	SHORT $LN3@sqlite3Vdb@24
; Line 29424
	or	eax, 544				; 00000220H
	lea	edi, DWORD PTR [esi+32]
	mov	WORD PTR [esi+24], ax
; Line 29425
	jmp	SHORT $LN2@sqlite3Vdb@24
$LN3@sqlite3Vdb@24:
; Line 29426
	call	_sqlite3MallocRaw
	mov	edi, eax
; Line 29427
	test	edi, edi
	jne	SHORT $LN1@sqlite3Vdb@24
; Line 29428
	lea	eax, DWORD PTR [edi+7]
	pop	edi
	pop	ebp
	pop	esi
; Line 29440
	ret	0
$LN1@sqlite3Vdb@24:
; Line 29430
	or	WORD PTR [esi+24], 96			; 00000060H
; Line 29431
	mov	DWORD PTR [esi+28], 0
$LN2@sqlite3Vdb@24:
; Line 29433
	mov	eax, DWORD PTR [esi+16]
	push	ebp
	push	eax
	push	edi
	call	_memcpy
; Line 29434
	mov	BYTE PTR [edi+ebp], 0
; Line 29435
	mov	BYTE PTR [edi+ebp+1], 0
; Line 29437
	and	WORD PTR [esi+24], 65151		; 0000fe7fH
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+16], edi
	pop	edi
	pop	ebp
; Line 29439
	xor	eax, eax
	pop	esi
; Line 29440
	ret	0
_sqlite3VdbeMemMakeWriteable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemNulTerminate
_TEXT	SEGMENT
_sqlite3VdbeMemNulTerminate PROC			; COMDAT
; _pMem$ = eax
; Line 29445
	push	esi
	mov	esi, eax
; Line 29446
	movzx	eax, WORD PTR [esi+24]
	test	al, 32					; 00000020H
	jne	SHORT $LN6@sqlite3Vdb@25
	test	al, 2
	je	SHORT $LN6@sqlite3Vdb@25
; Line 29449
	test	eax, 384				; 00000180H
	je	SHORT $LN5@sqlite3Vdb@25
; Line 29450
	mov	eax, esi
	pop	esi
	jmp	_sqlite3VdbeMemMakeWriteable
$LN5@sqlite3Vdb@25:
	push	edi
; Line 29453
	call	_sqlite3VdbeMemExpandBlob
; Line 29454
	mov	edi, DWORD PTR [esi+20]
	add	edi, 2
	call	_sqlite3Malloc
	mov	edi, eax
; Line 29456
	test	edi, edi
	jne	SHORT $LN3@sqlite3Vdb@25
	lea	eax, DWORD PTR [edi+7]
	pop	edi
	pop	esi
; Line 29470
	ret	0
$LN3@sqlite3Vdb@25:
; Line 29457
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+16]
	push	eax
	push	ecx
	push	edi
	call	_memcpy
; Line 29458
	mov	edx, DWORD PTR [esi+20]
	mov	BYTE PTR [edi+edx], 0
; Line 29459
	mov	eax, DWORD PTR [esi+20]
	mov	BYTE PTR [eax+edi+1], 0
; Line 29460
	mov	eax, DWORD PTR [esi+28]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@sqlite3Vdb@25
; Line 29461
	mov	ecx, DWORD PTR [esi+16]
	push	ecx
	call	eax
; Line 29462
	jmp	SHORT $LN13@sqlite3Vdb@25
$LN2@sqlite3Vdb@25:
; Line 29463
	mov	edx, DWORD PTR [esi+16]
	push	edx
	call	_sqlite3FreeX
$LN13@sqlite3Vdb@25:
; Line 29467
	or	WORD PTR [esi+24], 32			; 00000020H
	add	esp, 4
	mov	DWORD PTR [esi+16], edi
	pop	edi
	mov	DWORD PTR [esi+28], 0
; Line 29469
	xor	eax, eax
	pop	esi
; Line 29470
	ret	0
$LN6@sqlite3Vdb@25:
; Line 29447
	xor	eax, eax
	pop	esi
; Line 29470
	ret	0
_sqlite3VdbeMemNulTerminate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemCopy
_TEXT	SEGMENT
_pFrom$ = 8						; size = 4
_sqlite3VdbeMemCopy PROC				; COMDAT
; _pTo$ = ebx
; Line 29770
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN3@sqlite3Vdb@26
; Line 29771
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN3@sqlite3Vdb@26:
	push	esi
; Line 29773
	mov	esi, DWORD PTR _pFrom$[esp]
	push	edi
	mov	ecx, 8
	mov	edi, ebx
	rep movsd
	movzx	eax, WORD PTR [ebx+24]
	test	al, 18					; 00000012H
	pop	edi
	mov	DWORD PTR [ebx+28], 0
	pop	esi
	je	SHORT $LN6@sqlite3Vdb@26
	and	eax, 64831				; 0000fd3fH
	or	eax, 256				; 00000100H
	mov	WORD PTR [ebx+24], ax
$LN6@sqlite3Vdb@26:
; Line 29774
	test	WORD PTR [ebx+24], 256			; 00000100H
	je	SHORT $LN2@sqlite3Vdb@26
; Line 29775
	mov	eax, ebx
	jmp	_sqlite3VdbeMemMakeWriteable
$LN2@sqlite3Vdb@26:
; Line 29777
	xor	eax, eax
; Line 29780
	ret	0
_sqlite3VdbeMemCopy ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemMove
_TEXT	SEGMENT
_pFrom$ = 8						; size = 4
_sqlite3VdbeMemMove PROC				; COMDAT
; _pTo$ = ebx
; Line 29792
	test	BYTE PTR [ebx+24], 64			; 00000040H
	push	ebp
	mov	ebp, DWORD PTR _pFrom$[esp]
	je	SHORT $LN4@sqlite3Vdb@27
; Line 29793
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN4@sqlite3Vdb@27:
	push	esi
	push	edi
; Line 29795
	mov	ecx, 16					; 00000010H
	mov	esi, ebp
	mov	edi, ebx
	rep movsd
; Line 29796
	test	WORD PTR [ebp+24], 512			; 00000200H
	pop	edi
	pop	esi
	je	SHORT $LN3@sqlite3Vdb@27
; Line 29797
	lea	eax, DWORD PTR [ebx+32]
	mov	DWORD PTR [ebx+16], eax
$LN3@sqlite3Vdb@27:
; Line 29800
	xor	eax, eax
	mov	WORD PTR [ebp+24], 1
	mov	DWORD PTR [ebp+28], eax
; Line 29801
	test	WORD PTR [ebx+24], 256			; 00000100H
	pop	ebp
	je	SHORT $LN2@sqlite3Vdb@27
; Line 29802
	mov	eax, ebx
	jmp	_sqlite3VdbeMemMakeWriteable
$LN2@sqlite3Vdb@27:
; Line 29807
	ret	0
_sqlite3VdbeMemMove ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemSetStr
_TEXT	SEGMENT
_pMem$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_enc$ = 20						; size = 1
_xDel$ = 24						; size = 4
_sqlite3VdbeMemSetStr PROC				; COMDAT
; Line 29818
	push	esi
; Line 29819
	mov	esi, DWORD PTR _pMem$[esp]
	push	esi
	call	_sqlite3VdbeMemRelease
; Line 29820
	mov	eax, DWORD PTR _z$[esp+4]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN14@sqlite3Vdb@28
; Line 29821
	mov	WORD PTR [esi+24], 1
; Line 29822
	mov	BYTE PTR [esi+26], 5
	pop	esi
; Line 29873
	ret	0
$LN14@sqlite3Vdb@28:
; Line 29827
	mov	ecx, DWORD PTR _xDel$[esp]
	test	ecx, ecx
	mov	DWORD PTR [esi+16], eax
	jne	SHORT $LN13@sqlite3Vdb@28
; Line 29828
	mov	WORD PTR [esi+24], 128			; 00000080H
	jmp	SHORT $LN10@sqlite3Vdb@28
$LN13@sqlite3Vdb@28:
; Line 29829
	cmp	ecx, -1
	jne	SHORT $LN11@sqlite3Vdb@28
; Line 29830
	mov	WORD PTR [esi+24], 256			; 00000100H
; Line 29831
	jmp	SHORT $LN10@sqlite3Vdb@28
$LN11@sqlite3Vdb@28:
; Line 29832
	mov	WORD PTR [esi+24], 64			; 00000040H
; Line 29833
	mov	DWORD PTR [esi+28], ecx
$LN10@sqlite3Vdb@28:
; Line 29836
	mov	cl, BYTE PTR _enc$[esp]
; Line 29837
	test	cl, cl
	sete	dl
	add	dl, 3
	mov	BYTE PTR [esi+27], cl
; Line 29842
	movzx	ecx, cl
	cmp	ecx, 3
	mov	BYTE PTR [esi+26], dl
	mov	edx, DWORD PTR _n$[esp]
	push	edi
	mov	DWORD PTR [esi+20], edx
	ja	SHORT $LN2@sqlite3Vdb@28
	jmp	DWORD PTR $LN21@sqlite3Vdb@28[ecx*4]
$LN7@sqlite3Vdb@28:
; Line 29844
	or	WORD PTR [esi+24], 16			; 00000010H
; Line 29845
	mov	BYTE PTR [esi+27], 1
$LN2@sqlite3Vdb@28:
; Line 29869
	test	WORD PTR [esi+24], 256			; 00000100H
	je	SHORT $LN1@sqlite3Vdb@28
	pop	edi
; Line 29870
	mov	eax, esi
	pop	esi
	jmp	_sqlite3VdbeMemMakeWriteable
$LN6@sqlite3Vdb@28:
; Line 29849
	or	WORD PTR [esi+24], 2
; Line 29850
	test	edx, edx
	movzx	ecx, WORD PTR [esi+24]
	jge	SHORT $LN2@sqlite3Vdb@28
; Line 29851
	lea	edi, DWORD PTR [eax+1]
	npad	2
$LL17@sqlite3Vdb@28:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL17@sqlite3Vdb@28
	sub	eax, edi
; Line 29852
	or	ecx, 32					; 00000020H
	mov	DWORD PTR [esi+20], eax
	mov	WORD PTR [esi+24], cx
; Line 29854
	jmp	SHORT $LN2@sqlite3Vdb@28
$LN4@sqlite3Vdb@28:
; Line 29859
	or	WORD PTR [esi+24], 2
; Line 29860
	test	edx, edx
	push	ebp
	movzx	ebp, WORD PTR [esi+24]
	jge	SHORT $LN3@sqlite3Vdb@28
	push	ebx
; Line 29861
	or	edi, -1
	mov	ebx, eax
	call	_sqlite3Utf16ByteLen
; Line 29862
	or	ebp, 32					; 00000020H
	mov	DWORD PTR [esi+20], eax
	mov	WORD PTR [esi+24], bp
	pop	ebx
$LN3@sqlite3Vdb@28:
; Line 29864
	mov	ecx, esi
	call	_sqlite3VdbeMemHandleBom
	test	eax, eax
	pop	ebp
	je	SHORT $LN2@sqlite3Vdb@28
	pop	edi
; Line 29865
	mov	eax, 7
	pop	esi
; Line 29873
	ret	0
$LN1@sqlite3Vdb@28:
	pop	edi
; Line 29872
	xor	eax, eax
	pop	esi
; Line 29873
	ret	0
$LN21@sqlite3Vdb@28:
	DD	$LN7@sqlite3Vdb@28
	DD	$LN6@sqlite3Vdb@28
	DD	$LN4@sqlite3Vdb@28
	DD	$LN4@sqlite3Vdb@28
_sqlite3VdbeMemSetStr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ValueNew
_TEXT	SEGMENT
_sqlite3ValueNew PROC					; COMDAT
; Line 30165
	xor	eax, eax
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	push	edi
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN11@sqlite3Val
	test	edi, edi
	jg	SHORT $LN1@sqlite3Val
$LN11@sqlite3Val:
	push	esi
	push	64					; 00000040H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN29@sqlite3Val
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN21@sqlite3Val
	test	edi, edi
	jg	SHORT $LN4@sqlite3Val
$LN21@sqlite3Val:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN4@sqlite3Val
$LN29@sqlite3Val:
	push	64					; 00000040H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@sqlite3Val:
; Line 30166
	test	esi, esi
; Line 30170
	mov	eax, esi
	je	SHORT $LN32@sqlite3Val
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
$LN32@sqlite3Val:
	pop	esi
$LN1@sqlite3Val:
	pop	edi
; Line 30171
	ret	0
_sqlite3ValueNew ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ValueSetStr
_TEXT	SEGMENT
_n$ = 8							; size = 4
_z$ = 12						; size = 4
_sqlite3ValueSetStr PROC				; COMDAT
; _v$ = eax
; _enc$ = edx
; _xDel$ = ecx
; Line 30249
	test	eax, eax
	je	SHORT $LN1@sqlite3Val@2
	push	ecx
	mov	ecx, DWORD PTR _n$[esp]
	push	edx
	mov	edx, DWORD PTR _z$[esp+4]
	push	ecx
	push	edx
	push	eax
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
$LN1@sqlite3Val@2:
; Line 30250
	ret	0
_sqlite3ValueSetStr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ValueFree
_TEXT	SEGMENT
_sqlite3ValueFree PROC					; COMDAT
; _v$ = esi
; Line 30256
	test	esi, esi
	je	SHORT $LN26@sqlite3Val@3
; Line 30257
	push	esi
	call	_sqlite3VdbeMemRelease
; Line 30258
	push	esi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	call	_free
	add	esp, 8
$LN26@sqlite3Val@3:
; Line 30259
	ret	0
_sqlite3ValueFree ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeCreate
_TEXT	SEGMENT
_sqlite3VdbeCreate PROC					; COMDAT
; _db$ = edi
; Line 30312
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebx
	mov	ebx, DWORD PTR _inMutex
	push	esi
	je	SHORT $LN12@sqlite3Vdb@29
	test	ebx, ebx
	jg	SHORT $LN30@sqlite3Vdb@29
$LN12@sqlite3Vdb@29:
	push	592					; 00000250H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN31@sqlite3Vdb@29
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN22@sqlite3Vdb@29
	test	ebx, ebx
	jg	SHORT $LN5@sqlite3Vdb@29
$LN22@sqlite3Vdb@29:
	add	ebx, 1
	mov	DWORD PTR _inMutex, ebx
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN5@sqlite3Vdb@29
$LN31@sqlite3Vdb@29:
	push	592					; 00000250H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN5@sqlite3Vdb@29:
; Line 30313
	test	esi, esi
	jne	SHORT $LN2@sqlite3Vdb@29
$LN30@sqlite3Vdb@29:
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 30323
	ret	0
$LN2@sqlite3Vdb@29:
; Line 30314
	mov	DWORD PTR [esi], edi
; Line 30315
	mov	eax, DWORD PTR [edi+80]
	test	eax, eax
	je	SHORT $LN1@sqlite3Vdb@29
; Line 30316
	mov	DWORD PTR [eax+4], esi
$LN1@sqlite3Vdb@29:
; Line 30318
	mov	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi+8], eax
; Line 30319
	mov	DWORD PTR [esi+4], 0
; Line 30320
	mov	DWORD PTR [edi+80], esi
; Line 30321
	mov	DWORD PTR [esi+76], 649915045		; 26bceaa5H
; Line 30322
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 30323
	ret	0
_sqlite3VdbeCreate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeSetSql
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3VdbeSetSql PROC					; COMDAT
; _z$ = ebx
; _n$ = edi
; Line 30328
	push	ebp
	mov	ebp, DWORD PTR _p$[esp]
; Line 30329
	test	ebp, ebp
	je	SHORT $LN2@sqlite3Vdb@30
; Line 30331
	test	ebx, ebx
	push	esi
	jne	SHORT $LN5@sqlite3Vdb@30
	xor	esi, esi
	mov	DWORD PTR [ebp+588], esi
	pop	esi
	pop	ebp
; Line 30332
	ret	0
; Line 30331
$LN5@sqlite3Vdb@30:
	lea	ecx, DWORD PTR [edi+1]
	call	_sqlite3MallocRaw
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN4@sqlite3Vdb@30
	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi+edi], 0
$LN4@sqlite3Vdb@30:
	mov	DWORD PTR [ebp+588], esi
	pop	esi
$LN2@sqlite3Vdb@30:
	pop	ebp
; Line 30332
	ret	0
_sqlite3VdbeSetSql ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _freeP3
_TEXT	SEGMENT
_freeP3	PROC						; COMDAT
; _p3type$ = eax
; _p3$ = ecx
; Line 30706
	push	esi
	mov	esi, ecx
; Line 30707
	test	esi, esi
	je	SHORT $LN6@freeP3
; Line 30708
	add	eax, 11					; 0000000bH
	cmp	eax, 10					; 0000000aH
	ja	SHORT $LN6@freeP3
	movzx	eax, BYTE PTR $LN32@freeP3[eax]
	jmp	DWORD PTR $LN33@freeP3[eax*4]
$LN5@freeP3:
; Line 30712
	push	esi
	call	_free
	add	esp, 4
	pop	esi
; Line 30736
	ret	0
$LN4@freeP3:
; Line 30716
	push	esi
	call	_sqlite3_free
	add	esp, 4
	pop	esi
; Line 30736
	ret	0
$LN3@freeP3:
; Line 30721
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN22@freeP3
	test	BYTE PTR [eax+4], 4
	je	SHORT $LN22@freeP3
	push	eax
	call	_free
	add	esp, 4
$LN22@freeP3:
	push	ebx
; Line 30722
	push	0
	mov	ebx, esi
	call	_sqlite3VdbeDeleteAuxData
; Line 30723
	push	esi
	call	_sqlite3FreeX
	add	esp, 8
	pop	ebx
	pop	esi
; Line 30736
	ret	0
$LN2@freeP3:
; Line 30727
	test	BYTE PTR [esi+4], 4
	je	SHORT $LN6@freeP3
	push	esi
	call	_free
	add	esp, 4
	pop	esi
; Line 30736
	ret	0
$LN1@freeP3:
; Line 30731
	call	_sqlite3ValueFree
$LN6@freeP3:
	pop	esi
; Line 30736
	ret	0
	npad	2
$LN33@freeP3:
	DD	$LN4@freeP3
	DD	$LN5@freeP3
	DD	$LN1@freeP3
	DD	$LN3@freeP3
	DD	$LN2@freeP3
	DD	$LN6@freeP3
$LN32@freeP3:
	DB	0
	DB	5
	DB	1
	DB	2
	DB	3
	DB	1
	DB	4
	DB	5
	DB	5
	DB	5
	DB	1
_freeP3	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeChangeToNoop
_TEXT	SEGMENT
_sqlite3VdbeChangeToNoop PROC				; COMDAT
; _p$ = eax
; _addr$ = ecx
; _N$ = edx
; Line 30743
	test	eax, eax
	push	edi
	mov	edi, edx
	je	SHORT $LN7@sqlite3Vdb@31
	mov	eax, DWORD PTR [eax+20]
	test	eax, eax
	je	SHORT $LN7@sqlite3Vdb@31
; Line 30745
	test	edi, edi
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	esi
	lea	esi, DWORD PTR [eax+ecx*4]
	je	SHORT $LN9@sqlite3Vdb@31
	npad	7
$LL2@sqlite3Vdb@31:
; Line 30746
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+16]
	sub	edi, 1
	call	_freeP3
; Line 30747
	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
; Line 30748
	mov	BYTE PTR [esi], 21			; 00000015H
; Line 30749
	add	esi, 20					; 00000014H
	test	edi, edi
	jne	SHORT $LL2@sqlite3Vdb@31
$LN9@sqlite3Vdb@31:
	pop	esi
$LN7@sqlite3Vdb@31:
	pop	edi
; Line 30752
	ret	0
_sqlite3VdbeChangeToNoop ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeChangeP3
_TEXT	SEGMENT
_zP3$ = 8						; size = 4
_sqlite3VdbeChangeP3 PROC				; COMDAT
; _p$ = ecx
; _addr$ = eax
; _n$ = edx
; Line 30779
	push	ebp
	push	esi
; Line 30782
	xor	ebp, ebp
	cmp	ecx, ebp
	push	edi
	mov	edi, edx
	je	$LN17@sqlite3Vdb@32
	mov	esi, DWORD PTR [ecx+20]
	cmp	esi, ebp
	je	$LN17@sqlite3Vdb@32
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN18@sqlite3Vdb@32
	cmp	DWORD PTR _inMutex, ebp
	jg	$LN17@sqlite3Vdb@32
$LN18@sqlite3Vdb@32:
; Line 30788
	cmp	eax, ebp
	jl	SHORT $LN14@sqlite3Vdb@32
	cmp	eax, DWORD PTR [ecx+12]
	jl	SHORT $LN13@sqlite3Vdb@32
$LN14@sqlite3Vdb@32:
; Line 30789
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, 1
; Line 30790
	js	SHORT $LN16@sqlite3Vdb@32
$LN13@sqlite3Vdb@32:
; Line 30792
	lea	eax, DWORD PTR [eax+eax*4]
; Line 30793
	mov	ecx, DWORD PTR [esi+eax*4+12]
	lea	esi, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [esi+16]
	push	ebx
	call	_freeP3
; Line 30795
	mov	ebx, DWORD PTR _zP3$[esp+12]
	cmp	ebx, ebp
	mov	DWORD PTR [esi+12], ebp
	jne	SHORT $LN12@sqlite3Vdb@32
	pop	ebx
	pop	edi
; Line 30796
	mov	DWORD PTR [esi+12], ebp
; Line 30797
	mov	DWORD PTR [esi+16], ebp
	pop	esi
	pop	ebp
; Line 30829
	ret	0
$LN12@sqlite3Vdb@32:
; Line 30798
	cmp	edi, -6					; fffffffaH
	jne	SHORT $LN10@sqlite3Vdb@32
; Line 30802
	mov	ebp, DWORD PTR [ebx+4]
; Line 30803
	lea	ebx, DWORD PTR [ebp+ebp*4+12]
; Line 30804
	mov	ecx, ebx
	call	_sqlite3MallocRaw
	mov	edi, eax
; Line 30806
	test	edi, edi
	mov	DWORD PTR [esi+12], edi
	je	SHORT $LN9@sqlite3Vdb@32
; Line 30808
	mov	ecx, DWORD PTR _zP3$[esp+12]
	push	ebx
	push	ecx
	push	edi
	call	_memcpy
; Line 30809
	mov	eax, DWORD PTR [edi+8]
	add	esp, 12					; 0000000cH
; Line 30810
	test	eax, eax
	je	SHORT $LN8@sqlite3Vdb@32
; Line 30812
	push	ebp
	lea	ecx, DWORD PTR [edi+ebp*4+12]
	push	eax
	push	ecx
	mov	DWORD PTR [edi+8], ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@sqlite3Vdb@32:
; Line 30814
	mov	DWORD PTR [esi+16], -6			; fffffffaH
	pop	ebx
$LN16@sqlite3Vdb@32:
	pop	edi
	pop	esi
	pop	ebp
; Line 30829
	ret	0
$LN9@sqlite3Vdb@32:
	pop	ebx
	pop	edi
; Line 30816
	mov	DWORD PTR [esi+16], 0
	pop	esi
	pop	ebp
; Line 30829
	ret	0
$LN10@sqlite3Vdb@32:
; Line 30818
	cmp	edi, -9					; fffffff7H
	jne	SHORT $LN5@sqlite3Vdb@32
; Line 30819
	mov	DWORD PTR [esi+12], ebx
	pop	ebx
	pop	edi
	mov	DWORD PTR [esi+16], -6			; fffffffaH
	pop	esi
	pop	ebp
; Line 30829
	ret	0
$LN5@sqlite3Vdb@32:
; Line 30821
	cmp	edi, ebp
	jge	SHORT $LN27@sqlite3Vdb@32
; Line 30822
	mov	DWORD PTR [esi+12], ebx
	pop	ebx
; Line 30823
	mov	DWORD PTR [esi+16], edi
	pop	edi
	pop	esi
	pop	ebp
; Line 30829
	ret	0
$LN27@sqlite3Vdb@32:
; Line 30825
	jne	SHORT $LN1@sqlite3Vdb@32
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL23@sqlite3Vdb@32:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL23@sqlite3Vdb@32
	sub	eax, edx
	mov	edi, eax
$LN1@sqlite3Vdb@32:
; Line 30826
	call	_sqlite3StrNDup
	pop	ebx
	pop	edi
	mov	DWORD PTR [esi+12], eax
; Line 30827
	mov	DWORD PTR [esi+16], -1
	pop	esi
	pop	ebp
; Line 30829
	ret	0
$LN17@sqlite3Vdb@32:
; Line 30783
	cmp	edi, -6					; fffffffaH
	je	SHORT $LN16@sqlite3Vdb@32
; Line 30784
	mov	ecx, DWORD PTR _zP3$[esp+8]
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	jmp	_freeP3
_sqlite3VdbeChangeP3 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@IIBEKKAO@vtab?3?$CFp?3?$CFp?$AA@	; `string'
PUBLIC	??_C@_06BPGFIOAL@?$CFs?$CI?$CFd?$CJ?$AA@	; `string'
PUBLIC	??_C@_0P@BMGKNHBK@collseq?$CI?$CF?420s?$CJ?$AA@	; `string'
PUBLIC	??_C@_0L@HDAMIFP@keyinfo?$CI?$CFd?$AA@		; `string'
;	COMDAT ??_C@_0L@IIBEKKAO@vtab?3?$CFp?3?$CFp?$AA@
CONST	SEGMENT
??_C@_0L@IIBEKKAO@vtab?3?$CFp?3?$CFp?$AA@ DB 'vtab:%p:%p', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPGFIOAL@?$CFs?$CI?$CFd?$CJ?$AA@
CONST	SEGMENT
??_C@_06BPGFIOAL@?$CFs?$CI?$CFd?$CJ?$AA@ DB '%s(%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMGKNHBK@collseq?$CI?$CF?420s?$CJ?$AA@
CONST	SEGMENT
??_C@_0P@BMGKNHBK@collseq?$CI?$CF?420s?$CJ?$AA@ DB 'collseq(%.20s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HDAMIFP@keyinfo?$CI?$CFd?$AA@
CONST	SEGMENT
??_C@_0L@HDAMIFP@keyinfo?$CI?$CFd?$AA@ DB 'keyinfo(%d', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _displayP3
_TEXT	SEGMENT
_j$89045 = -12						; size = 4
tv321 = -8						; size = 4
_pColl$89052 = -4					; size = 4
_nTemp$ = 8						; size = 4
_displayP3 PROC						; COMDAT
; _pOp$ = ecx
; _zTemp$ = edi
; Line 30864
	mov	eax, DWORD PTR [ecx+16]
	add	eax, 10					; 0000000aH
	sub	esp, 12					; 0000000cH
	cmp	eax, 6
	ja	$LN3@displayP3
	jmp	DWORD PTR $LN28@displayP3[eax*4]
$LN15@displayP3:
	push	ebp
; Line 30867
	mov	ebp, DWORD PTR [ecx+12]
; Line 30868
	mov	eax, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR _nTemp$[esp+12]
	push	esi
	push	eax
	push	OFFSET ??_C@_0L@HDAMIFP@keyinfo?$CI?$CFd?$AA@
	push	edi
	push	ecx
	call	_sqlite3_snprintf
; Line 30869
	mov	esi, edi
	add	esp, 16					; 00000010H
	lea	ecx, DWORD PTR [esi+1]
	npad	6
$LL23@displayP3:
	mov	al, BYTE PTR [esi]
	add	esi, 1
	test	al, al
	jne	SHORT $LL23@displayP3
	sub	esi, ecx
; Line 30870
	cmp	DWORD PTR [ebp+4], 0
	mov	DWORD PTR _j$89045[esp+20], 0
	jle	$LN12@displayP3
	lea	edx, DWORD PTR [ebp+12]
	mov	DWORD PTR tv321[esp+20], edx
	push	ebx
$LL26@displayP3:
; Line 30871
	mov	eax, DWORD PTR tv321[esp+24]
	mov	eax, DWORD PTR [eax]
; Line 30872
	test	eax, eax
	mov	DWORD PTR _pColl$89052[esp+24], eax
	je	SHORT $LN11@displayP3
; Line 30873
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [eax+1]
$LL24@displayP3:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL24@displayP3
	sub	eax, edx
; Line 30874
	mov	edx, DWORD PTR _nTemp$[esp+20]
	mov	ebx, eax
	lea	ecx, DWORD PTR [ebx+esi]
	add	edx, -6					; fffffffaH
	cmp	ecx, edx
	jg	SHORT $LN21@displayP3
; Line 30878
	mov	BYTE PTR [esi+edi], 44			; 0000002cH
; Line 30879
	mov	eax, DWORD PTR [ebp+8]
	add	esi, 1
	test	eax, eax
	je	SHORT $LN9@displayP3
	mov	ecx, DWORD PTR _j$89045[esp+24]
	cmp	BYTE PTR [eax+ecx], 0
	je	SHORT $LN9@displayP3
; Line 30880
	mov	BYTE PTR [esi+edi], 45			; 0000002dH
	add	esi, 1
$LN9@displayP3:
; Line 30882
	mov	eax, DWORD PTR _pColl$89052[esp+24]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ebx+1]
	push	edx
	push	ecx
	lea	edx, DWORD PTR [esi+edi]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 30883
	add	esi, ebx
	jmp	SHORT $LN13@displayP3
$LN11@displayP3:
; Line 30884
	mov	ecx, DWORD PTR _nTemp$[esp+20]
	lea	eax, DWORD PTR [esi+4]
	add	ecx, -6					; fffffffaH
	cmp	eax, ecx
	jge	SHORT $LN13@displayP3
; Line 30885
	mov	DWORD PTR [esi+edi], 1818848812		; 6c696e2cH
; Line 30886
	mov	esi, eax
$LN13@displayP3:
	mov	eax, DWORD PTR _j$89045[esp+24]
	add	DWORD PTR tv321[esp+24], 4
	add	eax, 1
	cmp	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR _j$89045[esp+24], eax
	jl	$LL26@displayP3
	pop	ebx
; Line 30889
	mov	BYTE PTR [esi+edi], 41			; 00000029H
; Line 30890
	mov	BYTE PTR [esi+edi+1], 0
	pop	esi
; Line 30923
	mov	eax, edi
	pop	ebp
; Line 30924
	add	esp, 12					; 0000000cH
	ret	0
$LN21@displayP3:
; Line 30875
	mov	DWORD PTR [esi+edi], 774778412		; 2e2e2e2cH
	pop	ebx
$LN12@displayP3:
; Line 30889
	mov	BYTE PTR [esi+edi], 41			; 00000029H
; Line 30890
	mov	BYTE PTR [esi+edi+1], 0
	pop	esi
; Line 30923
	mov	eax, edi
	pop	ebp
; Line 30924
	add	esp, 12					; 0000000cH
	ret	0
$LN6@displayP3:
; Line 30896
	mov	edx, DWORD PTR [ecx+12]
; Line 30897
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _nTemp$[esp+8]
	push	eax
	push	OFFSET ??_C@_0P@BMGKNHBK@collseq?$CI?$CF?420s?$CJ?$AA@
	push	edi
	push	ecx
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
; Line 30923
	mov	eax, edi
; Line 30924
	add	esp, 12					; 0000000cH
	ret	0
$LN5@displayP3:
; Line 30902
	mov	ecx, DWORD PTR [ecx+12]
; Line 30903
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _nTemp$[esp+8]
	push	edx
	add	ecx, 28					; 0000001cH
	push	ecx
	push	OFFSET ??_C@_06BPGFIOAL@?$CFs?$CI?$CFd?$CJ?$AA@
	push	edi
	push	eax
	call	_sqlite3_snprintf
	add	esp, 20					; 00000014H
; Line 30923
	mov	eax, edi
; Line 30924
	add	esp, 12					; 0000000cH
	ret	0
$LN4@displayP3:
; Line 30909
	mov	ecx, DWORD PTR [ecx+12]
; Line 30910
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _nTemp$[esp+8]
	push	edx
	push	ecx
	push	OFFSET ??_C@_0L@IIBEKKAO@vtab?3?$CFp?3?$CFp?$AA@
	push	edi
	push	eax
	call	_sqlite3_snprintf
	add	esp, 20					; 00000014H
; Line 30923
	mov	eax, edi
; Line 30924
	add	esp, 12					; 0000000cH
	ret	0
$LN3@displayP3:
; Line 30916
	mov	eax, DWORD PTR [ecx+12]
; Line 30917
	test	eax, eax
	je	SHORT $LN1@displayP3
	cmp	BYTE PTR [ecx], 21			; 00000015H
	jne	SHORT $LN2@displayP3
$LN1@displayP3:
; Line 30918
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN2@displayP3:
; Line 30924
	add	esp, 12					; 0000000cH
	ret	0
$LN28@displayP3:
	DD	$LN4@displayP3
	DD	$LN3@displayP3
	DD	$LN3@displayP3
	DD	$LN3@displayP3
	DD	$LN15@displayP3
	DD	$LN5@displayP3
	DD	$LN6@displayP3
_displayP3 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeList
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3VdbeList PROC					; COMDAT
; Line 30965
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _p$[esp+4]
; Line 30971
	cmp	DWORD PTR [ebp+76], -1108210269		; bdf20da3H
	mov	ebx, DWORD PTR [ebp]
	je	SHORT $LN10@sqlite3Vdb@33
	pop	ebp
	mov	eax, 21					; 00000015H
	pop	ebx
; Line 31034
	ret	0
$LN10@sqlite3Vdb@33:
	push	esi
; Line 30979
	mov	esi, DWORD PTR [ebp+36]
	lea	eax, DWORD PTR [esi+256]
	cmp	DWORD PTR [ebp+40], eax
	push	edi
	jne	SHORT $LN27@sqlite3Vdb@33
; Line 30980
	test	esi, esi
	mov	edi, 5
	je	SHORT $LN27@sqlite3Vdb@33
$LL14@sqlite3Vdb@33:
	push	esi
	sub	edi, 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	add	esi, 64					; 00000040H
	test	edi, edi
	jg	SHORT $LL14@sqlite3Vdb@33
$LN27@sqlite3Vdb@33:
	mov	ecx, DWORD PTR [ebp+12]
; Line 30982
	mov	BYTE PTR [ebp+560], 0
	mov	dl, 2
$LL8@sqlite3Vdb@33:
; Line 30985
	mov	eax, DWORD PTR [ebp+120]
; Line 30986
	cmp	eax, ecx
	lea	esi, DWORD PTR [eax+1]
	mov	DWORD PTR [ebp+120], esi
	jge	SHORT $LN29@sqlite3Vdb@33
	cmp	BYTE PTR [ebp+561], dl
	jne	SHORT $LN5@sqlite3Vdb@33
	mov	edi, DWORD PTR [ebp+20]
	lea	esi, DWORD PTR [eax+eax*4]
	cmp	BYTE PTR [edi+esi*4], 118		; 00000076H
	jne	SHORT $LL8@sqlite3Vdb@33
$LN5@sqlite3Vdb@33:
; Line 30987
	cmp	eax, ecx
	jl	SHORT $LN4@sqlite3Vdb@33
$LN29@sqlite3Vdb@33:
; Line 30989
	mov	esi, 101				; 00000065H
	pop	edi
; Line 31033
	mov	eax, esi
	pop	esi
	mov	DWORD PTR [ebp+124], 0
	pop	ebp
	pop	ebx
; Line 31034
	ret	0
$LN4@sqlite3Vdb@33:
; Line 30990
	cmp	DWORD PTR [ebx+152], 0
	je	SHORT $LN2@sqlite3Vdb@33
; Line 30991
	mov	eax, 9
; Line 30993
	push	0
	mov	DWORD PTR [ebp+124], eax
	lea	esi, DWORD PTR [eax-8]
	call	_sqlite3ErrStr
	push	eax
	add	ebp, 556				; 0000022cH
	push	ebp
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
	pop	edi
; Line 31033
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 31034
	ret	0
$LN2@sqlite3Vdb@33:
; Line 30995
	mov	edx, DWORD PTR [ebp+20]
; Line 30996
	mov	esi, DWORD PTR [ebp+36]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [edx+ecx*4]
; Line 30999
	cdq
	mov	BYTE PTR [esi+26], 1
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	ebx, 4
	mov	WORD PTR [esi+24], bx
; Line 31000
	add	esi, 64					; 00000040H
; Line 31002
	mov	WORD PTR [esi+24], 162			; 000000a2H
; Line 31003
	movzx	eax, BYTE PTR [ecx]
	mov	eax, DWORD PTR _sqlite3OpcodeNames[eax*4]
	mov	DWORD PTR [esi+16], eax
; Line 31005
	lea	edi, DWORD PTR [eax+1]
$LL25@sqlite3Vdb@33:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL25@sqlite3Vdb@33
; Line 31006
	mov	BYTE PTR [esi+26], 3
; Line 31007
	mov	BYTE PTR [esi+27], 1
	sub	eax, edi
	mov	DWORD PTR [esi+20], eax
; Line 31010
	mov	WORD PTR [esi+88], bx
; Line 31011
	mov	eax, DWORD PTR [ecx+4]
	add	esi, 64					; 00000040H
; Line 31012
	mov	BYTE PTR [esi+26], 1
	cdq
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
; Line 31013
	add	esi, 64					; 00000040H
; Line 31015
	mov	WORD PTR [esi+24], bx
; Line 31016
	mov	eax, DWORD PTR [ecx+8]
	cdq
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
; Line 31017
	mov	BYTE PTR [esi+26], 1
; Line 31018
	add	esi, 64					; 00000040H
; Line 31021
	push	32					; 00000020H
	lea	edi, DWORD PTR [esi+32]
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_displayP3
	add	esp, 4
	mov	DWORD PTR [esi+16], eax
; Line 31023
	lea	ecx, DWORD PTR [eax+1]
	npad	2
$LL26@sqlite3Vdb@33:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL26@sqlite3Vdb@33
; Line 31024
	mov	BYTE PTR [esi+26], 3
; Line 31025
	mov	BYTE PTR [esi+27], 1
	sub	eax, ecx
	mov	DWORD PTR [esi+20], eax
; Line 31027
	movzx	ecx, BYTE PTR [ebp+561]
; Line 31028
	mov	DWORD PTR [ebp+40], esi
; Line 31031
	mov	esi, 100				; 00000064H
	pop	edi
	add	ecx, ecx
	mov	edx, 7
	sub	edx, ecx
; Line 31033
	mov	eax, esi
	pop	esi
	mov	DWORD PTR [ebp+544], edx
	mov	BYTE PTR [ebp+560], 1
	mov	DWORD PTR [ebp+124], 0
	pop	ebp
	pop	ebx
; Line 31034
	ret	0
_sqlite3VdbeList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeSetNumCols
_TEXT	SEGMENT
_nResColumn$ = 8					; size = 4
_sqlite3VdbeSetNumCols PROC				; COMDAT
; _p$ = ebx
; Line 31268
	mov	eax, DWORD PTR [ebx+544]
	push	ebp
	mov	ebp, DWORD PTR _nResColumn$[esp]
	push	esi
	mov	esi, DWORD PTR [ebx+48]
	test	esi, esi
	push	edi
	lea	edi, DWORD PTR [eax+eax*4]
	je	SHORT $LN18@sqlite3Vdb@34
	test	edi, edi
	jle	SHORT $LN18@sqlite3Vdb@34
	npad	5
$LL7@sqlite3Vdb@34:
	push	esi
	sub	edi, 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	add	esi, 64					; 00000040H
	test	edi, edi
	jg	SHORT $LL7@sqlite3Vdb@34
$LN18@sqlite3Vdb@34:
; Line 31269
	mov	eax, DWORD PTR [ebx+48]
	test	eax, eax
	je	SHORT $LN14@sqlite3Vdb@34
	push	eax
	call	_free
	add	esp, 4
$LN14@sqlite3Vdb@34:
; Line 31270
	lea	esi, DWORD PTR [ebp+ebp*4]
; Line 31272
	mov	edi, esi
	shl	edi, 6
	mov	DWORD PTR [ebx+544], ebp
	call	_sqlite3Malloc
; Line 31273
	test	eax, eax
	mov	DWORD PTR [ebx+48], eax
	je	SHORT $LN20@sqlite3Vdb@34
; Line 31274
	test	esi, esi
	jle	SHORT $LN20@sqlite3Vdb@34
	add	eax, 24					; 00000018H
$LL2@sqlite3Vdb@34:
	sub	esi, 1
; Line 31275
	mov	WORD PTR [eax], 1
	add	eax, 64					; 00000040H
	test	esi, esi
	jg	SHORT $LL2@sqlite3Vdb@34
$LN20@sqlite3Vdb@34:
	pop	edi
	pop	esi
	pop	ebp
; Line 31277
	ret	0
_sqlite3VdbeSetNumCols ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeSetColName
_TEXT	SEGMENT
_idx$ = 8						; size = 4
_var$ = 12						; size = 4
_sqlite3VdbeSetColName PROC				; COMDAT
; _p$ = eax
; _zName$ = edi
; _N$ = ebx
; Line 31295
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN5@sqlite3Vdb@35
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN5@sqlite3Vdb@35
	mov	eax, 7
; Line 31308
	ret	0
$LN5@sqlite3Vdb@35:
	push	esi
; Line 31297
	mov	esi, DWORD PTR [eax+544]
	imul	esi, DWORD PTR _var$[esp]
	add	esi, DWORD PTR _idx$[esp]
	shl	esi, 6
	add	esi, DWORD PTR [eax+48]
; Line 31298
	cmp	ebx, -1
	je	SHORT $LN3@sqlite3Vdb@35
	cmp	ebx, -2					; fffffffeH
	je	SHORT $LN3@sqlite3Vdb@35
; Line 31301
	push	-1
	push	1
	push	ebx
	push	edi
	push	esi
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
; Line 31303
	test	eax, eax
	jne	SHORT $LN1@sqlite3Vdb@35
$LN26@sqlite3Vdb@35:
	cmp	ebx, -1
	jne	SHORT $LN1@sqlite3Vdb@35
; Line 31304
	mov	cx, WORD PTR [esi+24]
	and	cx, 65407				; 0000ff7fH
	or	cx, 64					; 00000040H
	mov	WORD PTR [esi+24], cx
; Line 31305
	mov	DWORD PTR [esi+28], 0
$LN1@sqlite3Vdb@35:
	pop	esi
; Line 31308
	ret	0
$LN3@sqlite3Vdb@35:
; Line 31299
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN23@sqlite3Vdb@35
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	xor	eax, eax
	jmp	SHORT $LN26@sqlite3Vdb@35
$LN23@sqlite3Vdb@35:
	mov	eax, edi
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 130			; 00000082H
	lea	edx, DWORD PTR [eax+1]
$LL27@sqlite3Vdb@35:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL27@sqlite3Vdb@35
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	WORD PTR [esi+24], 162			; 000000a2H
	xor	eax, eax
; Line 31303
	jmp	SHORT $LN26@sqlite3Vdb@35
_sqlite3VdbeSetColName ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_blob
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_xDel$ = 20						; size = 4
_sqlite3_result_blob PROC				; COMDAT
; Line 32573
	mov	eax, DWORD PTR _xDel$[esp-4]
	mov	ecx, DWORD PTR _n$[esp-4]
	mov	edx, DWORD PTR _z$[esp-4]
	push	eax
	mov	eax, DWORD PTR _pCtx$[esp]
	push	0
	push	ecx
	push	edx
	add	eax, 8
	push	eax
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
; Line 32574
	ret	0
_sqlite3_result_blob ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_error
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_sqlite3_result_error PROC				; COMDAT
; Line 32580
	mov	ecx, DWORD PTR _n$[esp-4]
	mov	eax, DWORD PTR _pCtx$[esp-4]
	mov	edx, DWORD PTR _z$[esp-4]
	push	-1
	push	1
	push	ecx
	mov	BYTE PTR [eax+76], 1
	push	edx
	add	eax, 8
	push	eax
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
; Line 32581
	ret	0
_sqlite3_result_error ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_error16
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_sqlite3_result_error16 PROC				; COMDAT
; Line 32585
	mov	ecx, DWORD PTR _n$[esp-4]
	mov	eax, DWORD PTR _pCtx$[esp-4]
	mov	edx, DWORD PTR _z$[esp-4]
	push	-1
	push	2
	push	ecx
	mov	BYTE PTR [eax+76], 1
	push	edx
	add	eax, 8
	push	eax
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
; Line 32586
	ret	0
_sqlite3_result_error16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_text
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_xDel$ = 20						; size = 4
_sqlite3_result_text PROC				; COMDAT
; Line 32603
	mov	eax, DWORD PTR _xDel$[esp-4]
	mov	ecx, DWORD PTR _n$[esp-4]
	mov	edx, DWORD PTR _z$[esp-4]
	push	eax
	mov	eax, DWORD PTR _pCtx$[esp]
	push	1
	push	ecx
	push	edx
	add	eax, 8
	push	eax
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
; Line 32604
	ret	0
_sqlite3_result_text ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_text16
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_xDel$ = 20						; size = 4
_sqlite3_result_text16 PROC				; COMDAT
; Line 32612
	mov	eax, DWORD PTR _xDel$[esp-4]
	mov	ecx, DWORD PTR _n$[esp-4]
	mov	edx, DWORD PTR _z$[esp-4]
	push	eax
	mov	eax, DWORD PTR _pCtx$[esp]
	push	2
	push	ecx
	push	edx
	add	eax, 8
	push	eax
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
; Line 32613
	ret	0
_sqlite3_result_text16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_text16be
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_xDel$ = 20						; size = 4
_sqlite3_result_text16be PROC				; COMDAT
; Line 32620
	mov	eax, DWORD PTR _xDel$[esp-4]
	mov	ecx, DWORD PTR _n$[esp-4]
	mov	edx, DWORD PTR _z$[esp-4]
	push	eax
	mov	eax, DWORD PTR _pCtx$[esp]
	push	3
	push	ecx
	push	edx
	add	eax, 8
	push	eax
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
; Line 32621
	ret	0
_sqlite3_result_text16be ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_text16le
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_xDel$ = 20						; size = 4
_sqlite3_result_text16le PROC				; COMDAT
; Line 32628
	mov	eax, DWORD PTR _xDel$[esp-4]
	mov	ecx, DWORD PTR _n$[esp-4]
	mov	edx, DWORD PTR _z$[esp-4]
	push	eax
	mov	eax, DWORD PTR _pCtx$[esp]
	push	2
	push	ecx
	push	edx
	add	eax, 8
	push	eax
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
; Line 32629
	ret	0
_sqlite3_result_text16le ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_result_value
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_pValue$ = 12						; size = 4
_sqlite3_result_value PROC				; COMDAT
; Line 32632
	mov	eax, DWORD PTR _pValue$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR _pCtx$[esp]
	push	eax
	add	ebx, 8
	call	_sqlite3VdbeMemCopy
	add	esp, 4
	pop	ebx
; Line 32633
	ret	0
_sqlite3_result_value ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_aggregate_context
_TEXT	SEGMENT
_p$ = 8							; size = 4
_nByte$ = 12						; size = 4
_sqlite3_aggregate_context PROC				; COMDAT
; Line 32826
	mov	eax, DWORD PTR _p$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+72]
; Line 32828
	mov	ecx, 1024				; 00000400H
	test	WORD PTR [esi+24], cx
	jne	SHORT $LN8@sqlite3_ag
	push	edi
; Line 32829
	mov	edi, DWORD PTR _nByte$[esp+4]
	test	edi, edi
	jne	SHORT $LN4@sqlite3_ag
; Line 32831
	mov	DWORD PTR [esi+16], edi
; Line 32844
	mov	eax, DWORD PTR [esi+16]
	pop	edi
	pop	esi
; Line 32845
	ret	0
$LN4@sqlite3_ag:
; Line 32836
	cmp	edi, 32					; 00000020H
	mov	WORD PTR [esi+24], cx
	mov	DWORD PTR [esi+28], OFFSET _sqlite3FreeX
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [esi], eax
	jg	SHORT $LN2@sqlite3_ag
; Line 32838
	push	edi
	lea	eax, DWORD PTR [esi+32]
	push	0
	push	eax
	mov	DWORD PTR [esi+16], eax
	call	_memset
; Line 32844
	mov	eax, DWORD PTR [esi+16]
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 32845
	ret	0
$LN2@sqlite3_ag:
; Line 32840
	call	_sqlite3Malloc
	mov	DWORD PTR [esi+16], eax
	pop	edi
$LN8@sqlite3_ag:
; Line 32844
	mov	eax, DWORD PTR [esi+16]
	pop	esi
; Line 32845
	ret	0
_sqlite3_aggregate_context ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_transfer_bindings
_TEXT	SEGMENT
_pFromStmt$ = 8						; size = 4
_pToStmt$ = 12						; size = 4
_sqlite3_transfer_bindings PROC				; COMDAT
; Line 33365
	push	ebp
; Line 33370
	mov	ebp, DWORD PTR _pFromStmt$[esp]
	mov	ecx, DWORD PTR [ebp+76]
	xor	eax, eax
	cmp	ecx, -1108210269			; bdf20da3H
	je	SHORT $LN5@sqlite3_tr
	cmp	ecx, 1369188723				; 519c2973H
	jne	SHORT $LN6@sqlite3_tr
$LN5@sqlite3_tr:
	mov	ecx, DWORD PTR _pToStmt$[esp]
	mov	edx, DWORD PTR [ecx+76]
	cmp	edx, -1108210269			; bdf20da3H
	je	SHORT $LN7@sqlite3_tr
	cmp	edx, 1369188723				; 519c2973H
	je	SHORT $LN7@sqlite3_tr
$LN6@sqlite3_tr:
; Line 33371
	mov	eax, 21					; 00000015H
	pop	ebp
; Line 33383
	ret	0
$LN7@sqlite3_tr:
; Line 33373
	mov	edx, DWORD PTR [ebp+60]
	cmp	edx, DWORD PTR [ecx+60]
	je	SHORT $LN4@sqlite3_tr
; Line 33374
	mov	eax, 1
	pop	ebp
; Line 33383
	ret	0
$LN4@sqlite3_tr:
	push	ebx
	push	esi
	push	edi
; Line 33376
	xor	edi, edi
	xor	esi, esi
	jmp	SHORT $LN3@sqlite3_tr
$LL12@sqlite3_tr:
	mov	ecx, DWORD PTR _pToStmt$[esp+12]
$LN3@sqlite3_tr:
	cmp	edi, DWORD PTR [ebp+60]
	jge	SHORT $LN1@sqlite3_tr
; Line 33378
	mov	eax, DWORD PTR [ebp+64]
	mov	ebx, DWORD PTR [ecx+64]
	add	eax, esi
	push	eax
	add	ebx, esi
	call	_sqlite3VdbeMemMove
	add	esp, 4
	add	edi, 1
	add	esi, 64					; 00000040H
	test	eax, eax
	je	SHORT $LL12@sqlite3_tr
$LN1@sqlite3_tr:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
; Line 33383
	ret	0
_sqlite3_transfer_bindings ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprFunction
_TEXT	SEGMENT
_sqlite3ExprFunction PROC				; COMDAT
; _pList$ = eax
; _pToken$ = edi
; Line 39222
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _inMutex
	push	esi
	mov	ebx, eax
	je	SHORT $LN11@sqlite3Exp@9
	test	ebp, ebp
	jg	SHORT $LN29@sqlite3Exp@9
$LN11@sqlite3Exp@9:
	push	72					; 00000048H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN30@sqlite3Exp@9
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN21@sqlite3Exp@9
	test	ebp, ebp
	jg	SHORT $LN4@sqlite3Exp@9
$LN21@sqlite3Exp@9:
	add	ebp, 1
	mov	DWORD PTR _inMutex, ebp
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN4@sqlite3Exp@9
$LN30@sqlite3Exp@9:
	push	72					; 00000048H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@sqlite3Exp@9:
; Line 39223
	test	esi, esi
	jne	SHORT $LN1@sqlite3Exp@9
$LN29@sqlite3Exp@9:
; Line 39224
	call	_sqlite3ExprListDelete
	pop	esi
	pop	ebp
; Line 39225
	xor	eax, eax
	pop	ebx
; Line 39235
	ret	0
$LN1@sqlite3Exp@9:
; Line 39228
	mov	DWORD PTR [esi+16], ebx
	mov	BYTE PTR [esi], 148			; 00000094H
; Line 39230
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi+20], eax
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+24], ecx
; Line 39231
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [esi+28], edx
	mov	eax, DWORD PTR [edi+4]
; Line 39233
	mov	ebx, esi
	mov	DWORD PTR [esi+32], eax
	call	_sqlite3ExprSetHeight
; Line 39234
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 39235
	ret	0
_sqlite3ExprFunction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprDelete
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3ExprDelete PROC					; COMDAT
; Line 39312
	push	esi
; Line 39313
	mov	esi, DWORD PTR _p$[esp]
	test	esi, esi
	je	SHORT $LN27@sqlite3Exp@10
	push	ebx
; Line 39314
	mov	bl, 1
	test	BYTE PTR [esi+32], bl
	push	edi
	je	SHORT $LN9@sqlite3Exp@10
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN9@sqlite3Exp@10
	push	eax
	call	_free
	add	esp, 4
$LN9@sqlite3Exp@10:
; Line 39315
	test	BYTE PTR [esi+24], bl
	je	SHORT $LN14@sqlite3Exp@10
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN14@sqlite3Exp@10
	push	eax
	call	_free
	add	esp, 4
$LN14@sqlite3Exp@10:
; Line 39316
	mov	eax, DWORD PTR [esi+8]
	push	eax
	call	_sqlite3ExprDelete
; Line 39317
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	call	_sqlite3ExprDelete
; Line 39318
	mov	ebx, DWORD PTR [esi+16]
	add	esp, 8
	call	_sqlite3ExprListDelete
; Line 39319
	mov	edi, DWORD PTR [esi+56]
	test	edi, edi
	je	SHORT $LN22@sqlite3Exp@10
	push	edi
	call	_clearSelect
	push	edi
	call	_free
	add	esp, 8
$LN22@sqlite3Exp@10:
; Line 39320
	push	esi
	call	_free
	add	esp, 4
	pop	edi
	pop	ebx
$LN27@sqlite3Exp@10:
	pop	esi
; Line 39321
	ret	0
_sqlite3ExprDelete ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3TokenCopy
_TEXT	SEGMENT
_pTo$ = 8						; size = 4
_sqlite3TokenCopy PROC					; COMDAT
; _pFrom$ = eax
; Line 39370
	push	ebp
	mov	ebp, DWORD PTR _pTo$[esp]
; Line 39371
	test	BYTE PTR [ebp+4], 1
	push	edi
	mov	edi, eax
	je	SHORT $LN15@sqlite3Tok
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	SHORT $LN15@sqlite3Tok
	push	eax
	call	_free
	add	esp, 4
$LN15@sqlite3Tok:
; Line 39372
	cmp	DWORD PTR [edi], 0
	je	SHORT $LN2@sqlite3Tok
; Line 39373
	mov	eax, DWORD PTR [edi+4]
	xor	eax, DWORD PTR [ebp+4]
	push	ebx
	and	eax, 1
	xor	eax, DWORD PTR [edi+4]
	push	esi
	mov	DWORD PTR [ebp+4], eax
; Line 39374
	mov	esi, DWORD PTR [edi+4]
	mov	ebx, DWORD PTR [edi]
	shr	esi, 1
	test	ebx, ebx
	jne	SHORT $LN12@sqlite3Tok
	pop	esi
	xor	edi, edi
; Line 39375
	or	DWORD PTR [ebp+4], 1
	pop	ebx
	mov	DWORD PTR [ebp], edi
	pop	edi
	pop	ebp
; Line 39379
	ret	0
; Line 39374
$LN12@sqlite3Tok:
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN11@sqlite3Tok
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN11@sqlite3Tok:
; Line 39375
	or	DWORD PTR [ebp+4], 1
	pop	esi
	pop	ebx
	mov	DWORD PTR [ebp], edi
	pop	edi
	pop	ebp
; Line 39379
	ret	0
$LN2@sqlite3Tok:
	pop	edi
; Line 39377
	mov	DWORD PTR [ebp], 0
	pop	ebp
; Line 39379
	ret	0
_sqlite3TokenCopy ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprListDup
_TEXT	SEGMENT
_i$ = -12						; size = 4
$T112685 = -8						; size = 4
_p$112589 = -4						; size = 4
_p$ = 8							; size = 4
_sqlite3ExprListDup PROC				; COMDAT
; Line 39380
	sub	esp, 12					; 0000000cH
	push	ebp
; Line 39384
	mov	ebp, DWORD PTR _p$[esp+12]
	test	ebp, ebp
	jne	SHORT $LN7@sqlite3Exp@11
	xor	eax, eax
	pop	ebp
; Line 39412
	add	esp, 12					; 0000000cH
	ret	0
$LN7@sqlite3Exp@11:
; Line 39385
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN17@sqlite3Exp@11
	test	esi, esi
	jg	SHORT $LN78@sqlite3Exp@11
$LN17@sqlite3Exp@11:
	push	16					; 00000010H
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	mov	DWORD PTR _p$112589[esp+24], ebx
	jne	SHORT $LN79@sqlite3Exp@11
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN27@sqlite3Exp@11
	test	esi, esi
	jg	SHORT $LN81@sqlite3Exp@11
$LN27@sqlite3Exp@11:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN81@sqlite3Exp@11
$LN79@sqlite3Exp@11:
	xor	eax, eax
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+8], eax
	mov	DWORD PTR [ebx+12], eax
$LN81@sqlite3Exp@11:
; Line 39386
	test	ebx, ebx
	jne	SHORT $LN6@sqlite3Exp@11
$LN78@sqlite3Exp@11:
	pop	esi
	pop	ebx
	xor	eax, eax
	pop	ebp
; Line 39412
	add	esp, 12					; 0000000cH
	ret	0
$LN6@sqlite3Exp@11:
; Line 39387
	mov	eax, DWORD PTR [ebp]
	push	edi
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx], eax
; Line 39388
	mov	eax, DWORD PTR [ebp]
	lea	edi, DWORD PTR [eax+eax*2]
	add	edi, edi
	add	edi, edi
	call	_sqlite3Malloc
	mov	esi, eax
; Line 39389
	test	esi, esi
	mov	DWORD PTR [ebx+12], esi
	jne	SHORT $LN5@sqlite3Exp@11
; Line 39390
	push	ebx
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
; Line 39391
	xor	eax, eax
	pop	ebp
; Line 39412
	add	esp, 12					; 0000000cH
	ret	0
$LN5@sqlite3Exp@11:
; Line 39394
	cmp	DWORD PTR [ebp], 0
	mov	edi, DWORD PTR [ebp+12]
	mov	DWORD PTR _i$[esp+28], 0
	jle	$LN2@sqlite3Exp@11
$LL4@sqlite3Exp@11:
; Line 39396
	mov	ebp, DWORD PTR [edi]
	push	ebp
	call	_sqlite3ExprDup
; Line 39397
	add	ebp, 28					; 0000001cH
	add	esp, 4
	mov	DWORD PTR [esi], eax
	cmp	DWORD PTR [ebp], 0
	je	SHORT $LN1@sqlite3Exp@11
	test	eax, eax
	je	SHORT $LN1@sqlite3Exp@11
; Line 39401
	add	eax, 28					; 0000001cH
	push	eax
	mov	eax, ebp
	call	_sqlite3TokenCopy
	add	esp, 4
$LN1@sqlite3Exp@11:
; Line 39406
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	mov	DWORD PTR $T112685[esp+28], eax
	jne	SHORT $LN73@sqlite3Exp@11
	xor	ebp, ebp
	jmp	SHORT $LN74@sqlite3Exp@11
$LN73@sqlite3Exp@11:
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL80@sqlite3Exp@11:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL80@sqlite3Exp@11
	sub	eax, edx
	lea	ebx, DWORD PTR [eax+1]
	mov	ecx, ebx
	call	_sqlite3MallocRaw
	mov	ebp, eax
	test	ebp, ebp
	je	SHORT $LN72@sqlite3Exp@11
	mov	eax, DWORD PTR $T112685[esp+28]
	push	ebx
	push	eax
	push	ebp
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN72@sqlite3Exp@11:
	mov	ebx, DWORD PTR _p$112589[esp+28]
$LN74@sqlite3Exp@11:
	mov	eax, DWORD PTR _i$[esp+28]
	mov	DWORD PTR [esi+4], ebp
; Line 39407
	mov	cl, BYTE PTR [edi+8]
	mov	BYTE PTR [esi+8], cl
; Line 39408
	mov	dl, BYTE PTR [edi+9]
	mov	ecx, DWORD PTR _p$[esp+24]
	mov	BYTE PTR [esi+9], dl
; Line 39409
	mov	BYTE PTR [esi+10], 0
	add	eax, 1
	add	esi, 12					; 0000000cH
	add	edi, 12					; 0000000cH
	cmp	eax, DWORD PTR [ecx]
	mov	DWORD PTR _i$[esp+28], eax
	jl	$LL4@sqlite3Exp@11
$LN2@sqlite3Exp@11:
	pop	edi
	pop	esi
; Line 39411
	mov	eax, ebx
	pop	ebx
	pop	ebp
; Line 39412
	add	esp, 12					; 0000000cH
	ret	0
_sqlite3ExprListDup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3IdListDup
_TEXT	SEGMENT
_i$ = -12						; size = 4
_p$112737 = -8						; size = 4
_n$112759 = -4						; size = 4
_p$ = 8							; size = 4
_sqlite3IdListDup PROC					; COMDAT
; Line 39452
	sub	esp, 12					; 0000000cH
	push	ebx
; Line 39455
	mov	ebx, DWORD PTR _p$[esp+12]
	test	ebx, ebx
	jne	SHORT $LN6@sqlite3IdL@3
	xor	eax, eax
	pop	ebx
; Line 39471
	add	esp, 12					; 0000000cH
	ret	0
$LN6@sqlite3IdL@3:
; Line 39456
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	esi
	push	edi
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN13@sqlite3IdL@3
	test	edi, edi
	jg	SHORT $LN24@sqlite3IdL@3
$LN13@sqlite3IdL@3:
	push	12					; 0000000cH
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	mov	DWORD PTR _p$112737[esp+24], esi
	jne	SHORT $LN5@sqlite3IdL@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN23@sqlite3IdL@3
	test	edi, edi
	jg	SHORT $LN24@sqlite3IdL@3
$LN23@sqlite3IdL@3:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN24@sqlite3IdL@3:
	pop	edi
	pop	esi
; Line 39457
	xor	eax, eax
	pop	ebx
; Line 39471
	add	esp, 12					; 0000000cH
	ret	0
$LN5@sqlite3IdL@3:
; Line 39458
	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+4], eax
; Line 39459
	mov	ecx, DWORD PTR [ebx+4]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	call	_sqlite3MallocRaw
; Line 39460
	test	eax, eax
	mov	DWORD PTR [esi], eax
	jne	SHORT $LN4@sqlite3IdL@3
; Line 39461
	push	esi
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
; Line 39462
	xor	eax, eax
	pop	ebx
; Line 39471
	add	esp, 12					; 0000000cH
	ret	0
$LN4@sqlite3IdL@3:
; Line 39464
	xor	ecx, ecx
	cmp	DWORD PTR [ebx+4], ecx
	mov	DWORD PTR _i$[esp+24], ecx
	jle	SHORT $LN1@sqlite3IdL@3
	push	ebp
	npad	1
$LL3@sqlite3IdL@3:
	mov	edi, DWORD PTR [esi]
	mov	esi, DWORD PTR [ebx]
	lea	eax, DWORD PTR [ecx*8]
; Line 39467
	mov	ebp, DWORD PTR [esi+eax]
	add	esi, eax
	add	edi, eax
	test	ebp, ebp
	jne	SHORT $LN37@sqlite3IdL@3
	xor	eax, eax
	jmp	SHORT $LN38@sqlite3IdL@3
$LN37@sqlite3IdL@3:
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL43@sqlite3IdL@3:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL43@sqlite3IdL@3
	sub	eax, edx
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR _n$112759[esp+28], ecx
	call	_sqlite3MallocRaw
	mov	ebx, eax
	test	ebx, ebx
	je	SHORT $LN36@sqlite3IdL@3
	mov	eax, DWORD PTR _n$112759[esp+28]
	push	eax
	push	ebp
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN36@sqlite3IdL@3:
	mov	ecx, DWORD PTR _i$[esp+28]
	mov	eax, ebx
	mov	ebx, DWORD PTR _p$[esp+24]
$LN38@sqlite3IdL@3:
	mov	DWORD PTR [edi], eax
; Line 39468
	mov	edx, DWORD PTR [esi+4]
	mov	esi, DWORD PTR _p$112737[esp+28]
	add	ecx, 1
	mov	DWORD PTR [edi+4], edx
	cmp	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR _i$[esp+28], ecx
	jl	SHORT $LL3@sqlite3IdL@3
	pop	ebp
$LN1@sqlite3IdL@3:
	pop	edi
; Line 39470
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 39471
	add	esp, 12					; 0000000cH
	ret	0
_sqlite3IdListDup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FixSelect
_TEXT	SEGMENT
_pFix$ = 8						; size = 4
_pSelect$ = 12						; size = 4
_sqlite3FixSelect PROC					; COMDAT
; Line 42911
	push	ebx
	push	ebp
; Line 42912
	mov	ebp, DWORD PTR _pSelect$[esp+4]
	test	ebp, ebp
	push	esi
	push	edi
	je	SHORT $LN5@sqlite3Fix@4
	npad	4
$LL6@sqlite3Fix@4:
; Line 42913
	mov	edi, DWORD PTR [ebp]
	test	edi, edi
	je	SHORT $LN10@sqlite3Fix@4
	mov	ebx, DWORD PTR [edi+12]
	xor	esi, esi
	cmp	DWORD PTR [edi], esi
	jle	SHORT $LN10@sqlite3Fix@4
$LL12@sqlite3Fix@4:
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _pFix$[esp+12]
	push	eax
	push	ecx
	call	_sqlite3FixExpr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN60@sqlite3Fix@4
	add	esi, 1
	add	ebx, 12					; 0000000cH
	cmp	esi, DWORD PTR [edi]
	jl	SHORT $LL12@sqlite3Fix@4
$LN10@sqlite3Fix@4:
; Line 42916
	mov	edx, DWORD PTR [ebp+12]
	mov	esi, DWORD PTR _pFix$[esp+12]
	push	edx
	push	esi
	call	_sqlite3FixSrcList
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN60@sqlite3Fix@4
; Line 42919
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	push	esi
	call	_sqlite3FixExpr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN60@sqlite3Fix@4
; Line 42922
	mov	ecx, DWORD PTR [ebp+24]
	push	ecx
	push	esi
	call	_sqlite3FixExpr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN60@sqlite3Fix@4
; Line 42925
	mov	ebp, DWORD PTR [ebp+32]
	test	ebp, ebp
	jne	SHORT $LL6@sqlite3Fix@4
$LN5@sqlite3Fix@4:
	pop	edi
	pop	esi
	pop	ebp
; Line 42927
	xor	eax, eax
	pop	ebx
; Line 42928
	ret	0
$LN60@sqlite3Fix@4:
	pop	edi
	pop	esi
	pop	ebp
; Line 42914
	mov	eax, 1
	pop	ebx
; Line 42928
	ret	0
_sqlite3FixSelect ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FixTriggerStep
_TEXT	SEGMENT
_pFix$ = 8						; size = 4
_pStep$ = 12						; size = 4
_sqlite3FixTriggerStep PROC				; COMDAT
; Line 42967
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pStep$[esp+4]
; Line 42968
	test	ebp, ebp
	push	esi
	push	edi
	je	SHORT $LN4@sqlite3Fix@5
	npad	4
$LL5@sqlite3Fix@5:
; Line 42969
	mov	eax, DWORD PTR [ebp+12]
	mov	esi, DWORD PTR _pFix$[esp+12]
	push	eax
	push	esi
	call	_sqlite3FixSelect
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@sqlite3Fix@5
; Line 42972
	mov	ecx, DWORD PTR [ebp+24]
	push	ecx
	push	esi
	call	_sqlite3FixExpr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@sqlite3Fix@5
; Line 42975
	mov	edi, DWORD PTR [ebp+28]
	test	edi, edi
	je	SHORT $LN25@sqlite3Fix@5
	mov	ebx, DWORD PTR [edi+12]
	xor	esi, esi
	cmp	DWORD PTR [edi], esi
	jle	SHORT $LN25@sqlite3Fix@5
$LL11@sqlite3Fix@5:
	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _pFix$[esp+12]
	push	edx
	push	eax
	call	_sqlite3FixExpr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@sqlite3Fix@5
	add	esi, 1
	add	ebx, 12					; 0000000cH
	cmp	esi, DWORD PTR [edi]
	jl	SHORT $LL11@sqlite3Fix@5
$LN25@sqlite3Fix@5:
; Line 42978
	mov	ebp, DWORD PTR [ebp+36]
	test	ebp, ebp
	jne	SHORT $LL5@sqlite3Fix@5
$LN4@sqlite3Fix@5:
	pop	edi
	pop	esi
	pop	ebp
; Line 42980
	xor	eax, eax
	pop	ebx
; Line 42981
	ret	0
$LN18@sqlite3Fix@5:
	pop	edi
	pop	esi
	pop	ebp
; Line 42970
	mov	eax, 1
	pop	ebx
; Line 42981
	ret	0
_sqlite3FixTriggerStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqliteResetColumnNames
_TEXT	SEGMENT
_sqliteResetColumnNames PROC				; COMDAT
; _pTable$ = edi
; Line 43675
	push	ebp
	push	esi
; Line 43679
	mov	esi, DWORD PTR [edi+8]
	xor	ebp, ebp
	cmp	esi, ebp
	je	SHORT $LN30@sqliteRese
	push	ebx
; Line 43680
	xor	ebx, ebx
	cmp	DWORD PTR [edi+4], ebp
	jle	SHORT $LN1@sqliteRese
$LL3@sqliteRese:
; Line 43681
	mov	eax, DWORD PTR [esi]
	cmp	eax, ebp
	je	SHORT $LN10@sqliteRese
	push	eax
	call	_free
	add	esp, 4
$LN10@sqliteRese:
; Line 43682
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	_sqlite3ExprDelete
; Line 43683
	mov	eax, DWORD PTR [esi+8]
	add	esp, 4
	cmp	eax, ebp
	je	SHORT $LN15@sqliteRese
	push	eax
	call	_free
	add	esp, 4
$LN15@sqliteRese:
; Line 43684
	mov	eax, DWORD PTR [esi+12]
	cmp	eax, ebp
	je	SHORT $LN2@sqliteRese
	push	eax
	call	_free
	add	esp, 4
$LN2@sqliteRese:
	add	ebx, 1
	add	esi, 20					; 00000014H
	cmp	ebx, DWORD PTR [edi+4]
	jl	SHORT $LL3@sqliteRese
$LN1@sqliteRese:
; Line 43686
	mov	eax, DWORD PTR [edi+8]
	cmp	eax, ebp
	pop	ebx
	je	SHORT $LN30@sqliteRese
	push	eax
	call	_free
	add	esp, 4
$LN30@sqliteRese:
	pop	esi
; Line 43688
	mov	DWORD PTR [edi+8], ebp
; Line 43689
	mov	DWORD PTR [edi+4], ebp
	pop	ebp
; Line 43690
	ret	0
_sqliteResetColumnNames ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3DeleteTable
_TEXT	SEGMENT
_pTable$ = 8						; size = 4
_sqlite3DeleteTable PROC				; COMDAT
; Line 43702
	push	edi
; Line 43706
	mov	edi, DWORD PTR _pTable$[esp]
	test	edi, edi
	je	$LN37@sqlite3Del
; Line 43709
	add	DWORD PTR [edi+28], -1
; Line 43710
	cmp	DWORD PTR [edi+28], 0
	jg	$LN37@sqlite3Del
; Line 43717
	mov	eax, DWORD PTR [edi+16]
	test	eax, eax
	push	esi
	je	SHORT $LN4@sqlite3Del
$LL6@sqlite3Del:
; Line 43718
	mov	esi, DWORD PTR [eax+32]
; Line 43720
	push	eax
	call	_sqliteDeleteIndex
	add	esp, 4
	test	esi, esi
	mov	eax, esi
	jne	SHORT $LL6@sqlite3Del
$LN4@sqlite3Del:
; Line 43727
	mov	eax, DWORD PTR [edi+36]
	test	eax, eax
	je	SHORT $LN1@sqlite3Del
	npad	4
$LL3@sqlite3Del:
; Line 43728
	mov	esi, DWORD PTR [eax+4]
; Line 43731
	push	eax
	call	_free
	add	esp, 4
	test	esi, esi
	mov	eax, esi
	jne	SHORT $LL3@sqlite3Del
$LN1@sqlite3Del:
; Line 43737
	call	_sqliteResetColumnNames
; Line 43738
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN19@sqlite3Del
	push	eax
	call	_free
	add	esp, 4
$LN19@sqlite3Del:
; Line 43739
	mov	eax, DWORD PTR [edi+40]
	test	eax, eax
	je	SHORT $LN24@sqlite3Del
	push	eax
	call	_free
	add	esp, 4
$LN24@sqlite3Del:
; Line 43740
	mov	esi, DWORD PTR [edi+24]
	test	esi, esi
	je	SHORT $LN32@sqlite3Del
	push	esi
	call	_clearSelect
	push	esi
	call	_free
	add	esp, 8
$LN32@sqlite3Del:
; Line 43742
	mov	eax, DWORD PTR [edi+44]
	push	eax
	call	_sqlite3ExprDelete
; Line 43744
	mov	eax, edi
	call	_sqlite3VtabClear
; Line 43745
	push	edi
	call	_free
	add	esp, 8
	pop	esi
$LN37@sqlite3Del:
	pop	edi
; Line 43746
	ret	0
_sqlite3DeleteTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3UnlinkAndDeleteTable
_TEXT	SEGMENT
_pDb$ = -8						; size = 4
_old_data$113042 = -4					; size = 4
_db$ = 8						; size = 4
_zTabName$ = 12						; size = 4
_sqlite3UnlinkAndDeleteTable PROC			; COMDAT
; _iDb$ = eax
; Line 43752
	sub	esp, 8
; Line 43760
	mov	ecx, DWORD PTR _db$[esp+4]
	mov	edx, DWORD PTR [ecx+4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zTabName$[esp+12]
	lea	eax, DWORD PTR [eax+eax*2]
	push	esi
	lea	esi, DWORD PTR [edx+eax*8]
; Line 43761
	mov	eax, ebp
	push	edi
	mov	DWORD PTR _pDb$[esp+24], esi
	lea	edx, DWORD PTR [eax+1]
$LL44@sqlite3Unl@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL44@sqlite3Unl@2
	mov	esi, DWORD PTR [esi+20]
	sub	eax, edx
	add	esi, 4
	cmp	BYTE PTR [esi], 3
	lea	edi, DWORD PTR [eax+1]
	mov	eax, OFFSET _strHash
	je	SHORT $LN26@sqlite3Unl@2
	mov	eax, OFFSET _binHash
$LN26@sqlite3Unl@2:
	push	edi
	push	ebp
	call	eax
	mov	ebx, DWORD PTR [esi+20]
	sub	ebx, 1
	and	ebx, eax
	push	edi
	push	ebp
	mov	edx, ebx
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN47@sqlite3Unl@2
	mov	ebp, DWORD PTR [eax+8]
	mov	edi, eax
	push	ebx
	mov	eax, esi
	mov	DWORD PTR _old_data$113042[esp+28], ebp
	call	_removeElementGivenHash
	add	esp, 4
; Line 43762
	test	ebp, ebp
	je	$LN47@sqlite3Unl@2
; Line 43764
	mov	ebp, DWORD PTR [ebp+36]
	test	ebp, ebp
	je	$LN6@sqlite3Unl@2
	npad	3
$LL8@sqlite3Unl@2:
; Line 43765
	mov	ebx, DWORD PTR [ebp+8]
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL45@sqlite3Unl@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL45@sqlite3Unl@2
	sub	eax, edx
	lea	edi, DWORD PTR [eax+1]
; Line 43766
	mov	eax, DWORD PTR _pDb$[esp+24]
	mov	esi, DWORD PTR [eax+20]
	add	esi, 88					; 00000058H
	je	SHORT $LN48@sqlite3Unl@2
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN48@sqlite3Unl@2
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN36@sqlite3Unl@2
	mov	eax, OFFSET _binHash
$LN36@sqlite3Unl@2:
	push	edi
	push	ebx
	call	eax
	mov	edx, DWORD PTR [esi+20]
	sub	edx, 1
	push	edi
	and	edx, eax
	push	ebx
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN48@sqlite3Unl@2
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN32@sqlite3Unl@2
$LN48@sqlite3Unl@2:
	xor	eax, eax
$LN32@sqlite3Unl@2:
; Line 43767
	cmp	eax, ebp
	jne	SHORT $LN41@sqlite3Unl@2
; Line 43768
	mov	ecx, DWORD PTR [ebp+12]
	mov	eax, DWORD PTR _pDb$[esp+24]
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [eax+20]
	push	ecx
	push	edi
	push	edx
	add	eax, 88					; 00000058H
	call	_sqlite3HashInsert
	add	esp, 12					; 0000000cH
; Line 43769
	jmp	SHORT $LN7@sqlite3Unl@2
$LN41@sqlite3Unl@2:
; Line 43770
	test	eax, eax
	je	SHORT $LN7@sqlite3Unl@2
	npad	1
$LL3@sqlite3Unl@2:
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, ebp
	je	SHORT $LN2@sqlite3Unl@2
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LL3@sqlite3Unl@2
; Line 43771
	jmp	SHORT $LN7@sqlite3Unl@2
$LN2@sqlite3Unl@2:
; Line 43772
	mov	ecx, DWORD PTR [ebp+12]
	mov	DWORD PTR [eax+12], ecx
$LN7@sqlite3Unl@2:
	mov	ebp, DWORD PTR [ebp+4]
	test	ebp, ebp
	jne	$LL8@sqlite3Unl@2
$LN6@sqlite3Unl@2:
; Line 43777
	mov	edx, DWORD PTR _old_data$113042[esp+24]
	push	edx
	call	_sqlite3DeleteTable
	add	esp, 4
$LN47@sqlite3Unl@2:
; Line 43779
	mov	eax, DWORD PTR _db$[esp+20]
	or	DWORD PTR [eax+8], 16			; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 43780
	add	esp, 8
	ret	0
_sqlite3UnlinkAndDeleteTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3NameFromToken
_TEXT	SEGMENT
_sqlite3NameFromToken PROC				; COMDAT
; _pName$ = eax
; Line 43794
	test	eax, eax
	je	SHORT $LN2@sqlite3Nam
	push	ebx
; Line 43795
	mov	ebx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	shr	esi, 1
	test	ebx, ebx
	jne	SHORT $LN6@sqlite3Nam
	xor	esi, esi
; Line 43796
	call	_sqlite3Dequote
; Line 43800
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 43801
	ret	0
; Line 43795
$LN6@sqlite3Nam:
	push	edi
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN5@sqlite3Nam
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN5@sqlite3Nam:
	mov	esi, edi
	pop	edi
; Line 43796
	call	_sqlite3Dequote
; Line 43800
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 43801
	ret	0
$LN2@sqlite3Nam:
; Line 43798
	xor	eax, eax
; Line 43801
	ret	0
_sqlite3NameFromToken ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FindDb
_TEXT	SEGMENT
_zName$113118 = -4					; size = 4
_db$ = 8						; size = 4
_sqlite3FindDb PROC					; COMDAT
; _pName$ = eax
; Line 43821
	push	ecx
; Line 43822
	or	ecx, -1
; Line 43827
	test	eax, eax
	push	ebp
	mov	ebp, DWORD PTR _db$[esp+4]
	je	$LN27@sqlite3Fin@3
	push	ebx
	mov	ebx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	shr	esi, 1
	test	ebx, ebx
	push	edi
	jne	SHORT $LN13@sqlite3Fin@3
	xor	esi, esi
	mov	DWORD PTR _zName$113118[esp+20], esi
	jmp	SHORT $LN14@sqlite3Fin@3
$LN13@sqlite3Fin@3:
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN12@sqlite3Fin@3
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN12@sqlite3Fin@3:
	mov	DWORD PTR _zName$113118[esp+20], edi
	mov	esi, edi
$LN14@sqlite3Fin@3:
	call	_sqlite3Dequote
; Line 43828
	test	esi, esi
	je	SHORT $LN26@sqlite3Fin@3
; Line 43829
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL24@sqlite3Fin@3:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL24@sqlite3Fin@3
; Line 43830
	mov	edi, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [ebp+4]
	sub	eax, edx
	sub	edi, 1
	mov	esi, eax
	lea	eax, DWORD PTR [edi+edi*2]
	lea	ebx, DWORD PTR [ecx+eax*8]
	js	SHORT $LN28@sqlite3Fin@3
$LL4@sqlite3Fin@3:
; Line 43832
	mov	ecx, DWORD PTR [ebx]
	mov	eax, ecx
	lea	ebp, DWORD PTR [eax+1]
	npad	3
$LL25@sqlite3Fin@3:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL25@sqlite3Fin@3
	sub	eax, ebp
	cmp	esi, eax
	jne	SHORT $LN3@sqlite3Fin@3
	mov	edx, DWORD PTR _zName$113118[esp+20]
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN28@sqlite3Fin@3
$LN3@sqlite3Fin@3:
; Line 43830
	sub	edi, 1
	sub	ebx, 24					; 00000018H
	test	edi, edi
	jge	SHORT $LL4@sqlite3Fin@3
$LN28@sqlite3Fin@3:
; Line 43836
	mov	edx, DWORD PTR _zName$113118[esp+20]
	push	edx
	call	_free
	add	esp, 4
; Line 43838
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
; Line 43839
	pop	ecx
	ret	0
$LN26@sqlite3Fin@3:
	pop	edi
	pop	esi
	pop	ebx
; Line 43838
	or	eax, -1
	pop	ebp
; Line 43839
	pop	ecx
	ret	0
$LN27@sqlite3Fin@3:
; Line 43838
	mov	eax, ecx
	pop	ebp
; Line 43839
	pop	ecx
	ret	0
_sqlite3FindDb ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AddColumnType
_TEXT	SEGMENT
_sqlite3AddColumnType PROC				; COMDAT
; _pParse$ = eax
; _pType$ = edi
; Line 44258
	mov	ecx, DWORD PTR [eax+164]
	test	ecx, ecx
	je	SHORT $LN3@sqlite3Add@2
; Line 44259
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, 1
; Line 44260
	js	SHORT $LN3@sqlite3Add@2
; Line 44261
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+8]
	push	esi
	lea	esi, DWORD PTR [eax+edx*4]
; Line 44262
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN8@sqlite3Add@2
	push	eax
	call	_free
	add	esp, 4
$LN8@sqlite3Add@2:
; Line 44263
	mov	eax, edi
	call	_sqlite3NameFromToken
; Line 44264
	mov	edx, edi
	mov	DWORD PTR [esi+8], eax
	call	_sqlite3AffinityType
	mov	BYTE PTR [esi+18], al
	pop	esi
$LN3@sqlite3Add@2:
; Line 44265
	ret	0
_sqlite3AddColumnType ENDP
_TEXT	ENDS
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0O@BLHKEBID@CREATE?5TABLE?5?$AA@		; `string'
PUBLIC	??_C@_0BD@HKJEEOGH@CREATE?5TEMP?5TABLE?5?$AA@	; `string'
PUBLIC	??_C@_02EJGPDMNA@?6?$CJ?$AA@			; `string'
PUBLIC	??_C@_04PPJIEIMB@?0?6?5?5?$AA@			; `string'
PUBLIC	??_C@_03BMMPKCMF@?6?5?5?$AA@			; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_01IHBHIGKO@?0?$AA@			; `string'
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BLHKEBID@CREATE?5TABLE?5?$AA@
CONST	SEGMENT
??_C@_0O@BLHKEBID@CREATE?5TABLE?5?$AA@ DB 'CREATE TABLE ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HKJEEOGH@CREATE?5TEMP?5TABLE?5?$AA@
CONST	SEGMENT
??_C@_0BD@HKJEEOGH@CREATE?5TEMP?5TABLE?5?$AA@ DB 'CREATE TEMP TABLE ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02EJGPDMNA@?6?$CJ?$AA@
CONST	SEGMENT
??_C@_02EJGPDMNA@?6?$CJ?$AA@ DB 0aH, ')', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPJIEIMB@?0?6?5?5?$AA@
CONST	SEGMENT
??_C@_04PPJIEIMB@?0?6?5?5?$AA@ DB ',', 0aH, '  ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03BMMPKCMF@?6?5?5?$AA@
CONST	SEGMENT
??_C@_03BMMPKCMF@?6?5?5?$AA@ DB 0aH, '  ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0?$AA@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0?$AA@ DB ',', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _createTableStmt
_TEXT	SEGMENT
_k$ = -24						; size = 4
_zSep$ = -20						; size = 4
_n$ = -16						; size = 4
_zSep2$ = -12						; size = 4
_i$ = -8						; size = 4
_zEnd$ = -4						; size = 4
_p$ = 8							; size = 4
_isTemp$ = 12						; size = 4
_createTableStmt PROC					; COMDAT
; Line 44529
	mov	eax, DWORD PTR _p$[esp-4]
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR [eax+4]
	push	esi
	mov	esi, DWORD PTR [eax+8]
	push	edi
	xor	edi, edi
	test	ebp, ebp
	jle	SHORT $LN9@createTabl
; Line 44528
	mov	ebx, ebp
	npad	7
$LL66@createTabl:
; Line 44530
	mov	ecx, DWORD PTR [esi]
	mov	al, BYTE PTR [ecx]
	xor	edx, edx
	test	al, al
	je	SHORT $LN17@createTabl
	npad	6
$LL19@createTabl:
	cmp	al, 34					; 00000022H
	jne	SHORT $LN18@createTabl
	add	edx, 1
$LN18@createTabl:
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL19@createTabl
$LN17@createTabl:
; Line 44531
	mov	eax, DWORD PTR [esi+8]
; Line 44532
	test	eax, eax
	lea	edi, DWORD PTR [edi+edx+2]
	je	SHORT $LN10@createTabl
; Line 44533
	lea	edx, DWORD PTR [eax+1]
$LL59@createTabl:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL59@createTabl
	sub	eax, edx
	lea	edi, DWORD PTR [edi+eax+1]
$LN10@createTabl:
	add	esi, 20					; 00000014H
	sub	ebx, 1
	jne	SHORT $LL66@createTabl
; Line 44529
	mov	eax, DWORD PTR _p$[esp+36]
$LN9@createTabl:
; Line 44536
	mov	ecx, DWORD PTR [eax]
	mov	al, BYTE PTR [ecx]
	xor	edx, edx
	test	al, al
	je	SHORT $LN23@createTabl
$LL25@createTabl:
	cmp	al, 34					; 00000022H
	jne	SHORT $LN24@createTabl
	add	edx, 1
$LN24@createTabl:
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL25@createTabl
$LN23@createTabl:
	lea	edx, DWORD PTR [edi+edx+2]
; Line 44537
	cmp	edx, 50					; 00000032H
	jge	SHORT $LN7@createTabl
; Line 44538
	mov	DWORD PTR _zSep$[esp+40], OFFSET ??_C@_00CNPNBAHC@?$AA@
; Line 44539
	mov	DWORD PTR _zSep2$[esp+40], OFFSET ??_C@_01IHBHIGKO@?0?$AA@
; Line 44540
	mov	DWORD PTR _zEnd$[esp+40], OFFSET ??_C@_01PKGAHCOL@?$CJ?$AA@
; Line 44541
	jmp	SHORT $LN6@createTabl
$LN7@createTabl:
; Line 44542
	mov	DWORD PTR _zSep$[esp+40], OFFSET ??_C@_03BMMPKCMF@?6?5?5?$AA@
; Line 44543
	mov	DWORD PTR _zSep2$[esp+40], OFFSET ??_C@_04PPJIEIMB@?0?6?5?5?$AA@
; Line 44544
	mov	DWORD PTR _zEnd$[esp+40], OFFSET ??_C@_02EJGPDMNA@?6?$CJ?$AA@
$LN6@createTabl:
; Line 44546
	lea	eax, DWORD PTR [ebp+ebp*2]
	lea	ebx, DWORD PTR [edx+eax*2+35]
; Line 44547
	test	ebx, ebx
	mov	DWORD PTR _n$[esp+40], ebx
	jle	SHORT $LN43@createTabl
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN32@createTabl
	test	esi, esi
	jg	SHORT $LN43@createTabl
$LN32@createTabl:
	push	ebx
	call	_malloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN5@createTabl
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN42@createTabl
	test	esi, esi
	jg	SHORT $LN43@createTabl
$LN42@createTabl:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN43@createTabl:
	pop	edi
	pop	esi
	pop	ebp
; Line 44548
	xor	eax, eax
	pop	ebx
; Line 44568
	add	esp, 24					; 00000018H
	ret	0
$LN5@createTabl:
; Line 44550
	cmp	DWORD PTR _isTemp$[esp+36], 0
	mov	eax, OFFSET ??_C@_0BD@HKJEEOGH@CREATE?5TEMP?5TABLE?5?$AA@
	jne	SHORT $LN15@createTabl
	mov	eax, OFFSET ??_C@_0O@BLHKEBID@CREATE?5TABLE?5?$AA@
$LN15@createTabl:
	push	eax
	push	edi
	push	ebx
	call	_sqlite3_snprintf
; Line 44551
	mov	eax, edi
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR [eax+1]
$LL60@createTabl:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL60@createTabl
; Line 44552
	mov	ebp, DWORD PTR _p$[esp+36]
	sub	eax, edx
	lea	ecx, DWORD PTR _k$[esp+40]
	push	ecx
	mov	DWORD PTR _k$[esp+44], eax
	mov	eax, DWORD PTR [ebp]
	push	edi
	call	_identPut
; Line 44553
	mov	esi, DWORD PTR _k$[esp+48]
; Line 44554
	mov	edx, DWORD PTR _p$[esp+44]
	mov	BYTE PTR [edi+esi], 40			; 00000028H
	mov	ebp, DWORD PTR [ebp+8]
	add	esp, 8
	add	esi, 1
	cmp	DWORD PTR [edx+4], 0
	mov	DWORD PTR _i$[esp+40], 0
	jle	$LN2@createTabl
	npad	6
$LL4@createTabl:
; Line 44555
	mov	eax, DWORD PTR _zSep$[esp+40]
	mov	ecx, DWORD PTR _n$[esp+40]
	push	eax
	lea	ebx, DWORD PTR [edi+esi]
	sub	ecx, esi
	push	ebx
	push	ecx
	call	_sqlite3_snprintf
; Line 44556
	mov	eax, ebx
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [eax+1]
	npad	3
$LL61@createTabl:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL61@createTabl
; Line 44557
	mov	edx, DWORD PTR _zSep2$[esp+40]
	sub	eax, ecx
	add	esi, eax
; Line 44558
	lea	eax, DWORD PTR _k$[esp+40]
	push	eax
	mov	eax, DWORD PTR [ebp]
	push	edi
	mov	DWORD PTR _k$[esp+48], esi
	mov	DWORD PTR _zSep$[esp+48], edx
	call	_identPut
; Line 44559
	mov	ebx, DWORD PTR [ebp+8]
; Line 44560
	mov	esi, DWORD PTR _k$[esp+48]
	add	esp, 8
	test	ebx, ebx
	je	SHORT $LN3@createTabl
; Line 44562
	mov	edx, DWORD PTR _n$[esp+40]
	mov	BYTE PTR [edi+esi], 32			; 00000020H
	push	ebx
	add	esi, 1
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	ecx, DWORD PTR [edi+esi]
	push	ecx
	sub	edx, esi
	push	edx
	call	_sqlite3_snprintf
; Line 44563
	mov	eax, ebx
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL62@createTabl:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL62@createTabl
	sub	eax, edx
	add	esi, eax
$LN3@createTabl:
	mov	eax, DWORD PTR _i$[esp+40]
	mov	ecx, DWORD PTR _p$[esp+36]
	add	eax, 1
	add	ebp, 20					; 00000014H
	cmp	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _i$[esp+40], eax
	jl	$LL4@createTabl
; Line 44554
	mov	ebx, DWORD PTR _n$[esp+40]
$LN2@createTabl:
; Line 44566
	mov	edx, DWORD PTR _zEnd$[esp+40]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	eax, DWORD PTR [edi+esi]
	push	eax
	sub	ebx, esi
	push	ebx
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
; Line 44567
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44568
	add	esp, 24					; 00000018H
	ret	0
_createTableStmt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqliteViewResetAll
_TEXT	SEGMENT
_db$ = 8						; size = 4
_sqliteViewResetAll PROC				; COMDAT
; _idx$ = eax
; Line 44953
	push	ebx
; Line 44955
	lea	ebx, DWORD PTR [eax+eax*2]
	add	ebx, ebx
	push	ebp
	mov	ebp, DWORD PTR _db$[esp+4]
	mov	eax, DWORD PTR [ebp+4]
	add	ebx, ebx
	add	ebx, ebx
	mov	eax, DWORD PTR [eax+ebx+20]
	test	BYTE PTR [eax+122], 2
	je	SHORT $LN6@sqliteView
	push	esi
; Line 44956
	mov	esi, DWORD PTR [eax+12]
	test	esi, esi
	je	SHORT $LN2@sqliteView
	push	edi
$LL4@sqliteView:
; Line 44957
	mov	edi, DWORD PTR [esi+8]
; Line 44958
	cmp	DWORD PTR [edi+24], 0
	je	SHORT $LN3@sqliteView
; Line 44959
	call	_sqliteResetColumnNames
$LN3@sqliteView:
; Line 44956
	mov	esi, DWORD PTR [esi]
	test	esi, esi
	jne	SHORT $LL4@sqliteView
	pop	edi
$LN2@sqliteView:
; Line 44962
	mov	ecx, DWORD PTR [ebp+4]
	mov	ebx, DWORD PTR [ecx+ebx+20]
	and	WORD PTR [ebx+122], 65533		; 0000fffdH
	pop	esi
$LN6@sqliteView:
	pop	ebp
	pop	ebx
; Line 44963
	ret	0
_sqliteViewResetAll ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _findCollSeqEntry
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zName$ = 12						; size = 4
_create$ = 16						; size = 4
_findCollSeqEntry PROC					; COMDAT
; _nName$ = eax
; Line 46740
	push	ebx
	push	ebp
	mov	ebx, eax
; Line 46742
	test	ebx, ebx
	push	esi
	mov	esi, DWORD PTR _zName$[esp+8]
	jge	SHORT $LN4@findCollSe
	mov	ebx, esi
	lea	ecx, DWORD PTR [ebx+1]
$LL24@findCollSe:
	mov	al, BYTE PTR [ebx]
	add	ebx, 1
	test	al, al
	jne	SHORT $LL24@findCollSe
	sub	ebx, ecx
$LN4@findCollSe:
; Line 46743
	mov	ebp, DWORD PTR _db$[esp+8]
	add	ebp, 248				; 000000f8H
	je	$LN11@findCollSe
	cmp	DWORD PTR [ebp+24], 0
	je	$LN11@findCollSe
	cmp	BYTE PTR [ebp], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN13@findCollSe
	mov	eax, OFFSET _binHash
$LN13@findCollSe:
	push	ebx
	push	esi
	call	eax
	mov	edx, DWORD PTR [ebp+20]
	sub	edx, 1
	push	ebx
	and	edx, eax
	push	esi
	mov	ecx, ebp
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN11@findCollSe
	mov	eax, DWORD PTR [eax+8]
; Line 46745
	test	eax, eax
	jne	SHORT $LN1@findCollSe
$LN23@findCollSe:
	cmp	DWORD PTR _create$[esp+8], 0
	je	SHORT $LN1@findCollSe
	push	edi
; Line 46746
	lea	edi, DWORD PTR [ebx+61]
	call	_sqlite3Malloc
	mov	esi, eax
; Line 46747
	test	esi, esi
	pop	edi
	je	SHORT $LN26@findCollSe
; Line 46755
	mov	ecx, DWORD PTR _zName$[esp+8]
	lea	eax, DWORD PTR [esi+60]
	push	ebx
	push	ecx
	push	eax
	mov	DWORD PTR [esi], eax
	mov	BYTE PTR [esi+4], 1
	mov	DWORD PTR [esi+20], eax
	mov	BYTE PTR [esi+24], 2
	mov	DWORD PTR [esi+40], eax
	mov	BYTE PTR [esi+44], 3
	call	_memcpy
; Line 46756
	mov	edx, DWORD PTR [esi]
; Line 46757
	push	esi
	mov	BYTE PTR [ebx+edx], 0
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	eax
	mov	eax, ebp
	call	_sqlite3HashInsert
	add	esp, 24					; 00000018H
; Line 46764
	test	eax, eax
	je	SHORT $LN26@findCollSe
; Line 46765
	push	eax
	call	_free
	add	esp, 4
	pop	esi
	pop	ebp
; Line 46766
	xor	eax, eax
	pop	ebx
; Line 46771
	ret	0
; Line 46743
$LN11@findCollSe:
	xor	eax, eax
	jmp	SHORT $LN23@findCollSe
$LN26@findCollSe:
; Line 46770
	mov	eax, esi
$LN1@findCollSe:
	pop	esi
	pop	ebp
	pop	ebx
; Line 46771
	ret	0
_findCollSeqEntry ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FindCollSeq
_TEXT	SEGMENT
_enc$ = 8						; size = 1
_nName$ = 12						; size = 4
_sqlite3FindCollSeq PROC				; COMDAT
; _db$ = ecx
; _zName$ = eax
; _create$ = edx
; Line 46794
	test	eax, eax
	je	SHORT $LN3@sqlite3Fin@4
; Line 46795
	push	edx
	push	eax
	mov	eax, DWORD PTR _nName$[esp+4]
	push	ecx
	call	_findCollSeqEntry
	add	esp, 12					; 0000000cH
; Line 46796
	jmp	SHORT $LN2@sqlite3Fin@4
$LN3@sqlite3Fin@4:
; Line 46797
	mov	eax, DWORD PTR [ecx+28]
$LN2@sqlite3Fin@4:
; Line 46801
	test	eax, eax
	je	SHORT $LN1@sqlite3Fin@4
	movzx	ecx, BYTE PTR _enc$[esp-4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax+ecx*4-20]
$LN1@sqlite3Fin@4:
; Line 46803
	ret	0
_sqlite3FindCollSeq ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FindFunction
_TEXT	SEGMENT
_bestmatch$ = -8					; size = 4
tv225 = -4						; size = 4
_zName$ = 8						; size = 4
_pFirst$ = 12						; size = 4
_nArg$ = 12						; size = 4
_enc$ = 16						; size = 1
_createFlag$ = 20					; size = 4
_sqlite3FindFunction PROC				; COMDAT
; _db$ = eax
; _nName$ = ebx
; Line 46832
	sub	esp, 8
	push	ebp
	mov	ebp, DWORD PTR _nArg$[esp+8]
	push	esi
; Line 46835
	xor	esi, esi
; Line 46840
	cmp	ebp, -1
	push	edi
	mov	DWORD PTR _bestmatch$[esp+20], esi
	jge	SHORT $LN18@sqlite3Fin@5
	or	ebp, -1
$LN18@sqlite3Fin@5:
; Line 46842
	add	eax, 220				; 000000dcH
	cmp	eax, esi
	mov	DWORD PTR tv225[esp+20], eax
	je	SHORT $LN21@sqlite3Fin@5
	cmp	DWORD PTR [eax+24], esi
	je	SHORT $LN21@sqlite3Fin@5
	cmp	BYTE PTR [eax], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN27@sqlite3Fin@5
	mov	eax, OFFSET _binHash
$LN27@sqlite3Fin@5:
	mov	edi, DWORD PTR _zName$[esp+16]
	push	ebx
	push	edi
	call	eax
	mov	ecx, DWORD PTR tv225[esp+28]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	push	ebx
	and	edx, eax
	push	edi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN21@sqlite3Fin@5
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _pFirst$[esp+16], eax
	jmp	SHORT $LN23@sqlite3Fin@5
$LN21@sqlite3Fin@5:
	mov	DWORD PTR _pFirst$[esp+16], esi
$LN23@sqlite3Fin@5:
; Line 46843
	mov	edi, DWORD PTR _pFirst$[esp+16]
	test	edi, edi
	je	SHORT $LN15@sqlite3Fin@5
$LL17@sqlite3Fin@5:
; Line 46862
	movzx	eax, WORD PTR [edi]
	cmp	ax, -1
	je	SHORT $LN13@sqlite3Fin@5
	movsx	ecx, ax
	cmp	ecx, ebp
	je	SHORT $LN13@sqlite3Fin@5
	cmp	ebp, -1
	jne	SHORT $LN16@sqlite3Fin@5
$LN13@sqlite3Fin@5:
; Line 46864
	movsx	edx, ax
	cmp	edx, ebp
	mov	ecx, 1
	je	SHORT $LN11@sqlite3Fin@5
	cmp	ebp, -1
	jne	SHORT $LN12@sqlite3Fin@5
$LN11@sqlite3Fin@5:
; Line 46865
	mov	ecx, 4
$LN12@sqlite3Fin@5:
; Line 46867
	mov	al, BYTE PTR [edi+2]
	mov	dl, BYTE PTR _enc$[esp+16]
	cmp	dl, al
	jne	SHORT $LN10@sqlite3Fin@5
; Line 46868
	add	ecx, 2
; Line 46870
	jmp	SHORT $LN8@sqlite3Fin@5
$LN10@sqlite3Fin@5:
; Line 46871
	cmp	dl, 2
	jne	SHORT $LN6@sqlite3Fin@5
	cmp	al, 3
	je	SHORT $LN7@sqlite3Fin@5
	jmp	SHORT $LN8@sqlite3Fin@5
$LN6@sqlite3Fin@5:
	cmp	dl, 3
	jne	SHORT $LN8@sqlite3Fin@5
	cmp	al, 2
	jne	SHORT $LN8@sqlite3Fin@5
$LN7@sqlite3Fin@5:
; Line 46872
	add	ecx, 1
$LN8@sqlite3Fin@5:
; Line 46875
	cmp	ecx, DWORD PTR _bestmatch$[esp+20]
	jle	SHORT $LN16@sqlite3Fin@5
; Line 46876
	mov	esi, edi
; Line 46877
	mov	DWORD PTR _bestmatch$[esp+20], ecx
$LN16@sqlite3Fin@5:
	mov	edi, DWORD PTR [edi+12]
	test	edi, edi
	jne	SHORT $LL17@sqlite3Fin@5
$LN15@sqlite3Fin@5:
; Line 46887
	cmp	DWORD PTR _createFlag$[esp+16], 0
	je	SHORT $LN39@sqlite3Fin@5
	cmp	DWORD PTR _bestmatch$[esp+20], 6
	jge	SHORT $LN39@sqlite3Fin@5
	lea	edi, DWORD PTR [ebx+32]
	call	_sqlite3Malloc
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN2@sqlite3Fin@5
; Line 46891
	mov	edx, DWORD PTR _zName$[esp+16]
	mov	eax, DWORD PTR _pFirst$[esp+16]
	mov	cl, BYTE PTR _enc$[esp+16]
	push	ebx
	push	edx
	lea	edi, DWORD PTR [esi+28]
	push	edi
	mov	WORD PTR [esi], bp
	mov	DWORD PTR [esi+12], eax
	mov	BYTE PTR [esi+2], cl
	call	_memcpy
; Line 46893
	mov	eax, DWORD PTR tv225[esp+32]
	push	esi
	push	ebx
	push	edi
	mov	BYTE PTR [esi+ebx+28], 0
	call	_sqlite3HashInsert
	add	esp, 24					; 00000018H
	cmp	esi, eax
	jne	SHORT $LN39@sqlite3Fin@5
; Line 46894
	push	esi
	call	_free
	add	esp, 4
$LN2@sqlite3Fin@5:
	pop	edi
	pop	esi
; Line 46902
	xor	eax, eax
	pop	ebp
; Line 46903
	add	esp, 8
	ret	0
$LN39@sqlite3Fin@5:
; Line 46899
	test	esi, esi
	je	SHORT $LN2@sqlite3Fin@5
	cmp	DWORD PTR [esi+20], 0
	jne	SHORT $LN1@sqlite3Fin@5
	cmp	DWORD PTR [esi+16], 0
	jne	SHORT $LN1@sqlite3Fin@5
	cmp	DWORD PTR _createFlag$[esp+16], 0
	je	SHORT $LN2@sqlite3Fin@5
$LN1@sqlite3Fin@5:
	pop	edi
; Line 46900
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 46903
	add	esp, 8
	ret	0
_sqlite3FindFunction ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LPJPOBEM@blob?$AA@			; `string'
PUBLIC	??_C@_04DGGKDJMA@real?$AA@			; `string'
PUBLIC	??_C@_04CIMGMMMG@text?$AA@			; `string'
PUBLIC	??_C@_07LKHFMGFB@integer?$AA@			; `string'
PUBLIC	??_C@_04MLLLIHIP@null?$AA@			; `string'
;	COMDAT ??_C@_04LPJPOBEM@blob?$AA@
CONST	SEGMENT
??_C@_04LPJPOBEM@blob?$AA@ DB 'blob', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGGKDJMA@real?$AA@
CONST	SEGMENT
??_C@_04DGGKDJMA@real?$AA@ DB 'real', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CIMGMMMG@text?$AA@
CONST	SEGMENT
??_C@_04CIMGMMMG@text?$AA@ DB 'text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LKHFMGFB@integer?$AA@
CONST	SEGMENT
??_C@_07LKHFMGFB@integer?$AA@ DB 'integer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null?$AA@
CONST	SEGMENT
??_C@_04MLLLIHIP@null?$AA@ DB 'null', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _typeofFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_typeofFunc PROC					; COMDAT
; Line 47760
	mov	eax, DWORD PTR _argv$[esp-4]
	mov	ecx, DWORD PTR [eax]
	movzx	eax, BYTE PTR [ecx+26]
	push	esi
	push	edi
	add	eax, -1
	xor	edi, edi
	cmp	eax, 4
	ja	SHORT $LN6@typeofFunc
	jmp	DWORD PTR $LN31@typeofFunc[eax*4]
$LN5@typeofFunc:
; Line 47761
	mov	edi, OFFSET ??_C@_04MLLLIHIP@null?$AA@
	jmp	SHORT $LN6@typeofFunc
$LN4@typeofFunc:
; Line 47762
	mov	edi, OFFSET ??_C@_07LKHFMGFB@integer?$AA@
	jmp	SHORT $LN6@typeofFunc
$LN3@typeofFunc:
; Line 47763
	mov	edi, OFFSET ??_C@_04CIMGMMMG@text?$AA@
	jmp	SHORT $LN6@typeofFunc
$LN2@typeofFunc:
; Line 47764
	mov	edi, OFFSET ??_C@_04DGGKDJMA@real?$AA@
	jmp	SHORT $LN6@typeofFunc
$LN1@typeofFunc:
; Line 47765
	mov	edi, OFFSET ??_C@_04LPJPOBEM@blob?$AA@
$LN6@typeofFunc:
; Line 47767
	mov	esi, DWORD PTR _context$[esp+4]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN27@typeofFunc
	pop	edi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	pop	esi
; Line 47768
	ret	0
; Line 47767
$LN27@typeofFunc:
	mov	eax, edi
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 130			; 00000082H
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL30@typeofFunc:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL30@typeofFunc
	sub	eax, edx
	pop	edi
	mov	DWORD PTR [esi+20], eax
	mov	WORD PTR [esi+24], 162			; 000000a2H
	pop	esi
; Line 47768
	ret	0
	npad	1
$LN31@typeofFunc:
	DD	$LN4@typeofFunc
	DD	$LN2@typeofFunc
	DD	$LN3@typeofFunc
	DD	$LN1@typeofFunc
	DD	$LN5@typeofFunc
_typeofFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ifnullFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_ifnullFunc PROC					; COMDAT
; Line 47979
	mov	edx, DWORD PTR _argc$[esp-4]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN12@ifnullFunc@2
	mov	ecx, DWORD PTR _argv$[esp-4]
	push	ebx
	mov	bl, 5
	push	esi
$LL4@ifnullFunc@2:
; Line 47980
	mov	esi, DWORD PTR [ecx+eax*4]
	cmp	BYTE PTR [esi+26], bl
	jne	SHORT $LN20@ifnullFunc@2
	add	eax, 1
	cmp	eax, edx
	jl	SHORT $LL4@ifnullFunc@2
$LN23@ifnullFunc@2:
	pop	esi
	pop	ebx
; Line 47981
$LN12@ifnullFunc@2:
; Line 47985
	ret	0
$LN20@ifnullFunc@2:
; Line 47981
	mov	ebx, DWORD PTR _context$[esp+4]
	add	ebx, 8
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN13@ifnullFunc@2
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN13@ifnullFunc@2:
	push	edi
	mov	ecx, 8
	mov	edi, ebx
	rep movsd
	movzx	eax, WORD PTR [ebx+24]
	test	al, 18					; 00000012H
	mov	DWORD PTR [ebx+28], 0
	pop	edi
	je	SHORT $LN16@ifnullFunc@2
	and	eax, 64831				; 0000fd3fH
	or	eax, 256				; 00000100H
	mov	WORD PTR [ebx+24], ax
$LN16@ifnullFunc@2:
	test	WORD PTR [ebx+24], 256			; 00000100H
	je	SHORT $LN23@ifnullFunc@2
	pop	esi
	mov	eax, ebx
	pop	ebx
	jmp	_sqlite3VdbeMemMakeWriteable
_ifnullFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _versionFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_versionFunc PROC					; COMDAT
; Line 48315
	push	esi
; Line 48316
	mov	esi, DWORD PTR _context$[esp]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET _sqlite3_version
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 5
	mov	WORD PTR [esi+24], 162			; 000000a2H
	pop	esi
; Line 48317
	ret	0
_versionFunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@	; `string'
;	COMDAT ??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@
CONST	SEGMENT
??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@ DB 'integer overflow', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sumFinalize
_TEXT	SEGMENT
_context$ = 8						; size = 4
_sumFinalize PROC					; COMDAT
; Line 48889
	mov	ecx, DWORD PTR _context$[esp-4]
	mov	eax, DWORD PTR [ecx+72]
	test	WORD PTR [eax+24], 1024			; 00000400H
	jne	SHORT $LN8@sumFinaliz
	mov	DWORD PTR [eax+16], 0
$LN8@sumFinaliz:
	mov	eax, DWORD PTR [eax+16]
; Line 48890
	test	eax, eax
	je	SHORT $LN1@sumFinaliz
	cmp	DWORD PTR [eax+20], 0
	jl	SHORT $LN1@sumFinaliz
	jg	SHORT $LN33@sumFinaliz
	cmp	DWORD PTR [eax+16], 0
	jbe	SHORT $LN1@sumFinaliz
$LN33@sumFinaliz:
; Line 48891
	cmp	BYTE PTR [eax+24], 0
	je	SHORT $LN4@sumFinaliz
	push	esi
; Line 48892
	lea	esi, DWORD PTR [ecx+8]
	push	esi
	mov	BYTE PTR [ecx+76], 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 16			; 00000010H
	mov	WORD PTR [esi+24], 290			; 00000122H
	mov	eax, esi
	pop	esi
	jmp	_sqlite3VdbeMemMakeWriteable
$LN4@sumFinaliz:
; Line 48893
	cmp	BYTE PTR [eax+25], 0
	je	SHORT $LN2@sumFinaliz
; Line 48894
	fld	QWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ecx
	call	_sqlite3_result_double
; Line 48896
	add	esp, 12					; 0000000cH
; Line 48899
	ret	0
$LN2@sumFinaliz:
; Line 48896
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+8]
	push	edx
	push	eax
	push	ecx
	call	_sqlite3_result_int64
	add	esp, 12					; 0000000cH
$LN1@sumFinaliz:
; Line 48899
	ret	0
_sumFinalize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _avgFinalize
_TEXT	SEGMENT
tv174 = -8						; size = 8
_context$ = 8						; size = 4
_avgFinalize PROC					; COMDAT
; Line 48900
	sub	esp, 8
	push	esi
; Line 48902
	mov	esi, DWORD PTR _context$[esp+8]
	mov	eax, DWORD PTR [esi+72]
	test	WORD PTR [eax+24], 1024			; 00000400H
	jne	SHORT $LN4@avgFinaliz
	mov	DWORD PTR [eax+16], 0
$LN4@avgFinaliz:
	mov	eax, DWORD PTR [eax+16]
; Line 48903
	test	eax, eax
	je	SHORT $LN1@avgFinaliz
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR tv174[esp+12], edx
	mov	DWORD PTR tv174[esp+16], ecx
	jl	SHORT $LN1@avgFinaliz
	jg	SHORT $LN11@avgFinaliz
	test	edx, edx
	jbe	SHORT $LN1@avgFinaliz
$LN11@avgFinaliz:
; Line 48904
	fild	QWORD PTR tv174[esp+12]
	sub	esp, 8
	fdivr	QWORD PTR [eax]
	fstp	QWORD PTR [esp]
	push	esi
	call	_sqlite3_result_double
	add	esp, 12					; 0000000cH
$LN1@avgFinaliz:
	pop	esi
; Line 48906
	add	esp, 8
	ret	0
_avgFinalize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _totalFinalize
_TEXT	SEGMENT
$T113555 = -8						; size = 8
_context$ = 8						; size = 4
_totalFinalize PROC					; COMDAT
; Line 48909
	mov	ecx, DWORD PTR _context$[esp-4]
	mov	eax, DWORD PTR [ecx+72]
	sub	esp, 8
	test	WORD PTR [eax+24], 1024			; 00000400H
	jne	SHORT $LN5@totalFinal
	mov	DWORD PTR [eax+16], 0
$LN5@totalFinal:
	mov	eax, DWORD PTR [eax+16]
; Line 48910
	test	eax, eax
	je	SHORT $LN3@totalFinal
	fld	QWORD PTR [eax]
	jmp	SHORT $LN21@totalFinal
$LN3@totalFinal:
	fldz
$LN21@totalFinal:
	fst	QWORD PTR $T113555[esp+8]
	push	esi
	fld	ST(0)
	lea	esi, DWORD PTR [ecx+8]
	fucompp
	push	esi
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN15@totalFinal
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	mov	DWORD PTR [esi+20], 0
	pop	esi
; Line 48911
	add	esp, 8
	ret	0
; Line 48910
$LN15@totalFinal:
	call	_sqlite3VdbeMemRelease
	fld	QWORD PTR $T113555[esp+16]
	add	esp, 4
	fstp	QWORD PTR [esi+8]
	mov	WORD PTR [esi+24], 8
	mov	BYTE PTR [esi+26], 2
	pop	esi
; Line 48911
	add	esp, 8
	ret	0
_totalFinalize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _countStep
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_countStep PROC						; COMDAT
; Line 48927
	mov	ecx, DWORD PTR _context$[esp-4]
	mov	eax, DWORD PTR [ecx+72]
	mov	edx, 1024				; 00000400H
	test	WORD PTR [eax+24], dx
	jne	SHORT $LN5@countStep
	mov	WORD PTR [eax+24], dx
	mov	DWORD PTR [eax+28], OFFSET _sqlite3FreeX
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx
	lea	ecx, DWORD PTR [eax+32]
	xor	edx, edx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edx
$LN5@countStep:
; Line 48928
	cmp	DWORD PTR _argc$[esp-4], 0
	mov	eax, DWORD PTR [eax+16]
	je	SHORT $LN1@countStep
	mov	edx, DWORD PTR _argv$[esp-4]
	mov	ecx, DWORD PTR [edx]
	cmp	BYTE PTR [ecx+26], 5
	je	SHORT $LN2@countStep
$LN1@countStep:
	test	eax, eax
	je	SHORT $LN2@countStep
; Line 48929
	add	DWORD PTR [eax], 1
	adc	DWORD PTR [eax+4], 0
$LN2@countStep:
; Line 48931
	ret	0
_countStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _countFinalize
_TEXT	SEGMENT
_context$ = 8						; size = 4
_countFinalize PROC					; COMDAT
; Line 48934
	mov	ecx, DWORD PTR _context$[esp-4]
	mov	eax, DWORD PTR [ecx+72]
	push	ebx
	push	esi
	xor	ebx, ebx
	test	WORD PTR [eax+24], 1024			; 00000400H
	push	edi
	jne	SHORT $LN5@countFinal
	mov	DWORD PTR [eax+16], ebx
$LN5@countFinal:
	mov	eax, DWORD PTR [eax+16]
; Line 48935
	cmp	eax, ebx
	je	SHORT $LN3@countFinal
	mov	edi, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax+4]
	jmp	SHORT $LN4@countFinal
$LN3@countFinal:
	xor	edi, edi
$LN4@countFinal:
	lea	esi, DWORD PTR [ecx+8]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi], edi
	pop	edi
	mov	DWORD PTR [esi+4], ebx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
	pop	esi
	pop	ebx
; Line 48936
	ret	0
_countFinalize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _minMaxFinalize
_TEXT	SEGMENT
_context$ = 8						; size = 4
_minMaxFinalize PROC					; COMDAT
; Line 48972
	mov	ecx, DWORD PTR _context$[esp-4]
	mov	eax, DWORD PTR [ecx+72]
	test	WORD PTR [eax+24], 1024			; 00000400H
	jne	SHORT $LN5@minMaxFina
	mov	DWORD PTR [eax+16], 0
$LN5@minMaxFina:
	push	esi
	mov	esi, DWORD PTR [eax+16]
; Line 48973
	test	esi, esi
	je	SHORT $LN2@minMaxFina
; Line 48974
	cmp	WORD PTR [esi+24], 0
	je	SHORT $LN12@minMaxFina
	push	ebx
; Line 48975
	push	esi
	lea	ebx, DWORD PTR [ecx+8]
	call	_sqlite3VdbeMemCopy
	add	esp, 4
	pop	ebx
$LN12@minMaxFina:
; Line 48977
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN2@minMaxFina:
	pop	esi
; Line 48979
	ret	0
_minMaxFinalize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _setLikeOptFlag
_TEXT	SEGMENT
_db$ = 8						; size = 4
_flagVal$ = 12						; size = 4
_setLikeOptFlag PROC					; COMDAT
; _zName$ = edx
; Line 49113
	push	ebx
; Line 49115
	mov	eax, edx
	push	esi
	lea	esi, DWORD PTR [eax+1]
$LL4@setLikeOpt:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL4@setLikeOpt
	push	0
	sub	eax, esi
	push	1
	push	2
	mov	ebx, eax
	mov	eax, DWORD PTR _db$[esp+16]
	push	edx
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
; Line 49116
	test	eax, eax
	pop	esi
	pop	ebx
	je	SHORT $LN1@setLikeOpt
; Line 49117
	mov	cl, BYTE PTR _flagVal$[esp-4]
	mov	BYTE PTR [eax+4], cl
$LN1@setLikeOpt:
; Line 49119
	ret	0
_setLikeOptFlag ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3IsLikeFunction
_TEXT	SEGMENT
_db$ = 8						; size = 4
_pIsNocase$ = 12					; size = 4
_sqlite3IsLikeFunction PROC				; COMDAT
; _pExpr$ = eax
; _aWc$ = esi
; Line 49151
	cmp	BYTE PTR [eax], 148			; 00000094H
	jne	SHORT $LN4@sqlite3IsL
	mov	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN4@sqlite3IsL
; Line 49154
	cmp	DWORD PTR [ecx], 2
; Line 49155
	jne	SHORT $LN4@sqlite3IsL
	push	ebx
; Line 49158
	mov	ebx, DWORD PTR [eax+24]
	mov	eax, DWORD PTR [eax+20]
	push	0
	push	1
	push	2
	push	eax
	mov	eax, DWORD PTR _db$[esp+16]
	shr	ebx, 1
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
; Line 49159
	test	eax, eax
	pop	ebx
	je	SHORT $LN4@sqlite3IsL
	test	BYTE PTR [eax+4], 1
	je	SHORT $LN4@sqlite3IsL
; Line 49167
	mov	ecx, DWORD PTR [eax+8]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [esi], dx
	mov	cl, BYTE PTR [ecx+2]
	mov	BYTE PTR [esi+2], cl
; Line 49171
	movzx	edx, BYTE PTR [eax+4]
	mov	eax, DWORD PTR _pIsNocase$[esp-4]
	shr	edx, 1
	not	edx
	and	edx, 1
	mov	DWORD PTR [eax], edx
; Line 49172
	mov	eax, 1
; Line 49173
	ret	0
$LN4@sqlite3IsL:
; Line 49152
	xor	eax, eax
; Line 49173
	ret	0
_sqlite3IsLikeFunction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3IndexAffinityStr
_TEXT	SEGMENT
_sqlite3IndexAffinityStr PROC				; COMDAT
; _v$ = ecx
; _pIdx$ = eax
; Line 49207
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	esi, eax
; Line 49208
	xor	edi, edi
	cmp	DWORD PTR [esi+28], edi
	mov	ebx, ecx
	jne	SHORT $LN5@sqlite3Ind@2
; Line 49219
	mov	edi, DWORD PTR [esi+4]
	mov	ebp, DWORD PTR [esi+16]
	add	edi, 1
	call	_sqlite3Malloc
; Line 49220
	test	eax, eax
	mov	DWORD PTR [esi+28], eax
	je	SHORT $LN23@sqlite3Ind@2
; Line 49223
	xor	eax, eax
	cmp	DWORD PTR [esi+4], eax
	jle	SHORT $LN1@sqlite3Ind@2
	npad	5
$LL3@sqlite3Ind@2:
; Line 49224
	mov	ecx, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edi, DWORD PTR [esi+28]
	lea	edx, DWORD PTR [ecx+ecx*4]
	mov	ecx, DWORD PTR [ebp+8]
	mov	dl, BYTE PTR [ecx+edx*4+18]
	mov	BYTE PTR [eax+edi], dl
	add	eax, 1
	cmp	eax, DWORD PTR [esi+4]
	jl	SHORT $LL3@sqlite3Ind@2
$LN1@sqlite3Ind@2:
; Line 49226
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+28]
	mov	BYTE PTR [eax+ecx], 0
	xor	edi, edi
$LN5@sqlite3Ind@2:
; Line 49229
	cmp	ebx, edi
	mov	esi, DWORD PTR [esi+28]
	je	SHORT $LN32@sqlite3Ind@2
	mov	ecx, DWORD PTR [ebx+20]
	cmp	ecx, edi
	je	SHORT $LN32@sqlite3Ind@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN21@sqlite3Ind@2
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN32@sqlite3Ind@2
$LN21@sqlite3Ind@2:
	mov	eax, DWORD PTR [ebx+12]
	sub	eax, 1
	js	SHORT $LN23@sqlite3Ind@2
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	ebp, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ebp+12]
	call	_freeP3
	cmp	esi, edi
	mov	DWORD PTR [ebp+12], edi
	jne	SHORT $LN33@sqlite3Ind@2
	mov	DWORD PTR [ebp+12], edi
	mov	DWORD PTR [ebp+16], edi
$LN23@sqlite3Ind@2:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 49230
	ret	0
$LN33@sqlite3Ind@2:
; Line 49229
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL34@sqlite3Ind@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL34@sqlite3Ind@2
	sub	eax, edx
	mov	edi, eax
	mov	ebx, esi
	call	_sqlite3StrNDup
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], -1
	pop	ebp
	pop	ebx
; Line 49230
	ret	0
$LN32@sqlite3Ind@2:
	pop	edi
; Line 49229
	mov	ecx, esi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	jmp	_freeP3
_sqlite3IndexAffinityStr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3TableAffinityStr
_TEXT	SEGMENT
_v$ = 8							; size = 4
_sqlite3TableAffinityStr PROC				; COMDAT
; _pTab$ = eax
; Line 49246
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _v$[esp+4]
	push	esi
	mov	esi, eax
; Line 49254
	xor	ebx, ebx
	cmp	DWORD PTR [esi+40], ebx
	push	edi
	jne	SHORT $LN5@sqlite3Tab
; Line 49258
	mov	edi, DWORD PTR [esi+4]
	add	edi, 1
	call	_sqlite3Malloc
	mov	edi, eax
; Line 49259
	cmp	edi, ebx
	je	SHORT $LN23@sqlite3Tab
; Line 49263
	xor	ecx, ecx
	cmp	DWORD PTR [esi+4], ebx
	jle	SHORT $LN1@sqlite3Tab
	xor	edx, edx
	npad	5
$LL3@sqlite3Tab:
; Line 49264
	mov	eax, DWORD PTR [esi+8]
	mov	al, BYTE PTR [eax+edx+18]
	mov	BYTE PTR [ecx+edi], al
	add	ecx, 1
	add	edx, 20					; 00000014H
	cmp	ecx, DWORD PTR [esi+4]
	jl	SHORT $LL3@sqlite3Tab
$LN1@sqlite3Tab:
; Line 49266
	mov	ecx, DWORD PTR [esi+4]
	mov	BYTE PTR [edi+ecx], bl
; Line 49268
	mov	DWORD PTR [esi+40], edi
$LN5@sqlite3Tab:
; Line 49271
	cmp	ebp, ebx
	mov	esi, DWORD PTR [esi+40]
	je	SHORT $LN32@sqlite3Tab
	mov	ecx, DWORD PTR [ebp+20]
	cmp	ecx, ebx
	je	SHORT $LN32@sqlite3Tab
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN21@sqlite3Tab
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN32@sqlite3Tab
$LN21@sqlite3Tab:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN23@sqlite3Tab
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	ebp, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ebp+12]
	call	_freeP3
	cmp	esi, ebx
	mov	DWORD PTR [ebp+12], ebx
	jne	SHORT $LN33@sqlite3Tab
	mov	DWORD PTR [ebp+12], ebx
	mov	DWORD PTR [ebp+16], ebx
$LN23@sqlite3Tab:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 49272
	ret	0
$LN33@sqlite3Tab:
; Line 49271
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL34@sqlite3Tab:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	cmp	cl, bl
	jne	SHORT $LL34@sqlite3Tab
	sub	eax, edx
	mov	edi, eax
	mov	ebx, esi
	call	_sqlite3StrNDup
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], -1
	pop	ebp
	pop	ebx
; Line 49272
	ret	0
$LN32@sqlite3Tab:
	pop	edi
; Line 49271
	mov	ecx, esi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	jmp	_freeP3
_sqlite3TableAffinityStr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@BPLHPOIJ@error?5during?5initialization?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CL@IHPFGADB@no?5entry?5point?5?$FL?$CFs?$FN?5in?5shared?5li@ ; `string'
PUBLIC	??_C@_0CD@FENJJFPL@unable?5to?5open?5shared?5library?5?$FL?$CF@ ; `string'
PUBLIC	??_C@_0BH@NNAEMFED@sqlite3_extension_init?$AA@	; `string'
PUBLIC	??_C@_0P@PEBGBLCC@not?5authorized?$AA@		; `string'
PUBLIC	_sqlite3_load_extension
;	COMDAT ??_C@_0CA@BPLHPOIJ@error?5during?5initialization?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0CA@BPLHPOIJ@error?5during?5initialization?3?5?$CFs?$AA@ DB 'error '
	DB	'during initialization: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IHPFGADB@no?5entry?5point?5?$FL?$CFs?$FN?5in?5shared?5li@
CONST	SEGMENT
??_C@_0CL@IHPFGADB@no?5entry?5point?5?$FL?$CFs?$FN?5in?5shared?5li@ DB 'n'
	DB	'o entry point [%s] in shared library [%s]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FENJJFPL@unable?5to?5open?5shared?5library?5?$FL?$CF@
CONST	SEGMENT
??_C@_0CD@FENJJFPL@unable?5to?5open?5shared?5library?5?$FL?$CF@ DB 'unabl'
	DB	'e to open shared library [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NNAEMFED@sqlite3_extension_init?$AA@
CONST	SEGMENT
??_C@_0BH@NNAEMFED@sqlite3_extension_init?$AA@ DB 'sqlite3_extension_init'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PEBGBLCC@not?5authorized?$AA@
CONST	SEGMENT
??_C@_0P@PEBGBLCC@not?5authorized?$AA@ DB 'not authorized', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3_load_extension
_TEXT	SEGMENT
_zErrmsg$ = -4						; size = 4
_db$ = 8						; size = 4
_zFile$ = 12						; size = 4
_zProc$ = 16						; size = 4
_pzErrMsg$ = 20						; size = 4
_sqlite3_load_extension PROC				; COMDAT
; Line 51446
	push	ecx
	push	esi
; Line 51458
	mov	esi, DWORD PTR _db$[esp+4]
	test	DWORD PTR [esi+8], 131072		; 00020000H
	mov	DWORD PTR _zErrmsg$[esp+8], 0
	jne	SHORT $LN12@sqlite3_lo
; Line 51459
	mov	esi, DWORD PTR _pzErrMsg$[esp+4]
	test	esi, esi
	je	SHORT $LN11@sqlite3_lo
; Line 51460
	push	OFFSET ??_C@_0P@PEBGBLCC@not?5authorized?$AA@
	call	_sqlite3_mprintf
	add	esp, 4
	mov	DWORD PTR [esi], eax
$LN11@sqlite3_lo:
; Line 51462
	mov	eax, 1
	pop	esi
; Line 51508
	pop	ecx
	ret	0
$LN12@sqlite3_lo:
	push	edi
; Line 51465
	mov	edi, DWORD PTR _zProc$[esp+8]
	test	edi, edi
	jne	SHORT $LN10@sqlite3_lo
; Line 51466
	mov	edi, OFFSET ??_C@_0BH@NNAEMFED@sqlite3_extension_init?$AA@
$LN10@sqlite3_lo:
	push	ebx
; Line 51469
	mov	ebx, DWORD PTR _zFile$[esp+12]
	push	ebp
	mov	eax, ebx
	call	_sqlite3WinDlopen
	mov	ebp, eax
; Line 51470
	test	ebp, ebp
	jne	SHORT $LN9@sqlite3_lo
; Line 51471
	mov	esi, DWORD PTR _pzErrMsg$[esp+16]
	test	esi, esi
	je	SHORT $LN8@sqlite3_lo
; Line 51472
	push	ebx
	push	OFFSET ??_C@_0CD@FENJJFPL@unable?5to?5open?5shared?5library?5?$FL?$CF@
	call	_sqlite3_mprintf
	add	esp, 8
	mov	DWORD PTR [esi], eax
$LN8@sqlite3_lo:
	pop	ebp
	pop	ebx
	pop	edi
; Line 51474
	mov	eax, 1
	pop	esi
; Line 51508
	pop	ecx
	ret	0
$LN9@sqlite3_lo:
; Line 51477
	push	edi
	push	ebp
	call	DWORD PTR __imp__GetProcAddress@8
; Line 51478
	test	eax, eax
	jne	SHORT $LN7@sqlite3_lo
; Line 51479
	mov	esi, DWORD PTR _pzErrMsg$[esp+16]
	test	esi, esi
	je	SHORT $LN6@sqlite3_lo
; Line 51481
	push	ebx
	push	edi
	push	OFFSET ??_C@_0CL@IHPFGADB@no?5entry?5point?5?$FL?$CFs?$FN?5in?5shared?5li@
	call	_sqlite3_mprintf
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi], eax
$LN6@sqlite3_lo:
; Line 51483
	push	ebp
	call	DWORD PTR __imp__FreeLibrary@4
	pop	ebp
	pop	ebx
	pop	edi
; Line 51484
	mov	eax, 1
	pop	esi
; Line 51508
	pop	ecx
	ret	0
$LN7@sqlite3_lo:
; Line 51485
	push	OFFSET _sqlite3_apis
	lea	ecx, DWORD PTR _zErrmsg$[esp+24]
	push	ecx
	push	esi
	call	eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@sqlite3_lo
; Line 51486
	mov	esi, DWORD PTR _pzErrMsg$[esp+16]
	test	esi, esi
	je	SHORT $LN3@sqlite3_lo
; Line 51487
	mov	edx, DWORD PTR _zErrmsg$[esp+20]
	push	edx
	push	OFFSET ??_C@_0CA@BPLHPOIJ@error?5during?5initialization?3?5?$CFs?$AA@
	call	_sqlite3_mprintf
	add	esp, 8
	mov	DWORD PTR [esi], eax
$LN3@sqlite3_lo:
; Line 51489
	mov	eax, DWORD PTR _zErrmsg$[esp+20]
	test	eax, eax
	je	SHORT $LN22@sqlite3_lo
	push	eax
	call	_free
	add	esp, 4
$LN22@sqlite3_lo:
; Line 51490
	push	ebp
	call	DWORD PTR __imp__FreeLibrary@4
	pop	ebp
	pop	ebx
	pop	edi
; Line 51491
	mov	eax, 1
	pop	esi
; Line 51508
	pop	ecx
	ret	0
$LN4@sqlite3_lo:
; Line 51495
	add	DWORD PTR [esi+72], 1
	mov	eax, DWORD PTR [esi+72]
; Line 51496
	lea	edi, DWORD PTR [eax*4]
	call	_sqlite3Malloc
	mov	edi, eax
; Line 51497
	test	edi, edi
	jne	SHORT $LN2@sqlite3_lo
	pop	ebp
	pop	ebx
; Line 51498
	lea	eax, DWORD PTR [edi+7]
	pop	edi
	pop	esi
; Line 51508
	pop	ecx
	ret	0
$LN2@sqlite3_lo:
; Line 51500
	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	jle	SHORT $LN1@sqlite3_lo
; Line 51501
	mov	ecx, DWORD PTR [esi+76]
	lea	eax, DWORD PTR [eax*4-4]
	push	eax
	push	ecx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@sqlite3_lo:
; Line 51503
	mov	edx, DWORD PTR [esi+76]
	push	edx
	call	_sqlite3FreeX
; Line 51506
	mov	eax, DWORD PTR [esi+72]
	add	esp, 4
	mov	DWORD PTR [esi+76], edi
	mov	DWORD PTR [edi+eax*4-4], ebp
	pop	ebp
	pop	ebx
	pop	edi
; Line 51507
	xor	eax, eax
	pop	esi
; Line 51508
	pop	ecx
	ret	0
_sqlite3_load_extension ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@KDGONMLG@malformed?5database?5schema?$AA@ ; `string'
PUBLIC	??_C@_03NLJIHOMM@?5?9?5?$AA@			; `string'
;	COMDAT ??_C@_0BK@KDGONMLG@malformed?5database?5schema?$AA@
CONST	SEGMENT
??_C@_0BK@KDGONMLG@malformed?5database?5schema?$AA@ DB 'malformed databas'
	DB	'e schema', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03NLJIHOMM@?5?9?5?$AA@
CONST	SEGMENT
??_C@_03NLJIHOMM@?5?9?5?$AA@ DB ' - ', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _corruptSchema
_TEXT	SEGMENT
_corruptSchema PROC					; COMDAT
; _pData$ = esi
; _zExtra$ = ecx
; Line 52777
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN1@corruptSch
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN9@corruptSch
$LN1@corruptSch:
; Line 52779
	test	ecx, ecx
	je	SHORT $LN5@corruptSch
	cmp	BYTE PTR [ecx], 0
	je	SHORT $LN5@corruptSch
	mov	eax, OFFSET ??_C@_03NLJIHOMM@?5?9?5?$AA@
	jmp	SHORT $LN6@corruptSch
$LN5@corruptSch:
	xor	eax, eax
$LN6@corruptSch:
	push	0
	push	ecx
	push	eax
	mov	eax, DWORD PTR [esi+8]
	push	OFFSET ??_C@_0BK@KDGONMLG@malformed?5database?5schema?$AA@
	push	eax
	call	_sqlite3SetString
	add	esp, 20					; 00000014H
$LN9@corruptSch:
; Line 52781
	mov	DWORD PTR [esi+12], 11			; 0000000bH
; Line 52782
	ret	0
_corruptSchema ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3InitCallback
_TEXT	SEGMENT
_zErr$98022 = 8						; size = 4
_pInit$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_azColName$ = 20					; size = 4
_sqlite3InitCallback PROC				; COMDAT
; Line 52796
	push	ebx
	push	esi
; Line 52798
	mov	esi, DWORD PTR _pInit$[esp+4]
; Line 52799
	mov	edx, DWORD PTR [esi+4]
; Line 52802
	lea	eax, DWORD PTR [edx+edx*2]
	add	eax, eax
	xor	ebx, ebx
	mov	DWORD PTR [esi+12], ebx
	push	edi
	mov	edi, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edi+4]
	add	eax, eax
	add	eax, eax
	mov	ecx, DWORD PTR [eax+ecx+20]
	and	WORD PTR [ecx+122], 65531		; 0000fffbH
; Line 52803
	mov	ecx, DWORD PTR _sqlite3_mallocHasFailed
	cmp	ecx, ebx
	je	SHORT $LN12@sqlite3Ini
	cmp	DWORD PTR _inMutex, ebx
	jle	SHORT $LN12@sqlite3Ini
	pop	edi
; Line 52804
	mov	DWORD PTR [esi+12], 11			; 0000000bH
	pop	esi
; Line 52805
	lea	eax, DWORD PTR [ebx+7]
	pop	ebx
; Line 52860
	ret	0
$LN12@sqlite3Ini:
	push	ebp
; Line 52809
	mov	ebp, DWORD PTR _argv$[esp+12]
	cmp	ebp, ebx
	je	$LN2@sqlite3Ini
; Line 52810
	cmp	DWORD PTR [ebp+4], ebx
	jne	SHORT $LN10@sqlite3Ini
; Line 52811
	cmp	ecx, ebx
	je	SHORT $LN25@sqlite3Ini
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN26@sqlite3Ini
$LN25@sqlite3Ini:
	mov	edx, DWORD PTR [esi+8]
	push	ebx
	push	ebx
	push	ebx
	push	OFFSET ??_C@_0BK@KDGONMLG@malformed?5database?5schema?$AA@
	push	edx
	call	_sqlite3SetString
	add	esp, 20					; 00000014H
$LN26@sqlite3Ini:
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+12], 11			; 0000000bH
	pop	esi
; Line 52812
	mov	eax, 1
	pop	ebx
; Line 52860
	ret	0
$LN10@sqlite3Ini:
; Line 52815
	mov	ecx, DWORD PTR [ebp+8]
	cmp	ecx, ebx
	je	SHORT $LN9@sqlite3Ini
	cmp	BYTE PTR [ecx], bl
	je	SHORT $LN9@sqlite3Ini
; Line 52824
	mov	DWORD PTR [edi+60], edx
; Line 52825
	mov	eax, DWORD PTR [ebp+4]
	push	eax
	call	_atoi
; Line 52826
	lea	ecx, DWORD PTR _zErr$98022[esp+16]
	push	ecx
	push	ebx
	mov	DWORD PTR [edi+64], eax
	mov	edx, DWORD PTR [ebp+8]
	push	ebx
	push	edx
	push	edi
	call	_sqlite3_exec
	add	esp, 24					; 00000018H
; Line 52829
	cmp	eax, ebx
	mov	DWORD PTR [edi+60], ebx
	je	SHORT $LN2@sqlite3Ini
; Line 52831
	cmp	eax, 7
	mov	DWORD PTR [esi+12], eax
	jne	SHORT $LN7@sqlite3Ini
; Line 52832
	call	_sqlite3FailedMalloc
	jmp	SHORT $LN5@sqlite3Ini
$LN7@sqlite3Ini:
; Line 52833
	cmp	eax, 9
	je	SHORT $LN5@sqlite3Ini
; Line 52834
	mov	ecx, DWORD PTR _zErr$98022[esp+12]
	call	_corruptSchema
$LN5@sqlite3Ini:
; Line 52836
	mov	eax, DWORD PTR _zErr$98022[esp+12]
	push	eax
	call	_sqlite3_free
	add	esp, 4
	pop	ebp
	pop	edi
	pop	esi
; Line 52837
	mov	eax, 1
	pop	ebx
; Line 52860
	ret	0
$LN9@sqlite3Ini:
; Line 52847
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [eax+ecx]
	mov	ebx, DWORD PTR [ebp]
	push	edx
	push	edi
	call	_sqlite3FindIndex
	mov	esi, eax
	add	esp, 8
; Line 52848
	test	esi, esi
	je	SHORT $LN2@sqlite3Ini
	cmp	DWORD PTR [esi+20], 0
	jne	SHORT $LN2@sqlite3Ini
; Line 52856
	mov	eax, DWORD PTR [ebp+4]
	push	eax
	call	_atoi
	add	esp, 4
	mov	DWORD PTR [esi+20], eax
$LN2@sqlite3Ini:
	pop	ebp
	pop	edi
	pop	esi
; Line 52859
	xor	eax, eax
	pop	ebx
; Line 52860
	ret	0
_sqlite3InitCallback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _generateColumnTypes
_TEXT	SEGMENT
_i$ = -56						; size = 4
tv1115 = -52						; size = 4
_zOrigDb$98722 = -48					; size = 4
_zOrigTab$98723 = -44					; size = 4
_zOrigCol$98724 = -40					; size = 4
_sNC$ = -36						; size = 36
_pEList$ = 8						; size = 4
_generateColumnTypes PROC				; COMDAT
; _pParse$ = eax
; _pTabList$ = ecx
; Line 54383
	sub	esp, 56					; 00000038H
	push	ebp
; Line 54384
	mov	ebp, DWORD PTR [eax+12]
	push	esi
; Line 54388
	mov	DWORD PTR _sNC$[esp+64], eax
; Line 54389
	mov	eax, DWORD PTR _pEList$[esp+60]
	xor	esi, esi
	cmp	DWORD PTR [eax], esi
	mov	DWORD PTR _sNC$[esp+68], ecx
	mov	DWORD PTR _i$[esp+64], esi
	jle	$LN1@generateCo
	push	ebx
	push	edi
	mov	DWORD PTR tv1115[esp+72], esi
	lea	ebx, DWORD PTR [esi+1]
	jmp	SHORT $LN3@generateCo
	npad	3
$LL178@generateCo:
; Line 54384
	xor	esi, esi
$LN3@generateCo:
; Line 54390
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR tv1115[esp+72]
	mov	eax, DWORD PTR [eax+edx]
; Line 54394
	lea	ecx, DWORD PTR _zOrigCol$98724[esp+72]
	push	ecx
	lea	edx, DWORD PTR _zOrigTab$98723[esp+76]
	push	edx
	lea	ecx, DWORD PTR _zOrigDb$98722[esp+80]
	push	ecx
	push	eax
	lea	edx, DWORD PTR _sNC$[esp+88]
	push	edx
	mov	DWORD PTR _zOrigDb$98722[esp+92], esi
	mov	DWORD PTR _zOrigTab$98723[esp+92], esi
	mov	DWORD PTR _zOrigCol$98724[esp+92], esi
	call	_columnType
	add	esp, 20					; 00000014H
; Line 54400
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	mov	edi, eax
	je	SHORT $LN10@generateCo
	cmp	DWORD PTR _inMutex, esi
	jg	SHORT $LN176@generateCo
$LN10@generateCo:
	mov	esi, DWORD PTR [ebp+544]
	add	esi, DWORD PTR _i$[esp+72]
	shl	esi, 6
	add	esi, DWORD PTR [ebp+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN44@generateCo
	mov	WORD PTR [esi+24], bx
	mov	BYTE PTR [esi+26], 5
$LN176@generateCo:
	mov	edi, 290				; 00000122H
$LN31@generateCo:
; Line 54401
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN51@generateCo
	cmp	DWORD PTR _inMutex, 0
	jg	$LN177@generateCo
$LN51@generateCo:
	mov	eax, DWORD PTR [ebp+544]
	mov	ecx, DWORD PTR _i$[esp+72]
	lea	esi, DWORD PTR [ecx+eax*2]
	shl	esi, 6
	add	esi, DWORD PTR [ebp+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	eax, DWORD PTR _zOrigDb$98722[esp+76]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN85@generateCo
	mov	WORD PTR [esi+24], bx
	mov	BYTE PTR [esi+26], 5
	jmp	SHORT $LN177@generateCo
; Line 54400
$LN44@generateCo:
	mov	eax, edi
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], bl
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -9			; fffffff7H
	mov	WORD PTR [esi+24], 258			; 00000102H
	lea	edx, DWORD PTR [eax+1]
$LL172@generateCo:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL172@generateCo
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	edi, 290				; 00000122H
	mov	eax, esi
	mov	WORD PTR [esi+24], di
	call	_sqlite3VdbeMemMakeWriteable
	jmp	SHORT $LN31@generateCo
; Line 54401
$LN85@generateCo:
	mov	DWORD PTR [esi+16], eax
	mov	BYTE PTR [esi+27], bl
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -9			; fffffff7H
	mov	WORD PTR [esi+24], 258			; 00000102H
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL173@generateCo:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL173@generateCo
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], di
	call	_sqlite3VdbeMemMakeWriteable
$LN177@generateCo:
; Line 54402
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN92@generateCo
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN113@generateCo
$LN92@generateCo:
	mov	eax, DWORD PTR [ebp+544]
	mov	edx, DWORD PTR _i$[esp+72]
	lea	esi, DWORD PTR [edx+eax*2]
	add	esi, eax
	shl	esi, 6
	add	esi, DWORD PTR [ebp+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	eax, DWORD PTR _zOrigTab$98723[esp+76]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN126@generateCo
	mov	WORD PTR [esi+24], bx
	mov	BYTE PTR [esi+26], 5
	jmp	SHORT $LN113@generateCo
$LN126@generateCo:
	mov	DWORD PTR [esi+16], eax
	mov	BYTE PTR [esi+27], bl
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -9			; fffffff7H
	mov	WORD PTR [esi+24], 258			; 00000102H
	lea	edx, DWORD PTR [eax+1]
$LL174@generateCo:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL174@generateCo
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], di
	call	_sqlite3VdbeMemMakeWriteable
$LN113@generateCo:
; Line 54403
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN133@generateCo
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN2@generateCo
$LN133@generateCo:
	mov	eax, DWORD PTR [ebp+544]
	mov	ecx, DWORD PTR _i$[esp+72]
	lea	esi, DWORD PTR [ecx+eax*4]
	shl	esi, 6
	add	esi, DWORD PTR [ebp+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	eax, DWORD PTR _zOrigCol$98724[esp+76]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN167@generateCo
	mov	WORD PTR [esi+24], bx
	mov	BYTE PTR [esi+26], 5
	jmp	SHORT $LN2@generateCo
$LN167@generateCo:
	mov	DWORD PTR [esi+16], eax
	mov	BYTE PTR [esi+27], bl
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -9			; fffffff7H
	mov	WORD PTR [esi+24], 258			; 00000102H
	lea	edx, DWORD PTR [eax+1]
$LL175@generateCo:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL175@generateCo
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], di
	call	_sqlite3VdbeMemMakeWriteable
$LN2@generateCo:
	mov	ecx, DWORD PTR _i$[esp+72]
	mov	eax, DWORD PTR _pEList$[esp+68]
	add	DWORD PTR tv1115[esp+72], 12		; 0000000cH
	add	ecx, ebx
	cmp	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[esp+72], ecx
	jl	$LL178@generateCo
	pop	edi
	pop	ebx
$LN1@generateCo:
	pop	esi
	pop	ebp
; Line 54405
	add	esp, 56					; 00000038H
	ret	0
_generateColumnTypes ENDP
_TEXT	ENDS
PUBLIC	??_C@_08OHGGEHKA@column?$CFd?$AA@		; `string'
PUBLIC	_pEList$GSCopy$
PUBLIC	_pParse$GSCopy$
PUBLIC	_pTabList$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_08OHGGEHKA@column?$CFd?$AA@
CONST	SEGMENT
??_C@_08OHGGEHKA@column?$CFd?$AA@ DB 'column%d', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _generateColumnNames
_TEXT	SEGMENT
_i$ = -76						; size = 4
tv932 = -72						; size = 4
_pTabList$GSCopy$ = -68					; size = 4
_v$ = -64						; size = 4
_fullNames$ = -60					; size = 4
_zName$98768 = -56					; size = 4
tv936 = -52						; size = 4
_pEList$GSCopy$ = -48					; size = 4
_pParse$GSCopy$ = -44					; size = 4
_shortNames$ = -40					; size = 4
_zName$98778 = -36					; size = 30
__$ArrayPad$ = -4					; size = 4
_pParse$ = 8						; size = 4
_pTabList$ = 12						; size = 4
_generateColumnNames PROC				; COMDAT
; _pEList$ = ecx
; Line 54416
	sub	esp, 76					; 0000004cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+76], eax
; Line 54481
	mov	eax, DWORD PTR _pTabList$[esp+72]
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+76]
	cmp	BYTE PTR [ebp+128], 0
	push	esi
	mov	esi, DWORD PTR [ebp+12]
	push	edi
	mov	edi, ecx
	mov	DWORD PTR _pTabList$GSCopy$[esp+88], eax
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR _pParse$GSCopy$[esp+88], ebp
	mov	DWORD PTR _pEList$GSCopy$[esp+88], edi
	mov	DWORD PTR _v$[esp+88], esi
	jne	$LN23@generateCo@2
; Line 54430
	cmp	BYTE PTR [ebp+16], 0
	jne	$LN23@generateCo@2
	test	esi, esi
	je	$LN23@generateCo@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN24@generateCo@2
	cmp	DWORD PTR _inMutex, 0
	jg	$LN23@generateCo@2
$LN24@generateCo@2:
; Line 54431
	mov	BYTE PTR [ebp+16], 1
; Line 54432
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, eax
	shr	ecx, 5
	and	ecx, 1
	mov	DWORD PTR _fullNames$[esp+88], ecx
; Line 54434
	mov	ecx, DWORD PTR [edi]
	shr	eax, 6
	push	ebx
	and	eax, 1
	push	ecx
	mov	ebx, esi
	mov	DWORD PTR _shortNames$[esp+96], eax
	call	_sqlite3VdbeSetNumCols
; Line 54435
	xor	eax, eax
	xor	ebx, ebx
	add	esp, 4
	cmp	DWORD PTR [edi], eax
	mov	DWORD PTR _i$[esp+92], ebx
	jle	$LN20@generateCo@2
	mov	DWORD PTR tv932[esp+92], eax
	mov	DWORD PTR tv936[esp+92], eax
	jmp	SHORT $LN22@generateCo@2
	npad	5
$LL127@generateCo@2:
; Line 54431
	mov	esi, DWORD PTR _v$[esp+92]
$LN22@generateCo@2:
; Line 54437
	mov	edx, DWORD PTR [edi+12]
	add	eax, edx
	mov	edx, DWORD PTR [eax]
; Line 54438
	test	edx, edx
	je	$LN21@generateCo@2
; Line 54439
	mov	edi, DWORD PTR [eax+4]
	test	edi, edi
	je	SHORT $LN18@generateCo@2
; Line 54441
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL119@generateCo@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL119@generateCo@2
	sub	eax, edx
	push	0
	push	ebx
	mov	ebx, eax
	mov	eax, esi
	call	_sqlite3VdbeSetColName
	add	esp, 8
; Line 54442
	jmp	$LN21@generateCo@2
$LN18@generateCo@2:
; Line 54444
	cmp	BYTE PTR [edx], 149			; 00000095H
	jne	$LN129@generateCo@2
	mov	ecx, DWORD PTR _pTabList$GSCopy$[esp+92]
	test	ecx, ecx
	je	$LN129@generateCo@2
; Line 54448
	movzx	ebp, WORD PTR [ecx]
	mov	edi, DWORD PTR [edx+40]
	movsx	ecx, bp
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN124@generateCo@2
	mov	esi, DWORD PTR _pTabList$GSCopy$[esp+92]
	mov	ebx, DWORD PTR [edx+36]
	add	esi, 32					; 00000020H
	npad	3
$LL16@generateCo@2:
	cmp	DWORD PTR [esi], ebx
	je	SHORT $LN124@generateCo@2
	add	eax, 1
	add	esi, 48					; 00000030H
	cmp	eax, ecx
	jl	SHORT $LL16@generateCo@2
$LN124@generateCo@2:
; Line 54450
	mov	ecx, DWORD PTR _pTabList$GSCopy$[esp+92]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 4
	mov	esi, DWORD PTR [ecx+eax+20]
	add	ecx, eax
; Line 54451
	xor	ebx, ebx
	cmp	edi, ebx
	jge	SHORT $LN12@generateCo@2
	mov	edi, DWORD PTR [esi+12]
; Line 54453
	cmp	edi, ebx
	jge	SHORT $LN12@generateCo@2
; Line 54454
	mov	edi, OFFSET ??_C@_05KDMKNECD@rowid?$AA@
; Line 54455
	jmp	SHORT $LN11@generateCo@2
$LN12@generateCo@2:
; Line 54456
	lea	eax, DWORD PTR [edi+edi*4]
	mov	edi, DWORD PTR [esi+8]
	mov	edi, DWORD PTR [edi+eax*4]
$LN11@generateCo@2:
; Line 54458
	cmp	DWORD PTR _shortNames$[esp+92], ebx
	jne	SHORT $LN10@generateCo@2
	cmp	DWORD PTR _fullNames$[esp+92], ebx
	jne	SHORT $LN125@generateCo@2
	mov	eax, DWORD PTR [edx+28]
	cmp	eax, ebx
	je	$LN117@generateCo@2
	cmp	BYTE PTR [eax], 0
	je	$LN117@generateCo@2
; Line 54459
	mov	ebx, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _i$[esp+92]
	push	0
	mov	edi, eax
	mov	eax, DWORD PTR _v$[esp+96]
	shr	ebx, 1
	push	ecx
	call	_sqlite3VdbeSetColName
	add	esp, 8
	jmp	$LN21@generateCo@2
$LN10@generateCo@2:
; Line 54460
	cmp	DWORD PTR _fullNames$[esp+92], ebx
	je	SHORT $LN8@generateCo@2
$LN125@generateCo@2:
; Line 54465
	cmp	DWORD PTR _fullNames$[esp+92], ebx
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _zName$98768[esp+92], ebx
	jne	SHORT $LN5@generateCo@2
	cmp	eax, ebx
	jne	SHORT $LN6@generateCo@2
$LN5@generateCo@2:
	mov	eax, DWORD PTR [esi]
$LN6@generateCo@2:
; Line 54466
	push	ebx
	push	edi
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	push	eax
	lea	eax, DWORD PTR _zName$98768[esp+108]
	push	eax
	call	_sqlite3SetString
; Line 54467
	mov	edi, DWORD PTR _zName$98768[esp+112]
	add	esp, 20					; 00000014H
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN34@generateCo@2
	cmp	DWORD PTR _inMutex, ebx
	jg	$LN21@generateCo@2
$LN34@generateCo@2:
	mov	ecx, DWORD PTR _v$[esp+92]
	mov	esi, DWORD PTR [ecx+48]
	add	esi, DWORD PTR tv932[esp+92]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	cmp	edi, ebx
	jne	SHORT $LN52@generateCo@2
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	jmp	SHORT $LN118@generateCo@2
$LN117@generateCo@2:
; Line 54460
	cmp	bp, 1
	jg	SHORT $LN125@generateCo@2
$LN8@generateCo@2:
; Line 54469
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL120@generateCo@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL120@generateCo@2
	sub	eax, edx
	mov	edx, DWORD PTR _i$[esp+92]
	push	ebx
	mov	ebx, eax
	mov	eax, DWORD PTR _v$[esp+96]
	push	edx
	call	_sqlite3VdbeSetColName
	add	esp, 8
	jmp	$LN21@generateCo@2
; Line 54467
$LN52@generateCo@2:
	mov	eax, edi
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 130			; 00000082H
	lea	edx, DWORD PTR [eax+1]
$LL121@generateCo@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL121@generateCo@2
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	WORD PTR [esi+24], 162			; 000000a2H
$LN118@generateCo@2:
	mov	dx, WORD PTR [esi+24]
	and	dx, 65407				; 0000ff7fH
	or	dx, 64					; 00000040H
	mov	WORD PTR [esi+24], dx
	mov	DWORD PTR [esi+28], ebx
; Line 54470
	jmp	$LN21@generateCo@2
$LN129@generateCo@2:
; Line 54471
	mov	edi, DWORD PTR [edx+28]
	test	edi, edi
	je	SHORT $LN2@generateCo@2
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN2@generateCo@2
; Line 54472
	mov	eax, DWORD PTR _i$[esp+92]
	mov	ebx, DWORD PTR [edx+32]
	push	0
	push	eax
	shr	ebx, 1
	mov	eax, esi
	call	_sqlite3VdbeSetColName
	add	esp, 8
; Line 54474
	jmp	SHORT $LN21@generateCo@2
$LN2@generateCo@2:
; Line 54477
	add	ebx, 1
	push	ebx
	push	OFFSET ??_C@_08OHGGEHKA@column?$CFd?$AA@
	lea	ecx, DWORD PTR _zName$98778[esp+100]
	push	ecx
	push	30					; 0000001eH
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
; Line 54478
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN75@generateCo@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN21@generateCo@2
$LN75@generateCo@2:
	mov	esi, DWORD PTR [esi+48]
	add	esi, DWORD PTR tv932[esp+92]
	push	esi
	call	_sqlite3VdbeMemRelease
	lea	edx, DWORD PTR _zName$98778[esp+96]
	add	esp, 4
	mov	eax, esi
	mov	DWORD PTR [esi+16], edx
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 0
	mov	WORD PTR [esi+24], 258			; 00000102H
	call	_sqlite3VdbeMemMakeWriteable
$LN21@generateCo@2:
	mov	ebx, DWORD PTR _i$[esp+92]
	mov	eax, DWORD PTR tv936[esp+92]
	mov	edi, DWORD PTR _pEList$GSCopy$[esp+92]
	add	DWORD PTR tv932[esp+92], 64		; 00000040H
	add	ebx, 1
	add	eax, 12					; 0000000cH
	cmp	ebx, DWORD PTR [edi]
	mov	DWORD PTR _i$[esp+92], ebx
	mov	DWORD PTR tv936[esp+92], eax
	jl	$LL127@generateCo@2
; Line 54435
	mov	ebp, DWORD PTR _pParse$GSCopy$[esp+92]
$LN20@generateCo@2:
; Line 54481
	mov	ecx, DWORD PTR _pTabList$GSCopy$[esp+92]
	push	edi
	mov	eax, ebp
	call	_generateColumnTypes
	add	esp, 4
	pop	ebx
$LN23@generateCo@2:
; Line 54482
	mov	ecx, DWORD PTR __$ArrayPad$[esp+88]
	pop	edi
	pop	esi
	pop	ebp
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	ret	0
_generateColumnNames ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3GetVdbe
_TEXT	SEGMENT
_sqlite3GetVdbe PROC					; COMDAT
; _pParse$ = esi
; Line 54927
	mov	eax, DWORD PTR [esi+12]
; Line 54928
	test	eax, eax
	jne	SHORT $LN1@sqlite3Get@4
	push	edi
; Line 54929
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [esi+12], eax
	pop	edi
$LN1@sqlite3Get@4:
; Line 54932
	ret	0
_sqlite3GetVdbe ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EB@PHGCKHIG@sqlite3_get_table?$CI?$CJ?5called?5with?5@ ; `string'
;	COMDAT ??_C@_0EB@PHGCKHIG@sqlite3_get_table?$CI?$CJ?5called?5with?5@
CONST	SEGMENT
??_C@_0EB@PHGCKHIG@sqlite3_get_table?$CI?$CJ?5called?5with?5@ DB 'sqlite3'
	DB	'_get_table() called with two or more incompatible queries', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3_get_table_cb
_TEXT	SEGMENT
_pArg$ = 8						; size = 4
_nCol$ = 12						; size = 4
_argv$ = 16						; size = 4
_colv$ = 20						; size = 4
_sqlite3_get_table_cb PROC				; COMDAT
; Line 56962
	push	ebx
	push	ebp
	push	esi
; Line 56971
	mov	esi, DWORD PTR _pArg$[esp+8]
	cmp	DWORD PTR [esi+16], 0
	push	edi
	jne	SHORT $LN51@sqlite3_ge@2
	cmp	DWORD PTR _argv$[esp+12], 0
	je	SHORT $LN51@sqlite3_ge@2
; Line 56972
	mov	ebx, DWORD PTR _nCol$[esp+12]
	lea	eax, DWORD PTR [ebx+ebx]
; Line 56973
	jmp	SHORT $LN18@sqlite3_ge@2
$LN51@sqlite3_ge@2:
; Line 56974
	mov	eax, DWORD PTR _nCol$[esp+12]
	mov	ebx, eax
$LN18@sqlite3_ge@2:
; Line 56976
	mov	edx, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR [esi+12]
	add	edx, eax
	cmp	edx, ecx
	jl	SHORT $LN17@sqlite3_ge@2
; Line 56978
	lea	eax, DWORD PTR [eax+ecx*2+1]
; Line 56979
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [esi+12], eax
	add	eax, eax
	add	eax, eax
	test	ecx, ecx
	je	SHORT $LN25@sqlite3_ge@2
	test	eax, eax
	jle	SHORT $LN24@sqlite3_ge@2
	push	eax
	push	ecx
	call	_realloc
	add	esp, 8
	jmp	SHORT $LN35@sqlite3_ge@2
$LN24@sqlite3_ge@2:
	push	ecx
	call	_free
	add	esp, 4
$malloc_failed$99692:
	pop	edi
; Line 57024
	mov	DWORD PTR [esi+28], 7
	pop	esi
	pop	ebp
; Line 57025
	mov	eax, 1
	pop	ebx
; Line 57026
	ret	0
; Line 56979
$LN25@sqlite3_ge@2:
	test	eax, eax
	jle	SHORT $malloc_failed$99692
	push	eax
	call	_malloc
	add	esp, 4
$LN35@sqlite3_ge@2:
; Line 56980
	test	eax, eax
	je	SHORT $malloc_failed$99692
; Line 56981
	mov	DWORD PTR [esi], eax
$LN17@sqlite3_ge@2:
; Line 56987
	cmp	DWORD PTR [esi+16], 0
	jne	SHORT $LN15@sqlite3_ge@2
; Line 56989
	xor	edi, edi
	test	ebx, ebx
	mov	DWORD PTR [esi+20], ebx
	jle	SHORT $LN8@sqlite3_ge@2
	mov	ebp, DWORD PTR _colv$[esp+12]
$LL14@sqlite3_ge@2:
; Line 56990
	mov	eax, DWORD PTR [ebp+edi*4]
	test	eax, eax
	jne	SHORT $LN11@sqlite3_ge@2
; Line 56991
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	call	_sqlite3_mprintf
	add	esp, 4
; Line 56992
	jmp	SHORT $LN10@sqlite3_ge@2
$LN11@sqlite3_ge@2:
; Line 56993
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	_sqlite3_mprintf
	add	esp, 8
$LN10@sqlite3_ge@2:
; Line 56995
	mov	ecx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edx+ecx*4], eax
	add	DWORD PTR [esi+24], 1
	add	edi, 1
	cmp	edi, ebx
	jl	SHORT $LL14@sqlite3_ge@2
$LN8@sqlite3_ge@2:
; Line 57007
	cmp	DWORD PTR _argv$[esp+12], 0
	je	$LN7@sqlite3_ge@2
; Line 57008
	xor	ebp, ebp
	test	ebx, ebx
	jle	$LN52@sqlite3_ge@2
	npad	2
$LL6@sqlite3_ge@2:
; Line 57009
	mov	ecx, DWORD PTR _argv$[esp+12]
	mov	eax, DWORD PTR [ecx+ebp*4]
	test	eax, eax
	jne	SHORT $LN3@sqlite3_ge@2
; Line 57010
	xor	edi, edi
; Line 57011
	jmp	SHORT $LN2@sqlite3_ge@2
$LN15@sqlite3_ge@2:
; Line 56997
	cmp	DWORD PTR [esi+20], ebx
	je	SHORT $LN8@sqlite3_ge@2
; Line 57000
	push	0
	lea	eax, DWORD PTR [esi+4]
	push	OFFSET ??_C@_0EB@PHGCKHIG@sqlite3_get_table?$CI?$CJ?5called?5with?5@
	push	eax
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
	pop	edi
; Line 57001
	mov	eax, 1
	mov	DWORD PTR [esi+28], eax
	pop	esi
	pop	ebp
	pop	ebx
; Line 57026
	ret	0
$LN3@sqlite3_ge@2:
; Line 57012
	lea	edx, DWORD PTR [eax+1]
$LL50@sqlite3_ge@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL50@sqlite3_ge@2
	sub	eax, edx
	lea	ebx, DWORD PTR [eax+1]
; Line 57013
	test	ebx, ebx
	jle	$malloc_failed$99692
	push	ebx
	call	_malloc
	mov	edi, eax
	add	esp, 4
; Line 57014
	test	edi, edi
	je	$malloc_failed$99692
; Line 57015
	mov	edx, DWORD PTR _argv$[esp+12]
	mov	eax, DWORD PTR [edx+ebp*4]
	push	ebx
	push	eax
	push	edi
	call	_memcpy
	mov	ebx, DWORD PTR _nCol$[esp+24]
	add	esp, 12					; 0000000cH
$LN2@sqlite3_ge@2:
; Line 57017
	mov	ecx, DWORD PTR [esi+24]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edx+ecx*4], edi
	add	DWORD PTR [esi+24], 1
	add	ebp, 1
	cmp	ebp, ebx
	jl	$LL6@sqlite3_ge@2
$LN52@sqlite3_ge@2:
; Line 57019
	add	DWORD PTR [esi+16], 1
$LN7@sqlite3_ge@2:
	pop	edi
	pop	esi
	pop	ebp
; Line 57021
	xor	eax, eax
	pop	ebx
; Line 57026
	ret	0
_sqlite3_get_table_cb ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3DeleteTriggerStep
_TEXT	SEGMENT
_pTriggerStep$ = 8					; size = 4
_sqlite3DeleteTriggerStep PROC				; COMDAT
; Line 57137
	push	ebp
; Line 57138
	mov	ebp, DWORD PTR _pTriggerStep$[esp]
	test	ebp, ebp
	je	$LN2@sqlite3Del@2
	push	ebx
	push	esi
	push	edi
	jmp	SHORT $LN3@sqlite3Del@2
$LL48@sqlite3Del@2:
	mov	ebp, DWORD PTR _pTriggerStep$[esp+12]
$LN3@sqlite3Del@2:
; Line 57142
	test	BYTE PTR [ebp+20], 1
	mov	eax, DWORD PTR [ebp+36]
	mov	DWORD PTR _pTriggerStep$[esp+12], eax
	je	SHORT $LN9@sqlite3Del@2
	mov	eax, DWORD PTR [ebp+16]
	test	eax, eax
	je	SHORT $LN9@sqlite3Del@2
	push	eax
	call	_free
	add	esp, 4
$LN9@sqlite3Del@2:
; Line 57143
	mov	ecx, DWORD PTR [ebp+24]
	push	ecx
	call	_sqlite3ExprDelete
; Line 57144
	mov	ebx, DWORD PTR [ebp+28]
	add	esp, 4
	call	_sqlite3ExprListDelete
; Line 57145
	mov	esi, DWORD PTR [ebp+12]
	test	esi, esi
	je	SHORT $LN17@sqlite3Del@2
	push	esi
	call	_clearSelect
	push	esi
	call	_free
	add	esp, 8
$LN17@sqlite3Del@2:
; Line 57146
	mov	esi, DWORD PTR [ebp+32]
	test	esi, esi
	je	SHORT $LN38@sqlite3Del@2
	xor	edi, edi
	cmp	DWORD PTR [esi+4], edi
	jle	SHORT $LN19@sqlite3Del@2
	npad	5
$LL21@sqlite3Del@2:
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+edi*8]
	test	eax, eax
	je	SHORT $LN20@sqlite3Del@2
	push	eax
	call	_free
	add	esp, 4
$LN20@sqlite3Del@2:
	add	edi, 1
	cmp	edi, DWORD PTR [esi+4]
	jl	SHORT $LL21@sqlite3Del@2
$LN19@sqlite3Del@2:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN33@sqlite3Del@2
	push	eax
	call	_free
	add	esp, 4
$LN33@sqlite3Del@2:
	push	esi
	call	_free
	add	esp, 4
$LN38@sqlite3Del@2:
; Line 57148
	push	ebp
	call	_free
	add	esp, 4
	cmp	DWORD PTR _pTriggerStep$[esp+12], 0
	jne	$LL48@sqlite3Del@2
	pop	edi
	pop	esi
	pop	ebx
$LN2@sqlite3Del@2:
	pop	ebp
; Line 57150
	ret	0
_sqlite3DeleteTriggerStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3DeleteTrigger
_TEXT	SEGMENT
_sqlite3DeleteTrigger PROC				; COMDAT
; _pTrigger$ = esi
; Line 57550
	test	esi, esi
	je	SHORT $LN23@sqlite3Del@3
; Line 57551
	mov	eax, DWORD PTR [esi+36]
	push	eax
	call	_sqlite3DeleteTriggerStep
; Line 57552
	mov	eax, DWORD PTR [esi]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@sqlite3Del@3
	push	eax
	call	_free
	add	esp, 4
$LN8@sqlite3Del@3:
; Line 57553
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN13@sqlite3Del@3
	push	eax
	call	_free
	add	esp, 4
$LN13@sqlite3Del@3:
; Line 57554
	mov	ecx, DWORD PTR [esi+12]
	push	edi
	push	ecx
	call	_sqlite3ExprDelete
; Line 57555
	mov	edi, DWORD PTR [esi+16]
	add	esp, 4
	call	_sqlite3IdListDelete
; Line 57556
	test	BYTE PTR [esi+24], 1
	pop	edi
	je	SHORT $LN18@sqlite3Del@3
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN18@sqlite3Del@3
	push	eax
	call	_free
	add	esp, 4
$LN18@sqlite3Del@3:
; Line 57557
	push	esi
	call	_free
	pop	ecx
$LN23@sqlite3Del@3:
; Line 57558
	ret	0
_sqlite3DeleteTrigger ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3UnlinkAndDeleteTrigger
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zName$ = 12						; size = 4
_sqlite3UnlinkAndDeleteTrigger PROC			; COMDAT
; _iDb$ = edx
; Line 57670
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zName$[esp+4]
	push	esi
; Line 57672
	mov	eax, ebp
	push	edi
	lea	esi, DWORD PTR [eax+1]
	npad	3
$LL30@sqlite3Unl@3:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL30@sqlite3Unl@3
; Line 57674
	mov	ecx, DWORD PTR _db$[esp+12]
	sub	eax, esi
	mov	edi, eax
	lea	eax, DWORD PTR [edx+edx*2]
	mov	edx, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR [edx+eax*8+20]
	add	esi, 60					; 0000003cH
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN23@sqlite3Unl@3
	mov	eax, OFFSET _binHash
$LN23@sqlite3Unl@3:
	push	edi
	push	ebp
	call	eax
	mov	ebx, DWORD PTR [esi+20]
	sub	ebx, 1
	and	ebx, eax
	push	edi
	push	ebp
	mov	edx, ebx
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN6@sqlite3Unl@3
	mov	ebp, DWORD PTR [eax+8]
	mov	edi, eax
	push	ebx
	mov	eax, esi
	call	_removeElementGivenHash
	add	esp, 4
; Line 57675
	test	ebp, ebp
	je	SHORT $LN6@sqlite3Unl@3
; Line 57676
	mov	edx, ebp
	call	_tableOfTrigger
; Line 57678
	mov	ecx, DWORD PTR [eax+32]
	cmp	ecx, ebp
	jne	SHORT $LN5@sqlite3Unl@3
; Line 57679
	mov	ecx, DWORD PTR [ebp+40]
; Line 57691
	mov	esi, ebp
	mov	DWORD PTR [eax+32], ecx
	call	_sqlite3DeleteTrigger
; Line 57692
	mov	eax, DWORD PTR _db$[esp+12]
	or	DWORD PTR [eax+8], 16			; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 57694
	ret	0
$LN5@sqlite3Unl@3:
; Line 57681
	mov	eax, ecx
; Line 57682
	test	eax, eax
	je	SHORT $LN2@sqlite3Unl@3
	npad	3
$LL3@sqlite3Unl@3:
; Line 57683
	mov	ecx, DWORD PTR [eax+40]
	cmp	ecx, ebp
	je	SHORT $LN28@sqlite3Unl@3
; Line 57687
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LL3@sqlite3Unl@3
; Line 57691
	mov	esi, ebp
	call	_sqlite3DeleteTrigger
; Line 57692
	mov	eax, DWORD PTR _db$[esp+12]
	or	DWORD PTR [eax+8], 16			; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 57694
	ret	0
$LN28@sqlite3Unl@3:
; Line 57684
	mov	edx, ecx
	mov	ecx, DWORD PTR [edx+40]
	mov	DWORD PTR [eax+40], ecx
$LN2@sqlite3Unl@3:
; Line 57691
	mov	esi, ebp
	call	_sqlite3DeleteTrigger
; Line 57692
	mov	eax, DWORD PTR _db$[esp+12]
	or	DWORD PTR [eax+8], 16			; 00000010H
$LN6@sqlite3Unl@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 57694
	ret	0
_sqlite3UnlinkAndDeleteTrigger ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabOverloadFunction
_TEXT	SEGMENT
_xFunc$ = -8						; size = 4
_pArg$ = -4						; size = 4
_pDef$ = 8						; size = 4
_nArg$ = 12						; size = 4
_sqlite3VtabOverloadFunction PROC			; COMDAT
; _pExpr$ = eax
; Line 59502
	sub	esp, 8
; Line 59515
	test	eax, eax
	jne	SHORT $LN10@sqlite3Vta@7
$LN27@sqlite3Vta@7:
	mov	eax, DWORD PTR _pDef$[esp+4]
; Line 59551
	add	esp, 8
	ret	0
$LN10@sqlite3Vta@7:
; Line 59516
	cmp	BYTE PTR [eax], 149			; 00000095H
	jne	SHORT $LN27@sqlite3Vta@7
; Line 59517
	mov	eax, DWORD PTR [eax+60]
; Line 59518
	test	eax, eax
	je	SHORT $LN27@sqlite3Vta@7
; Line 59519
	cmp	BYTE PTR [eax+57], 0
	je	SHORT $LN27@sqlite3Vta@7
	push	ebp
; Line 59520
	mov	ebp, DWORD PTR [eax+64]
	push	esi
; Line 59523
	mov	esi, DWORD PTR [ebp]
; Line 59524
	cmp	DWORD PTR [esi+72], 0
	jne	SHORT $LN6@sqlite3Vta@7
	mov	eax, DWORD PTR _pDef$[esp+12]
	pop	esi
	pop	ebp
; Line 59551
	add	esp, 8
	ret	0
$LN6@sqlite3Vta@7:
	push	ebx
; Line 59529
	mov	ebx, DWORD PTR _pDef$[esp+16]
	push	edi
	add	ebx, 28					; 0000001cH
	call	_sqlite3StrDup
	mov	edi, eax
; Line 59530
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN3@sqlite3Vta@7
	npad	2
$LL5@sqlite3Vta@7:
; Line 59531
	movzx	ecx, BYTE PTR [eax]
	mov	dl, BYTE PTR _sqlite3UpperToLower[ecx]
	mov	BYTE PTR [eax], dl
	add	eax, 1
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LL5@sqlite3Vta@7
$LN3@sqlite3Vta@7:
; Line 59533
	mov	edx, DWORD PTR _nArg$[esp+20]
	lea	eax, DWORD PTR _pArg$[esp+24]
	push	eax
	mov	eax, DWORD PTR [esi+72]
	lea	ecx, DWORD PTR _xFunc$[esp+28]
	push	ecx
	push	edi
	push	edx
	push	ebp
	call	eax
; Line 59534
	push	edi
	mov	ebp, eax
	call	_free
	add	esp, 24					; 00000018H
; Line 59535
	test	ebp, ebp
; Line 59536
	je	SHORT $LN26@sqlite3Vta@7
; Line 59541
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL20@sqlite3Vta@7:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL20@sqlite3Vta@7
	sub	eax, edx
	lea	edi, DWORD PTR [eax+32]
	call	_sqlite3Malloc
	mov	ebp, eax
; Line 59542
	test	ebp, ebp
	jne	SHORT $LN1@sqlite3Vta@7
$LN26@sqlite3Vta@7:
; Line 59543
	mov	eax, DWORD PTR _pDef$[esp+20]
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp
; Line 59551
	add	esp, 8
	ret	0
$LN1@sqlite3Vta@7:
; Line 59545
	mov	esi, DWORD PTR _pDef$[esp+20]
	mov	ecx, 8
	mov	edi, ebp
; Line 59546
	mov	eax, ebx
	rep movsd
	lea	edx, DWORD PTR [eax+1]
$LL21@sqlite3Vta@7:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL21@sqlite3Vta@7
	sub	eax, edx
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR [ebp+28]
	push	ebx
	push	ecx
	call	_memcpy
; Line 59547
	mov	edx, DWORD PTR _xFunc$[esp+36]
	add	esp, 12					; 0000000cH
	pop	edi
	mov	DWORD PTR [ebp+16], edx
; Line 59548
	mov	eax, DWORD PTR _pArg$[esp+20]
; Line 59549
	or	BYTE PTR [ebp+4], 4
	pop	ebx
	mov	DWORD PTR [ebp+8], eax
	pop	esi
; Line 59550
	mov	eax, ebp
	pop	ebp
; Line 59551
	add	esp, 8
	ret	0
_sqlite3VtabOverloadFunction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _whereClauseClear
_TEXT	SEGMENT
_pWC$ = 8						; size = 4
_whereClauseClear PROC					; COMDAT
; Line 59756
	push	ebp
	mov	ebp, DWORD PTR _pWC$[esp]
	push	esi
; Line 59759
	mov	esi, DWORD PTR [ebp+8]
	sub	esi, 1
	push	edi
	mov	edi, DWORD PTR [ebp+16]
	js	SHORT $LN3@whereClaus
$LL5@whereClaus:
; Line 59760
	test	BYTE PTR [edi+12], 1
	je	SHORT $LN4@whereClaus
; Line 59761
	mov	eax, DWORD PTR [edi]
	push	eax
	call	_sqlite3ExprDelete
	add	esp, 4
$LN4@whereClaus:
	sub	esi, 1
	add	edi, 40					; 00000028H
	test	esi, esi
	jge	SHORT $LL5@whereClaus
$LN3@whereClaus:
; Line 59764
	mov	eax, DWORD PTR [ebp+16]
	pop	edi
	add	ebp, 24					; 00000018H
	pop	esi
	cmp	eax, ebp
	pop	ebp
	je	SHORT $LN11@whereClaus
; Line 59765
	test	eax, eax
	je	SHORT $LN11@whereClaus
	mov	DWORD PTR _pWC$[esp-4], eax
	jmp	_free
$LN11@whereClaus:
; Line 59767
	ret	0
_whereClauseClear ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _whereClauseInsert
_TEXT	SEGMENT
_p$ = 8							; size = 4
_flags$ = 12						; size = 4
_whereClauseInsert PROC					; COMDAT
; _pWC$ = esi
; Line 59784
	mov	eax, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+8], eax
	push	ebx
	mov	bl, BYTE PTR _flags$[esp]
	push	ebp
	jl	SHORT $LN4@whereClaus@2
; Line 59785
	mov	ebp, DWORD PTR [esi+16]
	push	edi
; Line 59786
	lea	edi, DWORD PTR [eax+eax*4]
	shl	edi, 4
	call	_sqlite3Malloc
; Line 59787
	test	eax, eax
	mov	DWORD PTR [esi+16], eax
	pop	edi
	jne	SHORT $LN3@whereClaus@2
; Line 59788
	test	bl, 1
	je	SHORT $LN2@whereClaus@2
; Line 59789
	mov	eax, DWORD PTR _p$[esp+4]
	push	eax
	call	_sqlite3ExprDelete
	add	esp, 4
$LN2@whereClaus@2:
	pop	ebp
; Line 59791
	xor	eax, eax
	pop	ebx
; Line 59806
	ret	0
$LN3@whereClaus@2:
; Line 59793
	mov	ecx, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	ebp
	push	eax
	call	_memcpy
; Line 59794
	lea	edx, DWORD PTR [esi+24]
	add	esp, 12					; 0000000cH
	cmp	ebp, edx
	je	SHORT $LN10@whereClaus@2
; Line 59795
	test	ebp, ebp
	je	SHORT $LN10@whereClaus@2
	push	ebp
	call	_free
	add	esp, 4
$LN10@whereClaus@2:
; Line 59797
	mov	eax, DWORD PTR [esi+12]
	add	eax, eax
	mov	DWORD PTR [esi+12], eax
$LN4@whereClaus@2:
; Line 59799
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+16]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [edx+ecx*8]
; Line 59800
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+8], edx
; Line 59801
	mov	edx, DWORD PTR _p$[esp+4]
	pop	ebp
; Line 59802
	mov	BYTE PTR [ecx+12], bl
	mov	DWORD PTR [ecx], edx
; Line 59803
	mov	DWORD PTR [ecx+16], esi
; Line 59804
	mov	WORD PTR [ecx+4], -1
	pop	ebx
; Line 59806
	ret	0
_whereClauseInsert ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _whereSplit
_TEXT	SEGMENT
_pWC$ = 8						; size = 4
_pExpr$ = 12						; size = 4
_op$ = 16						; size = 4
_whereSplit PROC					; COMDAT
; Line 59825
	push	edi
; Line 59826
	mov	edi, DWORD PTR _pExpr$[esp]
	test	edi, edi
	je	SHORT $LN1@whereSplit
	push	ebx
	mov	ebx, DWORD PTR _op$[esp+4]
	push	esi
	mov	esi, DWORD PTR _pWC$[esp+8]
$LL6@whereSplit:
; Line 59827
	movzx	eax, BYTE PTR [edi]
	cmp	eax, ebx
	jne	SHORT $LN10@whereSplit
; Line 59830
	mov	ecx, DWORD PTR [edi+8]
	push	ebx
	push	ecx
	push	esi
	call	_whereSplit
; Line 59831
	mov	edi, DWORD PTR [edi+12]
	add	esp, 12					; 0000000cH
	test	edi, edi
	jne	SHORT $LL6@whereSplit
	pop	esi
	pop	ebx
	pop	edi
; Line 59833
	ret	0
$LN10@whereSplit:
; Line 59828
	push	0
	push	edi
	call	_whereClauseInsert
	add	esp, 8
	pop	esi
	pop	ebx
$LN1@whereSplit:
	pop	edi
; Line 59833
	ret	0
_whereSplit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _yy_destructor
_TEXT	SEGMENT
_yy_destructor PROC					; COMDAT
; _yymajor$ = eax
; _yypminor$ = ecx
; Line 63565
	movzx	eax, al
	add	eax, -155				; ffffff65H
	cmp	eax, 83					; 00000053H
	ja	SHORT $LN1@yy_destruc
	movzx	eax, BYTE PTR $LN22@yy_destruc[eax]
	push	edi
	jmp	DWORD PTR $LN25@yy_destruc[eax*4]
$LN9@yy_destruc:
	push	esi
; Line 63579
	mov	esi, DWORD PTR [ecx]
	test	esi, esi
	je	SHORT $LN24@yy_destruc
	push	esi
	call	_clearSelect
	push	esi
	call	_free
	add	esp, 8
$LN24@yy_destruc:
	pop	esi
$LN23@yy_destruc:
	pop	edi
$LN1@yy_destruc:
; Line 63630
	ret	0
$LN7@yy_destruc:
	push	ebx
; Line 63605
	mov	ebx, DWORD PTR [ecx]
	call	_sqlite3ExprListDelete
	pop	ebx
	pop	edi
; Line 63630
	ret	0
$LN6@yy_destruc:
; Line 63611
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	edi
; Line 63630
	ret	0
$LN5@yy_destruc:
; Line 63616
	mov	edi, DWORD PTR [ecx]
	call	_sqlite3IdListDelete
	pop	edi
; Line 63630
	ret	0
$LN4@yy_destruc:
; Line 63620
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	_sqlite3DeleteTriggerStep
	add	esp, 4
	pop	edi
; Line 63630
	ret	0
$LN3@yy_destruc:
; Line 63623
	mov	edi, DWORD PTR [ecx+4]
	call	_sqlite3IdListDelete
	pop	edi
; Line 63630
	ret	0
$LN2@yy_destruc:
; Line 63626
	mov	ecx, DWORD PTR [ecx]
	push	ecx
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	edi
; Line 63630
	ret	0
	npad	2
$LN25@yy_destruc:
	DD	$LN9@yy_destruc
	DD	$LN2@yy_destruc
	DD	$LN7@yy_destruc
	DD	$LN6@yy_destruc
	DD	$LN5@yy_destruc
	DD	$LN4@yy_destruc
	DD	$LN3@yy_destruc
	DD	$LN23@yy_destruc
$LN22@yy_destruc:
	DB	0
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	1
	DB	1
	DB	7
	DB	7
	DB	7
	DB	2
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	2
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	3
	DB	0
	DB	7
	DB	7
	DB	2
	DB	3
	DB	1
	DB	2
	DB	1
	DB	2
	DB	7
	DB	2
	DB	7
	DB	3
	DB	3
	DB	7
	DB	1
	DB	4
	DB	0
	DB	7
	DB	4
	DB	2
	DB	1
	DB	2
	DB	2
	DB	7
	DB	4
	DB	2
	DB	7
	DB	1
	DB	7
	DB	7
	DB	1
	DB	2
	DB	1
	DB	1
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	5
	DB	7
	DB	6
	DB	7
	DB	1
	DB	5
	DB	7
	DB	1
_yy_destructor ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _yy_pop_parser_stack
_TEXT	SEGMENT
_yy_pop_parser_stack PROC				; COMDAT
; _pParser$ = esi
; Line 63642
	mov	eax, DWORD PTR [esi]
; Line 63644
	test	eax, eax
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [esi+ecx*4+12]
	jge	SHORT $LN1@yy_pop_par
	xor	eax, eax
; Line 63656
	ret	0
$LN1@yy_pop_par:
	push	ebx
; Line 63652
	mov	bl, BYTE PTR [ecx+4]
; Line 63653
	add	ecx, 8
	mov	al, bl
	call	_yy_destructor
; Line 63654
	add	DWORD PTR [esi], -1
; Line 63655
	movzx	eax, bl
	pop	ebx
; Line 63656
	ret	0
_yy_pop_parser_stack ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ParserFree
_TEXT	SEGMENT
_freeProc$ = 8						; size = 4
_sqlite3ParserFree PROC					; COMDAT
; _p$ = esi
; Line 63675
	test	esi, esi
	je	SHORT $LN4@sqlite3Par@2
; Line 63676
	cmp	DWORD PTR [esi], 0
	jl	SHORT $LN1@sqlite3Par@2
	npad	7
$LL2@sqlite3Par@2:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR [esi+ecx*4+12]
	jl	SHORT $LN7@sqlite3Par@2
	mov	al, BYTE PTR [edx+4]
	lea	ecx, DWORD PTR [edx+8]
	call	_yy_destructor
	add	DWORD PTR [esi], -1
$LN7@sqlite3Par@2:
	cmp	DWORD PTR [esi], 0
	jge	SHORT $LL2@sqlite3Par@2
$LN1@sqlite3Par@2:
; Line 63680
	push	esi
	call	DWORD PTR _freeProc$[esp]
	pop	ecx
$LN4@sqlite3Par@2:
; Line 63681
	ret	0
_sqlite3ParserFree ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _yy_parse_failed
_TEXT	SEGMENT
_yy_parse_failed PROC					; COMDAT
; _yypParser$ = esi
; Line 65216
	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR [esi+8]
	jl	SHORT $LN9@yy_parse_f
	npad	7
$LL2@yy_parse_f:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR [esi+ecx*4+12]
	jl	SHORT $LN6@yy_parse_f
	mov	al, BYTE PTR [edx+4]
	lea	ecx, DWORD PTR [edx+8]
	call	_yy_destructor
	add	DWORD PTR [esi], -1
$LN6@yy_parse_f:
	cmp	DWORD PTR [esi], 0
	jge	SHORT $LL2@yy_parse_f
$LN9@yy_parse_f:
; Line 65219
	mov	DWORD PTR [esi+8], edi
	pop	edi
; Line 65220
	ret	0
_yy_parse_failed ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _yy_accept
_TEXT	SEGMENT
_yy_accept PROC						; COMDAT
; _yypParser$ = esi
; Line 65256
	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR [esi+8]
	jl	SHORT $LN9@yy_accept
	npad	7
$LL2@yy_accept:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR [esi+ecx*4+12]
	jl	SHORT $LN6@yy_accept
	mov	al, BYTE PTR [edx+4]
	lea	ecx, DWORD PTR [edx+8]
	call	_yy_destructor
	add	DWORD PTR [esi], -1
$LN6@yy_accept:
	cmp	DWORD PTR [esi], 0
	jge	SHORT $LL2@yy_accept
$LN9@yy_accept:
; Line 65259
	mov	DWORD PTR [esi+8], edi
	pop	edi
; Line 65260
	ret	0
_yy_accept ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Realloc
_TEXT	SEGMENT
_sqlite3Realloc PROC					; COMDAT
; _p$ = eax
; _n$ = ecx
; Line 8026
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	edi
	mov	edi, ecx
	je	SHORT $LN8@sqlite3Rea@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN8@sqlite3Rea@2
; Line 8027
	xor	eax, eax
	pop	edi
; Line 8048
	ret	0
$LN8@sqlite3Rea@2:
; Line 8030
	test	eax, eax
	jne	SHORT $LN7@sqlite3Rea@2
; Line 8031
	call	_sqlite3Malloc
	pop	edi
; Line 8048
	ret	0
$LN7@sqlite3Rea@2:
; Line 8038
	push	edi
	push	eax
	call	_realloc
	mov	ecx, eax
	add	esp, 8
; Line 8039
	test	ecx, ecx
	jne	SHORT $LN2@sqlite3Rea@2
; Line 8040
	call	_sqlite3FailedMalloc
$LN2@sqlite3Rea@2:
; Line 8046
	mov	eax, ecx
	pop	edi
; Line 8048
	ret	0
_sqlite3Realloc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3MallocX
_TEXT	SEGMENT
_n$ = 8							; size = 4
_sqlite3MallocX PROC					; COMDAT
; Line 8065
	push	edi
; Line 8066
	mov	edi, DWORD PTR _n$[esp]
	call	_sqlite3Malloc
	pop	edi
; Line 8067
	ret	0
_sqlite3MallocX ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ReallocOrFree
_TEXT	SEGMENT
_sqlite3ReallocOrFree PROC				; COMDAT
; _p$ = ebx
; _n$ = eax
; Line 8085
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	esi
	push	edi
	mov	edi, eax
	je	SHORT $LN11@sqlite3Rea@3
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN11@sqlite3Rea@3
	xor	esi, esi
	jmp	SHORT $LN23@sqlite3Rea@3
$LN11@sqlite3Rea@3:
	test	ebx, ebx
	jne	SHORT $LN10@sqlite3Rea@3
	call	_sqlite3Malloc
	mov	esi, eax
	jmp	SHORT $LN5@sqlite3Rea@3
$LN10@sqlite3Rea@3:
	push	edi
	push	ebx
	call	_realloc
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	jne	SHORT $LN25@sqlite3Rea@3
	call	_sqlite3FailedMalloc
$LN5@sqlite3Rea@3:
; Line 8086
	test	esi, esi
	jne	SHORT $LN25@sqlite3Rea@3
$LN23@sqlite3Rea@3:
; Line 8087
	test	ebx, ebx
	je	SHORT $LN25@sqlite3Rea@3
	push	ebx
	call	_free
	add	esp, 4
$LN25@sqlite3Rea@3:
	pop	edi
; Line 8089
	mov	eax, esi
	pop	esi
; Line 8090
	ret	0
_sqlite3ReallocOrFree ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _printf_realloc
_TEXT	SEGMENT
_old$ = 8						; size = 4
_size$ = 12						; size = 4
_printf_realloc PROC					; COMDAT
; Line 9051
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN10@printf_rea
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN10@printf_rea
	xor	eax, eax
; Line 9052
	ret	0
; Line 9051
$LN10@printf_rea:
	mov	eax, DWORD PTR _old$[esp-4]
	test	eax, eax
	jne	SHORT $LN9@printf_rea
	push	edi
	mov	edi, DWORD PTR _size$[esp]
	call	_sqlite3Malloc
	pop	edi
; Line 9052
	ret	0
; Line 9051
$LN9@printf_rea:
	mov	ecx, DWORD PTR _size$[esp-4]
	push	ecx
	push	eax
	call	_realloc
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN4@printf_rea
	call	_sqlite3FailedMalloc
$LN4@printf_rea:
	mov	eax, ecx
; Line 9052
	ret	0
_printf_realloc ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3VMPrintf
_TEXT	SEGMENT
_zBase$ = -356						; size = 350
__$ArrayPad$ = -4					; size = 4
_ap$ = 8						; size = 4
_sqlite3VMPrintf PROC					; COMDAT
; _zFormat$ = ecx
; Line 9058
	sub	esp, 356				; 00000164H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+356], eax
	mov	eax, DWORD PTR _ap$[esp+352]
	push	esi
; Line 9060
	push	eax
	push	350					; 0000015eH
	lea	eax, DWORD PTR _zBase$[esp+368]
	mov	edx, 1
	mov	esi, OFFSET _printf_realloc
	call	_base_vprintf
; Line 9061
	mov	ecx, DWORD PTR __$ArrayPad$[esp+368]
	add	esp, 8
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	ret	0
_sqlite3VMPrintf ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3MPrintf
_TEXT	SEGMENT
_zBase$ = -356						; size = 350
__$ArrayPad$ = -4					; size = 4
_zFormat$ = 8						; size = 4
_sqlite3MPrintf PROC					; COMDAT
; Line 9067
	sub	esp, 356				; 00000164H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+356], eax
; Line 9072
	mov	ecx, DWORD PTR _zFormat$[esp+352]
	push	esi
	lea	eax, DWORD PTR _zFormat$[esp+360]
	push	eax
	push	350					; 0000015eH
	lea	eax, DWORD PTR _zBase$[esp+368]
	mov	edx, 1
	mov	esi, OFFSET _printf_realloc
	call	_base_vprintf
; Line 9075
	mov	ecx, DWORD PTR __$ArrayPad$[esp+368]
	add	esp, 8
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	ret	0
_sqlite3MPrintf ENDP
_TEXT	ENDS
PUBLIC	_pMem$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3VdbeMemTranslate
_TEXT	SEGMENT
_zTerm$ = -72						; size = 4
_zOut$ = -68						; size = 4
_pMem$GSCopy$ = -64					; size = 4
_zFree$82732 = -60					; size = 4
_len$ = -56						; size = 4
_zBuf$82733 = -52					; size = 16
_zShort$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_pMem$ = 8						; size = 4
_desiredEnc$ = 12					; size = 1
_sqlite3VdbeMemTranslate PROC				; COMDAT
; Line 9810
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+72], eax
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pMem$[esp+76]
; Line 9836
	cmp	BYTE PTR [ebp+27], 1
	push	esi
	push	edi
; Line 9942
	mov	DWORD PTR _pMem$GSCopy$[esp+88], ebp
	je	SHORT $LN73@sqlite3Vdb@36
; Line 9836
	cmp	BYTE PTR _desiredEnc$[esp+84], 1
	je	SHORT $LN90@sqlite3Vdb@36
; Line 9839
	mov	eax, ebp
	call	_sqlite3VdbeMemMakeWriteable
; Line 9840
	test	eax, eax
; Line 9842
	jne	SHORT $LN113@sqlite3Vdb@36
; Line 9844
	mov	eax, DWORD PTR [ebp+16]
; Line 9845
	mov	ecx, DWORD PTR [ebp+20]
	add	ecx, eax
; Line 9846
	cmp	eax, ecx
	jae	SHORT $LN70@sqlite3Vdb@36
	npad	2
$LL71@sqlite3Vdb@36:
; Line 9848
	mov	bl, BYTE PTR [eax+1]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [eax], bl
	add	eax, 1
; Line 9850
	mov	BYTE PTR [eax], dl
	add	eax, 1
	cmp	eax, ecx
	jb	SHORT $LL71@sqlite3Vdb@36
$LN70@sqlite3Vdb@36:
; Line 9852
	mov	al, BYTE PTR _desiredEnc$[esp+84]
	pop	edi
	pop	esi
	mov	BYTE PTR [ebp+27], al
	pop	ebp
; Line 10009
	xor	eax, eax
	pop	ebx
; Line 10010
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN73@sqlite3Vdb@36:
; Line 9857
	cmp	BYTE PTR _desiredEnc$[esp+84], 1
	jne	SHORT $LN69@sqlite3Vdb@36
$LN90@sqlite3Vdb@36:
; Line 9863
	mov	eax, DWORD PTR [ebp+20]
	lea	ecx, DWORD PTR [eax+eax+1]
; Line 9864
	jmp	SHORT $LN103@sqlite3Vdb@36
$LN69@sqlite3Vdb@36:
; Line 9870
	mov	eax, DWORD PTR [ebp+20]
	lea	ecx, DWORD PTR [eax+eax+2]
$LN103@sqlite3Vdb@36:
; Line 9880
	mov	edi, DWORD PTR [ebp+16]
; Line 9881
	add	eax, edi
; Line 9882
	cmp	ecx, 32					; 00000020H
	mov	DWORD PTR _len$[esp+88], ecx
	mov	DWORD PTR _zTerm$[esp+88], eax
	jle	SHORT $LN67@sqlite3Vdb@36
; Line 9883
	call	_sqlite3MallocRaw
; Line 9884
	test	eax, eax
	mov	DWORD PTR _zOut$[esp+88], eax
	jne	SHORT $LN65@sqlite3Vdb@36
$LN113@sqlite3Vdb@36:
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 7
	pop	ebx
; Line 10010
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
$LN67@sqlite3Vdb@36:
; Line 9886
	lea	ecx, DWORD PTR _zShort$[esp+88]
	mov	DWORD PTR _zOut$[esp+88], ecx
$LN65@sqlite3Vdb@36:
; Line 9890
	mov	al, BYTE PTR [ebp+27]
	cmp	al, 1
	mov	esi, DWORD PTR _zOut$[esp+88]
	jne	$LN64@sqlite3Vdb@36
; Line 9893
	test	BYTE PTR [ebp+24], 32			; 00000020H
	mov	ecx, DWORD PTR _zTerm$[esp+88]
	mov	ebx, 55296				; 0000d800H
	jne	$LN100@sqlite3Vdb@36
	cmp	ecx, edi
	jbe	$LN100@sqlite3Vdb@36
	test	BYTE PTR [ecx-1], 128			; 00000080H
	lea	eax, DWORD PTR [ecx-1]
	je	$LN100@sqlite3Vdb@36
; Line 9917
	cmp	eax, edi
	jbe	SHORT $LN61@sqlite3Vdb@36
$LL62@sqlite3Vdb@36:
	mov	dl, BYTE PTR [eax]
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN61@sqlite3Vdb@36
; Line 9918
	sub	eax, 1
	cmp	eax, edi
	ja	SHORT $LL62@sqlite3Vdb@36
$LN61@sqlite3Vdb@36:
; Line 9921
	mov	dl, BYTE PTR [eax]
	and	dl, 192					; 000000c0H
	cmp	dl, 192					; 000000c0H
	jne	$LN100@sqlite3Vdb@36
; Line 9929
	mov	ebx, DWORD PTR [ebp+20]
	sub	ebx, eax
	add	ebx, edi
; Line 9931
	cmp	ebx, 15					; 0000000fH
	mov	DWORD PTR _zFree$82732[esp+88], 0
	mov	DWORD PTR _zTerm$[esp+88], eax
	jle	SHORT $LN59@sqlite3Vdb@36
; Line 9932
	lea	ecx, DWORD PTR [ebx+1]
	call	_sqlite3MallocRaw
	mov	ebp, eax
; Line 9933
	test	ebp, ebp
; Line 9934
	je	$LN113@sqlite3Vdb@36
; Line 9936
	mov	DWORD PTR _zFree$82732[esp+88], ebp
; Line 9937
	jmp	SHORT $LN57@sqlite3Vdb@36
$LN59@sqlite3Vdb@36:
; Line 9938
	lea	ebp, DWORD PTR _zBuf$82733[esp+88]
$LN57@sqlite3Vdb@36:
; Line 9940
	mov	eax, DWORD PTR _zTerm$[esp+88]
	push	ebx
	push	eax
	push	ebp
	call	_memcpy
; Line 9941
	mov	BYTE PTR [ebx+ebp], 0
; Line 9942
	movzx	ebx, BYTE PTR [ebp]
	add	esp, 12					; 0000000cH
	add	ebp, 1
	cmp	ebx, 192				; 000000c0H
	jb	SHORT $LN53@sqlite3Vdb@36
	movzx	eax, BYTE PTR [ebp]
	movzx	ebx, BYTE PTR _sqlite3UtfTrans1[ebx-192]
	mov	cl, al
	and	cl, 192					; 000000c0H
	cmp	cl, 128					; 00000080H
	jne	SHORT $LN54@sqlite3Vdb@36
	npad	6
$LL55@sqlite3Vdb@36:
	and	eax, 63					; 0000003fH
	shl	ebx, 6
	add	ebp, 1
	add	ebx, eax
	mov	al, BYTE PTR [ebp]
	mov	dl, al
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	je	SHORT $LL55@sqlite3Vdb@36
$LN54@sqlite3Vdb@36:
	cmp	ebx, 128				; 00000080H
	jb	SHORT $LN52@sqlite3Vdb@36
	mov	eax, ebx
	and	eax, -2048				; fffff800H
	cmp	eax, 55296				; 0000d800H
	je	SHORT $LN52@sqlite3Vdb@36
	mov	ecx, ebx
	and	ecx, -2					; fffffffeH
	cmp	ecx, 65534				; 0000fffeH
	jne	SHORT $LN53@sqlite3Vdb@36
$LN52@sqlite3Vdb@36:
	mov	ebx, 65533				; 0000fffdH
$LN53@sqlite3Vdb@36:
; Line 9943
	mov	edx, DWORD PTR _zFree$82732[esp+88]
	push	edx
	call	_sqlite3FreeX
	mov	ebp, DWORD PTR _pMem$GSCopy$[esp+92]
	mov	ecx, DWORD PTR _zTerm$[esp+92]
	add	esp, 4
$LN100@sqlite3Vdb@36:
; Line 9947
	cmp	BYTE PTR _desiredEnc$[esp+84], 2
	jne	$LN81@sqlite3Vdb@36
; Line 9949
	cmp	edi, ecx
	jae	$LN49@sqlite3Vdb@36
	npad	8
$LL50@sqlite3Vdb@36:
; Line 9950
	movzx	eax, BYTE PTR [edi]
	add	edi, 1
	cmp	eax, 192				; 000000c0H
	jb	SHORT $LN95@sqlite3Vdb@36
	movzx	ecx, BYTE PTR [edi]
	movzx	eax, BYTE PTR _sqlite3UtfTrans1[eax-192]
	mov	dl, cl
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN46@sqlite3Vdb@36
$LL47@sqlite3Vdb@36:
	and	ecx, 63					; 0000003fH
	shl	eax, 6
	add	edi, 1
	add	eax, ecx
	mov	cl, BYTE PTR [edi]
	mov	dl, cl
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	je	SHORT $LL47@sqlite3Vdb@36
$LN46@sqlite3Vdb@36:
	cmp	eax, 128				; 00000080H
	jb	SHORT $LN44@sqlite3Vdb@36
	mov	ecx, eax
	and	ecx, -2048				; fffff800H
	cmp	ecx, 55296				; 0000d800H
	je	SHORT $LN44@sqlite3Vdb@36
	mov	edx, eax
	and	edx, -2					; fffffffeH
	cmp	edx, 65534				; 0000fffeH
	jne	SHORT $LN95@sqlite3Vdb@36
$LN44@sqlite3Vdb@36:
	mov	eax, 65533				; 0000fffdH
; Line 9951
	mov	BYTE PTR [esi], al
	shr	eax, 8
	jmp	SHORT $LN104@sqlite3Vdb@36
$LN95@sqlite3Vdb@36:
	cmp	eax, 65535				; 0000ffffH
	ja	SHORT $LN43@sqlite3Vdb@36
	mov	BYTE PTR [esi], al
	shr	eax, 8
	jmp	SHORT $LN104@sqlite3Vdb@36
$LN43@sqlite3Vdb@36:
	lea	ebp, DWORD PTR [eax-65536]
	mov	edx, eax
	mov	ecx, ebp
	shr	ecx, 10					; 0000000aH
	shr	edx, 10					; 0000000aH
	xor	dl, cl
	and	dl, 63					; 0000003fH
	xor	dl, cl
	mov	ecx, ebp
	mov	ebp, DWORD PTR _pMem$GSCopy$[esp+88]
	shr	ecx, 18					; 00000012H
	mov	BYTE PTR [esi], dl
	and	cl, 3
	add	esi, 1
	sub	cl, 40					; 00000028H
	mov	BYTE PTR [esi], cl
	add	esi, 1
	mov	BYTE PTR [esi], al
	shr	eax, 8
	and	al, 3
	sub	al, 36					; 00000024H
$LN104@sqlite3Vdb@36:
	add	esi, 1
	mov	BYTE PTR [esi], al
	add	esi, 1
	cmp	edi, DWORD PTR _zTerm$[esp+88]
	jb	$LL50@sqlite3Vdb@36
$LN49@sqlite3Vdb@36:
; Line 9953
	cmp	ebx, 55296				; 0000d800H
	je	$LN26@sqlite3Vdb@36
; Line 9954
	cmp	ebx, 65535				; 0000ffffH
	ja	SHORT $LN40@sqlite3Vdb@36
	mov	BYTE PTR [esi], bl
	shr	ebx, 8
	jmp	$LN105@sqlite3Vdb@36
$LN40@sqlite3Vdb@36:
	lea	edi, DWORD PTR [ebx-65536]
	mov	edx, ebx
	shr	edx, 10					; 0000000aH
	mov	eax, edi
	shr	eax, 10					; 0000000aH
	xor	dl, al
	and	dl, 63					; 0000003fH
	xor	dl, al
	mov	eax, edi
	shr	eax, 18					; 00000012H
	mov	BYTE PTR [esi], dl
	and	al, 3
	add	esi, 1
	sub	al, 40					; 00000028H
	mov	BYTE PTR [esi], al
	add	esi, 1
	mov	BYTE PTR [esi], bl
	shr	ebx, 8
	and	bl, 3
	sub	bl, 36					; 00000024H
; Line 9956
	jmp	$LN105@sqlite3Vdb@36
$LN81@sqlite3Vdb@36:
; Line 9959
	cmp	edi, ecx
	jae	$LN36@sqlite3Vdb@36
$LL37@sqlite3Vdb@36:
; Line 9960
	movzx	eax, BYTE PTR [edi]
	add	edi, 1
	cmp	eax, 192				; 000000c0H
	jb	SHORT $LN96@sqlite3Vdb@36
	movzx	ecx, BYTE PTR [edi]
	movzx	eax, BYTE PTR _sqlite3UtfTrans1[eax-192]
	mov	dl, cl
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN33@sqlite3Vdb@36
$LL34@sqlite3Vdb@36:
	and	ecx, 63					; 0000003fH
	shl	eax, 6
	add	edi, 1
	add	eax, ecx
	mov	cl, BYTE PTR [edi]
	mov	dl, cl
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	je	SHORT $LL34@sqlite3Vdb@36
$LN33@sqlite3Vdb@36:
	cmp	eax, 128				; 00000080H
	jb	SHORT $LN31@sqlite3Vdb@36
	mov	ecx, eax
	and	ecx, -2048				; fffff800H
	cmp	ecx, 55296				; 0000d800H
	je	SHORT $LN31@sqlite3Vdb@36
	mov	edx, eax
	and	edx, -2					; fffffffeH
	cmp	edx, 65534				; 0000fffeH
	jne	SHORT $LN96@sqlite3Vdb@36
$LN31@sqlite3Vdb@36:
	mov	eax, 65533				; 0000fffdH
; Line 9961
	mov	ecx, eax
	shr	ecx, 8
	jmp	SHORT $LN106@sqlite3Vdb@36
$LN96@sqlite3Vdb@36:
	cmp	eax, 65535				; 0000ffffH
	ja	SHORT $LN30@sqlite3Vdb@36
	mov	ecx, eax
	shr	ecx, 8
	jmp	SHORT $LN106@sqlite3Vdb@36
$LN30@sqlite3Vdb@36:
	lea	ebp, DWORD PTR [eax-65536]
	mov	edx, ebp
	shr	edx, 18					; 00000012H
	and	dl, 3
	sub	dl, 40					; 00000028H
	mov	BYTE PTR [esi], dl
	mov	ecx, ebp
	mov	ebp, DWORD PTR _pMem$GSCopy$[esp+88]
	shr	ecx, 10					; 0000000aH
	mov	edx, eax
	shr	edx, 10					; 0000000aH
	xor	dl, cl
	and	dl, 63					; 0000003fH
	xor	dl, cl
	add	esi, 1
	mov	ecx, eax
	shr	ecx, 8
	mov	BYTE PTR [esi], dl
	and	cl, 3
	add	esi, 1
	sub	cl, 36					; 00000024H
$LN106@sqlite3Vdb@36:
	mov	BYTE PTR [esi], cl
	add	esi, 1
	mov	BYTE PTR [esi], al
	add	esi, 1
	cmp	edi, DWORD PTR _zTerm$[esp+88]
	jb	$LL37@sqlite3Vdb@36
$LN36@sqlite3Vdb@36:
; Line 9963
	cmp	ebx, 55296				; 0000d800H
	je	SHORT $LN26@sqlite3Vdb@36
; Line 9964
	cmp	ebx, 65535				; 0000ffffH
	mov	edx, ebx
	ja	SHORT $LN27@sqlite3Vdb@36
	shr	edx, 8
	mov	BYTE PTR [esi], dl
	jmp	SHORT $LN105@sqlite3Vdb@36
$LN27@sqlite3Vdb@36:
	lea	eax, DWORD PTR [ebx-65536]
	mov	ecx, eax
	shr	eax, 10					; 0000000aH
	shr	edx, 10					; 0000000aH
	xor	dl, al
	shr	ecx, 18					; 00000012H
	and	cl, 3
	and	dl, 63					; 0000003fH
	xor	dl, al
	sub	cl, 40					; 00000028H
	mov	BYTE PTR [esi], cl
	add	esi, 1
	mov	eax, ebx
	shr	eax, 8
	mov	BYTE PTR [esi], dl
	add	esi, 1
	and	al, 3
	sub	al, 36					; 00000024H
	mov	BYTE PTR [esi], al
$LN105@sqlite3Vdb@36:
	add	esi, 1
	mov	BYTE PTR [esi], bl
	add	esi, 1
$LN26@sqlite3Vdb@36:
; Line 9967
	mov	ecx, esi
	sub	ecx, DWORD PTR _zOut$[esp+88]
; Line 9968
	add	esi, 1
	mov	DWORD PTR [ebp+20], ecx
	mov	BYTE PTR [esi-1], 0
; Line 9969
	jmp	$LN25@sqlite3Vdb@36
$LN64@sqlite3Vdb@36:
; Line 9971
	cmp	al, 2
; Line 9973
	mov	edx, DWORD PTR _zTerm$[esp+88]
	jne	$LN84@sqlite3Vdb@36
	cmp	edi, edx
	jae	$LN11@sqlite3Vdb@36
$LL23@sqlite3Vdb@36:
; Line 9974
	movzx	eax, BYTE PTR [edi]
	movzx	ecx, BYTE PTR [edi+1]
	add	edi, 1
	shl	ecx, 8
	add	eax, ecx
	lea	ecx, DWORD PTR [eax-55296]
	add	edi, 1
	cmp	ecx, 2047				; 000007ffH
	ja	SHORT $LN102@sqlite3Vdb@36
	movzx	ecx, BYTE PTR [edi]
	movzx	ebx, BYTE PTR [edi+1]
	add	edi, 1
	shl	ebx, 8
	add	ecx, ebx
	mov	ebx, eax
	and	eax, 63					; 0000003fH
	and	ebx, 960				; 000003c0H
	lea	eax, DWORD PTR [ebx+eax+64]
	shl	eax, 10					; 0000000aH
	and	ecx, 1023				; 000003ffH
	add	eax, ecx
	add	edi, 1
	test	eax, -65536				; ffff0000H
	jne	SHORT $LN102@sqlite3Vdb@36
	mov	eax, 65533				; 0000fffdH
; Line 9975
	mov	ecx, eax
	shr	ecx, 12					; 0000000cH
	and	cl, 15					; 0000000fH
	sub	cl, 32					; 00000020H
	jmp	SHORT $LN109@sqlite3Vdb@36
$LN102@sqlite3Vdb@36:
	cmp	eax, 128				; 00000080H
	jb	SHORT $LN107@sqlite3Vdb@36
	cmp	eax, 2048				; 00000800H
	jae	SHORT $LN17@sqlite3Vdb@36
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 31					; 0000001fH
	sub	cl, 64					; 00000040H
	jmp	SHORT $LN108@sqlite3Vdb@36
$LN17@sqlite3Vdb@36:
	cmp	eax, 65536				; 00010000H
	jae	SHORT $LN15@sqlite3Vdb@36
	mov	ecx, eax
	shr	ecx, 12					; 0000000cH
	and	cl, 15					; 0000000fH
	sub	cl, 32					; 00000020H
	jmp	SHORT $LN109@sqlite3Vdb@36
$LN15@sqlite3Vdb@36:
	mov	ecx, eax
	shr	ecx, 18					; 00000012H
	and	cl, 7
	sub	cl, 16					; 00000010H
	mov	BYTE PTR [esi], cl
	mov	ecx, eax
	shr	ecx, 12					; 0000000cH
	and	cl, 63					; 0000003fH
	add	esi, 1
	add	cl, 128					; 00000080H
$LN109@sqlite3Vdb@36:
	mov	BYTE PTR [esi], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63					; 0000003fH
	add	esi, 1
	add	cl, 128					; 00000080H
$LN108@sqlite3Vdb@36:
	mov	BYTE PTR [esi], cl
	and	al, 63					; 0000003fH
	add	esi, 1
	add	al, 128					; 00000080H
$LN107@sqlite3Vdb@36:
	mov	BYTE PTR [esi], al
	add	esi, 1
	cmp	edi, edx
	jb	$LL23@sqlite3Vdb@36
; Line 9977
	jmp	$LN11@sqlite3Vdb@36
$LN84@sqlite3Vdb@36:
; Line 9979
	cmp	edi, edx
	jae	$LN11@sqlite3Vdb@36
$LL12@sqlite3Vdb@36:
; Line 9980
	movzx	ecx, BYTE PTR [edi+1]
	xor	eax, eax
	mov	ah, BYTE PTR [edi]
	add	edi, 1
	add	edi, 1
	add	eax, ecx
	lea	ecx, DWORD PTR [eax-55296]
	cmp	ecx, 2047				; 000007ffH
	ja	SHORT $LN101@sqlite3Vdb@36
	movzx	ebx, BYTE PTR [edi+1]
	xor	ecx, ecx
	mov	ch, BYTE PTR [edi]
	add	edi, 1
	add	edi, 1
	add	ecx, ebx
	mov	ebx, eax
	and	eax, 63					; 0000003fH
	and	ebx, 960				; 000003c0H
	lea	eax, DWORD PTR [ebx+eax+64]
	shl	eax, 10					; 0000000aH
	and	ecx, 1023				; 000003ffH
	add	eax, ecx
	test	eax, -65536				; ffff0000H
	jne	SHORT $LN101@sqlite3Vdb@36
	mov	eax, 65533				; 0000fffdH
; Line 9981
	mov	ecx, eax
	shr	ecx, 12					; 0000000cH
	and	cl, 15					; 0000000fH
	sub	cl, 32					; 00000020H
	jmp	SHORT $LN112@sqlite3Vdb@36
$LN101@sqlite3Vdb@36:
	cmp	eax, 128				; 00000080H
	jb	SHORT $LN110@sqlite3Vdb@36
	cmp	eax, 2048				; 00000800H
	jae	SHORT $LN6@sqlite3Vdb@36
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 31					; 0000001fH
	sub	cl, 64					; 00000040H
	jmp	SHORT $LN111@sqlite3Vdb@36
$LN6@sqlite3Vdb@36:
	cmp	eax, 65536				; 00010000H
	jae	SHORT $LN4@sqlite3Vdb@36
	mov	ecx, eax
	shr	ecx, 12					; 0000000cH
	and	cl, 15					; 0000000fH
	sub	cl, 32					; 00000020H
	jmp	SHORT $LN112@sqlite3Vdb@36
$LN4@sqlite3Vdb@36:
	mov	ecx, eax
	shr	ecx, 18					; 00000012H
	and	cl, 7
	sub	cl, 16					; 00000010H
	mov	BYTE PTR [esi], cl
	mov	ecx, eax
	shr	ecx, 12					; 0000000cH
	and	cl, 63					; 0000003fH
	add	esi, 1
	add	cl, 128					; 00000080H
$LN112@sqlite3Vdb@36:
	mov	BYTE PTR [esi], cl
	mov	ecx, eax
	shr	ecx, 6
	and	cl, 63					; 0000003fH
	add	esi, 1
	add	cl, 128					; 00000080H
$LN111@sqlite3Vdb@36:
	mov	BYTE PTR [esi], cl
	and	al, 63					; 0000003fH
	add	esi, 1
	add	al, 128					; 00000080H
$LN110@sqlite3Vdb@36:
	mov	BYTE PTR [esi], al
	add	esi, 1
	cmp	edi, edx
	jb	$LL12@sqlite3Vdb@36
$LN11@sqlite3Vdb@36:
; Line 9984
	mov	edx, esi
	sub	edx, DWORD PTR _zOut$[esp+88]
	mov	DWORD PTR [ebp+20], edx
$LN25@sqlite3Vdb@36:
; Line 9989
	push	ebp
	mov	BYTE PTR [esi], 0
	call	_sqlite3VdbeMemRelease
; Line 9991
	mov	cl, BYTE PTR _desiredEnc$[esp+88]
	and	WORD PTR [ebp+24], 64575		; 0000fc3fH
	movzx	eax, WORD PTR [ebp+24]
	mov	BYTE PTR [ebp+27], cl
; Line 9992
	mov	ecx, DWORD PTR _zOut$[esp+92]
	lea	edx, DWORD PTR _zShort$[esp+92]
	add	esp, 4
	cmp	ecx, edx
	jne	SHORT $LN2@sqlite3Vdb@36
; Line 9993
	mov	eax, DWORD PTR _len$[esp+88]
	push	eax
	push	ecx
	lea	esi, DWORD PTR [ebp+32]
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 9995
	or	WORD PTR [ebp+24], 544			; 00000220H
	mov	ecx, esi
; Line 9996
	jmp	SHORT $LN1@sqlite3Vdb@36
$LN2@sqlite3Vdb@36:
; Line 9997
	or	eax, 96					; 00000060H
	mov	WORD PTR [ebp+24], ax
$LN1@sqlite3Vdb@36:
	pop	edi
; Line 9999
	mov	DWORD PTR [ebp+16], ecx
; Line 10010
	mov	ecx, DWORD PTR __$ArrayPad$[esp+84]
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
$translate_out$82717:
	xor	eax, eax
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	ret	0
_sqlite3VdbeMemTranslate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Error
_TEXT	SEGMENT
_err_code$ = 8						; size = 4
_zFormat$ = 12						; size = 4
_sqlite3Error PROC					; COMDAT
; _db$ = eax
; Line 10258
	push	esi
	mov	esi, eax
; Line 10259
	test	esi, esi
	push	edi
	mov	edi, DWORD PTR _zFormat$[esp+4]
	je	SHORT $LN13@sqlite3Err@3
	cmp	DWORD PTR [esi+140], 0
	jne	SHORT $LN3@sqlite3Err@3
	call	_sqlite3ValueNew
	test	eax, eax
	mov	DWORD PTR [esi+140], eax
	je	SHORT $LN13@sqlite3Err@3
$LN3@sqlite3Err@3:
; Line 10261
	test	edi, edi
	mov	eax, DWORD PTR _err_code$[esp+4]
	mov	DWORD PTR [esi+12], eax
	je	SHORT $LN2@sqlite3Err@3
; Line 10265
	lea	ecx, DWORD PTR _zFormat$[esp+8]
	push	ecx
	mov	ecx, edi
	call	_sqlite3VMPrintf
; Line 10267
	mov	esi, DWORD PTR [esi+140]
	add	esp, 4
	test	esi, esi
	je	SHORT $LN13@sqlite3Err@3
	push	OFFSET _sqlite3FreeX
	push	1
	push	-1
	push	eax
	push	esi
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
; Line 10272
	ret	0
$LN2@sqlite3Err@3:
; Line 10269
	mov	esi, DWORD PTR [esi+140]
	test	esi, esi
	je	SHORT $LN13@sqlite3Err@3
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
$LN13@sqlite3Err@3:
	pop	edi
	pop	esi
; Line 10272
	ret	0
_sqlite3Error ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3ErrorMsg
_TEXT	SEGMENT
_zBase$114970 = -356					; size = 350
__$ArrayPad$ = -4					; size = 4
_zFormat$ = 8						; size = 4
_sqlite3ErrorMsg PROC					; COMDAT
; _pParse$ = edi
; Line 10291
	sub	esp, 356				; 00000164H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+356], eax
; Line 10294
	mov	eax, DWORD PTR [edi+8]
	add	DWORD PTR [edi+24], 1
	test	eax, eax
	je	SHORT $LN7@sqlite3Err@4
	push	eax
	call	_free
	add	esp, 4
$LN7@sqlite3Err@4:
; Line 10296
	mov	ecx, DWORD PTR _zFormat$[esp+352]
	push	esi
	lea	eax, DWORD PTR _zFormat$[esp+360]
	push	eax
	push	350					; 0000015eH
	lea	eax, DWORD PTR _zBase$114970[esp+368]
	mov	edx, 1
	mov	esi, OFFSET _printf_realloc
	call	_base_vprintf
	add	esp, 8
; Line 10298
	cmp	DWORD PTR [edi+4], 0
	mov	DWORD PTR [edi+8], eax
	pop	esi
	jne	SHORT $LN1@sqlite3Err@4
; Line 10299
	mov	DWORD PTR [edi+4], 1
$LN1@sqlite3Err@4:
; Line 10301
	mov	ecx, DWORD PTR __$ArrayPad$[esp+356]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 356				; 00000164H
	ret	0
_sqlite3ErrorMsg ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3HashInit
_TEXT	SEGMENT
_keyClass$ = 8						; size = 4
_copyKey$ = 12						; size = 4
_sqlite3HashInit PROC					; COMDAT
; _pNew$ = eax
; Line 10924
	mov	cl, BYTE PTR _keyClass$[esp-4]
; Line 10928
	mov	dl, BYTE PTR _copyKey$[esp-4]
	mov	BYTE PTR [eax], cl
; Line 10929
	xor	ecx, ecx
	mov	BYTE PTR [eax+1], dl
	mov	DWORD PTR [eax+8], ecx
; Line 10930
	mov	DWORD PTR [eax+4], ecx
; Line 10931
	mov	DWORD PTR [eax+20], ecx
; Line 10932
	mov	DWORD PTR [eax+24], ecx
; Line 10933
	mov	DWORD PTR [eax+12], OFFSET _sqlite3MallocX
; Line 10934
	mov	DWORD PTR [eax+16], OFFSET _sqlite3FreeX
; Line 10935
	ret	0
_sqlite3HashInit ENDP
_TEXT	ENDS
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__CreateFileW@28:PROC
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3WinOpenReadWrite
_TEXT	SEGMENT
_f$ = -12						; size = 12
_pId$ = 8						; size = 4
_pReadonly$ = 12					; size = 4
_sqlite3WinOpenReadWrite PROC				; COMDAT
; _zFilename$ = eax
; Line 16663
	sub	esp, 12					; 0000000cH
	push	ebp
	mov	ebp, DWORD PTR _pReadonly$[esp+12]
	push	esi
	push	edi
	mov	esi, eax
; Line 16666
	call	_isNT
	test	eax, eax
	push	esi
	je	SHORT $LN13@sqlite3Win@9
	call	_utf8ToUnicode
	add	esp, 4
	mov	edi, eax
	jmp	SHORT $LN17@sqlite3Win@9
$LN13@sqlite3Win@9:
	call	_utf8ToUnicode
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	SHORT $LN39@sqlite3Win@9
	push	esi
	call	_unicodeToMbcs
	push	esi
	mov	edi, eax
	call	_free
	add	esp, 8
$LN17@sqlite3Win@9:
; Line 16667
	test	edi, edi
	jne	SHORT $LN9@sqlite3Win@9
$LN39@sqlite3Win@9:
	pop	edi
	pop	esi
; Line 16668
	mov	eax, 7
	pop	ebp
; Line 16745
	add	esp, 12					; 0000000cH
	ret	0
$LN9@sqlite3Win@9:
	push	ebx
; Line 16672
	call	_isNT
	test	eax, eax
; Line 16680
	mov	ebx, DWORD PTR __imp__CreateFileW@28
	push	0
	push	268435584				; 10000080H
	push	4
	push	0
	push	3
	push	-1073741824				; c0000000H
	push	edi
	jne	SHORT $LN44@sqlite3Win@9
; Line 16716
	mov	ebx, DWORD PTR __imp__CreateFileA@28
$LN44@sqlite3Win@9:
	call	ebx
	mov	esi, eax
; Line 16717
	cmp	esi, -1
	jne	SHORT $LN3@sqlite3Win@9
; Line 16725
	push	0
	push	268435584				; 10000080H
	push	4
	push	0
	push	3
	push	-2147483648				; 80000000H
	push	edi
	call	ebx
	mov	esi, eax
; Line 16726
	cmp	esi, -1
	jne	SHORT $LN2@sqlite3Win@9
; Line 16727
	push	edi
	call	_free
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
; Line 16728
	mov	eax, 14					; 0000000eH
	pop	ebp
; Line 16745
	add	esp, 12					; 0000000cH
	ret	0
$LN2@sqlite3Win@9:
; Line 16730
	mov	DWORD PTR [ebp], 1
; Line 16731
	jmp	SHORT $LN1@sqlite3Win@9
$LN3@sqlite3Win@9:
; Line 16732
	mov	DWORD PTR [ebp], 0
$LN1@sqlite3Win@9:
; Line 16737
	push	edi
	call	_free
; Line 16744
	mov	eax, DWORD PTR _pId$[esp+28]
	mov	DWORD PTR _f$[esp+36], esi
	push	eax
	lea	esi, DWORD PTR _f$[esp+36]
	call	_allocateWinFile
	add	esp, 8
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 16745
	add	esp, 12					; 0000000cH
	ret	0
_sqlite3WinOpenReadWrite ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3WinOpenExclusive
_TEXT	SEGMENT
_cnt$83771 = -16					; size = 4
_cnt$83760 = -16					; size = 4
_f$ = -12						; size = 12
_pId$ = 8						; size = 4
_delFlag$ = 12						; size = 4
_sqlite3WinOpenExclusive PROC				; COMDAT
; _zFilename$ = eax
; Line 16768
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	esi, eax
; Line 16772
	call	_isNT
	test	eax, eax
	push	esi
	je	SHORT $LN17@sqlite3Win@10
	call	_utf8ToUnicode
	add	esp, 4
	mov	edi, eax
	jmp	SHORT $LN21@sqlite3Win@10
$LN17@sqlite3Win@10:
	call	_utf8ToUnicode
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	SHORT $LN37@sqlite3Win@10
	push	esi
	call	_unicodeToMbcs
	push	esi
	mov	edi, eax
	call	_free
	add	esp, 8
$LN21@sqlite3Win@10:
; Line 16773
	xor	esi, esi
	cmp	edi, esi
	jne	SHORT $LN13@sqlite3Win@10
$LN37@sqlite3Win@10:
	pop	edi
; Line 16774
	mov	eax, 7
	pop	esi
; Line 16826
	add	esp, 16					; 00000010H
	ret	0
$LN13@sqlite3Win@10:
; Line 16779
	cmp	DWORD PTR _delFlag$[esp+20], esi
	push	ebx
	push	ebp
	mov	ebx, 268435456				; 10000000H
	je	SHORT $LN12@sqlite3Win@10
; Line 16780
	mov	ebx, 335544576				; 14000100H
$LN12@sqlite3Win@10:
; Line 16783
	call	_isNT
	test	eax, eax
; Line 16793
	push	esi
	push	ebx
	push	2
	push	esi
	push	esi
	push	-1073741824				; c0000000H
	mov	DWORD PTR _cnt$83760[esp+56], esi
	push	edi
	je	SHORT $LN11@sqlite3Win@10
	mov	ebp, DWORD PTR __imp__CreateFileW@28
	call	ebp
	mov	esi, eax
; Line 16794
	cmp	esi, -1
	jne	SHORT $LN3@sqlite3Win@10
$LL10@sqlite3Win@10:
	mov	eax, DWORD PTR _cnt$83760[esp+32]
	mov	ecx, eax
	add	eax, 1
	cmp	ecx, 2
	mov	DWORD PTR _cnt$83760[esp+32], eax
	jge	SHORT $LN3@sqlite3Win@10
	push	100					; 00000064H
	call	DWORD PTR __imp__Sleep@4
	push	0
	push	ebx
	push	2
	push	0
	push	0
	push	-1073741824				; c0000000H
	push	edi
	call	ebp
	mov	esi, eax
	cmp	esi, -1
	je	SHORT $LL10@sqlite3Win@10
; Line 16795
	jmp	SHORT $LN3@sqlite3Win@10
$LN11@sqlite3Win@10:
; Line 16808
	mov	ebp, DWORD PTR __imp__CreateFileA@28
	call	ebp
	mov	esi, eax
; Line 16809
	cmp	esi, -1
	jne	SHORT $LN3@sqlite3Win@10
	npad	6
$LL5@sqlite3Win@10:
	mov	eax, DWORD PTR _cnt$83771[esp+32]
	mov	edx, eax
	add	eax, 1
	cmp	edx, 2
	mov	DWORD PTR _cnt$83771[esp+32], eax
	jge	SHORT $LN3@sqlite3Win@10
	push	100					; 00000064H
	call	DWORD PTR __imp__Sleep@4
	push	0
	push	ebx
	push	2
	push	0
	push	0
	push	-1073741824				; c0000000H
	push	edi
	call	ebp
	mov	esi, eax
	cmp	esi, -1
	je	SHORT $LL5@sqlite3Win@10
$LN3@sqlite3Win@10:
; Line 16819
	push	edi
	call	_free
	add	esp, 4
; Line 16820
	cmp	esi, -1
	pop	ebp
	pop	ebx
	jne	SHORT $LN1@sqlite3Win@10
	pop	edi
; Line 16821
	mov	eax, 14					; 0000000eH
	pop	esi
; Line 16826
	add	esp, 16					; 00000010H
	ret	0
$LN1@sqlite3Win@10:
; Line 16825
	mov	eax, DWORD PTR _pId$[esp+20]
	mov	DWORD PTR _f$[esp+28], esi
	push	eax
	lea	esi, DWORD PTR _f$[esp+28]
	call	_allocateWinFile
	add	esp, 4
	pop	edi
	pop	esi
; Line 16826
	add	esp, 16					; 00000010H
	ret	0
_sqlite3WinOpenExclusive ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3WinOpenReadOnly
_TEXT	SEGMENT
_f$ = -12						; size = 12
_pId$ = 8						; size = 4
_sqlite3WinOpenReadOnly PROC				; COMDAT
; _zFilename$ = eax
; Line 16835
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	esi, eax
; Line 16838
	call	_isNT
	test	eax, eax
	push	esi
	je	SHORT $LN8@sqlite3Win@11
	call	_utf8ToUnicode
	add	esp, 4
	mov	esi, eax
	jmp	SHORT $LN12@sqlite3Win@11
$LN8@sqlite3Win@11:
	call	_utf8ToUnicode
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $LN24@sqlite3Win@11
	push	edi
	call	_unicodeToMbcs
	push	edi
	mov	esi, eax
	call	_free
	add	esp, 8
$LN12@sqlite3Win@11:
; Line 16839
	test	esi, esi
	jne	SHORT $LN4@sqlite3Win@11
$LN24@sqlite3Win@11:
	pop	edi
; Line 16840
	mov	eax, 7
	pop	esi
; Line 16877
	add	esp, 12					; 0000000cH
	ret	0
$LN4@sqlite3Win@11:
; Line 16843
	call	_isNT
	test	eax, eax
; Line 16851
	push	0
	push	268435584				; 10000080H
	push	3
	push	0
	push	0
	push	-2147483648				; 80000000H
	push	esi
	je	SHORT $LN3@sqlite3Win@11
	call	DWORD PTR __imp__CreateFileW@28
; Line 16852
	jmp	SHORT $LN25@sqlite3Win@11
$LN3@sqlite3Win@11:
; Line 16863
	call	DWORD PTR __imp__CreateFileA@28
$LN25@sqlite3Win@11:
; Line 16866
	push	esi
	mov	edi, eax
	call	_free
	add	esp, 4
; Line 16867
	cmp	edi, -1
	jne	SHORT $LN1@sqlite3Win@11
	pop	edi
; Line 16868
	mov	eax, 14					; 0000000eH
	pop	esi
; Line 16877
	add	esp, 12					; 0000000cH
	ret	0
$LN1@sqlite3Win@11:
; Line 16876
	mov	eax, DWORD PTR _pId$[esp+16]
	push	eax
	lea	esi, DWORD PTR _f$[esp+24]
	mov	DWORD PTR _f$[esp+28], edi
	call	_allocateWinFile
	add	esp, 4
	pop	edi
	pop	esi
; Line 16877
	add	esp, 12					; 0000000cH
	ret	0
_sqlite3WinOpenReadOnly ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_delmaster
_TEXT	SEGMENT
_master$ = -24						; size = 4
_journal$84540 = -20					; size = 4
_zMasterJournal$ = -16					; size = 4
_zMasterPtr$84532 = -12					; size = 4
_nMasterJournal$ = -8					; size = 8
_zMaster$ = 8						; size = 4
_pager_delmaster PROC					; COMDAT
; Line 18993
	sub	esp, 24					; 00000018H
	push	ebp
	push	esi
; Line 19003
	mov	esi, DWORD PTR _zMaster$[esp+28]
	lea	eax, DWORD PTR _master$[esp+32]
	xor	ebp, ebp
	push	eax
	mov	eax, esi
	mov	DWORD PTR _master$[esp+36], ebp
	mov	DWORD PTR _zMasterJournal$[esp+36], ebp
	call	_sqlite3WinOpenReadOnly
	add	esp, 4
; Line 19005
	cmp	eax, ebp
	jne	$LN37@pager_delm
; Line 19007
	mov	eax, DWORD PTR _master$[esp+32]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	lea	edx, DWORD PTR _nMasterJournal$[esp+36]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	call	eax
	mov	ebx, eax
	add	esp, 8
; Line 19008
	cmp	ebx, ebp
	jne	$LN46@pager_delm
; Line 19010
	cmp	DWORD PTR _nMasterJournal$[esp+40], ebp
	push	edi
	jl	$LN62@pager_delm
	mov	edi, DWORD PTR _nMasterJournal$[esp+40]
	jg	SHORT $LN47@pager_delm
	cmp	edi, ebp
	jbe	$LN62@pager_delm
$LN47@pager_delm:
; Line 19012
	mov	DWORD PTR _zMasterPtr$84532[esp+40], ebp
; Line 19017
	call	_sqlite3Malloc
	mov	ecx, eax
; Line 19018
	cmp	ecx, ebp
	mov	DWORD PTR _zMasterJournal$[esp+40], ecx
	jne	SHORT $LN10@pager_delm
; Line 19019
	mov	ebx, 7
; Line 19020
	jmp	$delmaster_out$84528
$LN10@pager_delm:
; Line 19022
	mov	edi, DWORD PTR _nMasterJournal$[esp+40]
	mov	eax, DWORD PTR _master$[esp+40]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 19023
	cmp	ebx, ebp
	jne	$delmaster_out$84528
; Line 19026
	cmp	DWORD PTR _nMasterJournal$[esp+44], ebp
	mov	edi, DWORD PTR _zMasterJournal$[esp+40]
	jl	$LN62@pager_delm
	jg	SHORT $LL8@pager_delm
	cmp	DWORD PTR _nMasterJournal$[esp+40], ebp
	jbe	$LN62@pager_delm
$LL8@pager_delm:
; Line 19027
	mov	eax, edi
	call	_sqlite3WinFileExists
	test	eax, eax
	je	$LN3@pager_delm
; Line 19035
	lea	ecx, DWORD PTR _journal$84540[esp+40]
	push	ecx
	mov	eax, edi
	mov	DWORD PTR _journal$84540[esp+44], ebp
	call	_sqlite3WinOpenReadOnly
	mov	ebx, eax
	add	esp, 4
; Line 19037
	cmp	ebx, ebp
	jne	$delmaster_out$84528
; Line 19041
	mov	ebx, DWORD PTR _journal$84540[esp+40]
	lea	edx, DWORD PTR _zMasterPtr$84532[esp+40]
	push	edx
	call	_readMasterJournal
	mov	ebx, eax
; Line 19042
	mov	eax, DWORD PTR _journal$84540[esp+44]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN23@pager_delm
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _journal$84540[esp+40]
	push	ecx
	call	edx
	add	esp, 4
$LN23@pager_delm:
; Line 19043
	test	ebx, ebx
	jne	$LN60@pager_delm
; Line 19047
	mov	ebp, DWORD PTR _zMasterPtr$84532[esp+40]
	test	ebp, ebp
	je	SHORT $LN61@pager_delm
	mov	ecx, esi
	mov	eax, ebp
$LL49@pager_delm:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN50@pager_delm
	test	dl, dl
	je	SHORT $LN51@pager_delm
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN50@pager_delm
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL49@pager_delm
$LN51@pager_delm:
	xor	eax, eax
	jmp	SHORT $LN52@pager_delm
$LN50@pager_delm:
	sbb	eax, eax
	sbb	eax, -1
$LN52@pager_delm:
	test	eax, eax
	jne	SHORT $LN61@pager_delm
	lea	esi, DWORD PTR [eax+1]
	jmp	SHORT $LN17@pager_delm
$LN61@pager_delm:
	xor	esi, esi
$LN17@pager_delm:
; Line 19048
	test	ebp, ebp
	je	SHORT $LN29@pager_delm
	push	ebp
	call	_free
	add	esp, 4
$LN29@pager_delm:
; Line 19049
	test	esi, esi
	jne	SHORT $LN60@pager_delm
	mov	esi, DWORD PTR _zMaster$[esp+36]
	xor	ebp, ebp
$LN3@pager_delm:
; Line 19054
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL53@pager_delm:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL53@pager_delm
	sub	eax, edx
	lea	edi, DWORD PTR [edi+eax+1]
	mov	eax, edi
	sub	eax, DWORD PTR _zMasterJournal$[esp+40]
	cdq
	cmp	edx, DWORD PTR _nMasterJournal$[esp+44]
	jl	$LL8@pager_delm
; Line 19026
	jg	SHORT $LN62@pager_delm
	cmp	eax, DWORD PTR _nMasterJournal$[esp+40]
	jb	$LL8@pager_delm
$LN62@pager_delm:
; Line 19058
	mov	eax, esi
	call	_sqlite3WinDelete
	mov	ebx, eax
	jmp	SHORT $delmaster_out$84528
$LN60@pager_delm:
	xor	ebp, ebp
$delmaster_out$84528:
; Line 19061
	mov	eax, DWORD PTR _zMasterJournal$[esp+40]
	cmp	eax, ebp
	pop	edi
	je	SHORT $LN46@pager_delm
; Line 19062
	push	eax
	call	_free
	add	esp, 4
$LN46@pager_delm:
; Line 19065
	mov	eax, DWORD PTR _master$[esp+36]
	cmp	eax, ebp
	je	SHORT $LN58@pager_delm
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _master$[esp+36]
	push	ecx
	call	edx
	add	esp, 4
$LN58@pager_delm:
; Line 19067
	mov	eax, ebx
	pop	ebx
$LN37@pager_delm:
	pop	esi
	pop	ebp
; Line 19068
	add	esp, 24					; 00000018H
	ret	0
_pager_delmaster ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_playback
_TEXT	SEGMENT
_zMaster$ = -20						; size = 4
_nRec$ = -16						; size = 4
_mxPg$ = -12						; size = 4
_szJ$ = -8						; size = 8
_isHot$ = 8						; size = 4
_pager_playback PROC					; COMDAT
; _pPager$ = eax
; Line 19155
	sub	esp, 20					; 00000014H
	push	ebp
	push	esi
	mov	esi, eax
; Line 19167
	mov	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR [eax]
	push	edi
	lea	edx, DWORD PTR _szJ$[esp+32]
	push	edx
	xor	ebp, ebp
	push	eax
	mov	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _mxPg$[esp+40], ebp
	mov	DWORD PTR _zMaster$[esp+40], ebp
	call	eax
	mov	edi, eax
	add	esp, 8
; Line 19168
	cmp	edi, ebp
	jne	$LN37@pager_play@2
	mov	ecx, DWORD PTR _szJ$[esp+32]
	or	ecx, DWORD PTR _szJ$[esp+36]
	push	ebx
	je	$LN57@pager_play@2
; Line 19177
	mov	ebx, DWORD PTR [esi+100]
	lea	edx, DWORD PTR _zMaster$[esp+36]
	push	edx
	call	_readMasterJournal
; Line 19179
	mov	ebx, DWORD PTR _zMaster$[esp+40]
	mov	edi, eax
	add	esp, 4
	cmp	edi, ebp
	jne	$LN19@pager_play@2
	cmp	ebx, ebp
	je	SHORT $LN20@pager_play@2
	mov	eax, ebx
	call	_sqlite3WinFileExists
	test	eax, eax
	je	$LN19@pager_play@2
$LN20@pager_play@2:
; Line 19185
	mov	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	push	ebp
	push	ebp
	push	eax
	call	edx
; Line 19197
	mov	ecx, DWORD PTR _szJ$[esp+52]
	mov	edx, DWORD PTR _szJ$[esp+48]
	lea	eax, DWORD PTR _nRec$[esp+48]
	push	eax
	push	ecx
	push	edx
	lea	ecx, DWORD PTR _mxPg$[esp+60]
	mov	edi, esi
	mov	DWORD PTR [esi+136], ebp
	mov	DWORD PTR [esi+140], ebp
	call	_readJournalHdr
	mov	edi, eax
	add	esp, 24					; 00000018H
; Line 19198
	cmp	edi, ebp
	jne	$LN49@pager_play@2
	npad	1
$LL17@pager_play@2:
; Line 19210
	mov	ebp, DWORD PTR _nRec$[esp+36]
	cmp	ebp, -1
	mov	edi, DWORD PTR _szJ$[esp+36]
	jne	SHORT $LN54@pager_play@2
; Line 19212
	mov	eax, DWORD PTR [esi+56]
	add	eax, 8
	cdq
	mov	ecx, eax
	mov	eax, DWORD PTR [esi+176]
	mov	ebx, edx
	cdq
	mov	ebp, edi
	sub	ebp, eax
	mov	eax, DWORD PTR _szJ$[esp+40]
	push	ebx
	push	ecx
	sbb	eax, edx
	push	eax
	push	ebp
	call	__alldiv
	mov	ebp, eax
	mov	DWORD PTR _nRec$[esp+36], ebp
$LN54@pager_play@2:
; Line 19219
	test	ebp, ebp
	jne	SHORT $LN12@pager_play@2
	cmp	DWORD PTR _isHot$[esp+32], ebp
	jne	SHORT $LN12@pager_play@2
; Line 19220
	mov	eax, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR _szJ$[esp+40]
	add	eax, 8
	sub	edi, DWORD PTR [esi+136]
	cdq
	sbb	ecx, DWORD PTR [esi+140]
	push	edx
	push	eax
	push	ecx
	push	edi
	call	__alldiv
	mov	ebp, eax
	mov	DWORD PTR _nRec$[esp+36], ebp
$LN12@pager_play@2:
; Line 19226
	mov	eax, DWORD PTR [esi+176]
	mov	ecx, DWORD PTR [esi+136]
	cdq
	cmp	ecx, eax
	jne	SHORT $LN10@pager_play@2
	mov	eax, DWORD PTR [esi+140]
	cmp	eax, edx
	jne	SHORT $LN10@pager_play@2
; Line 19227
	mov	ebx, DWORD PTR _mxPg$[esp+36]
	call	_pager_truncate
	mov	edi, eax
; Line 19228
	test	edi, edi
	jne	$LN59@pager_play@2
$LN10@pager_play@2:
; Line 19235
	xor	ebx, ebx
	test	ebp, ebp
	jbe	SHORT $LN7@pager_play@2
	npad	4
$LL9@pager_play@2:
; Line 19236
	mov	eax, DWORD PTR [esi+100]
	push	1
	call	_pager_playback_one_page
	mov	edi, eax
	add	esp, 4
; Line 19237
	test	edi, edi
	jne	SHORT $LN48@pager_play@2
	add	ebx, 1
	cmp	ebx, ebp
	jb	SHORT $LL9@pager_play@2
; Line 19228
	jmp	SHORT $LN7@pager_play@2
$LN48@pager_play@2:
; Line 19238
	cmp	edi, 101				; 00000065H
	jne	SHORT $LN56@pager_play@2
; Line 19240
	mov	ecx, DWORD PTR _szJ$[esp+36]
	mov	edx, DWORD PTR _szJ$[esp+40]
	mov	DWORD PTR [esi+136], ecx
	mov	DWORD PTR [esi+140], edx
$LN7@pager_play@2:
	mov	ecx, DWORD PTR _szJ$[esp+40]
	mov	edx, DWORD PTR _szJ$[esp+36]
	lea	eax, DWORD PTR _nRec$[esp+36]
	push	eax
	push	ecx
	push	edx
	lea	ecx, DWORD PTR _mxPg$[esp+48]
	mov	edi, esi
	call	_readJournalHdr
	mov	edi, eax
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	$LL17@pager_play@2
; Line 19198
	xor	ebp, ebp
$LN49@pager_play@2:
; Line 19199
	cmp	edi, 101				; 00000065H
; Line 19202
	je	SHORT $LN57@pager_play@2
	jmp	SHORT $end_playback$84581
$LN19@pager_play@2:
; Line 19180
	cmp	ebx, ebp
	je	SHORT $LN30@pager_play@2
	push	ebx
	call	_free
	add	esp, 4
$LN30@pager_play@2:
; Line 19182
	cmp	edi, 101				; 00000065H
	mov	DWORD PTR _zMaster$[esp+36], ebp
; Line 19252
	je	SHORT $LN57@pager_play@2
	jmp	SHORT $end_playback$84581
$LN56@pager_play@2:
	xor	ebp, ebp
$end_playback$84581:
	cmp	edi, ebp
	jne	SHORT $LN3@pager_play@2
$LN57@pager_play@2:
; Line 19253
	mov	eax, esi
	call	_pager_end_transaction
	mov	edi, eax
	jmp	SHORT $LN3@pager_play@2
$LN59@pager_play@2:
	xor	ebp, ebp
$LN3@pager_play@2:
; Line 19255
	mov	ebx, DWORD PTR _zMaster$[esp+36]
	cmp	ebx, ebp
	je	SHORT $LN60@pager_play@2
; Line 19259
	cmp	edi, ebp
	jne	SHORT $LN1@pager_play@2
; Line 19260
	push	ebx
	call	_pager_delmaster
	add	esp, 4
	mov	edi, eax
$LN1@pager_play@2:
; Line 19262
	push	ebx
	call	_free
	add	esp, 4
$LN60@pager_play@2:
	pop	ebx
$LN37@pager_play@2:
; Line 19269
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	cmp	ecx, ebp
	je	SHORT $LN44@pager_play@2
	push	eax
	call	ecx
	add	esp, 4
	jmp	SHORT $LN45@pager_play@2
$LN44@pager_play@2:
	mov	eax, 512				; 00000200H
$LN45@pager_play@2:
	mov	ecx, DWORD PTR [esi+56]
	mov	DWORD PTR [esi+176], eax
	cmp	eax, ecx
; Line 19270
	mov	eax, edi
	jge	SHORT $LN39@pager_play@2
; Line 19269
	mov	DWORD PTR [esi+176], ecx
$LN39@pager_play@2:
	pop	edi
	pop	esi
	pop	ebp
; Line 19271
	add	esp, 20					; 00000014H
	ret	0
_pager_playback ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3PagerOpentemp
_TEXT	SEGMENT
_zFile$ = -316						; size = 310
__$ArrayPad$ = -4					; size = 4
_sqlite3PagerOpentemp PROC				; COMDAT
; _pFd$ = ebx
; Line 19449
	sub	esp, 316				; 0000013cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+316], eax
	push	esi
	push	edi
; Line 19450
	mov	esi, 8
	npad	5
$LL4@sqlite3Pag@16:
; Line 19459
	lea	edi, DWORD PTR _zFile$[esp+324]
	sub	esi, 1
	call	_sqlite3WinTempFileName
; Line 19460
	push	1
	push	ebx
	mov	eax, edi
	call	_sqlite3WinOpenExclusive
	add	esp, 8
; Line 19462
	test	esi, esi
	jle	SHORT $LN1@sqlite3Pag@16
	test	eax, eax
	je	SHORT $LN1@sqlite3Pag@16
	cmp	eax, 7
	jne	SHORT $LL4@sqlite3Pag@16
$LN1@sqlite3Pag@16:
; Line 19464
	mov	ecx, DWORD PTR __$ArrayPad$[esp+324]
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 316				; 0000013cH
	ret	0
_sqlite3PagerOpentemp ENDP
_TEXT	ENDS
PUBLIC	??_C@_08NFMECEIL@?9journal?$AA@			; `string'
PUBLIC	??_C@_08CADOGOJM@?3memory?3?$AA@		; `string'
PUBLIC	_ppPager$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_08NFMECEIL@?9journal?$AA@
CONST	SEGMENT
??_C@_08NFMECEIL@?9journal?$AA@ DB '-journal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CADOGOJM@?3memory?3?$AA@
CONST	SEGMENT
??_C@_08CADOGOJM@?3memory?3?$AA@ DB ':memory:', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3PagerOpen
_TEXT	SEGMENT
_fd$ = -348						; size = 4
_rc$ = -344						; size = 4
_memDb$ = -340						; size = 4
_readOnly$ = -336					; size = 4
_tempFile$ = -332					; size = 4
_noReadlock$ = -328					; size = 4
_ppPager$GSCopy$ = -324					; size = 4
_useJournal$ = -320					; size = 4
_zTemp$ = -316						; size = 310
__$ArrayPad$ = -4					; size = 4
_zFilename$ = 8						; size = 4
_nExtra$ = 12						; size = 4
_sqlite3PagerOpen PROC					; COMDAT
; _ppPager$ = edx
; _flags$ = ecx
; Line 19485
	sub	esp, 348				; 0000015cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+348], eax
	mov	eax, DWORD PTR _zFilename$[esp+344]
	push	ebx
	push	ebp
	push	esi
	mov	esi, edx
; Line 19486
	xor	ebx, ebx
; Line 19495
	mov	edx, ecx
; Line 19496
	shr	ecx, 1
	not	edx
	and	edx, 1
	and	ecx, 1
	xor	ebp, ebp
; Line 19521
	cmp	eax, ebx
	push	edi
	mov	DWORD PTR _ppPager$GSCopy$[esp+364], esi
	mov	DWORD PTR _fd$[esp+364], ebx
	mov	DWORD PTR _rc$[esp+364], ebx
	mov	DWORD PTR _tempFile$[esp+364], ebx
	mov	DWORD PTR _memDb$[esp+364], ebx
	mov	DWORD PTR _readOnly$[esp+364], ebx
	mov	DWORD PTR _useJournal$[esp+364], edx
	mov	DWORD PTR _noReadlock$[esp+364], ecx
	mov	DWORD PTR [esi], ebx
	je	SHORT $LN15@sqlite3Pag@17
	cmp	BYTE PTR [eax], bl
	je	SHORT $LN15@sqlite3Pag@17
; Line 19523
	mov	edi, OFFSET ??_C@_08CADOGOJM@?3memory?3?$AA@
	mov	esi, eax
	mov	ecx, 9
	xor	edx, edx
	repe cmpsb
	jne	SHORT $LN14@sqlite3Pag@17
; Line 19525
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	DWORD PTR _memDb$[esp+364], 1
	call	_sqlite3StrDup
	mov	esi, eax
; Line 19526
	jmp	SHORT $LN78@sqlite3Pag@17
$LN14@sqlite3Pag@17:
; Line 19529
	call	_sqlite3WinFullPathname
	mov	esi, eax
; Line 19530
	test	esi, esi
	je	$LN6@sqlite3Pag@17
; Line 19531
	lea	eax, DWORD PTR _readOnly$[esp+364]
	push	eax
	lea	ecx, DWORD PTR _fd$[esp+368]
	push	ecx
	mov	eax, esi
	call	_sqlite3WinOpenReadWrite
	add	esp, 8
	mov	DWORD PTR _rc$[esp+364], eax
; Line 19535
	jmp	SHORT $LN78@sqlite3Pag@17
$LN15@sqlite3Pag@17:
; Line 19536
	lea	ebx, DWORD PTR _fd$[esp+364]
	call	_sqlite3PagerOpentemp
	mov	ebx, eax
; Line 19537
	lea	edi, DWORD PTR _zTemp$[esp+364]
	mov	DWORD PTR _rc$[esp+364], ebx
	call	_sqlite3WinTempFileName
; Line 19539
	mov	eax, edi
	call	_sqlite3WinFullPathname
; Line 19540
	test	ebx, ebx
	mov	esi, eax
	jne	SHORT $LN78@sqlite3Pag@17
; Line 19541
	mov	DWORD PTR _tempFile$[esp+364], 1
$LN78@sqlite3Pag@17:
; Line 19549
	test	esi, esi
	je	$LN82@sqlite3Pag@17
; Line 19550
	mov	ebx, esi
	lea	ecx, DWORD PTR [ebx+1]
$LL77@sqlite3Pag@17:
	mov	al, BYTE PTR [ebx]
	add	ebx, 1
	test	al, al
	jne	SHORT $LL77@sqlite3Pag@17
	sub	ebx, ecx
; Line 19551
	lea	edi, DWORD PTR [ebx+ebx*2+246]
	call	_sqlite3Malloc
	mov	ebp, eax
; Line 19552
	test	ebp, ebp
	je	$LN82@sqlite3Pag@17
	cmp	DWORD PTR _rc$[esp+364], 0
	jne	SHORT $LN8@sqlite3Pag@17
; Line 19553
	mov	edi, DWORD PTR _inMutex
	xor	eax, eax
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN30@sqlite3Pag@17
	test	edi, edi
	jg	SHORT $LN83@sqlite3Pag@17
$LN30@sqlite3Pag@17:
	push	1024					; 00000400H
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN83@sqlite3Pag@17
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN40@sqlite3Pag@17
	test	edi, edi
	jg	SHORT $LN83@sqlite3Pag@17
$LN40@sqlite3Pag@17:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN83@sqlite3Pag@17:
	mov	DWORD PTR [ebp+196], eax
$LN8@sqlite3Pag@17:
; Line 19563
	cmp	DWORD PTR [ebp+196], 0
	je	$LN82@sqlite3Pag@17
	cmp	DWORD PTR _rc$[esp+364], 0
	jne	$LN82@sqlite3Pag@17
; Line 19572
	lea	eax, DWORD PTR [ebp+216]
; Line 19575
	lea	edi, DWORD PTR [ebx+1]
	lea	ecx, DWORD PTR [eax+ebx+1]
	push	edi
	lea	edx, DWORD PTR [ecx+ebx+1]
	push	esi
	push	eax
	mov	DWORD PTR [ebp+84], eax
	mov	DWORD PTR [ebp+92], ecx
	mov	DWORD PTR [ebp+88], edx
	call	_memcpy
; Line 19576
	mov	eax, DWORD PTR [ebp+92]
	push	edi
	push	esi
	push	eax
	call	_memcpy
	add	esp, 24					; 00000018H
; Line 19578
	test	ebx, ebx
	mov	eax, ebx
	jle	SHORT $LN2@sqlite3Pag@17
	mov	edx, DWORD PTR [ebp+92]
	lea	ecx, DWORD PTR [edx+ebx-1]
	npad	3
$LL5@sqlite3Pag@17:
	cmp	BYTE PTR [ecx], 47			; 0000002fH
	je	SHORT $LN3@sqlite3Pag@17
	sub	eax, 1
	sub	ecx, 1
	test	eax, eax
	jg	SHORT $LL5@sqlite3Pag@17
; Line 19579
	jmp	SHORT $LN2@sqlite3Pag@17
$LN3@sqlite3Pag@17:
	test	eax, eax
	jle	SHORT $LN2@sqlite3Pag@17
	mov	BYTE PTR [edx+eax-1], 0
$LN2@sqlite3Pag@17:
; Line 19580
	mov	ecx, DWORD PTR [ebp+88]
	push	ebx
	push	esi
	push	ecx
	call	_memcpy
; Line 19581
	push	esi
	call	_free
; Line 19582
	mov	eax, DWORD PTR [ebp+88]
	mov	edx, DWORD PTR ??_C@_08NFMECEIL@?9journal?$AA@
; Line 19585
	mov	esi, DWORD PTR _useJournal$[esp+380]
	add	eax, ebx
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR ??_C@_08NFMECEIL@?9journal?$AA@+4
	mov	DWORD PTR [eax+4], ecx
	mov	dl, BYTE PTR ??_C@_08NFMECEIL@?9journal?$AA@+8
	mov	ecx, DWORD PTR _memDb$[esp+380]
	mov	BYTE PTR [eax+8], dl
	mov	eax, DWORD PTR _fd$[esp+380]
	add	esp, 16					; 00000010H
	test	esi, esi
	mov	DWORD PTR [ebp+96], eax
	je	SHORT $LN20@sqlite3Pag@17
	test	ecx, ecx
	jne	SHORT $LN20@sqlite3Pag@17
	lea	eax, DWORD PTR [ecx+1]
	jmp	SHORT $LN21@sqlite3Pag@17
$LN20@sqlite3Pag@17:
	xor	eax, eax
$LN21@sqlite3Pag@17:
; Line 19586
	cmp	DWORD PTR _noReadlock$[esp+364], 0
	mov	BYTE PTR [ebp+2], al
	je	SHORT $LN79@sqlite3Pag@17
	cmp	DWORD PTR _readOnly$[esp+364], 0
	je	SHORT $LN79@sqlite3Pag@17
	mov	eax, 1
	jmp	SHORT $LN23@sqlite3Pag@17
$LN79@sqlite3Pag@17:
	xor	eax, eax
$LN23@sqlite3Pag@17:
; Line 19590
	lea	edx, DWORD PTR [ecx-1]
	mov	BYTE PTR [ebp+3], al
; Line 19600
	mov	al, BYTE PTR _tempFile$[esp+364]
; Line 19608
	test	al, al
	mov	DWORD PTR [ebp+28], edx
	mov	dl, BYTE PTR _readOnly$[esp+364]
	mov	DWORD PTR [ebp+56], 1024		; 00000400H
	mov	DWORD PTR [ebp+68], 100			; 00000064H
	mov	DWORD PTR [ebp+72], 1073741823		; 3fffffffH
	mov	BYTE PTR [ebp+11], al
	mov	BYTE PTR [ebp+19], al
	mov	BYTE PTR [ebp+16], cl
	mov	BYTE PTR [ebp+12], dl
	jne	SHORT $LN24@sqlite3Pag@17
	test	esi, esi
	je	SHORT $LN24@sqlite3Pag@17
	xor	eax, eax
	jmp	SHORT $LN25@sqlite3Pag@17
$LN24@sqlite3Pag@17:
	mov	eax, 1
$LN25@sqlite3Pag@17:
; Line 19613
	mov	edx, DWORD PTR _nExtra$[esp+360]
	test	al, al
	mov	BYTE PTR [ebp+7], al
	sete	al
	add	edx, 7
	and	edx, -8					; fffffff8H
; Line 19615
	test	ecx, ecx
	mov	BYTE PTR [ebp+8], al
	mov	DWORD PTR [ebp+52], edx
	jne	SHORT $LN67@sqlite3Pag@17
; Line 19616
	mov	eax, DWORD PTR [ebp+96]
	mov	ecx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+56]
	test	ecx, ecx
	je	SHORT $LN72@sqlite3Pag@17
	push	eax
	call	ecx
	add	esp, 4
	jmp	SHORT $LN73@sqlite3Pag@17
$LN72@sqlite3Pag@17:
	mov	eax, 512				; 00000200H
$LN73@sqlite3Pag@17:
	mov	ecx, DWORD PTR [ebp+56]
	cmp	eax, ecx
	mov	DWORD PTR [ebp+176], eax
	jge	SHORT $LN67@sqlite3Pag@17
	mov	DWORD PTR [ebp+176], ecx
$LN67@sqlite3Pag@17:
; Line 19620
	mov	edx, DWORD PTR _ppPager$GSCopy$[esp+364]
	mov	DWORD PTR [edx], ebp
; Line 19625
	xor	eax, eax
	jmp	SHORT $LN16@sqlite3Pag@17
$LN82@sqlite3Pag@17:
	mov	ebx, DWORD PTR _rc$[esp+364]
$LN6@sqlite3Pag@17:
; Line 19564
	mov	eax, DWORD PTR _fd$[esp+364]
	test	eax, eax
	je	SHORT $LN49@sqlite3Pag@17
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _fd$[esp+364]
	push	ecx
	call	edx
	add	esp, 4
$LN49@sqlite3Pag@17:
; Line 19565
	test	esi, esi
	je	SHORT $LN55@sqlite3Pag@17
	push	esi
	call	_free
	add	esp, 4
$LN55@sqlite3Pag@17:
; Line 19566
	test	ebp, ebp
	je	SHORT $LN60@sqlite3Pag@17
	push	ebp
	call	_free
	add	esp, 4
$LN60@sqlite3Pag@17:
; Line 19567
	test	ebx, ebx
	mov	eax, 7
	je	SHORT $LN16@sqlite3Pag@17
	mov	eax, ebx
$LN16@sqlite3Pag@17:
; Line 19626
	mov	ecx, DWORD PTR __$ArrayPad$[esp+364]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 348				; 0000015cH
	ret	0
_sqlite3PagerOpen ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerSetPagesize
_TEXT	SEGMENT
_sqlite3PagerSetPagesize PROC				; COMDAT
; _pPager$ = eax
; _pageSize$ = edi
; Line 19663
	push	esi
	mov	esi, eax
; Line 19665
	cmp	BYTE PTR [esi+16], 0
	jne	SHORT $LN5@sqlite3Pag@18
	cmp	DWORD PTR [esi+64], 0
	jne	SHORT $LN5@sqlite3Pag@18
	push	ebx
; Line 19666
	call	_pager_reset
; Line 19668
	mov	ebx, DWORD PTR [esi+196]
	mov	eax, edi
	mov	DWORD PTR [esi+56], edi
	call	_sqlite3ReallocOrFree
	mov	DWORD PTR [esi+196], eax
	pop	ebx
$LN5@sqlite3Pag@18:
; Line 19670
	mov	eax, DWORD PTR [esi+56]
	pop	esi
; Line 19671
	ret	0
_sqlite3PagerSetPagesize ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _pagerSharedLock
_TEXT	SEGMENT
_ro$85023 = -24						; size = 4
_dbFileVers$85031 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_pagerSharedLock PROC					; COMDAT
; _pPager$ = ecx
; Line 20577
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+24], eax
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
; Line 20578
	xor	ebp, ebp
; Line 20580
	cmp	BYTE PTR [esi+10], 0
	push	edi
	jne	$LN1@pagerShare
; Line 20581
	cmp	BYTE PTR [esi+16], 0
	jne	$LN2@pagerShare
; Line 20583
	cmp	BYTE PTR [esi+3], 0
	jne	SHORT $LN36@pagerShare
; Line 20584
	push	esi
	lea	ebx, DWORD PTR [ebp+1]
	call	_pager_wait_on_lock
	mov	ebp, eax
	add	esp, 4
; Line 20585
	test	ebp, ebp
	je	SHORT $LN36@pagerShare
; Line 20586
	push	esi
	call	_pager_error
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 20710
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN36@pagerShare:
; Line 20594
	mov	eax, esi
	call	_hasHotJournal
	test	eax, eax
	je	$LN38@pagerShare
; Line 20606
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+40]
	push	4
	push	eax
	call	edx
	mov	edi, eax
; Line 20607
	xor	ebx, ebx
	add	esp, 8
	cmp	edi, ebx
	je	SHORT $LN13@pagerShare
; Line 20608
	call	_pager_unlock
; Line 20609
	push	esi
	mov	eax, edi
	call	_pager_error
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 20710
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN13@pagerShare:
; Line 20628
	mov	eax, DWORD PTR [esi+88]
	mov	BYTE PTR [esi+10], 4
	call	_sqlite3WinFileExists
	test	eax, eax
	je	SHORT $LN35@pagerShare
; Line 20631
	lea	eax, DWORD PTR _ro$85023[esp+40]
	push	eax
	mov	eax, DWORD PTR [esi+88]
	lea	edi, DWORD PTR [esi+100]
	push	edi
	call	_sqlite3WinOpenReadWrite
	add	esp, 8
; Line 20633
	cmp	DWORD PTR _ro$85023[esp+40], ebx
	je	SHORT $LN11@pagerShare
; Line 20635
	mov	ecx, edi
	call	_sqlite3OsClose
; Line 20639
	call	_pager_unlock
	pop	edi
	pop	esi
	pop	ebp
; Line 20640
	mov	eax, 5
	pop	ebx
; Line 20710
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN11@pagerShare:
; Line 20638
	cmp	eax, ebx
	je	SHORT $LN10@pagerShare
$LN35@pagerShare:
; Line 20639
	call	_pager_unlock
	pop	edi
	pop	esi
	pop	ebp
; Line 20640
	mov	eax, 5
	pop	ebx
; Line 20710
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN10@pagerShare:
; Line 20651
	push	1
	mov	eax, esi
	mov	BYTE PTR [esi], 1
	mov	BYTE PTR [esi+1], bl
	mov	DWORD PTR [esi+136], ebx
	mov	DWORD PTR [esi+140], ebx
	mov	BYTE PTR [esi+17], bl
	mov	DWORD PTR [esi+144], ebx
	mov	DWORD PTR [esi+148], ebx
	call	_pager_playback
	mov	ebp, eax
	add	esp, 4
; Line 20652
	cmp	ebp, ebx
	je	SHORT $LN38@pagerShare
; Line 20653
	push	esi
	call	_pager_error
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 20710
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN38@pagerShare:
; Line 20660
	cmp	DWORD PTR [esi+124], 0
	je	$LN2@pagerShare
; Line 20678
	call	_sqlite3PagerPagecount
; Line 20680
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
; Line 20681
	jne	$LN19@pagerShare
; Line 20684
	cmp	DWORD PTR [esi+28], eax
	jle	SHORT $LN6@pagerShare
; Line 20686
	push	eax
	mov	eax, DWORD PTR [esi+96]
	push	24					; 00000018H
	call	_sqlite3OsSeek
	add	esp, 8
; Line 20687
	test	eax, eax
; Line 20688
	jne	$LN19@pagerShare
; Line 20690
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	push	16					; 00000010H
	lea	edx, DWORD PTR _dbFileVers$85031[esp+44]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 20691
	test	ebp, ebp
	je	SHORT $LN3@pagerShare
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 20710
	mov	ecx, DWORD PTR __$ArrayPad$[esp+24]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
$LN6@pagerShare:
; Line 20695
	xor	eax, eax
	mov	DWORD PTR _dbFileVers$85031[esp+40], eax
	mov	DWORD PTR _dbFileVers$85031[esp+44], eax
	mov	DWORD PTR _dbFileVers$85031[esp+48], eax
	mov	DWORD PTR _dbFileVers$85031[esp+52], eax
$LN3@pagerShare:
; Line 20698
	mov	eax, 16					; 00000010H
	lea	ecx, DWORD PTR _dbFileVers$85031[esp+40]
	lea	edx, DWORD PTR [esi+200]
	npad	6
$LL22@pagerShare:
	mov	edi, DWORD PTR [edx]
	cmp	edi, DWORD PTR [ecx]
	jne	SHORT $LN23@pagerShare
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL22@pagerShare
	test	eax, eax
	je	SHORT $LN24@pagerShare
$LN23@pagerShare:
	movzx	edi, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [ecx]
	sub	edi, ebx
	jne	SHORT $LN37@pagerShare
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN24@pagerShare
	movzx	edi, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [ecx]
	sub	edi, ebx
	jne	SHORT $LN37@pagerShare
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN24@pagerShare
	movzx	edi, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [ecx]
	sub	edi, ebx
	jne	SHORT $LN37@pagerShare
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN24@pagerShare
	movzx	edi, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	sub	edi, ecx
	je	SHORT $LN24@pagerShare
$LN37@pagerShare:
	test	edi, edi
	mov	eax, 1
	jg	SHORT $LN26@pagerShare
	or	eax, -1
	jmp	SHORT $LN26@pagerShare
$LN24@pagerShare:
	xor	eax, eax
$LN26@pagerShare:
	test	eax, eax
	je	SHORT $LN2@pagerShare
; Line 20699
	call	_pager_reset
$LN2@pagerShare:
; Line 20704
	cmp	BYTE PTR [esi+10], 0
	jne	SHORT $LN1@pagerShare
; Line 20705
	mov	BYTE PTR [esi+10], 1
$LN1@pagerShare:
; Line 20709
	mov	eax, ebp
$LN19@pagerShare:
; Line 20710
	mov	ecx, DWORD PTR __$ArrayPad$[esp+40]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	ret	0
_pagerSharedLock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerRollback
_TEXT	SEGMENT
_sqlite3PagerRollback PROC				; COMDAT
; _pPager$ = edi
; Line 21802
	push	ebx
; Line 21805
	xor	ebx, ebx
	cmp	BYTE PTR [edi+16], bl
	push	esi
	je	$LN15@sqlite3Pag@19
	push	ebp
; Line 21807
	mov	ebp, DWORD PTR [edi+124]
	cmp	ebp, ebx
	je	SHORT $LN12@sqlite3Pag@19
$LL14@sqlite3Pag@19:
; Line 21810
	cmp	BYTE PTR [ebp+29], bl
	je	SHORT $LN13@sqlite3Pag@19
; Line 21816
	mov	eax, DWORD PTR [edi+56]
	mov	ecx, DWORD PTR [edi+52]
	add	ecx, eax
	lea	esi, DWORD PTR [ecx+ebp+48]
; Line 21817
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, ebx
	je	SHORT $LN10@sqlite3Pag@19
; Line 21818
	push	eax
	push	ecx
	lea	edx, DWORD PTR [ebp+48]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN10@sqlite3Pag@19:
; Line 21823
	mov	eax, DWORD PTR [esi]
	cmp	eax, ebx
	je	SHORT $LN23@sqlite3Pag@19
	push	eax
	call	_free
	add	esp, 4
$LN23@sqlite3Pag@19:
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, ebx
	je	SHORT $LN28@sqlite3Pag@19
	push	eax
	call	_free
	add	esp, 4
$LN28@sqlite3Pag@19:
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], ebx
; Line 21824
	mov	BYTE PTR [ebp+29], bl
; Line 21825
	mov	BYTE PTR [ebp+28], bl
; Line 21826
	mov	BYTE PTR [esi+16], bl
; Line 21827
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
; Line 21828
	mov	eax, DWORD PTR [edi+184]
	cmp	eax, ebx
	je	SHORT $LN13@sqlite3Pag@19
; Line 21829
	mov	ecx, DWORD PTR [edi+56]
	push	ecx
	push	ebp
	call	eax
	add	esp, 8
$LN13@sqlite3Pag@19:
	mov	ebp, DWORD PTR [ebp+24]
	cmp	ebp, ebx
	jne	SHORT $LL14@sqlite3Pag@19
$LN12@sqlite3Pag@19:
; Line 21834
	mov	edx, DWORD PTR [edi+32]
; Line 21835
	push	edi
	mov	DWORD PTR [edi+132], ebx
	mov	DWORD PTR [edi+128], ebx
	mov	DWORD PTR [edi+28], edx
	call	_pager_truncate_cache
	add	esp, 4
	pop	ebp
	pop	esi
; Line 21836
	mov	BYTE PTR [edi+5], bl
; Line 21837
	mov	BYTE PTR [edi+10], 1
; Line 21838
	xor	eax, eax
	pop	ebx
; Line 21870
	ret	0
$LN15@sqlite3Pag@19:
; Line 21841
	cmp	BYTE PTR [edi+14], bl
	je	SHORT $LN6@sqlite3Pag@19
	cmp	BYTE PTR [edi], bl
	je	SHORT $LN6@sqlite3Pag@19
; Line 21846
	mov	eax, DWORD PTR [edi+24]
	cmp	eax, ebx
	je	SHORT $LN5@sqlite3Pag@19
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN5@sqlite3Pag@19
; Line 21847
	cmp	BYTE PTR [edi+10], 4
	jb	SHORT $LN4@sqlite3Pag@19
; Line 21848
	push	ebx
	mov	eax, edi
	call	_pager_playback
	add	esp, 4
$LN4@sqlite3Pag@19:
; Line 21850
	mov	eax, DWORD PTR [edi+24]
	pop	esi
	pop	ebx
; Line 21870
	ret	0
$LN5@sqlite3Pag@19:
; Line 21852
	cmp	BYTE PTR [edi+10], 2
; Line 21854
	push	ebx
	mov	eax, edi
	jne	SHORT $LN3@sqlite3Pag@19
	call	_pager_playback
	mov	esi, eax
	add	esp, 4
; Line 21855
	mov	eax, edi
	call	_pager_end_transaction
; Line 21856
	cmp	esi, ebx
	jne	SHORT $LN1@sqlite3Pag@19
; Line 21859
	jmp	SHORT $LN38@sqlite3Pag@19
$LN3@sqlite3Pag@19:
; Line 21860
	call	_pager_playback
	add	esp, 4
$LN38@sqlite3Pag@19:
	mov	esi, eax
$LN1@sqlite3Pag@19:
; Line 21869
	mov	eax, esi
	and	eax, 255				; 000000ffH
	cmp	eax, 13					; 0000000dH
	mov	DWORD PTR [edi+28], -1
	je	SHORT $LN30@sqlite3Pag@19
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN30@sqlite3Pag@19
	cmp	eax, 11					; 0000000bH
	jne	SHORT $LN31@sqlite3Pag@19
$LN30@sqlite3Pag@19:
	mov	DWORD PTR [edi+24], esi
$LN31@sqlite3Pag@19:
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 21870
	ret	0
$LN6@sqlite3Pag@19:
	pop	esi
; Line 21842
	mov	eax, edi
	pop	ebx
	jmp	_pager_end_transaction
_sqlite3PagerRollback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerStmtBegin
_TEXT	SEGMENT
_sqlite3PagerStmtBegin PROC				; COMDAT
; _pPager$ = esi
; Line 21915
	push	ebx
; Line 21921
	xor	ebx, ebx
	cmp	BYTE PTR [esi+16], bl
	je	SHORT $LN6@sqlite3Pag@20
; Line 21923
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [esi+36], eax
	mov	BYTE PTR [esi+5], 1
; Line 21924
	xor	eax, eax
	pop	ebx
; Line 21960
	ret	0
$LN6@sqlite3Pag@20:
; Line 21926
	cmp	BYTE PTR [esi], bl
	jne	SHORT $LN5@sqlite3Pag@20
; Line 21927
	mov	BYTE PTR [esi+6], 1
; Line 21928
	xor	eax, eax
	pop	ebx
; Line 21960
	ret	0
$LN5@sqlite3Pag@20:
; Line 21931
	mov	eax, DWORD PTR [esi+28]
	cdq
	and	edx, 7
	push	edi
	add	eax, edx
	mov	edi, eax
	sar	edi, 3
	add	edi, 1
	call	_sqlite3Malloc
; Line 21932
	cmp	eax, ebx
	mov	DWORD PTR [esi+80], eax
	jne	SHORT $LN4@sqlite3Pag@20
	pop	edi
; Line 21934
	mov	eax, 7
	pop	ebx
; Line 21960
	ret	0
$LN4@sqlite3Pag@20:
; Line 21945
	cmp	BYTE PTR [esi+4], bl
	mov	ecx, DWORD PTR [esi+136]
	mov	edx, DWORD PTR [esi+140]
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [esi+168], ecx
	mov	ecx, DWORD PTR [esi+44]
	mov	DWORD PTR [esi+172], edx
	mov	DWORD PTR [esi+36], eax
	mov	DWORD PTR [esi+152], ebx
	mov	DWORD PTR [esi+156], ebx
	mov	DWORD PTR [esi+160], ecx
	mov	DWORD PTR [esi+164], ebx
	jne	SHORT $LN3@sqlite3Pag@20
; Line 21946
	lea	ebx, DWORD PTR [esi+104]
	call	_sqlite3PagerOpentemp
	mov	edi, eax
; Line 21947
	xor	ebx, ebx
	cmp	edi, ebx
	je	SHORT $LN2@sqlite3Pag@20
; Line 21955
	mov	eax, DWORD PTR [esi+80]
	cmp	eax, ebx
$stmt_begin_failed$85450:
	je	SHORT $LN1@sqlite3Pag@20
; Line 21956
	push	eax
	call	_sqlite3FreeX
	add	esp, 4
; Line 21957
	mov	DWORD PTR [esi+80], ebx
$LN1@sqlite3Pag@20:
; Line 21959
	mov	eax, edi
	pop	edi
	pop	ebx
; Line 21960
	ret	0
$LN2@sqlite3Pag@20:
; Line 21948
	mov	BYTE PTR [esi+4], 1
; Line 21949
	mov	DWORD PTR [esi+48], ebx
$LN3@sqlite3Pag@20:
	pop	edi
; Line 21951
	mov	BYTE PTR [esi+5], 1
; Line 21952
	xor	eax, eax
	pop	ebx
; Line 21960
	ret	0
_sqlite3PagerStmtBegin ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeSetPageSize
_TEXT	SEGMENT
_sqlite3BtreeSetPageSize PROC				; COMDAT
; _p$ = eax
; _pageSize$ = edx
; _nReserve$ = ecx
; Line 24139
	push	ebx
	push	esi
; Line 24140
	mov	esi, DWORD PTR [eax+4]
; Line 24141
	cmp	BYTE PTR [esi+17], 0
	push	edi
	mov	ebx, ecx
	mov	edi, edx
	je	SHORT $LN3@sqlite3Btr@20
	pop	edi
	pop	esi
; Line 24142
	mov	eax, 8
	pop	ebx
; Line 24155
	ret	0
$LN3@sqlite3Btr@20:
; Line 24144
	test	ebx, ebx
	jge	SHORT $LN2@sqlite3Btr@20
; Line 24145
	movzx	ecx, WORD PTR [esi+26]
	movzx	ebx, WORD PTR [esi+24]
	sub	ebx, ecx
$LN2@sqlite3Btr@20:
; Line 24148
	lea	edx, DWORD PTR [edi-512]
	cmp	edx, 32256				; 00007e00H
	ja	SHORT $LN1@sqlite3Btr@20
	lea	eax, DWORD PTR [edi-1]
	test	eax, edi
	jne	SHORT $LN1@sqlite3Btr@20
; Line 24151
	mov	eax, DWORD PTR [esi]
	call	_sqlite3PagerSetPagesize
	mov	WORD PTR [esi+24], ax
$LN1@sqlite3Btr@20:
; Line 24153
	mov	cx, WORD PTR [esi+24]
	sub	cx, bx
	pop	edi
	mov	WORD PTR [esi+26], cx
	pop	esi
; Line 24154
	xor	eax, eax
	pop	ebx
; Line 24155
	ret	0
_sqlite3BtreeSetPageSize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeBeginStmt
_TEXT	SEGMENT
_sqlite3BtreeBeginStmt PROC				; COMDAT
; _p$ = eax
; Line 25077
	cmp	BYTE PTR [eax+8], 2
	push	edi
	mov	edi, DWORD PTR [eax+4]
	jne	SHORT $LN1@sqlite3Btr@21
	cmp	BYTE PTR [edi+12], 0
	jne	SHORT $LN1@sqlite3Btr@21
; Line 25081
	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN5@sqlite3Btr@21
; Line 25082
	mov	BYTE PTR [edi+12], 1
	xor	eax, eax
	pop	edi
; Line 25084
	ret	0
$LN5@sqlite3Btr@21:
	push	esi
; Line 25081
	mov	esi, DWORD PTR [edi]
	call	_sqlite3PagerStmtBegin
	pop	esi
; Line 25082
	mov	BYTE PTR [edi+12], 1
	pop	edi
; Line 25084
	ret	0
$LN1@sqlite3Btr@21:
; Line 25078
	mov	al, BYTE PTR [edi+13]
	neg	al
	pop	edi
	sbb	eax, eax
	and	eax, 7
	add	eax, 1
; Line 25084
	ret	0
_sqlite3BtreeBeginStmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _checkAppendMsg
_TEXT	SEGMENT
_zFormat$ = 8						; size = 4
_checkAppendMsg PROC					; COMDAT
; _pCheck$ = ecx
; _zMsg1$ = eax
; Line 28537
	push	ebx
	push	esi
	mov	esi, ecx
	mov	ebx, eax
; Line 28540
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN15@checkAppen
; Line 28544
	mov	ecx, DWORD PTR _zFormat$[esp+4]
	add	DWORD PTR [esi+24], 1
	add	eax, -1
	mov	DWORD PTR [esi+16], eax
	lea	eax, DWORD PTR _zFormat$[esp+8]
	push	edi
	push	eax
	call	_sqlite3VMPrintf
	add	esp, 4
; Line 28546
	test	ebx, ebx
	mov	edi, eax
	jne	SHORT $LN3@checkAppen
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN3@checkAppen:
; Line 28547
	lea	eax, DWORD PTR [esi+20]
	mov	esi, DWORD PTR [eax]
	test	esi, esi
; Line 28550
	push	0
	push	edi
	push	ebx
	je	SHORT $LN2@checkAppen
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	push	esi
	push	eax
	mov	DWORD PTR [eax], 0
	call	_sqlite3SetString
	add	esp, 24					; 00000018H
; Line 28551
	test	esi, esi
	je	SHORT $LN1@checkAppen
	push	esi
	call	_free
	add	esp, 4
; Line 28552
	jmp	SHORT $LN1@checkAppen
$LN2@checkAppen:
; Line 28553
	push	eax
	call	_sqlite3SetString
	add	esp, 16					; 00000010H
$LN1@checkAppen:
; Line 28555
	test	edi, edi
	je	SHORT $LN17@checkAppen
	push	edi
	call	_free
	add	esp, 4
$LN17@checkAppen:
	pop	edi
$LN15@checkAppen:
	pop	esi
	pop	ebx
; Line 28556
	ret	0
_checkAppendMsg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@LLKFEBHC@invalid?5page?5number?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BJ@HHKCLCDH@2nd?5reference?5to?5page?5?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0BH@LLKFEBHC@invalid?5page?5number?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BH@LLKFEBHC@invalid?5page?5number?5?$CFd?$AA@ DB 'invalid page num'
	DB	'ber %d', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HHKCLCDH@2nd?5reference?5to?5page?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BJ@HHKCLCDH@2nd?5reference?5to?5page?5?$CFd?$AA@ DB '2nd reference'
	DB	' to page %d', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _checkRef
_TEXT	SEGMENT
_checkRef PROC						; COMDAT
; _pCheck$ = ecx
; _iPage$ = edx
; _zContext$ = eax
; Line 28569
	test	edx, edx
	je	SHORT $LN9@checkRef
; Line 28570
	cmp	edx, DWORD PTR [ecx+8]
	jg	SHORT $LN2@checkRef
	test	edx, edx
	jl	SHORT $LN2@checkRef
	push	esi
; Line 28574
	mov	esi, DWORD PTR [ecx+12]
	cmp	DWORD PTR [esi+edx*4], 1
	pop	esi
	jne	SHORT $LN1@checkRef
; Line 28575
	push	edx
	push	OFFSET ??_C@_0BJ@HHKCLCDH@2nd?5reference?5to?5page?5?$CFd?$AA@
	call	_checkAppendMsg
	add	esp, 8
	mov	eax, 1
; Line 28579
	ret	0
$LN1@checkRef:
; Line 28578
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [eax+edx*4]
	cmp	ecx, 1
	lea	eax, DWORD PTR [eax+edx*4]
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], edx
	jg	SHORT $LN9@checkRef
	xor	eax, eax
; Line 28579
	ret	0
$LN2@checkRef:
; Line 28571
	push	edx
	push	OFFSET ??_C@_0BH@LLKFEBHC@invalid?5page?5number?5?$CFd?$AA@
	call	_checkAppendMsg
	add	esp, 8
$LN9@checkRef:
; Line 28572
	mov	eax, 1
; Line 28579
	ret	0
_checkRef ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeChangeEncoding
_TEXT	SEGMENT
_sqlite3VdbeChangeEncoding PROC				; COMDAT
; _pMem$ = eax
; _desiredEnc$ = ecx
; Line 29329
	test	BYTE PTR [eax+24], 2
	je	SHORT $LN1@sqlite3Vdb@37
	movzx	edx, BYTE PTR [eax+27]
	cmp	edx, ecx
	je	SHORT $LN1@sqlite3Vdb@37
; Line 29340
	push	ecx
	push	eax
	call	_sqlite3VdbeMemTranslate
	add	esp, 8
; Line 29346
	ret	0
$LN1@sqlite3Vdb@37:
; Line 29330
	xor	eax, eax
; Line 29346
	ret	0
_sqlite3VdbeChangeEncoding ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemDynamicify
_TEXT	SEGMENT
_sqlite3VdbeMemDynamicify PROC				; COMDAT
; _pMem$ = eax
; Line 29353
	push	esi
	mov	esi, eax
; Line 29356
	test	WORD PTR [esi+24], 2048			; 00000800H
	je	SHORT $LN5@sqlite3Vdb@38
	call	_sqlite3VdbeMemExpandBlob
$LN5@sqlite3Vdb@38:
; Line 29357
	test	WORD PTR [esi+24], 896			; 00000380H
	jne	SHORT $LN2@sqlite3Vdb@38
; Line 29358
	xor	eax, eax
	pop	esi
; Line 29375
	ret	0
$LN2@sqlite3Vdb@38:
	push	ebp
; Line 29361
	mov	ebp, DWORD PTR [esi+20]
	push	edi
; Line 29363
	lea	ecx, DWORD PTR [ebp+2]
	call	_sqlite3MallocRaw
	mov	edi, eax
; Line 29364
	test	edi, edi
	jne	SHORT $LN1@sqlite3Vdb@38
; Line 29365
	lea	eax, DWORD PTR [edi+7]
	pop	edi
	pop	ebp
	pop	esi
; Line 29375
	ret	0
$LN1@sqlite3Vdb@38:
; Line 29369
	mov	eax, DWORD PTR [esi+16]
	or	WORD PTR [esi+24], 96			; 00000060H
	push	ebp
	push	eax
	push	edi
	mov	DWORD PTR [esi+28], 0
	call	_memcpy
; Line 29370
	mov	BYTE PTR [edi+ebp], 0
; Line 29371
	mov	BYTE PTR [edi+ebp+1], 0
; Line 29373
	and	WORD PTR [esi+24], 64639		; 0000fc7fH
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+16], edi
	pop	edi
	pop	ebp
; Line 29374
	xor	eax, eax
	pop	esi
; Line 29375
	ret	0
_sqlite3VdbeMemDynamicify ENDP
_TEXT	ENDS
PUBLIC	??_C@_06NJMDEJD@?$CF?$CB?415g?$AA@		; `string'
PUBLIC	??_C@_04BFAHMMK@?$CFlld?$AA@			; `string'
;	COMDAT ??_C@_06NJMDEJD@?$CF?$CB?415g?$AA@
CONST	SEGMENT
??_C@_06NJMDEJD@?$CF?$CB?415g?$AA@ DB '%!.15g', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFAHMMK@?$CFlld?$AA@
CONST	SEGMENT
??_C@_04BFAHMMK@?$CFlld?$AA@ DB '%lld', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3VdbeMemStringify
_TEXT	SEGMENT
_sqlite3VdbeMemStringify PROC				; COMDAT
; _pMem$ = esi
; _enc$ = ebx
; Line 29500
	test	BYTE PTR [esi+24], 4
	push	edi
	lea	edi, DWORD PTR [esi+32]
	je	SHORT $LN2@sqlite3Vdb@39
; Line 29501
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	OFFSET ??_C@_04BFAHMMK@?$CFlld?$AA@
; Line 29502
	jmp	SHORT $LN12@sqlite3Vdb@39
$LN2@sqlite3Vdb@39:
; Line 29504
	fld	QWORD PTR [esi+8]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06NJMDEJD@?$CF?$CB?415g?$AA@
$LN12@sqlite3Vdb@39:
	push	edi
	push	32					; 00000020H
	call	_sqlite3_snprintf
; Line 29506
	mov	eax, edi
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
$LL9@sqlite3Vdb@39:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL9@sqlite3Vdb@39
; Line 29509
	or	WORD PTR [esi+24], 546			; 00000222H
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	movzx	eax, WORD PTR [esi+24]
; Line 29510
	test	al, 2
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], 1
	pop	edi
	je	SHORT $LN11@sqlite3Vdb@39
	cmp	ebx, 1
	je	SHORT $LN11@sqlite3Vdb@39
	push	ebx
	push	esi
	call	_sqlite3VdbeMemTranslate
	add	esp, 8
$LN11@sqlite3Vdb@39:
; Line 29511
	xor	eax, eax
; Line 29512
	ret	0
_sqlite3VdbeMemStringify ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeIntValue
_TEXT	SEGMENT
_value$88458 = -8					; size = 8
_sqlite3VdbeIntValue PROC				; COMDAT
; _pMem$ = esi
; Line 29581
	movzx	eax, WORD PTR [esi+24]
	movzx	ecx, ax
	sub	esp, 8
; Line 29582
	test	cl, 4
	je	SHORT $LN8@sqlite3Vdb@40
; Line 29583
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+4]
; Line 29599
	add	esp, 8
	ret	0
$LN8@sqlite3Vdb@40:
; Line 29584
	test	cl, 8
	je	SHORT $LN6@sqlite3Vdb@40
; Line 29585
	fld	QWORD PTR [esi+8]
; Line 29599
	add	esp, 8
; Line 29585
	jmp	__ftol2
$LN6@sqlite3Vdb@40:
; Line 29586
	test	cl, 18					; 00000012H
	je	SHORT $LN4@sqlite3Vdb@40
; Line 29588
	or	eax, 2
; Line 29590
	test	al, 2
	mov	WORD PTR [esi+24], ax
	je	SHORT $LN15@sqlite3Vdb@40
	cmp	BYTE PTR [esi+27], 1
	je	SHORT $LN15@sqlite3Vdb@40
	push	1
	push	esi
	call	_sqlite3VdbeMemTranslate
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@sqlite3Vdb@40
$LN15@sqlite3Vdb@40:
	mov	eax, esi
	call	_sqlite3VdbeMemNulTerminate
	test	eax, eax
	jne	SHORT $LN4@sqlite3Vdb@40
; Line 29594
	mov	ecx, DWORD PTR [esi+16]
	lea	eax, DWORD PTR _value$88458[esp+8]
	push	eax
	push	ecx
	call	_sqlite3Atoi64
; Line 29595
	mov	eax, DWORD PTR _value$88458[esp+16]
	mov	edx, DWORD PTR _value$88458[esp+20]
	add	esp, 8
; Line 29599
	add	esp, 8
	ret	0
$LN4@sqlite3Vdb@40:
; Line 29597
	xor	eax, eax
	xor	edx, edx
; Line 29599
	add	esp, 8
	ret	0
_sqlite3VdbeIntValue ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeRealValue
_TEXT	SEGMENT
_val$88472 = -8						; size = 8
_sqlite3VdbeRealValue PROC				; COMDAT
; _pMem$ = esi
; Line 29608
	movzx	eax, WORD PTR [esi+24]
	sub	esp, 8
	test	al, 8
	je	SHORT $LN8@sqlite3Vdb@41
; Line 29609
	fld	QWORD PTR [esi+8]
; Line 29625
	add	esp, 8
	ret	0
$LN8@sqlite3Vdb@41:
; Line 29610
	test	al, 4
	je	SHORT $LN6@sqlite3Vdb@41
; Line 29611
	fild	QWORD PTR [esi]
; Line 29625
	add	esp, 8
	ret	0
$LN6@sqlite3Vdb@41:
; Line 29612
	test	al, 18					; 00000012H
; Line 29613
	fldz
	je	SHORT $LN1@sqlite3Vdb@41
; Line 29614
	or	eax, 2
	fstp	QWORD PTR _val$88472[esp+8]
; Line 29616
	test	al, 2
	mov	WORD PTR [esi+24], ax
	je	SHORT $LN15@sqlite3Vdb@41
	cmp	BYTE PTR [esi+27], 1
	je	SHORT $LN15@sqlite3Vdb@41
	push	1
	push	esi
	call	_sqlite3VdbeMemTranslate
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@sqlite3Vdb@41
$LN15@sqlite3Vdb@41:
	mov	eax, esi
	call	_sqlite3VdbeMemNulTerminate
	test	eax, eax
	jne	SHORT $LN2@sqlite3Vdb@41
; Line 29620
	lea	eax, DWORD PTR _val$88472[esp+8]
	push	eax
	mov	eax, DWORD PTR [esi+16]
	call	_sqlite3AtoF
; Line 29621
	fld	QWORD PTR _val$88472[esp+12]
	add	esp, 4
; Line 29625
	add	esp, 8
	ret	0
$LN2@sqlite3Vdb@41:
; Line 29617
	fldz
$LN1@sqlite3Vdb@41:
; Line 29625
	add	esp, 8
	ret	0
_sqlite3VdbeRealValue ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemIntegerify
_TEXT	SEGMENT
_sqlite3VdbeMemIntegerify PROC				; COMDAT
; _pMem$ = eax
; Line 29642
	push	esi
	mov	esi, eax
; Line 29643
	call	_sqlite3VdbeIntValue
; Line 29644
	push	esi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
; Line 29645
	mov	WORD PTR [esi+24], 4
; Line 29646
	xor	eax, eax
	pop	esi
; Line 29647
	ret	0
_sqlite3VdbeMemIntegerify ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemRealify
_TEXT	SEGMENT
_sqlite3VdbeMemRealify PROC				; COMDAT
; _pMem$ = eax
; Line 29653
	push	esi
	mov	esi, eax
; Line 29654
	call	_sqlite3VdbeRealValue
	fstp	QWORD PTR [esi+8]
; Line 29655
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
; Line 29656
	mov	WORD PTR [esi+24], 8
; Line 29657
	xor	eax, eax
	pop	esi
; Line 29658
	ret	0
_sqlite3VdbeMemRealify ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemNumerify
_TEXT	SEGMENT
tv131 = -8						; size = 8
_sqlite3VdbeMemNumerify PROC				; COMDAT
; _pMem$ = eax
; Line 29664
	sub	esp, 8
	push	esi
	mov	esi, eax
; Line 29669
	call	_sqlite3VdbeRealValue
; Line 29672
	fld	ST(0)
	call	__ftol2
	mov	DWORD PTR tv131[esp+12], eax
	mov	DWORD PTR tv131[esp+16], edx
	fild	QWORD PTR tv131[esp+12]
	fucomp	ST(1)
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@sqlite3Vdb@42
	fstp	ST(0)
; Line 29673
	call	_sqlite3VdbeIntValue
	push	esi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	call	_sqlite3VdbeMemRelease
; Line 29677
	add	esp, 4
	mov	WORD PTR [esi+24], 4
; Line 29679
	xor	eax, eax
	pop	esi
; Line 29680
	add	esp, 8
	ret	0
$LN2@sqlite3Vdb@42:
; Line 29677
	push	esi
	fstp	QWORD PTR [esi+8]
	mov	WORD PTR [esi+24], 8
	call	_sqlite3VdbeMemRelease
	add	esp, 4
; Line 29679
	xor	eax, eax
	pop	esi
; Line 29680
	add	esp, 8
	ret	0
_sqlite3VdbeMemNumerify ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ValueText
_TEXT	SEGMENT
_sqlite3ValueText PROC					; COMDAT
; _pVal$ = ecx
; _enc$ = eax
; Line 30129
	push	ebx
	push	esi
	mov	esi, ecx
; Line 30130
	test	esi, esi
	mov	bl, al
	jne	SHORT $LN8@sqlite3Val@4
$LN18@sqlite3Val@4:
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 30159
	ret	0
$LN8@sqlite3Val@4:
; Line 30133
	movzx	ecx, WORD PTR [esi+24]
	test	cl, 1
; Line 30134
	jne	SHORT $LN18@sqlite3Val@4
; Line 30137
	movzx	eax, cl
	shr	al, 3
	and	eax, 2
	or	eax, ecx
; Line 30138
	test	eax, 2048				; 00000800H
	mov	WORD PTR [esi+24], ax
	je	SHORT $LN11@sqlite3Val@4
	call	_sqlite3VdbeMemExpandBlob
$LN11@sqlite3Val@4:
; Line 30139
	test	BYTE PTR [esi+24], 2
	push	edi
; Line 30140
	movzx	edi, bl
	je	SHORT $LN6@sqlite3Val@4
	movzx	ecx, BYTE PTR [esi+27]
	mov	eax, edi
	and	eax, -9					; fffffff7H
	cmp	ecx, eax
	je	SHORT $LN13@sqlite3Val@4
	push	eax
	push	esi
	call	_sqlite3VdbeMemTranslate
	add	esp, 8
$LN13@sqlite3Val@4:
; Line 30141
	test	bl, 8
	je	SHORT $LN4@sqlite3Val@4
	mov	edx, DWORD PTR [esi+16]
	and	edx, 1
	cmp	dl, 1
	jne	SHORT $LN4@sqlite3Val@4
; Line 30143
	mov	eax, esi
	call	_sqlite3VdbeMemMakeWriteable
	test	eax, eax
; Line 30144
	jne	SHORT $LN2@sqlite3Val@4
$LN4@sqlite3Val@4:
; Line 30147
	mov	eax, esi
	call	_sqlite3VdbeMemNulTerminate
; Line 30148
	jmp	SHORT $LN3@sqlite3Val@4
$LN6@sqlite3Val@4:
; Line 30150
	mov	ebx, edi
	call	_sqlite3VdbeMemStringify
$LN3@sqlite3Val@4:
; Line 30154
	movzx	eax, BYTE PTR [esi+27]
	and	edi, -9					; fffffff7H
	cmp	eax, edi
	jne	SHORT $LN2@sqlite3Val@4
; Line 30155
	mov	eax, DWORD PTR [esi+16]
	pop	edi
	pop	esi
	pop	ebx
; Line 30159
	ret	0
$LN2@sqlite3Val@4:
	pop	edi
	pop	esi
; Line 30157
	xor	eax, eax
	pop	ebx
; Line 30159
	ret	0
_sqlite3ValueText ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ValueBytes
_TEXT	SEGMENT
_sqlite3ValueBytes PROC					; COMDAT
; _pVal$ = esi
; _enc$ = eax
; Line 30267
	test	BYTE PTR [esi+24], 16			; 00000010H
	jne	SHORT $LN3@sqlite3Val@5
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN3@sqlite3Val@5
; Line 30275
	ret	0
$LN3@sqlite3Val@5:
; Line 30268
	test	WORD PTR [esi+24], 2048			; 00000800H
; Line 30269
	mov	eax, DWORD PTR [esi+20]
	je	SHORT $LN5@sqlite3Val@5
	add	eax, DWORD PTR [esi]
$LN5@sqlite3Val@5:
; Line 30275
	ret	0
_sqlite3ValueBytes ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _resizeOpArray
_TEXT	SEGMENT
_resizeOpArray PROC					; COMDAT
; _p$ = ebx
; _N$ = eax
; Line 30386
	push	esi
	mov	esi, eax
; Line 30387
	xor	eax, eax
	cmp	DWORD PTR [ebx+76], -1108210269		; bdf20da3H
	sete	al
; Line 30388
	test	eax, eax
	jne	SHORT $LN3@resizeOpAr
	cmp	DWORD PTR [ebx+16], esi
	jge	SHORT $LN1@resizeOpAr
$LN3@resizeOpAr:
; Line 30390
	xor	ecx, ecx
	test	eax, eax
; Line 30392
	mov	eax, DWORD PTR [ebx+20]
	sete	cl
	push	ebp
	mov	ebp, DWORD PTR [ebx+16]
	push	edi
	imul	ecx, 100				; 00000064H
	add	esi, ecx
	lea	edi, DWORD PTR [esi+esi*4]
	add	edi, edi
	add	edi, edi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN14@resizeOpAr
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN21@resizeOpAr
$LN14@resizeOpAr:
	test	eax, eax
	jne	SHORT $LN13@resizeOpAr
	call	_sqlite3Malloc
	jmp	SHORT $LN12@resizeOpAr
$LN13@resizeOpAr:
	push	edi
	push	eax
	call	_realloc
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN8@resizeOpAr
	call	_sqlite3FailedMalloc
$LN8@resizeOpAr:
	mov	eax, ecx
$LN12@resizeOpAr:
; Line 30393
	test	eax, eax
	je	SHORT $LN21@resizeOpAr
; Line 30396
	cmp	esi, ebp
	mov	DWORD PTR [ebx+16], esi
	mov	DWORD PTR [ebx+20], eax
	jle	SHORT $LN21@resizeOpAr
; Line 30397
	sub	esi, ebp
	lea	edx, DWORD PTR [esi+esi*4]
	add	edx, edx
	add	edx, edx
	push	edx
	lea	ecx, DWORD PTR [ebp+ebp*4]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	0
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN21@resizeOpAr:
	pop	edi
	pop	ebp
$LN1@resizeOpAr:
	pop	esi
; Line 30401
	ret	0
_resizeOpArray ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeAddOp
_TEXT	SEGMENT
_op$ = 8						; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
_sqlite3VdbeAddOp PROC					; COMDAT
; _p$ = eax
; Line 30419
	push	ebx
	mov	ebx, eax
	push	esi
; Line 30423
	mov	esi, DWORD PTR [ebx+12]
; Line 30425
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN7@sqlite3Vdb@43
; Line 30426
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
; Line 30427
	xor	ecx, ecx
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ecx
	je	SHORT $LN1@sqlite3Vdb@43
	cmp	DWORD PTR _inMutex, ecx
	jle	SHORT $LN1@sqlite3Vdb@43
	pop	esi
; Line 30428
	xor	eax, eax
	pop	ebx
; Line 30443
	ret	0
$LN7@sqlite3Vdb@43:
; Line 30427
	xor	ecx, ecx
$LN1@sqlite3Vdb@43:
; Line 30432
	mov	edx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
; Line 30433
	mov	dl, BYTE PTR _op$[esp+4]
	mov	BYTE PTR [eax], dl
; Line 30434
	mov	edx, DWORD PTR _p1$[esp+4]
	mov	DWORD PTR [eax+4], edx
; Line 30435
	mov	edx, DWORD PTR _p2$[esp+4]
	mov	DWORD PTR [eax+8], edx
; Line 30436
	mov	DWORD PTR [eax+12], ecx
; Line 30437
	mov	DWORD PTR [eax+16], ecx
; Line 30442
	mov	eax, esi
	pop	esi
	mov	BYTE PTR [ebx+564], cl
	pop	ebx
; Line 30443
	ret	0
_sqlite3VdbeAddOp ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeOp3
_TEXT	SEGMENT
_zP3$ = 8						; size = 4
_p3type$ = 12						; size = 4
_sqlite3VdbeOp3 PROC					; COMDAT
; _p$ = edi
; _op$ = edx
; _p1$ = ecx
; _p2$ = eax
; Line 30448
	push	esi
; Line 30449
	push	eax
	push	ecx
	push	edx
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 30450
	mov	edx, DWORD PTR _p3type$[esp+12]
	mov	esi, eax
	mov	eax, DWORD PTR _zP3$[esp+12]
	push	eax
	mov	eax, esi
	mov	ecx, edi
	call	_sqlite3VdbeChangeP3
	add	esp, 16					; 00000010H
; Line 30451
	mov	eax, esi
	pop	esi
; Line 30452
	ret	0
_sqlite3VdbeOp3 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMakeLabel
_TEXT	SEGMENT
_sqlite3VdbeMakeLabel PROC				; COMDAT
; _p$ = eax
; Line 30468
	push	esi
	mov	esi, eax
	push	edi
; Line 30470
	mov	edi, DWORD PTR [esi+24]
	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR [esi+24], eax
; Line 30472
	mov	eax, DWORD PTR [esi+28]
	cmp	edi, eax
	jl	SHORT $LN2@sqlite3Vdb@44
; Line 30473
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [esi+28], eax
; Line 30475
	add	eax, eax
	push	ebx
	mov	ebx, DWORD PTR [esi+32]
	add	eax, eax
	call	_sqlite3ReallocOrFree
	mov	DWORD PTR [esi+32], eax
	pop	ebx
$LN2@sqlite3Vdb@44:
; Line 30477
	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	je	SHORT $LN1@sqlite3Vdb@44
; Line 30478
	mov	DWORD PTR [esi+edi*4], -1
$LN1@sqlite3Vdb@44:
; Line 30480
	or	eax, -1
	sub	eax, edi
	pop	edi
	pop	esi
; Line 30481
	ret	0
_sqlite3VdbeMakeLabel ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeAddOpList
_TEXT	SEGMENT
_addr$ = -4						; size = 4
_p$ = 8							; size = 4
_nOp$ = 12						; size = 4
_aOp$ = 16						; size = 4
_sqlite3VdbeAddOpList PROC				; COMDAT
; Line 30629
	push	ecx
	push	ebx
	mov	ebx, DWORD PTR _p$[esp+4]
; Line 30632
	mov	eax, DWORD PTR [ebx+12]
	push	esi
	mov	esi, DWORD PTR _nOp$[esp+8]
	add	eax, esi
	call	_resizeOpArray
; Line 30633
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN5@sqlite3Vdb@45
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN5@sqlite3Vdb@45
	pop	esi
; Line 30634
	xor	eax, eax
	pop	ebx
; Line 30657
	pop	ecx
	ret	0
$LN5@sqlite3Vdb@45:
; Line 30637
	test	esi, esi
	mov	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR _addr$[esp+12], eax
	jle	SHORT $LN6@sqlite3Vdb@45
; Line 30639
	mov	edx, DWORD PTR _aOp$[esp+8]
	push	ebp
	push	edi
	lea	edi, DWORD PTR [eax+eax*4]
	add	edi, edi
	add	edx, 4
	add	edi, edi
	mov	eax, esi
	npad	6
$LL3@sqlite3Vdb@45:
; Line 30642
	mov	ecx, DWORD PTR [ebx+20]
	movsx	ebp, WORD PTR [edx-2]
; Line 30643
	mov	bl, BYTE PTR [edx-4]
	add	ecx, edi
; Line 30645
	test	ebp, ebp
	mov	BYTE PTR [ecx], bl
	movsx	esi, BYTE PTR [edx-3]
	mov	DWORD PTR [ecx+4], esi
	jge	SHORT $LN8@sqlite3Vdb@45
	mov	esi, DWORD PTR _addr$[esp+20]
	sub	esi, ebp
	sub	esi, 1
	jmp	SHORT $LN9@sqlite3Vdb@45
$LN8@sqlite3Vdb@45:
	mov	esi, ebp
$LN9@sqlite3Vdb@45:
; Line 30640
	mov	ebx, DWORD PTR _p$[esp+16]
; Line 30645
	mov	DWORD PTR [ecx+8], esi
; Line 30646
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], esi
; Line 30647
	mov	esi, DWORD PTR [edx]
	neg	esi
	sbb	esi, esi
	and	esi, -2					; fffffffeH
	add	edi, 20					; 00000014H
	add	edx, 8
	sub	eax, 1
	mov	DWORD PTR [ecx+16], esi
	jne	SHORT $LL3@sqlite3Vdb@45
	mov	esi, DWORD PTR _nOp$[esp+16]
	mov	eax, DWORD PTR _addr$[esp+20]
; Line 30654
	add	DWORD PTR [ebx+12], esi
	pop	edi
	pop	ebp
$LN6@sqlite3Vdb@45:
	pop	esi
	pop	ebx
; Line 30657
	pop	ecx
	ret	0
_sqlite3VdbeAddOpList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMakeReady
_TEXT	SEGMENT
_nStack$89130 = -8					; size = 4
_nArg$89129 = -4					; size = 4
_nVar$ = 8						; size = 4
_nMem$ = 12						; size = 4
_nCursor$ = 16						; size = 4
_isExplain$ = 20					; size = 4
_sqlite3VdbeMakeReady PROC				; COMDAT
; _p$ = eax
; Line 31100
	sub	esp, 8
	push	ebp
	mov	ebp, DWORD PTR _nVar$[esp+8]
	push	esi
	push	edi
	mov	esi, eax
; Line 31126
	xor	edi, edi
	cmp	DWORD PTR [esi+36], edi
	mov	DWORD PTR [esi+76], -1108210269		; bdf20da3H
	jne	$LN4@sqlite3Vdb@46
	push	ebx
; Line 31129
	lea	eax, DWORD PTR _nStack$89130[esp+24]
	push	eax
	lea	ecx, DWORD PTR _nArg$89129[esp+28]
	push	ecx
	call	_resolveP2Values
; Line 31130
	mov	eax, DWORD PTR [esi+12]
	add	esp, 8
	mov	ebx, esi
	call	_resizeOpArray
; Line 31133
	cmp	DWORD PTR _isExplain$[esp+20], edi
	je	SHORT $LN19@sqlite3Vdb@46
; Line 31134
	mov	DWORD PTR _nStack$89130[esp+24], 10	; 0000000aH
$LN19@sqlite3Vdb@46:
; Line 31143
	mov	edx, DWORD PTR _nStack$89130[esp+24]
	mov	ebx, DWORD PTR _nMem$[esp+20]
	lea	edi, DWORD PTR [edx+ebp]
	add	edi, ebx
	shl	edi, 4
	add	edi, DWORD PTR _nArg$89129[esp+24]
	add	edi, ebp
	add	edi, DWORD PTR _nCursor$[esp+20]
	add	edi, edi
	add	edi, edi
	call	_sqlite3Malloc
	mov	DWORD PTR [esi+36], eax
; Line 31144
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN7@sqlite3Vdb@46
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN21@sqlite3Vdb@46
$LN7@sqlite3Vdb@46:
; Line 31145
	mov	ecx, DWORD PTR _nStack$89130[esp+24]
	shl	ecx, 6
	add	eax, ecx
; Line 31151
	mov	ecx, DWORD PTR _nArg$89129[esp+24]
	mov	DWORD PTR [esi+84], eax
	mov	DWORD PTR [esi+80], ebx
	shl	ebx, 6
	add	ebx, eax
	mov	eax, ebp
	shl	eax, 6
	add	eax, ebx
; Line 31154
	test	ebp, ebp
	mov	DWORD PTR [esi+44], eax
	lea	eax, DWORD PTR [eax+ecx*4]
	lea	edx, DWORD PTR [eax+ebp*4]
	mov	DWORD PTR [esi+68], eax
	mov	eax, DWORD PTR _nCursor$[esp+20]
	mov	DWORD PTR [esi+64], ebx
	mov	DWORD PTR [esi+60], ebp
	mov	DWORD PTR [esi+72], 0
	mov	DWORD PTR [esi+56], edx
	mov	DWORD PTR [esi+52], eax
	jle	SHORT $LN21@sqlite3Vdb@46
; Line 31145
	xor	eax, eax
	npad	7
$LL6@sqlite3Vdb@46:
; Line 31155
	mov	ecx, DWORD PTR [esi+64]
	mov	WORD PTR [eax+ecx+24], 1
	add	eax, 64					; 00000040H
	sub	ebp, 1
	jne	SHORT $LL6@sqlite3Vdb@46
$LN21@sqlite3Vdb@46:
; Line 31154
	xor	edi, edi
	pop	ebx
$LN4@sqlite3Vdb@46:
; Line 31159
	xor	eax, eax
	cmp	DWORD PTR [esi+80], edi
	jle	SHORT $LN1@sqlite3Vdb@46
	xor	ecx, ecx
	npad	2
$LL3@sqlite3Vdb@46:
; Line 31160
	mov	edx, DWORD PTR [esi+84]
	mov	WORD PTR [ecx+edx+24], 1
	add	eax, 1
	add	ecx, 64					; 00000040H
	cmp	eax, DWORD PTR [esi+80]
	jl	SHORT $LL3@sqlite3Vdb@46
$LN1@sqlite3Vdb@46:
; Line 31163
	mov	eax, DWORD PTR [esi+36]
; Line 31170
	mov	cl, BYTE PTR _isExplain$[esp+16]
	sub	eax, 64					; 00000040H
	or	BYTE PTR [esi+561], cl
	mov	DWORD PTR [esi+124], edi
	mov	DWORD PTR [esi+128], edi
	mov	DWORD PTR [esi+540], edi
	mov	DWORD PTR [esi+552], edi
; Line 31172
	mov	DWORD PTR [esi+568], edi
	pop	edi
	mov	DWORD PTR [esi+40], eax
	mov	DWORD PTR [esi+120], -1
	mov	DWORD PTR [esi+132], 2
	mov	DWORD PTR [esi+76], -1108210269		; bdf20da3H
; Line 31173
	mov	DWORD PTR [esi+92], 1
; Line 31174
	mov	BYTE PTR [esi+565], 255			; 000000ffH
	pop	esi
	pop	ebp
; Line 31184
	add	esp, 8
	ret	0
_sqlite3VdbeMakeReady ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_bytes
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_bytes PROC				; COMDAT
; Line 32528
	push	esi
; Line 32529
	mov	esi, DWORD PTR _pVal$[esp]
	test	BYTE PTR [esi+24], 16			; 00000010H
	jne	SHORT $LN5@sqlite3_va
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN5@sqlite3_va
	pop	esi
; Line 32530
	ret	0
; Line 32529
$LN5@sqlite3_va:
	test	WORD PTR [esi+24], 2048			; 00000800H
	mov	eax, DWORD PTR [esi+20]
	je	SHORT $LN7@sqlite3_va
	add	eax, DWORD PTR [esi]
$LN7@sqlite3_va:
	pop	esi
; Line 32530
	ret	0
_sqlite3_value_bytes ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_bytes16
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_bytes16 PROC				; COMDAT
; Line 32531
	push	esi
; Line 32532
	mov	esi, DWORD PTR _pVal$[esp]
	test	BYTE PTR [esi+24], 16			; 00000010H
	jne	SHORT $LN5@sqlite3_va@2
	mov	al, 2
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN5@sqlite3_va@2
	pop	esi
; Line 32533
	ret	0
; Line 32532
$LN5@sqlite3_va@2:
	test	WORD PTR [esi+24], 2048			; 00000800H
	mov	eax, DWORD PTR [esi+20]
	je	SHORT $LN7@sqlite3_va@2
	add	eax, DWORD PTR [esi]
$LN7@sqlite3_va@2:
	pop	esi
; Line 32533
	ret	0
_sqlite3_value_bytes16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_double
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_double PROC				; COMDAT
; Line 32534
	push	esi
; Line 32535
	mov	esi, DWORD PTR _pVal$[esp]
	call	_sqlite3VdbeRealValue
	pop	esi
; Line 32536
	ret	0
_sqlite3_value_double ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_int
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_int PROC					; COMDAT
; Line 32537
	push	esi
; Line 32538
	mov	esi, DWORD PTR _pVal$[esp]
	call	_sqlite3VdbeIntValue
	pop	esi
; Line 32539
	ret	0
_sqlite3_value_int ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_int64
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_int64 PROC				; COMDAT
; Line 32540
	push	esi
; Line 32541
	mov	esi, DWORD PTR _pVal$[esp]
	call	_sqlite3VdbeIntValue
	pop	esi
; Line 32542
	ret	0
_sqlite3_value_int64 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_text
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_text PROC				; COMDAT
; Line 32544
	mov	eax, 1
	mov	ecx, DWORD PTR _pVal$[esp-4]
	jmp	_sqlite3ValueText
_sqlite3_value_text ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_text16
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_text16 PROC				; COMDAT
; Line 32548
	mov	eax, 2
	mov	ecx, DWORD PTR _pVal$[esp-4]
	jmp	_sqlite3ValueText
_sqlite3_value_text16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_text16be
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_text16be PROC				; COMDAT
; Line 32551
	mov	eax, 3
	mov	ecx, DWORD PTR _pVal$[esp-4]
	jmp	_sqlite3ValueText
_sqlite3_value_text16be ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_text16le
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_text16le PROC				; COMDAT
; Line 32554
	mov	eax, 2
	mov	ecx, DWORD PTR _pVal$[esp-4]
	jmp	_sqlite3ValueText
_sqlite3_value_text16le ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@BOPMNMAO@unable?5to?5use?5function?5?$CFs?5in?5the@ ; `string'
;	COMDAT ??_C@_0DD@BOPMNMAO@unable?5to?5use?5function?5?$CFs?5in?5the@
CONST	SEGMENT
??_C@_0DD@BOPMNMAO@unable?5to?5use?5function?5?$CFs?5in?5the@ DB 'unable '
	DB	'to use function %s in the requested context', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3InvalidFunction
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_sqlite3InvalidFunction PROC				; COMDAT
; Line 32811
	push	esi
; Line 32812
	mov	esi, DWORD PTR _context$[esp]
	mov	eax, DWORD PTR [esi]
	push	edi
	add	eax, 28					; 0000001cH
; Line 32815
	push	eax
	push	OFFSET ??_C@_0DD@BOPMNMAO@unable?5to?5use?5function?5?$CFs?5in?5the@
	call	_sqlite3MPrintf
; Line 32816
	mov	BYTE PTR [esi+76], 1
	add	esi, 8
	push	esi
	mov	edi, eax
	call	_sqlite3VdbeMemRelease
	add	esp, 12					; 0000000cH
	test	edi, edi
	jne	SHORT $LN18@sqlite3Inv@2
	pop	edi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	pop	esi
; Line 32818
	ret	0
; Line 32816
$LN18@sqlite3Inv@2:
	mov	eax, edi
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 258			; 00000102H
	lea	edx, DWORD PTR [eax+1]
$LL26@sqlite3Inv@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL26@sqlite3Inv@2
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
; Line 32817
	push	edi
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
; Line 32818
	ret	0
_sqlite3InvalidFunction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_set_auxdata
_TEXT	SEGMENT
_pCtx$ = 8						; size = 4
_iArg$ = 12						; size = 4
_pAux$ = 16						; size = 4
_xDelete$ = 20						; size = 4
_sqlite3_set_auxdata PROC				; COMDAT
; Line 32869
	push	ebx
; Line 32872
	mov	ebx, DWORD PTR _iArg$[esp]
	test	ebx, ebx
	jl	$LN6@sqlite3_se@2
	push	ebp
; Line 32874
	mov	ebp, DWORD PTR _pCtx$[esp+4]
	push	esi
	mov	esi, DWORD PTR [ebp+4]
; Line 32875
	test	esi, esi
	push	edi
	je	SHORT $LN3@sqlite3_se@2
	cmp	DWORD PTR [esi+4], ebx
	jg	SHORT $LN4@sqlite3_se@2
$LN3@sqlite3_se@2:
; Line 32877
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	lea	edi, DWORD PTR [ebx*8+16]
	je	SHORT $LN15@sqlite3_se@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN22@sqlite3_se@2
$LN15@sqlite3_se@2:
	test	esi, esi
	jne	SHORT $LN14@sqlite3_se@2
	call	_sqlite3Malloc
	mov	esi, eax
	jmp	SHORT $LN9@sqlite3_se@2
$LN14@sqlite3_se@2:
	push	edi
	push	esi
	call	_realloc
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	jne	SHORT $LN26@sqlite3_se@2
	call	_sqlite3FailedMalloc
$LN9@sqlite3_se@2:
; Line 32878
	test	esi, esi
	je	SHORT $LN22@sqlite3_se@2
$LN26@sqlite3_se@2:
; Line 32879
	mov	DWORD PTR [ebp+4], esi
; Line 32881
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, ebx
	sub	ecx, eax
	lea	edx, DWORD PTR [ecx*8+8]
	push	edx
	lea	eax, DWORD PTR [esi+eax*8+8]
	push	0
	push	eax
	call	_memset
; Line 32882
	lea	ecx, DWORD PTR [ebx+1]
	mov	DWORD PTR [esi+4], ecx
; Line 32883
	mov	edx, DWORD PTR [ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi], edx
$LN4@sqlite3_se@2:
; Line 32887
	mov	ecx, DWORD PTR [esi+ebx*8+8]
	test	ecx, ecx
	je	SHORT $LN1@sqlite3_se@2
	mov	eax, DWORD PTR [esi+ebx*8+12]
	test	eax, eax
	je	SHORT $LN1@sqlite3_se@2
; Line 32888
	push	ecx
	call	eax
	add	esp, 4
$LN1@sqlite3_se@2:
; Line 32890
	mov	eax, DWORD PTR _pAux$[esp+12]
; Line 32891
	mov	ecx, DWORD PTR _xDelete$[esp+12]
	mov	DWORD PTR [esi+ebx*8+8], eax
	mov	DWORD PTR [esi+ebx*8+12], ecx
$LN22@sqlite3_se@2:
	pop	edi
	pop	esi
	pop	ebp
$LN6@sqlite3_se@2:
	pop	ebx
; Line 32892
	ret	0
_sqlite3_set_auxdata ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _columnMem
_TEXT	SEGMENT
_columnMem PROC						; COMDAT
; _pStmt$ = ecx
; _i$ = eax
; Line 32935
	test	ecx, ecx
	je	SHORT $LN5@columnMem
	cmp	BYTE PTR [ecx+560], 0
	je	SHORT $LN5@columnMem
	mov	edx, DWORD PTR [ecx+544]
	jmp	SHORT $LN7@columnMem
$LN5@columnMem:
	xor	edx, edx
$LN7@columnMem:
; Line 32936
	cmp	eax, edx
	jge	SHORT $LN1@columnMem
	test	eax, eax
	jl	SHORT $LN1@columnMem
; Line 32941
	sub	eax, edx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [ecx+40]
; Line 32942
	ret	0
$LN1@columnMem:
; Line 32938
	mov	eax, DWORD PTR [ecx]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
; Line 32939
	mov	eax, OFFSET ?nullMem@?2??columnMem@@9@9
; Line 32942
	ret	0
_columnMem ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_value
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_value PROC				; COMDAT
; Line 33019
	mov	ecx, DWORD PTR _pStmt$[esp-4]
	test	ecx, ecx
	je	SHORT $LN7@sqlite3_co@5
	cmp	BYTE PTR [ecx+560], 0
	je	SHORT $LN7@sqlite3_co@5
	mov	edx, DWORD PTR [ecx+544]
	jmp	SHORT $LN9@sqlite3_co@5
$LN7@sqlite3_co@5:
	xor	edx, edx
$LN9@sqlite3_co@5:
	mov	eax, DWORD PTR _i$[esp-4]
	cmp	eax, edx
	jge	SHORT $LN3@sqlite3_co@5
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@5
	sub	eax, edx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [ecx+40]
; Line 33020
	ret	0
; Line 33019
$LN3@sqlite3_co@5:
	mov	eax, DWORD PTR [ecx]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	eax, OFFSET ?nullMem@?2??columnMem@@9@9
; Line 33020
	ret	0
_sqlite3_column_value ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_type
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_type PROC				; COMDAT
; Line 33029
	mov	ecx, DWORD PTR _pStmt$[esp-4]
	test	ecx, ecx
	je	SHORT $LN7@sqlite3_co@6
	cmp	BYTE PTR [ecx+560], 0
	je	SHORT $LN7@sqlite3_co@6
	mov	edx, DWORD PTR [ecx+544]
	jmp	SHORT $LN9@sqlite3_co@6
$LN7@sqlite3_co@6:
	xor	edx, edx
$LN9@sqlite3_co@6:
	mov	eax, DWORD PTR _i$[esp-4]
	cmp	eax, edx
	jge	SHORT $LN3@sqlite3_co@6
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@6
	sub	eax, edx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR [eax+26]
; Line 33030
	ret	0
; Line 33029
$LN3@sqlite3_co@6:
	mov	eax, DWORD PTR [ecx]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	mov	eax, OFFSET ?nullMem@?2??columnMem@@9@9
	movzx	eax, BYTE PTR [eax+26]
	add	esp, 8
; Line 33030
	ret	0
_sqlite3_column_type ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _vdbeUnbind
_TEXT	SEGMENT
_vdbeUnbind PROC					; COMDAT
; _p$ = esi
; _i$ = eax
; Line 33173
	test	esi, esi
	je	SHORT $LN3@vdbeUnbind
	cmp	DWORD PTR [esi+76], -1108210269		; bdf20da3H
	jne	SHORT $LN4@vdbeUnbind
	cmp	DWORD PTR [esi+120], 0
	jge	SHORT $LN4@vdbeUnbind
; Line 33177
	cmp	eax, 1
	jl	SHORT $LN1@vdbeUnbind
	cmp	eax, DWORD PTR [esi+60]
	jg	SHORT $LN1@vdbeUnbind
; Line 33182
	mov	ecx, DWORD PTR [esi+64]
	shl	eax, 6
	push	edi
	lea	edi, DWORD PTR [ecx+eax-64]
; Line 33183
	push	edi
	call	_sqlite3VdbeMemRelease
; Line 33184
	mov	WORD PTR [edi+24], 1
; Line 33185
	mov	eax, DWORD PTR [esi]
	push	0
	push	0
	call	_sqlite3Error
	add	esp, 12					; 0000000cH
; Line 33186
	xor	eax, eax
	pop	edi
; Line 33187
	ret	0
$LN1@vdbeUnbind:
; Line 33178
	mov	eax, DWORD PTR [esi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
; Line 33179
	mov	eax, 25					; 00000019H
; Line 33187
	ret	0
$LN4@vdbeUnbind:
; Line 33174
	mov	eax, DWORD PTR [esi]
	push	0
	push	21					; 00000015H
	call	_sqlite3Error
	add	esp, 8
$LN3@vdbeUnbind:
; Line 33175
	mov	eax, 21					; 00000015H
; Line 33187
	ret	0
_vdbeUnbind ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_double
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_rValue$ = 16						; size = 8
_sqlite3_bind_double PROC				; COMDAT
; Line 33231
	push	ebx
	push	esi
; Line 33234
	mov	esi, DWORD PTR _pStmt$[esp+4]
	push	edi
	mov	edi, DWORD PTR _i$[esp+8]
	mov	eax, edi
	call	_vdbeUnbind
	mov	ebx, eax
; Line 33235
	test	ebx, ebx
	jne	SHORT $LN4@sqlite3_bi@4
; Line 33236
	fld	QWORD PTR _rValue$[esp+8]
	mov	eax, DWORD PTR [esi+64]
	fld	ST(0)
	shl	edi, 6
	fucompp
	lea	esi, DWORD PTR [eax+edi-64]
	push	esi
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@sqlite3_bi@4
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	pop	edi
	mov	DWORD PTR [esi+20], ebx
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	pop	esi
; Line 33238
	mov	eax, ebx
	pop	ebx
; Line 33239
	ret	0
; Line 33236
$LN5@sqlite3_bi@4:
	call	_sqlite3VdbeMemRelease
	fld	QWORD PTR _rValue$[esp+12]
	fstp	QWORD PTR [esi+8]
	mov	WORD PTR [esi+24], 8
	mov	BYTE PTR [esi+26], 2
; Line 33238
	mov	eax, ebx
	add	esp, 4
$LN4@sqlite3_bi@4:
	pop	edi
	pop	esi
	pop	ebx
; Line 33239
	ret	0
_sqlite3_bind_double ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_int64
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_iValue$ = 16						; size = 8
_sqlite3_bind_int64 PROC				; COMDAT
; Line 33243
	push	ebx
	push	esi
; Line 33246
	mov	esi, DWORD PTR _pStmt$[esp+4]
	push	edi
	mov	edi, DWORD PTR _i$[esp+8]
	mov	eax, edi
	call	_vdbeUnbind
	mov	ebx, eax
; Line 33247
	test	ebx, ebx
	jne	SHORT $LN4@sqlite3_bi@5
; Line 33248
	mov	eax, DWORD PTR [esi+64]
	shl	edi, 6
	lea	esi, DWORD PTR [eax+edi-64]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	ecx, DWORD PTR _iValue$[esp+12]
	mov	edx, DWORD PTR _iValue$[esp+16]
	add	esp, 4
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
; Line 33250
	mov	eax, ebx
$LN4@sqlite3_bi@5:
	pop	edi
	pop	esi
	pop	ebx
; Line 33251
	ret	0
_sqlite3_bind_int64 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_null
_TEXT	SEGMENT
_p$ = 8							; size = 4
_i$ = 12						; size = 4
_sqlite3_bind_null PROC					; COMDAT
; Line 33253
	mov	eax, DWORD PTR _i$[esp-4]
	push	esi
	mov	esi, DWORD PTR _p$[esp]
	call	_vdbeUnbind
	pop	esi
; Line 33254
	ret	0
_sqlite3_bind_null ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_value
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_pValue$ = 16						; size = 4
_sqlite3_bind_value PROC				; COMDAT
; Line 33275
	push	ebp
	push	esi
; Line 33278
	mov	esi, DWORD PTR _pStmt$[esp+4]
	push	edi
	mov	edi, DWORD PTR _i$[esp+8]
	mov	eax, edi
	call	_vdbeUnbind
	mov	ebp, eax
; Line 33279
	test	ebp, ebp
	jne	SHORT $LN1@sqlite3_bi@6
; Line 33280
	mov	eax, DWORD PTR _pValue$[esp+8]
	mov	ecx, DWORD PTR [esi+64]
	push	ebx
	shl	edi, 6
	push	eax
	lea	ebx, DWORD PTR [ecx+edi-64]
	call	_sqlite3VdbeMemCopy
	add	esp, 4
; Line 33282
	mov	eax, ebp
	pop	ebx
$LN1@sqlite3_bi@6:
	pop	edi
	pop	esi
	pop	ebp
; Line 33283
	ret	0
_sqlite3_bind_value ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_bind_zeroblob
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_bind_zeroblob
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_n$ = 16						; size = 4
_sqlite3_bind_zeroblob PROC				; COMDAT
; Line 33284
	push	ebp
	push	esi
; Line 33287
	mov	esi, DWORD PTR _pStmt$[esp+4]
	push	edi
	mov	edi, DWORD PTR _i$[esp+8]
	mov	eax, edi
	call	_vdbeUnbind
	mov	ebp, eax
; Line 33288
	test	ebp, ebp
	jne	SHORT $LN5@sqlite3_bi@7
; Line 33289
	mov	eax, DWORD PTR [esi+64]
	shl	edi, 6
	push	ebx
	mov	ebx, DWORD PTR _n$[esp+12]
	lea	esi, DWORD PTR [eax+edi-64]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	ebx, ebx
	mov	WORD PTR [esi+24], 2576			; 00000a10H
	mov	BYTE PTR [esi+26], 4
	mov	DWORD PTR [esi+20], ebp
	jge	SHORT $LN4@sqlite3_bi@7
	xor	ebx, ebx
$LN4@sqlite3_bi@7:
	mov	eax, ebx
	cdq
	lea	ecx, DWORD PTR [esi+32]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+16], ecx
	mov	BYTE PTR [esi+27], 1
; Line 33291
	mov	eax, ebp
	pop	ebx
$LN5@sqlite3_bi@7:
	pop	edi
	pop	esi
	pop	ebp
; Line 33292
	ret	0
_sqlite3_bind_zeroblob ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _applyNumericAffinity
_TEXT	SEGMENT
_value$90247 = -8					; size = 8
_realnum$90245 = -8					; size = 4
_applyNumericAffinity PROC				; COMDAT
; _pRec$ = eax
; Line 33613
	sub	esp, 8
	push	esi
	mov	esi, eax
; Line 33614
	test	BYTE PTR [esi+24], 12			; 0000000cH
	jne	$LN11@applyNumer
; Line 33616
	call	_sqlite3VdbeMemNulTerminate
; Line 33618
	test	BYTE PTR [esi+24], 2
	je	$LN11@applyNumer
	mov	al, BYTE PTR [esi+27]
	mov	ecx, DWORD PTR [esi+16]
	push	ebx
	lea	ebx, DWORD PTR _realnum$90245[esp+16]
	call	_sqlite3IsNumber
	test	eax, eax
	pop	ebx
	je	SHORT $LN11@applyNumer
; Line 33620
	test	BYTE PTR [esi+24], 2
	je	SHORT $LN7@applyNumer
	cmp	BYTE PTR [esi+27], 1
	je	SHORT $LN7@applyNumer
	push	1
	push	esi
	call	_sqlite3VdbeMemTranslate
	add	esp, 8
$LN7@applyNumer:
; Line 33621
	cmp	DWORD PTR _realnum$90245[esp+12], 0
	jne	SHORT $LN2@applyNumer
	mov	ecx, DWORD PTR [esi+16]
	lea	eax, DWORD PTR _value$90247[esp+12]
	push	eax
	push	ecx
	call	_sqlite3Atoi64
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@applyNumer
; Line 33622
	push	esi
	call	_sqlite3VdbeMemRelease
; Line 33623
	mov	edx, DWORD PTR _value$90247[esp+16]
	mov	eax, DWORD PTR _value$90247[esp+20]
; Line 33626
	add	esp, 4
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], eax
	mov	WORD PTR [esi+24], 4
	pop	esi
; Line 33630
	add	esp, 8
	ret	0
$LN2@applyNumer:
; Line 33626
	call	_sqlite3VdbeRealValue
	fstp	QWORD PTR [esi+8]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	WORD PTR [esi+24], 8
	add	esp, 4
$LN11@applyNumer:
	pop	esi
; Line 33630
	add	esp, 8
	ret	0
_applyNumericAffinity ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _applyAffinity
_TEXT	SEGMENT
_applyAffinity PROC					; COMDAT
; _pRec$ = ecx
; _affinity$ = eax
; _enc$ = edx
; Line 33651
	cmp	al, 97					; 00000061H
	push	ebx
	push	esi
	mov	esi, ecx
	jne	SHORT $LN5@applyAffin
; Line 33656
	movzx	eax, WORD PTR [esi+24]
	test	al, 2
	jne	SHORT $LN4@applyAffin
	test	al, 12					; 0000000cH
	je	SHORT $LN4@applyAffin
; Line 33657
	movzx	ebx, edx
	call	_sqlite3VdbeMemStringify
$LN4@applyAffin:
; Line 33659
	and	WORD PTR [esi+24], 65523		; 0000fff3H
	pop	esi
	pop	ebx
; Line 33668
	ret	0
$LN5@applyAffin:
; Line 33660
	cmp	al, 98					; 00000062H
	je	SHORT $LN8@applyAffin
; Line 33663
	mov	eax, esi
	call	_applyNumericAffinity
; Line 33664
	movzx	ebx, WORD PTR [esi+24]
	test	bl, 8
	je	SHORT $LN8@applyAffin
; Line 33665
	fld	QWORD PTR [esi+8]
	call	__ftol2
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	fild	QWORD PTR [esi]
	fcomp	QWORD PTR [esi+8]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@applyAffin
	or	ebx, 4
	mov	WORD PTR [esi+24], bx
$LN8@applyAffin:
	pop	esi
	pop	ebx
; Line 33668
	ret	0
_applyAffinity ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_numeric_type
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_numeric_type PROC			; COMDAT
; Line 33678
	push	esi
; Line 33680
	mov	esi, DWORD PTR _pVal$[esp]
	mov	eax, esi
	call	_applyNumericAffinity
; Line 33681
	movzx	eax, WORD PTR [esi+24]
	test	al, 1
	je	SHORT $LN10@sqlite3_va@3
	mov	BYTE PTR [esi+26], 5
; Line 33682
	movzx	eax, BYTE PTR [esi+26]
	pop	esi
; Line 33683
	ret	0
; Line 33681
$LN10@sqlite3_va@3:
	test	al, 4
	je	SHORT $LN8@sqlite3_va@3
	mov	BYTE PTR [esi+26], 1
; Line 33682
	movzx	eax, BYTE PTR [esi+26]
	pop	esi
; Line 33683
	ret	0
; Line 33681
$LN8@sqlite3_va@3:
	test	al, 8
	je	SHORT $LN6@sqlite3_va@3
	mov	BYTE PTR [esi+26], 2
; Line 33682
	movzx	eax, BYTE PTR [esi+26]
	pop	esi
; Line 33683
	ret	0
; Line 33681
$LN6@sqlite3_va@3:
	test	al, 2
	je	SHORT $LN4@sqlite3_va@3
	mov	BYTE PTR [esi+26], 3
; Line 33682
	movzx	eax, BYTE PTR [esi+26]
	pop	esi
; Line 33683
	ret	0
; Line 33681
$LN4@sqlite3_va@3:
	mov	BYTE PTR [esi+26], 4
; Line 33682
	movzx	eax, BYTE PTR [esi+26]
	pop	esi
; Line 33683
	ret	0
_sqlite3_value_numeric_type ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ValueApplyAffinity
_TEXT	SEGMENT
_sqlite3ValueApplyAffinity PROC				; COMDAT
; _pVal$ = ecx
; _affinity$ = eax
; _enc$ = edx
; Line 33690
	jmp	_applyAffinity
_sqlite3ValueApplyAffinity ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Expr
_TEXT	SEGMENT
_op$ = 8						; size = 4
_pLeft$ = 12						; size = 4
_sqlite3Expr PROC					; COMDAT
; _pRight$ = edi
; _pToken$ = eax
; Line 39104
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pLeft$[esp+4]
	push	esi
	mov	esi, eax
	je	SHORT $LN17@sqlite3Exp@12
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN35@sqlite3Exp@12
$LN17@sqlite3Exp@12:
	push	72					; 00000048H
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN36@sqlite3Exp@12
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN38@sqlite3Exp@12
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN10@sqlite3Exp@12
$LN38@sqlite3Exp@12:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN10@sqlite3Exp@12
$LN36@sqlite3Exp@12:
	push	72					; 00000048H
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN10@sqlite3Exp@12:
; Line 39105
	test	ebx, ebx
	jne	SHORT $LN7@sqlite3Exp@12
$LN35@sqlite3Exp@12:
; Line 39110
	push	ebp
	call	_sqlite3ExprDelete
; Line 39111
	push	edi
	call	_sqlite3ExprDelete
	add	esp, 8
	pop	esi
	pop	ebp
; Line 39112
	xor	eax, eax
	pop	ebx
; Line 39137
	ret	0
$LN7@sqlite3Exp@12:
; Line 39118
	test	esi, esi
	mov	al, BYTE PTR _op$[esp+8]
	mov	BYTE PTR [ebx], al
	mov	DWORD PTR [ebx+8], ebp
	mov	DWORD PTR [ebx+12], edi
	mov	DWORD PTR [ebx+48], -1
	je	SHORT $LN6@sqlite3Exp@12
; Line 39120
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [ebx+20], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [ebx+24], edx
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebx+28], eax
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [ebx+32], ecx
; Line 39135
	call	_sqlite3ExprSetHeight
	pop	esi
	pop	ebp
; Line 39136
	mov	eax, ebx
	pop	ebx
; Line 39137
	ret	0
$LN6@sqlite3Exp@12:
; Line 39121
	test	ebp, ebp
	je	SHORT $LN1@sqlite3Exp@12
; Line 39122
	test	edi, edi
	je	SHORT $LN37@sqlite3Exp@12
; Line 39123
	lea	ecx, DWORD PTR [edi+28]
	lea	esi, DWORD PTR [ebp+28]
	mov	eax, ebx
	call	_sqlite3ExprSpan
; Line 39124
	mov	eax, 256				; 00000100H
	test	WORD PTR [edi+2], ax
	je	SHORT $LN2@sqlite3Exp@12
; Line 39125
	or	WORD PTR [ebx+2], ax
; Line 39126
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx+4], edx
	jmp	SHORT $LN2@sqlite3Exp@12
$LN37@sqlite3Exp@12:
	mov	eax, 256				; 00000100H
$LN2@sqlite3Exp@12:
; Line 39129
	test	WORD PTR [ebp+2], ax
	je	SHORT $LN1@sqlite3Exp@12
; Line 39130
	or	WORD PTR [ebx+2], ax
; Line 39131
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [ebx+4], eax
$LN1@sqlite3Exp@12:
; Line 39135
	call	_sqlite3ExprSetHeight
	pop	esi
	pop	ebp
; Line 39136
	mov	eax, ebx
	pop	ebx
; Line 39137
	ret	0
_sqlite3Expr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprOrFree
_TEXT	SEGMENT
_pToken$ = 8						; size = 4
_sqlite3ExprOrFree PROC					; COMDAT
; _op$ = eax
; _pLeft$ = ebx
; _pRight$ = ecx
; Line 39143
	push	esi
	push	edi
; Line 39144
	push	ebx
	push	eax
	mov	eax, DWORD PTR _pToken$[esp+12]
	mov	edi, ecx
	call	_sqlite3Expr
	mov	esi, eax
	add	esp, 8
; Line 39145
	test	esi, esi
	jne	SHORT $LN1@sqlite3Exp@13
; Line 39146
	push	ebx
	call	_sqlite3ExprDelete
; Line 39147
	push	edi
	call	_sqlite3ExprDelete
	add	esp, 8
; Line 39149
	mov	eax, esi
$LN1@sqlite3Exp@13:
	pop	edi
	pop	esi
; Line 39150
	ret	0
_sqlite3ExprOrFree ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@CBJKLAIG@near?5?$CC?$CFT?$CC?3?5syntax?5error?$AA@ ; `string'
;	COMDAT ??_C@_0BI@CBJKLAIG@near?5?$CC?$CFT?$CC?3?5syntax?5error?$AA@
CONST	SEGMENT
??_C@_0BI@CBJKLAIG@near?5?$CC?$CFT?$CC?3?5syntax?5error?$AA@ DB 'near "%T'
	DB	'": syntax error', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3RegisterExpr
_TEXT	SEGMENT
_sqlite3RegisterExpr PROC				; COMDAT
; _pParse$ = ecx
; _pToken$ = eax
; Line 39163
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
; Line 39167
	cmp	BYTE PTR [esi+19], 0
	mov	ebp, DWORD PTR [esi+12]
	push	edi
	mov	ebx, eax
	jne	$LN3@sqlite3Reg
; Line 39168
	push	ebx
	push	OFFSET ??_C@_0BI@CBJKLAIG@near?5?$CC?$CFT?$CC?3?5syntax?5error?$AA@
	mov	edi, esi
	call	_sqlite3ErrorMsg
; Line 39169
	mov	edi, DWORD PTR _inMutex
	xor	ebx, ebx
	add	esp, 8
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN22@sqlite3Reg
	cmp	edi, ebx
	jg	SHORT $LN40@sqlite3Reg
$LN22@sqlite3Reg:
	push	72					; 00000048H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	cmp	esi, ebx
	jne	SHORT $LN41@sqlite3Reg
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN32@sqlite3Reg
	cmp	edi, ebx
	jg	SHORT $LN15@sqlite3Reg
$LN32@sqlite3Reg:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN15@sqlite3Reg
$LN41@sqlite3Reg:
	push	72					; 00000048H
	push	ebx
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN15@sqlite3Reg:
	cmp	esi, ebx
	jne	SHORT $LN12@sqlite3Reg
$LN40@sqlite3Reg:
	push	ebx
	call	_sqlite3ExprDelete
	push	ebx
	call	_sqlite3ExprDelete
	add	esp, 8
	xor	esi, esi
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 39181
	ret	0
; Line 39169
$LN12@sqlite3Reg:
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	ebx, esi
	mov	BYTE PTR [esi], 92			; 0000005cH
	mov	DWORD PTR [esi+48], -1
	call	_sqlite3ExprSetHeight
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 39181
	ret	0
$LN3@sqlite3Reg:
; Line 39171
	test	ebp, ebp
	jne	SHORT $LN2@sqlite3Reg
$LN42@sqlite3Reg:
	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 39181
	ret	0
$LN2@sqlite3Reg:
; Line 39172
	push	0
	push	127					; 0000007fH
	xor	edi, edi
	call	_sqlite3Expr
	mov	edi, eax
	add	esp, 8
; Line 39173
	test	edi, edi
; Line 39174
	je	SHORT $LN42@sqlite3Reg
; Line 39176
	mov	eax, DWORD PTR [ebx]
	add	eax, 1
	push	eax
	call	_atoi
; Line 39177
	mov	ecx, DWORD PTR [esi+32]
; Line 39178
	push	0
	push	eax
	mov	DWORD PTR [edi+36], ecx
	add	DWORD PTR [esi+32], 1
	push	94					; 0000005eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 39179
	mov	edx, DWORD PTR [edi+36]
	push	1
	push	edx
	push	124					; 0000007cH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 28					; 0000001cH
; Line 39180
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 39181
	ret	0
_sqlite3RegisterExpr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprAnd
_TEXT	SEGMENT
_sqlite3ExprAnd PROC					; COMDAT
; _pLeft$ = eax
; _pRight$ = ecx
; Line 39188
	test	eax, eax
	push	edi
	mov	edi, ecx
	jne	SHORT $LN4@sqlite3Exp@14
; Line 39189
	mov	eax, edi
	pop	edi
; Line 39195
	ret	0
$LN4@sqlite3Exp@14:
; Line 39190
	test	edi, edi
; Line 39191
	je	SHORT $LN1@sqlite3Exp@14
; Line 39193
	push	eax
	push	61					; 0000003dH
	xor	eax, eax
	call	_sqlite3Expr
	add	esp, 8
$LN1@sqlite3Exp@14:
	pop	edi
; Line 39195
	ret	0
_sqlite3ExprAnd ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@KLMBLGJH@too?5many?5SQL?5variables?$AA@ ; `string'
PUBLIC	??_C@_0CL@MAPAMFMM@variable?5number?5must?5be?5between?5@ ; `string'
;	COMDAT ??_C@_0BH@KLMBLGJH@too?5many?5SQL?5variables?$AA@
CONST	SEGMENT
??_C@_0BH@KLMBLGJH@too?5many?5SQL?5variables?$AA@ DB 'too many SQL variab'
	DB	'les', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MAPAMFMM@variable?5number?5must?5be?5between?5@
CONST	SEGMENT
??_C@_0CL@MAPAMFMM@variable?5number?5must?5be?5between?5@ DB 'variable nu'
	DB	'mber must be between ?1 and ?%d', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3ExprAssignVarNumber
_TEXT	SEGMENT
tv325 = -16						; size = 4
tv489 = -12						; size = 4
_i$91899 = -8						; size = 4
tv334 = -4						; size = 4
_pExpr$ = 8						; size = 4
_sqlite3ExprAssignVarNumber PROC			; COMDAT
; _pParse$ = eax
; Line 39253
	sub	esp, 16					; 00000010H
	push	ebp
	mov	ebp, DWORD PTR _pExpr$[esp+16]
; Line 39255
	test	ebp, ebp
	push	edi
	mov	edi, eax
	je	$LN1@sqlite3Exp@15
	push	esi
; Line 39260
	mov	esi, DWORD PTR [ebp+24]
	shr	esi, 1
	cmp	esi, 1
	mov	DWORD PTR tv325[esp+28], esi
	jne	SHORT $LN16@sqlite3Exp@15
; Line 39262
	add	DWORD PTR [edi+112], esi
	mov	eax, DWORD PTR [edi+112]
	mov	DWORD PTR [ebp+36], eax
	jmp	$LN40@sqlite3Exp@15
$LN16@sqlite3Exp@15:
; Line 39263
	mov	ecx, DWORD PTR [ebp+20]
	cmp	BYTE PTR [ecx], 63			; 0000003fH
	mov	DWORD PTR tv334[esp+28], ecx
	jne	SHORT $LN14@sqlite3Exp@15
; Line 39267
	add	ecx, 1
	push	ecx
	call	_atoi
	mov	esi, eax
	add	esp, 4
; Line 39268
	cmp	esi, 1
	mov	DWORD PTR [ebp+36], esi
	jl	SHORT $LN38@sqlite3Exp@15
	cmp	esi, 999				; 000003e7H
	jle	SHORT $LN13@sqlite3Exp@15
$LN38@sqlite3Exp@15:
; Line 39270
	push	999					; 000003e7H
	push	OFFSET ??_C@_0CL@MAPAMFMM@variable?5number?5must?5be?5between?5@
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN13@sqlite3Exp@15:
; Line 39272
	cmp	esi, DWORD PTR [edi+112]
	jle	$LN40@sqlite3Exp@15
; Line 39273
	mov	DWORD PTR [edi+112], esi
; Line 39275
	jmp	$LN40@sqlite3Exp@15
$LN14@sqlite3Exp@15:
; Line 39282
	cmp	DWORD PTR [edi+116], 0
	push	ebx
	mov	DWORD PTR _i$91899[esp+32], 0
	jle	$LN7@sqlite3Exp@15
	mov	eax, DWORD PTR [edi+124]
	mov	DWORD PTR tv489[esp+32], eax
$LL9@sqlite3Exp@15:
; Line 39286
	mov	edx, DWORD PTR tv489[esp+32]
	mov	ebx, DWORD PTR [edx]
	test	ebx, ebx
	je	$LN8@sqlite3Exp@15
	mov	eax, DWORD PTR [ebx+24]
	shr	eax, 1
	cmp	eax, esi
	jne	$LN8@sqlite3Exp@15
	cmp	esi, 4
	mov	edx, DWORD PTR [ebx+20]
	mov	eax, esi
	jb	SHORT $LN31@sqlite3Exp@15
	npad	4
$LL21@sqlite3Exp@15:
	mov	ebp, DWORD PTR [edx]
	cmp	ebp, DWORD PTR [ecx]
	jne	SHORT $LN22@sqlite3Exp@15
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL21@sqlite3Exp@15
$LN31@sqlite3Exp@15:
	test	eax, eax
	je	SHORT $LN23@sqlite3Exp@15
$LN22@sqlite3Exp@15:
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN35@sqlite3Exp@15
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN36@sqlite3Exp@15
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN35@sqlite3Exp@15
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN36@sqlite3Exp@15
	movzx	esi, BYTE PTR [edx]
	movzx	ebp, BYTE PTR [ecx]
	sub	esi, ebp
	jne	SHORT $LN35@sqlite3Exp@15
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN36@sqlite3Exp@15
	movzx	esi, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	sub	esi, ecx
	je	SHORT $LN36@sqlite3Exp@15
$LN35@sqlite3Exp@15:
	test	esi, esi
	mov	esi, DWORD PTR tv325[esp+32]
	mov	eax, 1
	jg	SHORT $LN25@sqlite3Exp@15
	or	eax, -1
	jmp	SHORT $LN25@sqlite3Exp@15
$LN36@sqlite3Exp@15:
	mov	esi, DWORD PTR tv325[esp+32]
$LN23@sqlite3Exp@15:
	xor	eax, eax
$LN25@sqlite3Exp@15:
	test	eax, eax
	mov	ebp, DWORD PTR _pExpr$[esp+28]
	je	SHORT $LN32@sqlite3Exp@15
	mov	ecx, DWORD PTR tv334[esp+32]
$LN8@sqlite3Exp@15:
; Line 39282
	mov	eax, DWORD PTR _i$91899[esp+32]
	add	DWORD PTR tv489[esp+32], 4
	add	eax, 1
	cmp	eax, DWORD PTR [edi+116]
	mov	DWORD PTR _i$91899[esp+32], eax
	jl	$LL9@sqlite3Exp@15
; Line 39286
	jmp	SHORT $LN7@sqlite3Exp@15
$LN32@sqlite3Exp@15:
; Line 39287
	mov	edx, DWORD PTR [ebx+36]
	mov	DWORD PTR [ebp+36], edx
$LN7@sqlite3Exp@15:
; Line 39291
	mov	eax, DWORD PTR _i$91899[esp+32]
	cmp	eax, DWORD PTR [edi+116]
	jl	SHORT $LN41@sqlite3Exp@15
; Line 39292
	add	DWORD PTR [edi+112], 1
	mov	eax, DWORD PTR [edi+112]
	mov	DWORD PTR [ebp+36], eax
; Line 39293
	mov	eax, DWORD PTR [edi+120]
	lea	ecx, DWORD PTR [eax-1]
	cmp	DWORD PTR [edi+116], ecx
	jl	SHORT $LN4@sqlite3Exp@15
; Line 39296
	mov	ebx, DWORD PTR [edi+124]
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [edi+120], eax
	add	eax, eax
	add	eax, eax
	call	_sqlite3ReallocOrFree
	mov	DWORD PTR [edi+124], eax
$LN4@sqlite3Exp@15:
; Line 39298
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN2@sqlite3Exp@15
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN41@sqlite3Exp@15
$LN2@sqlite3Exp@15:
; Line 39300
	mov	edx, DWORD PTR [edi+116]
	mov	eax, DWORD PTR [edi+124]
	mov	DWORD PTR [eax+edx*4], ebp
	add	DWORD PTR [edi+116], 1
$LN41@sqlite3Exp@15:
	pop	ebx
$LN40@sqlite3Exp@15:
; Line 39304
	cmp	DWORD PTR [edi+24], 0
	pop	esi
	jne	SHORT $LN1@sqlite3Exp@15
	cmp	DWORD PTR [edi+112], 999		; 000003e7H
	jle	SHORT $LN1@sqlite3Exp@15
; Line 39305
	push	OFFSET ??_C@_0BH@KLMBLGJH@too?5many?5SQL?5variables?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 4
$LN1@sqlite3Exp@15:
	pop	edi
	pop	ebp
; Line 39307
	add	esp, 16					; 00000010H
	ret	0
_sqlite3ExprAssignVarNumber ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3DequoteExpr
_TEXT	SEGMENT
_sqlite3DequoteExpr PROC				; COMDAT
; _p$ = eax
; Line 39327
	push	esi
	mov	esi, eax
; Line 39328
	movzx	eax, WORD PTR [esi+2]
	test	al, 64					; 00000040H
	jne	SHORT $LN3@sqlite3Deq@2
; Line 39331
	or	eax, 64					; 00000040H
; Line 39332
	test	BYTE PTR [esi+24], 1
	mov	WORD PTR [esi+2], ax
	jne	SHORT $LN1@sqlite3Deq@2
; Line 39333
	lea	eax, DWORD PTR [esi+20]
	push	eax
	call	_sqlite3TokenCopy
	add	esp, 4
$LN1@sqlite3Deq@2:
; Line 39335
	mov	esi, DWORD PTR [esi+20]
	call	_sqlite3Dequote
$LN3@sqlite3Deq@2:
	pop	esi
; Line 39336
	ret	0
_sqlite3DequoteExpr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SrcListDup
_TEXT	SEGMENT
_i$ = -16						; size = 4
$T116446 = -12						; size = 4
$T116366 = -12						; size = 4
$T116286 = -12						; size = 4
tv785 = -8						; size = 4
_pNew$ = -4						; size = 4
_p$ = 8							; size = 4
_sqlite3SrcListDup PROC					; COMDAT
; Line 39422
	sub	esp, 16					; 00000010H
	push	edi
; Line 39426
	mov	edi, DWORD PTR _p$[esp+16]
	test	edi, edi
	jne	SHORT $LN6@sqlite3Src@4
$LN161@sqlite3Src@4:
	xor	eax, eax
	pop	edi
; Line 39451
	add	esp, 16					; 00000010H
	ret	0
$LN6@sqlite3Src@4:
; Line 39427
	movzx	eax, WORD PTR [edi]
	test	ax, ax
	jle	SHORT $LN9@sqlite3Src@4
	movsx	eax, ax
	sub	eax, 1
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 4
	jmp	SHORT $LN10@sqlite3Src@4
$LN9@sqlite3Src@4:
	xor	eax, eax
$LN10@sqlite3Src@4:
	lea	ecx, DWORD PTR [eax+56]
; Line 39428
	call	_sqlite3MallocRaw
; Line 39429
	test	eax, eax
	mov	DWORD PTR _pNew$[esp+20], eax
	je	SHORT $LN161@sqlite3Src@4
; Line 39430
	movzx	ecx, WORD PTR [edi]
	mov	WORD PTR [eax+2], cx
	mov	WORD PTR [eax], cx
; Line 39431
	cmp	WORD PTR [edi], 0
	mov	DWORD PTR _i$[esp+20], 0
	jle	$LN7@sqlite3Src@4
	push	ebx
	push	ebp
	mov	ecx, edi
	sub	ecx, eax
	push	esi
	lea	ebp, DWORD PTR [edi+29]
	lea	esi, DWORD PTR [eax+12]
	mov	DWORD PTR tv785[esp+32], ecx
	npad	8
$LL156@sqlite3Src@4:
; Line 39435
	mov	eax, DWORD PTR [ebp-21]
	test	eax, eax
	mov	DWORD PTR $T116286[esp+32], eax
	jne	SHORT $LN12@sqlite3Src@4
	xor	ebx, ebx
	jmp	SHORT $LN13@sqlite3Src@4
$LN12@sqlite3Src@4:
	lea	edx, DWORD PTR [eax+1]
$LL152@sqlite3Src@4:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL152@sqlite3Src@4
	sub	eax, edx
	lea	edi, DWORD PTR [eax+1]
	xor	ebx, ebx
	test	edi, edi
	jle	SHORT $LN155@sqlite3Src@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN19@sqlite3Src@4
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN155@sqlite3Src@4
$LN19@sqlite3Src@4:
	push	edi
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN149@sqlite3Src@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN29@sqlite3Src@4
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN155@sqlite3Src@4
$LN29@sqlite3Src@4:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN155@sqlite3Src@4
$LN149@sqlite3Src@4:
	mov	eax, DWORD PTR $T116286[esp+32]
	push	edi
	push	eax
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN155@sqlite3Src@4:
	mov	edi, DWORD PTR _p$[esp+28]
$LN13@sqlite3Src@4:
; Line 39436
	mov	ecx, DWORD PTR tv785[esp+32]
	mov	DWORD PTR [esi-4], ebx
	mov	eax, DWORD PTR [ecx+esi]
	test	eax, eax
	mov	DWORD PTR $T116366[esp+32], eax
	jne	SHORT $LN38@sqlite3Src@4
	xor	ebx, ebx
	jmp	SHORT $LN39@sqlite3Src@4
$LN38@sqlite3Src@4:
	lea	edx, DWORD PTR [eax+1]
$LL153@sqlite3Src@4:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL153@sqlite3Src@4
	sub	eax, edx
	lea	edi, DWORD PTR [eax+1]
	xor	ebx, ebx
	test	edi, edi
	jle	SHORT $LN158@sqlite3Src@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN45@sqlite3Src@4
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN158@sqlite3Src@4
$LN45@sqlite3Src@4:
	push	edi
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN150@sqlite3Src@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN55@sqlite3Src@4
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN158@sqlite3Src@4
$LN55@sqlite3Src@4:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN158@sqlite3Src@4
$LN150@sqlite3Src@4:
	mov	edx, DWORD PTR $T116366[esp+32]
	push	edi
	push	edx
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN158@sqlite3Src@4:
	mov	edi, DWORD PTR _p$[esp+28]
$LN39@sqlite3Src@4:
	mov	DWORD PTR [esi], ebx
; Line 39437
	mov	eax, DWORD PTR [ebp-13]
	test	eax, eax
	mov	DWORD PTR $T116446[esp+32], eax
	jne	SHORT $LN64@sqlite3Src@4
	xor	ebx, ebx
	jmp	SHORT $LN65@sqlite3Src@4
$LN64@sqlite3Src@4:
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL154@sqlite3Src@4:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL154@sqlite3Src@4
	sub	eax, edx
	lea	edi, DWORD PTR [eax+1]
	xor	ebx, ebx
	test	edi, edi
	jle	SHORT $LN63@sqlite3Src@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN71@sqlite3Src@4
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN63@sqlite3Src@4
$LN71@sqlite3Src@4:
	push	edi
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN151@sqlite3Src@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN159@sqlite3Src@4
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN63@sqlite3Src@4
$LN159@sqlite3Src@4:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN63@sqlite3Src@4
$LN151@sqlite3Src@4:
	mov	eax, DWORD PTR $T116446[esp+32]
	push	edi
	push	eax
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN63@sqlite3Src@4:
	mov	edi, DWORD PTR _p$[esp+28]
$LN65@sqlite3Src@4:
	mov	DWORD PTR [esi+4], ebx
; Line 39438
	mov	cl, BYTE PTR [ebp]
	mov	BYTE PTR [esi+17], cl
; Line 39439
	mov	edx, DWORD PTR [ebp+3]
	mov	DWORD PTR [esi+20], edx
; Line 39440
	mov	al, BYTE PTR [ebp-1]
	mov	BYTE PTR [esi+16], al
; Line 39441
	mov	eax, DWORD PTR [ebp-9]
; Line 39442
	test	eax, eax
	mov	DWORD PTR [esi+8], eax
	je	SHORT $LN160@sqlite3Src@4
; Line 39443
	add	DWORD PTR [eax+28], 1
$LN160@sqlite3Src@4:
; Line 39445
	mov	ecx, DWORD PTR [ebp-5]
	push	ecx
	call	_sqlite3SelectDup
	mov	DWORD PTR [esi+12], eax
; Line 39446
	mov	edx, DWORD PTR [ebp+7]
	push	edx
	call	_sqlite3ExprDup
	mov	DWORD PTR [esi+24], eax
; Line 39447
	mov	eax, DWORD PTR [ebp+11]
	push	eax
	call	_sqlite3IdListDup
	mov	DWORD PTR [esi+28], eax
; Line 39448
	mov	ecx, DWORD PTR [ebp+19]
	mov	eax, DWORD PTR _i$[esp+44]
	mov	DWORD PTR [esi+36], ecx
	mov	edx, DWORD PTR [ebp+23]
	mov	DWORD PTR [esi+40], edx
	movsx	ecx, WORD PTR [edi]
	add	eax, 1
	add	esp, 12					; 0000000cH
	add	esi, 48					; 00000030H
	add	ebp, 48					; 00000030H
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+32], eax
	jl	$LL156@sqlite3Src@4
	mov	eax, DWORD PTR _pNew$[esp+32]
	pop	esi
	pop	ebp
	pop	ebx
$LN7@sqlite3Src@4:
	pop	edi
; Line 39451
	add	esp, 16					; 00000010H
	ret	0
_sqlite3SrcListDup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SelectDup
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3SelectDup PROC					; COMDAT
; Line 39472
	push	edi
; Line 39474
	mov	edi, DWORD PTR _p$[esp]
	test	edi, edi
	jne	SHORT $LN2@sqlite3Sel@2
	xor	eax, eax
	pop	edi
; Line 39499
	ret	0
$LN2@sqlite3Sel@2:
; Line 39475
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebp
	mov	ebp, DWORD PTR _inMutex
	push	esi
	je	SHORT $LN9@sqlite3Sel@2
	test	ebp, ebp
	jg	SHORT $LN20@sqlite3Sel@2
$LN9@sqlite3Sel@2:
	push	68					; 00000044H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN1@sqlite3Sel@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN19@sqlite3Sel@2
	test	ebp, ebp
	jg	SHORT $LN20@sqlite3Sel@2
$LN19@sqlite3Sel@2:
	add	ebp, 1
	mov	DWORD PTR _inMutex, ebp
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN20@sqlite3Sel@2:
	pop	esi
	pop	ebp
; Line 39476
	xor	eax, eax
	pop	edi
; Line 39499
	ret	0
$LN1@sqlite3Sel@2:
; Line 39477
	mov	al, BYTE PTR [edi+5]
	mov	BYTE PTR [esi+5], al
; Line 39478
	mov	ecx, DWORD PTR [edi]
	push	ecx
	call	_sqlite3ExprListDup
	mov	DWORD PTR [esi], eax
; Line 39479
	mov	edx, DWORD PTR [edi+12]
	push	edx
	call	_sqlite3SrcListDup
	mov	DWORD PTR [esi+12], eax
; Line 39480
	mov	eax, DWORD PTR [edi+16]
	push	eax
	call	_sqlite3ExprDup
	mov	DWORD PTR [esi+16], eax
; Line 39481
	mov	ecx, DWORD PTR [edi+20]
	push	ecx
	call	_sqlite3ExprListDup
	mov	DWORD PTR [esi+20], eax
; Line 39482
	mov	edx, DWORD PTR [edi+24]
	push	edx
	call	_sqlite3ExprDup
	mov	DWORD PTR [esi+24], eax
; Line 39483
	mov	eax, DWORD PTR [edi+28]
	push	eax
	call	_sqlite3ExprListDup
	mov	DWORD PTR [esi+28], eax
; Line 39484
	movzx	ecx, BYTE PTR [edi+4]
	mov	BYTE PTR [esi+4], cl
; Line 39485
	mov	edx, DWORD PTR [edi+32]
	push	edx
	call	_sqlite3SelectDup
	mov	DWORD PTR [esi+32], eax
; Line 39486
	mov	eax, DWORD PTR [edi+40]
	push	eax
	call	_sqlite3ExprDup
	mov	DWORD PTR [esi+40], eax
; Line 39487
	mov	ecx, DWORD PTR [edi+44]
	push	ecx
	call	_sqlite3ExprDup
	mov	DWORD PTR [esi+44], eax
; Line 39488
	or	eax, -1
	mov	DWORD PTR [esi+48], eax
; Line 39489
	mov	DWORD PTR [esi+52], eax
; Line 39490
	mov	dl, BYTE PTR [edi+6]
	mov	BYTE PTR [esi+6], dl
; Line 39491
	movzx	ecx, BYTE PTR [edi+7]
	add	esp, 36					; 00000024H
; Line 39495
	mov	DWORD PTR [esi+56], eax
; Line 39496
	mov	DWORD PTR [esi+60], eax
; Line 39497
	mov	DWORD PTR [esi+64], eax
	mov	BYTE PTR [esi+7], cl
	mov	BYTE PTR [esi+8], 0
	mov	BYTE PTR [esi+9], 0
	mov	DWORD PTR [esi+36], 0
; Line 39498
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	edi
; Line 39499
	ret	0
_sqlite3SelectDup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprListAppend
_TEXT	SEGMENT
_pExpr$ = 8						; size = 4
_pName$ = 12						; size = 4
_sqlite3ExprListAppend PROC				; COMDAT
; _pList$ = eax
; Line 39512
	push	ebx
	push	ebp
; Line 39514
	mov	ebp, DWORD PTR _inMutex
	mov	ebx, eax
	test	ebx, ebx
	push	esi
	push	edi
	jne	SHORT $LN5@sqlite3Exp@16
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN16@sqlite3Exp@16
	test	ebp, ebp
	jg	SHORT $LN9@sqlite3Exp@16
$LN16@sqlite3Exp@16:
	push	16					; 00000010H
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN48@sqlite3Exp@16
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN26@sqlite3Exp@16
	test	ebp, ebp
	jg	SHORT $LN9@sqlite3Exp@16
$LN26@sqlite3Exp@16:
	add	ebp, 1
	mov	DWORD PTR _inMutex, ebp
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN9@sqlite3Exp@16
$LN48@sqlite3Exp@16:
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
$LN9@sqlite3Exp@16:
; Line 39515
	test	eax, eax
	mov	ebx, eax
	je	SHORT $no_mem$92010
$LN5@sqlite3Exp@16:
; Line 39520
	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, DWORD PTR [ebx]
	jg	SHORT $LN4@sqlite3Exp@16
; Line 39522
	lea	esi, DWORD PTR [eax+eax+4]
; Line 39523
	mov	eax, DWORD PTR [ebx+12]
	lea	edi, DWORD PTR [esi+esi*2]
	add	edi, edi
	add	edi, edi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN41@sqlite3Exp@16
	test	ebp, ebp
	jg	SHORT $no_mem$92010
$LN41@sqlite3Exp@16:
	test	eax, eax
	jne	SHORT $LN40@sqlite3Exp@16
	call	_sqlite3Malloc
	jmp	SHORT $LN39@sqlite3Exp@16
$LN40@sqlite3Exp@16:
	push	edi
	push	eax
	call	_realloc
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN35@sqlite3Exp@16
	call	_sqlite3FailedMalloc
$LN35@sqlite3Exp@16:
	mov	eax, ecx
$LN39@sqlite3Exp@16:
; Line 39524
	test	eax, eax
	jne	SHORT $LN3@sqlite3Exp@16
$no_mem$92010:
; Line 39541
	mov	eax, DWORD PTR _pExpr$[esp+12]
	push	eax
	call	_sqlite3ExprDelete
	add	esp, 4
; Line 39542
	call	_sqlite3ExprListDelete
	pop	edi
	pop	esi
	pop	ebp
; Line 39543
	xor	eax, eax
	pop	ebx
; Line 39544
	ret	0
$LN3@sqlite3Exp@16:
; Line 39527
	mov	DWORD PTR [ebx+12], eax
; Line 39528
	mov	DWORD PTR [ebx+4], esi
$LN4@sqlite3Exp@16:
; Line 39531
	mov	edi, DWORD PTR _pExpr$[esp+12]
	test	edi, edi
	jne	SHORT $LN50@sqlite3Exp@16
	cmp	DWORD PTR _pName$[esp+12], edi
	je	SHORT $LN2@sqlite3Exp@16
$LN50@sqlite3Exp@16:
; Line 39532
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+12]
	lea	ecx, DWORD PTR [eax+eax*2]
	add	eax, 1
	mov	DWORD PTR [ebx], eax
; Line 39533
	xor	eax, eax
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
; Line 39534
	mov	eax, DWORD PTR _pName$[esp+12]
	call	_sqlite3NameFromToken
	mov	DWORD PTR [esi+4], eax
; Line 39535
	mov	DWORD PTR [esi], edi
$LN2@sqlite3Exp@16:
	pop	edi
	pop	esi
	pop	ebp
; Line 39537
	mov	eax, ebx
	pop	ebx
; Line 39544
	ret	0
_sqlite3ExprListAppend ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@HJGFDJPB@too?5many?5columns?5in?5?$CFs?$AA@ ; `string'
;	COMDAT ??_C@_0BH@HJGFDJPB@too?5many?5columns?5in?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BH@HJGFDJPB@too?5many?5columns?5in?5?$CFs?$AA@ DB 'too many column'
	DB	's in %s', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3ExprListCheckLength
_TEXT	SEGMENT
_iLimit$ = 8						; size = 4
_sqlite3ExprListCheckLength PROC			; COMDAT
; _pParse$ = edi
; _pEList$ = eax
; _zObject$ = ecx
; Line 39556
	test	eax, eax
	je	SHORT $LN1@sqlite3Exp@17
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR _iLimit$[esp-4]
	jle	SHORT $LN1@sqlite3Exp@17
; Line 39557
	push	ecx
	push	OFFSET ??_C@_0BH@HJGFDJPB@too?5many?5columns?5in?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN1@sqlite3Exp@17:
; Line 39559
	ret	0
_sqlite3ExprListCheckLength ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _codeInteger
_TEXT	SEGMENT
_codeInteger PROC					; COMDAT
; _v$ = esi
; _z$ = edi
; _n$ = ebx
; Line 40536
	test	edi, edi
	je	SHORT $LN13@codeIntege
; Line 40538
	mov	edx, edi
	call	_sqlite3FitsIn32Bits
	test	eax, eax
	je	SHORT $LN4@codeIntege
	push	edi
	call	_atoi
; Line 40539
	push	0
	push	eax
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 40543
	add	esp, 16					; 00000010H
; Line 40546
	ret	0
$LN4@codeIntege:
; Line 40540
	mov	edx, edi
	call	_sqlite3FitsIn64Bits
; Line 40541
	push	0
	test	eax, eax
	push	0
	mov	eax, esi
	je	SHORT $LN2@codeIntege
	push	34					; 00000022H
; Line 40543
	call	_sqlite3VdbeAddOp
	push	edi
	mov	edx, ebx
	mov	ecx, esi
	call	_sqlite3VdbeChangeP3
	add	esp, 16					; 00000010H
; Line 40546
	ret	0
$LN2@codeIntege:
; Line 40543
	push	125					; 0000007dH
	call	_sqlite3VdbeAddOp
	push	edi
	mov	edx, ebx
	mov	ecx, esi
	call	_sqlite3VdbeChangeP3
	add	esp, 16					; 00000010H
$LN13@codeIntege:
; Line 40546
	ret	0
_codeInteger ENDP
_TEXT	ENDS
PUBLIC	??_C@_08JLBDCDOJ@?$CF?4?$CKs?$CFQ?$CFs?$AA@	; `string'
;	COMDAT ??_C@_08JLBDCDOJ@?$CF?4?$CKs?$CFQ?$CFs?$AA@
CONST	SEGMENT
??_C@_08JLBDCDOJ@?$CF?4?$CKs?$CFQ?$CFs?$AA@ DB '%.*s%Q%s', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _renameTableFunc
_TEXT	SEGMENT
_tname$ = -8						; size = 8
_zTableName$ = -8					; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_token$ = 16						; size = 4
_argv$ = 16						; size = 4
_renameTableFunc PROC					; COMDAT
; Line 41504
	sub	esp, 8
	push	ebp
	push	esi
; Line 41505
	mov	esi, DWORD PTR _argv$[esp+12]
	mov	ecx, DWORD PTR [esi]
	mov	al, 1
	call	_sqlite3ValueText
; Line 41506
	mov	ecx, DWORD PTR [esi+4]
	mov	ebp, eax
	mov	al, 1
	call	_sqlite3ValueText
	mov	DWORD PTR _zTableName$[esp+16], eax
; Line 41511
	xor	eax, eax
; Line 41518
	test	ebp, ebp
	mov	esi, ebp
	je	SHORT $LN17@renameTabl
	push	edi
	mov	edi, DWORD PTR _tname$[esp+24]
	push	ebx
$LL7@renameTabl:
; Line 41520
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN24@renameTabl
; Line 41527
	and	edi, 1
	lea	ecx, DWORD PTR [eax+eax]
	mov	ebx, esi
	or	edi, ecx
	npad	1
$LL3@renameTabl:
; Line 41533
	add	esi, eax
; Line 41534
	lea	edx, DWORD PTR _token$[esp+20]
	push	edx
	mov	eax, esi
	call	_getToken
; Line 41535
	mov	ecx, DWORD PTR _token$[esp+24]
	add	esp, 4
	cmp	ecx, 145				; 00000091H
	je	SHORT $LL3@renameTabl
; Line 41537
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LL7@renameTabl
; Line 41540
	mov	eax, DWORD PTR _zTableName$[esp+24]
	shr	edi, 1
	add	edi, ebx
	push	edi
	push	eax
	push	ebp
	sub	ebx, ebp
	push	ebx
	push	OFFSET ??_C@_08JLBDCDOJ@?$CF?4?$CKs?$CFQ?$CFs?$AA@
	call	_sqlite3MPrintf
; Line 41541
	mov	ecx, DWORD PTR _context$[esp+40]
	push	OFFSET _sqlite3FreeX
	push	1
	push	-1
	push	eax
	add	ecx, 8
	push	ecx
	call	_sqlite3VdbeMemSetStr
	add	esp, 40					; 00000028H
$LN24@renameTabl:
	pop	ebx
	pop	edi
$LN17@renameTabl:
	pop	esi
	pop	ebp
; Line 41543
	add	esp, 8
	ret	0
_renameTableFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _renameTriggerFunc
_TEXT	SEGMENT
_token$ = -12						; size = 4
_tname$ = -8						; size = 8
_zTableName$ = -8					; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_dist$ = 16						; size = 4
_argv$ = 16						; size = 4
_renameTriggerFunc PROC					; COMDAT
; Line 41557
	sub	esp, 12					; 0000000cH
	push	ebp
	push	esi
; Line 41558
	mov	esi, DWORD PTR _argv$[esp+16]
	mov	ecx, DWORD PTR [esi]
	mov	al, 1
	call	_sqlite3ValueText
; Line 41559
	mov	ecx, DWORD PTR [esi+4]
	mov	ebp, eax
	mov	al, 1
	call	_sqlite3ValueText
	mov	DWORD PTR _zTableName$[esp+20], eax
; Line 41565
	xor	eax, eax
; Line 41573
	test	ebp, ebp
	mov	DWORD PTR _dist$[esp+16], 3
	mov	esi, ebp
	je	$LN20@renameTrig
	push	edi
	mov	edi, DWORD PTR _tname$[esp+28]
	push	ebx
	npad	4
$LL10@renameTrig:
; Line 41576
	cmp	BYTE PTR [esi], 0
	je	$LN27@renameTrig
; Line 41583
	and	edi, 1
	lea	ecx, DWORD PTR [eax+eax]
	mov	ebx, esi
	or	edi, ecx
$LL6@renameTrig:
; Line 41589
	add	esi, eax
; Line 41590
	lea	edx, DWORD PTR _token$[esp+28]
	push	edx
	mov	eax, esi
	call	_getToken
; Line 41591
	mov	ecx, DWORD PTR _token$[esp+32]
	add	esp, 4
	cmp	ecx, 145				; 00000091H
	je	SHORT $LL6@renameTrig
; Line 41603
	add	DWORD PTR _dist$[esp+24], 1
; Line 41604
	cmp	ecx, 112				; 00000070H
	je	SHORT $LN2@renameTrig
	cmp	ecx, 98					; 00000062H
	jne	SHORT $LN9@renameTrig
$LN2@renameTrig:
; Line 41605
	mov	DWORD PTR _dist$[esp+24], 0
; Line 41607
	jmp	SHORT $LL10@renameTrig
$LN9@renameTrig:
	cmp	DWORD PTR _dist$[esp+24], 2
	jne	SHORT $LL10@renameTrig
	cmp	ecx, 130				; 00000082H
	je	SHORT $LN1@renameTrig
	cmp	ecx, 38					; 00000026H
	je	SHORT $LN1@renameTrig
	cmp	ecx, 5
	jne	SHORT $LL10@renameTrig
$LN1@renameTrig:
; Line 41613
	mov	eax, DWORD PTR _zTableName$[esp+28]
	shr	edi, 1
	add	edi, ebx
	push	edi
	push	eax
	push	ebp
	sub	ebx, ebp
	push	ebx
	push	OFFSET ??_C@_08JLBDCDOJ@?$CF?4?$CKs?$CFQ?$CFs?$AA@
	call	_sqlite3MPrintf
; Line 41614
	mov	ecx, DWORD PTR _context$[esp+44]
	push	OFFSET _sqlite3FreeX
	push	1
	push	-1
	push	eax
	add	ecx, 8
	push	ecx
	call	_sqlite3VdbeMemSetStr
	add	esp, 40					; 00000028H
$LN27@renameTrig:
	pop	ebx
	pop	edi
$LN20@renameTrig:
	pop	esi
	pop	ebp
; Line 41616
	add	esp, 12					; 0000000cH
	ret	0
_renameTriggerFunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JAFDLLMD@?$CFs?5OR?5name?$DN?$CFQ?$AA@	; `string'
PUBLIC	??_C@_07IKCPJJF@name?$DN?$CFQ?$AA@		; `string'
;	COMDAT ??_C@_0O@JAFDLLMD@?$CFs?5OR?5name?$DN?$CFQ?$AA@
CONST	SEGMENT
??_C@_0O@JAFDLLMD@?$CFs?5OR?5name?$DN?$CFQ?$AA@ DB '%s OR name=%Q', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IKCPJJF@name?$DN?$CFQ?$AA@
CONST	SEGMENT
??_C@_07IKCPJJF@name?$DN?$CFQ?$AA@ DB 'name=%Q', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _whereTempTriggers
_TEXT	SEGMENT
_whereTempTriggers PROC					; COMDAT
; _pParse$ = ecx
; _pTab$ = eax
; Line 41651
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	push	ebp
	mov	ebp, DWORD PTR [ecx+44]
	push	esi
	xor	esi, esi
; Line 41658
	cmp	DWORD PTR [eax+76], ebp
	je	SHORT $LN18@whereTempT
	push	edi
; Line 41659
	mov	edi, DWORD PTR [eax+32]
	test	edi, edi
	je	SHORT $LN17@whereTempT
	push	ebx
	npad	6
$LL6@whereTempT:
; Line 41660
	cmp	DWORD PTR [edi+28], ebp
	jne	SHORT $LN5@whereTempT
; Line 41661
	test	esi, esi
	jne	SHORT $LN2@whereTempT
; Line 41662
	mov	edx, DWORD PTR [edi]
	push	edx
	push	OFFSET ??_C@_07IKCPJJF@name?$DN?$CFQ?$AA@
	call	_sqlite3MPrintf
	add	esp, 8
	mov	esi, eax
; Line 41663
	jmp	SHORT $LN5@whereTempT
$LN2@whereTempT:
; Line 41665
	mov	eax, DWORD PTR [edi]
	push	eax
	push	esi
	push	OFFSET ??_C@_0O@JAFDLLMD@?$CFs?5OR?5name?$DN?$CFQ?$AA@
	mov	ebx, esi
	call	_sqlite3MPrintf
	add	esp, 12					; 0000000cH
; Line 41666
	test	ebx, ebx
	mov	esi, eax
	je	SHORT $LN5@whereTempT
	push	ebx
	call	_free
	add	esp, 4
$LN5@whereTempT:
	mov	edi, DWORD PTR [edi+40]
	test	edi, edi
	jne	SHORT $LL6@whereTempT
	pop	ebx
	pop	edi
; Line 41671
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 41672
	ret	0
$LN17@whereTempT:
	pop	edi
; Line 41671
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 41672
	ret	0
$LN18@whereTempT:
; Line 41671
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 41672
	ret	0
_whereTempTriggers ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@FPJBBPLI@tbl_name?$DN?$CFQ?$AA@	; `string'
;	COMDAT ??_C@_0M@FPJBBPLI@tbl_name?$DN?$CFQ?$AA@
CONST	SEGMENT
??_C@_0M@FPJBBPLI@tbl_name?$DN?$CFQ?$AA@ DB 'tbl_name=%Q', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _reloadTableSchema
_TEXT	SEGMENT
_i$117053 = -12						; size = 4
_pTrig$ = -8						; size = 4
$T117241 = -4						; size = 4
$T117156 = -4						; size = 4
_pParse$ = 8						; size = 4
_pTab$ = 12						; size = 4
_zName$ = 16						; size = 4
_reloadTableSchema PROC					; COMDAT
; Line 41682
	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
; Line 41690
	mov	ebp, DWORD PTR _pParse$[esp+16]
	push	esi
	mov	esi, DWORD PTR [ebp+12]
	xor	ebx, ebx
	cmp	esi, ebx
	push	edi
	jne	SHORT $LN150@reloadTabl
	mov	edi, DWORD PTR [ebp]
	call	_sqlite3VdbeCreate
	mov	esi, eax
; Line 41691
	cmp	esi, ebx
	mov	DWORD PTR [ebp+12], eax
	je	$LN127@reloadTabl
$LN150@reloadTabl:
; Line 41692
	mov	eax, DWORD PTR _pTab$[esp+24]
	mov	ecx, DWORD PTR [eax+76]
	cmp	ecx, ebx
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR _i$117053[esp+28], -1000000	; fff0bdc0H
	je	SHORT $LN158@reloadTabl
	mov	edx, DWORD PTR [eax]
	cmp	edx, ebx
	mov	DWORD PTR _i$117053[esp+28], ebx
	jle	SHORT $LN158@reloadTabl
	mov	eax, DWORD PTR [eax+4]
	add	eax, 20					; 00000014H
	npad	1
$LL166@reloadTabl:
	cmp	DWORD PTR [eax], ecx
	je	SHORT $LN158@reloadTabl
	mov	edi, DWORD PTR _i$117053[esp+28]
	add	edi, 1
	add	eax, 24					; 00000018H
	cmp	edi, edx
	mov	DWORD PTR _i$117053[esp+28], edi
	jl	SHORT $LL166@reloadTabl
$LN158@reloadTabl:
; Line 41697
	mov	ecx, DWORD PTR _pTab$[esp+24]
	mov	edi, DWORD PTR [ecx+32]
	cmp	edi, ebx
	mov	DWORD PTR _pTrig$[esp+28], edi
	je	$LN154@reloadTabl
	jmp	SHORT $LN5@reloadTabl
	npad	5
$LL162@reloadTabl:
	mov	edi, DWORD PTR _pTrig$[esp+28]
	mov	ebp, DWORD PTR _pParse$[esp+24]
$LN5@reloadTabl:
; Line 41698
	mov	edx, DWORD PTR [edi+28]
	cmp	edx, ebx
	mov	eax, DWORD PTR [ebp]
	mov	ebp, -1000000				; fff0bdc0H
	je	SHORT $LN138@reloadTabl
	mov	ecx, DWORD PTR [eax]
	xor	ebp, ebp
	cmp	ecx, ebx
	jle	SHORT $LN138@reloadTabl
	mov	eax, DWORD PTR [eax+4]
	add	eax, 20					; 00000014H
$LL22@reloadTabl:
	cmp	DWORD PTR [eax], edx
	je	SHORT $LN138@reloadTabl
	add	ebp, 1
	add	eax, 24					; 00000018H
	cmp	ebp, ecx
	jl	SHORT $LL22@reloadTabl
$LN138@reloadTabl:
; Line 41700
	mov	edx, DWORD PTR [edi]
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	DWORD PTR $T117156[esp+28], edx
	jg	SHORT $LN164@reloadTabl
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN156@reloadTabl
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN156@reloadTabl
	xor	edi, edi
	xor	ebx, ebx
	jmp	SHORT $LN30@reloadTabl
$LN156@reloadTabl:
	xor	ebx, ebx
$LN164@reloadTabl:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 62			; 0000003eH
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
$LN30@reloadTabl:
	mov	ebp, DWORD PTR [esi+20]
	cmp	ebp, ebx
	mov	eax, edi
	je	SHORT $LN142@reloadTabl
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN51@reloadTabl
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN142@reloadTabl
$LN51@reloadTabl:
	cmp	edi, ebx
	jl	SHORT $LN47@reloadTabl
	cmp	edi, DWORD PTR [esi+12]
	jl	SHORT $LN46@reloadTabl
$LN47@reloadTabl:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN4@reloadTabl
$LN46@reloadTabl:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [ebp+edx*4+12]
	mov	eax, DWORD PTR [ebp+edx*4+16]
	lea	ebp, DWORD PTR [ebp+edx*4]
	call	_freeP3
	mov	ecx, DWORD PTR $T117156[esp+28]
	cmp	ecx, ebx
	mov	DWORD PTR [ebp+12], ebx
	jne	SHORT $LN143@reloadTabl
	mov	DWORD PTR [ebp+12], ebx
	mov	DWORD PTR [ebp+16], ebx
	jmp	SHORT $LN4@reloadTabl
$LN143@reloadTabl:
	mov	eax, ecx
	lea	edi, DWORD PTR [eax+1]
	npad	3
$LL151@reloadTabl:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	cmp	dl, bl
	jne	SHORT $LL151@reloadTabl
	sub	eax, edi
	mov	edi, eax
	mov	ebx, ecx
	call	_sqlite3StrNDup
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], -1
	xor	ebx, ebx
	jmp	SHORT $LN4@reloadTabl
$LN142@reloadTabl:
	mov	ecx, DWORD PTR $T117156[esp+28]
	xor	eax, eax
	call	_freeP3
$LN4@reloadTabl:
	mov	eax, DWORD PTR _pTrig$[esp+28]
	mov	eax, DWORD PTR [eax+40]
	cmp	eax, ebx
	mov	DWORD PTR _pTrig$[esp+28], eax
	jne	$LL162@reloadTabl
$LN154@reloadTabl:
; Line 41705
	mov	ecx, DWORD PTR _pTab$[esp+24]
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	ebp, DWORD PTR [ecx]
	mov	DWORD PTR $T117241[esp+28], ebp
	jg	SHORT $LN165@reloadTabl
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN157@reloadTabl
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN157@reloadTabl
	xor	edi, edi
	xor	ebx, ebx
	jmp	SHORT $LN60@reloadTabl
$LN157@reloadTabl:
	xor	ebx, ebx
$LN165@reloadTabl:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ecx, DWORD PTR _i$117053[esp+28]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 90			; 0000005aH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
$LN60@reloadTabl:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	mov	eax, edi
	je	SHORT $LN144@reloadTabl
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN81@reloadTabl
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN144@reloadTabl
$LN81@reloadTabl:
	cmp	edi, ebx
	jl	SHORT $LN77@reloadTabl
	cmp	edi, DWORD PTR [esi+12]
	jl	SHORT $LN76@reloadTabl
$LN77@reloadTabl:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN163@reloadTabl
$LN76@reloadTabl:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	ebp, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ebp+12]
	call	_freeP3
	mov	ecx, DWORD PTR $T117241[esp+28]
	cmp	ecx, ebx
	mov	DWORD PTR [ebp+12], ebx
	jne	SHORT $LN145@reloadTabl
	mov	DWORD PTR [ebp+12], ebx
	mov	DWORD PTR [ebp+16], ebx
	jmp	SHORT $LN163@reloadTabl
$LN145@reloadTabl:
	mov	eax, ecx
	lea	edi, DWORD PTR [eax+1]
$LL152@reloadTabl:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	cmp	dl, bl
	jne	SHORT $LL152@reloadTabl
	sub	eax, edi
	mov	edi, eax
	mov	ebx, ecx
	call	_sqlite3StrNDup
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], -1
	xor	ebx, ebx
	jmp	SHORT $LN163@reloadTabl
$LN144@reloadTabl:
	mov	ecx, ebp
	xor	eax, eax
	call	_freeP3
$LN163@reloadTabl:
; Line 41708
	mov	eax, DWORD PTR _zName$[esp+24]
	push	eax
	push	OFFSET ??_C@_0M@FPJBBPLI@tbl_name?$DN?$CFQ?$AA@
	call	_sqlite3MPrintf
	mov	ebp, eax
	add	esp, 8
; Line 41709
	cmp	ebp, ebx
	je	$LN127@reloadTabl
; Line 41710
	mov	ecx, DWORD PTR _i$117053[esp+28]
	push	ebx
	push	ecx
	push	28					; 0000001cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 12					; 0000000cH
	cmp	ecx, ebx
	je	SHORT $LN146@reloadTabl
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN105@reloadTabl
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN146@reloadTabl
$LN105@reloadTabl:
	cmp	eax, ebx
	jl	SHORT $LN101@reloadTabl
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN100@reloadTabl
$LN101@reloadTabl:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN103@reloadTabl
$LN100@reloadTabl:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [edi+16], -1
	jmp	SHORT $LN103@reloadTabl
$LN146@reloadTabl:
	mov	ecx, ebp
	or	eax, -1
	call	_freeP3
$LN103@reloadTabl:
; Line 41716
	mov	eax, DWORD PTR _pTab$[esp+24]
	mov	ecx, DWORD PTR _pParse$[esp+24]
	call	_whereTempTriggers
	mov	edi, eax
	cmp	edi, ebx
	je	SHORT $LN127@reloadTabl
; Line 41717
	push	ebx
	push	1
	push	28					; 0000001cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 12					; 0000000cH
	cmp	ecx, ebx
	je	SHORT $LN148@reloadTabl
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN129@reloadTabl
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN148@reloadTabl
$LN129@reloadTabl:
	cmp	eax, ebx
	jl	SHORT $LN125@reloadTabl
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN124@reloadTabl
$LN125@reloadTabl:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN127@reloadTabl
$LN124@reloadTabl:
	lea	eax, DWORD PTR [eax+eax*4]
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], -1
$LN127@reloadTabl:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 41720
	add	esp, 12					; 0000000cH
	ret	0
$LN148@reloadTabl:
; Line 41717
	mov	ecx, edi
	pop	edi
	pop	esi
	pop	ebp
	or	eax, -1
	pop	ebx
; Line 41720
	add	esp, 12					; 0000000cH
; Line 41717
	jmp	_freeP3
_reloadTableSchema ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _loadAnalysis
_TEXT	SEGMENT
_iDb$ = 8						; size = 4
_loadAnalysis PROC					; COMDAT
; _pParse$ = esi
; Line 42279
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	jne	SHORT $LN7@loadAnalys
	push	edi
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
; Line 42280
	test	eax, eax
	mov	DWORD PTR [esi+12], eax
	pop	edi
	je	SHORT $LN1@loadAnalys
$LN7@loadAnalys:
; Line 42281
	mov	ecx, DWORD PTR _iDb$[esp-4]
	push	0
	push	ecx
	push	117					; 00000075H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN1@loadAnalys:
; Line 42283
	ret	0
_loadAnalysis ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@NPAKAIJO@SELECT?5idx?0?5stat?5FROM?5?$CFQ?4sqlite_@ ; `string'
PUBLIC	??_C@_0N@EIGEIEIJ@sqlite_stat1?$AA@		; `string'
;	COMDAT ??_C@_0CG@NPAKAIJO@SELECT?5idx?0?5stat?5FROM?5?$CFQ?4sqlite_@
CONST	SEGMENT
??_C@_0CG@NPAKAIJO@SELECT?5idx?0?5stat?5FROM?5?$CFQ?4sqlite_@ DB 'SELECT '
	DB	'idx, stat FROM %Q.sqlite_stat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EIGEIEIJ@sqlite_stat1?$AA@
CONST	SEGMENT
??_C@_0N@EIGEIEIJ@sqlite_stat1?$AA@ DB 'sqlite_stat1', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AnalysisLoad
_TEXT	SEGMENT
_sInfo$ = -8						; size = 8
_sqlite3AnalysisLoad PROC				; COMDAT
; _db$ = esi
; _iDb$ = eax
; Line 42433
	sub	esp, 8
	push	ebx
; Line 42440
	lea	ebx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [esi+4]
	add	ebx, ebx
	add	ebx, ebx
	add	ebx, ebx
	mov	ecx, DWORD PTR [ebx+eax+20]
	push	ebp
	push	edi
	mov	edi, DWORD PTR [ecx+40]
	test	edi, edi
	je	SHORT $LN2@sqlite3Ana
	npad	3
$LL137@sqlite3Ana:
; Line 42441
	mov	edx, DWORD PTR [edi+8]
; Line 42442
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx], 1000000		; 000f4240H
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, 5
	jl	SHORT $LN133@sqlite3Ana
	npad	12
$LL12@sqlite3Ana:
	mov	DWORD PTR [ecx+eax*4], 5
	sub	eax, 1
	cmp	eax, 5
	jge	SHORT $LL12@sqlite3Ana
$LN133@sqlite3Ana:
	cmp	eax, 1
	jl	SHORT $LN8@sqlite3Ana
$LL9@sqlite3Ana:
	mov	ebp, 11					; 0000000bH
	sub	ebp, eax
	mov	DWORD PTR [ecx+eax*4], ebp
	sub	eax, 1
	cmp	eax, 1
	jge	SHORT $LL9@sqlite3Ana
$LN8@sqlite3Ana:
	cmp	BYTE PTR [edx+24], 0
	je	SHORT $LN3@sqlite3Ana
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+edx*4], 1
$LN3@sqlite3Ana:
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $LL137@sqlite3Ana
$LN2@sqlite3Ana:
; Line 42447
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _sInfo$[esp+20], esi
	mov	eax, DWORD PTR [ebx+eax]
; Line 42448
	push	eax
	push	esi
	mov	ebx, OFFSET ??_C@_0N@EIGEIEIJ@sqlite_stat1?$AA@
	mov	DWORD PTR _sInfo$[esp+32], eax
	call	_sqlite3FindTable
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@sqlite3Ana
	pop	edi
	pop	ebp
; Line 42449
	mov	eax, 1
	pop	ebx
; Line 42461
	add	esp, 8
	ret	0
$LN1@sqlite3Ana:
; Line 42455
	mov	ecx, DWORD PTR _sInfo$[esp+24]
	push	ecx
	push	OFFSET ??_C@_0CG@NPAKAIJO@SELECT?5idx?0?5stat?5FROM?5?$CFQ?4sqlite_@
	call	_sqlite3MPrintf
	add	esp, 8
; Line 42456
	cmp	DWORD PTR [esi+48], -264537850		; f03b7906H
	mov	edi, eax
	mov	ebp, -1254786768			; b5357930H
	jne	SHORT $LN16@sqlite3Ana
	mov	DWORD PTR [esi+48], -1607883113		; a029a697H
	jmp	SHORT $LN15@sqlite3Ana
$LN16@sqlite3Ana:
	mov	DWORD PTR [esi+48], ebp
	mov	DWORD PTR [esi+152], 1
$LN15@sqlite3Ana:
; Line 42457
	push	0
	lea	edx, DWORD PTR _sInfo$[esp+24]
	push	edx
	push	OFFSET _analysisLoader
	push	edi
	push	esi
	call	_sqlite3_exec
	mov	ebx, eax
; Line 42458
	mov	eax, DWORD PTR [esi+48]
	add	esp, 20					; 00000014H
	cmp	eax, -1607883113			; a029a697H
	jne	SHORT $LN123@sqlite3Ana
	mov	DWORD PTR [esi+48], -264537850		; f03b7906H
	jmp	SHORT $LN121@sqlite3Ana
$LN123@sqlite3Ana:
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN121@sqlite3Ana
	mov	DWORD PTR [esi+48], ebp
	mov	DWORD PTR [esi+152], 1
$LN121@sqlite3Ana:
; Line 42459
	test	edi, edi
	je	SHORT $LN129@sqlite3Ana
	push	edi
	call	_free
	add	esp, 4
$LN129@sqlite3Ana:
	pop	edi
	pop	ebp
; Line 42460
	mov	eax, ebx
	pop	ebx
; Line 42461
	add	esp, 8
	ret	0
_sqlite3AnalysisLoad ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@IGOBCPDP@?$CFs?5?$CFT?5cannot?5reference?5objects?5i@ ; `string'
;	COMDAT ??_C@_0CO@IGOBCPDP@?$CFs?5?$CFT?5cannot?5reference?5objects?5i@
CONST	SEGMENT
??_C@_0CO@IGOBCPDP@?$CFs?5?$CFT?5cannot?5reference?5objects?5i@ DB '%s %T'
	DB	' cannot reference objects in database %s', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3FixSrcList
_TEXT	SEGMENT
_zDb$ = -8						; size = 4
_i$ = -4						; size = 4
_pFix$ = 8						; size = 4
_pList$ = 12						; size = 4
_sqlite3FixSrcList PROC					; COMDAT
; Line 42884
	sub	esp, 8
	push	esi
; Line 42889
	mov	esi, DWORD PTR _pList$[esp+8]
	test	esi, esi
	jne	SHORT $LN9@sqlite3Fix@6
	xor	eax, eax
	pop	esi
; Line 42906
	add	esp, 8
	ret	0
$LN9@sqlite3Fix@6:
; Line 42891
	cmp	WORD PTR [esi], 0
	push	ebx
	mov	ebx, DWORD PTR _pFix$[esp+12]
	push	ebp
	push	edi
	mov	edi, DWORD PTR [ebx+4]
	mov	DWORD PTR _zDb$[esp+24], edi
	mov	DWORD PTR _i$[esp+24], 0
	lea	ebp, DWORD PTR [esi+8]
	jle	$LN6@sqlite3Fix@6
	npad	10
$LL47@sqlite3Fix@6:
; Line 42892
	mov	ecx, DWORD PTR [ebp]
	test	ecx, ecx
	jne	$LN5@sqlite3Fix@6
; Line 42893
	test	edi, edi
	jne	SHORT $LN13@sqlite3Fix@6
	mov	DWORD PTR [ebp], edi
	mov	edi, DWORD PTR _zDb$[esp+24]
	jmp	$LN3@sqlite3Fix@6
$LN13@sqlite3Fix@6:
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
$LL44@sqlite3Fix@6:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL44@sqlite3Fix@6
	sub	eax, edx
	lea	esi, DWORD PTR [eax+1]
	xor	edi, edi
	test	esi, esi
	jle	SHORT $LN12@sqlite3Fix@6
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	mov	ebx, DWORD PTR _inMutex
	je	SHORT $LN20@sqlite3Fix@6
	test	ebx, ebx
	jg	SHORT $LN46@sqlite3Fix@6
$LN20@sqlite3Fix@6:
	push	esi
	call	_malloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN43@sqlite3Fix@6
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN30@sqlite3Fix@6
	test	ebx, ebx
	jg	SHORT $LN46@sqlite3Fix@6
$LN30@sqlite3Fix@6:
	mov	esi, DWORD PTR _pList$[esp+20]
	add	ebx, 1
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	mov	DWORD PTR _inMutex, ebx
	mov	ebx, DWORD PTR _pFix$[esp+20]
	mov	DWORD PTR [ebp], edi
	mov	edi, DWORD PTR _zDb$[esp+24]
	jmp	SHORT $LN3@sqlite3Fix@6
$LN43@sqlite3Fix@6:
	mov	eax, DWORD PTR _zDb$[esp+24]
	push	esi
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN46@sqlite3Fix@6:
	mov	ebx, DWORD PTR _pFix$[esp+20]
$LN12@sqlite3Fix@6:
	mov	esi, DWORD PTR _pList$[esp+20]
	mov	DWORD PTR [ebp], edi
	mov	edi, DWORD PTR _zDb$[esp+24]
	jmp	SHORT $LN3@sqlite3Fix@6
$LN5@sqlite3Fix@6:
; Line 42894
	mov	edx, edi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN39@sqlite3Fix@6
$LN3@sqlite3Fix@6:
; Line 42901
	mov	ecx, DWORD PTR [ebp+16]
	push	ecx
	push	ebx
	call	_sqlite3FixSelect
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN41@sqlite3Fix@6
; Line 42902
	mov	edx, DWORD PTR [ebp+28]
	push	edx
	push	ebx
	call	_sqlite3FixExpr
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN41@sqlite3Fix@6
	mov	eax, DWORD PTR _i$[esp+24]
	movsx	ecx, WORD PTR [esi]
	add	eax, 1
	add	ebp, 48					; 00000030H
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+24], eax
	jl	$LL47@sqlite3Fix@6
$LN6@sqlite3Fix@6:
	pop	edi
	pop	ebp
	pop	ebx
; Line 42905
	xor	eax, eax
	pop	esi
; Line 42906
	add	esp, 8
	ret	0
$LN39@sqlite3Fix@6:
; Line 42897
	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [ebx+12]
	mov	ecx, DWORD PTR [ebx+8]
	mov	edi, DWORD PTR [ebx]
	push	edx
	push	eax
	push	ecx
	push	OFFSET ??_C@_0CO@IGOBCPDP@?$CFs?5?$CFT?5cannot?5reference?5objects?5i@
	call	_sqlite3ErrorMsg
	add	esp, 16					; 00000010H
$LN41@sqlite3Fix@6:
	pop	edi
	pop	ebp
	pop	ebx
; Line 42898
	mov	eax, 1
	pop	esi
; Line 42906
	add	esp, 8
	ret	0
_sqlite3FixSrcList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0GP@HDJMCODL@illegal?5return?5value?5?$CI?$CFd?$CJ?5from?5t@ ; `string'
;	COMDAT ??_C@_0GP@HDJMCODL@illegal?5return?5value?5?$CI?$CFd?$CJ?5from?5t@
CONST	SEGMENT
??_C@_0GP@HDJMCODL@illegal?5return?5value?5?$CI?$CFd?$CJ?5from?5t@ DB 'il'
	DB	'legal return value (%d) from the authorization function - sho'
	DB	'uld be SQLITE_OK, SQLITE_IGNORE, or SQLITE_DENY', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqliteAuthBadReturnCode
_TEXT	SEGMENT
_sqliteAuthBadReturnCode PROC				; COMDAT
; _pParse$ = ecx
; _rc$ = eax
; Line 43071
	push	edi
; Line 43074
	push	eax
	mov	edi, ecx
	push	OFFSET ??_C@_0GP@HDJMCODL@illegal?5return?5value?5?$CI?$CFd?$CJ?5from?5t@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 43075
	mov	DWORD PTR [edi+4], 1
	pop	edi
; Line 43076
	ret	0
_sqliteAuthBadReturnCode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@NCPGIDCD@access?5to?5?$CFs?4?$CFs?4?$CFs?5is?5prohibited@ ; `string'
PUBLIC	??_C@_0BO@CMCIGPCH@access?5to?5?$CFs?4?$CFs?5is?5prohibited?$AA@ ; `string'
;	COMDAT ??_C@_0CB@NCPGIDCD@access?5to?5?$CFs?4?$CFs?4?$CFs?5is?5prohibited@
CONST	SEGMENT
??_C@_0CB@NCPGIDCD@access?5to?5?$CFs?4?$CFs?4?$CFs?5is?5prohibited@ DB 'a'
	DB	'ccess to %s.%s.%s is prohibited', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CMCIGPCH@access?5to?5?$CFs?4?$CFs?5is?5prohibited?$AA@
CONST	SEGMENT
??_C@_0BO@CMCIGPCH@access?5to?5?$CFs?4?$CFs?5is?5prohibited?$AA@ DB 'acce'
	DB	'ss to %s.%s is prohibited', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AuthRead
_TEXT	SEGMENT
tv228 = -8						; size = 4
tv225 = -4						; size = 4
_pParse$ = 8						; size = 4
_pExpr$ = 12						; size = 4
_pTabList$ = 16						; size = 4
_sqlite3AuthRead PROC					; COMDAT
; Line 43091
	sub	esp, 8
; Line 43092
	mov	eax, DWORD PTR _pParse$[esp+4]
	mov	edx, DWORD PTR [eax]
; Line 43101
	mov	eax, DWORD PTR [edx+160]
	test	eax, eax
	push	ebp
	mov	ebp, DWORD PTR _pTabList$[esp+8]
	mov	DWORD PTR tv225[esp+12], edx
	mov	DWORD PTR tv228[esp+12], eax
	je	$LN15@sqlite3Aut@3
	push	ebx
; Line 43102
	mov	ebx, DWORD PTR _pExpr$[esp+12]
	cmp	BYTE PTR [ebx], 149			; 00000095H
	jne	$LN44@sqlite3Aut@3
	push	esi
; Line 43103
	mov	esi, DWORD PTR [ebx+64]
	test	esi, esi
	je	$LN45@sqlite3Aut@3
	mov	ecx, DWORD PTR [edx]
	push	edi
	xor	edi, edi
	test	ecx, ecx
	jle	SHORT $LN41@sqlite3Aut@3
	mov	eax, DWORD PTR [edx+4]
	add	eax, 20					; 00000014H
	npad	3
$LL30@sqlite3Aut@3:
	cmp	DWORD PTR [eax], esi
	je	SHORT $LN36@sqlite3Aut@3
	add	edi, 1
	add	eax, 24					; 00000018H
	cmp	edi, ecx
	jl	SHORT $LL30@sqlite3Aut@3
$LN36@sqlite3Aut@3:
; Line 43104
	test	edi, edi
	jl	$LN46@sqlite3Aut@3
$LN41@sqlite3Aut@3:
; Line 43109
	xor	eax, eax
	test	ebp, ebp
	je	SHORT $LN43@sqlite3Aut@3
	movsx	esi, WORD PTR [ebp]
	lea	ecx, DWORD PTR [ebp+32]
$LL21@sqlite3Aut@3:
	cmp	eax, esi
	jge	SHORT $LN42@sqlite3Aut@3
; Line 43110
	mov	ebp, DWORD PTR [ebx+36]
	cmp	ebp, DWORD PTR [ecx]
	je	SHORT $LN42@sqlite3Aut@3
	add	eax, 1
	add	ecx, 48					; 00000030H
	jmp	SHORT $LL21@sqlite3Aut@3
$LN42@sqlite3Aut@3:
; Line 43112
	test	eax, eax
	jl	SHORT $LN43@sqlite3Aut@3
	cmp	eax, esi
	jge	SHORT $LN43@sqlite3Aut@3
; Line 43113
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _pTabList$[esp+20]
	shl	ecx, 4
	mov	esi, DWORD PTR [ecx+eax+20]
	jmp	SHORT $LN14@sqlite3Aut@3
$LN43@sqlite3Aut@3:
; Line 43114
	mov	ecx, DWORD PTR _pParse$[esp+20]
	mov	eax, DWORD PTR [ecx+172]
	test	eax, eax
	je	SHORT $LN46@sqlite3Aut@3
; Line 43119
	mov	esi, DWORD PTR [eax]
$LN14@sqlite3Aut@3:
; Line 43123
	test	esi, esi
	je	SHORT $LN46@sqlite3Aut@3
; Line 43124
	mov	eax, DWORD PTR [ebx+40]
	test	eax, eax
	jl	SHORT $LN12@sqlite3Aut@3
; Line 43126
	mov	ecx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ebp, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN9@sqlite3Aut@3
$LN12@sqlite3Aut@3:
; Line 43127
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	jl	SHORT $LN10@sqlite3Aut@3
; Line 43129
	mov	ecx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ebp, DWORD PTR [ecx+eax*4]
; Line 43130
	jmp	SHORT $LN9@sqlite3Aut@3
$LN10@sqlite3Aut@3:
; Line 43131
	mov	ebp, OFFSET ??_C@_05GIFMDDGN@ROWID?$AA@
$LN9@sqlite3Aut@3:
; Line 43134
	mov	ecx, DWORD PTR [edx+4]
	lea	eax, DWORD PTR [edi+edi*2]
	mov	ebx, DWORD PTR [ecx+eax*8]
; Line 43136
	mov	eax, DWORD PTR _pParse$[esp+20]
	mov	ecx, DWORD PTR [eax+176]
	mov	eax, DWORD PTR [esi]
	push	ecx
	mov	ecx, DWORD PTR [edx+164]
	push	ebx
	push	ebp
	push	eax
	push	20					; 00000014H
	push	ecx
	call	DWORD PTR tv228[esp+48]
	add	esp, 24					; 00000018H
; Line 43137
	cmp	eax, 2
	jne	SHORT $LN8@sqlite3Aut@3
; Line 43138
	mov	edx, DWORD PTR _pExpr$[esp+20]
	mov	BYTE PTR [edx], 92			; 0000005cH
$LN46@sqlite3Aut@3:
	pop	edi
$LN45@sqlite3Aut@3:
	pop	esi
$LN44@sqlite3Aut@3:
	pop	ebx
$LN15@sqlite3Aut@3:
	pop	ebp
; Line 43150
	add	esp, 8
	ret	0
$LN8@sqlite3Aut@3:
; Line 43139
	cmp	eax, 1
	jne	SHORT $LN6@sqlite3Aut@3
; Line 43140
	mov	eax, DWORD PTR tv225[esp+24]
	cmp	DWORD PTR [eax], 2
	jg	SHORT $LN4@sqlite3Aut@3
	test	edi, edi
	jne	SHORT $LN4@sqlite3Aut@3
; Line 43144
	mov	ecx, DWORD PTR [esi]
	mov	edi, DWORD PTR _pParse$[esp+20]
	push	ebp
	push	ecx
	push	OFFSET ??_C@_0BO@CMCIGPCH@access?5to?5?$CFs?4?$CFs?5is?5prohibited?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
; Line 43146
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR [eax+4], 23			; 00000017H
	pop	ebp
; Line 43150
	add	esp, 8
	ret	0
$LN4@sqlite3Aut@3:
; Line 43142
	mov	edx, DWORD PTR [esi]
	mov	edi, DWORD PTR _pParse$[esp+20]
	push	ebp
	push	edx
	push	ebx
	push	OFFSET ??_C@_0CB@NCPGIDCD@access?5to?5?$CFs?4?$CFs?4?$CFs?5is?5prohibited@
	call	_sqlite3ErrorMsg
	add	esp, 16					; 00000010H
; Line 43146
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR [eax+4], 23			; 00000017H
	pop	ebp
; Line 43150
	add	esp, 8
	ret	0
$LN6@sqlite3Aut@3:
; Line 43147
	test	eax, eax
	je	SHORT $LN46@sqlite3Aut@3
; Line 43148
	mov	ecx, DWORD PTR _pParse$[esp+20]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
; Line 43150
	add	esp, 8
; Line 43148
	jmp	_sqliteAuthBadReturnCode
_sqlite3AuthRead ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AuthCheck
_TEXT	SEGMENT
_code$ = 8						; size = 4
_zArg1$ = 12						; size = 4
_zArg2$ = 16						; size = 4
_zArg3$ = 20						; size = 4
_sqlite3AuthCheck PROC					; COMDAT
; _pParse$ = eax
; Line 43164
	push	edi
	mov	edi, eax
; Line 43165
	mov	eax, DWORD PTR [edi]
; Line 43171
	cmp	BYTE PTR [eax+68], 0
	jne	SHORT $LN5@sqlite3Aut@4
	cmp	BYTE PTR [edi+188], 0
	jne	SHORT $LN5@sqlite3Aut@4
; Line 43175
	mov	ecx, DWORD PTR [eax+160]
	test	ecx, ecx
; Line 43176
	je	SHORT $LN5@sqlite3Aut@4
; Line 43178
	mov	edx, DWORD PTR [edi+176]
	mov	eax, DWORD PTR [eax+164]
	push	esi
	push	edx
	mov	edx, DWORD PTR _zArg3$[esp+8]
	push	edx
	mov	edx, DWORD PTR _zArg2$[esp+12]
	push	edx
	mov	edx, DWORD PTR _zArg1$[esp+16]
	push	edx
	mov	edx, DWORD PTR _code$[esp+20]
	push	edx
	push	eax
	call	ecx
	mov	esi, eax
	add	esp, 24					; 00000018H
; Line 43179
	cmp	esi, 1
	jne	SHORT $LN3@sqlite3Aut@4
; Line 43180
	push	OFFSET ??_C@_0P@PEBGBLCC@not?5authorized?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 43186
	mov	eax, esi
	pop	esi
	mov	DWORD PTR [edi+4], 23			; 00000017H
	pop	edi
; Line 43187
	ret	0
$LN3@sqlite3Aut@4:
; Line 43182
	test	esi, esi
	je	SHORT $LN1@sqlite3Aut@4
	cmp	esi, 2
	je	SHORT $LN1@sqlite3Aut@4
; Line 43183
	mov	esi, 1
; Line 43184
	mov	eax, esi
	mov	ecx, edi
	call	_sqliteAuthBadReturnCode
$LN1@sqlite3Aut@4:
; Line 43186
	mov	eax, esi
	pop	esi
	pop	edi
; Line 43187
	ret	0
$LN5@sqlite3Aut@4:
; Line 43172
	xor	eax, eax
	pop	edi
; Line 43187
	ret	0
_sqlite3AuthCheck ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3TableLock
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_iDb$ = 12						; size = 4
_iTab$ = 16						; size = 4
_isWriteLock$ = 20					; size = 1
_zName$ = 24						; size = 4
_sqlite3TableLock PROC					; COMDAT
; Line 43290
	cmp	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, 0
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp]
	push	esi
	mov	esi, 1
	jne	SHORT $LN76@sqlite3Tab@2
	add	DWORD PTR _inMutex, esi
	call	DWORD PTR __imp__TlsAlloc@0
	sub	DWORD PTR _inMutex, esi
	cmp	eax, -1
	mov	DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9, eax
	je	SHORT $LN77@sqlite3Tab@2
	mov	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, esi
	jmp	SHORT $LN36@sqlite3Tab@2
$LN76@sqlite3Tab@2:
	mov	eax, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
$LN36@sqlite3Tab@2:
	push	eax
	call	DWORD PTR __imp__TlsGetValue@4
	test	eax, eax
	jne	SHORT $LN15@sqlite3Tab@2
$LN77@sqlite3Tab@2:
	mov	eax, OFFSET ?zeroData@?1??sqlite3ThreadDataReadOnly@@9@9
$LN15@sqlite3Tab@2:
	cmp	BYTE PTR [eax+4], 0
	je	$LN6@sqlite3Tab@2
	mov	edx, DWORD PTR _iDb$[esp+4]
	test	edx, edx
	jl	$LN6@sqlite3Tab@2
	push	ebx
	push	edi
; Line 43294
	mov	edi, DWORD PTR [ebp+104]
	xor	ecx, ecx
	test	edi, edi
	jle	SHORT $LN3@sqlite3Tab@2
	mov	eax, DWORD PTR [ebp+108]
$LL5@sqlite3Tab@2:
; Line 43296
	cmp	DWORD PTR [eax], edx
	jne	SHORT $LN4@sqlite3Tab@2
	mov	ebx, DWORD PTR _iTab$[esp+12]
	cmp	DWORD PTR [eax+4], ebx
	je	SHORT $LN73@sqlite3Tab@2
$LN4@sqlite3Tab@2:
; Line 43294
	add	ecx, esi
	add	eax, 16					; 00000010H
	cmp	ecx, edi
	jl	SHORT $LL5@sqlite3Tab@2
$LN3@sqlite3Tab@2:
; Line 43303
	mov	ebx, DWORD PTR [ebp+108]
	add	edi, esi
	shl	edi, 4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN52@sqlite3Tab@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN52@sqlite3Tab@2
	xor	esi, esi
	jmp	SHORT $LN75@sqlite3Tab@2
$LN73@sqlite3Tab@2:
; Line 43297
	cmp	BYTE PTR [eax+8], 0
	jne	SHORT $LN10@sqlite3Tab@2
	cmp	BYTE PTR _isWriteLock$[esp+12], 0
	jne	SHORT $LN10@sqlite3Tab@2
	pop	edi
	pop	ebx
	xor	ecx, ecx
	pop	esi
; Line 43308
	mov	BYTE PTR [eax+8], cl
	pop	ebp
; Line 43311
	ret	0
$LN10@sqlite3Tab@2:
	pop	edi
	pop	ebx
; Line 43297
	mov	ecx, esi
	pop	esi
; Line 43308
	mov	BYTE PTR [eax+8], cl
	pop	ebp
; Line 43311
	ret	0
; Line 43303
$LN52@sqlite3Tab@2:
	test	ebx, ebx
	jne	SHORT $LN51@sqlite3Tab@2
	call	_sqlite3Malloc
	jmp	SHORT $LN60@sqlite3Tab@2
$LN51@sqlite3Tab@2:
	push	edi
	push	ebx
	call	_realloc
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN60@sqlite3Tab@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN78@sqlite3Tab@2
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN60@sqlite3Tab@2
$LN78@sqlite3Tab@2:
	add	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, esi
$LN60@sqlite3Tab@2:
	mov	esi, eax
	test	esi, esi
	jne	SHORT $LN70@sqlite3Tab@2
$LN75@sqlite3Tab@2:
	test	ebx, ebx
	je	SHORT $LN70@sqlite3Tab@2
	push	ebx
	call	_free
	add	esp, 4
$LN70@sqlite3Tab@2:
; Line 43304
	test	esi, esi
	mov	DWORD PTR [ebp+108], esi
	je	SHORT $LN79@sqlite3Tab@2
; Line 43305
	mov	ecx, DWORD PTR [ebp+104]
; Line 43307
	mov	edx, DWORD PTR _iTab$[esp+12]
	mov	eax, ecx
	shl	eax, 4
	add	eax, esi
	add	ecx, 1
	mov	DWORD PTR [ebp+104], ecx
	mov	ecx, DWORD PTR _iDb$[esp+12]
	mov	DWORD PTR [eax+4], edx
; Line 43309
	mov	edx, DWORD PTR _zName$[esp+12]
	mov	DWORD PTR [eax], ecx
	mov	cl, BYTE PTR _isWriteLock$[esp+12]
	mov	DWORD PTR [eax+12], edx
	mov	BYTE PTR [eax+8], cl
$LN79@sqlite3Tab@2:
	pop	edi
	pop	ebx
$LN6@sqlite3Tab@2:
	pop	esi
	pop	ebp
; Line 43311
	ret	0
_sqlite3TableLock ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _codeTableLocks
_TEXT	SEGMENT
tv465 = -16						; size = 4
$T118002 = -12						; size = 4
_i$ = -8						; size = 4
$T118001 = -4						; size = 4
_pParse$ = 8						; size = 4
_codeTableLocks PROC					; COMDAT
; Line 43317
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
; Line 43322
	mov	ebp, DWORD PTR _pParse$[esp+20]
	push	esi
	mov	esi, DWORD PTR [ebp+12]
	xor	ebx, ebx
	cmp	esi, ebx
	push	edi
	jne	SHORT $LN45@codeTableL
	mov	edi, DWORD PTR [ebp]
	call	_sqlite3VdbeCreate
	mov	esi, eax
	cmp	esi, ebx
	mov	DWORD PTR [ebp+12], eax
	je	$LN2@codeTableL
$LN45@codeTableL:
; Line 43326
	cmp	DWORD PTR [ebp+104], ebx
	mov	DWORD PTR _i$[esp+32], ebx
	jle	$LN2@codeTableL
	mov	DWORD PTR tv465[esp+32], ebx
	jmp	SHORT $LN4@codeTableL
	npad	4
$LL48@codeTableL:
	mov	ebp, ecx
$LN4@codeTableL:
	mov	eax, DWORD PTR [ebp+108]
	add	eax, DWORD PTR tv465[esp+32]
; Line 43329
	cmp	BYTE PTR [eax+8], bl
	mov	ebp, DWORD PTR [eax]
	je	SHORT $LN1@codeTableL
; Line 43330
	or	ecx, -1
	sub	ecx, ebp
	mov	ebp, ecx
$LN1@codeTableL:
; Line 43332
	mov	edx, DWORD PTR [eax+12]
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR $T118002[esp+32], edx
	mov	DWORD PTR $T118001[esp+32], eax
	jg	SHORT $LN13@codeTableL
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN47@codeTableL
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN47@codeTableL
	xor	eax, eax
	xor	ebx, ebx
	jmp	SHORT $LN15@codeTableL
$LN47@codeTableL:
	xor	ebx, ebx
$LN13@codeTableL:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR $T118001[esp+32]
	mov	BYTE PTR [eax], 96			; 00000060H
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	eax, edi
$LN15@codeTableL:
	mov	edi, DWORD PTR [esi+20]
	cmp	edi, ebx
	je	SHORT $LN43@codeTableL
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN36@codeTableL
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN43@codeTableL
$LN36@codeTableL:
	cmp	eax, ebx
	jl	SHORT $LN32@codeTableL
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN31@codeTableL
$LN32@codeTableL:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN3@codeTableL
$LN31@codeTableL:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [edi+edx*4+12]
	mov	eax, DWORD PTR [edi+edx*4+16]
	lea	edi, DWORD PTR [edi+edx*4]
	call	_freeP3
	mov	eax, DWORD PTR $T118002[esp+32]
	cmp	eax, ebx
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN44@codeTableL
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN3@codeTableL
$LN44@codeTableL:
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], -2			; fffffffeH
	jmp	SHORT $LN3@codeTableL
$LN43@codeTableL:
	mov	ecx, DWORD PTR $T118002[esp+32]
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN3@codeTableL:
	mov	eax, DWORD PTR _i$[esp+32]
	mov	ecx, DWORD PTR _pParse$[esp+28]
	add	DWORD PTR tv465[esp+32], 16		; 00000010H
	add	eax, 1
	cmp	eax, DWORD PTR [ecx+104]
	mov	DWORD PTR _i$[esp+32], eax
	jl	$LL48@codeTableL
$LN2@codeTableL:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 43334
	add	esp, 16					; 00000010H
	ret	0
_codeTableLocks ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3FinishCoding
_TEXT	SEGMENT
tv606 = -8						; size = 4
tv371 = -4						; size = 4
_sqlite3FinishCoding PROC				; COMDAT
; _pParse$ = esi
; Line 43349
	sub	esp, 8
	push	ebx
; Line 43353
	xor	ebx, ebx
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN15@sqlite3Fin@6
	cmp	DWORD PTR _inMutex, ebx
	jg	$LN16@sqlite3Fin@6
$LN15@sqlite3Fin@6:
; Line 43354
	cmp	BYTE PTR [esi+19], bl
	jne	$LN16@sqlite3Fin@6
	push	ebp
; Line 43355
	mov	ebp, DWORD PTR [esi+12]
	cmp	ebp, ebx
	jne	SHORT $LN12@sqlite3Fin@6
; Line 43356
	cmp	DWORD PTR [esi+4], ebx
	jne	SHORT $LN12@sqlite3Fin@6
	cmp	DWORD PTR [esi+24], ebx
	je	SHORT $LN12@sqlite3Fin@6
	pop	ebp
; Line 43357
	mov	DWORD PTR [esi+4], 1
	pop	ebx
; Line 43432
	add	esp, 8
	ret	0
$LN12@sqlite3Fin@6:
; Line 43366
	cmp	ebp, ebx
	push	edi
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR tv371[esp+20], edi
	jne	SHORT $LN60@sqlite3Fin@6
	call	_sqlite3VdbeCreate
	mov	ebp, eax
; Line 43367
	cmp	ebp, ebx
	mov	DWORD PTR [esi+12], eax
	je	$LN4@sqlite3Fin@6
$LN60@sqlite3Fin@6:
; Line 43368
	push	ebx
	push	ebx
	push	36					; 00000024H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 43376
	mov	eax, DWORD PTR [esi+52]
	add	esp, 12					; 0000000cH
	cmp	eax, ebx
	jle	$LN10@sqlite3Fin@6
; Line 43379
	add	eax, -1
	cmp	eax, ebx
	jl	SHORT $LN25@sqlite3Fin@6
	mov	edx, DWORD PTR [ebp+12]
	cmp	edx, eax
	jle	SHORT $LN25@sqlite3Fin@6
	mov	ecx, DWORD PTR [ebp+20]
	cmp	ecx, ebx
	je	SHORT $LN25@sqlite3Fin@6
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN25@sqlite3Fin@6:
; Line 43380
	mov	ecx, DWORD PTR tv371[esp+20]
	xor	edi, edi
	cmp	DWORD PTR [ecx], edi
	lea	ebx, DWORD PTR [edi+1]
	jle	SHORT $LN7@sqlite3Fin@6
	lea	edx, DWORD PTR [esi+56]
	mov	DWORD PTR tv606[esp+20], edx
$LL9@sqlite3Fin@6:
; Line 43381
	test	DWORD PTR [esi+48], ebx
	je	SHORT $LN8@sqlite3Fin@6
; Line 43382
	mov	eax, DWORD PTR [esi+44]
	and	eax, ebx
	neg	eax
	sbb	eax, eax
	neg	eax
	push	eax
	push	edi
	push	106					; 0000006aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 43383
	mov	ecx, DWORD PTR tv606[esp+32]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	edi
	push	101					; 00000065H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN8@sqlite3Fin@6:
	mov	eax, DWORD PTR tv371[esp+20]
	add	DWORD PTR tv606[esp+20], 4
	add	edi, 1
	add	ebx, ebx
	cmp	edi, DWORD PTR [eax]
	jl	SHORT $LL9@sqlite3Fin@6
$LN7@sqlite3Fin@6:
; Line 43386
	mov	eax, DWORD PTR [esi+192]
	test	eax, eax
	je	SHORT $LN45@sqlite3Fin@6
; Line 43387
	mov	ebx, DWORD PTR [eax+64]
; Line 43388
	push	0
	push	0
	push	129					; 00000081H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [ebp+20]
	add	esp, 12					; 0000000cH
	test	ecx, ecx
	je	SHORT $LN58@sqlite3Fin@6
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN47@sqlite3Fin@6
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN58@sqlite3Fin@6
$LN47@sqlite3Fin@6:
	test	eax, eax
	jl	SHORT $LN43@sqlite3Fin@6
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN42@sqlite3Fin@6
$LN43@sqlite3Fin@6:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN45@sqlite3Fin@6
$LN42@sqlite3Fin@6:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	xor	eax, eax
	cmp	ebx, eax
	mov	DWORD PTR [edi+12], eax
	jne	SHORT $LN59@sqlite3Fin@6
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	jmp	SHORT $LN45@sqlite3Fin@6
$LN59@sqlite3Fin@6:
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], -10			; fffffff6H
	jmp	SHORT $LN45@sqlite3Fin@6
$LN58@sqlite3Fin@6:
	mov	ecx, ebx
	mov	eax, -10				; fffffff6H
	call	_freeP3
$LN45@sqlite3Fin@6:
; Line 43396
	push	esi
	call	_codeTableLocks
; Line 43397
	mov	eax, DWORD PTR [esi+52]
	push	eax
	push	0
	push	95					; 0000005fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 16					; 00000010H
$LN10@sqlite3Fin@6:
; Line 43407
	mov	ebx, DWORD PTR [esi+156]
	mov	edi, DWORD PTR [esi+160]
	push	0
	push	0
	push	21					; 00000015H
	mov	eax, ebp
	sub	edi, ebx
	call	_sqlite3VdbeAddOp
	push	ebx
	mov	edx, edi
	mov	ecx, ebp
	call	_sqlite3VdbeChangeP3
	add	esp, 16					; 00000010H
; Line 43414
	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN61@sqlite3Fin@6
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN3@sqlite3Fin@6
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN61@sqlite3Fin@6
$LN3@sqlite3Fin@6:
; Line 43420
	movzx	ecx, BYTE PTR [esi+128]
	mov	edx, DWORD PTR [esi+28]
	mov	eax, DWORD PTR [esi+32]
	push	ecx
	mov	ecx, DWORD PTR [esi+112]
	add	edx, 3
	push	edx
	add	eax, 3
	push	eax
	push	ecx
	mov	eax, ebp
	call	_sqlite3VdbeMakeReady
	add	esp, 16					; 00000010H
; Line 43421
	mov	DWORD PTR [esi+4], 101			; 00000065H
; Line 43422
	mov	BYTE PTR [esi+16], 0
	xor	ebx, ebx
	jmp	SHORT $LN1@sqlite3Fin@6
$LN61@sqlite3Fin@6:
	xor	ebx, ebx
$LN4@sqlite3Fin@6:
; Line 43423
	cmp	DWORD PTR [esi+4], ebx
	jne	SHORT $LN1@sqlite3Fin@6
; Line 43424
	mov	DWORD PTR [esi+4], 1
$LN1@sqlite3Fin@6:
	pop	edi
; Line 43426
	mov	DWORD PTR [esi+28], ebx
; Line 43427
	mov	DWORD PTR [esi+32], ebx
; Line 43428
	mov	DWORD PTR [esi+36], ebx
; Line 43429
	mov	DWORD PTR [esi+112], ebx
; Line 43430
	mov	DWORD PTR [esi+48], ebx
; Line 43431
	mov	DWORD PTR [esi+52], ebx
	pop	ebp
$LN16@sqlite3Fin@6:
	pop	ebx
; Line 43432
	add	esp, 8
	ret	0
_sqlite3FinishCoding ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3NestedParse
_TEXT	SEGMENT
_zSql$ = -96						; size = 4
_saveBuf$ = -92						; size = 88
__$ArrayPad$ = -4					; size = 4
_zFormat$ = 8						; size = 4
_sqlite3NestedParse PROC				; COMDAT
; _pParse$ = ebx
; Line 43446
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+96], eax
; Line 43452
	cmp	DWORD PTR [ebx+24], 0
	jne	SHORT $LN3@sqlite3Nes
; Line 43455
	mov	ecx, DWORD PTR _zFormat$[esp+92]
	lea	eax, DWORD PTR _zFormat$[esp+96]
	push	eax
	call	_sqlite3VMPrintf
	add	esp, 4
; Line 43457
	test	eax, eax
	mov	DWORD PTR _zSql$[esp+96], eax
	je	SHORT $LN3@sqlite3Nes
; Line 43460
	add	BYTE PTR [ebx+19], 1
	push	ebp
	push	esi
	push	edi
; Line 43462
	push	88					; 00000058H
	lea	ebp, DWORD PTR [ebx+112]
	push	0
	mov	ecx, 22					; 00000016H
	mov	esi, ebp
	lea	edi, DWORD PTR _saveBuf$[esp+116]
	push	ebp
	rep movsd
	call	_memset
; Line 43463
	mov	esi, DWORD PTR _zSql$[esp+120]
	push	0
	push	esi
	push	ebx
	call	_sqlite3RunParser
; Line 43464
	push	esi
	call	_free
	add	esp, 28					; 0000001cH
; Line 43466
	add	BYTE PTR [ebx+19], 255			; 000000ffH
	mov	edi, ebp
	mov	ecx, 22					; 00000016H
	lea	esi, DWORD PTR _saveBuf$[esp+108]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
$LN3@sqlite3Nes:
; Line 43467
	mov	ecx, DWORD PTR __$ArrayPad$[esp+96]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 96					; 00000060H
	ret	0
_sqlite3NestedParse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JMEKHCEB@sqlite_master?$AA@		; `string'
PUBLIC	??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@	; `string'
;	COMDAT ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
CONST	SEGMENT
??_C@_0O@JMEKHCEB@sqlite_master?$AA@ DB 'sqlite_master', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
CONST	SEGMENT
??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@ DB 'sqlite_temp_master', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3OpenMasterTable
_TEXT	SEGMENT
_iDb$ = 8						; size = 4
_sqlite3OpenMasterTable PROC				; COMDAT
; _p$ = ebx
; Line 43807
	push	ebp
	mov	ebp, DWORD PTR _iDb$[esp]
	push	esi
; Line 43808
	mov	esi, DWORD PTR [ebx+12]
	test	esi, esi
	jne	SHORT $LN5@sqlite3Ope@2
	push	edi
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [ebx+12], eax
	mov	esi, eax
	pop	edi
$LN5@sqlite3Ope@2:
; Line 43809
	cmp	ebp, 1
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN4@sqlite3Ope@2
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN4@sqlite3Ope@2:
	push	eax
	push	1
	push	1
	push	ebp
	push	ebx
	call	_sqlite3TableLock
; Line 43810
	push	0
	push	ebp
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 43811
	push	1
	push	0
	push	9
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 43812
	push	5
	push	0
	push	104					; 00000068H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
	pop	esi
	pop	ebp
; Line 43813
	ret	0
_sqlite3OpenMasterTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@DADMKDCE@unknown?5database?5?$CFT?$AA@ ; `string'
;	COMDAT ??_C@_0BE@DADMKDCE@unknown?5database?5?$CFT?$AA@
CONST	SEGMENT
??_C@_0BE@DADMKDCE@unknown?5database?5?$CFT?$AA@ DB 'unknown database %T', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3TwoPartName
_TEXT	SEGMENT
_sqlite3TwoPartName PROC				; COMDAT
; _pParse$ = eax
; _pName1$ = esi
; _pName2$ = ecx
; _pUnqual$ = edx
; Line 43866
	test	ecx, ecx
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [edi]
	je	SHORT $LN3@sqlite3Two
	test	DWORD PTR [ecx+4], -2			; fffffffeH
	jbe	SHORT $LN3@sqlite3Two
; Line 43869
	push	eax
	mov	eax, esi
	mov	DWORD PTR [edx], ecx
	call	_sqlite3FindDb
	add	esp, 4
; Line 43870
	test	eax, eax
	jge	SHORT $LN4@sqlite3Two
; Line 43871
	push	esi
	push	OFFSET ??_C@_0BE@DADMKDCE@unknown?5database?5?$CFT?$AA@
	call	_sqlite3ErrorMsg
; Line 43872
	add	DWORD PTR [edi+24], 1
	add	esp, 8
; Line 43873
	or	eax, -1
	pop	edi
; Line 43881
	ret	0
$LN3@sqlite3Two:
; Line 43877
	mov	eax, DWORD PTR [eax+60]
; Line 43878
	mov	DWORD PTR [edx], esi
$LN4@sqlite3Two:
	pop	edi
; Line 43881
	ret	0
_sqlite3TwoPartName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@DHAAGEMP@object?5name?5reserved?5for?5interna@ ; `string'
PUBLIC	??_C@_07IOGLMIPM@sqlite_?$AA@			; `string'
;	COMDAT ??_C@_0CK@DHAAGEMP@object?5name?5reserved?5for?5interna@
CONST	SEGMENT
??_C@_0CK@DHAAGEMP@object?5name?5reserved?5for?5interna@ DB 'object name '
	DB	'reserved for internal use: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IOGLMIPM@sqlite_?$AA@
CONST	SEGMENT
??_C@_07IOGLMIPM@sqlite_?$AA@ DB 'sqlite_', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3CheckObjectName
_TEXT	SEGMENT
_sqlite3CheckObjectName PROC				; COMDAT
; _pParse$ = eax
; _zName$ = esi
; Line 43890
	push	edi
	mov	edi, eax
; Line 43893
	mov	eax, DWORD PTR [edi]
	cmp	BYTE PTR [eax+68], 0
	jne	SHORT $LN1@sqlite3Che
	cmp	BYTE PTR [edi+19], 0
	jne	SHORT $LN1@sqlite3Che
	test	DWORD PTR [eax+8], 2048			; 00000800H
	jne	SHORT $LN1@sqlite3Che
	mov	eax, 7
	mov	edx, OFFSET ??_C@_07IOGLMIPM@sqlite_?$AA@
	mov	ecx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	SHORT $LN1@sqlite3Che
; Line 43894
	push	esi
	push	OFFSET ??_C@_0CK@DHAAGEMP@object?5name?5reserved?5for?5interna@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 43895
	mov	eax, 1
	pop	edi
; Line 43898
	ret	0
$LN1@sqlite3Che:
; Line 43897
	xor	eax, eax
	pop	edi
; Line 43898
	ret	0
_sqlite3CheckObjectName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@CJJKBEHE@duplicate?5column?5name?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BH@KPDMNKOM@too?5many?5columns?5on?5?$CFs?$AA@ ; `string'
;	COMDAT ??_C@_0BK@CJJKBEHE@duplicate?5column?5name?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BK@CJJKBEHE@duplicate?5column?5name?3?5?$CFs?$AA@ DB 'duplicate co'
	DB	'lumn name: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KPDMNKOM@too?5many?5columns?5on?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BH@KPDMNKOM@too?5many?5columns?5on?5?$CFs?$AA@ DB 'too many column'
	DB	's on %s', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AddColumn
_TEXT	SEGMENT
tv221 = -5						; size = 1
_z$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pName$ = 12						; size = 4
_sqlite3AddColumn PROC					; COMDAT
; Line 44127
	sub	esp, 8
	push	esi
	push	edi
; Line 44132
	mov	edi, DWORD PTR _pParse$[esp+12]
	mov	esi, DWORD PTR [edi+164]
	test	esi, esi
	je	$LN10@sqlite3Add@3
; Line 44133
	mov	eax, DWORD PTR [esi+4]
	add	eax, 1
	cmp	eax, 2000				; 000007d0H
	jle	SHORT $LN8@sqlite3Add@3
; Line 44134
	mov	ecx, DWORD PTR [esi]
	push	ecx
	push	OFFSET ??_C@_0BH@KPDMNKOM@too?5many?5columns?5on?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
	pop	edi
	pop	esi
; Line 44165
	add	esp, 8
	ret	0
$LN8@sqlite3Add@3:
; Line 44137
	mov	eax, DWORD PTR _pName$[esp+12]
	call	_sqlite3NameFromToken
	mov	edx, eax
; Line 44138
	test	edx, edx
	mov	DWORD PTR _z$[esp+16], edx
	je	$LN10@sqlite3Add@3
	push	ebx
; Line 44139
	mov	ebx, DWORD PTR [esi+4]
	xor	edi, edi
	test	ebx, ebx
	push	ebp
	jle	SHORT $LN4@sqlite3Add@3
	movzx	edx, BYTE PTR [edx]
; Line 44140
	mov	al, BYTE PTR _sqlite3UpperToLower[edx]
	mov	ebp, DWORD PTR [esi+8]
	mov	BYTE PTR tv221[esp+24], al
	npad	4
$LL40@sqlite3Add@3:
	mov	eax, DWORD PTR [ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	dl, BYTE PTR tv221[esp+24]
	cmp	dl, BYTE PTR _sqlite3UpperToLower[ecx]
	jne	SHORT $LN5@sqlite3Add@3
	mov	ecx, DWORD PTR _z$[esp+24]
	lea	edx, DWORD PTR [eax+1]
	add	ecx, 1
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN37@sqlite3Add@3
$LN5@sqlite3Add@3:
; Line 44139
	add	edi, 1
	add	ebp, 20					; 00000014H
	cmp	edi, ebx
	jl	SHORT $LL40@sqlite3Add@3
; Line 44140
	mov	edx, DWORD PTR _z$[esp+24]
$LN4@sqlite3Add@3:
; Line 44146
	test	bl, 7
	jne	SHORT $LN41@sqlite3Add@3
; Line 44148
	mov	eax, DWORD PTR [esi+8]
	lea	edi, DWORD PTR [ebx+ebx*4+40]
	add	edi, edi
	add	edi, edi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN24@sqlite3Add@3
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN39@sqlite3Add@3
$LN24@sqlite3Add@3:
	test	eax, eax
	jne	SHORT $LN23@sqlite3Add@3
	call	_sqlite3Malloc
	jmp	SHORT $LN22@sqlite3Add@3
$LN37@sqlite3Add@3:
; Line 44141
	mov	esi, DWORD PTR _z$[esp+24]
	mov	edi, DWORD PTR _pParse$[esp+20]
	push	esi
	push	OFFSET ??_C@_0BK@CJJKBEHE@duplicate?5column?5name?3?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
; Line 44142
	push	esi
	call	_free
	add	esp, 12					; 0000000cH
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 44165
	add	esp, 8
	ret	0
; Line 44148
$LN23@sqlite3Add@3:
	push	edi
	push	eax
	call	_realloc
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN18@sqlite3Add@3
	call	_sqlite3FailedMalloc
$LN18@sqlite3Add@3:
	mov	eax, ecx
$LN22@sqlite3Add@3:
; Line 44149
	test	eax, eax
	mov	edx, DWORD PTR _z$[esp+24]
	jne	SHORT $LN1@sqlite3Add@3
$LN39@sqlite3Add@3:
; Line 44150
	push	edx
	call	_free
	add	esp, 4
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 44165
	add	esp, 8
	ret	0
$LN1@sqlite3Add@3:
; Line 44153
	mov	DWORD PTR [esi+8], eax
$LN41@sqlite3Add@3:
; Line 44155
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*4]
; Line 44156
	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	pop	ebp
; Line 44157
	mov	DWORD PTR [eax], edx
; Line 44163
	mov	BYTE PTR [eax+18], 98			; 00000062H
; Line 44164
	add	DWORD PTR [esi+4], 1
	pop	ebx
$LN10@sqlite3Add@3:
	pop	edi
	pop	esi
; Line 44165
	add	esp, 8
	ret	0
_sqlite3AddColumn ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ChangeCookie
_TEXT	SEGMENT
_sqlite3ChangeCookie PROC				; COMDAT
; _db$ = ecx
; _v$ = edi
; _iDb$ = esi
; Line 44475
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [esi+esi*2]
	mov	eax, DWORD PTR [edx+eax*8+20]
	mov	ecx, DWORD PTR [eax]
	push	0
	add	ecx, 1
	push	ecx
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 44476
	push	0
	push	esi
	push	4
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 44477
	ret	0
_sqlite3ChangeCookie ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@GHLNPGFA@UPDATE?5?$CFQ?4?$CFs?5SET?5rootpage?$DN?$CFd?5WHE@ ; `string'
;	COMDAT ??_C@_0DG@GHLNPGFA@UPDATE?5?$CFQ?4?$CFs?5SET?5rootpage?$DN?$CFd?5WHE@
CONST	SEGMENT
??_C@_0DG@GHLNPGFA@UPDATE?5?$CFQ?4?$CFs?5SET?5rootpage?$DN?$CFd?5WHE@ DB 'U'
	DB	'PDATE %Q.%s SET rootpage=%d WHERE #0 AND rootpage=#0', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _destroyRootPage
_TEXT	SEGMENT
_iTable$ = 8						; size = 4
_destroyRootPage PROC					; COMDAT
; _pParse$ = eax
; _iDb$ = esi
; Line 45013
	push	ebx
	mov	ebx, eax
; Line 45014
	mov	eax, DWORD PTR [ebx+12]
	test	eax, eax
	push	ebp
	mov	ebp, DWORD PTR _iTable$[esp+4]
	jne	SHORT $LN5@destroyRoo
	push	edi
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [ebx+12], eax
	pop	edi
$LN5@destroyRoo:
; Line 45015
	push	esi
	push	ebp
	push	114					; 00000072H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 45027
	cmp	esi, 1
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN4@destroyRoo
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN4@destroyRoo:
	push	ebp
	push	eax
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [esi+esi*2]
	mov	eax, DWORD PTR [edx+ecx*8]
	push	eax
	push	OFFSET ??_C@_0DG@GHLNPGFA@UPDATE?5?$CFQ?4?$CFs?5SET?5rootpage?$DN?$CFd?5WHE@
	call	_sqlite3NestedParse
	add	esp, 16					; 00000010H
	pop	ebp
	pop	ebx
; Line 45029
	ret	0
_destroyRootPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _destroyTable
_TEXT	SEGMENT
_iLargest$94359 = -8					; size = 4
_iTab$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pTab$ = 12						; size = 4
_destroyTable PROC					; COMDAT
; Line 45037
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
; Line 45062
	mov	esi, DWORD PTR _pTab$[esp+16]
	mov	eax, DWORD PTR [esi+20]
	push	edi
	mov	DWORD PTR _iTab$[esp+24], eax
; Line 45063
	xor	edx, edx
$LL11@destroyTab:
; Line 45069
	test	edx, edx
	mov	DWORD PTR _iLargest$94359[esp+24], 0
	je	SHORT $LN8@destroyTab
	cmp	eax, edx
	jge	SHORT $LN9@destroyTab
$LN8@destroyTab:
; Line 45070
	mov	DWORD PTR _iLargest$94359[esp+24], eax
$LN9@destroyTab:
; Line 45072
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN5@destroyTab
	npad	1
$LL7@destroyTab:
; Line 45075
	test	edx, edx
	mov	ecx, DWORD PTR [eax+20]
	je	SHORT $LN3@destroyTab
	cmp	ecx, edx
	jge	SHORT $LN6@destroyTab
$LN3@destroyTab:
	cmp	ecx, DWORD PTR _iLargest$94359[esp+24]
	jle	SHORT $LN6@destroyTab
; Line 45076
	mov	DWORD PTR _iLargest$94359[esp+24], ecx
$LN6@destroyTab:
; Line 45072
	mov	eax, DWORD PTR [eax+32]
	test	eax, eax
	jne	SHORT $LL7@destroyTab
$LN5@destroyTab:
; Line 45079
	cmp	DWORD PTR _iLargest$94359[esp+24], 0
	je	$LN39@destroyTab
; Line 45082
	mov	edx, DWORD PTR [esi+76]
	test	edx, edx
	mov	ebx, DWORD PTR _pParse$[esp+20]
	mov	edi, DWORD PTR [ebx]
	mov	ebp, -1000000				; fff0bdc0H
	je	SHORT $LN38@destroyTab
	mov	ecx, DWORD PTR [edi]
	xor	ebp, ebp
	test	ecx, ecx
	jle	SHORT $LN38@destroyTab
	mov	eax, DWORD PTR [edi+4]
	add	eax, 20					; 00000014H
$LL17@destroyTab:
	cmp	DWORD PTR [eax], edx
	je	SHORT $LN38@destroyTab
	add	ebp, 1
	add	eax, 24					; 00000018H
	cmp	ebp, ecx
	jl	SHORT $LL17@destroyTab
$LN38@destroyTab:
; Line 45083
	mov	esi, DWORD PTR [ebx+12]
	test	esi, esi
	jne	SHORT $LN25@destroyTab
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [ebx+12], eax
	mov	esi, eax
$LN25@destroyTab:
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN28@destroyTab
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN42@destroyTab
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN43@destroyTab
$LN42@destroyTab:
	mov	ebx, DWORD PTR _pParse$[esp+20]
$LN28@destroyTab:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR _iLargest$94359[esp+24]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 114			; 00000072H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [esi+564], cl
	jmp	SHORT $LN30@destroyTab
$LN43@destroyTab:
	mov	ebx, DWORD PTR _pParse$[esp+20]
$LN30@destroyTab:
	cmp	ebp, 1
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN24@destroyTab
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN24@destroyTab:
	mov	ecx, DWORD PTR _iLargest$94359[esp+24]
	mov	edx, DWORD PTR [ebx]
	push	ecx
	mov	ecx, DWORD PTR [edx+4]
	push	eax
	lea	eax, DWORD PTR [ebp+ebp*2]
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edx
	push	OFFSET ??_C@_0DG@GHLNPGFA@UPDATE?5?$CFQ?4?$CFs?5SET?5rootpage?$DN?$CFd?5WHE@
	call	_sqlite3NestedParse
; Line 45084
	mov	edx, DWORD PTR _iLargest$94359[esp+40]
; Line 45086
	mov	eax, DWORD PTR _iTab$[esp+40]
	mov	esi, DWORD PTR _pTab$[esp+36]
	add	esp, 16					; 00000010H
	jmp	$LL11@destroyTab
$LN39@destroyTab:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 45088
	add	esp, 8
	ret	0
_destroyTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@ECJPGOGF@unknown?5column?5?$CC?$CFs?$CC?5in?5foreign?5k@ ; `string'
PUBLIC	??_C@_0FO@BDBBNOLJ@number?5of?5columns?5in?5foreign?5key@ ; `string'
PUBLIC	??_C@_0DP@HFDIOLMB@foreign?5key?5on?5?$CFs?5should?5referen@ ; `string'
;	COMDAT ??_C@_0CO@ECJPGOGF@unknown?5column?5?$CC?$CFs?$CC?5in?5foreign?5k@
CONST	SEGMENT
??_C@_0CO@ECJPGOGF@unknown?5column?5?$CC?$CFs?$CC?5in?5foreign?5k@ DB 'un'
	DB	'known column "%s" in foreign key definition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FO@BDBBNOLJ@number?5of?5columns?5in?5foreign?5key@
CONST	SEGMENT
??_C@_0FO@BDBBNOLJ@number?5of?5columns?5in?5foreign?5key@ DB 'number of c'
	DB	'olumns in foreign key does not match the number of columns in'
	DB	' the referenced table', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@HFDIOLMB@foreign?5key?5on?5?$CFs?5should?5referen@
CONST	SEGMENT
??_C@_0DP@HFDIOLMB@foreign?5key?5on?5?$CFs?5should?5referen@ DB 'foreign '
	DB	'key on %s should reference only one column of table %T', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3CreateForeignKey
_TEXT	SEGMENT
_nCol$ = -20						; size = 4
_i$ = -16						; size = 4
_p$ = -12						; size = 4
tv548 = -8						; size = 4
tv248 = -8						; size = 4
tv557 = -4						; size = 4
tv568 = 8						; size = 4
_pParse$ = 8						; size = 4
_pFromCol$ = 12						; size = 4
_pTo$ = 16						; size = 4
_pToCol$ = 20						; size = 4
_flags$ = 24						; size = 4
_sqlite3CreateForeignKey PROC				; COMDAT
; Line 45268
	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pTo$[esp+24]
	push	esi
	push	edi
; Line 45271
	mov	edi, DWORD PTR _pParse$[esp+32]
	mov	esi, DWORD PTR [edi+164]
; Line 45278
	test	esi, esi
	mov	DWORD PTR _p$[esp+36], esi
	je	$LN48@sqlite3Cre
	cmp	DWORD PTR [edi+24], 0
	jne	$LN48@sqlite3Cre
	cmp	BYTE PTR [edi+188], 0
	jne	$LN48@sqlite3Cre
; Line 45279
	mov	ecx, DWORD PTR _pFromCol$[esp+32]
	test	ecx, ecx
	jne	SHORT $LN25@sqlite3Cre
; Line 45280
	mov	eax, DWORD PTR [esi+4]
	sub	eax, 1
; Line 45281
	js	$LN48@sqlite3Cre
; Line 45282
	mov	ecx, DWORD PTR _pToCol$[esp+32]
	test	ecx, ecx
	je	SHORT $LN23@sqlite3Cre
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN23@sqlite3Cre
; Line 45285
	mov	ecx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [eax+eax*4]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	ebp
	push	edx
	push	OFFSET ??_C@_0DP@HFDIOLMB@foreign?5key?5on?5?$CFs?5should?5referen@
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
; Line 45286
	jmp	$LN48@sqlite3Cre
$LN23@sqlite3Cre:
; Line 45288
	mov	DWORD PTR _nCol$[esp+36], 1
	jmp	SHORT $LN20@sqlite3Cre
$LN25@sqlite3Cre:
; Line 45289
	mov	eax, DWORD PTR _pToCol$[esp+32]
	test	eax, eax
	je	SHORT $LN21@sqlite3Cre
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR [ecx]
	je	SHORT $LN21@sqlite3Cre
; Line 45292
	push	OFFSET ??_C@_0FO@BDBBNOLJ@number?5of?5columns?5in?5foreign?5key@
	call	_sqlite3ErrorMsg
; Line 45293
	jmp	$LN54@sqlite3Cre
$LN21@sqlite3Cre:
; Line 45295
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR _nCol$[esp+36], ecx
	mov	ecx, DWORD PTR _pToCol$[esp+32]
$LN20@sqlite3Cre:
; Line 45297
	mov	eax, DWORD PTR _nCol$[esp+36]
	mov	edx, DWORD PTR [ebp+4]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	shr	edx, 1
; Line 45298
	test	ecx, ecx
	lea	edi, DWORD PTR [edx+eax+29]
	je	SHORT $LN16@sqlite3Cre
	mov	eax, DWORD PTR [ecx]
; Line 45299
	test	eax, eax
	jle	SHORT $LN16@sqlite3Cre
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, 4
	mov	DWORD PTR tv248[esp+36], eax
	npad	2
$LL18@sqlite3Cre:
; Line 45300
	mov	eax, DWORD PTR [ecx]
	lea	ebx, DWORD PTR [eax+1]
$LL45@sqlite3Cre:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL45@sqlite3Cre
	sub	eax, ebx
	add	ecx, 12					; 0000000cH
	sub	DWORD PTR tv248[esp+36], 1
	lea	edi, DWORD PTR [edi+eax+1]
	jne	SHORT $LL18@sqlite3Cre
$LN16@sqlite3Cre:
; Line 45303
	call	_sqlite3Malloc
	mov	ebx, eax
; Line 45304
	test	ebx, ebx
	je	$LN48@sqlite3Cre
; Line 45305
	mov	DWORD PTR [ebx], esi
; Line 45306
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [ebx+4], eax
; Line 45309
	mov	eax, DWORD PTR _nCol$[esp+36]
	add	eax, eax
	add	eax, eax
	lea	edi, DWORD PTR [ebx+28]
	mov	DWORD PTR [ebx+20], edi
	add	eax, eax
	add	edi, eax
; Line 45310
	mov	DWORD PTR [ebx+8], edi
; Line 45311
	mov	ecx, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR [ebp]
	shr	ecx, 1
	push	ecx
	push	edx
	push	edi
	call	_memcpy
; Line 45312
	mov	eax, DWORD PTR [ebp+4]
	shr	eax, 1
	mov	BYTE PTR [eax+edi], 0
; Line 45313
	mov	ecx, DWORD PTR [ebp+4]
; Line 45315
	mov	eax, DWORD PTR _nCol$[esp+48]
	shr	ecx, 1
	lea	edi, DWORD PTR [edi+ecx+1]
	xor	ecx, ecx
	add	esp, 12					; 0000000cH
; Line 45316
	cmp	DWORD PTR _pFromCol$[esp+32], ecx
	mov	DWORD PTR [ebx+12], ecx
	mov	DWORD PTR [ebx+16], eax
	jne	SHORT $LN14@sqlite3Cre
; Line 45317
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ebx+20]
	sub	edx, 1
	mov	DWORD PTR [eax], edx
$LN10@sqlite3Cre:
; Line 45335
	cmp	DWORD PTR _pToCol$[esp+32], 0
	je	$LN52@sqlite3Cre
; Line 45336
	xor	ebp, ebp
	cmp	DWORD PTR _nCol$[esp+36], ebp
	jle	$LN52@sqlite3Cre
	xor	edx, edx
	mov	DWORD PTR tv568[esp+32], edx
	jmp	$LN3@sqlite3Cre
$LN14@sqlite3Cre:
; Line 45319
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+36], ecx
	jle	SHORT $LN10@sqlite3Cre
	mov	DWORD PTR tv548[esp+36], ecx
	npad	6
$LL51@sqlite3Cre:
; Line 45321
	xor	ebp, ebp
	cmp	DWORD PTR [esi+4], ebp
	jle	SHORT $LN7@sqlite3Cre
	mov	ecx, DWORD PTR _pFromCol$[esp+32]
	mov	edx, DWORD PTR [ecx+12]
; Line 45358
	mov	eax, DWORD PTR tv548[esp+36]
	mov	ecx, DWORD PTR [edx+eax+4]
	mov	esi, DWORD PTR [esi+8]
	mov	DWORD PTR tv557[esp+36], ecx
	npad	3
$LL50@sqlite3Cre:
	mov	edx, DWORD PTR tv557[esp+36]
	mov	ecx, DWORD PTR [esi]
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN39@sqlite3Cre
	mov	edx, DWORD PTR _p$[esp+36]
	add	ebp, 1
	add	esi, 20					; 00000014H
	cmp	ebp, DWORD PTR [edx+4]
	jl	SHORT $LL50@sqlite3Cre
; Line 45327
	mov	esi, edx
	jmp	SHORT $LN7@sqlite3Cre
$LN39@sqlite3Cre:
; Line 45323
	mov	eax, DWORD PTR [ebx+20]
	mov	ecx, DWORD PTR _i$[esp+36]
	mov	esi, DWORD PTR _p$[esp+36]
	mov	DWORD PTR [eax+ecx*8], ebp
$LN7@sqlite3Cre:
; Line 45327
	cmp	ebp, DWORD PTR [esi+4]
	mov	eax, DWORD PTR _i$[esp+36]
	jge	SHORT $LN40@sqlite3Cre
	add	DWORD PTR tv548[esp+36], 12		; 0000000cH
	add	eax, 1
	cmp	eax, DWORD PTR _nCol$[esp+36]
	mov	DWORD PTR _i$[esp+36], eax
	jl	SHORT $LL51@sqlite3Cre
	jmp	$LN10@sqlite3Cre
$LN40@sqlite3Cre:
; Line 45330
	mov	edi, DWORD PTR _pParse$[esp+32]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _pFromCol$[esp+32]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+edx*4+4]
	push	edx
	push	OFFSET ??_C@_0CO@ECJPGOGF@unknown?5column?5?$CC?$CFs?$CC?5in?5foreign?5k@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 45355
	push	ebx
$fk_end$94450:
	call	_free
$LN54@sqlite3Cre:
	add	esp, 4
$LN48@sqlite3Cre:
; Line 45357
	mov	ebx, DWORD PTR _pFromCol$[esp+32]
	call	_sqlite3ExprListDelete
; Line 45358
	mov	ebx, DWORD PTR _pToCol$[esp+32]
	call	_sqlite3ExprListDelete
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 45359
	add	esp, 20					; 00000014H
	ret	0
$LL47@sqlite3Cre:
; Line 45336
	mov	edx, DWORD PTR tv568[esp+32]
$LN3@sqlite3Cre:
; Line 45337
	mov	eax, DWORD PTR _pToCol$[esp+32]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [edx+ecx+4]
	lea	esi, DWORD PTR [eax+1]
$LL46@sqlite3Cre:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL46@sqlite3Cre
; Line 45339
	mov	ecx, DWORD PTR _pToCol$[esp+32]
	sub	eax, esi
	mov	esi, eax
	mov	eax, DWORD PTR [ebx+20]
	mov	DWORD PTR [eax+ebp*8+4], edi
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edx+eax+4]
	push	esi
	push	ecx
	push	edi
	call	_memcpy
	add	DWORD PTR tv568[esp+44], 12		; 0000000cH
	add	ebp, 1
	add	esp, 12					; 0000000cH
	cmp	ebp, DWORD PTR _nCol$[esp+36]
; Line 45340
	mov	BYTE PTR [esi+edi], 0
; Line 45341
	lea	edi, DWORD PTR [esi+edi+1]
	jl	SHORT $LL47@sqlite3Cre
; Line 45336
	mov	esi, DWORD PTR _p$[esp+36]
$LN52@sqlite3Cre:
; Line 45345
	mov	eax, DWORD PTR _flags$[esp+32]
; Line 45346
	mov	edx, eax
	mov	BYTE PTR [ebx+26], al
	sar	edx, 8
; Line 45347
	sar	eax, 16					; 00000010H
	mov	BYTE PTR [ebx+24], 0
	mov	BYTE PTR [ebx+25], dl
	mov	BYTE PTR [ebx+27], al
; Line 45351
	mov	DWORD PTR [esi+36], ebx
; Line 45355
	jmp	$LN48@sqlite3Cre
_sqlite3CreateForeignKey ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3MinimumFileFormat
_TEXT	SEGMENT
_iDb$ = 8						; size = 4
_minFormat$ = 12					; size = 4
_sqlite3MinimumFileFormat PROC				; COMDAT
; _pParse$ = ebx
; Line 45882
	push	ebp
	mov	ebp, DWORD PTR _minFormat$[esp]
	push	esi
; Line 45884
	mov	esi, DWORD PTR [ebx+12]
	test	esi, esi
	push	edi
	jne	SHORT $LN9@sqlite3Min
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	esi, eax
; Line 45885
	test	esi, esi
	mov	DWORD PTR [ebx+12], eax
	je	SHORT $LN1@sqlite3Min
$LN9@sqlite3Min:
; Line 45886
	mov	edi, DWORD PTR _iDb$[esp+8]
	push	1
	push	edi
	push	115					; 00000073H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 45887
	push	0
	push	ebp
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 45888
	mov	eax, DWORD PTR [esi+12]
	add	eax, 3
	push	eax
	push	0
	push	72					; 00000048H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 45889
	push	0
	push	ebp
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 45890
	push	1
	push	edi
	push	4
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 60					; 0000003cH
$LN1@sqlite3Min:
	pop	edi
	pop	esi
	pop	ebp
; Line 45892
	ret	0
_sqlite3MinimumFileFormat ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ArrayAllocate
_TEXT	SEGMENT
_szEntry$ = 8						; size = 4
_pnAlloc$ = 12						; size = 4
_pIdx$ = 16						; size = 4
_sqlite3ArrayAllocate PROC				; COMDAT
; _pArray$ = eax
; _initSize$ = ecx
; _pnEntry$ = esi
; Line 46015
	push	ebx
	mov	ebx, eax
; Line 46017
	mov	eax, DWORD PTR _pnAlloc$[esp]
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [esi], eax
	push	ebp
	push	edi
	jl	SHORT $LN20@sqlite3Arr
; Line 46020
	lea	ebp, DWORD PTR [ecx+eax*2]
; Line 46021
	mov	edi, ebp
	imul	edi, DWORD PTR _szEntry$[esp+8]
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN12@sqlite3Arr
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN19@sqlite3Arr
$LN12@sqlite3Arr:
	test	ebx, ebx
	jne	SHORT $LN11@sqlite3Arr
	call	_sqlite3Malloc
	jmp	SHORT $LN10@sqlite3Arr
$LN11@sqlite3Arr:
	push	edi
	push	ebx
	call	_realloc
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN6@sqlite3Arr
	call	_sqlite3FailedMalloc
$LN6@sqlite3Arr:
	mov	eax, ecx
$LN10@sqlite3Arr:
; Line 46022
	test	eax, eax
	jne	SHORT $LN1@sqlite3Arr
$LN19@sqlite3Arr:
; Line 46023
	mov	edx, DWORD PTR _pIdx$[esp+8]
	pop	edi
	pop	ebp
; Line 46033
	mov	eax, ebx
	mov	DWORD PTR [edx], -1
	pop	ebx
; Line 46034
	ret	0
$LN1@sqlite3Arr:
; Line 46026
	mov	ecx, DWORD PTR _pnAlloc$[esp+8]
	mov	DWORD PTR [ecx], ebp
; Line 46027
	mov	ebx, eax
$LN20@sqlite3Arr:
; Line 46030
	mov	eax, DWORD PTR _szEntry$[esp+8]
	mov	edx, DWORD PTR [esi]
	imul	edx, eax
	push	eax
	add	edx, ebx
	push	0
	push	edx
	call	_memset
; Line 46031
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _pIdx$[esp+20]
	add	esp, 12					; 0000000cH
	pop	edi
	mov	DWORD PTR [ecx], eax
; Line 46032
	add	DWORD PTR [esi], 1
	pop	ebp
; Line 46033
	mov	eax, ebx
	pop	ebx
; Line 46034
	ret	0
_sqlite3ArrayAllocate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3IdListAppend
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pToken$ = 8						; size = 4
_sqlite3IdListAppend PROC				; COMDAT
; _pList$ = eax
; Line 46042
	push	ecx
	push	esi
	push	edi
	mov	edi, eax
; Line 46044
	test	edi, edi
	jne	SHORT $LN3@sqlite3IdL@4
; Line 46045
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN13@sqlite3IdL@4
	test	esi, esi
	jg	SHORT $LN6@sqlite3IdL@4
$LN13@sqlite3IdL@4:
	push	12					; 0000000cH
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN31@sqlite3IdL@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN23@sqlite3IdL@4
	test	esi, esi
	jg	SHORT $LN6@sqlite3IdL@4
$LN23@sqlite3IdL@4:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN6@sqlite3IdL@4
$LN31@sqlite3IdL@4:
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
$LN6@sqlite3IdL@4:
; Line 46046
	test	eax, eax
	mov	edi, eax
	je	SHORT $LN32@sqlite3IdL@4
; Line 46047
	mov	DWORD PTR [eax+8], 0
$LN3@sqlite3IdL@4:
; Line 46056
	lea	eax, DWORD PTR _i$[esp+12]
	push	eax
	mov	eax, DWORD PTR [edi]
	lea	ecx, DWORD PTR [edi+8]
	push	ecx
	lea	esi, DWORD PTR [edi+4]
	push	8
	mov	ecx, 5
	call	_sqlite3ArrayAllocate
; Line 46057
	mov	esi, DWORD PTR _i$[esp+24]
	add	esp, 12					; 0000000cH
	test	esi, esi
	mov	DWORD PTR [edi], eax
	jge	SHORT $LN1@sqlite3IdL@4
; Line 46058
	call	_sqlite3IdListDelete
$LN32@sqlite3IdL@4:
	pop	edi
; Line 46059
	xor	eax, eax
	pop	esi
; Line 46063
	pop	ecx
	ret	0
$LN1@sqlite3IdL@4:
; Line 46061
	mov	eax, DWORD PTR _pToken$[esp+8]
	call	_sqlite3NameFromToken
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [edx+esi*8], eax
; Line 46062
	mov	eax, edi
	pop	edi
	pop	esi
; Line 46063
	pop	ecx
	ret	0
_sqlite3IdListAppend ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SrcListAppend
_TEXT	SEGMENT
_pTable$ = 8						; size = 4
_sqlite3SrcListAppend PROC				; COMDAT
; _pList$ = ecx
; _pDatabase$ = eax
; Line 46116
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pTable$[esp+4]
	push	esi
	mov	esi, ecx
; Line 46118
	test	esi, esi
	push	edi
; Line 46119
	mov	edi, DWORD PTR _inMutex
	mov	ebx, eax
	jne	SHORT $LN6@sqlite3Src@5
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN16@sqlite3Src@5
	test	edi, edi
	jg	SHORT $LN51@sqlite3Src@5
$LN16@sqlite3Src@5:
	push	56					; 00000038H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN49@sqlite3Src@5
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN26@sqlite3Src@5
	test	edi, edi
	jg	SHORT $LN51@sqlite3Src@5
$LN26@sqlite3Src@5:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN51@sqlite3Src@5
$LN49@sqlite3Src@5:
	push	56					; 00000038H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN51@sqlite3Src@5:
; Line 46120
	test	esi, esi
	je	SHORT $LN53@sqlite3Src@5
; Line 46121
	mov	WORD PTR [esi+2], 1
$LN6@sqlite3Src@5:
; Line 46123
	movzx	eax, WORD PTR [esi+2]
	cmp	WORD PTR [esi], ax
	jl	SHORT $LN4@sqlite3Src@5
; Line 46125
	add	eax, eax
	mov	WORD PTR [esi+2], ax
; Line 46127
	movsx	eax, ax
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 4
	add	eax, 8
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN41@sqlite3Src@5
	test	edi, edi
	jg	SHORT $LN48@sqlite3Src@5
$LN41@sqlite3Src@5:
	push	eax
	push	esi
	call	_realloc
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@sqlite3Src@5
	call	_sqlite3FailedMalloc
$LN48@sqlite3Src@5:
; Line 46129
	push	esi
	call	_sqlite3SrcListDelete
	add	esp, 4
$LN53@sqlite3Src@5:
	pop	edi
	pop	esi
	pop	ebp
; Line 46130
	xor	eax, eax
	pop	ebx
; Line 46150
	ret	0
$LN3@sqlite3Src@5:
; Line 46132
	mov	esi, eax
$LN4@sqlite3Src@5:
; Line 46134
	movsx	eax, WORD PTR [esi]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 4
; Line 46135
	push	48					; 00000030H
	lea	edi, DWORD PTR [eax+esi+8]
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
; Line 46136
	test	ebx, ebx
	je	SHORT $LN1@sqlite3Src@5
	cmp	DWORD PTR [ebx], 0
	jne	SHORT $LN2@sqlite3Src@5
; Line 46137
	xor	ebx, ebx
; Line 46139
	jmp	SHORT $LN1@sqlite3Src@5
$LN2@sqlite3Src@5:
	test	ebp, ebp
	je	SHORT $LN1@sqlite3Src@5
; Line 46140
	mov	eax, ebx
; Line 46141
	mov	ebx, ebp
; Line 46142
	mov	ebp, eax
$LN1@sqlite3Src@5:
; Line 46144
	mov	eax, ebp
	call	_sqlite3NameFromToken
	mov	DWORD PTR [edi+4], eax
; Line 46145
	mov	eax, ebx
	call	_sqlite3NameFromToken
	mov	DWORD PTR [edi], eax
; Line 46146
	mov	DWORD PTR [edi+24], -1
; Line 46147
	mov	BYTE PTR [edi+20], 0
; Line 46148
	add	WORD PTR [esi], 1
	pop	edi
; Line 46149
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 46150
	ret	0
_sqlite3SrcListAppend ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SrcListAppendFromTerm
_TEXT	SEGMENT
_pDatabase$ = 8						; size = 4
_pSubquery$ = 12					; size = 4
_pOn$ = 16						; size = 4
_pUsing$ = 20						; size = 4
_sqlite3SrcListAppendFromTerm PROC			; COMDAT
; _p$ = ecx
; _pTable$ = eax
; _pAlias$ = edx
; Line 46213
	push	ebp
	mov	ebp, DWORD PTR _pSubquery$[esp]
	push	esi
	push	edi
; Line 46215
	push	eax
	mov	eax, DWORD PTR _pDatabase$[esp+12]
	mov	edi, edx
	call	_sqlite3SrcListAppend
	mov	esi, eax
	add	esp, 4
; Line 46216
	test	esi, esi
	je	SHORT $LN2@sqlite3Src@6
	movzx	eax, WORD PTR [esi]
	test	ax, ax
	je	SHORT $LN2@sqlite3Src@6
; Line 46222
	movsx	eax, ax
	lea	ecx, DWORD PTR [eax+eax*2]
	shl	ecx, 4
; Line 46223
	test	edi, edi
	push	ebx
	lea	ebx, DWORD PTR [ecx+esi-40]
	je	SHORT $LN1@sqlite3Src@6
	test	DWORD PTR [edi+4], -2			; fffffffeH
	je	SHORT $LN1@sqlite3Src@6
; Line 46224
	mov	eax, edi
	call	_sqlite3NameFromToken
	mov	DWORD PTR [ebx+8], eax
$LN1@sqlite3Src@6:
; Line 46228
	mov	eax, DWORD PTR _pUsing$[esp+12]
	mov	edx, DWORD PTR _pOn$[esp+12]
	mov	DWORD PTR [ebx+16], ebp
	mov	DWORD PTR [ebx+32], eax
	mov	DWORD PTR [ebx+28], edx
	pop	ebx
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 46230
	ret	0
$LN2@sqlite3Src@6:
; Line 46217
	mov	ecx, DWORD PTR _pOn$[esp+8]
	push	ecx
	call	_sqlite3ExprDelete
; Line 46218
	mov	edi, DWORD PTR _pUsing$[esp+12]
	add	esp, 4
	call	_sqlite3IdListDelete
; Line 46219
	test	ebp, ebp
	je	SHORT $LN12@sqlite3Src@6
	push	ebp
	call	_clearSelect
	push	ebp
	call	_free
	add	esp, 8
$LN12@sqlite3Src@6:
	pop	edi
; Line 46220
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 46230
	ret	0
_sqlite3SrcListAppendFromTerm ENDP
_TEXT	ENDS
PUBLIC	??_C@_05ILMMJGEC@BEGIN?$AA@			; `string'
;	COMDAT ??_C@_05ILMMJGEC@BEGIN?$AA@
CONST	SEGMENT
??_C@_05ILMMJGEC@BEGIN?$AA@ DB 'BEGIN', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3BeginTransaction
_TEXT	SEGMENT
_type$ = 8						; size = 4
_sqlite3BeginTransaction PROC				; COMDAT
; _pParse$ = eax
; Line 46260
	push	ebp
	mov	ebp, DWORD PTR _type$[esp]
	push	esi
	mov	esi, eax
; Line 46265
	test	esi, esi
	je	$LN7@sqlite3Beg
	push	ebx
	mov	ebx, DWORD PTR [esi]
	test	ebx, ebx
	je	$LN17@sqlite3Beg
	mov	eax, DWORD PTR [ebx+4]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN17@sqlite3Beg
; Line 46266
	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN17@sqlite3Beg
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN8@sqlite3Beg
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN17@sqlite3Beg
$LN8@sqlite3Beg:
; Line 46267
	push	0
	push	0
	push	OFFSET ??_C@_05ILMMJGEC@BEGIN?$AA@
	push	22					; 00000016H
	mov	eax, esi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN17@sqlite3Beg
	push	edi
; Line 46269
	call	_sqlite3GetVdbe
	mov	edi, eax
; Line 46270
	test	edi, edi
	je	SHORT $LN18@sqlite3Beg
; Line 46271
	cmp	ebp, 7
	je	SHORT $LN1@sqlite3Beg
; Line 46272
	xor	esi, esi
	cmp	DWORD PTR [ebx], esi
	jle	SHORT $LN1@sqlite3Beg
; Line 46273
	xor	ecx, ecx
	cmp	ebp, 9
	sete	cl
	lea	ebp, DWORD PTR [ecx+1]
$LL3@sqlite3Beg:
	push	ebp
	push	esi
	push	106					; 0000006aH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esi, 1
	add	esp, 12					; 0000000cH
	cmp	esi, DWORD PTR [ebx]
	jl	SHORT $LL3@sqlite3Beg
$LN1@sqlite3Beg:
; Line 46276
	push	0
	push	0
	push	17					; 00000011H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN18@sqlite3Beg:
	pop	edi
$LN17@sqlite3Beg:
	pop	ebx
$LN7@sqlite3Beg:
	pop	esi
	pop	ebp
; Line 46277
	ret	0
_sqlite3BeginTransaction ENDP
_TEXT	ENDS
PUBLIC	??_C@_06IBPPMFNL@COMMIT?$AA@			; `string'
;	COMDAT ??_C@_06IBPPMFNL@COMMIT?$AA@
CONST	SEGMENT
??_C@_06IBPPMFNL@COMMIT?$AA@ DB 'COMMIT', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3CommitTransaction
_TEXT	SEGMENT
_sqlite3CommitTransaction PROC				; COMDAT
; _pParse$ = eax
; Line 46282
	push	esi
	mov	esi, eax
; Line 46286
	test	esi, esi
	je	SHORT $LN3@sqlite3Com@2
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@sqlite3Com@2
	mov	eax, DWORD PTR [eax+4]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@sqlite3Com@2
; Line 46287
	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN3@sqlite3Com@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN4@sqlite3Com@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN3@sqlite3Com@2
$LN4@sqlite3Com@2:
; Line 46288
	push	0
	push	0
	push	OFFSET ??_C@_06IBPPMFNL@COMMIT?$AA@
	push	22					; 00000016H
	mov	eax, esi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN3@sqlite3Com@2
; Line 46290
	call	_sqlite3GetVdbe
; Line 46291
	test	eax, eax
	je	SHORT $LN3@sqlite3Com@2
; Line 46292
	push	0
	push	1
	push	17					; 00000011H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN3@sqlite3Com@2:
	pop	esi
; Line 46294
	ret	0
_sqlite3CommitTransaction ENDP
_TEXT	ENDS
PUBLIC	??_C@_08COBEBGNM@ROLLBACK?$AA@			; `string'
;	COMDAT ??_C@_08COBEBGNM@ROLLBACK?$AA@
CONST	SEGMENT
??_C@_08COBEBGNM@ROLLBACK?$AA@ DB 'ROLLBACK', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3RollbackTransaction
_TEXT	SEGMENT
_sqlite3RollbackTransaction PROC			; COMDAT
; _pParse$ = eax
; Line 46299
	push	esi
	mov	esi, eax
; Line 46303
	test	esi, esi
	je	SHORT $LN3@sqlite3Rol
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@sqlite3Rol
	mov	eax, DWORD PTR [eax+4]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@sqlite3Rol
; Line 46304
	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN3@sqlite3Rol
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN4@sqlite3Rol
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN3@sqlite3Rol
$LN4@sqlite3Rol:
; Line 46305
	push	0
	push	0
	push	OFFSET ??_C@_08COBEBGNM@ROLLBACK?$AA@
	push	22					; 00000016H
	mov	eax, esi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN3@sqlite3Rol
; Line 46307
	call	_sqlite3GetVdbe
; Line 46308
	test	eax, eax
	je	SHORT $LN3@sqlite3Rol
; Line 46309
	push	1
	push	1
	push	17					; 00000011H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN3@sqlite3Rol:
	pop	esi
; Line 46311
	ret	0
_sqlite3RollbackTransaction ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _callCollNeeded
_TEXT	SEGMENT
_zName$ = 8						; size = 4
_callCollNeeded PROC					; COMDAT
; _db$ = ebx
; _nName$ = eax
; Line 46607
	push	ebp
	mov	ebp, DWORD PTR _zName$[esp]
	push	esi
	push	edi
	mov	edi, eax
; Line 46609
	test	edi, edi
	jge	SHORT $LN5@callCollNe
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
$LL48@callCollNe:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL48@callCollNe
	sub	eax, edx
	mov	edi, eax
$LN5@callCollNe:
; Line 46610
	cmp	DWORD PTR [ebx+128], 0
	je	SHORT $LN15@callCollNe
; Line 46611
	test	ebp, ebp
	je	$LN45@callCollNe
	lea	ecx, DWORD PTR [edi+1]
	call	_sqlite3MallocRaw
	mov	esi, eax
	test	esi, esi
	je	$LN45@callCollNe
	push	edi
	push	ebp
	push	esi
	call	_memcpy
	mov	BYTE PTR [esi+edi], 0
; Line 46613
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+121]
	mov	eax, DWORD PTR [ebx+136]
	mov	ecx, DWORD PTR [ebx+128]
	push	esi
	push	edx
	push	ebx
	push	eax
	call	ecx
; Line 46614
	push	esi
	call	_free
	add	esp, 32					; 00000020H
$LN15@callCollNe:
; Line 46617
	cmp	DWORD PTR [ebx+132], 0
	je	SHORT $LN45@callCollNe
; Line 46619
	call	_sqlite3ValueNew
	mov	esi, eax
; Line 46620
	test	esi, esi
	je	SHORT $LN17@callCollNe
	push	0
	push	1
	push	edi
	push	ebp
	push	esi
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
$LN17@callCollNe:
; Line 46621
	mov	al, 2
	mov	ecx, esi
	call	_sqlite3ValueText
; Line 46622
	test	eax, eax
	je	SHORT $LN1@callCollNe
; Line 46623
	mov	edx, DWORD PTR [ebx+4]
	push	eax
	mov	eax, DWORD PTR [edx+20]
	movzx	ecx, BYTE PTR [eax+121]
	mov	edx, DWORD PTR [ebx+136]
	mov	eax, DWORD PTR [ebx+132]
	push	ecx
	push	ebx
	push	edx
	call	eax
	add	esp, 16					; 00000010H
$LN1@callCollNe:
; Line 46625
	test	esi, esi
	je	SHORT $LN45@callCollNe
	push	esi
	call	_sqlite3VdbeMemRelease
	push	esi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	call	_free
	add	esp, 8
$LN45@callCollNe:
	pop	edi
	pop	esi
	pop	ebp
; Line 46628
	ret	0
_callCollNeeded ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _synthCollSeq
_TEXT	SEGMENT
$T118832 = -8						; size = 1
_n$ = -4						; size = 4
_db$ = 8						; size = 4
_pColl$ = 12						; size = 4
_synthCollSeq PROC					; COMDAT
; Line 46637
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
; Line 46639
	mov	esi, DWORD PTR _pColl$[esp+16]
	mov	ebp, DWORD PTR [esi]
; Line 46640
	mov	eax, ebp
	push	edi
	lea	edx, DWORD PTR [eax+1]
$LL36@synthCollS:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL36@synthCollS
	sub	eax, edx
	mov	DWORD PTR _n$[esp+24], eax
; Line 46643
	xor	ebx, ebx
	jmp	SHORT $LN4@synthCollS
	npad	11
$LL38@synthCollS:
	mov	eax, DWORD PTR _n$[esp+24]
$LN4@synthCollS:
; Line 46644
	test	ebp, ebp
	mov	cl, BYTE PTR ?aEnc@?1??synthCollSeq@@9@9[ebx]
	mov	BYTE PTR $T118832[esp+24], cl
	je	SHORT $LN9@synthCollS
	test	eax, eax
	mov	edi, eax
	jge	SHORT $LN15@synthCollS
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL37@synthCollS:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL37@synthCollS
	sub	eax, edx
	mov	edi, eax
$LN15@synthCollS:
	mov	esi, DWORD PTR _db$[esp+20]
	add	esi, 248				; 000000f8H
	je	SHORT $LN18@synthCollS
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN18@synthCollS
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN24@synthCollS
	mov	eax, OFFSET _binHash
$LN24@synthCollS:
	push	edi
	push	ebp
	call	eax
	mov	edx, DWORD PTR [esi+20]
	sub	edx, 1
	push	edi
	and	edx, eax
	push	ebp
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN18@synthCollS
	mov	eax, DWORD PTR [eax+8]
	mov	esi, DWORD PTR _pColl$[esp+20]
	jmp	SHORT $LN8@synthCollS
$LN18@synthCollS:
	mov	esi, DWORD PTR _pColl$[esp+20]
	xor	eax, eax
	jmp	SHORT $LN8@synthCollS
$LN9@synthCollS:
	mov	edx, DWORD PTR _db$[esp+20]
	mov	eax, DWORD PTR [edx+28]
$LN8@synthCollS:
	test	eax, eax
	je	SHORT $LN7@synthCollS
	movzx	ecx, BYTE PTR $T118832[esp+24]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax+ecx*4-20]
$LN7@synthCollS:
; Line 46645
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN34@synthCollS
	add	ebx, 1
	cmp	ebx, 3
	jl	$LL38@synthCollS
	pop	edi
	pop	esi
	pop	ebp
; Line 46651
	mov	eax, 1
	pop	ebx
; Line 46652
	add	esp, 8
	ret	0
$LN34@synthCollS:
; Line 46646
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [esi], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+8], edx
	mov	ecx, DWORD PTR [eax+12]
	pop	edi
	mov	DWORD PTR [esi+12], ecx
; Line 46647
	mov	DWORD PTR [esi+16], 0
	pop	esi
	pop	ebp
; Line 46648
	xor	eax, eax
	pop	ebx
; Line 46652
	add	esp, 8
	ret	0
_synthCollSeq ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3GetCollSeq
_TEXT	SEGMENT
_zName$ = 8						; size = 4
_nName$ = 12						; size = 4
_sqlite3GetCollSeq PROC					; COMDAT
; _db$ = edi
; _pColl$ = eax
; Line 46672
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zName$[esp+4]
	push	esi
	mov	esi, eax
; Line 46676
	test	esi, esi
	jne	SHORT $LN21@sqlite3Get@5
; Line 46677
	test	ebp, ebp
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax+20]
	mov	bl, BYTE PTR [ecx+121]
	je	SHORT $LN9@sqlite3Get@5
	mov	eax, DWORD PTR _nName$[esp+8]
	push	esi
	push	ebp
	push	edi
	call	_findCollSeqEntry
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@sqlite3Get@5
$LN9@sqlite3Get@5:
	mov	eax, DWORD PTR [edi+28]
$LN8@sqlite3Get@5:
	test	eax, eax
	je	SHORT $LN7@sqlite3Get@5
	movzx	ecx, bl
	lea	edx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax+edx*4-20]
$LN7@sqlite3Get@5:
; Line 46679
	test	eax, eax
	mov	esi, eax
	je	SHORT $LN2@sqlite3Get@5
$LN21@sqlite3Get@5:
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN3@sqlite3Get@5
$LN2@sqlite3Get@5:
; Line 46683
	mov	eax, DWORD PTR _nName$[esp+8]
	push	ebp
	mov	ebx, edi
	call	_callCollNeeded
; Line 46684
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax+20]
	mov	bl, BYTE PTR [ecx+121]
	add	esp, 4
	test	ebp, ebp
	je	SHORT $LN14@sqlite3Get@5
	mov	eax, DWORD PTR _nName$[esp+8]
	push	0
	push	ebp
	push	edi
	call	_findCollSeqEntry
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN13@sqlite3Get@5
$LN14@sqlite3Get@5:
	mov	eax, DWORD PTR [edi+28]
$LN13@sqlite3Get@5:
	test	eax, eax
	je	SHORT $LN12@sqlite3Get@5
	movzx	ecx, bl
	lea	edx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax+edx*4-20]
$LN12@sqlite3Get@5:
	mov	esi, eax
$LN3@sqlite3Get@5:
; Line 46686
	test	esi, esi
	je	SHORT $LN20@sqlite3Get@5
	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN20@sqlite3Get@5
	push	esi
	push	edi
	call	_synthCollSeq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@sqlite3Get@5
	pop	esi
	pop	ebp
; Line 46687
	xor	eax, eax
	pop	ebx
; Line 46691
	ret	0
$LN20@sqlite3Get@5:
; Line 46690
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 46691
	ret	0
_sqlite3GetCollSeq ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@CGLMEPGG@no?5such?5collation?5sequence?3?5?$CFs?$AA@ ; `string'
;	COMDAT ??_C@_0BP@CGLMEPGG@no?5such?5collation?5sequence?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BP@CGLMEPGG@no?5such?5collation?5sequence?3?5?$CFs?$AA@ DB 'no suc'
	DB	'h collation sequence: %s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3CheckCollSeq
_TEXT	SEGMENT
_sqlite3CheckCollSeq PROC				; COMDAT
; _pParse$ = esi
; _pColl$ = eax
; Line 46705
	test	eax, eax
	push	ebx
	push	edi
	je	SHORT $LN2@sqlite3Che@2
; Line 46706
	mov	ebx, DWORD PTR [eax]
; Line 46707
	mov	edi, DWORD PTR [esi]
	push	-1
	push	ebx
	call	_sqlite3GetCollSeq
	add	esp, 8
; Line 46708
	test	eax, eax
	jne	SHORT $LN2@sqlite3Che@2
; Line 46709
	cmp	DWORD PTR [esi+24], eax
	jne	SHORT $LN1@sqlite3Che@2
; Line 46710
	push	ebx
	push	OFFSET ??_C@_0BP@CGLMEPGG@no?5such?5collation?5sequence?3?5?$CFs?$AA@
	mov	edi, esi
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN1@sqlite3Che@2:
; Line 46712
	mov	eax, 1
	add	DWORD PTR [esi+24], eax
	pop	edi
	pop	ebx
; Line 46718
	ret	0
$LN2@sqlite3Che@2:
	pop	edi
; Line 46717
	xor	eax, eax
	pop	ebx
; Line 46718
	ret	0
_sqlite3CheckCollSeq ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SchemaFree
_TEXT	SEGMENT
_pElem$ = -60						; size = 4
_temp2$ = -56						; size = 28
_temp1$ = -28						; size = 28
_p$ = 8							; size = 4
_sqlite3SchemaFree PROC					; COMDAT
; Line 46911
	sub	esp, 60					; 0000003cH
	push	ebx
; Line 46917
	mov	ebx, DWORD PTR _p$[esp+60]
; Line 46918
	lea	eax, DWORD PTR [ebx+60]
	push	ebp
	push	esi
	push	edi
	lea	ebp, DWORD PTR [ebx+4]
	mov	ecx, 7
	mov	esi, ebp
	lea	edi, DWORD PTR _temp1$[esp+76]
	rep movsd
	mov	esi, eax
	mov	ecx, 7
	lea	edi, DWORD PTR _temp2$[esp+76]
	rep movsd
; Line 46919
	xor	edi, edi
; Line 46920
	lea	esi, DWORD PTR [ebx+88]
	mov	BYTE PTR [eax], 3
	mov	BYTE PTR [eax+1], 0
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+20], edi
	mov	DWORD PTR [eax+24], edi
	mov	DWORD PTR [eax+12], OFFSET _sqlite3MallocX
	mov	DWORD PTR [eax+16], OFFSET _sqlite3FreeX
	call	_sqlite3HashClear
; Line 46921
	lea	esi, DWORD PTR [ebx+32]
	call	_sqlite3HashClear
; Line 46922
	mov	eax, DWORD PTR _temp2$[esp+84]
	cmp	eax, edi
	mov	DWORD PTR _pElem$[esp+76], eax
	je	$LN4@sqlite3Sch@2
	npad	2
$LL64@sqlite3Sch@2:
; Line 46923
	mov	eax, DWORD PTR _pElem$[esp+76]
	mov	ebx, DWORD PTR [eax+8]
	cmp	ebx, edi
	je	$LN5@sqlite3Sch@2
	mov	ecx, DWORD PTR [ebx+36]
	push	ecx
	call	_sqlite3DeleteTriggerStep
	mov	eax, DWORD PTR [ebx]
	add	esp, 4
	cmp	eax, edi
	je	SHORT $LN18@sqlite3Sch@2
	push	eax
	call	_free
	add	esp, 4
$LN18@sqlite3Sch@2:
	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, edi
	je	SHORT $LN23@sqlite3Sch@2
	push	eax
	call	_free
	add	esp, 4
$LN23@sqlite3Sch@2:
	mov	edx, DWORD PTR [ebx+12]
	push	edx
	call	_sqlite3ExprDelete
	mov	esi, DWORD PTR [ebx+16]
	add	esp, 4
	cmp	esi, edi
	je	SHORT $LN44@sqlite3Sch@2
	cmp	DWORD PTR [esi+4], 0
	jle	SHORT $LN25@sqlite3Sch@2
$LL65@sqlite3Sch@2:
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+edi*8]
	test	eax, eax
	je	SHORT $LN26@sqlite3Sch@2
	push	eax
	call	_free
	add	esp, 4
$LN26@sqlite3Sch@2:
	add	edi, 1
	cmp	edi, DWORD PTR [esi+4]
	jl	SHORT $LL65@sqlite3Sch@2
$LN25@sqlite3Sch@2:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN39@sqlite3Sch@2
	push	eax
	call	_free
	add	esp, 4
$LN39@sqlite3Sch@2:
	push	esi
	call	_free
	add	esp, 4
	xor	edi, edi
$LN44@sqlite3Sch@2:
	test	BYTE PTR [ebx+24], 1
	je	SHORT $LN49@sqlite3Sch@2
	mov	eax, DWORD PTR [ebx+20]
	cmp	eax, edi
	je	SHORT $LN49@sqlite3Sch@2
	push	eax
	call	_free
	add	esp, 4
$LN49@sqlite3Sch@2:
	push	ebx
	call	_free
	add	esp, 4
$LN5@sqlite3Sch@2:
	mov	ecx, DWORD PTR _pElem$[esp+76]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, edi
	mov	DWORD PTR _pElem$[esp+76], eax
	jne	$LL64@sqlite3Sch@2
; Line 46922
	mov	ebx, DWORD PTR _p$[esp+72]
$LN4@sqlite3Sch@2:
; Line 46925
	lea	esi, DWORD PTR _temp2$[esp+76]
	call	_sqlite3HashClear
; Line 46927
	mov	esi, DWORD PTR _temp1$[esp+84]
	cmp	esi, edi
	mov	BYTE PTR [ebp], 3
	mov	BYTE PTR [ebp+1], 0
	mov	DWORD PTR [ebp+8], edi
	mov	DWORD PTR [ebp+4], edi
	mov	DWORD PTR [ebp+20], edi
	mov	DWORD PTR [ebp+24], edi
	mov	DWORD PTR [ebp+12], OFFSET _sqlite3MallocX
	mov	DWORD PTR [ebp+16], OFFSET _sqlite3FreeX
	je	SHORT $LN1@sqlite3Sch@2
	npad	1
$LL3@sqlite3Sch@2:
; Line 46929
	mov	edx, DWORD PTR [esi+8]
	push	edx
	call	_sqlite3DeleteTable
	mov	esi, DWORD PTR [esi]
	add	esp, 4
	cmp	esi, edi
	jne	SHORT $LL3@sqlite3Sch@2
$LN1@sqlite3Sch@2:
; Line 46931
	lea	esi, DWORD PTR _temp1$[esp+76]
	call	_sqlite3HashClear
; Line 46933
	and	WORD PTR [ebx+122], 65534		; 0000fffeH
	mov	DWORD PTR [ebx+116], edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 46934
	add	esp, 60					; 0000003cH
	ret	0
_sqlite3SchemaFree ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SchemaGet
_TEXT	SEGMENT
_sqlite3SchemaGet PROC					; COMDAT
; _pBt$ = eax
; Line 46940
	push	ebx
; Line 46942
	xor	ebx, ebx
	cmp	eax, ebx
	push	esi
	push	edi
	je	SHORT $LN3@sqlite3Sch@3
; Line 46943
	mov	edi, DWORD PTR [eax+4]
	cmp	DWORD PTR [edi+60], ebx
	jne	SHORT $LN6@sqlite3Sch@3
	xor	esi, esi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	push	ebp
	mov	ebp, DWORD PTR _inMutex
	je	SHORT $LN16@sqlite3Sch@3
	cmp	ebp, ebx
	jg	SHORT $LN9@sqlite3Sch@3
$LN16@sqlite3Sch@3:
	push	132					; 00000084H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	cmp	esi, ebx
	jne	SHORT $LN67@sqlite3Sch@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN26@sqlite3Sch@3
	cmp	ebp, ebx
	jg	SHORT $LN9@sqlite3Sch@3
$LN26@sqlite3Sch@3:
	add	ebp, 1
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	mov	DWORD PTR _inMutex, ebp
	mov	DWORD PTR [edi+60], esi
	mov	DWORD PTR [edi+64], OFFSET _sqlite3SchemaFree
	pop	ebp
	mov	eax, esi
; Line 46944
	jmp	SHORT $LN2@sqlite3Sch@3
$LN67@sqlite3Sch@3:
; Line 46943
	push	132					; 00000084H
	push	ebx
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN9@sqlite3Sch@3:
	mov	DWORD PTR [edi+60], esi
	mov	DWORD PTR [edi+64], OFFSET _sqlite3SchemaFree
	pop	ebp
$LN6@sqlite3Sch@3:
	mov	eax, DWORD PTR [edi+60]
; Line 46944
	jmp	SHORT $LN2@sqlite3Sch@3
$LN3@sqlite3Sch@3:
; Line 46945
	mov	edi, DWORD PTR _inMutex
	xor	esi, esi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN41@sqlite3Sch@3
	cmp	edi, ebx
	jg	SHORT $LN34@sqlite3Sch@3
$LN41@sqlite3Sch@3:
	push	132					; 00000084H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	cmp	esi, ebx
	jne	SHORT $LN68@sqlite3Sch@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN51@sqlite3Sch@3
	cmp	edi, ebx
	jg	SHORT $LN34@sqlite3Sch@3
$LN51@sqlite3Sch@3:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN34@sqlite3Sch@3
$LN68@sqlite3Sch@3:
	push	132					; 00000084H
	push	ebx
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN34@sqlite3Sch@3:
	mov	eax, esi
$LN2@sqlite3Sch@3:
; Line 46947
	cmp	eax, ebx
	je	SHORT $LN1@sqlite3Sch@3
	cmp	BYTE PTR [eax+120], bl
	jne	SHORT $LN1@sqlite3Sch@3
; Line 46948
	mov	BYTE PTR [eax+5], bl
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+24], ebx
	mov	DWORD PTR [eax+28], ebx
	mov	dl, 3
	mov	BYTE PTR [eax+4], dl
	mov	esi, OFFSET _sqlite3MallocX
	mov	DWORD PTR [eax+16], esi
	mov	ecx, OFFSET _sqlite3FreeX
	mov	DWORD PTR [eax+20], ecx
; Line 46949
	mov	BYTE PTR [eax+32], dl
	mov	BYTE PTR [eax+33], bl
	mov	DWORD PTR [eax+40], ebx
	mov	DWORD PTR [eax+36], ebx
	mov	DWORD PTR [eax+52], ebx
	mov	DWORD PTR [eax+56], ebx
	mov	DWORD PTR [eax+44], esi
	mov	DWORD PTR [eax+48], ecx
; Line 46950
	mov	BYTE PTR [eax+60], dl
	mov	BYTE PTR [eax+61], bl
	mov	DWORD PTR [eax+68], ebx
	mov	DWORD PTR [eax+64], ebx
	mov	DWORD PTR [eax+80], ebx
	mov	DWORD PTR [eax+84], ebx
	mov	DWORD PTR [eax+72], esi
	mov	DWORD PTR [eax+76], ecx
; Line 46951
	mov	BYTE PTR [eax+88], dl
	mov	BYTE PTR [eax+89], 1
	mov	DWORD PTR [eax+96], ebx
	mov	DWORD PTR [eax+92], ebx
	mov	DWORD PTR [eax+108], ebx
	mov	DWORD PTR [eax+112], ebx
	mov	DWORD PTR [eax+100], esi
	mov	DWORD PTR [eax+104], ecx
; Line 46952
	mov	BYTE PTR [eax+121], 1
$LN1@sqlite3Sch@3:
	pop	edi
	pop	esi
	pop	ebx
; Line 46955
	ret	0
_sqlite3SchemaGet ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@CNPJIJGN@cannot?5modify?5?$CFs?5because?5it?5is?5a@ ; `string'
PUBLIC	??_C@_0BN@GLMOOAMK@table?5?$CFs?5may?5not?5be?5modified?$AA@ ; `string'
;	COMDAT ??_C@_0CG@CNPJIJGN@cannot?5modify?5?$CFs?5because?5it?5is?5a@
CONST	SEGMENT
??_C@_0CG@CNPJIJGN@cannot?5modify?5?$CFs?5because?5it?5is?5a@ DB 'cannot '
	DB	'modify %s because it is a view', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GLMOOAMK@table?5?$CFs?5may?5not?5be?5modified?$AA@
CONST	SEGMENT
??_C@_0BN@GLMOOAMK@table?5?$CFs?5may?5not?5be?5modified?$AA@ DB 'table %s'
	DB	' may not be modified', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3IsReadOnly
_TEXT	SEGMENT
_viewOk$ = 8						; size = 4
_sqlite3IsReadOnly PROC					; COMDAT
; _pParse$ = ecx
; _pTab$ = eax
; Line 47272
	cmp	BYTE PTR [eax+52], 0
	push	edi
	mov	edi, ecx
	je	SHORT $LN2@sqlite3IsR@2
	mov	ecx, DWORD PTR [edi]
	test	DWORD PTR [ecx+8], 2048			; 00000800H
	jne	SHORT $LN2@sqlite3IsR@2
	cmp	BYTE PTR [edi+19], 0
	je	SHORT $LN3@sqlite3IsR@2
$LN2@sqlite3IsR@2:
	mov	ecx, DWORD PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN4@sqlite3IsR@2
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN4@sqlite3IsR@2
$LN3@sqlite3IsR@2:
; Line 47273
	mov	eax, DWORD PTR [eax]
	push	eax
	push	OFFSET ??_C@_0BN@GLMOOAMK@table?5?$CFs?5may?5not?5be?5modified?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 47274
	mov	eax, 1
	pop	edi
; Line 47283
	ret	0
$LN4@sqlite3IsR@2:
; Line 47277
	cmp	DWORD PTR _viewOk$[esp], 0
	jne	SHORT $LN1@sqlite3IsR@2
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@sqlite3IsR@2
; Line 47278
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0CG@CNPJIJGN@cannot?5modify?5?$CFs?5because?5it?5is?5a@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 47279
	mov	eax, 1
	pop	edi
; Line 47283
	ret	0
$LN1@sqlite3IsR@2:
; Line 47282
	xor	eax, eax
	pop	edi
; Line 47283
	ret	0
_sqlite3IsReadOnly ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OpenTable
_TEXT	SEGMENT
_iCur$ = 8						; size = 4
_iDb$ = 12						; size = 4
_opcode$ = 16						; size = 4
_sqlite3OpenTable PROC					; COMDAT
; _p$ = eax
; _pTab$ = esi
; Line 47296
	cmp	BYTE PTR [esi+57], 0
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _opcode$[esp+4]
	mov	ebx, eax
	jne	SHORT $LN2@sqlite3Ope@3
	push	edi
; Line 47297
	mov	edi, DWORD PTR [ebx+12]
	test	edi, edi
	jne	SHORT $LN4@sqlite3Ope@3
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [ebx+12], eax
	mov	edi, eax
$LN4@sqlite3Ope@3:
; Line 47299
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+20]
	cmp	ebp, 9
	sete	cl
	push	eax
	mov	eax, DWORD PTR _iDb$[esp+12]
	push	ecx
	push	edx
	push	eax
	push	ebx
	call	_sqlite3TableLock
; Line 47300
	mov	ecx, DWORD PTR _iDb$[esp+28]
	push	0
	push	ecx
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47302
	mov	edx, DWORD PTR [esi+20]
	mov	ebx, DWORD PTR _iCur$[esp+40]
	push	edx
	push	ebx
	push	ebp
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47303
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	ebx
	push	104					; 00000068H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
	pop	edi
$LN2@sqlite3Ope@3:
	pop	ebp
	pop	ebx
; Line 47304
	ret	0
_sqlite3OpenTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _lengthFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_lengthFunc PROC					; COMDAT
; Line 47782
	mov	eax, DWORD PTR _argv$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax]
	movzx	eax, BYTE PTR [esi+26]
	add	eax, -1
	cmp	eax, 3
	ja	$LN1@lengthFunc
	jmp	DWORD PTR $LN37@lengthFunc[eax*4]
$LN9@lengthFunc:
; Line 47786
	test	BYTE PTR [esi+24], 16			; 00000010H
	push	edi
	jne	SHORT $LN20@lengthFunc
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN20@lengthFunc
	xor	edi, edi
	jmp	SHORT $LN22@lengthFunc
$LN20@lengthFunc:
	test	WORD PTR [esi+24], 2048			; 00000800H
	mov	edi, DWORD PTR [esi+20]
	je	SHORT $LN22@lengthFunc
	add	edi, DWORD PTR [esi]
$LN22@lengthFunc:
	mov	esi, DWORD PTR _context$[esp+4]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	eax, edi
	add	esp, 4
	cdq
	pop	edi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], edx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
	pop	esi
; Line 47805
	ret	0
$LN8@lengthFunc:
; Line 47790
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
; Line 47791
	test	eax, eax
	je	SHORT $LN10@lengthFunc
; Line 47793
	mov	cl, BYTE PTR [eax]
	xor	edx, edx
	test	cl, cl
	je	SHORT $LN5@lengthFunc
	npad	3
$LL6@lengthFunc:
; Line 47794
	add	edx, 1
; Line 47795
	add	eax, 1
	cmp	cl, 192					; 000000c0H
	jb	SHORT $LN2@lengthFunc
	mov	cl, BYTE PTR [eax]
	and	cl, 192					; 000000c0H
	cmp	cl, 128					; 00000080H
	jne	SHORT $LN2@lengthFunc
$LL3@lengthFunc:
	mov	cl, BYTE PTR [eax+1]
	add	eax, 1
	and	cl, 192					; 000000c0H
	cmp	cl, 128					; 00000080H
	je	SHORT $LL3@lengthFunc
$LN2@lengthFunc:
; Line 47793
	mov	cl, BYTE PTR [eax]
	test	cl, cl
	jne	SHORT $LL6@lengthFunc
$LN5@lengthFunc:
; Line 47797
	push	edx
	mov	edx, DWORD PTR _context$[esp+4]
	push	edx
	call	_sqlite3_result_int
	add	esp, 8
	pop	esi
; Line 47805
	ret	0
$LN1@lengthFunc:
; Line 47801
	mov	esi, DWORD PTR _context$[esp]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	mov	DWORD PTR [esi+20], 0
$LN10@lengthFunc:
	pop	esi
; Line 47805
	ret	0
$LN37@lengthFunc:
	DD	$LN9@lengthFunc
	DD	$LN9@lengthFunc
	DD	$LN8@lengthFunc
	DD	$LN9@lengthFunc
_lengthFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _absFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_absFunc PROC						; COMDAT
; Line 47812
	mov	eax, DWORD PTR _argv$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [eax]
	movzx	eax, BYTE PTR [esi+26]
	mov	ebx, 1
	sub	eax, ebx
	je	SHORT $LN6@absFunc
	sub	eax, 4
	je	SHORT $LN3@absFunc
; Line 47830
	call	_sqlite3VdbeRealValue
; Line 47831
	fldz
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@absFunc
	fchs
$LN1@absFunc:
; Line 47832
	mov	ecx, DWORD PTR _context$[esp+4]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ecx
	call	_sqlite3_result_double
	add	esp, 12					; 0000000cH
	pop	esi
	pop	ebx
; Line 47836
	ret	0
$LN3@absFunc:
; Line 47826
	mov	esi, DWORD PTR _context$[esp+4]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	WORD PTR [esi+24], bx
	mov	BYTE PTR [esi+26], 5
	mov	DWORD PTR [esi+20], 0
	pop	esi
	pop	ebx
; Line 47836
	ret	0
$LN6@absFunc:
	push	ebp
	push	edi
; Line 47814
	call	_sqlite3VdbeIntValue
	mov	edi, edx
; Line 47815
	test	edi, edi
	mov	ebp, eax
	jg	SHORT $LN5@absFunc
	jl	SHORT $LN43@absFunc
	test	ebp, ebp
	jae	SHORT $LN5@absFunc
$LN43@absFunc:
; Line 47816
	mov	ecx, edi
	and	ecx, 2147483647				; 7fffffffH
	or	eax, ecx
	jne	SHORT $LN4@absFunc
; Line 47817
	mov	eax, DWORD PTR _context$[esp+12]
	lea	esi, DWORD PTR [eax+8]
	push	esi
	mov	BYTE PTR [eax+76], bl
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	pop	edi
	pop	ebp
	mov	BYTE PTR [esi+27], bl
	mov	DWORD PTR [esi+16], OFFSET ??_C@_0BB@KBEKGHFK@integer?5overflow?$AA@
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 16			; 00000010H
	mov	WORD PTR [esi+24], 290			; 00000122H
	mov	eax, esi
	pop	esi
	pop	ebx
	jmp	_sqlite3VdbeMemMakeWriteable
$LN4@absFunc:
; Line 47820
	neg	ebp
	adc	edi, 0
	neg	edi
$LN5@absFunc:
; Line 47822
	mov	esi, DWORD PTR _context$[esp+12]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+4], edi
	pop	edi
	mov	DWORD PTR [esi], ebp
	pop	ebp
	mov	BYTE PTR [esi+26], bl
	mov	WORD PTR [esi+24], 4
	pop	esi
	pop	ebx
; Line 47836
	ret	0
_absFunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_04HGGMHPIM@?$CF?4?$CKf?$AA@		; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_04HGGMHPIM@?$CF?4?$CKf?$AA@
CONST	SEGMENT
??_C@_04HGGMHPIM@?$CF?4?$CKf?$AA@ DB '%.*f', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _roundFunc
_TEXT	SEGMENT
_r$ = -512						; size = 8
_zBuf$ = -504						; size = 500
__$ArrayPad$ = -4					; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_roundFunc PROC						; COMDAT
; Line 47906
	sub	esp, 512				; 00000200H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+512], eax
	push	ebx
	mov	ebx, DWORD PTR _context$[esp+512]
	push	ebp
	mov	ebp, DWORD PTR _argv$[esp+516]
	push	esi
	push	edi
; Line 47907
	xor	edi, edi
; Line 47911
	cmp	DWORD PTR _argc$[esp+524], 2
	jne	SHORT $LN2@roundFunc
; Line 47912
	mov	esi, DWORD PTR [ebp+4]
	cmp	BYTE PTR [esi+26], 5
	je	SHORT $LN6@roundFunc
; Line 47913
	call	_sqlite3VdbeIntValue
	mov	edi, eax
; Line 47914
	cmp	edi, 30					; 0000001eH
	jle	SHORT $LN3@roundFunc
	mov	edi, 30					; 0000001eH
; Line 47915
	jmp	SHORT $LN2@roundFunc
$LN3@roundFunc:
	test	edi, edi
	jge	SHORT $LN2@roundFunc
	xor	edi, edi
$LN2@roundFunc:
; Line 47917
	mov	esi, DWORD PTR [ebp]
	cmp	BYTE PTR [esi+26], 5
	je	SHORT $LN6@roundFunc
; Line 47918
	call	_sqlite3VdbeRealValue
	fst	QWORD PTR _r$[esp+528]
; Line 47919
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	edi
	push	OFFSET ??_C@_04HGGMHPIM@?$CF?4?$CKf?$AA@
	lea	eax, DWORD PTR _zBuf$[esp+544]
	push	eax
	push	500					; 000001f4H
	call	_sqlite3_snprintf
; Line 47920
	lea	ecx, DWORD PTR _r$[esp+552]
	push	ecx
	lea	eax, DWORD PTR _zBuf$[esp+556]
	call	_sqlite3AtoF
; Line 47921
	fld	QWORD PTR _r$[esp+556]
	add	esp, 20					; 00000014H
	fstp	QWORD PTR [esp]
	push	ebx
	call	_sqlite3_result_double
	add	esp, 12					; 0000000cH
$LN6@roundFunc:
; Line 47922
	mov	ecx, DWORD PTR __$ArrayPad$[esp+528]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 512				; 00000200H
	ret	0
_roundFunc ENDP
_TEXT	ENDS
EXTRN	_toupper:PROC
; Function compile flags: /Ogtpy
;	COMDAT _upperFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_upperFunc PROC						; COMDAT
; Line 47931
	cmp	DWORD PTR _argc$[esp-4], 1
	jl	$LN6@upperFunc
	push	esi
	mov	esi, DWORD PTR _argv$[esp]
	mov	ecx, DWORD PTR [esi]
	cmp	BYTE PTR [ecx+26], 5
	je	$LN32@upperFunc
	push	ebx
; Line 47932
	mov	al, 1
	call	_sqlite3ValueText
; Line 47933
	mov	esi, DWORD PTR [esi]
	test	BYTE PTR [esi+24], 16			; 00000010H
	mov	ebx, eax
	jne	SHORT $LN18@upperFunc
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	je	SHORT $LN20@upperFunc
$LN18@upperFunc:
	test	WORD PTR [esi+24], 2048			; 00000800H
	mov	eax, DWORD PTR [esi+20]
	je	SHORT $LN20@upperFunc
	add	eax, DWORD PTR [esi]
$LN20@upperFunc:
; Line 47936
	test	ebx, ebx
	je	SHORT $LN33@upperFunc
; Line 47937
	lea	esi, DWORD PTR [eax+1]
	test	esi, esi
	jle	SHORT $LN33@upperFunc
	push	edi
	push	esi
	call	_malloc
	mov	edi, eax
	add	esp, 4
; Line 47938
	test	edi, edi
	je	SHORT $LN34@upperFunc
; Line 47939
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 47940
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN1@upperFunc
; Line 47939
	mov	esi, edi
$LL3@upperFunc:
; Line 47941
	movsx	eax, BYTE PTR [esi]
	push	eax
	call	_toupper
	mov	BYTE PTR [esi], al
	add	esi, 1
	add	esp, 4
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LL3@upperFunc
$LN1@upperFunc:
; Line 47943
	mov	ecx, DWORD PTR _context$[esp+8]
	push	OFFSET _sqlite3_free
	push	1
	push	-1
	add	ecx, 8
	push	edi
	push	ecx
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
$LN34@upperFunc:
	pop	edi
$LN33@upperFunc:
	pop	ebx
$LN32@upperFunc:
	pop	esi
$LN6@upperFunc:
; Line 47946
	ret	0
_upperFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _lowerFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_lowerFunc PROC						; COMDAT
; Line 47951
	cmp	DWORD PTR _argc$[esp-4], 1
	jl	$LN6@lowerFunc
	push	esi
	mov	esi, DWORD PTR _argv$[esp]
	mov	ecx, DWORD PTR [esi]
	cmp	BYTE PTR [ecx+26], 5
	je	$LN32@lowerFunc
	push	ebx
; Line 47952
	mov	al, 1
	call	_sqlite3ValueText
; Line 47953
	mov	esi, DWORD PTR [esi]
	test	BYTE PTR [esi+24], 16			; 00000010H
	mov	ebx, eax
	jne	SHORT $LN18@lowerFunc
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	je	SHORT $LN20@lowerFunc
$LN18@lowerFunc:
	test	WORD PTR [esi+24], 2048			; 00000800H
	mov	eax, DWORD PTR [esi+20]
	je	SHORT $LN20@lowerFunc
	add	eax, DWORD PTR [esi]
$LN20@lowerFunc:
; Line 47956
	test	ebx, ebx
	je	SHORT $LN33@lowerFunc
; Line 47957
	lea	esi, DWORD PTR [eax+1]
	test	esi, esi
	jle	SHORT $LN33@lowerFunc
	push	edi
	push	esi
	call	_malloc
	mov	edi, eax
	add	esp, 4
; Line 47958
	test	edi, edi
	je	SHORT $LN34@lowerFunc
; Line 47959
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 47960
	cmp	BYTE PTR [edi], 0
	je	SHORT $LN1@lowerFunc
; Line 47959
	mov	esi, edi
$LL3@lowerFunc:
; Line 47961
	movsx	eax, BYTE PTR [esi]
	push	eax
	call	_tolower
	mov	BYTE PTR [esi], al
	add	esi, 1
	add	esp, 4
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LL3@lowerFunc
$LN1@lowerFunc:
; Line 47963
	mov	ecx, DWORD PTR _context$[esp+8]
	push	OFFSET _sqlite3_free
	push	1
	push	-1
	add	ecx, 8
	push	edi
	push	ecx
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
$LN34@lowerFunc:
	pop	edi
$LN33@lowerFunc:
	pop	ebx
$LN32@lowerFunc:
	pop	esi
$LN6@lowerFunc:
; Line 47966
	ret	0
_lowerFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _randomBlob
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_randomBlob PROC					; COMDAT
; Line 48014
	mov	eax, DWORD PTR _argv$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax]
	push	edi
	call	_sqlite3VdbeIntValue
	mov	edi, eax
; Line 48015
	cmp	edi, 1
	jge	SHORT $LN3@randomBlob
; Line 48016
	mov	edi, 1
$LN2@randomBlob:
; Line 48022
	call	_sqlite3Malloc
	mov	esi, eax
; Line 48023
	test	esi, esi
	je	SHORT $LN13@randomBlob
; Line 48024
	mov	ecx, esi
	mov	eax, edi
	call	_sqlite3Randomness
; Line 48025
	mov	edx, DWORD PTR _context$[esp+4]
	push	OFFSET _sqlite3FreeX
	push	0
	push	edi
	add	edx, 8
	push	esi
	push	edx
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
$LN13@randomBlob:
	pop	edi
	pop	esi
; Line 48027
	ret	0
$LN3@randomBlob:
; Line 48018
	cmp	edi, 1000000000				; 3b9aca00H
	jle	SHORT $LN2@randomBlob
; Line 48019
	mov	esi, DWORD PTR _context$[esp+4]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	lea	ecx, DWORD PTR [esi+32]
	pop	edi
	mov	WORD PTR [esi+24], 2576			; 00000a10H
	mov	BYTE PTR [esi+26], 4
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi], 1000000001		; 3b9aca01H
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+16], ecx
	mov	BYTE PTR [esi+27], 1
	pop	esi
; Line 48027
	ret	0
_randomBlob ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@PAMOLCDH@ESCAPE?5expression?5must?5be?5a?5sing@ ; `string'
PUBLIC	??_C@_0CB@LFIMBCA@LIKE?5or?5GLOB?5pattern?5too?5complex@ ; `string'
;	COMDAT ??_C@_0CN@PAMOLCDH@ESCAPE?5expression?5must?5be?5a?5sing@
CONST	SEGMENT
??_C@_0CN@PAMOLCDH@ESCAPE?5expression?5must?5be?5a?5sing@ DB 'ESCAPE expr'
	DB	'ession must be a single character', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LFIMBCA@LIKE?5or?5GLOB?5pattern?5too?5complex@
CONST	SEGMENT
??_C@_0CB@LFIMBCA@LIKE?5or?5GLOB?5pattern?5too?5complex@ DB 'LIKE or GLOB'
	DB	' pattern too complex', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _likeFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_zA$ = 16						; size = 4
_argv$ = 16						; size = 4
_likeFunc PROC						; COMDAT
; Line 48252
	push	ebx
	push	ebp
	push	esi
; Line 48256
	mov	esi, DWORD PTR _argv$[esp+8]
	mov	ecx, DWORD PTR [esi]
	push	edi
	mov	al, 1
	xor	ebp, ebp
	call	_sqlite3ValueText
; Line 48257
	mov	ecx, DWORD PTR [esi+4]
	mov	ebx, eax
	mov	al, 1
	call	_sqlite3ValueText
; Line 48262
	mov	edi, DWORD PTR [esi]
	test	BYTE PTR [edi+24], 16			; 00000010H
	mov	DWORD PTR _zA$[esp+12], eax
	jne	SHORT $LN16@likeFunc
	mov	al, 1
	mov	ecx, edi
	call	_sqlite3ValueText
	test	eax, eax
	je	SHORT $LN60@likeFunc
$LN16@likeFunc:
	test	WORD PTR [edi+24], 2048			; 00000800H
	mov	eax, DWORD PTR [edi+20]
	je	SHORT $LN18@likeFunc
	add	eax, DWORD PTR [edi]
$LN18@likeFunc:
	cmp	eax, 50000				; 0000c350H
	jle	SHORT $LN60@likeFunc
; Line 48263
	mov	eax, DWORD PTR _context$[esp+12]
	lea	esi, DWORD PTR [eax+8]
	push	esi
	mov	BYTE PTR [eax+76], 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	pop	edi
	mov	DWORD PTR [esi+16], OFFSET ??_C@_0CB@LFIMBCA@LIKE?5or?5GLOB?5pattern?5too?5complex@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 32			; 00000020H
	mov	WORD PTR [esi+24], 290			; 00000122H
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	jmp	_sqlite3VdbeMemMakeWriteable
$LN60@likeFunc:
; Line 48268
	cmp	DWORD PTR _argc$[esp+12], 3
	jne	SHORT $LN61@likeFunc
; Line 48272
	mov	ecx, DWORD PTR [esi+8]
	mov	al, 1
	call	_sqlite3ValueText
	mov	esi, eax
; Line 48273
	test	esi, esi
	je	SHORT $LN1@likeFunc
; Line 48274
	or	edx, -1
	mov	ecx, esi
	call	_sqlite3Utf8CharLen
	cmp	eax, 1
	je	SHORT $LN2@likeFunc
; Line 48276
	mov	eax, DWORD PTR _context$[esp+12]
	lea	esi, DWORD PTR [eax+8]
	push	esi
	mov	BYTE PTR [eax+76], 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	pop	edi
	mov	DWORD PTR [esi+16], OFFSET ??_C@_0CN@PAMOLCDH@ESCAPE?5expression?5must?5be?5a?5sing@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 44			; 0000002cH
	mov	WORD PTR [esi+24], 290			; 00000122H
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	jmp	_sqlite3VdbeMemMakeWriteable
$LN2@likeFunc:
; Line 48279
	mov	edx, esi
	call	_sqlite3ReadUtf8
	mov	ebp, eax
$LN61@likeFunc:
; Line 48281
	mov	eax, DWORD PTR _zA$[esp+12]
	test	eax, eax
	je	SHORT $LN1@likeFunc
	test	ebx, ebx
	je	SHORT $LN1@likeFunc
; Line 48287
	mov	esi, DWORD PTR _context$[esp+12]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+8]
	push	ebp
	push	edx
	push	eax
	push	ebx
	call	_patternCompare
	push	eax
	push	esi
	call	_sqlite3_result_int
	add	esp, 24					; 00000018H
$LN1@likeFunc:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 48289
	ret	0
_likeFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _zeroblobFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_zeroblobFunc PROC					; COMDAT
; Line 48447
	mov	eax, DWORD PTR _argv$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax]
	push	edi
	call	_sqlite3VdbeIntValue
; Line 48448
	test	edx, edx
	mov	edi, eax
	jl	SHORT $LN2@zeroblobFu
	jg	SHORT $LN17@zeroblobFu
	cmp	edi, 1000000000				; 3b9aca00H
	jbe	SHORT $LN2@zeroblobFu
$LN17@zeroblobFu:
; Line 48449
	mov	esi, DWORD PTR _context$[esp+4]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	lea	ecx, DWORD PTR [esi+32]
	mov	WORD PTR [esi+24], 2576			; 00000a10H
	mov	BYTE PTR [esi+26], 4
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi], 1000000001		; 3b9aca01H
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+16], ecx
	pop	edi
; Line 48451
	mov	BYTE PTR [esi+27], 1
	pop	esi
; Line 48453
	ret	0
$LN2@zeroblobFu:
; Line 48451
	mov	esi, DWORD PTR _context$[esp+4]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	edi, edi
	mov	WORD PTR [esi+24], 2576			; 00000a10H
	mov	BYTE PTR [esi+26], 4
	mov	DWORD PTR [esi+20], 0
	jge	SHORT $LN14@zeroblobFu
	xor	edi, edi
$LN14@zeroblobFu:
	mov	eax, edi
	cdq
	mov	DWORD PTR [esi+4], edx
	lea	edx, DWORD PTR [esi+32]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+16], edx
	pop	edi
	mov	BYTE PTR [esi+27], 1
	pop	esi
; Line 48453
	ret	0
_zeroblobFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _replaceFunc
_TEXT	SEGMENT
_nPattern$ = -40					; size = 4
_zOut$ = -36						; size = 4
$T119693 = -32						; size = 4
_nRep$ = -28						; size = 4
_zStr$ = -24						; size = 4
_zPattern$ = -20					; size = 4
_zRep$ = -16						; size = 4
_loopLimit$ = -12					; size = 4
_nOut$ = -8						; size = 8
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
tv324 = 16						; size = 1
_argv$ = 16						; size = 4
_replaceFunc PROC					; COMDAT
; Line 48465
	sub	esp, 40					; 00000028H
	push	ebp
	push	esi
; Line 48478
	mov	esi, DWORD PTR _argv$[esp+44]
	mov	ecx, DWORD PTR [esi]
	mov	al, 1
	call	_sqlite3ValueText
; Line 48479
	xor	ebp, ebp
	cmp	eax, ebp
	mov	DWORD PTR _zStr$[esp+48], eax
	je	$LN11@replaceFun
	push	edi
; Line 48480
	mov	edi, DWORD PTR [esi]
	test	BYTE PTR [edi+24], 16			; 00000010H
	jne	SHORT $LN28@replaceFun
	mov	al, 1
	mov	ecx, edi
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN28@replaceFun
	mov	DWORD PTR $T119693[esp+52], ebp
	jmp	SHORT $LN30@replaceFun
$LN28@replaceFun:
	test	WORD PTR [edi+24], 2048			; 00000800H
	mov	eax, DWORD PTR [edi+20]
	je	SHORT $LN27@replaceFun
	add	eax, DWORD PTR [edi]
$LN27@replaceFun:
	mov	DWORD PTR $T119693[esp+52], eax
$LN30@replaceFun:
; Line 48482
	mov	ecx, DWORD PTR [esi+4]
	mov	al, 1
	call	_sqlite3ValueText
; Line 48483
	cmp	eax, ebp
	mov	DWORD PTR _zPattern$[esp+52], eax
	je	$LN64@replaceFun
	cmp	BYTE PTR [eax], 0
	je	$LN64@replaceFun
; Line 48484
	mov	ecx, DWORD PTR [esi+4]
	push	ebx
	push	ecx
	call	_sqlite3_value_bytes
; Line 48486
	mov	ecx, DWORD PTR [esi+8]
	mov	ebx, eax
	add	esp, 4
	mov	al, 1
	mov	DWORD PTR _nPattern$[esp+56], ebx
	call	_sqlite3ValueText
; Line 48487
	cmp	eax, ebp
	mov	DWORD PTR _zRep$[esp+56], eax
	je	$LN65@replaceFun
; Line 48488
	mov	edx, DWORD PTR [esi+8]
	push	edx
	call	_sqlite3_value_bytes
; Line 48490
	mov	edi, DWORD PTR $T119693[esp+60]
	mov	DWORD PTR _nRep$[esp+60], eax
	lea	eax, DWORD PTR [edi+1]
	cdq
	add	esp, 4
; Line 48492
	cmp	eax, ebp
	mov	DWORD PTR _nOut$[esp+56], eax
	mov	DWORD PTR _nOut$[esp+60], edx
	jle	$LN65@replaceFun
	push	eax
	call	_malloc
	mov	esi, eax
	add	esp, 4
; Line 48493
	cmp	esi, ebp
	mov	DWORD PTR _zOut$[esp+56], esi
	je	$LN65@replaceFun
; Line 48496
	mov	eax, edi
	sub	eax, ebx
	mov	DWORD PTR _loopLimit$[esp+56], eax
; Line 48497
	mov	edi, ebp
	js	$LN6@replaceFun
$LL8@replaceFun:
; Line 48498
	mov	eax, DWORD PTR _zStr$[esp+56]
	mov	ecx, DWORD PTR _zPattern$[esp+56]
	lea	edx, DWORD PTR [edi+eax]
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [ecx]
	mov	BYTE PTR tv324[esp+52], al
	jne	$LN4@replaceFun
	cmp	ebx, 4
	mov	eax, ebx
	jb	SHORT $LN52@replaceFun
$LL17@replaceFun:
	mov	ebx, DWORD PTR [edx]
	cmp	ebx, DWORD PTR [ecx]
	jne	SHORT $LN18@replaceFun
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL17@replaceFun
	mov	ebx, DWORD PTR _nPattern$[esp+56]
$LN52@replaceFun:
	test	eax, eax
	je	SHORT $LN61@replaceFun
$LN18@replaceFun:
	movzx	esi, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [ecx]
	sub	esi, ebx
	jne	SHORT $LN58@replaceFun
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN59@replaceFun
	movzx	esi, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [ecx]
	sub	esi, ebx
	jne	SHORT $LN58@replaceFun
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN59@replaceFun
	movzx	esi, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [ecx]
	sub	esi, ebx
	jne	SHORT $LN58@replaceFun
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN59@replaceFun
	movzx	esi, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	sub	esi, ecx
	je	SHORT $LN59@replaceFun
$LN58@replaceFun:
	mov	ebx, DWORD PTR _nPattern$[esp+56]
	test	esi, esi
	mov	esi, DWORD PTR _zOut$[esp+56]
	mov	eax, 1
	jg	SHORT $LN21@replaceFun
	or	eax, -1
	jmp	SHORT $LN21@replaceFun
$LN59@replaceFun:
	mov	ebx, DWORD PTR _nPattern$[esp+56]
	mov	esi, DWORD PTR _zOut$[esp+56]
$LN61@replaceFun:
	xor	eax, eax
$LN21@replaceFun:
	test	eax, eax
	jne	SHORT $LN63@replaceFun
; Line 48501
	mov	eax, DWORD PTR _nRep$[esp+56]
	mov	ecx, DWORD PTR _nOut$[esp+56]
	sub	eax, ebx
	cdq
	add	ecx, eax
	mov	eax, DWORD PTR _nOut$[esp+60]
	adc	eax, edx
; Line 48502
	test	eax, eax
	mov	DWORD PTR _nOut$[esp+56], ecx
	mov	DWORD PTR _nOut$[esp+60], eax
	jg	$LN53@replaceFun
	jl	SHORT $LN57@replaceFun
	cmp	ecx, 1000000000				; 3b9aca00H
	jae	$LN53@replaceFun
$LN57@replaceFun:
; Line 48507
	push	ecx
	push	esi
	call	_sqlite3_realloc
	mov	esi, eax
	add	esp, 8
; Line 48508
	test	esi, esi
	mov	DWORD PTR _zOut$[esp+56], esi
	je	SHORT $LN65@replaceFun
; Line 48511
	mov	edx, DWORD PTR _nRep$[esp+56]
	mov	eax, DWORD PTR _zRep$[esp+56]
	push	edx
	push	eax
	lea	ecx, DWORD PTR [esi+ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 48512
	add	ebp, DWORD PTR _nRep$[esp+56]
; Line 48513
	lea	edi, DWORD PTR [edi+ebx-1]
	jmp	SHORT $LN7@replaceFun
$LN63@replaceFun:
	mov	al, BYTE PTR tv324[esp+52]
$LN4@replaceFun:
; Line 48499
	mov	BYTE PTR [esi+ebp], al
	add	ebp, 1
$LN7@replaceFun:
	add	edi, 1
	cmp	edi, DWORD PTR _loopLimit$[esp+56]
	jle	$LL8@replaceFun
$LN6@replaceFun:
; Line 48517
	mov	ebx, DWORD PTR $T119693[esp+56]
	mov	ecx, DWORD PTR _zStr$[esp+56]
	mov	eax, ebx
	sub	eax, edi
	push	eax
	lea	edx, DWORD PTR [edi+ecx]
	push	edx
	lea	eax, DWORD PTR [esi+ebp]
	push	eax
	call	_memcpy
; Line 48521
	mov	ecx, DWORD PTR _context$[esp+64]
	push	OFFSET _sqlite3_free
	sub	ebx, edi
	push	1
	add	ebp, ebx
	push	ebp
	add	ecx, 8
	push	esi
	push	ecx
	mov	BYTE PTR [esi+ebp], 0
	call	_sqlite3VdbeMemSetStr
	add	esp, 32					; 00000020H
$LN65@replaceFun:
	pop	ebx
$LN64@replaceFun:
	pop	edi
$LN11@replaceFun:
	pop	esi
	pop	ebp
; Line 48522
	add	esp, 40					; 00000028H
	ret	0
$LN53@replaceFun:
; Line 48503
	mov	edx, DWORD PTR _context$[esp+52]
	push	edx
	call	_sqlite3_result_error_toobig
	add	esp, 4
; Line 48504
	test	esi, esi
	je	SHORT $LN65@replaceFun
	push	esi
	call	_free
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 48522
	add	esp, 40					; 00000028H
	ret	0
_replaceFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _trimFunc
_TEXT	SEGMENT
_nIn$ = -24						; size = 4
_nChar$ = -20						; size = 4
_zIn$ = -16						; size = 4
_aLen$ = -12						; size = 4
_zCharSet$ = -8						; size = 4
_flags$ = -4						; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_azChar$ = 16						; size = 4
_argv$ = 16						; size = 4
_trimFunc PROC						; COMDAT
; Line 48532
	sub	esp, 24					; 00000018H
	push	edi
; Line 48542
	mov	edi, DWORD PTR _argv$[esp+24]
	mov	ecx, DWORD PTR [edi]
	cmp	BYTE PTR [ecx+26], 5
	je	$LN80@trimFunc
; Line 48545
	mov	al, 1
	call	_sqlite3ValueText
; Line 48546
	test	eax, eax
	mov	DWORD PTR _zIn$[esp+28], eax
	je	$LN80@trimFunc
	push	ebx
	push	esi
; Line 48547
	mov	esi, DWORD PTR [edi]
	test	BYTE PTR [esi+24], 16			; 00000010H
	jne	SHORT $LN61@trimFunc
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN61@trimFunc
	xor	ebx, ebx
	jmp	SHORT $LN63@trimFunc
$LN61@trimFunc:
	test	WORD PTR [esi+24], 2048			; 00000800H
	mov	ebx, DWORD PTR [esi+20]
	je	SHORT $LN63@trimFunc
	add	ebx, DWORD PTR [esi]
$LN63@trimFunc:
; Line 48549
	cmp	DWORD PTR _argc$[esp+32], 1
	push	ebp
	mov	DWORD PTR _nIn$[esp+40], ebx
	jne	SHORT $LN36@trimFunc
; Line 48552
	mov	edi, 1
; Line 48554
	mov	ebp, OFFSET ?azOne@?3??trimFunc@@9@9
	mov	DWORD PTR _nChar$[esp+40], edi
	mov	DWORD PTR _aLen$[esp+40], OFFSET ?lenOne@?3??trimFunc@@9@9
	mov	DWORD PTR _azChar$[esp+36], ebp
; Line 48555
	mov	DWORD PTR _zCharSet$[esp+40], 0
	jmp	$LN112@trimFunc
$LN36@trimFunc:
; Line 48556
	mov	ecx, DWORD PTR [edi+4]
	mov	al, 1
	call	_sqlite3ValueText
	mov	edi, eax
	test	edi, edi
	mov	DWORD PTR _zCharSet$[esp+40], edi
	je	$LN136@trimFunc
; Line 48560
	xor	esi, esi
	cmp	BYTE PTR [edi], 0
	je	$LN130@trimFunc
$LL32@trimFunc:
; Line 48561
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	cmp	cl, 192					; 000000c0H
	jb	SHORT $LN31@trimFunc
	mov	dl, BYTE PTR [eax]
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN31@trimFunc
	npad	7
$LL28@trimFunc:
	mov	cl, BYTE PTR [eax+1]
	add	eax, 1
	and	cl, 192					; 000000c0H
	cmp	cl, 128					; 00000080H
	je	SHORT $LL28@trimFunc
$LN31@trimFunc:
; Line 48560
	add	esi, 1
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LL32@trimFunc
; Line 48563
	test	esi, esi
	jle	$LN130@trimFunc
; Line 48564
	lea	eax, DWORD PTR [esi+esi*4]
	test	eax, eax
	jle	$LN136@trimFunc
	push	eax
	call	_malloc
	mov	ebp, eax
	add	esp, 4
; Line 48565
	test	ebp, ebp
	mov	DWORD PTR _azChar$[esp+36], ebp
	je	$LN136@trimFunc
; Line 48569
	mov	ecx, edi
	mov	edx, ecx
	lea	esi, DWORD PTR [ebp+esi*4]
	xor	edi, edi
	cmp	BYTE PTR [edx], 0
	mov	DWORD PTR _aLen$[esp+40], esi
	je	$LN130@trimFunc
$LL24@trimFunc:
; Line 48570
	mov	DWORD PTR [ebp+edi*4], ecx
; Line 48571
	mov	al, BYTE PTR [ecx]
	add	ecx, 1
	cmp	al, 192					; 000000c0H
	jb	SHORT $LN19@trimFunc
	mov	dl, BYTE PTR [ecx]
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN19@trimFunc
	npad	2
$LL20@trimFunc:
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	je	SHORT $LL20@trimFunc
$LN19@trimFunc:
; Line 48572
	mov	dl, cl
	sub	dl, BYTE PTR [ebp+edi*4]
	add	edi, 1
	mov	BYTE PTR [esi+edi-1], dl
	cmp	BYTE PTR [ecx], 0
	jne	SHORT $LL24@trimFunc
; Line 48576
	test	edi, edi
	mov	DWORD PTR _nChar$[esp+40], edi
	jle	$LN130@trimFunc
$LN112@trimFunc:
; Line 48577
	mov	eax, DWORD PTR _context$[esp+36]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+8]
; Line 48578
	test	al, 1
	mov	DWORD PTR _flags$[esp+40], eax
	je	$LN129@trimFunc
; Line 48579
	test	ebx, ebx
	jle	$LN129@trimFunc
	jmp	SHORT $LN16@trimFunc
	npad	7
$LL113@trimFunc:
	mov	ebp, DWORD PTR _azChar$[esp+36]
$LN16@trimFunc:
; Line 48581
	xor	eax, eax
	test	edi, edi
	jle	$LN129@trimFunc
	npad	2
$LL14@trimFunc:
; Line 48582
	mov	edx, DWORD PTR _aLen$[esp+40]
	movzx	ebx, BYTE PTR [eax+edx]
; Line 48583
	cmp	ebx, 4
	mov	edx, DWORD PTR [ebp+eax*4]
	mov	esi, DWORD PTR _zIn$[esp+40]
	mov	ecx, ebx
	jb	SHORT $LN94@trimFunc
$LL42@trimFunc:
	mov	ebp, DWORD PTR [esi]
	cmp	ebp, DWORD PTR [edx]
	jne	SHORT $LN43@trimFunc
	sub	ecx, 4
	add	edx, 4
	add	esi, 4
	cmp	ecx, 4
	jae	SHORT $LL42@trimFunc
$LN94@trimFunc:
	test	ecx, ecx
	je	SHORT $LN127@trimFunc
$LN43@trimFunc:
	movzx	ebp, BYTE PTR [edx]
	movzx	edi, BYTE PTR [esi]
	sub	edi, ebp
	jne	SHORT $LN114@trimFunc
	sub	ecx, 1
	add	edx, 1
	add	esi, 1
	test	ecx, ecx
	je	SHORT $LN126@trimFunc
	movzx	ebp, BYTE PTR [edx]
	movzx	edi, BYTE PTR [esi]
	sub	edi, ebp
	jne	SHORT $LN114@trimFunc
	sub	ecx, 1
	add	edx, 1
	add	esi, 1
	test	ecx, ecx
	je	SHORT $LN126@trimFunc
	movzx	ebp, BYTE PTR [edx]
	movzx	edi, BYTE PTR [esi]
	sub	edi, ebp
	jne	SHORT $LN114@trimFunc
	sub	ecx, 1
	add	edx, 1
	add	esi, 1
	test	ecx, ecx
	je	SHORT $LN126@trimFunc
	movzx	ecx, BYTE PTR [edx]
	movzx	edi, BYTE PTR [esi]
	sub	edi, ecx
	je	SHORT $LN126@trimFunc
$LN114@trimFunc:
	test	edi, edi
	mov	edi, DWORD PTR _nChar$[esp+40]
	mov	ecx, 1
	jg	SHORT $LN46@trimFunc
	or	ecx, -1
	jmp	SHORT $LN46@trimFunc
$LN126@trimFunc:
	mov	edi, DWORD PTR _nChar$[esp+40]
$LN127@trimFunc:
	xor	ecx, ecx
$LN46@trimFunc:
	test	ecx, ecx
	je	SHORT $LN95@trimFunc
	add	eax, 1
	cmp	eax, edi
	jge	SHORT $LN122@trimFunc
; Line 48581
	mov	ebp, DWORD PTR _azChar$[esp+36]
	jmp	$LL14@trimFunc
$LN95@trimFunc:
; Line 48585
	cmp	eax, edi
	jge	SHORT $LN122@trimFunc
; Line 48587
	mov	eax, DWORD PTR _nIn$[esp+40]
	add	DWORD PTR _zIn$[esp+40], ebx
	sub	eax, ebx
	test	eax, eax
	mov	DWORD PTR _nIn$[esp+40], eax
	jg	$LL113@trimFunc
$LN122@trimFunc:
; Line 48579
	mov	ebp, DWORD PTR _azChar$[esp+36]
$LN129@trimFunc:
; Line 48590
	test	BYTE PTR _flags$[esp+40], 2
	je	$LN111@trimFunc
; Line 48591
	cmp	DWORD PTR _nIn$[esp+40], 0
	jle	$LN111@trimFunc
	jmp	SHORT $LN8@trimFunc
$LL123@trimFunc:
	mov	ebp, DWORD PTR _azChar$[esp+36]
$LN8@trimFunc:
; Line 48593
	xor	eax, eax
	test	edi, edi
	jle	$LN111@trimFunc
	npad	2
$LL6@trimFunc:
; Line 48594
	mov	edx, DWORD PTR _aLen$[esp+40]
	movzx	ebx, BYTE PTR [eax+edx]
; Line 48595
	cmp	ebx, DWORD PTR _nIn$[esp+40]
	jg	$LN5@trimFunc
	mov	ecx, DWORD PTR _nIn$[esp+40]
	mov	esi, DWORD PTR [ebp+eax*4]
	sub	ecx, ebx
	add	ecx, DWORD PTR _zIn$[esp+40]
	cmp	ebx, 4
	mov	edx, ebx
	jb	SHORT $LN97@trimFunc
$LL48@trimFunc:
	mov	ebp, DWORD PTR [ecx]
	cmp	ebp, DWORD PTR [esi]
	jne	SHORT $LN49@trimFunc
	sub	edx, 4
	add	esi, 4
	add	ecx, 4
	cmp	edx, 4
	jae	SHORT $LL48@trimFunc
$LN97@trimFunc:
	test	edx, edx
	je	SHORT $LN121@trimFunc
$LN49@trimFunc:
	movzx	edi, BYTE PTR [ecx]
	movzx	ebp, BYTE PTR [esi]
	sub	edi, ebp
	jne	SHORT $LN118@trimFunc
	sub	edx, 1
	add	esi, 1
	add	ecx, 1
	test	edx, edx
	je	SHORT $LN119@trimFunc
	movzx	edi, BYTE PTR [ecx]
	movzx	ebp, BYTE PTR [esi]
	sub	edi, ebp
	jne	SHORT $LN118@trimFunc
	sub	edx, 1
	add	esi, 1
	add	ecx, 1
	test	edx, edx
	je	SHORT $LN119@trimFunc
	movzx	edi, BYTE PTR [ecx]
	movzx	ebp, BYTE PTR [esi]
	sub	edi, ebp
	jne	SHORT $LN118@trimFunc
	sub	edx, 1
	add	esi, 1
	add	ecx, 1
	test	edx, edx
	je	SHORT $LN119@trimFunc
	movzx	edi, BYTE PTR [ecx]
	movzx	ecx, BYTE PTR [esi]
	sub	edi, ecx
	je	SHORT $LN119@trimFunc
$LN118@trimFunc:
	test	edi, edi
	mov	edi, DWORD PTR _nChar$[esp+40]
	mov	ecx, 1
	jg	SHORT $LN52@trimFunc
	or	ecx, -1
	jmp	SHORT $LN52@trimFunc
$LN119@trimFunc:
	mov	edi, DWORD PTR _nChar$[esp+40]
$LN121@trimFunc:
	xor	ecx, ecx
$LN52@trimFunc:
	test	ecx, ecx
	je	SHORT $LN98@trimFunc
	mov	ebp, DWORD PTR _azChar$[esp+36]
$LN5@trimFunc:
; Line 48593
	add	eax, 1
	cmp	eax, edi
	jl	$LL6@trimFunc
	jmp	SHORT $LN111@trimFunc
$LN98@trimFunc:
; Line 48597
	cmp	eax, edi
	jge	SHORT $LN125@trimFunc
; Line 48598
	mov	eax, DWORD PTR _nIn$[esp+40]
	sub	eax, ebx
	test	eax, eax
	mov	DWORD PTR _nIn$[esp+40], eax
	jg	$LL123@trimFunc
$LN125@trimFunc:
; Line 48591
	mov	ebp, DWORD PTR _azChar$[esp+36]
$LN111@trimFunc:
; Line 48601
	cmp	DWORD PTR _zCharSet$[esp+40], 0
	je	SHORT $LN130@trimFunc
; Line 48602
	test	ebp, ebp
	je	SHORT $LN130@trimFunc
	push	ebp
	call	_free
	add	esp, 4
$LN130@trimFunc:
; Line 48605
	mov	edx, DWORD PTR _nIn$[esp+40]
	mov	eax, DWORD PTR _zIn$[esp+40]
	mov	ecx, DWORD PTR _context$[esp+36]
	push	-1
	push	1
	push	edx
	push	eax
	add	ecx, 8
	push	ecx
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
$LN136@trimFunc:
	pop	ebp
	pop	esi
	pop	ebx
$LN80@trimFunc:
	pop	edi
; Line 48606
	add	esp, 24					; 00000018H
	ret	0
_trimFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _loadExt
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_zErrMsg$ = 16						; size = 4
_argv$ = 16						; size = 4
_loadExt PROC						; COMDAT
; Line 48663
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 48664
	mov	edi, DWORD PTR _argv$[esp+12]
	mov	ecx, DWORD PTR [edi]
	mov	al, 1
	call	_sqlite3ValueText
; Line 48666
	mov	esi, DWORD PTR _context$[esp+12]
	mov	ebp, eax
	mov	eax, DWORD PTR [esi]
	mov	ebx, DWORD PTR [eax+8]
; Line 48667
	xor	eax, eax
; Line 48669
	cmp	DWORD PTR _argc$[esp+12], 2
	mov	DWORD PTR _zErrMsg$[esp+12], eax
	jne	SHORT $LN3@loadExt
; Line 48670
	mov	ecx, DWORD PTR [edi+4]
	mov	al, 1
	call	_sqlite3ValueText
$LN3@loadExt:
; Line 48674
	test	ebp, ebp
	je	SHORT $LN33@loadExt
	lea	ecx, DWORD PTR _zErrMsg$[esp+12]
	push	ecx
	push	eax
	push	ebp
	push	ebx
	call	_sqlite3_load_extension
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN33@loadExt
; Line 48675
	mov	BYTE PTR [esi+76], 1
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	edi, DWORD PTR _zErrMsg$[esp+16]
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN27@loadExt
	pop	edi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	pop	esi
	pop	ebp
	pop	ebx
; Line 48678
	ret	0
; Line 48675
$LN27@loadExt:
	mov	eax, edi
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 258			; 00000102H
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL35@loadExt:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL35@loadExt
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
; Line 48676
	push	edi
	call	_free
	add	esp, 4
$LN33@loadExt:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 48678
	ret	0
_loadExt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sumStep
_TEXT	SEGMENT
_v$96139 = -8						; size = 8
_s2$96144 = 8						; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_sumStep PROC						; COMDAT
; Line 48866
	mov	eax, DWORD PTR _context$[esp-4]
	mov	edx, DWORD PTR [eax+72]
	mov	ecx, 1024				; 00000400H
	sub	esp, 8
	test	WORD PTR [edx+24], cx
	jne	SHORT $LN7@sumStep
	mov	WORD PTR [edx+24], cx
	mov	DWORD PTR [edx+28], OFFSET _sqlite3FreeX
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	lea	eax, DWORD PTR [edx+32]
	xor	ecx, ecx
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
$LN7@sumStep:
	push	esi
; Line 48867
	mov	esi, DWORD PTR _argv$[esp+8]
	mov	ecx, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR [edx+16]
	push	ecx
	call	_sqlite3_value_numeric_type
	add	esp, 4
; Line 48868
	test	edi, edi
	je	$LN1@sumStep
	cmp	eax, 5
	je	$LN1@sumStep
	push	ebx
; Line 48869
	mov	ebx, 1
	add	DWORD PTR [edi+16], ebx
	adc	DWORD PTR [edi+20], 0
; Line 48870
	cmp	eax, ebx
; Line 48871
	mov	esi, DWORD PTR [esi]
	jne	SHORT $LN3@sumStep
	call	_sqlite3VdbeIntValue
; Line 48873
	mov	cl, BYTE PTR [edi+25]
	or	cl, BYTE PTR [edi+24]
	mov	DWORD PTR _v$96139[esp+20], eax
	mov	DWORD PTR _v$96139[esp+24], edx
	fild	QWORD PTR _v$96139[esp+20]
	fadd	QWORD PTR [edi]
	fstp	QWORD PTR [edi]
	jne	SHORT $LN18@sumStep
; Line 48874
	mov	ecx, DWORD PTR [edi+12]
	mov	ebx, DWORD PTR [edi+8]
	add	ebx, eax
	push	ebp
	mov	esi, ecx
	adc	esi, edx
	mov	ebp, ebx
; Line 48875
	mov	ebx, ecx
	sar	ecx, 31					; 0000001fH
; Line 48876
	mov	ecx, edx
	sar	edx, 31					; 0000001fH
	sar	ebx, 31					; 0000001fH
; Line 48877
	mov	edx, esi
	sar	edx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
; Line 48878
	mov	dl, bl
	mov	DWORD PTR _s2$96144[esp+20], ecx
	not	dl
	mov	eax, esi
	sar	eax, 31					; 0000001fH
	not	cl
	and	dl, cl
	and	dl, al
	not	al
	and	al, bl
	and	al, BYTE PTR _s2$96144[esp+20]
; Line 48879
	mov	DWORD PTR [edi+8], ebp
	pop	ebp
	or	dl, al
	pop	ebx
	mov	DWORD PTR [edi+12], esi
	mov	BYTE PTR [edi+24], dl
	pop	edi
	pop	esi
; Line 48886
	add	esp, 8
	ret	0
$LN3@sumStep:
; Line 48882
	call	_sqlite3VdbeRealValue
	fadd	QWORD PTR [edi]
; Line 48883
	mov	BYTE PTR [edi+25], bl
	fstp	QWORD PTR [edi]
$LN18@sumStep:
	pop	ebx
$LN1@sumStep:
	pop	edi
	pop	esi
; Line 48886
	add	esp, 8
	ret	0
_sumStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _autoIncBegin
_TEXT	SEGMENT
_v$119990 = -16						; size = 4
_pDb$96398 = -16					; size = 4
_addr$96400 = -12					; size = 4
$T119992 = -8						; size = 4
_memId$ = -4						; size = 4
_iDb$ = 8						; size = 4
_pOp$120032 = 12					; size = 4
_pTab$ = 12						; size = 4
_autoIncBegin PROC					; COMDAT
; _pParse$ = eax
; Line 49318
	mov	ecx, DWORD PTR _pTab$[esp-4]
	sub	esp, 16					; 00000010H
	push	ebx
	mov	ebx, eax
	xor	eax, eax
	cmp	BYTE PTR [ecx+56], al
	je	$LN1@autoIncBeg
; Line 49320
	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _iDb$[esp+16]
	push	ebp
; Line 49321
	mov	ebp, DWORD PTR [ebx+28]
	push	esi
	mov	esi, DWORD PTR [ebx+12]
	push	edi
	mov	edi, DWORD PTR [edx+4]
	lea	eax, DWORD PTR [ecx+ecx*2]
	lea	eax, DWORD PTR [edi+eax*8]
	mov	DWORD PTR _pDb$96398[esp+32], eax
; Line 49324
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR _addr$96400[esp+32], eax
; Line 49325
	mov	eax, DWORD PTR [ebx+32]
	lea	edi, DWORD PTR [eax+1]
; Line 49326
	add	eax, 2
	mov	DWORD PTR [ebx+32], eax
; Line 49327
	mov	eax, DWORD PTR _pDb$96398[esp+32]
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR _memId$[esp+32], edi
	mov	edi, DWORD PTR [eax+116]
	cmp	BYTE PTR [edi+57], 0
	mov	DWORD PTR $T119992[esp+32], edi
	jne	SHORT $LN7@autoIncBeg
	mov	eax, esi
	test	eax, eax
	mov	DWORD PTR _v$119990[esp+32], eax
	jne	SHORT $LN9@autoIncBeg
	mov	edi, edx
	call	_sqlite3VdbeCreate
	mov	edi, DWORD PTR $T119992[esp+32]
	mov	ecx, DWORD PTR _iDb$[esp+28]
	mov	DWORD PTR [ebx+12], eax
	mov	DWORD PTR _v$119990[esp+32], eax
$LN9@autoIncBeg:
	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+20]
	push	edx
	push	0
	push	eax
	push	ecx
	push	ebx
	call	_sqlite3TableLock
	mov	ecx, DWORD PTR _iDb$[esp+48]
	mov	ebx, DWORD PTR _v$119990[esp+52]
	push	0
	push	ecx
	push	47					; 0000002fH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	mov	edx, DWORD PTR [edi+20]
	push	edx
	push	ebp
	push	14					; 0000000eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	mov	eax, DWORD PTR [edi+4]
	push	eax
	push	ebp
	push	104					; 00000068H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
$LN7@autoIncBeg:
; Line 49328
	mov	eax, DWORD PTR _addr$96400[esp+32]
	add	eax, 13					; 0000000dH
	push	eax
	push	ebp
	push	127					; 0000007fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49329
	push	0
	push	ebp
	push	3
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49330
	mov	ecx, DWORD PTR _pTab$[esp+52]
	mov	ebx, DWORD PTR [ecx]
	push	0
	push	0
	push	88					; 00000058H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 36					; 00000024H
	test	ecx, ecx
	je	SHORT $LN36@autoIncBeg
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN31@autoIncBeg
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN36@autoIncBeg
$LN31@autoIncBeg:
	test	eax, eax
	jl	SHORT $LN27@autoIncBeg
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN40@autoIncBeg
$LN27@autoIncBeg:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN29@autoIncBeg
$LN40@autoIncBeg:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edi+12]
	mov	DWORD PTR _pOp$120032[esp+28], edi
	call	_freeP3
	xor	eax, eax
	cmp	ebx, eax
	mov	DWORD PTR [edi+12], eax
	jne	SHORT $LN37@autoIncBeg
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	jmp	SHORT $LN29@autoIncBeg
$LN37@autoIncBeg:
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL38@autoIncBeg:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL38@autoIncBeg
	sub	eax, edx
	mov	edi, eax
	call	_sqlite3StrNDup
	mov	ecx, DWORD PTR _pOp$120032[esp+28]
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], -1
	jmp	SHORT $LN29@autoIncBeg
$LN36@autoIncBeg:
	mov	ecx, ebx
	xor	eax, eax
	call	_freeP3
$LN29@autoIncBeg:
; Line 49331
	mov	edi, DWORD PTR _addr$96400[esp+32]
	lea	eax, DWORD PTR [edi+12]
	push	eax
	push	256					; 00000100H
	push	67					; 00000043H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49332
	push	0
	push	ebp
	push	37					; 00000025H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49333
	mov	ebx, DWORD PTR _memId$[esp+56]
	push	1
	lea	ecx, DWORD PTR [ebx-1]
	push	ecx
	push	124					; 0000007cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49334
	push	1
	push	ebp
	push	3
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49335
	push	1
	push	ebx
	push	124					; 0000007cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49336
	lea	eax, DWORD PTR [edi+13]
	push	eax
	push	0
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 72					; 00000048H
; Line 49337
	add	edi, 4
	push	edi
	push	ebp
	push	110					; 0000006eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49338
	push	0
	push	ebp
	push	30					; 0000001eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
; Line 49340
	mov	eax, ebx
	pop	ebp
$LN1@autoIncBeg:
	pop	ebx
; Line 49341
	add	esp, 16					; 00000010H
	ret	0
_autoIncBegin ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _autoIncStep
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_autoIncStep PROC					; COMDAT
; _memId$ = eax
; Line 49352
	test	eax, eax
	jle	SHORT $LN1@autoIncSte
; Line 49353
	push	0
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+4]
	mov	eax, DWORD PTR [eax+12]
	push	42					; 0000002aH
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN1@autoIncSte:
; Line 49355
	ret	0
_autoIncStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _autoIncEnd
_TEXT	SEGMENT
_iCur$96420 = -8					; size = 4
_addr$96423 = -4					; size = 4
_pParse$ = 8						; size = 4
_iDb$ = 12						; size = 4
_pTab$ = 16						; size = 4
_memId$ = 20						; size = 4
_autoIncEnd PROC					; COMDAT
; Line 49368
	mov	eax, DWORD PTR _pTab$[esp-4]
	sub	esp, 8
	cmp	BYTE PTR [eax+56], 0
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+8]
	je	$LN1@autoIncEnd
; Line 49369
	mov	ecx, DWORD PTR [ebp+28]
; Line 49371
	mov	eax, DWORD PTR [ebp]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [ebp+12]
; Line 49374
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR _iCur$96420[esp+20], ecx
	mov	ecx, DWORD PTR _iDb$[esp+16]
	mov	DWORD PTR _addr$96423[esp+20], edx
	push	edi
; Line 49375
	mov	edi, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	edx, DWORD PTR [edi+edx*8+20]
	mov	ebx, DWORD PTR [edx+116]
	cmp	BYTE PTR [ebx+57], 0
	jne	SHORT $LN39@autoIncEnd
	mov	edi, esi
	test	edi, edi
	jne	SHORT $LN9@autoIncEnd
	mov	edi, eax
	call	_sqlite3VdbeCreate
	mov	ecx, DWORD PTR _iDb$[esp+20]
	mov	DWORD PTR [ebp+12], eax
	mov	edi, eax
$LN9@autoIncEnd:
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+20]
	push	eax
	push	1
	push	edx
	push	ecx
	push	ebp
	call	_sqlite3TableLock
	mov	eax, DWORD PTR _iDb$[esp+40]
	push	0
	push	eax
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [ebx+20]
	mov	ebp, DWORD PTR _iCur$96420[esp+56]
	push	ecx
	push	ebp
	push	9
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	edx, DWORD PTR [ebx+4]
	push	edx
	push	ebp
	push	104					; 00000068H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
$LN39@autoIncEnd:
; Line 49376
	mov	eax, DWORD PTR _memId$[esp+20]
	add	eax, -1
	push	0
	push	eax
	push	1
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49377
	mov	ecx, DWORD PTR _addr$96423[esp+36]
	add	ecx, 7
	push	ecx
	push	-1
	push	66					; 00000042H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49378
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49379
	mov	edi, DWORD PTR _iCur$96420[esp+60]
	push	0
	push	edi
	push	23					; 00000017H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49380
	mov	edx, DWORD PTR _pTab$[esp+68]
	mov	ebx, DWORD PTR [edx]
	push	0
	push	0
	push	88					; 00000058H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	ebp, DWORD PTR [esi+20]
	add	esp, 60					; 0000003cH
	test	ebp, ebp
	je	SHORT $LN36@autoIncEnd
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN31@autoIncEnd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN36@autoIncEnd
$LN31@autoIncEnd:
	test	eax, eax
	jl	SHORT $LN27@autoIncEnd
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN26@autoIncEnd
$LN27@autoIncEnd:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN29@autoIncEnd
$LN26@autoIncEnd:
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [ebp+eax*4+12]
	lea	ebp, DWORD PTR [ebp+eax*4]
	mov	eax, DWORD PTR [ebp+16]
	call	_freeP3
	xor	eax, eax
	cmp	ebx, eax
	mov	DWORD PTR [ebp+12], eax
	jne	SHORT $LN37@autoIncEnd
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], eax
	jmp	SHORT $LN29@autoIncEnd
$LN37@autoIncEnd:
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL38@autoIncEnd:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL38@autoIncEnd
	sub	eax, edx
	mov	edi, eax
	call	_sqlite3StrNDup
	mov	edi, DWORD PTR _iCur$96420[esp+24]
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], -1
	jmp	SHORT $LN29@autoIncEnd
$LN36@autoIncEnd:
	mov	ecx, ebx
	xor	eax, eax
	call	_freeP3
$LN29@autoIncEnd:
; Line 49381
	mov	ecx, DWORD PTR _memId$[esp+20]
	push	0
	push	ecx
	push	1
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49382
	push	0
	push	2
	push	91					; 0000005bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49383
	push	8
	push	edi
	push	113					; 00000071H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 49384
	push	0
	push	edi
	push	30					; 0000001eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 48					; 00000030H
	pop	edi
	pop	esi
	pop	ebx
$LN1@autoIncEnd:
	pop	ebp
; Line 49386
	add	esp, 8
	ret	0
_autoIncEnd ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3CompleteInsertion
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_pTab$ = 12						; size = 4
_base$ = 16						; size = 4
_aIdxUsed$ = 20						; size = 4
_rowidChng$ = 24					; size = 4
_isUpdate$ = 28						; size = 4
_newIdx$ = 32						; size = 4
_appendBias$ = 36					; size = 4
_sqlite3CompleteInsertion PROC				; COMDAT
; Line 50366
	push	ebx
	push	ebp
; Line 50373
	mov	ebp, DWORD PTR _pParse$[esp+4]
	push	esi
	mov	esi, DWORD PTR [ebp+12]
	xor	ebx, ebx
	cmp	esi, ebx
	push	edi
	jne	SHORT $LN16@sqlite3Com@3
	mov	edi, DWORD PTR [ebp]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [ebp+12], eax
	mov	esi, eax
$LN16@sqlite3Com@3:
; Line 50376
	mov	eax, DWORD PTR _pTab$[esp+12]
	mov	eax, DWORD PTR [eax+16]
	xor	ebp, ebp
	cmp	eax, ebx
	je	SHORT $LN11@sqlite3Com@3
	npad	5
$LL13@sqlite3Com@3:
	mov	eax, DWORD PTR [eax+32]
	add	ebp, 1
	cmp	eax, ebx
	jne	SHORT $LL13@sqlite3Com@3
$LN11@sqlite3Com@3:
; Line 50377
	add	ebp, -1
	cmp	ebp, ebx
	jl	SHORT $LN8@sqlite3Com@3
$LL10@sqlite3Com@3:
; Line 50378
	mov	eax, DWORD PTR _aIdxUsed$[esp+12]
	cmp	eax, ebx
	je	SHORT $LN7@sqlite3Com@3
	cmp	BYTE PTR [eax+ebp], bl
	je	SHORT $LN9@sqlite3Com@3
$LN7@sqlite3Com@3:
; Line 50379
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN19@sqlite3Com@3
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN94@sqlite3Com@3
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN95@sqlite3Com@3
$LN94@sqlite3Com@3:
	xor	ebx, ebx
$LN19@sqlite3Com@3:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _base$[esp+12]
	lea	edx, DWORD PTR [ecx+ebp+1]
	mov	BYTE PTR [eax], 111			; 0000006fH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN9@sqlite3Com@3
$LN95@sqlite3Com@3:
	xor	ebx, ebx
$LN9@sqlite3Com@3:
; Line 50377
	sub	ebp, 1
	jns	SHORT $LL10@sqlite3Com@3
$LN8@sqlite3Com@3:
; Line 50381
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	eax, DWORD PTR _pTab$[esp+12]
	mov	ebp, DWORD PTR [eax+4]
	jg	SHORT $LN25@sqlite3Com@3
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN96@sqlite3Com@3
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN97@sqlite3Com@3
$LN96@sqlite3Com@3:
	xor	ebx, ebx
$LN25@sqlite3Com@3:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 91			; 0000005bH
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN27@sqlite3Com@3
$LN97@sqlite3Com@3:
	xor	ebx, ebx
$LN27@sqlite3Com@3:
; Line 50382
	mov	eax, DWORD PTR _pTab$[esp+12]
	push	esi
	call	_sqlite3TableAffinityStr
	add	esp, 4
; Line 50384
	cmp	DWORD PTR _newIdx$[esp+12], ebx
	jl	$LN92@sqlite3Com@3
; Line 50385
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN31@sqlite3Com@3
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN99@sqlite3Com@3
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN100@sqlite3Com@3
$LN99@sqlite3Com@3:
	xor	ebx, ebx
$LN31@sqlite3Com@3:
	mov	ecx, DWORD PTR [esi+20]
	mov	ebp, 1
	add	DWORD PTR [esi+12], ebp
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN33@sqlite3Com@3
$LN100@sqlite3Com@3:
	xor	ebx, ebx
	lea	ebp, DWORD PTR [ebx+1]
$LN33@sqlite3Com@3:
; Line 50386
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN37@sqlite3Com@3
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN101@sqlite3Com@3
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN102@sqlite3Com@3
$LN101@sqlite3Com@3:
	xor	ebx, ebx
$LN37@sqlite3Com@3:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], ebp
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN39@sqlite3Com@3
$LN102@sqlite3Com@3:
	xor	ebx, ebx
$LN39@sqlite3Com@3:
; Line 50387
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN43@sqlite3Com@3
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN103@sqlite3Com@3
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN104@sqlite3Com@3
$LN103@sqlite3Com@3:
	xor	ebx, ebx
$LN43@sqlite3Com@3:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], ebp
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _newIdx$[esp+12]
	mov	BYTE PTR [eax], 113			; 00000071H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN45@sqlite3Com@3
$LN92@sqlite3Com@3:
	mov	ebp, 1
	jmp	SHORT $LN45@sqlite3Com@3
$LN104@sqlite3Com@3:
	xor	ebx, ebx
$LN45@sqlite3Com@3:
; Line 50390
	mov	edx, DWORD PTR _pParse$[esp+12]
	cmp	BYTE PTR [edx+19], bl
	je	SHORT $LN5@sqlite3Com@3
; Line 50391
	xor	ebp, ebp
; Line 50392
	jmp	SHORT $LN4@sqlite3Com@3
$LN5@sqlite3Com@3:
; Line 50394
	xor	eax, eax
	cmp	DWORD PTR _isUpdate$[esp+12], ebx
	setne	al
	lea	eax, DWORD PTR [eax+eax+2]
	or	ebp, eax
$LN4@sqlite3Com@3:
; Line 50396
	cmp	DWORD PTR _appendBias$[esp+12], ebx
	je	SHORT $LN3@sqlite3Com@3
; Line 50397
	or	ebp, 8
$LN3@sqlite3Com@3:
; Line 50399
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN49@sqlite3Com@3
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN105@sqlite3Com@3
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN106@sqlite3Com@3
$LN105@sqlite3Com@3:
	xor	ebx, ebx
$LN49@sqlite3Com@3:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _base$[esp+12]
	mov	BYTE PTR [eax], 113			; 00000071H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN51@sqlite3Com@3
$LN106@sqlite3Com@3:
	xor	ebx, ebx
$LN51@sqlite3Com@3:
; Line 50400
	mov	edx, DWORD PTR _pParse$[esp+12]
	cmp	BYTE PTR [edx+19], bl
	jne	SHORT $LN70@sqlite3Com@3
; Line 50401
	mov	edi, DWORD PTR [esi+20]
	cmp	edi, ebx
	mov	eax, DWORD PTR _pTab$[esp+12]
	mov	ebp, DWORD PTR [eax]
	je	SHORT $LN87@sqlite3Com@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN68@sqlite3Com@3
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN87@sqlite3Com@3
$LN68@sqlite3Com@3:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN70@sqlite3Com@3
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edi+ecx*4+16]
	lea	edi, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	cmp	ebp, ebx
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN88@sqlite3Com@3
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN70@sqlite3Com@3
$LN88@sqlite3Com@3:
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [edi+16], -2			; fffffffeH
	jmp	SHORT $LN70@sqlite3Com@3
$LN87@sqlite3Com@3:
	mov	ecx, ebp
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN70@sqlite3Com@3:
; Line 50404
	cmp	DWORD PTR _isUpdate$[esp+12], ebx
	je	SHORT $LN79@sqlite3Com@3
	cmp	DWORD PTR _rowidChng$[esp+12], ebx
	je	SHORT $LN79@sqlite3Com@3
; Line 50405
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN77@sqlite3Com@3
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN107@sqlite3Com@3
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN79@sqlite3Com@3
$LN107@sqlite3Com@3:
	xor	ebx, ebx
$LN77@sqlite3Com@3:
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, 1
	add	DWORD PTR [esi+12], ecx
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 11			; 0000000bH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
$LN79@sqlite3Com@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 50407
	ret	0
_sqlite3CompleteInsertion ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_auto_extension
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_auto_extension
_TEXT	SEGMENT
_xInit$ = 8						; size = 4
_sqlite3_auto_extension PROC				; COMDAT
; Line 51553
	mov	ecx, DWORD PTR _aAutoExtension
	push	ebx
	mov	ebx, DWORD PTR _inMutex
	push	ebp
	push	esi
	mov	esi, DWORD PTR _nAutoExtension
	xor	ebp, ebp
	add	ebx, 1
	xor	eax, eax
	cmp	esi, ebp
	mov	DWORD PTR _inMutex, ebx
	jle	SHORT $LN40@sqlite3_au
$LL7@sqlite3_au:
; Line 51554
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _xInit$[esp+8]
	je	SHORT $LN40@sqlite3_au
	add	eax, 1
	cmp	eax, esi
	jl	SHORT $LL7@sqlite3_au
$LN40@sqlite3_au:
; Line 51556
	cmp	eax, esi
	jne	$LN39@sqlite3_au
; Line 51557
	add	esi, 1
; Line 51559
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	push	edi
	mov	DWORD PTR _nAutoExtension, esi
	lea	edi, DWORD PTR [esi*4]
	je	SHORT $LN19@sqlite3_au
	cmp	ebx, ebp
	jle	SHORT $LN19@sqlite3_au
	xor	eax, eax
	jmp	SHORT $LN27@sqlite3_au
$LN19@sqlite3_au:
	cmp	ecx, ebp
	jne	SHORT $LN18@sqlite3_au
	call	_sqlite3Malloc
	mov	esi, DWORD PTR _nAutoExtension
	mov	ebx, DWORD PTR _inMutex
	jmp	SHORT $LN27@sqlite3_au
$LN18@sqlite3_au:
	push	edi
	push	ecx
	call	_realloc
	add	esp, 8
	cmp	eax, ebp
	jne	SHORT $LN27@sqlite3_au
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN26@sqlite3_au
	cmp	ebx, ebp
	jg	SHORT $LN27@sqlite3_au
$LN26@sqlite3_au:
	add	ebx, 1
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN27@sqlite3_au:
; Line 51560
	cmp	eax, ebp
	mov	DWORD PTR _aAutoExtension, eax
	pop	edi
	jne	SHORT $LN2@sqlite3_au
	pop	esi
; Line 51567
	sub	ebx, 1
	mov	DWORD PTR _nAutoExtension, ebp
	pop	ebp
	mov	DWORD PTR _inMutex, ebx
	mov	eax, 7
	pop	ebx
; Line 51570
	ret	0
$LN2@sqlite3_au:
; Line 51564
	mov	ecx, DWORD PTR _xInit$[esp+8]
	mov	DWORD PTR [eax+esi*4-4], ecx
$LN39@sqlite3_au:
	pop	esi
; Line 51567
	sub	ebx, 1
; Line 51569
	mov	eax, ebp
	pop	ebp
	mov	DWORD PTR _inMutex, ebx
	pop	ebx
; Line 51570
	ret	0
_sqlite3_auto_extension ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@EKKEGGML@automatic?5extension?5loading?5fail@ ; `string'
;	COMDAT ??_C@_0CH@EKKEGGML@automatic?5extension?5loading?5fail@
CONST	SEGMENT
??_C@_0CH@EKKEGGML@automatic?5extension?5loading?5fail@ DB 'automatic ext'
	DB	'ension loading failed: %s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AutoLoadExtensions
_TEXT	SEGMENT
_zErrmsg$97544 = -4					; size = 4
_sqlite3AutoLoadExtensions PROC				; COMDAT
; _db$ = ebx
; Line 51586
	push	ecx
	push	ebp
; Line 51589
	xor	ebp, ebp
; Line 51592
	cmp	DWORD PTR _nAutoExtension, ebp
	mov	ecx, 1
	push	esi
	mov	esi, ecx
	jne	SHORT $LN7@sqlite3Aut@5
	pop	esi
; Line 51594
	xor	eax, eax
	pop	ebp
; Line 51615
	pop	ecx
	ret	0
$LN7@sqlite3Aut@5:
	push	edi
; Line 51596
	xor	edi, edi
	npad	3
$LL17@sqlite3Aut@5:
; Line 51598
	add	DWORD PTR _inMutex, ecx
; Line 51599
	cmp	edi, DWORD PTR _nAutoExtension
	mov	DWORD PTR _zErrmsg$97544[esp+16], 0
	jl	SHORT $LN3@sqlite3Aut@5
; Line 51600
	xor	eax, eax
; Line 51601
	xor	esi, esi
; Line 51602
	jmp	SHORT $LN2@sqlite3Aut@5
$LN3@sqlite3Aut@5:
; Line 51604
	mov	eax, DWORD PTR _aAutoExtension
	mov	eax, DWORD PTR [eax+edi*4]
$LN2@sqlite3Aut@5:
; Line 51606
	sub	DWORD PTR _inMutex, ecx
; Line 51607
	test	eax, eax
	je	SHORT $LN5@sqlite3Aut@5
	push	OFFSET _sqlite3_apis
	lea	ecx, DWORD PTR _zErrmsg$97544[esp+20]
	push	ecx
	push	ebx
	call	eax
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@sqlite3Aut@5
; Line 51609
	mov	edx, DWORD PTR _zErrmsg$97544[esp+16]
	push	edx
	push	OFFSET ??_C@_0CH@EKKEGGML@automatic?5extension?5loading?5fail@
	push	1
	mov	eax, ebx
	call	_sqlite3Error
	add	esp, 12					; 0000000cH
; Line 51610
	xor	esi, esi
; Line 51611
	lea	ebp, DWORD PTR [esi+1]
$LN5@sqlite3Aut@5:
	mov	ecx, 1
	add	edi, ecx
	test	esi, esi
	jne	SHORT $LL17@sqlite3Aut@5
	pop	edi
	pop	esi
; Line 51614
	mov	eax, ebp
	pop	ebp
; Line 51615
	pop	ecx
	ret	0
_sqlite3AutoLoadExtensions ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _returnSingleInt
_TEXT	SEGMENT
_zLabel$ = 8						; size = 4
_value$ = 12						; size = 4
_returnSingleInt PROC					; COMDAT
; _pParse$ = eax
; Line 51769
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zLabel$[esp+4]
	push	esi
	mov	esi, eax
; Line 51770
	mov	ebx, DWORD PTR [esi+12]
	test	ebx, ebx
	jne	SHORT $LN4@returnSing
	push	edi
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [esi+12], eax
	mov	ebx, eax
	pop	edi
$LN4@returnSing:
; Line 51771
	mov	eax, DWORD PTR _value$[esp+8]
	push	0
	push	eax
	push	47					; 0000002fH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 51772
	cmp	BYTE PTR [esi+128], 0
	jne	SHORT $LN49@returnSing
; Line 51773
	push	1
	call	_sqlite3VdbeSetNumCols
	add	esp, 4
; Line 51774
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN11@returnSing
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN49@returnSing
$LN11@returnSing:
	mov	esi, DWORD PTR [ebx+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	ebp, ebp
	jne	SHORT $LN29@returnSing
; Line 51776
	push	ebp
	push	1
	push	58					; 0000003aH
	mov	eax, ebx
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	pop	esi
	pop	ebp
	pop	ebx
; Line 51777
	ret	0
; Line 51774
$LN29@returnSing:
	mov	eax, ebp
	mov	DWORD PTR [esi+16], ebp
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 130			; 00000082H
	lea	edx, DWORD PTR [eax+1]
$LL48@returnSing:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL48@returnSing
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	WORD PTR [esi+24], 162			; 000000a2H
$LN49@returnSing:
; Line 51776
	push	0
	push	1
	push	58					; 0000003aH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	pop	esi
	pop	ebp
	pop	ebx
; Line 51777
	ret	0
_returnSingleInt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _flagPragma
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_zLeft$ = 12						; size = 4
_zRight$ = 16						; size = 4
_flagPragma PROC					; COMDAT
; Line 51815
	mov	eax, DWORD PTR _zLeft$[esp-4]
	push	ebx
	mov	bl, BYTE PTR [eax]
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+4]
	push	esi
	push	edi
	xor	edi, edi
	mov	esi, OFFSET ?aPragma@?1??flagPragma@@9@9
$LL29@flagPragma:
	test	bl, bl
	mov	ecx, DWORD PTR _zLeft$[esp+12]
	mov	edx, DWORD PTR [esi]
	je	SHORT $LN12@flagPragma
	mov	al, bl
$LL13@flagPragma:
	movzx	ebp, BYTE PTR [edx]
	movzx	eax, al
	mov	al, BYTE PTR _sqlite3UpperToLower[eax]
	cmp	al, BYTE PTR _sqlite3UpperToLower[ebp]
	jne	SHORT $LN28@flagPragma
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL13@flagPragma
$LN28@flagPragma:
	mov	ebp, DWORD PTR _pParse$[esp+12]
$LN12@flagPragma:
	movzx	edx, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[edx]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[ecx]
	sub	edx, eax
	je	SHORT $LN23@flagPragma
	add	edi, 1
	add	esi, 8
	cmp	edi, 10					; 0000000aH
	jb	SHORT $LL29@flagPragma
	pop	edi
	pop	esi
	pop	ebp
; Line 51833
	xor	eax, eax
	pop	ebx
; Line 51834
	ret	0
$LN23@flagPragma:
; Line 51818
	cmp	DWORD PTR [ebp+12], 0
	mov	edi, DWORD PTR [ebp]
	jne	SHORT $LN26@flagPragma
	call	_sqlite3VdbeCreate
; Line 51819
	test	eax, eax
	mov	DWORD PTR [ebp+12], eax
	je	SHORT $LN27@flagPragma
$LN26@flagPragma:
; Line 51820
	mov	ebx, DWORD PTR _zRight$[esp+12]
	test	ebx, ebx
	jne	SHORT $LN4@flagPragma
; Line 51821
	mov	eax, DWORD PTR [edi+8]
	and	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	neg	eax
	sbb	eax, eax
	neg	eax
	push	eax
	push	ecx
	mov	eax, ebp
	call	_returnSingleInt
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
; Line 51830
	lea	eax, DWORD PTR [ebx+1]
	pop	ebx
; Line 51834
	ret	0
$LN4@flagPragma:
; Line 51823
	call	_getSafetyLevel
	test	al, 1
	je	SHORT $LN2@flagPragma
; Line 51824
	mov	edx, DWORD PTR [esi+4]
	or	DWORD PTR [edi+8], edx
	pop	edi
	pop	esi
	pop	ebp
; Line 51830
	mov	eax, 1
	pop	ebx
; Line 51834
	ret	0
$LN2@flagPragma:
; Line 51826
	mov	eax, DWORD PTR [esi+4]
	not	eax
	and	DWORD PTR [edi+8], eax
$LN27@flagPragma:
	pop	edi
	pop	esi
	pop	ebp
; Line 51830
	mov	eax, 1
	pop	ebx
; Line 51834
	ret	0
_flagPragma ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SelectNew
_TEXT	SEGMENT
_standin$ = -68						; size = 68
_pSrc$ = 8						; size = 4
_pWhere$ = 12						; size = 4
_pGroupBy$ = 16						; size = 4
_pHaving$ = 20						; size = 4
_pOrderBy$ = 24						; size = 4
_isDistinct$ = 28					; size = 4
_pLimit$ = 32						; size = 4
_pOffset$ = 36						; size = 4
_sqlite3SelectNew PROC					; COMDAT
; _pEList$ = eax
; Line 53500
	sub	esp, 68					; 00000044H
	push	ebx
	push	ebp
; Line 53503
	mov	ebp, DWORD PTR _inMutex
	push	esi
	xor	esi, esi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	push	edi
	mov	ebx, eax
	je	SHORT $LN13@sqlite3Sel@3
	test	ebp, ebp
	jg	SHORT $LN6@sqlite3Sel@3
$LN13@sqlite3Sel@3:
	push	68					; 00000044H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN65@sqlite3Sel@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN23@sqlite3Sel@3
	test	ebp, ebp
	jg	SHORT $LN6@sqlite3Sel@3
$LN23@sqlite3Sel@3:
	add	ebp, 1
	mov	DWORD PTR _inMutex, ebp
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN6@sqlite3Sel@3
$LN65@sqlite3Sel@3:
	push	68					; 00000044H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN6@sqlite3Sel@3:
; Line 53505
	test	esi, esi
	jne	SHORT $LN3@sqlite3Sel@3
; Line 53507
	push	68					; 00000044H
	lea	esi, DWORD PTR _standin$[esp+88]
	mov	eax, esi
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN3@sqlite3Sel@3:
; Line 53509
	or	edi, -1
	test	ebx, ebx
	jne	$LN2@sqlite3Sel@3
; Line 53510
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN47@sqlite3Sel@3
	test	ebp, ebp
	jg	SHORT $LN66@sqlite3Sel@3
$LN47@sqlite3Sel@3:
	push	72					; 00000048H
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN67@sqlite3Sel@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN57@sqlite3Sel@3
	test	ebp, ebp
	jg	SHORT $LN40@sqlite3Sel@3
$LN57@sqlite3Sel@3:
	add	ebp, 1
	mov	DWORD PTR _inMutex, ebp
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN40@sqlite3Sel@3
$LN67@sqlite3Sel@3:
	push	72					; 00000048H
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN40@sqlite3Sel@3:
	test	ebx, ebx
	jne	SHORT $LN37@sqlite3Sel@3
$LN66@sqlite3Sel@3:
	push	0
	call	_sqlite3ExprDelete
	push	0
	call	_sqlite3ExprDelete
	add	esp, 8
	xor	ebx, ebx
	jmp	SHORT $LN38@sqlite3Sel@3
$LN37@sqlite3Sel@3:
	xor	eax, eax
	mov	BYTE PTR [ebx], 107			; 0000006bH
	mov	DWORD PTR [ebx+8], eax
	mov	DWORD PTR [ebx+12], eax
	mov	DWORD PTR [ebx+48], edi
	call	_sqlite3ExprSetHeight
$LN38@sqlite3Sel@3:
	push	0
	push	ebx
	xor	eax, eax
	call	_sqlite3ExprListAppend
	add	esp, 8
	mov	ebx, eax
$LN2@sqlite3Sel@3:
; Line 53515
	mov	eax, DWORD PTR _pGroupBy$[esp+80]
	mov	ecx, DWORD PTR _pSrc$[esp+80]
	mov	edx, DWORD PTR _pWhere$[esp+80]
	mov	DWORD PTR [esi+20], eax
; Line 53518
	mov	al, BYTE PTR _isDistinct$[esp+80]
	mov	DWORD PTR [esi+12], ecx
	mov	ecx, DWORD PTR _pHaving$[esp+80]
	mov	DWORD PTR [esi+16], edx
	mov	edx, DWORD PTR _pOrderBy$[esp+80]
	mov	BYTE PTR [esi+5], al
	mov	DWORD PTR [esi+24], ecx
; Line 53521
	mov	ecx, DWORD PTR _pLimit$[esp+80]
	mov	DWORD PTR [esi+28], edx
; Line 53522
	mov	edx, DWORD PTR _pOffset$[esp+80]
; Line 53528
	lea	eax, DWORD PTR _standin$[esp+84]
	cmp	esi, eax
	mov	DWORD PTR [esi], ebx
	mov	BYTE PTR [esi+4], 110			; 0000006eH
	mov	DWORD PTR [esi+40], ecx
	mov	DWORD PTR [esi+44], edx
	mov	DWORD PTR [esi+48], edi
	mov	DWORD PTR [esi+52], edi
	mov	DWORD PTR [esi+56], edi
	mov	DWORD PTR [esi+60], edi
	mov	DWORD PTR [esi+64], edi
	jne	SHORT $LN68@sqlite3Sel@3
; Line 53529
	push	esi
	call	_clearSelect
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
; Line 53530
	xor	eax, eax
	pop	ebx
; Line 53533
	add	esp, 68					; 00000044H
	ret	0
$LN68@sqlite3Sel@3:
	pop	edi
; Line 53532
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 53533
	add	esp, 68					; 00000044H
	ret	0
_sqlite3SelectNew ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@CENKDKHG@unknown?5or?5unsupported?5join?5type@ ; `string'
PUBLIC	??_C@_0DH@LJEHIDDA@RIGHT?5and?5FULL?5OUTER?5JOINs?5are?5n@ ; `string'
;	COMDAT ??_C@_0CN@CENKDKHG@unknown?5or?5unsupported?5join?5type@
CONST	SEGMENT
??_C@_0CN@CENKDKHG@unknown?5or?5unsupported?5join?5type@ DB 'unknown or u'
	DB	'nsupported join type: %T%s%T%s%T', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@LJEHIDDA@RIGHT?5and?5FULL?5OUTER?5JOINs?5are?5n@
CONST	SEGMENT
??_C@_0DH@LJEHIDDA@RIGHT?5and?5FULL?5OUTER?5JOINs?5are?5n@ DB 'RIGHT and '
	DB	'FULL OUTER JOINs are not currently supported', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3JoinType
_TEXT	SEGMENT
_jointype$ = -24					; size = 4
_i$ = -20						; size = 4
tv196 = -16						; size = 4
_apAll$ = -12						; size = 12
_pParse$ = 8						; size = 4
_pA$ = 12						; size = 4
_pB$ = 16						; size = 4
_pC$ = 20						; size = 4
_sqlite3JoinType PROC					; COMDAT
; Line 53562
	sub	esp, 24					; 00000018H
; Line 53580
	mov	ecx, DWORD PTR _pA$[esp+20]
; Line 53581
	mov	edx, DWORD PTR _pB$[esp+20]
	push	ebx
	push	ebp
	xor	eax, eax
	mov	DWORD PTR _apAll$[esp+32], ecx
; Line 53582
	mov	ecx, DWORD PTR _pC$[esp+28]
	push	esi
	mov	DWORD PTR _jointype$[esp+36], eax
	mov	DWORD PTR _apAll$[esp+40], edx
	mov	DWORD PTR _apAll$[esp+44], ecx
; Line 53583
	mov	DWORD PTR _i$[esp+36], eax
	push	edi
	npad	7
$LL14@sqlite3Joi:
	mov	edx, DWORD PTR _i$[esp+40]
	mov	ecx, DWORD PTR _apAll$[esp+edx*4+40]
	test	ecx, ecx
	mov	DWORD PTR tv196[esp+40], ecx
	je	SHORT $LN27@sqlite3Joi
; Line 53585
	mov	ebx, DWORD PTR [ecx+4]
	xor	edi, edi
	shr	ebx, 1
	mov	esi, OFFSET ?keywords@?1??sqlite3JoinType@@9@9
	xor	ebp, ebp
	npad	2
$LL11@sqlite3Joi:
; Line 53587
	movzx	eax, BYTE PTR [esi+8]
	cmp	ebx, eax
	jne	SHORT $LN10@sqlite3Joi
	mov	ecx, DWORD PTR [ecx]
	mov	eax, ebx
	mov	edx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
	je	SHORT $LN19@sqlite3Joi
	mov	ecx, DWORD PTR tv196[esp+40]
$LN10@sqlite3Joi:
; Line 53585
	add	ebp, 10					; 0000000aH
	add	edi, 1
	add	esi, 10					; 0000000aH
	cmp	ebp, 70					; 00000046H
	jb	SHORT $LL11@sqlite3Joi
$LN26@sqlite3Joi:
; Line 53593
	or	DWORD PTR _jointype$[esp+40], 64	; 00000040H
$LN27@sqlite3Joi:
; Line 53600
	mov	eax, DWORD PTR _jointype$[esp+40]
	mov	ecx, eax
	and	ecx, 33					; 00000021H
	cmp	cl, 33					; 00000021H
	je	SHORT $LN5@sqlite3Joi
	test	al, 64					; 00000040H
	jne	SHORT $LN5@sqlite3Joi
; Line 53608
	test	al, 16					; 00000010H
	je	$LN1@sqlite3Joi
; Line 53610
	mov	edi, DWORD PTR _pParse$[esp+36]
	push	OFFSET ??_C@_0DH@LJEHIDDA@RIGHT?5and?5FULL?5OUTER?5JOINs?5are?5n@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 53614
	add	esp, 24					; 00000018H
	ret	0
$LN19@sqlite3Joi:
; Line 53588
	lea	ecx, DWORD PTR [edi+edi*4]
	movzx	edx, BYTE PTR ?keywords@?1??sqlite3JoinType@@9@9[ecx*2+9]
	or	DWORD PTR _jointype$[esp+40], edx
; Line 53592
	cmp	edi, 7
	jae	SHORT $LN26@sqlite3Joi
	mov	eax, DWORD PTR _i$[esp+40]
	add	eax, 1
	cmp	eax, 3
	mov	DWORD PTR _i$[esp+40], eax
	jl	$LL14@sqlite3Joi
; Line 53583
	jmp	SHORT $LN27@sqlite3Joi
$LN5@sqlite3Joi:
; Line 53603
	mov	edx, DWORD PTR _pB$[esp+36]
	test	edx, edx
	mov	ecx, OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	mov	eax, ecx
	jne	SHORT $LN4@sqlite3Joi
	mov	ecx, OFFSET ??_C@_01CLKCMJKC@?5?$AA@+1
$LN4@sqlite3Joi:
; Line 53604
	mov	esi, DWORD PTR _pC$[esp+36]
	test	esi, esi
	jne	SHORT $LN3@sqlite3Joi
	mov	eax, OFFSET ??_C@_01CLKCMJKC@?5?$AA@+1
$LN3@sqlite3Joi:
; Line 53606
	mov	edi, DWORD PTR _pParse$[esp+36]
	push	esi
	push	eax
	push	edx
	mov	edx, DWORD PTR _pA$[esp+48]
	push	ecx
	push	edx
	push	OFFSET ??_C@_0CN@CENKDKHG@unknown?5or?5unsupported?5join?5type@
	call	_sqlite3ErrorMsg
	add	esp, 24					; 00000018H
; Line 53607
	mov	eax, 1
$LN1@sqlite3Joi:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 53614
	add	esp, 24					; 00000018H
	ret	0
_sqlite3JoinType ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3CreateIdExpr
_TEXT	SEGMENT
_dummy$ = -8						; size = 8
_sqlite3CreateIdExpr PROC				; COMDAT
; _zName$ = eax
; Line 53640
	sub	esp, 8
; Line 53642
	test	eax, eax
	mov	DWORD PTR _dummy$[esp+8], eax
	je	SHORT $LN5@sqlite3Cre@2
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL7@sqlite3Cre@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL7@sqlite3Cre@2
	sub	eax, edx
	jmp	SHORT $LN6@sqlite3Cre@2
$LN5@sqlite3Cre@2:
	xor	eax, eax
$LN6@sqlite3Cre@2:
	push	edi
	add	eax, eax
	mov	DWORD PTR _dummy$[esp+16], eax
; Line 53643
	push	0
	push	23					; 00000017H
	lea	eax, DWORD PTR _dummy$[esp+20]
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
	pop	edi
; Line 53644
	add	esp, 8
	ret	0
_sqlite3CreateIdExpr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _addWhereTerm
_TEXT	SEGMENT
_dummy$120758 = -16					; size = 8
_dummy$120743 = -16					; size = 8
_pE2a$ = -16						; size = 4
_dummy$120788 = -8					; size = 8
_dummy$120773 = -8					; size = 8
_pTab1$ = 8						; size = 4
_zAlias1$ = 12						; size = 4
_pTab2$ = 16						; size = 4
_zAlias2$ = 20						; size = 4
_iRightJoinTable$ = 24					; size = 4
_ppExpr$ = 28						; size = 4
_addWhereTerm PROC					; COMDAT
; _zCol$ = eax
; Line 53659
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zAlias1$[esp+20]
	push	esi
	mov	esi, eax
; Line 53664
	test	esi, esi
	push	edi
	mov	DWORD PTR _dummy$120743[esp+32], esi
	je	SHORT $LN11@addWhereTe
	lea	edx, DWORD PTR [eax+1]
$LL46@addWhereTe:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL46@addWhereTe
	sub	eax, edx
	jmp	SHORT $LN12@addWhereTe
$LN11@addWhereTe:
	xor	eax, eax
$LN12@addWhereTe:
	add	eax, eax
	mov	DWORD PTR _dummy$120743[esp+36], eax
	push	0
	push	23					; 00000017H
	lea	eax, DWORD PTR _dummy$120743[esp+40]
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
; Line 53665
	test	esi, esi
	mov	ebx, eax
	mov	DWORD PTR _dummy$120758[esp+32], esi
	je	SHORT $LN17@addWhereTe
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL47@addWhereTe:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL47@addWhereTe
	sub	eax, edx
	jmp	SHORT $LN18@addWhereTe
$LN17@addWhereTe:
	xor	eax, eax
$LN18@addWhereTe:
	lea	ecx, DWORD PTR [eax+eax]
	push	0
	push	23					; 00000017H
	lea	eax, DWORD PTR _dummy$120758[esp+40]
	xor	edi, edi
	mov	DWORD PTR _dummy$120758[esp+44], ecx
	call	_sqlite3Expr
	add	esp, 8
; Line 53666
	test	ebp, ebp
	mov	DWORD PTR _pE2a$[esp+32], eax
	jne	SHORT $LN4@addWhereTe
; Line 53667
	mov	edx, DWORD PTR _pTab1$[esp+28]
	mov	ebp, DWORD PTR [edx]
$LN4@addWhereTe:
; Line 53669
	test	ebp, ebp
	mov	DWORD PTR _dummy$120773[esp+32], ebp
	je	SHORT $LN23@addWhereTe
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
$LL48@addWhereTe:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL48@addWhereTe
	sub	eax, edx
	jmp	SHORT $LN24@addWhereTe
$LN23@addWhereTe:
	xor	eax, eax
$LN24@addWhereTe:
	add	eax, eax
	mov	DWORD PTR _dummy$120773[esp+36], eax
	push	0
	push	23					; 00000017H
	lea	eax, DWORD PTR _dummy$120773[esp+40]
	xor	edi, edi
	call	_sqlite3Expr
	mov	ebp, eax
; Line 53670
	mov	eax, DWORD PTR _zAlias2$[esp+36]
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@addWhereTe
; Line 53671
	mov	ecx, DWORD PTR _pTab2$[esp+28]
	mov	edx, DWORD PTR [ecx]
	mov	eax, edx
$LN3@addWhereTe:
; Line 53673
	test	eax, eax
	mov	DWORD PTR _dummy$120788[esp+32], eax
	je	SHORT $LN29@addWhereTe
	lea	edx, DWORD PTR [eax+1]
$LL49@addWhereTe:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL49@addWhereTe
	sub	eax, edx
	jmp	SHORT $LN30@addWhereTe
$LN29@addWhereTe:
	xor	eax, eax
$LN30@addWhereTe:
	add	eax, eax
	mov	DWORD PTR _dummy$120788[esp+36], eax
	push	0
	push	23					; 00000017H
	lea	eax, DWORD PTR _dummy$120788[esp+40]
	xor	edi, edi
	call	_sqlite3Expr
	mov	esi, eax
; Line 53674
	push	ebp
	push	112					; 00000070H
	xor	eax, eax
	mov	edi, ebx
	call	_sqlite3Expr
	mov	ebx, eax
	add	esp, 16					; 00000010H
	test	ebx, ebx
	jne	SHORT $LN31@addWhereTe
	push	ebp
	call	_sqlite3ExprDelete
	mov	ecx, edi
	push	ecx
	call	_sqlite3ExprDelete
	add	esp, 8
$LN31@addWhereTe:
; Line 53675
	mov	ebp, DWORD PTR _pE2a$[esp+32]
	push	esi
	push	112					; 00000070H
	xor	eax, eax
	mov	edi, ebp
	call	_sqlite3Expr
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	jne	SHORT $LN34@addWhereTe
	push	esi
	call	_sqlite3ExprDelete
	push	ebp
	call	_sqlite3ExprDelete
	add	esp, 8
$LN34@addWhereTe:
; Line 53676
	push	ebx
	push	68					; 00000044H
	xor	eax, eax
	call	_sqlite3Expr
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	jne	SHORT $LN37@addWhereTe
	push	ebx
	call	_sqlite3ExprDelete
	push	edi
	call	_sqlite3ExprDelete
	add	esp, 8
$LN37@addWhereTe:
; Line 53677
	test	esi, esi
	mov	eax, esi
	je	SHORT $LN2@addWhereTe
; Line 53679
	mov	edx, DWORD PTR _iRightJoinTable$[esp+28]
	or	WORD PTR [esi+2], 1
	mov	DWORD PTR [esi+52], edx
$LN2@addWhereTe:
; Line 53681
	mov	ebx, DWORD PTR _ppExpr$[esp+28]
	mov	ecx, DWORD PTR [ebx]
	test	ecx, ecx
	je	SHORT $LN40@addWhereTe
	test	esi, esi
	jne	SHORT $LN41@addWhereTe
	mov	eax, ecx
	jmp	SHORT $LN40@addWhereTe
$LN41@addWhereTe:
	push	ecx
	push	61					; 0000003dH
	xor	eax, eax
	mov	edi, esi
	call	_sqlite3Expr
	add	esp, 8
$LN40@addWhereTe:
; Line 53682
	test	eax, eax
	je	SHORT $LN1@addWhereTe
; Line 53683
	mov	DWORD PTR [ebx], eax
$LN1@addWhereTe:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 53685
	add	esp, 16					; 00000010H
	ret	0
_addWhereTerm ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EA@LFCKDDII@cannot?5join?5using?5column?5?$CFs?5?9?5co@ ; `string'
PUBLIC	??_C@_0DH@DHMOHNCE@cannot?5have?5both?5ON?5and?5USING?5cl@ ; `string'
PUBLIC	??_C@_0DC@NBGJANJH@a?5NATURAL?5join?5may?5not?5have?5an?5O@ ; `string'
;	COMDAT ??_C@_0EA@LFCKDDII@cannot?5join?5using?5column?5?$CFs?5?9?5co@
CONST	SEGMENT
??_C@_0EA@LFCKDDII@cannot?5join?5using?5column?5?$CFs?5?9?5co@ DB 'cannot'
	DB	' join using column %s - column not present in both tables', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@DHMOHNCE@cannot?5have?5both?5ON?5and?5USING?5cl@
CONST	SEGMENT
??_C@_0DH@DHMOHNCE@cannot?5have?5both?5ON?5and?5USING?5cl@ DB 'cannot hav'
	DB	'e both ON and USING clauses in the same join', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@NBGJANJH@a?5NATURAL?5join?5may?5not?5have?5an?5O@
CONST	SEGMENT
??_C@_0DC@NBGJANJH@a?5NATURAL?5join?5may?5not?5have?5an?5O@ DB 'a NATURAL'
	DB	' join may not have an ON or USING clause', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqliteProcessJoin
_TEXT	SEGMENT
tv400 = -24						; size = 4
tv377 = -20						; size = 4
tv471 = -16						; size = 4
_j$ = -16						; size = 4
_pRightTab$98442 = -12					; size = 4
_i$ = -8						; size = 4
_pSrc$ = -4						; size = 4
_pParse$ = 8						; size = 4
_p$ = 12						; size = 4
_sqliteProcessJoin PROC					; COMDAT
; Line 53736
	sub	esp, 24					; 00000018H
; Line 53742
	mov	eax, DWORD PTR _p$[esp+20]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax+12]
; Line 53745
	movsx	ecx, WORD PTR [esi]
	xor	eax, eax
	sub	ecx, 1
	test	ecx, ecx
	push	edi
	mov	DWORD PTR _pSrc$[esp+40], esi
	mov	DWORD PTR _i$[esp+40], eax
	jle	$LN18@sqliteProc
	lea	edx, DWORD PTR [esi+16]
	mov	DWORD PTR tv400[esp+40], edx
	add	esi, 84					; 00000054H
	jmp	SHORT $LN20@sqliteProc
$LL40@sqliteProc:
; Line 53742
	xor	eax, eax
$LN20@sqliteProc:
; Line 53746
	mov	ecx, DWORD PTR tv400[esp+40]
	mov	ebp, DWORD PTR [ecx+4]
; Line 53749
	cmp	ebp, eax
	mov	ebx, DWORD PTR [esi-16]
	mov	DWORD PTR _pRightTab$98442[esp+40], ebx
	je	$LN19@sqliteProc
	cmp	ebx, eax
	je	$LN19@sqliteProc
; Line 53754
	test	BYTE PTR [esi-7], 4
	je	SHORT $LN10@sqliteProc
; Line 53755
	cmp	DWORD PTR [esi], eax
	jne	$LN33@sqliteProc
	cmp	DWORD PTR [esi+4], eax
	jne	$LN33@sqliteProc
; Line 53760
	cmp	DWORD PTR [ebp+4], eax
	mov	DWORD PTR _j$[esp+40], eax
	jle	SHORT $LN10@sqliteProc
	mov	DWORD PTR tv377[esp+40], eax
$LL39@sqliteProc:
; Line 53761
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR tv377[esp+40]
	mov	edi, DWORD PTR [eax+edx]
; Line 53762
	push	edi
	mov	ecx, ebx
	call	_columnIndex
	add	esp, 4
	test	eax, eax
	jl	SHORT $LN11@sqliteProc
; Line 53765
	mov	ecx, DWORD PTR _p$[esp+36]
	mov	edx, DWORD PTR [esi-4]
	mov	eax, DWORD PTR [esi-20]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR tv400[esp+44]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	ebx
	push	edx
	push	ebp
	mov	eax, edi
	call	_addWhereTerm
	add	esp, 24					; 00000018H
$LN11@sqliteProc:
	mov	eax, DWORD PTR _j$[esp+40]
	add	DWORD PTR tv377[esp+40], 20		; 00000014H
	add	eax, 1
	cmp	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR _j$[esp+40], eax
	jl	SHORT $LL39@sqliteProc
$LN10@sqliteProc:
; Line 53773
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN7@sqliteProc
	cmp	DWORD PTR [esi+4], 0
	jne	$LN34@sqliteProc
; Line 53783
	mov	ecx, DWORD PTR [esi-4]
	push	ecx
	push	eax
	call	_setJoinExpr
; Line 53784
	mov	edx, DWORD PTR _p$[esp+44]
	mov	eax, DWORD PTR [edx+16]
	mov	edi, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN26@sqliteProc
	mov	eax, edi
	jmp	SHORT $LN23@sqliteProc
$LN26@sqliteProc:
	test	edi, edi
	je	SHORT $LN23@sqliteProc
	push	eax
	push	61					; 0000003dH
	xor	eax, eax
	call	_sqlite3Expr
	add	esp, 8
$LN23@sqliteProc:
	mov	ecx, DWORD PTR _p$[esp+36]
	mov	DWORD PTR [ecx+16], eax
; Line 53785
	mov	DWORD PTR [esi], 0
$LN7@sqliteProc:
; Line 53795
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	mov	DWORD PTR tv471[esp+40], eax
	je	SHORT $LN19@sqliteProc
; Line 53797
	xor	edi, edi
	cmp	DWORD PTR [eax+4], edi
	jle	SHORT $LN19@sqliteProc
	jmp	SHORT $LN5@sqliteProc
$LL38@sqliteProc:
	mov	eax, DWORD PTR tv471[esp+40]
$LN5@sqliteProc:
; Line 53798
	mov	edx, DWORD PTR [eax]
	mov	ebx, DWORD PTR [edx+edi*8]
; Line 53799
	push	ebx
	mov	ecx, ebp
	call	_columnIndex
	add	esp, 4
	test	eax, eax
	jl	$LN32@sqliteProc
	mov	ecx, DWORD PTR _pRightTab$98442[esp+40]
	push	ebx
	call	_columnIndex
	add	esp, 4
	test	eax, eax
	jl	$LN32@sqliteProc
; Line 53806
	mov	eax, DWORD PTR _p$[esp+36]
	mov	ecx, DWORD PTR [esi-4]
	mov	edx, DWORD PTR [esi-20]
	add	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _pRightTab$98442[esp+44]
	push	ecx
	mov	ecx, DWORD PTR tv400[esp+48]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	edx
	push	ebp
	mov	eax, ebx
	call	_addWhereTerm
	mov	eax, DWORD PTR tv471[esp+64]
	add	edi, 1
	add	esp, 24					; 00000018H
	cmp	edi, DWORD PTR [eax+4]
	jl	SHORT $LL38@sqliteProc
$LN19@sqliteProc:
; Line 53745
	mov	ecx, DWORD PTR _pSrc$[esp+40]
	movsx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _i$[esp+40]
	add	DWORD PTR tv400[esp+40], 48		; 00000030H
	add	eax, 1
	sub	edx, 1
	add	esi, 48					; 00000030H
	cmp	eax, edx
	mov	DWORD PTR _i$[esp+40], eax
	jl	$LL40@sqliteProc
$LN18@sqliteProc:
	pop	edi
	pop	esi
	pop	ebp
; Line 53810
	xor	eax, eax
	pop	ebx
; Line 53811
	add	esp, 24					; 00000018H
	ret	0
$LN33@sqliteProc:
; Line 53757
	push	eax
	push	OFFSET ??_C@_0DC@NBGJANJH@a?5NATURAL?5join?5may?5not?5have?5an?5O@
$LN41@sqliteProc:
	mov	edi, DWORD PTR _pParse$[esp+44]
	call	_sqlite3ErrorMsg
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
; Line 53758
	mov	eax, 1
	pop	ebx
; Line 53811
	add	esp, 24					; 00000018H
	ret	0
$LN34@sqliteProc:
; Line 53775
	mov	edi, DWORD PTR _pParse$[esp+36]
	push	OFFSET ??_C@_0DH@DHMOHNCE@cannot?5have?5both?5ON?5and?5USING?5cl@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
; Line 53776
	mov	eax, 1
	pop	ebx
; Line 53811
	add	esp, 24					; 00000018H
	ret	0
$LN32@sqliteProc:
; Line 53801
	push	ebx
	push	OFFSET ??_C@_0EA@LFCKDDII@cannot?5join?5using?5column?5?$CFs?5?9?5co@
; Line 53802
	jmp	SHORT $LN41@sqliteProc
_sqliteProcessJoin ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pushOntoSorter
_TEXT	SEGMENT
_pSelect$ = 8						; size = 4
_pushOntoSorter PROC					; COMDAT
; _pParse$ = eax
; _pOrderBy$ = edi
; Line 53821
	push	ebp
	push	esi
; Line 53822
	mov	esi, DWORD PTR [eax+12]
; Line 53823
	push	eax
	mov	eax, edi
	call	_sqlite3ExprCodeExprList
; Line 53824
	mov	eax, DWORD PTR [edi+8]
	push	0
	push	eax
	push	6
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53825
	mov	ecx, DWORD PTR [edi]
	push	0
	add	ecx, 1
	push	ecx
	push	103					; 00000067H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53826
	mov	edx, DWORD PTR [edi]
	push	0
	add	edx, 2
	push	edx
	push	91					; 0000005bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53827
	mov	eax, DWORD PTR [edi+8]
	push	0
	push	eax
	push	111					; 0000006fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53828
	mov	ebp, DWORD PTR _pSelect$[esp+56]
	mov	eax, DWORD PTR [ebp+48]
	add	esp, 52					; 00000034H
	test	eax, eax
	jl	$LN1@pushOntoSo
	push	ebx
; Line 53830
	add	eax, 1
	push	0
	push	eax
	push	119					; 00000077H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53831
	mov	ecx, DWORD PTR [ebp+48]
	add	ecx, 1
	push	ecx
	mov	ebx, eax
	push	-1
	push	45					; 0000002dH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53832
	push	0
	push	0
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 36					; 00000024H
; Line 53833
	test	esi, esi
	mov	ebp, eax
	je	SHORT $LN6@pushOntoSo
	test	ebx, ebx
	jl	SHORT $LN6@pushOntoSo
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, ebx
	jle	SHORT $LN6@pushOntoSo
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN6@pushOntoSo
	lea	edx, DWORD PTR [ebx+ebx*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
$LN6@pushOntoSo:
; Line 53834
	mov	eax, DWORD PTR [edi+8]
	push	0
	push	eax
	push	52					; 00000034H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53835
	mov	ecx, DWORD PTR [edi+8]
	push	0
	push	ecx
	push	92					; 0000005cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 53836
	test	esi, esi
	pop	ebx
	je	SHORT $LN11@pushOntoSo
	test	ebp, ebp
	jl	SHORT $LN11@pushOntoSo
	mov	eax, DWORD PTR [esi+12]
	cmp	eax, ebp
	jle	SHORT $LN11@pushOntoSo
	mov	esi, DWORD PTR [esi+20]
	test	esi, esi
	je	SHORT $LN11@pushOntoSo
	lea	edx, DWORD PTR [ebp+ebp*4]
	mov	DWORD PTR [esi+edx*4+8], eax
$LN11@pushOntoSo:
; Line 53837
	mov	eax, DWORD PTR _pSelect$[esp+4]
	mov	DWORD PTR [eax+48], -1
$LN1@pushOntoSo:
	pop	esi
	pop	ebp
; Line 53839
	ret	0
_pushOntoSorter ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _codeOffset
_TEXT	SEGMENT
_iContinue$ = 8						; size = 4
_codeOffset PROC					; COMDAT
; _v$ = ecx
; _p$ = eax
; _nPop$ = ebx
; Line 53849
	push	ebp
	mov	ebp, DWORD PTR _iContinue$[esp]
	push	esi
	push	edi
	mov	edi, eax
; Line 53850
	mov	eax, DWORD PTR [edi+52]
	test	eax, eax
	mov	esi, ecx
	jl	SHORT $LN7@codeOffset
	test	ebp, ebp
	je	SHORT $LN7@codeOffset
; Line 53852
	push	eax
	push	-1
	push	45					; 0000002dH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53853
	mov	eax, DWORD PTR [edi+52]
	push	0
	push	eax
	push	24					; 00000018H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 53854
	test	ebx, ebx
	mov	edi, eax
	jle	SHORT $LN1@codeOffset
; Line 53855
	push	0
	push	ebx
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN1@codeOffset:
; Line 53857
	push	ebp
	push	0
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 53859
	test	esi, esi
	je	SHORT $LN7@codeOffset
	test	edi, edi
	jl	SHORT $LN7@codeOffset
	mov	eax, DWORD PTR [esi+12]
	cmp	eax, edi
	jle	SHORT $LN7@codeOffset
	mov	esi, DWORD PTR [esi+20]
	test	esi, esi
	je	SHORT $LN7@codeOffset
	lea	ecx, DWORD PTR [edi+edi*4]
	mov	DWORD PTR [esi+ecx*4+8], eax
$LN7@codeOffset:
	pop	edi
	pop	esi
	pop	ebp
; Line 53861
	ret	0
_codeOffset ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _codeDistinct
_TEXT	SEGMENT
_addrRepeat$ = 8					; size = 4
_codeDistinct PROC					; COMDAT
; _v$ = esi
; _iTab$ = ebx
; _N$ = eax
; Line 53877
	push	edi
	mov	edi, eax
; Line 53878
	neg	eax
	push	0
	push	eax
	push	91					; 0000005bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53879
	mov	ecx, DWORD PTR [esi+12]
	add	ecx, 3
	push	ecx
	push	ebx
	push	112					; 00000070H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53880
	push	0
	add	edi, 1
	push	edi
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53881
	mov	edx, DWORD PTR _addrRepeat$[esp+36]
	push	edx
	push	0
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53883
	push	0
	push	ebx
	push	111					; 0000006fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 60					; 0000003cH
	pop	edi
; Line 53884
	ret	0
_codeDistinct ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EI@FMCKEHHB@only?5a?5single?5result?5allowed?5for@ ; `string'
;	COMDAT ??_C@_0EI@FMCKEHHB@only?5a?5single?5result?5allowed?5for@
CONST	SEGMENT
??_C@_0EI@FMCKEHHB@only?5a?5single?5result?5allowed?5for@ DB 'only a sing'
	DB	'le result allowed for a SELECT that is part of an expression', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _checkForMultiColumnSelectError
_TEXT	SEGMENT
_nExpr$ = 8						; size = 4
_checkForMultiColumnSelectError PROC			; COMDAT
; _pParse$ = edi
; _eDest$ = eax
; Line 53893
	cmp	DWORD PTR _nExpr$[esp-4], 1
	jle	SHORT $LN3@checkForMu
	cmp	eax, 5
	je	SHORT $LN2@checkForMu
	cmp	eax, 6
	jne	SHORT $LN3@checkForMu
$LN2@checkForMu:
; Line 53895
	push	OFFSET ??_C@_0EI@FMCKEHHB@only?5a?5single?5result?5allowed?5for@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 53896
	mov	eax, 1
; Line 53900
	ret	0
$LN3@checkForMu:
; Line 53898
	xor	eax, eax
; Line 53900
	ret	0
_checkForMultiColumnSelectError ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _selectInnerLoop
_TEXT	SEGMENT
_addr2$98568 = -4					; size = 4
_hasDistinct$ = -4					; size = 4
_pParse$ = 8						; size = 4
_p$ = 12						; size = 4
_pEList$ = 16						; size = 4
_srcTab$ = 20						; size = 4
_pOrderBy$ = 24						; size = 4
_distinct$ = 28						; size = 4
_eDest$ = 32						; size = 4
_iParm$ = 36						; size = 4
_iContinue$ = 40					; size = 4
_iBreak$ = 44						; size = 4
_aff$ = 48						; size = 4
_selectInnerLoop PROC					; COMDAT
; _nColumn$ = eax
; Line 53924
	push	ecx
	push	ebp
	mov	ebp, DWORD PTR _srcTab$[esp+4]
	push	esi
	push	edi
	mov	edi, eax
; Line 53925
	mov	eax, DWORD PTR _pParse$[esp+12]
	mov	esi, DWORD PTR [eax+12]
; Line 53929
	test	esi, esi
	je	$LN128@selectInne
; Line 53935
	cmp	DWORD PTR _distinct$[esp+12], 0
	jl	SHORT $LN121@selectInne
	mov	ecx, DWORD PTR _pEList$[esp+12]
	cmp	DWORD PTR [ecx], 0
	mov	DWORD PTR _hasDistinct$[esp+16], 1
	jg	SHORT $LN36@selectInne
$LN121@selectInne:
	mov	DWORD PTR _hasDistinct$[esp+16], 0
$LN36@selectInne:
; Line 53936
	cmp	DWORD PTR _pOrderBy$[esp+12], 0
	push	ebx
	jne	SHORT $LN120@selectInne
	cmp	DWORD PTR _hasDistinct$[esp+20], 0
	jne	SHORT $LN120@selectInne
; Line 53937
	mov	edx, DWORD PTR _iContinue$[esp+16]
	mov	eax, DWORD PTR _p$[esp+16]
	push	edx
	xor	ebx, ebx
	mov	ecx, esi
	call	_codeOffset
	add	esp, 4
$LN120@selectInne:
; Line 53942
	test	edi, edi
	jle	SHORT $LN30@selectInne
; Line 53943
	xor	ebx, ebx
	test	edi, edi
	jle	SHORT $LN26@selectInne
$LL29@selectInne:
; Line 53944
	push	ebx
	push	ebp
	push	3
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	ebx, 1
	add	esp, 12					; 0000000cH
	cmp	ebx, edi
	jl	SHORT $LL29@selectInne
; Line 53946
	jmp	SHORT $LN26@selectInne
$LN30@selectInne:
; Line 53948
	mov	ecx, DWORD PTR _pParse$[esp+16]
	mov	eax, DWORD PTR _pEList$[esp+16]
	mov	edi, DWORD PTR [eax]
	push	ecx
	call	_sqlite3ExprCodeExprList
	add	esp, 4
$LN26@selectInne:
; Line 53955
	cmp	DWORD PTR _hasDistinct$[esp+20], 0
	je	SHORT $LN123@selectInne
; Line 53958
	mov	ebp, DWORD PTR _iContinue$[esp+16]
	mov	ebx, DWORD PTR _distinct$[esp+16]
	push	ebp
	mov	eax, edi
	call	_codeDistinct
	add	esp, 4
; Line 53959
	cmp	DWORD PTR _pOrderBy$[esp+16], 0
	jne	SHORT $LN123@selectInne
; Line 53960
	push	ebp
	mov	ebp, DWORD PTR _p$[esp+20]
	mov	ebx, edi
	mov	eax, ebp
	mov	ecx, esi
	call	_codeOffset
	add	esp, 4
	jmp	SHORT $LN24@selectInne
$LN123@selectInne:
	mov	ebp, DWORD PTR _p$[esp+16]
$LN24@selectInne:
; Line 53964
	mov	edx, DWORD PTR _pEList$[esp+16]
	cmp	DWORD PTR [edx], 1
	mov	ecx, DWORD PTR _eDest$[esp+16]
	jle	SHORT $LN23@selectInne
	cmp	ecx, 5
	je	SHORT $LN38@selectInne
	cmp	ecx, 6
	jne	SHORT $LN23@selectInne
$LN38@selectInne:
	mov	edi, DWORD PTR _pParse$[esp+16]
	push	OFFSET ??_C@_0EI@FMCKEHHB@only?5a?5single?5result?5allowed?5for@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
; Line 54101
	xor	eax, eax
	pop	ebp
; Line 54102
	pop	ecx
	ret	0
$LN23@selectInne:
; Line 53968
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 9
	ja	$LN2@selectInne
	jmp	DWORD PTR $LN129@selectInne[eax*4]
$LN20@selectInne:
; Line 53974
	push	0
	push	edi
	push	91					; 0000005bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53975
	mov	ebx, DWORD PTR _aff$[esp+28]
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	je	SHORT $LN57@selectInne
; Line 53976
	mov	edi, DWORD PTR [esi+20]
	test	edi, edi
	je	SHORT $LN115@selectInne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN55@selectInne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN115@selectInne
$LN55@selectInne:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN57@selectInne
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [edi+eax*4+12]
	lea	edi, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edi+16]
	call	_freeP3
; Line 53978
	mov	ecx, DWORD PTR _iParm$[esp+16]
	push	0
	push	ecx
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], -2			; fffffffeH
	push	111					; 0000006fH
; Line 53979
	jmp	$LN126@selectInne
$LN115@selectInne:
; Line 53976
	mov	ecx, ebx
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN57@selectInne:
; Line 53978
	mov	ecx, DWORD PTR _iParm$[esp+16]
	push	0
	push	ecx
	push	111					; 0000006fH
; Line 53979
	jmp	$LN126@selectInne
$LN18@selectInne:
; Line 53988
	push	0
	push	edi
	push	91					; 0000005bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53989
	mov	ecx, DWORD PTR [esi+20]
	xor	ebp, ebp
	add	esp, 12					; 0000000cH
	cmp	ecx, ebp
	mov	ebx, eax
	je	SHORT $LN117@selectInne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN77@selectInne
	cmp	DWORD PTR _inMutex, ebp
	jg	SHORT $LN117@selectInne
$LN77@selectInne:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN79@selectInne
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	mov	eax, DWORD PTR _aff$[esp+16]
	cmp	eax, ebp
	mov	DWORD PTR [edi+12], ebp
	jne	SHORT $LN118@selectInne
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [edi+16], ebp
	jmp	SHORT $LN79@selectInne
$LN118@selectInne:
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], -2			; fffffffeH
	jmp	SHORT $LN79@selectInne
$LN117@selectInne:
	mov	ecx, DWORD PTR _aff$[esp+16]
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN79@selectInne:
; Line 53990
	mov	edi, DWORD PTR _iParm$[esp+16]
	add	ebx, 3
	push	ebx
	push	edi
	push	33					; 00000021H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53991
	push	ebp
	push	edi
	push	92					; 0000005cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 53992
	mov	ebp, DWORD PTR _p$[esp+40]
	add	esp, 24					; 00000018H
	jmp	$LN21@selectInne
$LN17@selectInne:
; Line 54000
	push	0
	push	edi
	push	91					; 0000005bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54001
	mov	edi, DWORD PTR _pOrderBy$[esp+28]
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	SHORT $LN16@selectInne
; Line 54002
	mov	eax, DWORD PTR _pParse$[esp+16]
	push	ebp
	call	_pushOntoSorter
	add	esp, 4
; Line 54003
	jmp	$LN21@selectInne
$LN16@selectInne:
; Line 54004
	mov	edi, DWORD PTR _iParm$[esp+16]
	push	0
	push	edi
	push	23					; 00000017H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54005
	push	0
	push	1
	push	103					; 00000067H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54006
	push	8
	push	edi
	push	113					; 00000071H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 36					; 00000024H
; Line 54008
	jmp	$LN21@selectInne
$LN14@selectInne:
; Line 54021
	mov	eax, DWORD PTR [esi+12]
	add	eax, 3
	push	eax
	push	-1
	push	66					; 00000042H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54022
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54023
	push	0
	push	0
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54024
	mov	ecx, DWORD PTR _pEList$[esp+52]
	mov	edx, DWORD PTR [ecx+12]
	lea	edi, DWORD PTR [ebp+10]
	mov	ebp, DWORD PTR _iParm$[esp+52]
	mov	DWORD PTR _addr2$98568[esp+56], eax
	mov	eax, DWORD PTR [edx]
	mov	ebx, ebp
	add	esp, 36					; 00000024H
	sar	ebx, 16					; 00000010H
	call	_sqlite3CompareAffinity
	mov	BYTE PTR [edi], al
; Line 54025
	mov	eax, DWORD PTR _pOrderBy$[esp+16]
	test	eax, eax
	je	SHORT $LN13@selectInne
; Line 54030
	mov	ecx, DWORD PTR _p$[esp+16]
	mov	edi, eax
	mov	eax, DWORD PTR _pParse$[esp+16]
	push	ecx
	call	_pushOntoSorter
; Line 54035
	mov	eax, DWORD PTR _addr2$98568[esp+24]
	add	esp, 4
	mov	ecx, esi
	call	_sqlite3VdbeJumpHere
; Line 54036
	mov	ebp, DWORD PTR _p$[esp+16]
	jmp	$LN21@selectInne
$LN13@selectInne:
; Line 54032
	push	0
	push	1
	push	91					; 0000005bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 12					; 0000000cH
	test	ecx, ecx
	je	SHORT $LN119@selectInne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN107@selectInne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN119@selectInne
$LN107@selectInne:
	test	eax, eax
	jl	SHORT $LN103@selectInne
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN102@selectInne
$LN103@selectInne:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN105@selectInne
$LN102@selectInne:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	ebp, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ebp+12]
	call	_freeP3
	xor	eax, eax
	cmp	edi, eax
	mov	DWORD PTR [ebp+12], eax
	jne	SHORT $LN90@selectInne
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], eax
	mov	ebp, DWORD PTR _iParm$[esp+16]
	jmp	SHORT $LN105@selectInne
$LN90@selectInne:
	mov	ebx, DWORD PTR _p$[esp+16]
	mov	edi, 1
	add	ebx, 10					; 0000000aH
	call	_sqlite3StrNDup
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], -1
	mov	ebp, DWORD PTR _iParm$[esp+16]
	jmp	SHORT $LN105@selectInne
$LN119@selectInne:
	mov	ecx, edi
	mov	eax, 1
	call	_freeP3
$LN105@selectInne:
; Line 54033
	push	0
	and	ebp, 65535				; 0000ffffH
	push	ebp
	push	111					; 0000006fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54035
	mov	eax, DWORD PTR _addr2$98568[esp+32]
	add	esp, 12					; 0000000cH
	mov	ecx, esi
	call	_sqlite3VdbeJumpHere
; Line 54036
	mov	ebp, DWORD PTR _p$[esp+16]
	jmp	$LN21@selectInne
$LN11@selectInne:
; Line 54042
	mov	eax, DWORD PTR _iParm$[esp+16]
	push	eax
	push	1
	push	48					; 00000030H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54043
	push	0
	push	edi
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 54045
	jmp	SHORT $LN21@selectInne
$LN10@selectInne:
; Line 54054
	mov	edi, DWORD PTR _pOrderBy$[esp+16]
	test	edi, edi
	je	SHORT $LN9@selectInne
; Line 54055
	mov	eax, DWORD PTR _pParse$[esp+16]
	push	ebp
	call	_pushOntoSorter
	add	esp, 4
; Line 54056
	jmp	SHORT $LN21@selectInne
$LN9@selectInne:
; Line 54057
	mov	ecx, DWORD PTR _iParm$[esp+16]
	push	1
	push	ecx
	push	124					; 0000007cH
; Line 54060
	jmp	SHORT $LN126@selectInne
$LN7@selectInne:
; Line 54070
	cmp	DWORD PTR _pOrderBy$[esp+16], 0
; Line 54071
	mov	eax, esi
	je	SHORT $LN6@selectInne
	push	0
	push	edi
	push	91					; 0000005bH
	call	_sqlite3VdbeAddOp
; Line 54072
	mov	edi, DWORD PTR _pOrderBy$[esp+28]
	mov	eax, DWORD PTR _pParse$[esp+28]
	push	ebp
	call	_pushOntoSorter
	add	esp, 16					; 00000010H
	jmp	SHORT $LN21@selectInne
$LN6@selectInne:
; Line 54073
	cmp	ecx, 9
	jne	SHORT $LN4@selectInne
; Line 54074
	mov	edx, DWORD PTR _iParm$[esp+16]
	push	edx
	push	0
	push	46					; 0000002eH
; Line 54075
	jmp	SHORT $LN127@selectInne
$LN4@selectInne:
; Line 54076
	push	0
	push	edi
	push	58					; 0000003aH
; Line 54078
	jmp	SHORT $LN127@selectInne
$LN2@selectInne:
; Line 54089
	push	0
	push	edi
	push	11					; 0000000bH
$LN126@selectInne:
	mov	eax, esi
$LN127@selectInne:
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN21@selectInne:
; Line 54097
	mov	eax, DWORD PTR [ebp+48]
	test	eax, eax
	jl	SHORT $LN1@selectInne
	cmp	DWORD PTR _pOrderBy$[esp+16], 0
	jne	SHORT $LN1@selectInne
; Line 54098
	push	eax
	push	-1
	push	45					; 0000002dH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54099
	mov	eax, DWORD PTR _iBreak$[esp+28]
	mov	ecx, DWORD PTR [ebp+48]
	push	eax
	push	ecx
	push	119					; 00000077H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN1@selectInne:
	pop	ebx
$LN128@selectInne:
	pop	edi
	pop	esi
; Line 54101
	xor	eax, eax
	pop	ebp
; Line 54102
	pop	ecx
	ret	0
	npad	3
$LN129@selectInne:
	DD	$LN20@selectInne
	DD	$LN18@selectInne
	DD	$LN2@selectInne
	DD	$LN7@selectInne
	DD	$LN10@selectInne
	DD	$LN14@selectInne
	DD	$LN17@selectInne
	DD	$LN17@selectInne
	DD	$LN7@selectInne
	DD	$LN11@selectInne
_selectInnerLoop ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _generateSortTail
_TEXT	SEGMENT
_pseudoTab$ = -20					; size = 4
_cont$ = -16						; size = 4
_iTab$ = -12						; size = 4
_brk$ = -8						; size = 4
_addr$ = -4						; size = 4
_pParse$ = 8						; size = 4
_p$ = 12						; size = 4
_nColumn$ = 16						; size = 4
_eDest$ = 20						; size = 4
_iParm$ = 24						; size = 4
_generateSortTail PROC					; COMDAT
; _v$ = esi
; Line 54159
	sub	esp, 20					; 00000014H
	push	ebx
	push	edi
; Line 54160
	mov	edi, DWORD PTR [esi+24]
	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR [esi+28]
	cmp	edi, eax
	jl	SHORT $LN23@generateSo
	mov	ebx, DWORD PTR [esi+32]
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [esi+28], eax
	add	eax, eax
	add	eax, eax
	call	_sqlite3ReallocOrFree
	mov	DWORD PTR [esi+32], eax
$LN23@generateSo:
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN84@generateSo
	mov	DWORD PTR [eax+edi*4], -1
$LN84@generateSo:
	or	eax, -1
	sub	eax, edi
; Line 54161
	mov	edi, DWORD PTR [esi+24]
	mov	DWORD PTR _brk$[esp+28], eax
	mov	eax, DWORD PTR [esi+28]
	cmp	edi, eax
	lea	ecx, DWORD PTR [edi+1]
	mov	DWORD PTR [esi+24], ecx
	jl	SHORT $LN27@generateSo
	mov	ebx, DWORD PTR [esi+32]
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [esi+28], eax
	add	eax, eax
	add	eax, eax
	call	_sqlite3ReallocOrFree
	mov	DWORD PTR [esi+32], eax
$LN27@generateSo:
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN26@generateSo
	mov	DWORD PTR [eax+edi*4], -1
$LN26@generateSo:
	push	ebp
; Line 54165
	mov	ebp, DWORD PTR _p$[esp+28]
	mov	ebx, DWORD PTR [ebp+28]
; Line 54167
	mov	edx, DWORD PTR [ebx+8]
	or	eax, -1
	sub	eax, edi
; Line 54168
	mov	edi, DWORD PTR _eDest$[esp+28]
	cmp	edi, 4
	mov	DWORD PTR _cont$[esp+32], eax
	mov	DWORD PTR _pseudoTab$[esp+32], 0
	mov	DWORD PTR _iTab$[esp+32], edx
	je	SHORT $LN85@generateSo
	cmp	edi, 9
	jne	SHORT $LN19@generateSo
$LN85@generateSo:
; Line 54169
	mov	eax, DWORD PTR _pParse$[esp+28]
	mov	edi, DWORD PTR [eax+28]
; Line 54170
	push	0
	lea	ecx, DWORD PTR [edi+1]
	mov	DWORD PTR [eax+28], ecx
	push	edi
	push	120					; 00000078H
	mov	eax, esi
	mov	DWORD PTR _pseudoTab$[esp+44], edi
	call	_sqlite3VdbeAddOp
; Line 54171
	mov	edx, DWORD PTR _nColumn$[esp+40]
	push	edx
	push	edi
	push	104					; 00000068H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	edi, DWORD PTR _eDest$[esp+52]
	add	esp, 24					; 00000018H
$LN19@generateSo:
; Line 54173
	mov	eax, DWORD PTR _brk$[esp+32]
	mov	ecx, DWORD PTR _iTab$[esp+32]
	push	eax
	push	ecx
	push	19					; 00000013H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	eax, 1
	mov	DWORD PTR _addr$[esp+44], eax
; Line 54174
	mov	eax, DWORD PTR [ebp+52]
	add	esp, 12					; 0000000cH
	test	eax, eax
	jl	SHORT $LN36@generateSo
	cmp	DWORD PTR _cont$[esp+32], 0
	je	SHORT $LN36@generateSo
	push	eax
	push	-1
	push	45					; 0000002dH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	edx, DWORD PTR [ebp+52]
	push	0
	push	edx
	push	24					; 00000018H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	edi, eax
	mov	eax, DWORD PTR _cont$[esp+56]
	push	eax
	push	0
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 36					; 00000024H
	test	edi, edi
	jl	SHORT $LN88@generateSo
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, edi
	jle	SHORT $LN88@generateSo
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN88@generateSo
	lea	edx, DWORD PTR [edi+edi*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
$LN88@generateSo:
	mov	edi, DWORD PTR _eDest$[esp+28]
$LN36@generateSo:
; Line 54175
	cmp	edi, 4
	je	SHORT $LN16@generateSo
	cmp	edi, 9
	jne	SHORT $LN17@generateSo
$LN16@generateSo:
; Line 54176
	push	0
	push	1
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN17@generateSo:
; Line 54178
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR _iTab$[esp+32]
	add	eax, 1
	push	eax
	push	ecx
	push	3
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54179
	lea	eax, DWORD PTR [edi-4]
	add	esp, 12					; 0000000cH
	cmp	eax, 5
	ja	$LN89@generateSo
	jmp	DWORD PTR $LN91@generateSo[eax*4]
$LN13@generateSo:
; Line 54182
	mov	edi, DWORD PTR _iParm$[esp+28]
	push	0
	push	edi
	push	23					; 00000017H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54183
	push	0
	push	1
	push	103					; 00000067H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54184
	push	8
	push	edi
	push	113					; 00000071H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 36					; 00000024H
; Line 54185
	jmp	$LN89@generateSo
$LN12@generateSo:
; Line 54190
	mov	edx, DWORD PTR [esi+12]
	add	edx, 3
	push	edx
	push	-1
	push	66					; 00000042H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54191
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54192
	mov	eax, DWORD PTR [esi+12]
	add	eax, 3
	push	eax
	push	0
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54193
	push	0
	push	1
	push	91					; 0000005bH
	mov	eax, esi
	lea	ebx, DWORD PTR [ebp+10]
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 48					; 00000030H
	test	ecx, ecx
	je	$LN81@generateSo
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN62@generateSo
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN81@generateSo
$LN62@generateSo:
	test	eax, eax
	jl	SHORT $LN58@generateSo
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN57@generateSo
$LN58@generateSo:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN60@generateSo
$LN57@generateSo:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	ebp, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ebp+12]
	call	_freeP3
	xor	eax, eax
	cmp	ebx, eax
	mov	DWORD PTR [ebp+12], eax
	jne	SHORT $LN45@generateSo
; Line 54194
	push	eax
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], eax
	mov	eax, DWORD PTR _iParm$[esp+32]
	mov	ebp, DWORD PTR _p$[esp+32]
	and	eax, 65535				; 0000ffffH
	push	eax
	push	111					; 0000006fH
; Line 54195
	jmp	$LN90@generateSo
; Line 54193
$LN45@generateSo:
	mov	edi, 1
	call	_sqlite3StrNDup
	mov	DWORD PTR [ebp+12], eax
; Line 54194
	mov	eax, DWORD PTR _iParm$[esp+28]
	push	0
	and	eax, 65535				; 0000ffffH
	push	eax
	mov	DWORD PTR [ebp+16], -1
	mov	ebp, DWORD PTR _p$[esp+36]
	push	111					; 0000006fH
; Line 54195
	jmp	SHORT $LN90@generateSo
$LN81@generateSo:
; Line 54193
	mov	ecx, ebx
	mov	eax, 1
	call	_freeP3
$LN60@generateSo:
; Line 54194
	mov	eax, DWORD PTR _iParm$[esp+28]
	push	0
	and	eax, 65535				; 0000ffffH
	push	eax
	push	111					; 0000006fH
; Line 54195
	jmp	SHORT $LN90@generateSo
$LN11@generateSo:
; Line 54199
	mov	eax, DWORD PTR _iParm$[esp+28]
	push	1
	push	eax
	push	124					; 0000007cH
; Line 54201
	jmp	SHORT $LN90@generateSo
$LN10@generateSo:
; Line 54207
	mov	ecx, DWORD PTR _pseudoTab$[esp+32]
	push	0
	push	ecx
	push	113					; 00000071H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54208
	mov	ebx, DWORD PTR _nColumn$[esp+40]
	add	esp, 12					; 0000000cH
	xor	edi, edi
	test	ebx, ebx
	jle	SHORT $LN7@generateSo
	npad	7
$LL9@generateSo:
; Line 54209
	mov	edx, DWORD PTR _pseudoTab$[esp+32]
	push	edi
	push	edx
	push	3
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	edi, 1
	add	esp, 12					; 0000000cH
	cmp	edi, ebx
	jl	SHORT $LL9@generateSo
$LN7@generateSo:
; Line 54211
	cmp	DWORD PTR _eDest$[esp+28], 4
	jne	SHORT $LN6@generateSo
; Line 54212
	push	0
	push	ebx
	push	58					; 0000003aH
; Line 54213
	jmp	SHORT $LN90@generateSo
$LN6@generateSo:
; Line 54214
	mov	eax, DWORD PTR _iParm$[esp+28]
	push	eax
	push	0
	push	46					; 0000002eH
$LN90@generateSo:
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN89@generateSo:
; Line 54226
	mov	eax, DWORD PTR [ebp+48]
	test	eax, eax
	jl	SHORT $LN3@generateSo
; Line 54227
	push	eax
	push	-1
	push	45					; 0000002dH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54228
	mov	ecx, DWORD PTR _brk$[esp+44]
	mov	edx, DWORD PTR [ebp+48]
	push	ecx
	push	edx
	push	119					; 00000077H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN3@generateSo:
; Line 54233
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	pop	ebp
	je	SHORT $LN67@generateSo
	mov	ecx, DWORD PTR _cont$[esp+28]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	ecx, DWORD PTR [esi+12]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN67@generateSo:
; Line 54234
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN82@generateSo
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN82@generateSo
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN83@generateSo
$LN82@generateSo:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ecx, DWORD PTR _iTab$[esp+28]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _addr$[esp+28]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 110			; 0000006eH
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [esi+564], cl
$LN83@generateSo:
; Line 54235
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	pop	edi
	pop	ebx
	je	SHORT $LN76@generateSo
	mov	ecx, DWORD PTR _brk$[esp+20]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	ecx, DWORD PTR [esi+12]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN76@generateSo:
; Line 54236
	mov	eax, DWORD PTR _eDest$[esp+16]
	cmp	eax, 4
	je	SHORT $LN1@generateSo
	cmp	eax, 9
	jne	SHORT $LN2@generateSo
$LN1@generateSo:
; Line 54237
	mov	edx, DWORD PTR _pseudoTab$[esp+20]
	push	0
	push	edx
	push	30					; 0000001eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN2@generateSo:
; Line 54240
	add	esp, 20					; 00000014H
	ret	0
	npad	1
$LN91@generateSo:
	DD	$LN10@generateSo
	DD	$LN11@generateSo
	DD	$LN12@generateSo
	DD	$LN13@generateSo
	DD	$LN13@generateSo
	DD	$LN10@generateSo
_generateSortTail ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _createSortingIndex
_TEXT	SEGMENT
_p$ = 8							; size = 4
_createSortingIndex PROC				; COMDAT
; _pParse$ = eax
; _pOrderBy$ = ecx
; Line 55009
	test	ecx, ecx
	je	SHORT $LN1@createSort
; Line 55012
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+8], edx
	add	DWORD PTR [eax+28], 1
; Line 55014
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+12]
	add	edx, 1
	push	edx
	push	ecx
	push	121					; 00000079H
	call	_sqlite3VdbeAddOp
; Line 55016
	mov	edx, DWORD PTR _p$[esp+8]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edx+64], eax
$LN1@createSort:
; Line 55018
	ret	0
_createSortingIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _finalizeAggFunctions
_TEXT	SEGMENT
$T121299 = -16						; size = 4
$T121300 = -12						; size = 4
_i$ = -8						; size = 4
_pF$ = -4						; size = 4
_pAggInfo$ = 8						; size = 4
_finalizeAggFunctions PROC				; COMDAT
; _pParse$ = eax
; Line 56171
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
; Line 56172
	mov	esi, DWORD PTR [eax+12]
; Line 56175
	mov	eax, DWORD PTR _pAggInfo$[esp+20]
	mov	ecx, DWORD PTR [eax+32]
	xor	ebx, ebx
	cmp	DWORD PTR [eax+36], ebx
	mov	DWORD PTR _i$[esp+24], ebx
	mov	DWORD PTR _pF$[esp+24], ecx
	jle	$LN1@finalizeAg
	push	ebp
	push	edi
$LL3@finalizeAg:
; Line 56176
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
; Line 56178
	cmp	eax, ebx
	je	SHORT $LN6@finalizeAg
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T121299[esp+32], eax
	jmp	SHORT $LN7@finalizeAg
$LN6@finalizeAg:
	mov	DWORD PTR $T121299[esp+32], ebx
$LN7@finalizeAg:
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	edx, DWORD PTR [ecx+4]
	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR $T121300[esp+32], edx
	jg	SHORT $LN10@finalizeAg
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN43@finalizeAg
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN43@finalizeAg
	xor	eax, eax
	xor	ebx, ebx
	jmp	SHORT $LN12@finalizeAg
$LN43@finalizeAg:
	xor	ebx, ebx
$LN10@finalizeAg:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR $T121299[esp+32]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 93			; 0000005dH
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	eax, edi
$LN12@finalizeAg:
	mov	edi, DWORD PTR [esi+20]
	cmp	edi, ebx
	je	SHORT $LN40@finalizeAg
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN33@finalizeAg
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN40@finalizeAg
$LN33@finalizeAg:
	cmp	eax, ebx
	jl	SHORT $LN29@finalizeAg
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN28@finalizeAg
$LN29@finalizeAg:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN2@finalizeAg
$LN28@finalizeAg:
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [edi+eax*4+12]
	lea	edi, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edi+16]
	call	_freeP3
	mov	eax, DWORD PTR $T121300[esp+32]
	cmp	eax, ebx
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN41@finalizeAg
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN2@finalizeAg
$LN41@finalizeAg:
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], -5			; fffffffbH
	jmp	SHORT $LN2@finalizeAg
$LN40@finalizeAg:
	mov	ecx, DWORD PTR $T121300[esp+32]
	mov	eax, -5					; fffffffbH
	call	_freeP3
$LN2@finalizeAg:
	mov	eax, DWORD PTR _i$[esp+32]
	mov	ecx, DWORD PTR _pF$[esp+32]
	mov	edx, DWORD PTR _pAggInfo$[esp+28]
	add	eax, 1
	add	ecx, 16					; 00000010H
	cmp	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _i$[esp+32], eax
	mov	DWORD PTR _pF$[esp+32], ecx
	jl	$LL3@finalizeAg
	pop	edi
	pop	ebp
$LN1@finalizeAg:
	pop	esi
	pop	ebx
; Line 56180
	add	esp, 16					; 00000010H
	ret	0
_finalizeAggFunctions ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _targetSrcList
_TEXT	SEGMENT
_sDb$ = -8						; size = 8
_targetSrcList PROC					; COMDAT
; _pParse$ = ecx
; _pStep$ = eax
; Line 57755
	sub	esp, 8
	push	ebx
	push	esi
; Line 57760
	mov	esi, DWORD PTR [ecx]
	mov	ebx, eax
	mov	eax, DWORD PTR [ebx+8]
	push	edi
	mov	edi, DWORD PTR [eax+28]
	test	edi, edi
	je	SHORT $LN17@targetSrcL
	mov	edx, DWORD PTR [esi]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN2@targetSrcL
	mov	ecx, DWORD PTR [esi+4]
	add	ecx, 20					; 00000014H
$LL9@targetSrcL:
	cmp	DWORD PTR [ecx], edi
	je	SHORT $LN14@targetSrcL
	add	eax, 1
	add	ecx, 24					; 00000018H
	cmp	eax, edx
	jl	SHORT $LL9@targetSrcL
$LN14@targetSrcL:
; Line 57761
	test	eax, eax
	je	SHORT $LN2@targetSrcL
	cmp	eax, 2
	jge	SHORT $LN2@targetSrcL
$LN17@targetSrcL:
; Line 57767
	add	ebx, 16					; 00000010H
	push	ebx
	xor	eax, eax
	xor	ecx, ecx
	call	_sqlite3SrcListAppend
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
; Line 57770
	add	esp, 8
	ret	0
$LN2@targetSrcL:
; Line 57763
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax+edx*8]
	mov	DWORD PTR _sDb$[esp+20], eax
; Line 57764
	lea	edx, DWORD PTR [eax+1]
$LL18@targetSrcL:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL18@targetSrcL
	sub	eax, edx
	mov	edx, DWORD PTR _sDb$[esp+24]
	lea	ecx, DWORD PTR [eax+eax]
	and	edx, 1
	or	ecx, edx
	mov	DWORD PTR _sDb$[esp+24], ecx
; Line 57765
	lea	ecx, DWORD PTR _sDb$[esp+20]
	push	ecx
	lea	eax, DWORD PTR [ebx+16]
	xor	ecx, ecx
	call	_sqlite3SrcListAppend
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
; Line 57770
	add	esp, 8
	ret	0
_targetSrcList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Vacuum
_TEXT	SEGMENT
_sqlite3Vacuum PROC					; COMDAT
; _pParse$ = esi
; Line 58643
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	jne	SHORT $LN7@sqlite3Vac
	push	edi
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
; Line 58644
	test	eax, eax
	mov	DWORD PTR [esi+12], eax
	pop	edi
	je	SHORT $LN1@sqlite3Vac
$LN7@sqlite3Vac:
; Line 58645
	push	0
	push	0
	push	84					; 00000054H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN1@sqlite3Vac:
; Line 58648
	ret	0
_sqlite3Vacuum ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _addModuleArgument
_TEXT	SEGMENT
_zArg$ = 8						; size = 4
_addModuleArgument PROC					; COMDAT
; _pTable$ = esi
; Line 58943
	mov	ecx, DWORD PTR [esi+72]
	push	ebx
	mov	ebx, DWORD PTR [esi+68]
	lea	eax, DWORD PTR [ebx+1]
	mov	DWORD PTR [esi+68], eax
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebp
	push	edi
	lea	eax, DWORD PTR [eax*4+4]
	je	SHORT $LN15@addModuleA
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN15@addModuleA
	xor	ebp, ebp
	jmp	SHORT $LN39@addModuleA
$LN15@addModuleA:
	test	ecx, ecx
	jne	SHORT $LN14@addModuleA
	mov	edi, eax
	call	_sqlite3Malloc
	mov	ebp, eax
	jmp	SHORT $LN9@addModuleA
$LN14@addModuleA:
	push	eax
	push	ecx
	call	_realloc
	mov	ebp, eax
	add	esp, 8
	test	ebp, ebp
	jne	SHORT $LN5@addModuleA
	call	_sqlite3FailedMalloc
$LN9@addModuleA:
; Line 58944
	test	ebp, ebp
	jne	SHORT $LN5@addModuleA
$LN39@addModuleA:
; Line 58946
	xor	edi, edi
	test	ebx, ebx
	jle	SHORT $LN2@addModuleA
	npad	6
$LL40@addModuleA:
; Line 58947
	mov	eax, DWORD PTR [esi+72]
	mov	eax, DWORD PTR [eax+edi*4]
	test	eax, eax
	je	SHORT $LN3@addModuleA
	push	eax
	call	_free
	add	esp, 4
$LN3@addModuleA:
	add	edi, 1
	cmp	edi, ebx
	jl	SHORT $LL40@addModuleA
$LN2@addModuleA:
; Line 58949
	mov	eax, DWORD PTR _zArg$[esp+8]
	test	eax, eax
	je	SHORT $LN30@addModuleA
	push	eax
	call	_free
	add	esp, 4
$LN30@addModuleA:
; Line 58950
	mov	eax, DWORD PTR [esi+72]
	test	eax, eax
	je	SHORT $LN35@addModuleA
	push	eax
	call	_free
	add	esp, 4
$LN35@addModuleA:
	pop	edi
; Line 58956
	mov	DWORD PTR [esi+72], ebp
	pop	ebp
	mov	DWORD PTR [esi+68], 0
	pop	ebx
; Line 58957
	ret	0
$LN5@addModuleA:
; Line 58953
	mov	ecx, DWORD PTR _zArg$[esp+8]
	mov	DWORD PTR [ebp+ebx*4], ecx
; Line 58954
	mov	DWORD PTR [ebp+ebx*4+4], 0
	pop	edi
; Line 58956
	mov	DWORD PTR [esi+72], ebp
	pop	ebp
	pop	ebx
; Line 58957
	ret	0
_addModuleArgument ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _addArgumentToVtab
_TEXT	SEGMENT
_addArgumentToVtab PROC					; COMDAT
; _pParse$ = ebx
; Line 59013
	push	ebp
; Line 59014
	mov	ebp, DWORD PTR [ebx+180]
	test	ebp, ebp
	je	SHORT $LN1@addArgumen
	cmp	DWORD PTR [ebx+164], 0
	je	SHORT $LN1@addArgumen
	push	esi
; Line 59016
	mov	esi, DWORD PTR [ebx+184]
	shr	esi, 1
	push	edi
; Line 59017
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN4@addArgumen
	push	esi
	push	ebp
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN4@addArgumen:
	mov	esi, DWORD PTR [ebx+164]
	push	edi
	call	_addModuleArgument
	add	esp, 4
	pop	edi
	pop	esi
$LN1@addArgumen:
	pop	ebp
; Line 59019
	ret	0
_addArgumentToVtab ENDP
_TEXT	ENDS
PUBLIC	??_C@_09NJDMOIOM@name?$DN?8?$CFq?8?$AA@		; `string'
PUBLIC	??_C@_0FH@IIEEBDEG@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8table?8?0?5n@ ; `string'
PUBLIC	??_C@_0BI@PDMEEOA@CREATE?5VIRTUAL?5TABLE?5?$CFT?$AA@ ; `string'
;	COMDAT ??_C@_09NJDMOIOM@name?$DN?8?$CFq?8?$AA@
CONST	SEGMENT
??_C@_09NJDMOIOM@name?$DN?8?$CFq?8?$AA@ DB 'name=''%q''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@IIEEBDEG@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8table?8?0?5n@
CONST	SEGMENT
??_C@_0FH@IIEEBDEG@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8table?8?0?5n@ DB 'U'
	DB	'PDATE %Q.%s SET type=''table'', name=%Q, tbl_name=%Q, rootpag'
	DB	'e=0, sql=%Q WHERE rowid=#1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PDMEEOA@CREATE?5VIRTUAL?5TABLE?5?$CFT?$AA@
CONST	SEGMENT
??_C@_0BI@PDMEEOA@CREATE?5VIRTUAL?5TABLE?5?$CFT?$AA@ DB 'CREATE VIRTUAL T'
	DB	'ABLE %T', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3VtabFinishParse
_TEXT	SEGMENT
_db$ = -16						; size = 4
_zStmt$100533 = -12					; size = 4
_iDb$100535 = -8					; size = 4
tv401 = -4						; size = 4
_pParse$ = 8						; size = 4
_pEnd$ = 12						; size = 4
_sqlite3VtabFinishParse PROC				; COMDAT
; Line 59025
	sub	esp, 16					; 00000010H
	push	ebx
; Line 59031
	mov	ebx, DWORD PTR _pParse$[esp+16]
	push	ebp
	call	_addArgumentToVtab
; Line 59035
	mov	ebp, DWORD PTR [ebx+164]
; Line 59036
	test	ebp, ebp
	mov	DWORD PTR [ebx+180], 0
	je	$LN2@sqlite3Vta@8
; Line 59038
	cmp	DWORD PTR [ebp+68], 1
	push	esi
	mov	esi, DWORD PTR [ebx]
	mov	DWORD PTR _db$[esp+28], esi
	jl	$LN53@sqlite3Vta@8
; Line 59039
	mov	eax, DWORD PTR [ebp+72]
	mov	ebx, DWORD PTR [eax]
; Line 59040
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL49@sqlite3Vta@8:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL49@sqlite3Vta@8
	sub	eax, edx
	push	edi
	add	esi, 180				; 000000b4H
	mov	edi, eax
	call	_sqlite3HashFind
; Line 59049
	mov	edi, DWORD PTR _db$[esp+32]
	mov	DWORD PTR [ebp+60], eax
	cmp	BYTE PTR [edi+68], 0
	jne	$LN4@sqlite3Vta@8
; Line 59056
	mov	eax, DWORD PTR _pEnd$[esp+28]
	test	eax, eax
; Line 59057
	mov	ebx, DWORD PTR _pParse$[esp+28]
	je	SHORT $LN3@sqlite3Vta@8
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [ebx+140]
	and	edx, -2					; fffffffeH
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR [ebx+144]
	and	ecx, 1
	xor	eax, ecx
	mov	DWORD PTR [ebx+144], eax
$LN3@sqlite3Vta@8:
; Line 59059
	lea	edx, DWORD PTR [ebx+140]
	push	edx
	push	OFFSET ??_C@_0BI@PDMEEOA@CREATE?5VIRTUAL?5TABLE?5?$CFT?$AA@
	call	_sqlite3MPrintf
; Line 59070
	mov	esi, DWORD PTR [ebp+76]
	add	esp, 8
	mov	ecx, edi
	mov	DWORD PTR _zStmt$100533[esp+32], eax
	call	_sqlite3SchemaToIndex
; Line 59079
	cmp	eax, 1
	mov	DWORD PTR _iDb$100535[esp+32], eax
	mov	edx, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN10@sqlite3Vta@8
	mov	edx, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN10@sqlite3Vta@8:
	mov	ecx, DWORD PTR [ebp]
	lea	edi, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _zStmt$100533[esp+32]
	push	eax
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _db$[esp+44]
	add	edi, edi
	push	edx
	mov	edx, DWORD PTR [ecx+4]
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edx+edi]
	push	eax
	push	OFFSET ??_C@_0FH@IIEEBDEG@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8table?8?0?5n@
	mov	DWORD PTR tv401[esp+56], edi
	call	_sqlite3NestedParse
; Line 59080
	mov	eax, DWORD PTR _zStmt$100533[esp+56]
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN14@sqlite3Vta@8
	push	eax
	call	_free
	add	esp, 4
$LN14@sqlite3Vta@8:
; Line 59081
	mov	esi, DWORD PTR [ebx+12]
	test	esi, esi
	jne	SHORT $LN16@sqlite3Vta@8
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	ecx, DWORD PTR _pParse$[esp+28]
	mov	edi, DWORD PTR tv401[esp+32]
	mov	DWORD PTR [ecx+12], eax
	mov	esi, eax
$LN16@sqlite3Vta@8:
; Line 59082
	mov	edx, DWORD PTR _db$[esp+32]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+edi+20]
	mov	edx, DWORD PTR [ecx]
	push	0
	add	edx, 1
	push	edx
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	edi, DWORD PTR _iDb$100535[esp+44]
	push	0
	push	edi
	push	4
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 59084
	push	0
	push	0
	push	15					; 0000000fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 59085
	mov	eax, DWORD PTR [ebp]
	push	eax
	push	OFFSET ??_C@_09NJDMOIOM@name?$DN?8?$CFq?8?$AA@
	call	_sqlite3MPrintf
; Line 59086
	push	1
	mov	ebx, eax
	push	edi
	push	28					; 0000001cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
	test	esi, esi
	je	SHORT $LN47@sqlite3Vta@8
	mov	edi, DWORD PTR [esi+20]
	test	edi, edi
	je	SHORT $LN47@sqlite3Vta@8
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN40@sqlite3Vta@8
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN47@sqlite3Vta@8
$LN40@sqlite3Vta@8:
	test	eax, eax
	jl	SHORT $LN36@sqlite3Vta@8
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN35@sqlite3Vta@8
$LN36@sqlite3Vta@8:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN38@sqlite3Vta@8
$LN35@sqlite3Vta@8:
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edi+ecx*4+16]
	lea	edi, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	xor	eax, eax
	cmp	ebx, eax
	mov	DWORD PTR [edi+12], eax
	jne	SHORT $LN48@sqlite3Vta@8
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	jmp	SHORT $LN38@sqlite3Vta@8
$LN48@sqlite3Vta@8:
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], -1
	jmp	SHORT $LN38@sqlite3Vta@8
$LN47@sqlite3Vta@8:
	mov	ecx, ebx
	or	eax, -1
	call	_freeP3
$LN38@sqlite3Vta@8:
; Line 59087
	mov	ebp, DWORD PTR [ebp]
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
$LL50@sqlite3Vta@8:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL50@sqlite3Vta@8
	sub	eax, edx
	mov	edx, DWORD PTR _iDb$100535[esp+32]
	push	0
	push	edx
	mov	edi, eax
	push	131					; 00000083H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	lea	edx, DWORD PTR [edi+1]
	push	ebp
	mov	ecx, esi
	call	_sqlite3VdbeChangeP3
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 59107
	add	esp, 16					; 00000010H
	ret	0
$LN4@sqlite3Vta@8:
; Line 59097
	mov	ecx, DWORD PTR [ebp]
	mov	esi, DWORD PTR [ebp+76]
; Line 59098
	mov	eax, ecx
	lea	edi, DWORD PTR [eax+1]
$LL51@sqlite3Vta@8:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL51@sqlite3Vta@8
	sub	eax, edi
	add	eax, 1
; Line 59099
	push	ebp
	push	eax
	push	ecx
	lea	eax, DWORD PTR [esi+4]
	call	_sqlite3HashInsert
	add	esp, 12					; 0000000cH
; Line 59100
	test	eax, eax
	jne	SHORT $LN54@sqlite3Vta@8
; Line 59104
	mov	eax, DWORD PTR _pParse$[esp+28]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+128], ecx
; Line 59105
	mov	DWORD PTR [eax+164], 0
$LN54@sqlite3Vta@8:
	pop	edi
$LN53@sqlite3Vta@8:
	pop	esi
$LN2@sqlite3Vta@8:
	pop	ebp
	pop	ebx
; Line 59107
	add	esp, 16					; 00000010H
	ret	0
_sqlite3VtabFinishParse ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabArgInit
_TEXT	SEGMENT
_sqlite3VtabArgInit PROC				; COMDAT
; _pParse$ = eax
; Line 59113
	push	ebx
	mov	ebx, eax
; Line 59114
	call	_addArgumentToVtab
; Line 59116
	and	DWORD PTR [ebx+184], 1
	mov	DWORD PTR [ebx+180], 0
	pop	ebx
; Line 59117
	ret	0
_sqlite3VtabArgInit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@DEKEKMPI@vtable?5constructor?5failed?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CO@NAIIFAKI@vtable?5constructor?5did?5not?5decla@ ; `string'
;	COMDAT ??_C@_0BO@DEKEKMPI@vtable?5constructor?5failed?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BO@DEKEKMPI@vtable?5constructor?5failed?3?5?$CFs?$AA@ DB 'vtable c'
	DB	'onstructor failed: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NAIIFAKI@vtable?5constructor?5did?5not?5decla@
CONST	SEGMENT
??_C@_0CO@NAIIFAKI@vtable?5constructor?5did?5not?5decla@ DB 'vtable const'
	DB	'ructor did not declare schema: %s', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _vtabCallConstructor
_TEXT	SEGMENT
_zErr$ = -12						; size = 4
_zModuleName$ = -8					; size = 4
_nArg$ = -4						; size = 4
_pMod$ = 8						; size = 4
_xConstruct$ = 12					; size = 4
_pzErr$ = 16						; size = 4
_vtabCallConstructor PROC				; COMDAT
; _db$ = esi
; _pTab$ = edi
; Line 59145
	sub	esp, 12					; 0000000cH
; Line 59152
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+68]
	push	ebp
	mov	ebp, DWORD PTR [edi+72]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	DWORD PTR _nArg$[esp+24], eax
	mov	DWORD PTR _zErr$[esp+24], 0
	call	_sqlite3MPrintf
	add	esp, 8
; Line 59154
	test	eax, eax
	mov	DWORD PTR _zModuleName$[esp+16], eax
	jne	SHORT $LN8@vtabCallCo
; Line 59155
	mov	eax, 7
	pop	ebp
; Line 59190
	add	esp, 12					; 0000000cH
	ret	0
$LN8@vtabCallCo:
; Line 59162
	cmp	DWORD PTR [esi+48], -264537850		; f03b7906H
	mov	DWORD PTR [esi+208], edi
	jne	SHORT $LN12@vtabCallCo
	mov	DWORD PTR [esi+48], -1607883113		; a029a697H
	jmp	SHORT $LN11@vtabCallCo
$LN12@vtabCallCo:
	mov	DWORD PTR [esi+48], -1254786768		; b5357930H
	mov	DWORD PTR [esi+152], 1
$LN11@vtabCallCo:
; Line 59164
	mov	eax, DWORD PTR _nArg$[esp+16]
	mov	ecx, DWORD PTR _pMod$[esp+12]
	push	ebx
	lea	edx, DWORD PTR _zErr$[esp+20]
	push	edx
	mov	edx, DWORD PTR [ecx+8]
	lea	ebx, DWORD PTR [edi+64]
	push	ebx
	push	ebp
	push	eax
	push	edx
	push	esi
	call	DWORD PTR _xConstruct$[esp+40]
	mov	ebp, eax
; Line 59165
	mov	eax, DWORD PTR [esi+48]
	add	esp, 24					; 00000018H
	cmp	eax, -1607883113			; a029a697H
	jne	SHORT $LN17@vtabCallCo
	mov	DWORD PTR [esi+48], -264537850		; f03b7906H
	xor	eax, eax
	jmp	SHORT $LN18@vtabCallCo
$LN17@vtabCallCo:
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN32@vtabCallCo
	mov	DWORD PTR [esi+48], -1254786768		; b5357930H
	mov	DWORD PTR [esi+152], 1
$LN32@vtabCallCo:
	mov	eax, 1
$LN18@vtabCallCo:
; Line 59167
	test	ebp, ebp
	mov	ebx, DWORD PTR [ebx]
	jne	SHORT $LN30@vtabCallCo
	test	ebx, ebx
	je	SHORT $LN6@vtabCallCo
; Line 59168
	mov	ecx, DWORD PTR _pMod$[esp+16]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [ebx], edx
; Line 59169
	mov	DWORD PTR [ebx+4], 1
$LN6@vtabCallCo:
; Line 59179
	cmp	DWORD PTR [esi+208], 0
	je	SHORT $LN31@vtabCallCo
; Line 59181
	mov	eax, DWORD PTR [edi]
	push	eax
	push	OFFSET ??_C@_0CO@NAIIFAKI@vtable?5constructor?5did?5not?5decla@
	call	_sqlite3MPrintf
	mov	ecx, DWORD PTR _pzErr$[esp+24]
	add	esp, 8
	mov	DWORD PTR [ecx], eax
; Line 59182
	mov	ebp, 1
; Line 59184
	jmp	SHORT $LN33@vtabCallCo
$LN30@vtabCallCo:
; Line 59173
	mov	eax, DWORD PTR _zErr$[esp+20]
	test	eax, eax
	jne	SHORT $LN5@vtabCallCo
; Line 59174
	mov	eax, DWORD PTR _zModuleName$[esp+20]
	push	eax
	push	OFFSET ??_C@_0BO@DEKEKMPI@vtable?5constructor?5failed?3?5?$CFs?$AA@
	call	_sqlite3MPrintf
	mov	ecx, DWORD PTR _pzErr$[esp+24]
	add	esp, 8
	mov	DWORD PTR [ecx], eax
; Line 59175
	jmp	SHORT $LN33@vtabCallCo
$LN5@vtabCallCo:
; Line 59176
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	_sqlite3MPrintf
	mov	edx, DWORD PTR _pzErr$[esp+24]
	mov	DWORD PTR [edx], eax
; Line 59177
	mov	eax, DWORD PTR _zErr$[esp+28]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN33@vtabCallCo
	push	eax
	call	_free
	add	esp, 4
; Line 59178
	jmp	SHORT $LN33@vtabCallCo
$LN31@vtabCallCo:
; Line 59185
	mov	ebp, eax
$LN33@vtabCallCo:
; Line 59188
	mov	edx, DWORD PTR _zModuleName$[esp+20]
	push	edx
	mov	DWORD PTR [esi+208], 0
	call	_free
	add	esp, 4
	pop	ebx
; Line 59189
	mov	eax, ebp
	pop	ebp
; Line 59190
	add	esp, 12					; 0000000cH
	ret	0
_vtabCallConstructor ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@KBJCCNMM@no?5such?5module?3?5?$CFs?$AA@ ; `string'
;	COMDAT ??_C@_0BD@KBJCCNMM@no?5such?5module?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BD@KBJCCNMM@no?5such?5module?3?5?$CFs?$AA@ DB 'no such module: %s', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3VtabCallConnect
_TEXT	SEGMENT
_zErr$100612 = -4					; size = 4
_sqlite3VtabCallConnect PROC				; COMDAT
; _pParse$ = ebx
; _pTab$ = eax
; Line 59199
	push	ecx
	push	edi
	mov	edi, eax
; Line 59203
	test	edi, edi
	je	$LN4@sqlite3Vta@9
	cmp	BYTE PTR [edi+57], 0
	je	SHORT $LN4@sqlite3Vta@9
	cmp	DWORD PTR [edi+64], 0
	jne	SHORT $LN4@sqlite3Vta@9
; Line 59207
	mov	eax, DWORD PTR [edi+60]
; Line 59208
	test	eax, eax
	push	esi
	jne	SHORT $LN3@sqlite3Vta@9
; Line 59209
	mov	eax, DWORD PTR [edi+72]
; Line 59210
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0BD@KBJCCNMM@no?5such?5module?3?5?$CFs?$AA@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
; Line 59211
	mov	esi, 1
	add	esp, 8
; Line 59222
	mov	eax, esi
	pop	esi
	pop	edi
; Line 59223
	pop	ecx
	ret	0
$LN3@sqlite3Vta@9:
; Line 59215
	mov	ecx, DWORD PTR [eax]
	mov	esi, DWORD PTR [ebx]
	push	ebp
	lea	edx, DWORD PTR _zErr$100612[esp+16]
	push	edx
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	eax
	mov	DWORD PTR _zErr$100612[esp+28], 0
	call	_vtabCallConstructor
; Line 59216
	mov	ebp, DWORD PTR _zErr$100612[esp+28]
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN1@sqlite3Vta@9
; Line 59217
	push	ebp
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN1@sqlite3Vta@9:
; Line 59219
	test	ebp, ebp
	je	SHORT $LN13@sqlite3Vta@9
	push	ebp
	call	_free
	add	esp, 4
$LN13@sqlite3Vta@9:
	pop	ebp
; Line 59222
	mov	eax, esi
	pop	esi
	pop	edi
; Line 59223
	pop	ecx
	ret	0
$LN4@sqlite3Vta@9:
; Line 59204
	xor	eax, eax
	pop	edi
; Line 59223
	pop	ecx
	ret	0
_sqlite3VtabCallConnect ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _addToVTrans
_TEXT	SEGMENT
_addToVTrans PROC					; COMDAT
; _db$ = esi
; _pVtab$ = ebx
; Line 59232
	mov	ecx, DWORD PTR [esi+216]
	mov	eax, ecx
	push	edi
	cdq
	mov	edi, 5
	idiv	edi
	test	edx, edx
	jne	SHORT $LN2@addToVTran
; Line 59235
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edx
	mov	eax, DWORD PTR [esi+212]
	lea	edi, DWORD PTR [ecx*4+20]
	je	SHORT $LN12@addToVTran
	cmp	DWORD PTR _inMutex, edx
	jg	SHORT $LN21@addToVTran
$LN12@addToVTran:
	test	eax, eax
	jne	SHORT $LN11@addToVTran
	call	_sqlite3Malloc
	jmp	SHORT $LN10@addToVTran
$LN11@addToVTran:
	push	edi
	push	eax
	call	_realloc
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN6@addToVTran
	call	_sqlite3FailedMalloc
$LN6@addToVTran:
	mov	eax, ecx
$LN10@addToVTran:
; Line 59236
	test	eax, eax
	jne	SHORT $LN1@addToVTran
$LN21@addToVTran:
; Line 59237
	mov	eax, 7
	pop	edi
; Line 59247
	ret	0
$LN1@addToVTran:
; Line 59239
	mov	edx, DWORD PTR [esi+216]
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], ecx
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR [edx+16], ecx
; Line 59240
	mov	DWORD PTR [esi+212], eax
$LN2@addToVTran:
; Line 59244
	mov	eax, DWORD PTR [esi+216]
	mov	ecx, DWORD PTR [esi+212]
	mov	DWORD PTR [ecx+eax*4], ebx
	mov	eax, 1
	add	DWORD PTR [esi+216], eax
; Line 59245
	add	DWORD PTR [ebx+4], eax
; Line 59246
	xor	eax, eax
	pop	edi
; Line 59247
	ret	0
_addToVTrans ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabCallCreate
_TEXT	SEGMENT
_zTab$ = 8						; size = 4
_pzErr$ = 12						; size = 4
_sqlite3VtabCallCreate PROC				; COMDAT
; _db$ = ecx
; _iDb$ = eax
; Line 59257
	push	ebx
; Line 59263
	mov	ebx, DWORD PTR _zTab$[esp]
	push	ebp
	mov	ebp, DWORD PTR _pzErr$[esp+4]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [eax+eax*2]
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edi
	push	edx
	push	esi
	call	_sqlite3FindTable
	mov	edi, eax
; Line 59265
	mov	eax, DWORD PTR [edi+60]
; Line 59266
	mov	ecx, DWORD PTR [edi+72]
	mov	ecx, DWORD PTR [ecx]
	add	esp, 8
; Line 59272
	test	eax, eax
	jne	SHORT $LN3@sqlite3Vta@10
; Line 59273
	push	ecx
	push	OFFSET ??_C@_0BD@KBJCCNMM@no?5such?5module?3?5?$CFs?$AA@
	call	_sqlite3MPrintf
	add	esp, 8
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp], eax
	pop	ebp
; Line 59274
	mov	eax, 1
	pop	ebx
; Line 59284
	ret	0
$LN3@sqlite3Vta@10:
; Line 59276
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx+4]
	push	ebp
	push	ecx
	push	eax
	call	_vtabCallConstructor
	add	esp, 12					; 0000000cH
; Line 59279
	test	eax, eax
	jne	SHORT $LN1@sqlite3Vta@10
	mov	edi, DWORD PTR [edi+64]
	test	edi, edi
	je	SHORT $LN1@sqlite3Vta@10
; Line 59280
	mov	ebx, edi
	call	_addToVTrans
$LN1@sqlite3Vta@10:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 59284
	ret	0
_sqlite3VtabCallCreate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VtabBegin
_TEXT	SEGMENT
_sqlite3VtabBegin PROC					; COMDAT
; _db$ = ecx
; _pVtab$ = eax
; Line 59446
	push	ebx
	push	esi
	mov	esi, ecx
; Line 59455
	mov	edx, DWORD PTR [esi+212]
	mov	ebx, eax
	xor	eax, eax
	test	edx, edx
	jne	SHORT $LN8@sqlite3Vta@11
	cmp	DWORD PTR [esi+216], eax
	jle	SHORT $LN8@sqlite3Vta@11
	pop	esi
; Line 59456
	lea	eax, DWORD PTR [edx+6]
	pop	ebx
; Line 59483
	ret	0
$LN8@sqlite3Vta@11:
; Line 59458
	test	ebx, ebx
	jne	SHORT $LN7@sqlite3Vta@11
	pop	esi
; Line 59459
	xor	eax, eax
	pop	ebx
; Line 59483
	ret	0
$LN7@sqlite3Vta@11:
; Line 59461
	mov	ecx, DWORD PTR [ebx]
	push	ebp
; Line 59463
	mov	ebp, DWORD PTR [ecx+56]
	test	ebp, ebp
	push	edi
	je	SHORT $LN14@sqlite3Vta@11
	mov	edi, DWORD PTR [esi+216]
; Line 59468
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN3@sqlite3Vta@11
$LL5@sqlite3Vta@11:
	mov	ecx, DWORD PTR [edx]
	test	ecx, ecx
	je	SHORT $LN3@sqlite3Vta@11
; Line 59469
	cmp	ecx, ebx
	je	SHORT $LN12@sqlite3Vta@11
	add	eax, 1
	add	edx, 4
	cmp	eax, edi
	jl	SHORT $LL5@sqlite3Vta@11
$LN3@sqlite3Vta@11:
; Line 59475
	push	ebx
	call	ebp
	add	esp, 4
; Line 59476
	test	eax, eax
; Line 59477
	jne	SHORT $LN14@sqlite3Vta@11
; Line 59480
	call	_addToVTrans
$LN14@sqlite3Vta@11:
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
; Line 59483
	ret	0
$LN12@sqlite3Vta@11:
	pop	edi
	pop	ebp
	pop	esi
; Line 59470
	xor	eax, eax
	pop	ebx
; Line 59483
	ret	0
_sqlite3VtabBegin ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _isLikeOrGlob
_TEXT	SEGMENT
_wc$ = -8						; size = 3
_noCase$ = -4						; size = 4
_pnPattern$ = 8						; size = 4
_pisComplete$ = 12					; size = 4
_isLikeOrGlob PROC					; COMDAT
; _db$ = ecx
; _pExpr$ = eax
; Line 60063
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	edi, eax
; Line 60072
	lea	eax, DWORD PTR _noCase$[esp+20]
	push	eax
	mov	ebx, ecx
	push	ebx
	lea	esi, DWORD PTR _wc$[esp+28]
	mov	eax, edi
	call	_sqlite3IsLikeFunction
	add	esp, 8
	test	eax, eax
; Line 60073
	je	$LN6@isLikeOrGl
; Line 60075
	mov	eax, DWORD PTR [edi+16]
; Line 60076
	mov	eax, DWORD PTR [eax+12]
	mov	esi, DWORD PTR [eax]
; Line 60077
	cmp	BYTE PTR [esi], 88			; 00000058H
; Line 60078
	jne	$LN6@isLikeOrGl
; Line 60080
	mov	eax, DWORD PTR [eax+12]
; Line 60081
	cmp	BYTE PTR [eax], 149			; 00000095H
; Line 60082
	jne	$LN6@isLikeOrGl
; Line 60084
	mov	eax, DWORD PTR [eax+4]
; Line 60085
	test	eax, eax
	jne	SHORT $LN9@isLikeOrGl
; Line 60090
	mov	eax, DWORD PTR [ebx+28]
$LN9@isLikeOrGl:
; Line 60093
	mov	al, BYTE PTR [eax+5]
	cmp	al, 1
	mov	ecx, DWORD PTR _noCase$[esp+20]
	jne	SHORT $LN7@isLikeOrGl
	test	ecx, ecx
	je	SHORT $LN8@isLikeOrGl
$LN7@isLikeOrGl:
	cmp	al, 2
	jne	$LN6@isLikeOrGl
	test	ecx, ecx
	je	$LN6@isLikeOrGl
$LN8@isLikeOrGl:
; Line 60096
	mov	eax, esi
	call	_sqlite3DequoteExpr
; Line 60097
	mov	esi, DWORD PTR [esi+20]
; Line 60098
	movsx	eax, BYTE PTR [esi]
	xor	ecx, ecx
	test	eax, eax
	je	$LN6@isLikeOrGl
	movsx	edi, BYTE PTR _wc$[esp+20]
	mov	dl, BYTE PTR _wc$[esp+22]
	mov	bl, BYTE PTR _wc$[esp+21]
	push	ebp
$LL19@isLikeOrGl:
	cmp	eax, edi
	je	SHORT $LN20@isLikeOrGl
	movsx	ebp, bl
	cmp	eax, ebp
	je	SHORT $LN20@isLikeOrGl
	movsx	ebp, dl
	cmp	eax, ebp
	je	SHORT $LN20@isLikeOrGl
	movsx	eax, BYTE PTR [ecx+esi+1]
	add	ecx, 1
	test	eax, eax
	jne	SHORT $LL19@isLikeOrGl
$LN20@isLikeOrGl:
; Line 60099
	test	ecx, ecx
	pop	ebp
	je	SHORT $LN6@isLikeOrGl
	mov	al, BYTE PTR [ecx+esi]
	cmp	al, 255					; 000000ffH
	je	SHORT $LN6@isLikeOrGl
; Line 60102
	cmp	al, BYTE PTR _wc$[esp+20]
	jne	SHORT $LN15@isLikeOrGl
	cmp	BYTE PTR [ecx+esi+1], 0
	jne	SHORT $LN15@isLikeOrGl
	mov	edx, DWORD PTR _pisComplete$[esp+16]
	mov	eax, 1
	mov	DWORD PTR [edx], eax
; Line 60103
	mov	eax, DWORD PTR _pnPattern$[esp+16]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 60104
	mov	eax, 1
	pop	ebx
; Line 60105
	add	esp, 8
	ret	0
$LN15@isLikeOrGl:
; Line 60102
	mov	edx, DWORD PTR _pisComplete$[esp+16]
	xor	eax, eax
	mov	DWORD PTR [edx], eax
; Line 60103
	mov	eax, DWORD PTR _pnPattern$[esp+16]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ecx
; Line 60104
	mov	eax, 1
	pop	ebx
; Line 60105
	add	esp, 8
	ret	0
$LN6@isLikeOrGl:
	pop	edi
	pop	esi
; Line 60094
	xor	eax, eax
	pop	ebx
; Line 60105
	add	esp, 8
	ret	0
_isLikeOrGlob ENDP
_TEXT	ENDS
PUBLIC	__real@546d42aea2879f2e
;	COMDAT __real@546d42aea2879f2e
CONST	SEGMENT
__real@546d42aea2879f2e DQ 0546d42aea2879f2er	; 5e+098
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _bestVirtualIndex
_TEXT	SEGMENT
_nTerm$101283 = -12					; size = 4
_nOrderBy$ = -8						; size = 4
_pTab$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pWC$ = 12						; size = 4
tv498 = 16						; size = 4
_pUsage$ = 16						; size = 4
_pSrc$ = 16						; size = 4
_notReady$ = 20						; size = 8
_pOrderBy$ = 28						; size = 4
_orderByUsable$ = 32					; size = 4
_ppIdxInfo$ = 36					; size = 4
_bestVirtualIndex PROC					; COMDAT
; Line 60757
	sub	esp, 12					; 0000000cH
; Line 60772
	mov	ecx, DWORD PTR _ppIdxInfo$[esp+8]
	mov	edx, DWORD PTR _pSrc$[esp+8]
	mov	eax, DWORD PTR [edx+12]
	push	ebx
	mov	ebx, DWORD PTR [ecx]
; Line 60773
	test	ebx, ebx
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _pTab$[esp+28], eax
	jne	$LN104@bestVirtua
; Line 60780
	mov	ecx, DWORD PTR _pWC$[esp+24]
	mov	eax, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [ecx+8]
	xor	ebp, ebp
	test	ecx, ecx
	mov	DWORD PTR _nTerm$101283[esp+28], ebp
	jle	SHORT $LN28@bestVirtua
	mov	edx, DWORD PTR [edx+24]
	add	eax, 10					; 0000000aH
	npad	6
$LL30@bestVirtua:
; Line 60781
	movsx	esi, WORD PTR [eax-4]
	cmp	esi, edx
	jne	SHORT $LN29@bestVirtua
; Line 60782
	cmp	WORD PTR [eax], 1
	je	SHORT $LN29@bestVirtua
; Line 60783
	add	ebp, 1
$LN29@bestVirtua:
; Line 60780
	add	eax, 40					; 00000028H
	sub	ecx, 1
	jne	SHORT $LL30@bestVirtua
; Line 60783
	mov	DWORD PTR _nTerm$101283[esp+28], ebp
$LN28@bestVirtua:
; Line 60791
	mov	ecx, DWORD PTR _pOrderBy$[esp+24]
	xor	edi, edi
	test	ecx, ecx
	mov	DWORD PTR _nOrderBy$[esp+28], edi
	je	SHORT $LN109@bestVirtua
; Line 60792
	mov	esi, DWORD PTR [ecx]
	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN106@bestVirtua
	mov	edx, DWORD PTR [ecx+12]
$LL24@bestVirtua:
; Line 60793
	mov	ecx, DWORD PTR [edx]
; Line 60794
	cmp	BYTE PTR [ecx], 149			; 00000095H
	jne	SHORT $LN106@bestVirtua
	mov	ecx, DWORD PTR [ecx+36]
	mov	ebx, DWORD PTR _pSrc$[esp+24]
	cmp	ecx, DWORD PTR [ebx+24]
	jne	SHORT $LN106@bestVirtua
	add	eax, 1
	add	edx, 12					; 0000000cH
	cmp	eax, esi
	jl	SHORT $LL24@bestVirtua
$LN106@bestVirtua:
; Line 60796
	cmp	eax, esi
	jne	SHORT $LN109@bestVirtua
; Line 60797
	mov	edi, esi
	mov	DWORD PTR _nOrderBy$[esp+28], esi
$LN109@bestVirtua:
; Line 60805
	lea	edx, DWORD PTR [ebp+ebp*4]
	add	edx, edx
	add	edx, edx
	lea	ebx, DWORD PTR [edx+edi*8+48]
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN108@bestVirtua
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN43@bestVirtua
	cmp	DWORD PTR _inMutex, esi
	jg	SHORT $LN108@bestVirtua
$LN43@bestVirtua:
	push	ebx
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN99@bestVirtua
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN107@bestVirtua
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN108@bestVirtua
$LN107@bestVirtua:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN108@bestVirtua
$LN99@bestVirtua:
	push	ebx
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN108@bestVirtua:
; Line 60806
	test	esi, esi
	mov	ebx, esi
	jne	SHORT $LN18@bestVirtua
; Line 60807
	mov	edi, DWORD PTR _pParse$[esp+24]
	push	OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
	call	_sqlite3ErrorMsg
; Line 60808
	fldz
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 60932
	add	esp, 12					; 0000000cH
	ret	0
$LN18@bestVirtua:
; Line 60810
	mov	eax, DWORD PTR _ppIdxInfo$[esp+24]
	mov	DWORD PTR [eax], esi
; Line 60820
	mov	eax, DWORD PTR _nTerm$101283[esp+28]
	lea	ecx, DWORD PTR [esi+48]
	lea	edx, DWORD PTR [ebp+ebp*2]
	lea	ebp, DWORD PTR [ecx+edx*4]
	lea	edx, DWORD PTR [ebp+edi*8]
	mov	DWORD PTR [esi], eax
; Line 60827
	mov	eax, DWORD PTR _pWC$[esp+24]
	mov	DWORD PTR [esi+16], edx
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+12], ebp
	mov	esi, DWORD PTR [eax+16]
	xor	edx, edx
	cmp	DWORD PTR [eax+8], edx
	jle	SHORT $LN15@bestVirtua
	lea	eax, DWORD PTR [esi+10]
	lea	esi, DWORD PTR [ecx+4]
	npad	9
$LL17@bestVirtua:
; Line 60828
	movsx	ecx, WORD PTR [eax-4]
	mov	edi, DWORD PTR _pSrc$[esp+24]
	cmp	ecx, DWORD PTR [edi+24]
	jne	SHORT $LN16@bestVirtua
; Line 60829
	cmp	WORD PTR [eax], 1
	je	SHORT $LN16@bestVirtua
; Line 60830
	movsx	ecx, WORD PTR [eax-2]
	mov	DWORD PTR [esi-4], ecx
; Line 60831
	mov	DWORD PTR [esi+4], edx
; Line 60832
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [esi], cl
; Line 60843
	add	esi, 12					; 0000000cH
$LN16@bestVirtua:
	mov	ecx, DWORD PTR _pWC$[esp+24]
	add	edx, 1
	add	eax, 40					; 00000028H
	cmp	edx, DWORD PTR [ecx+8]
	jl	SHORT $LL17@bestVirtua
; Line 60827
	mov	edi, DWORD PTR _nOrderBy$[esp+28]
$LN15@bestVirtua:
; Line 60845
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN104@bestVirtua
	xor	ecx, ecx
	npad	1
$LL12@bestVirtua:
; Line 60847
	mov	edx, DWORD PTR _pOrderBy$[esp+24]
	mov	esi, DWORD PTR [edx+12]
	mov	esi, DWORD PTR [ecx+esi]
	mov	esi, DWORD PTR [esi+40]
	mov	DWORD PTR [ebp+eax*8], esi
; Line 60848
	mov	edx, DWORD PTR [edx+12]
	mov	dl, BYTE PTR [ecx+edx+8]
	mov	BYTE PTR [ebp+eax*8+4], dl
	add	eax, 1
	add	ecx, 12					; 0000000cH
	cmp	eax, edi
	jl	SHORT $LL12@bestVirtua
$LN104@bestVirtua:
; Line 60894
	mov	eax, DWORD PTR [ebx+16]
	mov	esi, DWORD PTR [ebx+4]
; Line 60895
	xor	edi, edi
	cmp	DWORD PTR [ebx], edi
	mov	DWORD PTR _pUsage$[esp+24], eax
	jle	SHORT $LN7@bestVirtua
	mov	ebp, DWORD PTR _notReady$[esp+28]
	add	esi, 5
	npad	3
$LL9@bestVirtua:
; Line 60897
	mov	eax, DWORD PTR [esi+3]
; Line 60898
	mov	ecx, DWORD PTR _pWC$[esp+24]
	mov	ecx, DWORD PTR [ecx+16]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*8+24]
	mov	ecx, DWORD PTR [ecx+edx*8+28]
	and	eax, DWORD PTR _notReady$[esp+24]
	and	ecx, ebp
	or	eax, ecx
	jne	SHORT $LN34@bestVirtua
	mov	eax, 1
	jmp	SHORT $LN35@bestVirtua
$LN34@bestVirtua:
	xor	eax, eax
$LN35@bestVirtua:
	mov	BYTE PTR [esi], al
	add	edi, 1
	add	esi, 12					; 0000000cH
	cmp	edi, DWORD PTR [ebx]
	jl	SHORT $LL9@bestVirtua
$LN7@bestVirtua:
; Line 60900
	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _pUsage$[esp+24]
	add	edx, edx
	add	edx, edx
	add	edx, edx
	push	edx
	push	0
	push	eax
	call	_memset
; Line 60901
	xor	esi, esi
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [ebx+28], esi
	je	SHORT $LN64@bestVirtua
; Line 60902
	mov	eax, DWORD PTR [ebx+24]
	cmp	eax, esi
	je	SHORT $LN64@bestVirtua
	push	eax
	call	_free
	add	esp, 4
$LN64@bestVirtua:
; Line 60909
	mov	eax, DWORD PTR [ebx+8]
	fld	QWORD PTR __real@546d42aea2879f2e
; Line 60910
	cmp	eax, esi
	fstp	QWORD PTR [ebx+40]
	mov	DWORD PTR [ebx+24], esi
	mov	DWORD PTR [ebx+20], esi
	mov	DWORD PTR [ebx+28], esi
	mov	DWORD PTR [ebx+32], esi
	mov	DWORD PTR tv498[esp+24], eax
	je	SHORT $LN5@bestVirtua
	cmp	DWORD PTR _orderByUsable$[esp+24], esi
	jne	SHORT $LN5@bestVirtua
; Line 60911
	mov	DWORD PTR [ebx+8], esi
$LN5@bestVirtua:
; Line 60914
	mov	edi, DWORD PTR _pParse$[esp+24]
	mov	eax, DWORD PTR [edi]
	cmp	DWORD PTR [eax+48], -264537850		; f03b7906H
	mov	ebp, 1
	jne	SHORT $LN67@bestVirtua
	mov	DWORD PTR [eax+48], -1607883113		; a029a697H
	jmp	SHORT $LN66@bestVirtua
$LN67@bestVirtua:
	mov	DWORD PTR [eax+48], -1254786768		; b5357930H
	mov	DWORD PTR [eax+152], ebp
$LN66@bestVirtua:
; Line 60917
	mov	ecx, DWORD PTR _pTab$[esp+28]
	mov	eax, DWORD PTR [ecx+64]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	add	esp, 8
; Line 60919
	cmp	eax, esi
	je	SHORT $LN4@bestVirtua
; Line 60920
	cmp	eax, 7
	jne	SHORT $LN3@bestVirtua
; Line 60921
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN70@bestVirtua
	cmp	DWORD PTR _inMutex, esi
	jg	SHORT $LN4@bestVirtua
$LN70@bestVirtua:
	add	DWORD PTR _inMutex, ebp
	mov	DWORD PTR _sqlite3_mallocHasFailed, ebp
; Line 60922
	jmp	SHORT $LN4@bestVirtua
$LN3@bestVirtua:
; Line 60923
	call	_sqlite3ErrStr
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
	mov	ebp, 1
$LN4@bestVirtua:
; Line 60927
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, -1607883113			; a029a697H
	jne	SHORT $LN85@bestVirtua
; Line 60929
	mov	ecx, DWORD PTR tv498[esp+24]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax+48], -264537850		; f03b7906H
; Line 60931
	fld	QWORD PTR [ebx+40]
	pop	ebp
	mov	DWORD PTR [ebx+8], ecx
	pop	ebx
; Line 60932
	add	esp, 12					; 0000000cH
	ret	0
; Line 60927
$LN85@bestVirtua:
	cmp	ecx, -264537850				; f03b7906H
	jne	SHORT $LN83@bestVirtua
	mov	DWORD PTR [eax+152], ebp
	mov	DWORD PTR [eax+48], -1254786768		; b5357930H
$LN83@bestVirtua:
; Line 60929
	mov	ecx, DWORD PTR tv498[esp+24]
; Line 60931
	fld	QWORD PTR [ebx+40]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ebx+8], ecx
	pop	ebx
; Line 60932
	add	esp, 12					; 0000000cH
	ret	0
_bestVirtualIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _buildIndexProbe
_TEXT	SEGMENT
_pIdx$ = 8						; size = 4
_buildIndexProbe PROC					; COMDAT
; _v$ = esi
; _nColumn$ = eax
; Line 61241
	push	0
	push	eax
	push	91					; 0000005bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 61242
	mov	eax, DWORD PTR _pIdx$[esp+8]
	add	esp, 12					; 0000000cH
	mov	ecx, esi
	jmp	_sqlite3IndexAffinityStr
_buildIndexProbe ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3WhereEnd
_TEXT	SEGMENT
tv1259 = -28						; size = 4
tv90 = -24						; size = 4
$T121800 = -24						; size = 4
_pIn$101775 = -24					; size = 4
_i$ = -20						; size = 4
tv1176 = -16						; size = 4
_pLevel$ = -16						; size = 4
_pTabList$ = -12					; size = 4
tv1323 = -8						; size = 4
_pIdx$101798 = -8					; size = 4
_addr$101781 = -8					; size = 4
_j$101776 = -8						; size = 4
$T121956 = -4						; size = 4
$T121943 = -4						; size = 4
$T121832 = -4						; size = 4
$T121801 = -4						; size = 4
_pWInfo$ = 8						; size = 4
_sqlite3WhereEnd PROC					; COMDAT
; Line 62214
	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pWInfo$[esp+32]
; Line 62215
	mov	eax, DWORD PTR [ebp]
; Line 62218
	mov	ecx, DWORD PTR [ebp+4]
	push	esi
	mov	esi, DWORD PTR [eax+12]
; Line 62222
	movsx	eax, WORD PTR [ecx]
	sub	eax, 1
	push	edi
	mov	DWORD PTR _pTabList$[esp+44], ecx
	mov	DWORD PTR _i$[esp+44], eax
	js	$LN142@sqlite3Whe
	lea	edx, DWORD PTR [eax+eax*2]
	shl	edx, 4
	imul	eax, 76					; 0000004cH
	lea	ecx, DWORD PTR [edx+ecx+32]
	lea	edx, DWORD PTR [eax+ebp+80]
	mov	DWORD PTR tv1176[esp+44], ecx
	mov	DWORD PTR tv1259[esp+44], edx
$LL31@sqlite3Whe:
; Line 62224
	mov	eax, DWORD PTR [esi+32]
	mov	ebp, DWORD PTR tv1259[esp+44]
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN34@sqlite3Whe
	mov	ecx, DWORD PTR [ebp-16]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	ecx, DWORD PTR [esi+12]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN34@sqlite3Whe:
; Line 62225
	mov	ecx, DWORD PTR [ebp-8]
	cmp	ecx, 21					; 00000015H
	mov	DWORD PTR tv1323[esp+44], ecx
	je	SHORT $LN39@sqlite3Whe
; Line 62226
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [ebp-4]
	mov	DWORD PTR $T121801[esp+44], edx
	mov	DWORD PTR $T121800[esp+44], eax
	jg	SHORT $LN37@sqlite3Whe
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN131@sqlite3Whe
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN132@sqlite3Whe
$LN131@sqlite3Whe:
	mov	ecx, DWORD PTR tv1323[esp+44]
	xor	ebx, ebx
$LN37@sqlite3Whe:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR $T121801[esp+44]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR $T121800[esp+44]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN39@sqlite3Whe
$LN132@sqlite3Whe:
	xor	ebx, ebx
$LN39@sqlite3Whe:
; Line 62228
	cmp	DWORD PTR [ebp+8], ebx
	je	$LN65@sqlite3Whe
; Line 62231
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ebx
	mov	ecx, DWORD PTR tv1259[esp+44]
	je	SHORT $LN43@sqlite3Whe
	mov	edx, DWORD PTR [ecx-20]
	lea	edx, DWORD PTR [edx*4+4]
	sub	eax, edx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax], edx
$LN43@sqlite3Whe:
; Line 62232
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, ebx
	mov	ecx, DWORD PTR [ecx+12]
	lea	edx, DWORD PTR [ecx+eax*8-8]
	mov	DWORD PTR _j$101776[esp+44], eax
	mov	DWORD PTR _pIn$101775[esp+44], edx
	jle	$LN24@sqlite3Whe
	npad	1
$LL26@sqlite3Whe:
; Line 62233
	mov	eax, DWORD PTR _pIn$101775[esp+44]
	mov	eax, DWORD PTR [eax+4]
	add	eax, 1
	js	SHORT $LN48@sqlite3Whe
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jle	SHORT $LN48@sqlite3Whe
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	je	SHORT $LN48@sqlite3Whe
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN48@sqlite3Whe:
; Line 62234
	mov	eax, DWORD PTR _pIn$101775[esp+44]
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	ecx, DWORD PTR [eax]
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR $T121832[esp+44], ecx
	jg	SHORT $LN51@sqlite3Whe
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN133@sqlite3Whe
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN134@sqlite3Whe
$LN133@sqlite3Whe:
	xor	ebx, ebx
$LN51@sqlite3Whe:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ecx, DWORD PTR $T121832[esp+44]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 110			; 0000006eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN53@sqlite3Whe
$LN134@sqlite3Whe:
	xor	ebx, ebx
$LN53@sqlite3Whe:
; Line 62235
	mov	edx, DWORD PTR _pIn$101775[esp+44]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	js	SHORT $LN25@sqlite3Whe
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jle	SHORT $LN25@sqlite3Whe
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	je	SHORT $LN25@sqlite3Whe
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN25@sqlite3Whe:
	mov	eax, DWORD PTR _j$101776[esp+44]
	sub	DWORD PTR _pIn$101775[esp+44], 8
	sub	eax, 1
	cmp	eax, ebx
	mov	DWORD PTR _j$101776[esp+44], eax
	jg	$LL26@sqlite3Whe
$LN24@sqlite3Whe:
; Line 62237
	mov	ecx, DWORD PTR tv1259[esp+44]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, ebx
	je	SHORT $LN65@sqlite3Whe
	push	eax
	call	_free
	add	esp, 4
$LN65@sqlite3Whe:
; Line 62239
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ebx
	je	SHORT $LN150@sqlite3Whe
	mov	edx, DWORD PTR tv1259[esp+44]
	mov	ecx, DWORD PTR [edx-24]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	ecx, DWORD PTR [esi+12]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN150@sqlite3Whe:
; Line 62240
	mov	edx, DWORD PTR tv1259[esp+44]
	mov	ebp, DWORD PTR [edx-40]
	cmp	ebp, ebx
	je	$LN30@sqlite3Whe
; Line 62242
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN70@sqlite3Whe
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN135@sqlite3Whe
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN135@sqlite3Whe
	mov	DWORD PTR _addr$101781[esp+44], 0
	xor	ebx, ebx
	jmp	SHORT $LN72@sqlite3Whe
$LN135@sqlite3Whe:
	xor	ebx, ebx
$LN70@sqlite3Whe:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 5
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	DWORD PTR _addr$101781[esp+44], edi
$LN72@sqlite3Whe:
; Line 62243
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	edx, DWORD PTR tv1176[esp+44]
	mov	ebp, DWORD PTR [edx]
	jg	SHORT $LN76@sqlite3Whe
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN136@sqlite3Whe
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN137@sqlite3Whe
$LN136@sqlite3Whe:
	xor	ebx, ebx
$LN76@sqlite3Whe:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 135			; 00000087H
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN78@sqlite3Whe
$LN137@sqlite3Whe:
	xor	ebx, ebx
$LN78@sqlite3Whe:
; Line 62244
	mov	edx, DWORD PTR tv1259[esp+44]
	mov	ebp, DWORD PTR [edx-28]
	cmp	ebp, ebx
	jl	SHORT $LN84@sqlite3Whe
; Line 62245
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN82@sqlite3Whe
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN138@sqlite3Whe
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN139@sqlite3Whe
$LN138@sqlite3Whe:
	xor	ebx, ebx
$LN82@sqlite3Whe:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 135			; 00000087H
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN84@sqlite3Whe
$LN139@sqlite3Whe:
	xor	ebx, ebx
$LN84@sqlite3Whe:
; Line 62247
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	edx, DWORD PTR tv1259[esp+44]
	mov	ebp, DWORD PTR [edx-12]
	jg	SHORT $LN88@sqlite3Whe
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN140@sqlite3Whe
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN141@sqlite3Whe
$LN140@sqlite3Whe:
	xor	ebx, ebx
$LN88@sqlite3Whe:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN90@sqlite3Whe
$LN141@sqlite3Whe:
	xor	ebx, ebx
$LN90@sqlite3Whe:
; Line 62248
	mov	eax, DWORD PTR _addr$101781[esp+44]
	cmp	eax, ebx
	jl	SHORT $LN30@sqlite3Whe
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jle	SHORT $LN30@sqlite3Whe
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	je	SHORT $LN30@sqlite3Whe
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN30@sqlite3Whe:
	mov	eax, DWORD PTR _i$[esp+44]
	sub	DWORD PTR tv1259[esp+44], 76		; 0000004cH
	sub	DWORD PTR tv1176[esp+44], 48		; 00000030H
	sub	eax, 1
	cmp	eax, ebx
	mov	DWORD PTR _i$[esp+44], eax
	jge	$LL31@sqlite3Whe
	mov	ecx, DWORD PTR _pTabList$[esp+44]
	mov	ebp, DWORD PTR _pWInfo$[esp+40]
	jmp	SHORT $LN29@sqlite3Whe
$LN142@sqlite3Whe:
; Line 62222
	xor	ebx, ebx
$LN29@sqlite3Whe:
; Line 62255
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ebx
	je	SHORT $LN99@sqlite3Whe
	mov	edx, DWORD PTR [ebp+16]
	lea	edx, DWORD PTR [edx*4+4]
	sub	eax, edx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax], edx
$LN99@sqlite3Whe:
; Line 62259
	add	ebp, 28					; 0000001cH
	cmp	WORD PTR [ecx], bx
	mov	DWORD PTR _i$[esp+44], ebx
	mov	DWORD PTR _pLevel$[esp+44], ebp
	jle	$LN19@sqlite3Whe
	npad	4
$LL21@sqlite3Whe:
; Line 62260
	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR _pTabList$[esp+44]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 4
	lea	eax, DWORD PTR [eax+ecx+8]
; Line 62261
	mov	ecx, DWORD PTR [eax+12]
; Line 62263
	cmp	BYTE PTR [ecx+53], bl
	jne	$LN20@sqlite3Whe
	cmp	DWORD PTR [ecx+24], ebx
	jne	$LN20@sqlite3Whe
; Line 62264
	test	DWORD PTR [ebp+4], 524288		; 00080000H
	jne	SHORT $LN104@sqlite3Whe
; Line 62265
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR $T121943[esp+44], edx
	jg	SHORT $LN102@sqlite3Whe
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN143@sqlite3Whe
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN145@sqlite3Whe
$LN143@sqlite3Whe:
	xor	ebx, ebx
$LN102@sqlite3Whe:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR $T121943[esp+44]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN104@sqlite3Whe
$LN145@sqlite3Whe:
	xor	ebx, ebx
$LN104@sqlite3Whe:
; Line 62267
	cmp	DWORD PTR [ebp+16], ebx
	je	SHORT $LN110@sqlite3Whe
; Line 62268
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	eax, DWORD PTR [ebp+24]
	mov	DWORD PTR $T121956[esp+44], eax
	jg	SHORT $LN108@sqlite3Whe
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN146@sqlite3Whe
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN147@sqlite3Whe
$LN146@sqlite3Whe:
	xor	ebx, ebx
$LN108@sqlite3Whe:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR $T121956[esp+44]
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN110@sqlite3Whe
$LN147@sqlite3Whe:
	xor	ebx, ebx
$LN110@sqlite3Whe:
; Line 62280
	test	DWORD PTR [ebp+4], 524288		; 00080000H
	je	$LN20@sqlite3Whe
; Line 62286
	mov	eax, DWORD PTR _pWInfo$[esp+40]
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, ebx
	mov	edx, DWORD PTR [ebp+16]
	mov	DWORD PTR _pIdx$101798[esp+44], edx
	jl	SHORT $LN116@sqlite3Whe
	cmp	eax, DWORD PTR [esi+12]
	jge	SHORT $LN116@sqlite3Whe
	mov	edx, DWORD PTR [esi+20]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN117@sqlite3Whe
$LN116@sqlite3Whe:
	xor	ecx, ecx
$LN117@sqlite3Whe:
; Line 62287
	mov	edx, DWORD PTR [esi+12]
; Line 62288
	cmp	eax, edx
	jge	SHORT $LN20@sqlite3Whe
	sub	edx, eax
	mov	DWORD PTR tv90[esp+44], edx
$LL153@sqlite3Whe:
; Line 62289
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, DWORD PTR [ebp+20]
	jne	SHORT $LN12@sqlite3Whe
; Line 62290
	mov	al, BYTE PTR [ecx]
	cmp	al, 3
	jne	SHORT $LN9@sqlite3Whe
; Line 62291
	mov	edx, DWORD PTR [ebp+24]
	mov	DWORD PTR [ecx+4], edx
; Line 62292
	mov	edx, DWORD PTR _pIdx$101798[esp+44]
	mov	edi, DWORD PTR [edx+4]
	xor	eax, eax
	cmp	edi, ebx
	jle	SHORT $LN12@sqlite3Whe
	mov	ebp, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [edx+8]
$LL8@sqlite3Whe:
; Line 62293
	cmp	ebp, DWORD PTR [edx]
	je	SHORT $LN125@sqlite3Whe
	add	eax, 1
	add	edx, 4
	cmp	eax, edi
	jl	SHORT $LL8@sqlite3Whe
	mov	ebp, DWORD PTR _pLevel$[esp+44]
	jmp	SHORT $LN12@sqlite3Whe
$LN125@sqlite3Whe:
; Line 62298
	mov	ebp, DWORD PTR _pLevel$[esp+44]
	mov	DWORD PTR [ecx+8], eax
	jmp	SHORT $LN12@sqlite3Whe
$LN9@sqlite3Whe:
	cmp	al, 37					; 00000025H
	jne	SHORT $LN3@sqlite3Whe
; Line 62299
	mov	eax, DWORD PTR [ebp+24]
	mov	DWORD PTR [ecx+4], eax
; Line 62300
	mov	BYTE PTR [ecx], 54			; 00000036H
	jmp	SHORT $LN12@sqlite3Whe
$LN3@sqlite3Whe:
; Line 62301
	cmp	al, 135					; 00000087H
	jne	SHORT $LN12@sqlite3Whe
; Line 62302
	mov	BYTE PTR [ecx], 21			; 00000015H
$LN12@sqlite3Whe:
; Line 62288
	add	ecx, 20					; 00000014H
	sub	DWORD PTR tv90[esp+44], 1
	jne	SHORT $LL153@sqlite3Whe
$LN20@sqlite3Whe:
; Line 62259
	mov	ecx, DWORD PTR _pTabList$[esp+44]
	mov	eax, DWORD PTR _i$[esp+44]
	movsx	edx, WORD PTR [ecx]
	add	eax, 1
	add	ebp, 76					; 0000004cH
	cmp	eax, edx
	mov	DWORD PTR _i$[esp+44], eax
	mov	DWORD PTR _pLevel$[esp+44], ebp
	jl	$LL21@sqlite3Whe
$LN19@sqlite3Whe:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 62312
	add	esp, 28					; 0000001cH
; Line 62310
	jmp	_whereInfoFree
_sqlite3WhereEnd ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@FMAEELCM@parser?5stack?5overflow?$AA@	; `string'
;	COMDAT ??_C@_0BG@FMAEELCM@parser?5stack?5overflow?$AA@
CONST	SEGMENT
??_C@_0BG@FMAEELCM@parser?5stack?5overflow?$AA@ DB 'parser stack overflow'
	DB	00H						; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _yyStackOverflow
_TEXT	SEGMENT
_yyStackOverflow PROC					; COMDAT
; _yypParser$ = esi
; Line 63776
	add	DWORD PTR [esi], -1
	mov	eax, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR [esi+8]
; Line 63782
	js	SHORT $LN1@yyStackOve
	npad	5
$LL2@yyStackOve:
	test	eax, eax
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR [esi+ecx*4+12]
	jl	SHORT $LN6@yyStackOve
	mov	al, BYTE PTR [edx+4]
	lea	ecx, DWORD PTR [edx+8]
	call	_yy_destructor
	add	DWORD PTR [esi], -1
	mov	eax, DWORD PTR [esi]
$LN6@yyStackOve:
	cmp	DWORD PTR [esi], 0
	jge	SHORT $LL2@yyStackOve
$LN1@yyStackOve:
; Line 63786
	push	OFFSET ??_C@_0BG@FMAEELCM@parser?5stack?5overflow?$AA@
	call	_sqlite3ErrorMsg
; Line 63787
	mov	BYTE PTR [edi+20], 1
	add	esp, 4
; Line 63788
	mov	DWORD PTR [esi+8], edi
	pop	edi
; Line 63789
	ret	0
_yyStackOverflow ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _yy_shift
_TEXT	SEGMENT
_yyNewState$ = 8					; size = 4
_yyMajor$ = 12						; size = 4
_yy_shift PROC						; COMDAT
; _yypParser$ = eax
; _yypMinor$ = ecx
; Line 63799
	push	esi
	mov	esi, eax
; Line 63801
	add	DWORD PTR [esi], 1
	mov	eax, DWORD PTR [esi]
; Line 63803
	cmp	eax, 100				; 00000064H
	jl	SHORT $LN1@yy_shift
; Line 63804
	call	_yyStackOverflow
	pop	esi
; Line 63830
	ret	0
$LN1@yy_shift:
; Line 63817
	mov	edx, DWORD PTR _yyNewState$[esp]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [esi+eax*4+12]
	mov	DWORD PTR [eax], edx
; Line 63818
	mov	edx, DWORD PTR _yyMajor$[esp]
	mov	DWORD PTR [eax+4], edx
; Line 63819
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+16], ecx
	pop	esi
; Line 63830
	ret	0
_yy_shift ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@CFIKCMLG@incomplete?5SQL?5statement?$AA@ ; `string'
;	COMDAT ??_C@_0BJ@CFIKCMLG@incomplete?5SQL?5statement?$AA@
CONST	SEGMENT
??_C@_0BJ@CFIKCMLG@incomplete?5SQL?5statement?$AA@ DB 'incomplete SQL sta'
	DB	'tement', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _yy_syntax_error
_TEXT	SEGMENT
_yyminor$ = 8						; size = 12
_yy_syntax_error PROC					; COMDAT
; _yypParser$ = esi
; Line 65229
	push	edi
; Line 65230
	mov	edi, DWORD PTR [esi+8]
; Line 65233
	cmp	BYTE PTR [edi+20], 0
	jne	SHORT $LN6@yy_syntax_
; Line 65234
	mov	eax, DWORD PTR _yyminor$[esp]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN2@yy_syntax_
; Line 65235
	lea	ecx, DWORD PTR _yyminor$[esp]
	push	ecx
	push	OFFSET ??_C@_0BI@CBJKLAIG@near?5?$CC?$CFT?$CC?3?5syntax?5error?$AA@
	call	_sqlite3ErrorMsg
; Line 65239
	mov	BYTE PTR [edi+20], 1
	add	esp, 8
; Line 65241
	mov	DWORD PTR [esi+8], edi
	pop	edi
; Line 65242
	ret	0
$LN2@yy_syntax_:
; Line 65237
	push	OFFSET ??_C@_0BJ@CFIKCMLG@incomplete?5SQL?5statement?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 65239
	mov	BYTE PTR [edi+20], 1
$LN6@yy_syntax_:
; Line 65241
	mov	DWORD PTR [esi+8], edi
	pop	edi
; Line 65242
	ret	0
_yy_syntax_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DP@FEHMPAL@Unable?5to?5delete?1modify?5user?9fun@ ; `string'
PUBLIC	??_C@_0P@OGLLBPDH@bad?5parameters?$AA@		; `string'
;	COMDAT ??_C@_0DP@FEHMPAL@Unable?5to?5delete?1modify?5user?9fun@
CONST	SEGMENT
??_C@_0DP@FEHMPAL@Unable?5to?5delete?1modify?5user?9fun@ DB 'Unable to de'
	DB	'lete/modify user-function due to active statements', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OGLLBPDH@bad?5parameters?$AA@
CONST	SEGMENT
??_C@_0P@OGLLBPDH@bad?5parameters?$AA@ DB 'bad parameters', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3CreateFunc
_TEXT	SEGMENT
_nName$ = 8						; size = 4
_db$ = 8						; size = 4
_zFunctionName$ = 12					; size = 4
_nArg$ = 16						; size = 4
_enc$ = 20						; size = 4
_pUserData$ = 24					; size = 4
_xFunc$ = 28						; size = 4
_xStep$ = 32						; size = 4
_xFinal$ = 36						; size = 4
_sqlite3CreateFunc PROC					; COMDAT
; Line 66504
	push	edi
; Line 66508
	mov	edi, DWORD PTR _db$[esp]
	test	edi, edi
	je	SHORT $LN25@sqlite3Cre@3
	mov	eax, DWORD PTR [edi+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN17@sqlite3Cre@3
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN17@sqlite3Cre@3
	cmp	eax, -264537850				; f03b7906H
	je	SHORT $LN17@sqlite3Cre@3
$LN25@sqlite3Cre@3:
; Line 66509
	mov	eax, 21					; 00000015H
	pop	edi
; Line 66572
	ret	0
$LN17@sqlite3Cre@3:
	push	ebx
; Line 66516
	mov	ebx, DWORD PTR _zFunctionName$[esp+4]
	test	ebx, ebx
	push	ebp
	push	esi
	je	SHORT $LN15@sqlite3Cre@3
	mov	edx, DWORD PTR _xFunc$[esp+12]
	test	edx, edx
	je	SHORT $LN24@sqlite3Cre@3
	cmp	DWORD PTR _xFinal$[esp+12], 0
	jne	SHORT $LN15@sqlite3Cre@3
$LN27@sqlite3Cre@3:
	cmp	DWORD PTR _xStep$[esp+12], 0
	jne	SHORT $LN15@sqlite3Cre@3
$LN10@sqlite3Cre@3:
	mov	esi, DWORD PTR _nArg$[esp+12]
	lea	eax, DWORD PTR [esi+1]
	cmp	eax, 128				; 00000080H
	ja	SHORT $LN15@sqlite3Cre@3
	mov	eax, ebx
	lea	ebp, DWORD PTR [eax+1]
	npad	4
$LL28@sqlite3Cre@3:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL28@sqlite3Cre@3
	sub	eax, ebp
	cmp	eax, 255				; 000000ffH
	mov	DWORD PTR _nName$[esp+12], eax
	jg	SHORT $LN15@sqlite3Cre@3
; Line 66529
	mov	ebp, DWORD PTR _enc$[esp+12]
	cmp	ebp, 4
	jne	SHORT $LN9@sqlite3Cre@3
; Line 66530
	mov	ebp, 2
	jmp	SHORT $LN7@sqlite3Cre@3
$LN24@sqlite3Cre@3:
; Line 66516
	cmp	DWORD PTR _xFinal$[esp+12], 0
	je	SHORT $LN27@sqlite3Cre@3
	cmp	DWORD PTR _xStep$[esp+12], 0
	jne	SHORT $LN10@sqlite3Cre@3
$LN15@sqlite3Cre@3:
; Line 66517
	push	OFFSET ??_C@_0P@OGLLBPDH@bad?5parameters?$AA@
	push	1
	mov	eax, edi
	call	_sqlite3Error
; Line 66518
	mov	eax, 1
	add	esp, 8
$LN29@sqlite3Cre@3:
	pop	esi
	pop	ebp
	pop	ebx
	pop	edi
; Line 66572
	ret	0
$LN9@sqlite3Cre@3:
; Line 66531
	cmp	ebp, 5
	jne	SHORT $LN7@sqlite3Cre@3
; Line 66534
	mov	ecx, DWORD PTR _xFinal$[esp+12]
	mov	eax, DWORD PTR _xStep$[esp+12]
	mov	ebp, DWORD PTR _pUserData$[esp+12]
	push	ecx
	push	eax
	push	edx
	push	ebp
	push	1
	push	esi
	push	ebx
	push	edi
	call	_sqlite3CreateFunc
	add	esp, 32					; 00000020H
; Line 66535
	test	eax, eax
	jne	SHORT $LN29@sqlite3Cre@3
; Line 66537
	mov	ecx, DWORD PTR _xFinal$[esp+12]
	mov	edx, DWORD PTR _xStep$[esp+12]
	mov	eax, DWORD PTR _xFunc$[esp+12]
	push	ecx
	push	edx
	push	eax
	push	ebp
	push	2
	push	esi
	push	ebx
	push	edi
	call	_sqlite3CreateFunc
	add	esp, 32					; 00000020H
; Line 66538
	test	eax, eax
	jne	SHORT $LN29@sqlite3Cre@3
; Line 66539
	mov	eax, DWORD PTR _nName$[esp+12]
	mov	ebp, 3
$LN7@sqlite3Cre@3:
; Line 66550
	push	0
	push	ebp
	push	esi
	push	ebx
	mov	ebx, eax
	mov	eax, edi
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
; Line 66551
	test	eax, eax
	je	SHORT $LN2@sqlite3Cre@3
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, ebp
	jne	SHORT $LN2@sqlite3Cre@3
	movsx	edx, WORD PTR [eax]
	cmp	edx, esi
	jne	SHORT $LN2@sqlite3Cre@3
; Line 66552
	cmp	DWORD PTR [edi+84], 0
; Line 66554
	mov	eax, edi
	je	SHORT $LN3@sqlite3Cre@3
	push	OFFSET ??_C@_0DP@FEHMPAL@Unable?5to?5delete?1modify?5user?9fun@
	push	5
	call	_sqlite3Error
	add	esp, 8
	pop	esi
	pop	ebp
	pop	ebx
; Line 66556
	mov	eax, 5
	pop	edi
; Line 66572
	ret	0
$LN3@sqlite3Cre@3:
; Line 66558
	call	_sqlite3ExpirePreparedStatements
$LN2@sqlite3Cre@3:
; Line 66562
	mov	eax, DWORD PTR _zFunctionName$[esp+12]
	mov	ebx, DWORD PTR _nName$[esp+12]
	push	1
	push	ebp
	push	esi
	push	eax
	mov	eax, edi
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
; Line 66563
	test	eax, eax
	je	SHORT $LN1@sqlite3Cre@3
; Line 66565
	mov	ecx, DWORD PTR _xFunc$[esp+12]
; Line 66566
	mov	edx, DWORD PTR _xStep$[esp+12]
	mov	DWORD PTR [eax+16], ecx
; Line 66567
	mov	ecx, DWORD PTR _xFinal$[esp+12]
	mov	DWORD PTR [eax+20], edx
; Line 66568
	mov	edx, DWORD PTR _pUserData$[esp+12]
	mov	BYTE PTR [eax+4], 0
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+8], edx
; Line 66569
	mov	WORD PTR [eax], si
$LN1@sqlite3Cre@3:
	pop	esi
	pop	ebp
	pop	ebx
; Line 66571
	xor	eax, eax
	pop	edi
; Line 66572
	ret	0
_sqlite3CreateFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_errmsg
_TEXT	SEGMENT
_db$ = 8						; size = 4
_sqlite3_errmsg PROC					; COMDAT
; Line 66796
	push	esi
; Line 66799
	mov	esi, DWORD PTR _db$[esp]
	test	esi, esi
	jne	SHORT $LN8@sqlite3_er@2
; Line 66800
	lea	eax, DWORD PTR [esi+7]
	pop	esi
	jmp	_sqlite3ErrStr
; Line 66802
$LN8@sqlite3_er@2:
	mov	eax, DWORD PTR [esi+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN7@sqlite3_er@2
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN7@sqlite3_er@2
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN2@sqlite3_er@2
$LN7@sqlite3_er@2:
	cmp	DWORD PTR [esi+12], 21			; 00000015H
	je	SHORT $LN2@sqlite3_er@2
; Line 66805
	mov	ecx, DWORD PTR [esi+140]
	mov	al, 1
	call	_sqlite3ValueText
; Line 66806
	test	eax, eax
	jne	SHORT $LN5@sqlite3_er@2
; Line 66807
	mov	eax, DWORD PTR [esi+12]
	pop	esi
	jmp	_sqlite3ErrStr
$LN2@sqlite3_er@2:
; Line 66803
	mov	eax, 21					; 00000015H
	pop	esi
	jmp	_sqlite3ErrStr
$LN5@sqlite3_er@2:
	pop	esi
; Line 66810
	ret	0
_sqlite3_errmsg ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EE@JLKKONPB@Unable?5to?5delete?1modify?5collatio@ ; `string'
PUBLIC	??_C@_0BB@ICOLFIAA@unknown?5encoding?$AA@	; `string'
;	COMDAT ??_C@_0EE@JLKKONPB@Unable?5to?5delete?1modify?5collatio@
CONST	SEGMENT
??_C@_0EE@JLKKONPB@Unable?5to?5delete?1modify?5collatio@ DB 'Unable to de'
	DB	'lete/modify collation sequence due to active statements', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ICOLFIAA@unknown?5encoding?$AA@
CONST	SEGMENT
??_C@_0BB@ICOLFIAA@unknown?5encoding?$AA@ DB 'unknown encoding', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _createCollation
_TEXT	SEGMENT
_enc2$ = -8						; size = 4
_pColl$122072 = -4					; size = 4
_db$ = 8						; size = 4
_zName$ = 12						; size = 4
_enc$ = 16						; size = 4
_pCtx$ = 20						; size = 4
_xCompare$ = 24						; size = 4
_xDel$ = 28						; size = 4
_createCollation PROC					; COMDAT
; Line 66881
	sub	esp, 8
	push	ebp
	mov	ebp, DWORD PTR _zName$[esp+8]
	push	esi
; Line 66885
	mov	esi, DWORD PTR _db$[esp+12]
	test	esi, esi
	je	SHORT $LN31@createColl
	mov	eax, DWORD PTR [esi+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN12@createColl
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN12@createColl
	cmp	eax, -264537850				; f03b7906H
	je	SHORT $LN12@createColl
$LN31@createColl:
	pop	esi
; Line 66886
	mov	eax, 21					; 00000015H
	pop	ebp
; Line 66946
	add	esp, 8
	ret	0
$LN12@createColl:
	push	ebx
; Line 66893
	mov	ebx, DWORD PTR _enc$[esp+16]
	and	ebx, -9					; fffffff7H
; Line 66894
	cmp	ebx, 4
	mov	DWORD PTR _enc2$[esp+20], ebx
	jne	SHORT $LN11@createColl
; Line 66895
	mov	DWORD PTR _enc2$[esp+20], 2
	mov	ebx, DWORD PTR _enc2$[esp+20]
$LN11@createColl:
; Line 66898
	test	ebx, -4					; fffffffcH
	je	SHORT $LN10@createColl
; Line 66899
	push	OFFSET ??_C@_0BB@ICOLFIAA@unknown?5encoding?$AA@
	push	1
	mov	eax, esi
	call	_sqlite3Error
	add	esp, 8
	pop	ebx
	pop	esi
; Line 66900
	mov	eax, 1
	pop	ebp
; Line 66946
	add	esp, 8
	ret	0
$LN10@createColl:
; Line 66907
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL32@createColl:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL32@createColl
	sub	eax, edx
	test	ebp, ebp
	je	SHORT $LN21@createColl
	push	0
	push	ebp
	push	esi
	call	_findCollSeqEntry
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN20@createColl
$LN21@createColl:
	mov	eax, DWORD PTR [esi+28]
$LN20@createColl:
	test	eax, eax
	je	$LN4@createColl
	movzx	ecx, bl
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	edx, DWORD PTR [eax+ecx*4-20]
; Line 66908
	test	edx, edx
	mov	DWORD PTR _pColl$122072[esp+20], edx
	je	$LN4@createColl
	cmp	DWORD PTR [edx+12], 0
	je	$LN4@createColl
; Line 66909
	cmp	DWORD PTR [esi+84], 0
; Line 66911
	mov	eax, esi
	je	SHORT $LN8@createColl
	push	OFFSET ??_C@_0EE@JLKKONPB@Unable?5to?5delete?1modify?5collatio@
	push	5
	call	_sqlite3Error
	add	esp, 8
	pop	ebx
	pop	esi
; Line 66912
	mov	eax, 5
	pop	ebp
; Line 66946
	add	esp, 8
	ret	0
$LN8@createColl:
; Line 66914
	call	_sqlite3ExpirePreparedStatements
; Line 66922
	movzx	edx, BYTE PTR [edx+4]
	and	edx, -9					; fffffff7H
	cmp	edx, ebx
	jne	SHORT $LN4@createColl
; Line 66923
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
$LL33@createColl:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL33@createColl
	sub	eax, edx
	push	edi
	add	esi, 248				; 000000f8H
	mov	edi, eax
	mov	ebx, ebp
	call	_sqlite3HashFind
	lea	esi, DWORD PTR [eax+16]
	mov	edi, 3
$LL6@createColl:
; Line 66927
	mov	al, BYTE PTR [esi-12]
	mov	ecx, DWORD PTR _pColl$122072[esp+24]
	cmp	al, BYTE PTR [ecx+4]
	jne	SHORT $LN5@createColl
; Line 66928
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@createColl
; Line 66929
	mov	edx, DWORD PTR [esi-8]
	push	edx
	call	eax
	add	esp, 4
$LN2@createColl:
; Line 66931
	mov	DWORD PTR [esi-4], 0
$LN5@createColl:
; Line 66925
	add	esi, 20					; 00000014H
	sub	edi, 1
	jne	SHORT $LL6@createColl
	mov	ebx, DWORD PTR _enc2$[esp+24]
	mov	esi, DWORD PTR _db$[esp+20]
	pop	edi
$LN4@createColl:
; Line 66937
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL34@createColl:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL34@createColl
	sub	eax, edx
	test	ebp, ebp
	je	SHORT $LN26@createColl
	push	1
	push	ebp
	push	esi
	call	_findCollSeqEntry
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN25@createColl
$LN26@createColl:
	mov	eax, DWORD PTR [esi+28]
$LN25@createColl:
	test	eax, eax
	je	SHORT $LN1@createColl
	movzx	ecx, bl
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax+ecx*4-20]
; Line 66938
	test	eax, eax
	je	SHORT $LN1@createColl
; Line 66940
	mov	ecx, DWORD PTR _pCtx$[esp+16]
	mov	edx, DWORD PTR _xCompare$[esp+16]
	mov	DWORD PTR [eax+8], ecx
; Line 66942
	mov	cl, BYTE PTR _enc$[esp+16]
	and	cl, 8
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR _xDel$[esp+16]
	or	cl, bl
	mov	DWORD PTR [eax+16], edx
	mov	BYTE PTR [eax+4], cl
$LN1@createColl:
; Line 66944
	push	0
	push	0
	mov	eax, esi
	call	_sqlite3Error
	add	esp, 8
	pop	ebx
	pop	esi
; Line 66945
	xor	eax, eax
	pop	ebp
; Line 66946
	add	esp, 8
	ret	0
_createCollation ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_clear_bindings
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_sqlite3_clear_bindings PROC				; COMDAT
; Line 67455
	push	esi
; Line 67458
	mov	esi, DWORD PTR _pStmt$[esp]
	xor	ecx, ecx
	push	edi
	lea	edi, DWORD PTR [ecx+1]
	npad	5
$LL3@sqlite3_cl:
	push	esi
	call	_sqlite3_bind_parameter_count
	add	esp, 4
	cmp	edi, eax
	jg	SHORT $LN10@sqlite3_cl
; Line 67459
	mov	eax, edi
	call	_vdbeUnbind
	mov	ecx, eax
	add	edi, 1
	test	ecx, ecx
	je	SHORT $LL3@sqlite3_cl
$LN10@sqlite3_cl:
	pop	edi
; Line 67461
	mov	eax, ecx
	pop	esi
; Line 67462
	ret	0
_sqlite3_clear_bindings ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _isDate
_TEXT	SEGMENT
_argc$ = 8						; size = 4
_isDate	PROC						; COMDAT
; _argv$ = edi
; _p$ = eax
; Line 6940
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _argc$[esp+4]
; Line 6943
	test	ebp, ebp
	mov	ebx, eax
	jne	SHORT $LN8@isDate
	lea	eax, DWORD PTR [ebp+1]
	pop	ebp
	pop	ebx
; Line 6953
	ret	0
$LN8@isDate:
; Line 6944
	mov	ecx, DWORD PTR [edi]
	push	esi
	mov	al, 1
	call	_sqlite3ValueText
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN6@isDate
	mov	eax, ebx
	call	_parseDateOrTime
	test	eax, eax
	jne	SHORT $LN6@isDate
; Line 6947
	lea	esi, DWORD PTR [eax+1]
	cmp	ebp, esi
	jle	SHORT $LN3@isDate
$LL18@isDate:
; Line 6948
	mov	ecx, DWORD PTR [edi+esi*4]
	mov	al, 1
	call	_sqlite3ValueText
	test	eax, eax
	je	SHORT $LN6@isDate
	mov	ecx, eax
	call	_parseModifier
	test	eax, eax
	jne	SHORT $LN6@isDate
	add	esi, 1
	cmp	esi, ebp
	jl	SHORT $LL18@isDate
$LN3@isDate:
	pop	esi
	pop	ebp
; Line 6952
	xor	eax, eax
	pop	ebx
; Line 6953
	ret	0
$LN6@isDate:
	pop	esi
	pop	ebp
; Line 6945
	mov	eax, 1
	pop	ebx
; Line 6953
	ret	0
_isDate	ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _juliandayFunc
_TEXT	SEGMENT
_x$ = -48						; size = 48
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_juliandayFunc PROC					; COMDAT
; Line 6972
	mov	eax, DWORD PTR _argc$[esp-4]
	sub	esp, 48					; 00000030H
	push	edi
	mov	edi, DWORD PTR _argv$[esp+48]
	push	eax
	lea	eax, DWORD PTR _x$[esp+56]
	call	_isDate
	add	esp, 4
	test	eax, eax
	pop	edi
	jne	SHORT $LN1@juliandayF
	push	esi
; Line 6973
	lea	esi, DWORD PTR _x$[esp+52]
	call	_computeJD
; Line 6974
	fld	QWORD PTR _x$[esp+52]
	mov	ecx, DWORD PTR _context$[esp+48]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	ecx
	call	_sqlite3_result_double
	add	esp, 12					; 0000000cH
	pop	esi
$LN1@juliandayF:
; Line 6976
	add	esp, 48					; 00000030H
	ret	0
_juliandayFunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@NGNOHJIK@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BO@NGNOHJIK@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_0BO@NGNOHJIK@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?$AA@ DB '%'
	DB	'04d-%02d-%02d %02d:%02d:%02d', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _datetimeFunc
_TEXT	SEGMENT
_x$ = -152						; size = 48
_zBuf$81349 = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_datetimeFunc PROC					; COMDAT
; Line 6987
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+152], eax
; Line 6989
	mov	eax, DWORD PTR _argc$[esp+148]
	push	esi
	mov	esi, DWORD PTR _context$[esp+152]
	push	edi
	mov	edi, DWORD PTR _argv$[esp+156]
	push	eax
	lea	eax, DWORD PTR _x$[esp+164]
	call	_isDate
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@datetimeFu
; Line 6991
	lea	edi, DWORD PTR _x$[esp+160]
	call	_computeYMD
	mov	eax, edi
	call	_computeHMS
; Line 6993
	fld	QWORD PTR _x$[esp+192]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _x$[esp+184]
	mov	edx, DWORD PTR _x$[esp+180]
	push	eax
	mov	eax, DWORD PTR _x$[esp+180]
	push	ecx
	mov	ecx, DWORD PTR _x$[esp+180]
	push	edx
	mov	edx, DWORD PTR _x$[esp+180]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0BO@NGNOHJIK@?$CF04d?9?$CF02d?9?$CF02d?5?$CF02d?3?$CF02d?3?$CF02d?$AA@
	lea	eax, DWORD PTR _zBuf$81349[esp+188]
	push	eax
	push	100					; 00000064H
	call	_sqlite3_snprintf
; Line 6994
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	lea	ecx, DWORD PTR _zBuf$81349[esp+200]
	mov	eax, ecx
	add	esp, 40					; 00000028H
	mov	DWORD PTR [esi+16], ecx
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	lea	edx, DWORD PTR [eax+1]
$LL24@datetimeFu:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL24@datetimeFu
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
$LN8@datetimeFu:
; Line 6996
	mov	ecx, DWORD PTR __$ArrayPad$[esp+160]
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 152				; 00000098H
	ret	0
_datetimeFunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@ DB '%02d:%02d:%02d', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _timeFunc
_TEXT	SEGMENT
_x$ = -152						; size = 48
_zBuf$81363 = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_timeFunc PROC						; COMDAT
; Line 7007
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+152], eax
; Line 7009
	mov	eax, DWORD PTR _argc$[esp+148]
	push	esi
	mov	esi, DWORD PTR _context$[esp+152]
	push	edi
	mov	edi, DWORD PTR _argv$[esp+156]
	push	eax
	lea	eax, DWORD PTR _x$[esp+164]
	call	_isDate
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@timeFunc
; Line 7011
	lea	eax, DWORD PTR _x$[esp+160]
	call	_computeHMS
; Line 7012
	fld	QWORD PTR _x$[esp+192]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _x$[esp+184]
	mov	edx, DWORD PTR _x$[esp+180]
	push	eax
	push	ecx
	push	edx
	push	OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@
	lea	eax, DWORD PTR _zBuf$81363[esp+176]
	push	eax
	push	100					; 00000064H
	call	_sqlite3_snprintf
; Line 7013
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	lea	ecx, DWORD PTR _zBuf$81363[esp+188]
	mov	eax, ecx
	add	esp, 28					; 0000001cH
	mov	DWORD PTR [esi+16], ecx
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL22@timeFunc:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL22@timeFunc
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
$LN6@timeFunc:
; Line 7015
	mov	ecx, DWORD PTR __$ArrayPad$[esp+160]
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 152				; 00000098H
	ret	0
_timeFunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@MCDGMPHH@?$CF04d?9?$CF02d?9?$CF02d?$AA@ ; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0P@MCDGMPHH@?$CF04d?9?$CF02d?9?$CF02d?$AA@
CONST	SEGMENT
??_C@_0P@MCDGMPHH@?$CF04d?9?$CF02d?9?$CF02d?$AA@ DB '%04d-%02d-%02d', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _dateFunc
_TEXT	SEGMENT
_x$ = -152						; size = 48
_zBuf$81377 = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_dateFunc PROC						; COMDAT
; Line 7026
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+152], eax
; Line 7028
	mov	eax, DWORD PTR _argc$[esp+148]
	push	esi
	mov	esi, DWORD PTR _context$[esp+152]
	push	edi
	mov	edi, DWORD PTR _argv$[esp+156]
	push	eax
	lea	eax, DWORD PTR _x$[esp+164]
	call	_isDate
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@dateFunc
; Line 7030
	lea	edi, DWORD PTR _x$[esp+160]
	call	_computeYMD
; Line 7031
	mov	ecx, DWORD PTR _x$[esp+176]
	mov	edx, DWORD PTR _x$[esp+172]
	mov	eax, DWORD PTR _x$[esp+168]
	push	ecx
	push	edx
	push	eax
	push	OFFSET ??_C@_0P@MCDGMPHH@?$CF04d?9?$CF02d?9?$CF02d?$AA@
	lea	ecx, DWORD PTR _zBuf$81377[esp+176]
	push	ecx
	push	100					; 00000064H
	call	_sqlite3_snprintf
; Line 7032
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	lea	edx, DWORD PTR _zBuf$81377[esp+188]
	mov	eax, edx
	mov	DWORD PTR [esi+16], edx
	add	esp, 28					; 0000001cH
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	lea	edx, DWORD PTR [eax+1]
$LL22@dateFunc:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL22@dateFunc
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
$LN6@dateFunc:
; Line 7034
	mov	ecx, DWORD PTR __$ArrayPad$[esp+160]
	pop	edi
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 152				; 00000098H
	ret	0
_dateFunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_04OCCELDNI@?$CF04d?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_05CFGAKADK@?$CF?416g?$AA@			; `string'
PUBLIC	??_C@_04OHGLKFFN@?$CF03d?$AA@			; `string'
PUBLIC	??_C@_06IAGKDDNE@?$CF06?43f?$AA@		; `string'
PUBLIC	??_C@_04OGKJMPGK@?$CF02d?$AA@			; `string'
PUBLIC	__real@404dffdf3b645a1d
PUBLIC	_context$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_04OCCELDNI@?$CF04d?$AA@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d?$AA@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFGAKADK@?$CF?416g?$AA@
CONST	SEGMENT
??_C@_05CFGAKADK@?$CF?416g?$AA@ DB '%.16g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d?$AA@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d?$AA@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAGKDDNE@?$CF06?43f?$AA@
CONST	SEGMENT
??_C@_06IAGKDDNE@?$CF06?43f?$AA@ DB '%06.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OGKJMPGK@?$CF02d?$AA@
CONST	SEGMENT
??_C@_04OGKJMPGK@?$CF02d?$AA@ DB '%02d', 00H		; `string'
CONST	ENDS
;	COMDAT __real@404dffdf3b645a1d
CONST	SEGMENT
__real@404dffdf3b645a1d DQ 0404dffdf3b645a1dr	; 59.999
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _strftimeFunc
_TEXT	SEGMENT
tv704 = -208						; size = 4
_zFmt$ = -208						; size = 4
_context$GSCopy$ = -204					; size = 4
_x$ = -200						; size = 48
_y$81436 = -152						; size = 48
_zBuf$ = -104						; size = 100
__$ArrayPad$ = -4					; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_strftimeFunc PROC					; COMDAT
; Line 7059
	sub	esp, 208				; 000000d0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+208], eax
	push	ebx
	mov	ebx, DWORD PTR _context$[esp+208]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _argv$[esp+220]
; Line 7064
	mov	ecx, DWORD PTR [edi]
	mov	al, 1
	mov	DWORD PTR _context$GSCopy$[esp+224], ebx
	call	_sqlite3ValueText
	mov	esi, eax
; Line 7066
	xor	ebp, ebp
	cmp	esi, ebp
	mov	DWORD PTR _zFmt$[esp+224], esi
	je	$LN42@strftimeFu
	mov	eax, DWORD PTR _argc$[esp+220]
	add	eax, -1
	push	eax
	add	edi, 4
	lea	eax, DWORD PTR _x$[esp+228]
	call	_isDate
	add	esp, 4
	test	eax, eax
	jne	$LN42@strftimeFu
; Line 7067
	xor	ecx, ecx
	cmp	BYTE PTR [esi], al
	lea	edi, DWORD PTR [ebp+1]
	je	SHORT $LN84@strftimeFu
	npad	2
$LL41@strftimeFu:
; Line 7068
	cmp	BYTE PTR [ecx+esi], 37			; 00000025H
	jne	SHORT $LN40@strftimeFu
; Line 7069
	movsx	edx, BYTE PTR [ecx+esi+1]
	add	edx, -37				; ffffffdbH
	cmp	edx, 82					; 00000052H
	ja	$LN42@strftimeFu
	movzx	edx, BYTE PTR $LN83@strftimeFu[edx]
	jmp	DWORD PTR $LN126@strftimeFu[edx*4]
$LN35@strftimeFu:
; Line 7076
	add	edi, 1
; Line 7080
	jmp	SHORT $LN122@strftimeFu
$LN33@strftimeFu:
; Line 7082
	add	edi, 8
; Line 7083
	jmp	SHORT $LN122@strftimeFu
$LN32@strftimeFu:
; Line 7085
	add	edi, 3
; Line 7086
	jmp	SHORT $LN122@strftimeFu
$LN30@strftimeFu:
; Line 7092
	add	edi, 50					; 00000032H
$LN122@strftimeFu:
	adc	eax, ebp
$LN94@strftimeFu:
; Line 7097
	add	ecx, 1
$LN40@strftimeFu:
; Line 7067
	add	ecx, 1
	add	edi, 1
	adc	eax, ebp
	cmp	BYTE PTR [ecx+esi], 0
	jne	SHORT $LL41@strftimeFu
; Line 7100
	cmp	eax, ebp
	ja	SHORT $LN85@strftimeFu
	jb	SHORT $LN84@strftimeFu
	cmp	edi, 100				; 00000064H
	jae	SHORT $LN28@strftimeFu
$LN84@strftimeFu:
; Line 7101
	lea	ebx, DWORD PTR _zBuf$[esp+224]
	jmp	SHORT $LN24@strftimeFu
$LN28@strftimeFu:
; Line 7102
	cmp	eax, ebp
	ja	SHORT $LN85@strftimeFu
	cmp	edi, 1000000000				; 3b9aca00H
	jbe	SHORT $LN26@strftimeFu
$LN85@strftimeFu:
; Line 7103
	lea	esi, DWORD PTR [ebx+8]
	push	esi
	call	_sqlite3VdbeMemRelease
	lea	eax, DWORD PTR [esi+32]
	mov	WORD PTR [esi+24], 2576			; 00000a10H
	mov	BYTE PTR [esi+26], 4
	mov	DWORD PTR [esi+20], ebp
	mov	DWORD PTR [esi], 1000000001		; 3b9aca01H
	mov	DWORD PTR [esi+4], ebp
	mov	DWORD PTR [esi+16], eax
	mov	BYTE PTR [esi+27], 1
; Line 7104
	jmp	$LN124@strftimeFu
$LN26@strftimeFu:
; Line 7106
	call	_sqlite3Malloc
	mov	ebx, eax
; Line 7107
	cmp	ebx, ebp
	je	$LN42@strftimeFu
$LN24@strftimeFu:
; Line 7109
	lea	esi, DWORD PTR _x$[esp+224]
	call	_computeJD
; Line 7110
	mov	edi, esi
	call	_computeYMD
	mov	eax, esi
	call	_computeHMS
; Line 7111
	mov	eax, DWORD PTR _zFmt$[esp+224]
	cmp	BYTE PTR [eax], 0
	je	$LN21@strftimeFu
	fld	QWORD PTR _x$[esp+256]
	mov	edi, eax
	fld	QWORD PTR _x$[esp+224]
	fld	QWORD PTR __real@404dffdf3b645a1d
	jmp	SHORT $LN23@strftimeFu
	npad	6
$LL92@strftimeFu:
; Line 7109
	fld	QWORD PTR __real@404dffdf3b645a1d
	fld	QWORD PTR _x$[esp+224]
	fld	QWORD PTR _x$[esp+256]
	fxch	ST(2)
$LN23@strftimeFu:
; Line 7112
	mov	al, BYTE PTR [edi]
	cmp	al, 37					; 00000025H
	je	SHORT $LN20@strftimeFu
; Line 7113
	mov	BYTE PTR [ebx+ebp], al
; Line 7114
	jmp	$LN125@strftimeFu
$LN20@strftimeFu:
; Line 7116
	movsx	eax, BYTE PTR [edi+1]
	add	edi, 1
	add	eax, -37				; ffffffdbH
	cmp	eax, 82					; 00000052H
	mov	DWORD PTR tv704[esp+224], edi
	ja	$LN102@strftimeFu
	movzx	ecx, BYTE PTR $LN86@strftimeFu[eax]
	jmp	DWORD PTR $LN127@strftimeFu[ecx*4]
$LN109@strftimeFu:
; Line 7117
	mov	edx, DWORD PTR _x$[esp+240]
; Line 7162
	fstp	ST(1)
	push	edx
	fstp	ST(1)
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	fstp	ST(0)
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	push	3
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
	add	ebp, 2
	jmp	$LN22@strftimeFu
$LN114@strftimeFu:
	fstp	ST(1)
	fld	ST(1)
	fxch	ST(2)
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN116@strftimeFu
; Line 7120
	fstp	ST(1)
	jmp	SHORT $LN14@strftimeFu
$LN116@strftimeFu:
	fstp	ST(0)
$LN14@strftimeFu:
; Line 7121
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_06IAGKDDNE@?$CF06?43f?$AA@
	lea	esi, DWORD PTR [ebx+ebp]
	push	esi
	push	7
	call	_sqlite3_snprintf
; Line 7122
	mov	eax, esi
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL87@strftimeFu:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL87@strftimeFu
	sub	eax, edx
	add	ebp, eax
; Line 7123
	jmp	$LN22@strftimeFu
$LN108@strftimeFu:
; Line 7125
	mov	ecx, DWORD PTR _x$[esp+244]
; Line 7162
	fstp	ST(1)
	push	ecx
	fstp	ST(1)
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	fstp	ST(0)
	lea	edx, DWORD PTR [ebx+ebp]
	push	edx
	push	3
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
	add	ebp, 2
	jmp	$LN22@strftimeFu
$LN107@strftimeFu:
	fstp	ST(1)
	mov	ecx, 12					; 0000000cH
	lea	esi, DWORD PTR _x$[esp+224]
	fstp	ST(1)
	lea	edi, DWORD PTR _y$81436[esp+224]
	fstp	ST(0)
	rep movsd
	mov	eax, 1
	lea	esi, DWORD PTR _y$81436[esp+224]
	mov	BYTE PTR _y$81436[esp+266], 0
	mov	DWORD PTR _y$81436[esp+236], eax
	mov	DWORD PTR _y$81436[esp+240], eax
	call	_computeJD
	fld	QWORD PTR _x$[esp+224]
	fld	QWORD PTR _y$81436[esp+224]
	fsubr	ST(0), ST(1)
	fld	QWORD PTR __real@3fe0000000000000
	fadd	ST(1), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
	mov	esi, eax
	mov	eax, DWORD PTR tv704[esp+224]
	cmp	BYTE PTR [eax], 87			; 00000057H
	jne	SHORT $LN120@strftimeFu
	faddp	ST(1), ST(0)
	call	__ftol2_sse
	cdq
	mov	ecx, 7
	idiv	ecx
	mov	eax, -1840700269			; 92492493H
	sub	esi, edx
	add	esi, ecx
	imul	esi
	add	edx, esi
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	push	eax
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	lea	ecx, DWORD PTR [ebx+ebp]
	push	ecx
	push	3
	call	_sqlite3_snprintf
	mov	edi, DWORD PTR tv704[esp+240]
	add	esp, 16					; 00000010H
	add	ebp, 2
	jmp	$LN22@strftimeFu
$LN120@strftimeFu:
; Line 7141
	add	esi, 1
	fstp	ST(1)
	push	esi
	fstp	ST(0)
	push	OFFSET ??_C@_04OHGLKFFN@?$CF03d?$AA@
	lea	edx, DWORD PTR [ebx+ebp]
	push	edx
	push	4
	call	_sqlite3_snprintf
; Line 7144
	mov	edi, DWORD PTR tv704[esp+240]
	add	esp, 16					; 00000010H
	add	ebp, 3
	jmp	$LN22@strftimeFu
$LN113@strftimeFu:
; Line 7162
	fstp	ST(2)
	sub	esp, 8
	fstp	ST(1)
	lea	esi, DWORD PTR [ebx+ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_05CFGAKADK@?$CF?416g?$AA@
	push	esi
	push	20					; 00000014H
	call	_sqlite3_snprintf
	mov	eax, esi
	add	esp, 20					; 00000014H
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL88@strftimeFu:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL88@strftimeFu
	sub	eax, edx
	add	ebp, eax
	jmp	$LN22@strftimeFu
$LN106@strftimeFu:
; Line 7151
	mov	eax, DWORD PTR _x$[esp+236]
; Line 7162
	fstp	ST(1)
	push	eax
	fstp	ST(1)
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	fstp	ST(0)
	lea	ecx, DWORD PTR [ebx+ebp]
	push	ecx
	push	3
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
	add	ebp, 2
	jmp	$LN22@strftimeFu
$LN105@strftimeFu:
; Line 7152
	mov	edx, DWORD PTR _x$[esp+248]
; Line 7162
	fstp	ST(1)
	push	edx
	fstp	ST(1)
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	fstp	ST(0)
	lea	eax, DWORD PTR [ebx+ebp]
	push	eax
	push	3
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
	add	ebp, 2
	jmp	$LN22@strftimeFu
$LN112@strftimeFu:
	fstp	ST(2)
	lea	esi, DWORD PTR [ebx+ebp]
	fstp	ST(1)
	fsub	QWORD PTR __real@41429ec5c0000000
	fmul	QWORD PTR __real@40f5180000000000
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	push	esi
	push	30					; 0000001eH
	call	_sqlite3_snprintf
	mov	eax, esi
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
$LL89@strftimeFu:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL89@strftimeFu
	sub	eax, edx
	add	ebp, eax
	jmp	$LN22@strftimeFu
$LN111@strftimeFu:
	fstp	ST(1)
	fstp	ST(0)
	call	__ftol2_sse
	push	eax
	push	OFFSET ??_C@_04OGKJMPGK@?$CF02d?$AA@
	lea	ecx, DWORD PTR [ebx+ebp]
	push	ecx
	push	3
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
	add	ebp, 2
	jmp	SHORT $LN22@strftimeFu
$LN110@strftimeFu:
	fstp	ST(2)
	fstp	ST(1)
	fadd	QWORD PTR __real@3ff8000000000000
	call	__ftol2_sse
	cdq
	mov	ecx, 7
	idiv	ecx
	add	dl, 48					; 00000030H
	mov	BYTE PTR [ebx+ebp], dl
	add	ebp, 1
	jmp	SHORT $LN22@strftimeFu
$LN104@strftimeFu:
; Line 7161
	mov	edx, DWORD PTR _x$[esp+232]
; Line 7162
	fstp	ST(1)
	push	edx
	fstp	ST(1)
	push	OFFSET ??_C@_04OCCELDNI@?$CF04d?$AA@
	fstp	ST(0)
	lea	esi, DWORD PTR [ebx+ebp]
	push	esi
	push	5
	call	_sqlite3_snprintf
	mov	eax, esi
	add	esp, 16					; 00000010H
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL90@strftimeFu:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL90@strftimeFu
	sub	eax, edx
	add	ebp, eax
	jmp	SHORT $LN22@strftimeFu
$LN103@strftimeFu:
	mov	BYTE PTR [ebx+ebp], 37			; 00000025H
$LN125@strftimeFu:
	add	ebp, 1
$LN102@strftimeFu:
	fstp	ST(1)
	fstp	ST(1)
	fstp	ST(0)
$LN22@strftimeFu:
	add	edi, 1
	cmp	BYTE PTR [edi], 0
	jne	$LL92@strftimeFu
$LN21@strftimeFu:
; Line 7167
	mov	esi, DWORD PTR _context$GSCopy$[esp+224]
	add	esi, 8
	push	esi
	mov	BYTE PTR [ebx+ebp], 0
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN70@strftimeFu
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	jmp	SHORT $LN57@strftimeFu
$LN70@strftimeFu:
	mov	eax, ebx
	mov	DWORD PTR [esi+16], ebx
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 258			; 00000102H
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL91@strftimeFu:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL91@strftimeFu
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
$LN57@strftimeFu:
; Line 7168
	lea	eax, DWORD PTR _zBuf$[esp+224]
	cmp	ebx, eax
	je	SHORT $LN42@strftimeFu
; Line 7169
	test	ebx, ebx
	je	SHORT $LN42@strftimeFu
	push	ebx
	call	_free
$LN124@strftimeFu:
	add	esp, 4
$LN42@strftimeFu:
; Line 7171
	mov	ecx, DWORD PTR __$ArrayPad$[esp+224]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 208				; 000000d0H
	ret	0
	npad	3
$LN126@strftimeFu:
	DD	$LN94@strftimeFu
	DD	$LN35@strftimeFu
	DD	$LN30@strftimeFu
	DD	$LN33@strftimeFu
	DD	$LN32@strftimeFu
	DD	$LN42@strftimeFu
$LN83@strftimeFu:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	2
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	4
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	0
	npad	1
$LN127@strftimeFu:
	DD	$LN103@strftimeFu
	DD	$LN108@strftimeFu
	DD	$LN113@strftimeFu
	DD	$LN105@strftimeFu
	DD	$LN111@strftimeFu
	DD	$LN107@strftimeFu
	DD	$LN104@strftimeFu
	DD	$LN109@strftimeFu
	DD	$LN114@strftimeFu
	DD	$LN106@strftimeFu
	DD	$LN112@strftimeFu
	DD	$LN110@strftimeFu
	DD	$LN102@strftimeFu
$LN86@strftimeFu:
	DB	0
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	1
	DB	12					; 0000000cH
	DB	2
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	3
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	4
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	5
	DB	12					; 0000000cH
	DB	6
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	7
	DB	12					; 0000000cH
	DB	8
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	5
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	9
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	10					; 0000000aH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	12					; 0000000cH
	DB	11					; 0000000bH
_strftimeFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ctimeFunc
_TEXT	SEGMENT
_pVal$ = -4						; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_ctimeFunc PROC						; COMDAT
; Line 7182
	push	ecx
	push	esi
; Line 7183
	call	_sqlite3ValueNew
	mov	esi, eax
; Line 7184
	test	esi, esi
	mov	DWORD PTR _pVal$[esp+8], esi
	je	SHORT $LN48@ctimeFunc
; Line 7185
	push	esi
	call	_sqlite3VdbeMemRelease
; Line 7186
	mov	ecx, DWORD PTR _context$[esp+8]
	mov	eax, 3
	mov	BYTE PTR [esi+26], al
	mov	DWORD PTR [esi+20], eax
	lea	eax, DWORD PTR _pVal$[esp+12]
	push	eax
	push	1
	push	ecx
	mov	DWORD PTR [esi+16], OFFSET ??_C@_03CGLHMDPP@now?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	WORD PTR [esi+24], 162			; 000000a2H
	call	_timeFunc
; Line 7187
	mov	esi, DWORD PTR _pVal$[esp+24]
	add	esp, 16					; 00000010H
	test	esi, esi
	je	SHORT $LN48@ctimeFunc
	push	esi
	call	_sqlite3VdbeMemRelease
	push	esi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	call	_free
	add	esp, 8
$LN48@ctimeFunc:
	pop	esi
; Line 7189
	pop	ecx
	ret	0
_ctimeFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _cdateFunc
_TEXT	SEGMENT
_pVal$ = -4						; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_cdateFunc PROC						; COMDAT
; Line 7200
	push	ecx
	push	esi
; Line 7201
	call	_sqlite3ValueNew
	mov	esi, eax
; Line 7202
	test	esi, esi
	mov	DWORD PTR _pVal$[esp+8], esi
	je	SHORT $LN48@cdateFunc
; Line 7203
	push	esi
	call	_sqlite3VdbeMemRelease
; Line 7204
	mov	ecx, DWORD PTR _context$[esp+8]
	mov	eax, 3
	mov	BYTE PTR [esi+26], al
	mov	DWORD PTR [esi+20], eax
	lea	eax, DWORD PTR _pVal$[esp+12]
	push	eax
	push	1
	push	ecx
	mov	DWORD PTR [esi+16], OFFSET ??_C@_03CGLHMDPP@now?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	WORD PTR [esi+24], 162			; 000000a2H
	call	_dateFunc
; Line 7205
	mov	esi, DWORD PTR _pVal$[esp+24]
	add	esp, 16					; 00000010H
	test	esi, esi
	je	SHORT $LN48@cdateFunc
	push	esi
	call	_sqlite3VdbeMemRelease
	push	esi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	call	_free
	add	esp, 8
$LN48@cdateFunc:
	pop	esi
; Line 7207
	pop	ecx
	ret	0
_cdateFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ctimestampFunc
_TEXT	SEGMENT
_pVal$ = -4						; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_ctimestampFunc PROC					; COMDAT
; Line 7218
	push	ecx
	push	esi
; Line 7219
	call	_sqlite3ValueNew
	mov	esi, eax
; Line 7220
	test	esi, esi
	mov	DWORD PTR _pVal$[esp+8], esi
	je	SHORT $LN48@ctimestamp
; Line 7221
	push	esi
	call	_sqlite3VdbeMemRelease
; Line 7222
	mov	ecx, DWORD PTR _context$[esp+8]
	mov	eax, 3
	mov	BYTE PTR [esi+26], al
	mov	DWORD PTR [esi+20], eax
	lea	eax, DWORD PTR _pVal$[esp+12]
	push	eax
	push	1
	push	ecx
	mov	DWORD PTR [esi+16], OFFSET ??_C@_03CGLHMDPP@now?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	WORD PTR [esi+24], 162			; 000000a2H
	call	_datetimeFunc
; Line 7223
	mov	esi, DWORD PTR _pVal$[esp+24]
	add	esp, 16					; 00000010H
	test	esi, esi
	je	SHORT $LN48@ctimestamp
	push	esi
	call	_sqlite3VdbeMemRelease
	push	esi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	call	_free
	add	esp, 8
$LN48@ctimestamp:
	pop	esi
; Line 7225
	pop	ecx
	ret	0
_ctimestampFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3RegisterDateTimeFunctions
_TEXT	SEGMENT
_sqlite3RegisterDateTimeFunctions PROC			; COMDAT
; _db$ = edi
; Line 7284
	push	esi
; Line 7302
	xor	esi, esi
$LL3@sqlite3Reg@2:
; Line 7304
	mov	eax, DWORD PTR ?aFuncs@?1??sqlite3RegisterDateTimeFunctions@@9@9[esi+8]
	mov	ecx, DWORD PTR ?aFuncs@?1??sqlite3RegisterDateTimeFunctions@@9@9[esi+4]
	mov	edx, DWORD PTR ?aFuncs@?1??sqlite3RegisterDateTimeFunctions@@9@9[esi]
	push	0
	push	0
	push	eax
	push	0
	push	1
	push	ecx
	push	edx
	push	edi
	call	_sqlite3CreateFunc
	add	esi, 12					; 0000000cH
	add	esp, 32					; 00000020H
	cmp	esi, 96					; 00000060H
	jb	SHORT $LL3@sqlite3Reg@2
	pop	esi
; Line 7322
	ret	0
_sqlite3RegisterDateTimeFunctions ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ApiExit
_TEXT	SEGMENT
_sqlite3ApiExit PROC					; COMDAT
; _db$ = esi
; _rc$ = ecx
; Line 8214
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN1@sqlite3Api
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN1@sqlite3Api
; Line 8216
	sub	DWORD PTR _inMutex, 1
; Line 8217
	push	0
	push	7
	mov	eax, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
; Line 8218
	mov	ecx, 7
$LN1@sqlite3Api:
; Line 8220
	test	esi, esi
	je	SHORT $LN4@sqlite3Api
	mov	eax, DWORD PTR [esi+16]
	and	eax, ecx
; Line 8221
	ret	0
$LN4@sqlite3Api:
; Line 8220
	mov	eax, 255				; 000000ffH
	and	eax, ecx
; Line 8221
	ret	0
_sqlite3ApiExit ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3Utf16to8
_TEXT	SEGMENT
_m$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_nByte$ = 8						; size = 4
_sqlite3Utf16to8 PROC					; COMDAT
; _z$ = ecx
; Line 10092
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+68], eax
	push	esi
; Line 10094
	push	64					; 00000040H
	lea	eax, DWORD PTR _m$[esp+76]
	push	0
	push	eax
	mov	esi, ecx
	call	_memset
; Line 10095
	mov	ecx, DWORD PTR _nByte$[esp+80]
	push	0
	push	2
	push	ecx
	lea	edx, DWORD PTR _m$[esp+96]
	push	esi
	push	edx
	call	_sqlite3VdbeMemSetStr
	add	esp, 32					; 00000020H
; Line 10096
	test	BYTE PTR _m$[esp+96], 2
	je	SHORT $LN5@sqlite3Utf@3
	cmp	BYTE PTR _m$[esp+99], 1
	je	SHORT $LN5@sqlite3Utf@3
	lea	eax, DWORD PTR _m$[esp+72]
	push	1
	push	eax
	call	_sqlite3VdbeMemTranslate
	add	esp, 8
$LN5@sqlite3Utf@3:
; Line 10099
	test	BYTE PTR _m$[esp+96], 64		; 00000040H
	mov	eax, DWORD PTR _m$[esp+88]
	jne	SHORT $LN11@sqlite3Utf@3
	test	eax, eax
	push	ebx
	mov	ebx, eax
	jne	SHORT $LN10@sqlite3Utf@3
	pop	ebx
	pop	esi
; Line 10100
	mov	ecx, DWORD PTR __$ArrayPad$[esp+68]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
; Line 10099
$LN10@sqlite3Utf@3:
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL13@sqlite3Utf@3:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL13@sqlite3Utf@3
	sub	eax, edx
	push	edi
	lea	edi, DWORD PTR [eax+1]
	mov	ecx, edi
	call	_sqlite3MallocRaw
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN9@sqlite3Utf@3
	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN9@sqlite3Utf@3:
	pop	edi
	mov	eax, esi
	pop	ebx
$LN11@sqlite3Utf@3:
; Line 10100
	mov	ecx, DWORD PTR __$ArrayPad$[esp+72]
	pop	esi
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 68					; 00000044H
	ret	0
_sqlite3Utf16to8 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pagerUnlockAndRollback
_TEXT	SEGMENT
_pagerUnlockAndRollback PROC				; COMDAT
; _p$ = eax
; Line 18715
	push	edi
	mov	edi, eax
; Line 18716
	cmp	DWORD PTR [edi+24], 0
	jne	SHORT $LN6@pagerUnloc@2
; Line 18718
	cmp	BYTE PTR [edi+10], 2
	jb	SHORT $LN1@pagerUnloc@2
; Line 18719
	call	_sqlite3PagerRollback
$LN1@pagerUnloc@2:
; Line 18721
	cmp	BYTE PTR [edi+19], 0
	jne	SHORT $LN6@pagerUnloc@2
	cmp	BYTE PTR [edi+16], 0
	jne	SHORT $LN5@pagerUnloc@2
	mov	eax, DWORD PTR [edi+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	push	0
	push	eax
	call	edx
	add	esp, 8
	mov	DWORD PTR [edi+28], -1
$LN5@pagerUnloc@2:
	mov	BYTE PTR [edi+10], 0
	mov	BYTE PTR [edi+20], 0
$LN6@pagerUnloc@2:
	pop	edi
; Line 18724
	ret	0
_pagerUnlockAndRollback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerClose
_TEXT	SEGMENT
_sqlite3PagerClose PROC					; COMDAT
; _pPager$ = eax
; Line 19977
	push	ebx
	push	esi
	mov	esi, eax
; Line 19990
	xor	ebx, ebx
	mov	DWORD PTR [esi+24], ebx
; Line 19991
	mov	BYTE PTR [esi+19], bl
; Line 19992
	call	_pager_reset
; Line 19993
	cmp	DWORD PTR [esi+24], ebx
	jne	SHORT $LN10@sqlite3Pag@21
	cmp	BYTE PTR [esi+10], 2
	jb	SHORT $LN5@sqlite3Pag@21
	push	edi
	mov	edi, esi
	call	_sqlite3PagerRollback
	pop	edi
$LN5@sqlite3Pag@21:
	cmp	BYTE PTR [esi+19], bl
	jne	SHORT $LN10@sqlite3Pag@21
	cmp	BYTE PTR [esi+16], bl
	jne	SHORT $LN9@sqlite3Pag@21
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+44]
	push	ebx
	push	eax
	call	edx
	add	esp, 8
	mov	DWORD PTR [esi+28], -1
$LN9@sqlite3Pag@21:
	mov	BYTE PTR [esi+10], bl
	mov	BYTE PTR [esi+20], bl
$LN10@sqlite3Pag@21:
; Line 19998
	cmp	BYTE PTR [esi], bl
	je	SHORT $LN16@sqlite3Pag@21
; Line 19999
	lea	eax, DWORD PTR [esi+100]
	cmp	eax, ebx
	je	SHORT $LN16@sqlite3Pag@21
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebx
	je	SHORT $LN16@sqlite3Pag@21
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	edx
	add	esp, 4
$LN16@sqlite3Pag@21:
; Line 20001
	mov	eax, DWORD PTR [esi+76]
	cmp	eax, ebx
	je	SHORT $LN22@sqlite3Pag@21
	push	eax
	call	_free
	add	esp, 4
$LN22@sqlite3Pag@21:
; Line 20002
	cmp	BYTE PTR [esi+4], bl
	je	SHORT $LN25@sqlite3Pag@21
; Line 20003
	lea	eax, DWORD PTR [esi+104]
	cmp	eax, ebx
	je	SHORT $LN25@sqlite3Pag@21
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebx
	je	SHORT $LN25@sqlite3Pag@21
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	edx
	add	esp, 4
$LN25@sqlite3Pag@21:
; Line 20005
	lea	eax, DWORD PTR [esi+96]
	cmp	eax, ebx
	je	SHORT $LN29@sqlite3Pag@21
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebx
	je	SHORT $LN29@sqlite3Pag@21
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	edx
	add	esp, 4
$LN29@sqlite3Pag@21:
; Line 20024
	mov	eax, DWORD PTR [esi+192]
	cmp	eax, ebx
	je	SHORT $LN35@sqlite3Pag@21
	push	eax
	call	_free
	add	esp, 4
$LN35@sqlite3Pag@21:
; Line 20025
	mov	eax, DWORD PTR [esi+196]
	cmp	eax, ebx
	je	SHORT $LN40@sqlite3Pag@21
	push	eax
	call	_free
	add	esp, 4
$LN40@sqlite3Pag@21:
; Line 20026
	push	esi
	call	_free
	add	esp, 4
	pop	esi
; Line 20027
	xor	eax, eax
	pop	ebx
; Line 20028
	ret	0
_sqlite3PagerClose ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerUnref
_TEXT	SEGMENT
_sqlite3PagerUnref PROC					; COMDAT
; _pPg$ = eax
; Line 21014
	add	WORD PTR [eax+34], -1
	movzx	ecx, WORD PTR [eax+34]
; Line 21022
	test	cx, cx
	jne	SHORT $LN13@sqlite3Pag@22
	push	esi
; Line 21024
	mov	esi, DWORD PTR [eax]
; Line 21025
	mov	DWORD PTR [eax+16], 0
; Line 21026
	mov	ecx, DWORD PTR [esi+116]
	mov	DWORD PTR [eax+20], ecx
; Line 21027
	mov	DWORD PTR [esi+116], eax
; Line 21028
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN6@sqlite3Pag@22
; Line 21029
	mov	DWORD PTR [ecx+16], eax
; Line 21030
	jmp	SHORT $LN5@sqlite3Pag@22
$LN6@sqlite3Pag@22:
; Line 21031
	mov	DWORD PTR [esi+112], eax
$LN5@sqlite3Pag@22:
; Line 21033
	cmp	BYTE PTR [eax+30], 0
	jne	SHORT $LN4@sqlite3Pag@22
	cmp	DWORD PTR [esi+120], 0
	jne	SHORT $LN4@sqlite3Pag@22
; Line 21034
	mov	DWORD PTR [esi+120], eax
$LN4@sqlite3Pag@22:
; Line 21036
	mov	ecx, DWORD PTR [esi+180]
	test	ecx, ecx
	je	SHORT $LN3@sqlite3Pag@22
; Line 21037
	mov	edx, DWORD PTR [esi+56]
	push	edx
	push	eax
	call	ecx
	add	esp, 8
$LN3@sqlite3Pag@22:
; Line 21043
	add	DWORD PTR [esi+64], -1
; Line 21045
	jne	SHORT $LN14@sqlite3Pag@22
	cmp	BYTE PTR [esi+19], 0
	je	SHORT $LN10@sqlite3Pag@22
	cmp	DWORD PTR [esi+140], 0
	jl	SHORT $LN14@sqlite3Pag@22
	jg	SHORT $LN10@sqlite3Pag@22
	cmp	DWORD PTR [esi+136], 0
	jbe	SHORT $LN14@sqlite3Pag@22
$LN10@sqlite3Pag@22:
; Line 21046
	mov	eax, esi
	call	_pagerUnlockAndRollback
$LN14@sqlite3Pag@22:
	pop	esi
$LN13@sqlite3Pag@22:
; Line 21049
	xor	eax, eax
; Line 21050
	ret	0
_sqlite3PagerUnref ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_open_journal
_TEXT	SEGMENT
_pager_open_journal PROC				; COMDAT
; _pPager$ = eax
; Line 21059
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	esi, eax
; Line 21066
	call	_sqlite3PagerPagecount
; Line 21067
	mov	eax, DWORD PTR [esi+28]
	cdq
	and	edx, 7
	add	eax, edx
	mov	edi, eax
	sar	edi, 3
	add	edi, 1
	call	_sqlite3Malloc
; Line 21068
	xor	ebx, ebx
	cmp	eax, ebx
	mov	DWORD PTR [esi+76], eax
	jne	SHORT $LN7@pager_open
; Line 21069
	lea	ebp, DWORD PTR [ebx+7]
; Line 21070
	jmp	$failed_to_open_journal$85156
$LN7@pager_open:
; Line 21073
	movzx	eax, BYTE PTR [esi+11]
	push	eax
	mov	eax, DWORD PTR [esi+88]
	lea	edi, DWORD PTR [esi+100]
	push	edi
	call	_sqlite3WinOpenExclusive
	mov	ebp, eax
	add	esp, 8
; Line 21078
	cmp	ebp, ebx
	mov	DWORD PTR [esi+136], ebx
	mov	DWORD PTR [esi+140], ebx
	mov	BYTE PTR [esi+17], bl
	mov	DWORD PTR [esi+144], ebx
	mov	DWORD PTR [esi+148], ebx
	je	SHORT $LN6@pager_open
; Line 21079
	cmp	ebp, 7
	jne	SHORT $failed_to_open_journal$85156
; Line 21080
	mov	eax, DWORD PTR [esi+88]
	call	_sqlite3WinDelete
; Line 21082
	jmp	SHORT $failed_to_open_journal$85156
$LN6@pager_open:
; Line 21084
	movzx	edx, BYTE PTR [esi+9]
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+28]
	call	eax
; Line 21085
	movzx	edx, BYTE PTR [esi+9]
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+28]
	call	eax
; Line 21086
	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [esi+92]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+4]
	call	eax
; Line 21092
	mov	eax, DWORD PTR [esi+24]
	add	esp, 24					; 00000018H
	cmp	eax, ebx
	mov	BYTE PTR [esi], 1
	mov	BYTE PTR [esi+1], bl
	mov	BYTE PTR [esi+13], bl
	mov	BYTE PTR [esi+15], bl
	mov	DWORD PTR [esi+40], ebx
	je	SHORT $LN4@pager_open
; Line 21093
	mov	ebp, eax
$failed_to_open_journal$85156:
; Line 21112
	mov	eax, DWORD PTR [esi+76]
	cmp	eax, ebx
	je	SHORT $LN19@pager_open
	push	eax
	call	_free
	add	esp, 4
$LN19@pager_open:
	pop	edi
; Line 21113
	mov	DWORD PTR [esi+76], ebx
	pop	esi
; Line 21114
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 21115
	ret	0
$LN4@pager_open:
; Line 21096
	mov	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [esi+32], ecx
; Line 21098
	mov	ecx, esi
	call	_writeJournalHdr
; Line 21100
	cmp	BYTE PTR [esi+6], bl
	je	SHORT $LN3@pager_open
	cmp	eax, ebx
	jne	SHORT $LN21@pager_open
; Line 21101
	call	_sqlite3PagerStmtBegin
$LN3@pager_open:
; Line 21103
	cmp	eax, ebx
	je	SHORT $LN8@pager_open
$LN21@pager_open:
	cmp	eax, 7
	je	SHORT $LN8@pager_open
; Line 21104
	mov	eax, esi
	call	_pager_end_transaction
; Line 21105
	cmp	eax, ebx
	jne	SHORT $LN8@pager_open
; Line 21106
	mov	eax, 13					; 0000000dH
$LN8@pager_open:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 21115
	ret	0
_pager_open_journal ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerBegin
_TEXT	SEGMENT
_exFlag$ = 8						; size = 4
_sqlite3PagerBegin PROC					; COMDAT
; _pPg$ = eax
; Line 21144
	push	esi
; Line 21145
	mov	esi, DWORD PTR [eax]
; Line 21146
	xor	eax, eax
; Line 21149
	cmp	BYTE PTR [esi+10], 1
	jne	SHORT $LN11@sqlite3Pag@23
; Line 21151
	cmp	BYTE PTR [esi+16], al
	je	SHORT $LN10@sqlite3Pag@23
; Line 21153
	mov	ecx, DWORD PTR [esi+28]
	mov	BYTE PTR [esi+10], 4
	mov	DWORD PTR [esi+32], ecx
$LN12@sqlite3Pag@23:
	pop	esi
; Line 21191
	ret	0
$LN10@sqlite3Pag@23:
; Line 21155
	mov	eax, DWORD PTR [esi+96]
	mov	edx, DWORD PTR [eax]
	push	2
	push	eax
	mov	eax, DWORD PTR [edx+40]
	call	eax
	add	esp, 8
; Line 21156
	test	eax, eax
	jne	SHORT $LN12@sqlite3Pag@23
; Line 21158
	cmp	DWORD PTR _exFlag$[esp], eax
	mov	BYTE PTR [esi+10], 2
	je	SHORT $LN7@sqlite3Pag@23
	push	ebx
; Line 21159
	push	esi
	lea	ebx, DWORD PTR [eax+4]
	call	_pager_wait_on_lock
	add	esp, 4
	pop	ebx
$LN7@sqlite3Pag@23:
; Line 21162
	test	eax, eax
; Line 21163
	jne	SHORT $LN12@sqlite3Pag@23
; Line 21167
	cmp	BYTE PTR [esi+2], al
	mov	BYTE PTR [esi+14], al
	je	SHORT $LN12@sqlite3Pag@23
	cmp	BYTE PTR [esi+11], al
	jne	SHORT $LN12@sqlite3Pag@23
; Line 21168
	mov	eax, esi
	pop	esi
	jmp	_pager_open_journal
$LN11@sqlite3Pag@23:
; Line 21171
	cmp	BYTE PTR [esi], al
	je	SHORT $LN12@sqlite3Pag@23
	mov	ecx, DWORD PTR [esi+136]
	or	ecx, DWORD PTR [esi+140]
	jne	SHORT $LN12@sqlite3Pag@23
	push	edi
; Line 21180
	call	_sqlite3PagerPagecount
; Line 21181
	mov	eax, DWORD PTR [esi+28]
	cdq
	and	edx, 7
	add	eax, edx
	mov	edi, eax
	sar	edi, 3
	add	edi, 1
	call	_sqlite3Malloc
; Line 21182
	test	eax, eax
	mov	DWORD PTR [esi+76], eax
	pop	edi
	jne	SHORT $LN2@sqlite3Pag@23
; Line 21183
	mov	eax, 7
	pop	esi
; Line 21191
	ret	0
$LN2@sqlite3Pag@23:
; Line 21185
	mov	edx, DWORD PTR [esi+28]
	mov	DWORD PTR [esi+32], edx
; Line 21186
	mov	ecx, esi
	pop	esi
	jmp	_writeJournalHdr
_sqlite3PagerBegin ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_write
_TEXT	SEGMENT
_saved$85238 = -4					; size = 4
_rc$ = 8						; size = 4
_pPg$ = 8						; size = 4
_pager_write PROC					; COMDAT
; Line 21246
	push	ecx
	push	ebp
	mov	ebp, DWORD PTR _pPg$[esp+4]
	push	esi
; Line 21248
	mov	esi, DWORD PTR [ebp]
; Line 21253
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
; Line 21254
	jne	$LN27@pager_writ@2
; Line 21256
	cmp	BYTE PTR [esi+12], al
	je	SHORT $LN25@pager_writ@2
	pop	esi
; Line 21257
	mov	eax, 3
	pop	ebp
; Line 21414
	pop	ecx
	ret	0
$LN25@pager_writ@2:
; Line 21272
	cmp	BYTE PTR [ebp+32], 0
	push	ebx
	push	edi
	je	SHORT $LN31@pager_writ@2
	mov	ebx, DWORD PTR [ebp+4]
	mov	edi, ebp
	mov	eax, esi
	call	_readDbPage
	test	eax, eax
	jne	$LN50@pager_writ@2
	mov	BYTE PTR [ebp+32], al
$LN31@pager_writ@2:
; Line 21280
	mov	eax, ebp
	mov	DWORD PTR _rc$[esp+16], 0
	call	_makeDirty
; Line 21281
	cmp	BYTE PTR [ebp+28], 0
	je	SHORT $LN23@pager_writ@2
	call	_pageInStatement
	test	eax, eax
	jne	SHORT $LN22@pager_writ@2
	cmp	BYTE PTR [esi+5], al
	jne	SHORT $LN23@pager_writ@2
$LN22@pager_writ@2:
; Line 21282
	mov	BYTE PTR [esi+14], 1
; Line 21283
	jmp	$LN49@pager_writ@2
$LN23@pager_writ@2:
; Line 21293
	push	0
	mov	eax, ebp
	call	_sqlite3PagerBegin
	add	esp, 4
; Line 21294
	test	eax, eax
	mov	DWORD PTR _rc$[esp+16], eax
; Line 21295
	jne	$LN50@pager_writ@2
; Line 21298
	cmp	BYTE PTR [esi], al
	jne	SHORT $LN18@pager_writ@2
	cmp	BYTE PTR [esi+2], al
	je	SHORT $LN18@pager_writ@2
; Line 21299
	mov	eax, esi
	call	_pager_open_journal
; Line 21300
	test	eax, eax
	mov	DWORD PTR _rc$[esp+16], eax
	jne	$LN50@pager_writ@2
$LN18@pager_writ@2:
; Line 21303
	mov	BYTE PTR [esi+14], 1
; Line 21309
	cmp	BYTE PTR [ebp+28], 0
	jne	$LN48@pager_writ@2
	cmp	BYTE PTR [esi+2], 0
	jne	SHORT $LN16@pager_writ@2
	cmp	BYTE PTR [esi+16], 0
	je	$LN48@pager_writ@2
$LN16@pager_writ@2:
; Line 21310
	mov	eax, DWORD PTR [ebp+4]
	cmp	eax, DWORD PTR [esi+32]
	jg	$LN15@pager_writ@2
; Line 21312
	cmp	BYTE PTR [esi+16], 0
	je	SHORT $LN14@pager_writ@2
; Line 21313
	mov	ecx, DWORD PTR [esi+56]
	mov	edx, DWORD PTR [esi+52]
	add	edx, ecx
	lea	edi, DWORD PTR [edx+ebp+48]
; Line 21316
	call	_sqlite3MallocRaw
; Line 21317
	test	eax, eax
	mov	DWORD PTR [edi], eax
	je	$LN46@pager_writ@2
; Line 21318
	mov	ecx, DWORD PTR [esi+56]
	push	ecx
	lea	ecx, DWORD PTR [ebp+48]
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 21320
	jmp	$LN46@pager_writ@2
$LN14@pager_writ@2:
; Line 21328
	lea	edx, DWORD PTR [ebp+48]
	mov	ecx, esi
	call	_pager_cksum
; Line 21329
	mov	edi, DWORD PTR [esi+56]
	add	edi, edx
; Line 21330
	lea	ecx, DWORD PTR [edx-4]
; Line 21331
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR _saved$85238[esp+20], edx
; Line 21332
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [edi], dl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [edi+1], dl
	mov	BYTE PTR [edi+3], al
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [edi+2], dl
; Line 21334
	mov	eax, DWORD PTR [ebp+4]
	mov	ebx, DWORD PTR [esi+56]
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ecx], dl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [ecx+1], dl
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [ecx+2], dl
	mov	BYTE PTR [ecx+3], al
; Line 21335
	mov	eax, DWORD PTR [esi+100]
	mov	edx, DWORD PTR [eax]
	add	ebx, 8
	push	ebx
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	ecx, eax
; Line 21339
	mov	eax, ebx
	cdq
	add	esp, 12					; 0000000cH
	add	DWORD PTR [esi+136], eax
	mov	DWORD PTR _rc$[esp+16], ecx
	adc	DWORD PTR [esi+140], edx
; Line 21347
	test	ecx, ecx
	mov	edx, DWORD PTR _saved$85238[esp+20]
	mov	DWORD PTR [edi], edx
	je	SHORT $LN11@pager_writ@2
	pop	edi
	pop	ebx
	pop	esi
; Line 21348
	mov	eax, ecx
	pop	ebp
; Line 21414
	pop	ecx
	ret	0
$LN11@pager_writ@2:
; Line 21351
	add	DWORD PTR [esi+40], 1
; Line 21353
	mov	ecx, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR [esi+76]
	mov	eax, ecx
	shr	eax, 3
	add	eax, edx
	and	ecx, 7
	mov	dl, 1
	shl	dl, cl
	or	BYTE PTR [eax], dl
; Line 21354
	cmp	BYTE PTR [esi+7], 0
	sete	al
	mov	BYTE PTR [ebp+30], al
; Line 21355
	cmp	BYTE PTR [esi+5], 0
	je	SHORT $LN46@pager_writ@2
; Line 21356
	mov	ecx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [esi+80]
	mov	edx, ecx
	shr	edx, 3
	add	eax, edx
	and	ecx, 7
	mov	dl, 1
	shl	dl, cl
	or	BYTE PTR [eax], dl
; Line 21359
	jmp	SHORT $LN46@pager_writ@2
$LN15@pager_writ@2:
; Line 21360
	cmp	BYTE PTR [esi+1], 0
	jne	SHORT $LN29@pager_writ@2
	cmp	BYTE PTR [esi+7], 0
	jne	SHORT $LN29@pager_writ@2
	mov	eax, 1
	jmp	SHORT $LN30@pager_writ@2
$LN29@pager_writ@2:
	xor	eax, eax
$LN30@pager_writ@2:
	mov	BYTE PTR [ebp+30], al
$LN46@pager_writ@2:
; Line 21364
	cmp	BYTE PTR [ebp+30], 0
	je	SHORT $LN8@pager_writ@2
; Line 21365
	mov	BYTE PTR [esi+13], 1
$LN8@pager_writ@2:
; Line 21367
	mov	BYTE PTR [ebp+28], 1
$LN48@pager_writ@2:
; Line 21378
	cmp	BYTE PTR [esi+5], 0
	je	$LN49@pager_writ@2
	mov	eax, ebp
	call	_pageInStatement
	test	eax, eax
	jne	$LN49@pager_writ@2
	mov	ecx, DWORD PTR [ebp+4]
	cmp	ecx, DWORD PTR [esi+36]
	jg	$LN49@pager_writ@2
; Line 21380
	cmp	BYTE PTR [esi+16], al
	je	SHORT $LN6@pager_writ@2
; Line 21381
	mov	ecx, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [esi+52]
	add	eax, ecx
	lea	edi, DWORD PTR [eax+ebp+48]
; Line 21383
	call	_sqlite3MallocRaw
; Line 21384
	test	eax, eax
	mov	DWORD PTR [edi+4], eax
	je	SHORT $LN5@pager_writ@2
; Line 21385
	mov	ecx, DWORD PTR [esi+56]
	push	ecx
	lea	ecx, DWORD PTR [ebp+48]
	push	ecx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN5@pager_writ@2:
; Line 21388
	mov	ecx, ebp
	call	_page_add_to_stmt_list
; Line 21389
	jmp	SHORT $LN49@pager_writ@2
$LN6@pager_writ@2:
; Line 21390
	lea	eax, DWORD PTR [ebp+44]
; Line 21391
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	mov	BYTE PTR [eax+3], cl
	shr	edx, 8
	mov	BYTE PTR [eax+2], dl
; Line 21392
	mov	ecx, DWORD PTR [esi+56]
	mov	edx, DWORD PTR [esi+104]
	mov	edi, DWORD PTR [edx]
	add	ecx, 4
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edi+12]
	push	edx
	call	eax
	add	esp, 12					; 0000000cH
; Line 21394
	test	eax, eax
	mov	DWORD PTR _rc$[esp+16], eax
; Line 21395
	jne	SHORT $LN50@pager_writ@2
; Line 21397
	add	DWORD PTR [esi+48], 1
; Line 21399
	mov	ecx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [esi+80]
	mov	edx, ecx
	shr	edx, 3
	add	eax, edx
	and	ecx, 7
	mov	dl, 1
	shl	dl, cl
	or	BYTE PTR [eax], dl
$LN49@pager_writ@2:
; Line 21407
	mov	ebp, DWORD PTR [ebp+4]
	cmp	DWORD PTR [esi+28], ebp
	jge	SHORT $LN1@pager_writ@2
; Line 21409
	cmp	BYTE PTR [esi+16], 0
	mov	DWORD PTR [esi+28], ebp
	jne	SHORT $LN1@pager_writ@2
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	DWORD PTR [esi+56]
	cmp	ebp, eax
	jne	SHORT $LN1@pager_writ@2
; Line 21410
	add	ebp, 1
	mov	DWORD PTR [esi+28], ebp
$LN1@pager_writ@2:
; Line 21413
	mov	eax, DWORD PTR _rc$[esp+16]
$LN50@pager_writ@2:
	pop	edi
	pop	ebx
$LN27@pager_writ@2:
	pop	esi
	pop	ebp
; Line 21414
	pop	ecx
	ret	0
_pager_write ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _releasePage
_TEXT	SEGMENT
_releasePage PROC					; COMDAT
; _pPage$ = eax
; Line 23800
	test	eax, eax
	je	SHORT $LN1@releasePag
; Line 23804
	mov	eax, DWORD PTR [eax+72]
	jmp	_sqlite3PagerUnref
$LN1@releasePag:
; Line 23806
	ret	0
_releasePage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pageDestructor
_TEXT	SEGMENT
_pData$ = 8						; size = 4
_pageSize$ = 12						; size = 4
_pageDestructor PROC					; COMDAT
; Line 23816
	mov	ecx, DWORD PTR _pData$[esp-4]
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	push	esi
	je	SHORT $LN6@pageDestru
	mov	eax, DWORD PTR [eax+56]
	lea	esi, DWORD PTR [eax+ecx+48]
	jmp	SHORT $LN7@pageDestru
$LN6@pageDestru:
	xor	esi, esi
$LN7@pageDestru:
; Line 23817
	mov	eax, DWORD PTR [esi+80]
	test	eax, eax
	je	SHORT $LN12@pageDestru
; Line 23819
	mov	DWORD PTR [esi+80], 0
; Line 23820
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN12@pageDestru:
; Line 23822
	mov	BYTE PTR [esi], 0
	pop	esi
; Line 23823
	ret	0
_pageDestructor ENDP
_TEXT	ENDS
PUBLIC	_ppBtree$GSCopy$
PUBLIC	_zFilename$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3BtreeOpen
_TEXT	SEGMENT
_isMemdb$ = -124					; size = 4
_p$123046 = -120					; size = 4
_ppBtree$GSCopy$ = -116					; size = 4
_zFilename$GSCopy$ = -112				; size = 4
_pTsdro$ = -108						; size = 4
_zDbHeader$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_zFilename$ = 8						; size = 4
_pSqlite$ = 12						; size = 4
_ppBtree$ = 16						; size = 4
_flags$ = 20						; size = 4
_sqlite3BtreeOpen PROC					; COMDAT
; Line 23855
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+124], eax
; Line 23993
	mov	eax, DWORD PTR _ppBtree$[esp+120]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zFilename$[esp+128]
	test	ebp, ebp
	push	esi
	push	edi
	mov	DWORD PTR _zFilename$GSCopy$[esp+140], ebp
	mov	DWORD PTR _ppBtree$GSCopy$[esp+140], eax
	je	SHORT $LN20@sqlite3Btr@22
	mov	edi, OFFSET ??_C@_08CADOGOJM@?3memory?3?$AA@
	mov	esi, ebp
	mov	ecx, 9
	xor	edx, edx
	repe cmpsb
	mov	DWORD PTR _isMemdb$[esp+140], 1
	je	SHORT $LN21@sqlite3Btr@22
$LN20@sqlite3Btr@22:
; Line 23874
	mov	DWORD PTR _isMemdb$[esp+140], 0
$LN21@sqlite3Btr@22:
; Line 23878
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN29@sqlite3Btr@22
	test	esi, esi
	jg	$LN106@sqlite3Btr@22
$LN29@sqlite3Btr@22:
	push	12					; 0000000cH
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	mov	DWORD PTR _p$123046[esp+140], ebx
	jne	SHORT $LN107@sqlite3Btr@22
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN39@sqlite3Btr@22
	test	esi, esi
	jg	SHORT $LN22@sqlite3Btr@22
$LN39@sqlite3Btr@22:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN22@sqlite3Btr@22
$LN107@sqlite3Btr@22:
	xor	eax, eax
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+8], eax
$LN22@sqlite3Btr@22:
; Line 23879
	test	ebx, ebx
; Line 23880
	je	SHORT $LN106@sqlite3Btr@22
; Line 23883
	mov	eax, DWORD PTR _pSqlite$[esp+136]
	mov	BYTE PTR [ebx+8], 0
	mov	DWORD PTR [ebx], eax
; Line 23887
	call	_sqlite3ThreadDataReadOnly
	mov	esi, eax
; Line 23888
	cmp	BYTE PTR [esi+4], 0
	mov	DWORD PTR _pTsdro$[esp+140], esi
	je	$LN57@sqlite3Btr@22
	test	ebp, ebp
	je	$LN57@sqlite3Btr@22
	cmp	DWORD PTR _isMemdb$[esp+140], 0
	jne	SHORT $LN57@sqlite3Btr@22
; Line 23889
	mov	eax, ebp
	call	_sqlite3WinFullPathname
	mov	edi, eax
; Line 23890
	test	edi, edi
	jne	SHORT $LN15@sqlite3Btr@22
; Line 23891
	push	ebx
	call	_sqlite3FreeX
	add	esp, 4
$LN106@sqlite3Btr@22:
	pop	edi
	pop	esi
	pop	ebp
; Line 23892
	mov	eax, 7
	pop	ebx
; Line 23996
	mov	ecx, DWORD PTR __$ArrayPad$[esp+124]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	ret	0
$LN15@sqlite3Btr@22:
; Line 23894
	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	je	SHORT $LN12@sqlite3Btr@22
	npad	2
$LL14@sqlite3Btr@22:
; Line 23896
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+84]
	mov	ecx, edi
$LL111@sqlite3Btr@22:
	mov	al, BYTE PTR [ecx]
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN112@sqlite3Btr@22
	test	al, al
	je	SHORT $LN113@sqlite3Btr@22
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN112@sqlite3Btr@22
	add	ecx, 2
	add	edx, 2
	test	al, al
	jne	SHORT $LL111@sqlite3Btr@22
$LN113@sqlite3Btr@22:
	xor	eax, eax
	jmp	SHORT $LN114@sqlite3Btr@22
$LN112@sqlite3Btr@22:
	sbb	eax, eax
	sbb	eax, -1
$LN114@sqlite3Btr@22:
	test	eax, eax
	je	SHORT $LN103@sqlite3Btr@22
	mov	esi, DWORD PTR [esi+72]
	test	esi, esi
	jne	SHORT $LL14@sqlite3Btr@22
$LN12@sqlite3Btr@22:
; Line 23904
	push	edi
	call	_free
	add	esp, 4
$LN57@sqlite3Btr@22:
; Line 23919
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN66@sqlite3Btr@22
	test	esi, esi
	jg	SHORT $LN108@sqlite3Btr@22
$LN66@sqlite3Btr@22:
	push	76					; 0000004cH
	call	_malloc
	mov	ebp, eax
	add	esp, 4
	test	ebp, ebp
	jne	SHORT $LN109@sqlite3Btr@22
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN76@sqlite3Btr@22
	test	esi, esi
	jg	SHORT $LN59@sqlite3Btr@22
$LN76@sqlite3Btr@22:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN59@sqlite3Btr@22
$LN103@sqlite3Btr@22:
; Line 23898
	mov	edx, DWORD PTR _ppBtree$GSCopy$[esp+140]
	mov	DWORD PTR [ebx+4], esi
	mov	DWORD PTR [edx], ebx
; Line 23899
	add	DWORD PTR [esi+52], 1
; Line 23900
	push	edi
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
; Line 23901
	xor	eax, eax
	pop	ebx
; Line 23996
	mov	ecx, DWORD PTR __$ArrayPad$[esp+124]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	ret	0
$LN109@sqlite3Btr@22:
; Line 23919
	push	76					; 0000004cH
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH
$LN59@sqlite3Btr@22:
; Line 23920
	test	ebp, ebp
	jne	SHORT $LN10@sqlite3Btr@22
$LN108@sqlite3Btr@22:
; Line 23921
	mov	esi, 7
; Line 23922
	jmp	$LN95@sqlite3Btr@22
$LN10@sqlite3Btr@22:
; Line 23924
	mov	eax, DWORD PTR _zFilename$GSCopy$[esp+140]
	mov	ecx, DWORD PTR _flags$[esp+136]
	push	84					; 00000054H
	push	eax
	mov	edx, ebp
	call	_sqlite3PagerOpen
	mov	esi, eax
	add	esp, 8
; Line 23925
	test	esi, esi
	jne	$LN105@sqlite3Btr@22
; Line 23926
	mov	esi, DWORD PTR [ebp]
	lea	edi, DWORD PTR _zDbHeader$[esp+140]
	lea	ebx, DWORD PTR [eax+100]
	call	_sqlite3PagerReadFileheader
	mov	esi, eax
; Line 23928
	test	esi, esi
	jne	$LN115@sqlite3Btr@22
; Line 23931
	mov	ecx, DWORD PTR _p$123046[esp+140]
	mov	DWORD PTR [ecx+4], ebp
; Line 23933
	mov	edx, DWORD PTR [ebp]
	mov	DWORD PTR [edx+180], OFFSET _pageDestructor
; Line 23934
	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [eax+184], OFFSET _pageReinit
; Line 23937
	mov	eax, DWORD PTR [ebp]
	xor	ebx, ebx
	mov	DWORD PTR [ebp+4], ebx
	mov	DWORD PTR [ebp+8], ebx
	mov	cl, BYTE PTR [eax+12]
	mov	BYTE PTR [ebp+13], cl
; Line 23938
	movzx	dx, BYTE PTR _zDbHeader$[esp+157]
	xor	ecx, ecx
	mov	ch, BYTE PTR _zDbHeader$[esp+156]
	or	cx, dx
; Line 23940
	cmp	cx, 512					; 00000200H
	mov	WORD PTR [ebp+24], cx
	jb	SHORT $LN6@sqlite3Btr@22
	cmp	cx, 32768				; 00008000H
	ja	SHORT $LN6@sqlite3Btr@22
	movzx	ecx, cx
	lea	edx, DWORD PTR [ecx-1]
	test	edx, ecx
	jne	SHORT $LN6@sqlite3Btr@22
; Line 23960
	movzx	ecx, BYTE PTR _zDbHeader$[esp+161]
	movzx	edx, BYTE PTR _zDbHeader$[esp+160]
	mov	BYTE PTR [ebp+14], cl
; Line 23961
	movzx	ecx, BYTE PTR _zDbHeader$[esp+162]
	mov	BYTE PTR [ebp+15], cl
; Line 23962
	movzx	ecx, BYTE PTR _zDbHeader$[esp+163]
	mov	BYTE PTR [ebp+16], cl
; Line 23963
	mov	BYTE PTR [ebp+17], 1
; Line 23965
	movzx	ecx, BYTE PTR _zDbHeader$[esp+192]
	movzx	edi, BYTE PTR _zDbHeader$[esp+193]
	shl	ecx, 8
	or	ecx, edi
	movzx	edi, BYTE PTR _zDbHeader$[esp+194]
	shl	ecx, 8
	or	ecx, edi
	movzx	edi, BYTE PTR _zDbHeader$[esp+195]
	shl	ecx, 8
	or	ecx, edi
	setne	cl
	mov	BYTE PTR [ebp+18], cl
	jmp	SHORT $LN4@sqlite3Btr@22
$LN6@sqlite3Btr@22:
; Line 23952
	cmp	DWORD PTR _zFilename$GSCopy$[esp+140], ebx
	mov	cl, 32					; 00000020H
	mov	WORD PTR [ebp+24], 1024			; 00000400H
	mov	BYTE PTR [ebp+14], 64			; 00000040H
	mov	BYTE PTR [ebp+15], cl
	mov	BYTE PTR [ebp+16], cl
	je	SHORT $LN116@sqlite3Btr@22
	cmp	DWORD PTR _isMemdb$[esp+140], ebx
	jne	SHORT $LN116@sqlite3Btr@22
; Line 23953
	mov	BYTE PTR [ebp+18], bl
; Line 23954
	mov	BYTE PTR [ebp+19], bl
$LN116@sqlite3Btr@22:
; Line 23957
	xor	edx, edx
$LN4@sqlite3Btr@22:
; Line 23968
	movzx	ecx, WORD PTR [ebp+24]
	mov	edi, ecx
	sub	edi, edx
	mov	WORD PTR [ebp+26], di
; Line 23970
	movzx	edi, cx
	call	_sqlite3PagerSetPagesize
; Line 23978
	mov	eax, DWORD PTR _pTsdro$[esp+140]
	cmp	BYTE PTR [eax+4], bl
	je	SHORT $LN3@sqlite3Btr@22
	cmp	DWORD PTR _zFilename$GSCopy$[esp+140], ebx
	je	SHORT $LN3@sqlite3Btr@22
	cmp	DWORD PTR _isMemdb$[esp+140], ebx
	jne	SHORT $LN3@sqlite3Btr@22
; Line 23979
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ebp+72], edx
; Line 23980
	call	_sqlite3ThreadData
	mov	DWORD PTR [eax+8], ebp
$LN3@sqlite3Btr@22:
; Line 23984
	mov	eax, DWORD PTR _ppBtree$GSCopy$[esp+140]
	mov	ecx, DWORD PTR _p$123046[esp+140]
	mov	DWORD PTR [ebp+52], 1
	pop	edi
	mov	DWORD PTR [eax], ecx
; Line 23995
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 23996
	mov	ecx, DWORD PTR __$ArrayPad$[esp+124]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	ret	0
$LN115@sqlite3Btr@22:
; Line 23987
	mov	ebx, DWORD PTR _p$123046[esp+140]
$LN105@sqlite3Btr@22:
; Line 23988
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	SHORT $LN1@sqlite3Btr@22
; Line 23989
	call	_sqlite3PagerClose
$LN1@sqlite3Btr@22:
; Line 23991
	push	ebp
	call	_free
	add	esp, 4
$LN95@sqlite3Btr@22:
; Line 23992
	push	ebx
	call	_free
; Line 23996
	mov	ecx, DWORD PTR __$ArrayPad$[esp+144]
	mov	edx, DWORD PTR _ppBtree$GSCopy$[esp+144]
	add	esp, 4
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	mov	DWORD PTR [edx], 0
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	ret	0
_sqlite3BtreeOpen ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _unlockBtreeIfUnused
_TEXT	SEGMENT
_unlockBtreeIfUnused PROC				; COMDAT
; _pBt$ = esi
; Line 24328
	cmp	BYTE PTR [esi+48], 0
	jne	SHORT $LN3@unlockBtre
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN3@unlockBtre
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN3@unlockBtre
; Line 24329
	mov	edx, DWORD PTR [esi]
	mov	ecx, 1
	cmp	DWORD PTR [edx+64], ecx
	jl	SHORT $LN8@unlockBtre
; Line 24330
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $LN1@unlockBtre
; Line 24332
	movzx	edx, WORD PTR [esi+24]
	push	edi
	mov	edi, eax
	sub	edi, edx
	mov	DWORD PTR [eax+68], edi
; Line 24333
	mov	DWORD PTR [eax+64], esi
; Line 24334
	mov	DWORD PTR [eax+76], ecx
	pop	edi
$LN1@unlockBtre:
; Line 24336
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN8@unlockBtre
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN8@unlockBtre:
; Line 24338
	mov	DWORD PTR [esi+8], 0
; Line 24339
	mov	BYTE PTR [esi+12], 0
$LN3@unlockBtre:
; Line 24341
	ret	0
_unlockBtreeIfUnused ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeCommitPhaseTwo
_TEXT	SEGMENT
_sqlite3BtreeCommitPhaseTwo PROC			; COMDAT
; _p$ = eax
; Line 24914
	push	esi
	push	edi
	mov	edi, eax
; Line 24922
	cmp	BYTE PTR [edi+8], 2
	mov	esi, DWORD PTR [edi+4]
	jne	SHORT $LN4@sqlite3Btr@23
; Line 24926
	mov	eax, DWORD PTR [esi]
	push	eax
	call	_sqlite3PagerCommitPhaseTwo
	add	esp, 4
; Line 24927
	test	eax, eax
; Line 24928
	jne	SHORT $LN5@sqlite3Btr@23
; Line 24930
	mov	BYTE PTR [esi+48], 1
; Line 24931
	mov	BYTE PTR [esi+12], al
$LN4@sqlite3Btr@23:
; Line 24933
	call	_unlockAllTables
; Line 24940
	cmp	BYTE PTR [edi+8], 0
	je	SHORT $LN1@sqlite3Btr@23
; Line 24941
	add	DWORD PTR [esi+56], -1
; Line 24942
	jne	SHORT $LN1@sqlite3Btr@23
; Line 24943
	mov	BYTE PTR [esi+48], 0
$LN1@sqlite3Btr@23:
; Line 24950
	mov	BYTE PTR [edi+8], 0
; Line 24951
	call	_unlockBtreeIfUnused
; Line 24954
	xor	eax, eax
$LN5@sqlite3Btr@23:
	pop	edi
	pop	esi
; Line 24955
	ret	0
_sqlite3BtreeCommitPhaseTwo ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeCloseCursor
_TEXT	SEGMENT
_sqlite3BtreeCloseCursor PROC				; COMDAT
; _pCur$ = edi
; Line 25251
	mov	eax, DWORD PTR [edi]
	push	esi
	mov	esi, DWORD PTR [eax+4]
; Line 25252
	mov	eax, DWORD PTR [edi+68]
	test	eax, eax
	je	SHORT $LN11@sqlite3Btr@24
	push	eax
	call	_free
	add	esp, 4
$LN11@sqlite3Btr@24:
; Line 25253
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	mov	DWORD PTR [edi+68], 0
	mov	BYTE PTR [edi+65], 0
	je	SHORT $LN3@sqlite3Btr@24
; Line 25254
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+4], ecx
; Line 25255
	jmp	SHORT $LN2@sqlite3Btr@24
$LN3@sqlite3Btr@24:
; Line 25256
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+4], edx
$LN2@sqlite3Btr@24:
; Line 25258
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN1@sqlite3Btr@24
; Line 25259
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR [eax+8], ecx
$LN1@sqlite3Btr@24:
; Line 25261
	mov	eax, DWORD PTR [edi+24]
	test	eax, eax
	je	SHORT $LN13@sqlite3Btr@24
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN13@sqlite3Btr@24:
; Line 25262
	call	_unlockBtreeIfUnused
; Line 25263
	mov	eax, DWORD PTR [edi+88]
	test	eax, eax
	pop	esi
	je	SHORT $LN21@sqlite3Btr@24
	push	eax
	call	_free
	add	esp, 4
$LN21@sqlite3Btr@24:
; Line 25264
	push	edi
	mov	DWORD PTR [edi+88], 0
	call	_free
	add	esp, 4
; Line 25265
	xor	eax, eax
; Line 25266
	ret	0
_sqlite3BtreeCloseCursor ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeReleaseTempCursor
_TEXT	SEGMENT
_sqlite3BtreeReleaseTempCursor PROC			; COMDAT
; _pCur$ = eax
; Line 25286
	mov	eax, DWORD PTR [eax+24]
	test	eax, eax
	je	SHORT $LN1@sqlite3Btr@25
; Line 25287
	mov	eax, DWORD PTR [eax+72]
	jmp	_sqlite3PagerUnref
$LN1@sqlite3Btr@25:
; Line 25289
	ret	0
_sqlite3BtreeReleaseTempCursor ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeMoveToParent
_TEXT	SEGMENT
_sqlite3BtreeMoveToParent PROC				; COMDAT
; _pCur$ = edi
; Line 25815
	push	ebx
	push	ebp
	push	esi
; Line 25821
	mov	esi, DWORD PTR [edi+24]
; Line 25824
	mov	ebx, DWORD PTR [esi+80]
; Line 25827
	mov	eax, DWORD PTR [ebx+72]
	movzx	ecx, WORD PTR [eax+34]
	test	cx, cx
	movzx	ebp, WORD PTR [esi+16]
	jne	SHORT $LN5@sqlite3Btr@26
	call	__page_ref
	jmp	SHORT $LN6@sqlite3Btr@26
$LN5@sqlite3Btr@26:
	add	ecx, 1
	mov	WORD PTR [eax+34], cx
$LN6@sqlite3Btr@26:
; Line 25828
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
	pop	esi
; Line 25832
	mov	DWORD PTR [edi+28], ebp
	pop	ebp
	mov	DWORD PTR [edi+24], ebx
	mov	WORD PTR [edi+62], 0
	pop	ebx
; Line 25833
	ret	0
_sqlite3BtreeMoveToParent ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3MemCompare
_TEXT	SEGMENT
_n1$88630 = -8						; size = 4
_v1$88628 = -4						; size = 4
_pColl$ = 8						; size = 4
_sqlite3MemCompare PROC					; COMDAT
; _pMem1$ = ecx
; _pMem2$ = eax
; Line 29884
	sub	esp, 8
	push	ebp
	mov	ebp, DWORD PTR _pColl$[esp+8]
	push	esi
	push	edi
	mov	edi, eax
; Line 29893
	movzx	eax, WORD PTR [edi+24]
	mov	esi, ecx
	movzx	edx, WORD PTR [esi+24]
; Line 29894
	mov	ecx, eax
	or	ecx, edx
; Line 29899
	test	cl, 1
	je	SHORT $LN21@sqlite3Mem
	pop	edi
; Line 29900
	and	eax, 1
	and	edx, 1
	pop	esi
	sub	eax, edx
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
$LN21@sqlite3Mem:
; Line 29907
	test	cl, 12					; 0000000cH
	je	$LN10@sqlite3Mem
; Line 29908
	test	dl, 12					; 0000000cH
	jne	SHORT $LN19@sqlite3Mem
$LN56@sqlite3Mem:
	pop	edi
	pop	esi
; Line 29909
	mov	eax, 1
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
$LN19@sqlite3Mem:
; Line 29911
	test	al, 12					; 0000000cH
; Line 29912
	je	SHORT $LN57@sqlite3Mem
; Line 29914
	mov	ecx, eax
	and	ecx, edx
	test	cl, 4
	jne	SHORT $LN17@sqlite3Mem
; Line 29916
	test	dl, 8
	jne	SHORT $LN16@sqlite3Mem
; Line 29917
	fild	QWORD PTR [esi]
; Line 29918
	jmp	SHORT $LN15@sqlite3Mem
$LN16@sqlite3Mem:
; Line 29919
	fld	QWORD PTR [esi+8]
$LN15@sqlite3Mem:
; Line 29921
	test	al, 8
	jne	SHORT $LN14@sqlite3Mem
; Line 29922
	fild	QWORD PTR [edi]
; Line 29923
	jmp	SHORT $LN13@sqlite3Mem
$LN14@sqlite3Mem:
; Line 29924
	fld	QWORD PTR [edi+8]
$LN13@sqlite3Mem:
; Line 29926
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN12@sqlite3Mem
	fstp	ST(0)
	fstp	ST(0)
$LN57@sqlite3Mem:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
$LN12@sqlite3Mem:
; Line 29927
	fcompp
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN56@sqlite3Mem
$LN11@sqlite3Mem:
	pop	edi
	pop	esi
; Line 29928
	xor	eax, eax
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
$LN17@sqlite3Mem:
; Line 29932
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edi]
	mov	esi, DWORD PTR [esi+4]
	mov	edi, DWORD PTR [edi+4]
	cmp	esi, edi
	jg	SHORT $LN56@sqlite3Mem
	jl	SHORT $LN57@sqlite3Mem
	cmp	eax, ecx
	jb	SHORT $LN57@sqlite3Mem
; Line 29933
	cmp	esi, edi
	jl	SHORT $LN11@sqlite3Mem
	jg	SHORT $LN56@sqlite3Mem
	cmp	eax, ecx
	jbe	SHORT $LN11@sqlite3Mem
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
$LN10@sqlite3Mem:
; Line 29941
	test	cl, 2
	push	ebx
	je	$LN2@sqlite3Mem
; Line 29942
	test	dl, 2
	jne	SHORT $LN6@sqlite3Mem
	pop	ebx
	pop	edi
	pop	esi
; Line 29943
	mov	eax, 1
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
$LN6@sqlite3Mem:
; Line 29945
	test	al, 2
	jne	SHORT $LN5@sqlite3Mem
	pop	ebx
	pop	edi
	pop	esi
; Line 29946
	or	eax, -1
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
$LN5@sqlite3Mem:
; Line 29959
	test	ebp, ebp
	je	$LN2@sqlite3Mem
; Line 29960
	mov	bl, BYTE PTR [esi+27]
	mov	al, BYTE PTR [ebp+4]
	cmp	bl, al
	jne	SHORT $LN3@sqlite3Mem
; Line 29963
	mov	edx, DWORD PTR [edi+16]
	mov	eax, DWORD PTR [edi+20]
	mov	ecx, DWORD PTR [esi+16]
	push	edx
	mov	edx, DWORD PTR [esi+20]
	push	eax
	mov	eax, DWORD PTR [ebp+8]
	push	ecx
	mov	ecx, DWORD PTR [ebp+12]
	push	edx
	push	eax
	call	ecx
	add	esp, 20					; 00000014H
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
$LN3@sqlite3Mem:
; Line 29970
	mov	ecx, esi
	call	_sqlite3ValueText
; Line 29971
	test	eax, eax
	mov	DWORD PTR _v1$88628[esp+24], eax
	jne	SHORT $LN24@sqlite3Mem
	mov	DWORD PTR _n1$88630[esp+24], eax
	jmp	SHORT $LN25@sqlite3Mem
$LN24@sqlite3Mem:
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR _n1$88630[esp+24], edx
$LN25@sqlite3Mem:
; Line 29973
	mov	al, BYTE PTR [ebp+4]
	mov	ecx, edi
	call	_sqlite3ValueText
; Line 29974
	test	eax, eax
	jne	SHORT $LN26@sqlite3Mem
	xor	ecx, ecx
	jmp	SHORT $LN27@sqlite3Mem
$LN26@sqlite3Mem:
	mov	ecx, DWORD PTR [edi+20]
$LN27@sqlite3Mem:
; Line 29977
	mov	edx, DWORD PTR [ebp+8]
	push	eax
	mov	eax, DWORD PTR _v1$88628[esp+28]
	push	ecx
	mov	ecx, DWORD PTR _n1$88630[esp+32]
	push	eax
	mov	eax, DWORD PTR [ebp+12]
	push	ecx
	push	edx
	call	eax
	mov	ebp, eax
	add	esp, 20					; 00000014H
; Line 29979
	mov	al, bl
	mov	ecx, esi
	call	_sqlite3ValueText
; Line 29980
	mov	al, bl
	mov	ecx, edi
	call	_sqlite3ValueText
	pop	ebx
	pop	edi
	pop	esi
; Line 29981
	mov	eax, ebp
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
$LN2@sqlite3Mem:
; Line 29989
	mov	ebp, DWORD PTR [edi+20]
	mov	ebx, DWORD PTR [esi+20]
	cmp	ebx, ebp
	mov	eax, ebp
	jg	SHORT $LN29@sqlite3Mem
	mov	eax, ebx
$LN29@sqlite3Mem:
	cmp	eax, 4
	mov	ecx, DWORD PTR [edi+16]
	mov	edx, DWORD PTR [esi+16]
	jb	SHORT $LN38@sqlite3Mem
$LL31@sqlite3Mem:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN42@sqlite3Mem
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL31@sqlite3Mem
$LN38@sqlite3Mem:
	test	eax, eax
	je	SHORT $LN33@sqlite3Mem
$LN42@sqlite3Mem:
	movzx	esi, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	esi, edi
	jne	SHORT $LN43@sqlite3Mem
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN33@sqlite3Mem
	movzx	esi, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	esi, edi
	jne	SHORT $LN43@sqlite3Mem
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN33@sqlite3Mem
	movzx	esi, BYTE PTR [edx]
	movzx	edi, BYTE PTR [ecx]
	sub	esi, edi
	jne	SHORT $LN43@sqlite3Mem
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN33@sqlite3Mem
	movzx	esi, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	sub	esi, ecx
	je	SHORT $LN33@sqlite3Mem
$LN43@sqlite3Mem:
	test	esi, esi
	mov	eax, 1
	jg	SHORT $LN35@sqlite3Mem
	or	eax, -1
	jmp	SHORT $LN35@sqlite3Mem
$LN33@sqlite3Mem:
	xor	eax, eax
$LN35@sqlite3Mem:
; Line 29990
	test	eax, eax
	jne	SHORT $LN45@sqlite3Mem
; Line 29991
	sub	ebx, ebp
	mov	eax, ebx
$LN45@sqlite3Mem:
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 29994
	add	esp, 8
	ret	0
_sqlite3MemCompare ENDP
_TEXT	ENDS
PUBLIC	__real@bff0000000000000
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3ValueFromExpr
_TEXT	SEGMENT
_pVal$ = -4						; size = 4
_pExpr$ = 8						; size = 4
_enc$ = 12						; size = 1
_affinity$ = 16						; size = 1
_ppVal$ = 20						; size = 4
_sqlite3ValueFromExpr PROC				; COMDAT
; Line 30188
	push	ecx
	push	esi
; Line 30193
	mov	esi, DWORD PTR _pExpr$[esp+4]
	test	esi, esi
	mov	DWORD PTR _pVal$[esp+8], 0
	jne	SHORT $LN15@sqlite3Val@6
; Line 30194
	mov	eax, DWORD PTR _ppVal$[esp+4]
	mov	DWORD PTR [eax], esi
; Line 30195
	xor	eax, eax
	pop	esi
; Line 30237
	pop	ecx
	ret	0
$LN15@sqlite3Val@6:
	push	ebx
	push	ebp
; Line 30197
	movzx	ebp, BYTE PTR [esi]
; Line 30199
	cmp	ebp, 88					; 00000058H
	push	edi
	je	$LN13@sqlite3Val@6
	cmp	ebp, 125				; 0000007dH
	je	$LN13@sqlite3Val@6
	cmp	ebp, 124				; 0000007cH
	je	$LN13@sqlite3Val@6
; Line 30210
	cmp	ebp, 85					; 00000055H
	jne	SHORT $LN6@sqlite3Val@6
; Line 30211
	mov	edx, DWORD PTR _affinity$[esp+16]
	mov	eax, DWORD PTR _enc$[esp+16]
	lea	ecx, DWORD PTR _pVal$[esp+20]
	push	ecx
	mov	ecx, DWORD PTR [esi+8]
	push	edx
	push	eax
	push	ecx
	call	_sqlite3ValueFromExpr
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN63@sqlite3Val@6
; Line 30212
	mov	eax, DWORD PTR _pVal$[esp+20]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	neg	edx
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _pVal$[esp+20]
	adc	ecx, 0
	neg	ecx
	mov	DWORD PTR [edx+4], ecx
; Line 30213
	mov	eax, DWORD PTR _pVal$[esp+20]
	fld	QWORD PTR [eax+8]
; Line 30229
	mov	ecx, DWORD PTR _ppVal$[esp+16]
	fmul	QWORD PTR __real@bff0000000000000
	pop	edi
	pop	ebp
	pop	ebx
	fstp	QWORD PTR [eax+8]
	mov	edx, DWORD PTR _pVal$[esp+8]
	mov	DWORD PTR [ecx], edx
; Line 30230
	xor	eax, eax
	pop	esi
; Line 30237
	pop	ecx
	ret	0
$LN6@sqlite3Val@6:
; Line 30217
	cmp	ebp, 126				; 0000007eH
	jne	$LN63@sqlite3Val@6
; Line 30219
	call	_sqlite3ValueNew
; Line 30220
	mov	edi, DWORD PTR [esi+24]
	mov	ebx, DWORD PTR [esi+20]
	shr	edi, 1
	sub	edi, 1
	add	ebx, 1
	mov	DWORD PTR _pVal$[esp+20], eax
	call	_sqlite3StrNDup
	mov	esi, eax
; Line 30221
	test	esi, esi
	je	$LN64@sqlite3Val@6
	cmp	DWORD PTR _pVal$[esp+20], 0
	je	$no_mem$88715
; Line 30222
	call	_sqlite3Dequote
; Line 30223
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL62@sqlite3Val@6:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL62@sqlite3Val@6
; Line 30224
	push	OFFSET _sqlite3FreeX
	sub	eax, edx
	push	0
	shr	eax, 1
	push	eax
	push	esi
	call	_sqlite3HexToBlob
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pVal$[esp+36]
	push	eax
	call	_sqlite3VdbeMemSetStr
; Line 30225
	push	esi
	call	_sqlite3FreeX
; Line 30229
	mov	ecx, DWORD PTR _ppVal$[esp+40]
	mov	edx, DWORD PTR _pVal$[esp+44]
	add	esp, 24					; 00000018H
	pop	edi
	pop	ebp
	pop	ebx
	mov	DWORD PTR [ecx], edx
; Line 30230
	xor	eax, eax
	pop	esi
; Line 30237
	pop	ecx
	ret	0
$LN13@sqlite3Val@6:
; Line 30200
	mov	edi, DWORD PTR [esi+24]
	mov	ebx, DWORD PTR [esi+20]
	shr	edi, 1
	test	ebx, ebx
	jne	SHORT $LN19@sqlite3Val@6
	xor	esi, esi
	jmp	SHORT $LN18@sqlite3Val@6
$LN19@sqlite3Val@6:
	lea	ecx, DWORD PTR [edi+1]
	call	_sqlite3MallocRaw
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN18@sqlite3Val@6
	push	edi
	push	ebx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi+edi], 0
$LN18@sqlite3Val@6:
; Line 30201
	call	_sqlite3ValueNew
; Line 30202
	test	esi, esi
	mov	DWORD PTR _pVal$[esp+20], eax
	je	SHORT $LN67@sqlite3Val@6
	test	eax, eax
	je	SHORT $no_mem$88715
; Line 30203
	call	_sqlite3Dequote
; Line 30204
	mov	ecx, DWORD PTR _pVal$[esp+20]
	test	ecx, ecx
	je	SHORT $LN22@sqlite3Val@6
	push	OFFSET _sqlite3FreeX
	push	1
	push	-1
	push	esi
	push	ecx
	call	_sqlite3VdbeMemSetStr
	mov	ecx, DWORD PTR _pVal$[esp+40]
	add	esp, 20					; 00000014H
$LN22@sqlite3Val@6:
; Line 30205
	cmp	ebp, 124				; 0000007cH
	mov	al, BYTE PTR _affinity$[esp+16]
	je	SHORT $LN9@sqlite3Val@6
	cmp	ebp, 125				; 0000007dH
	jne	SHORT $LN10@sqlite3Val@6
$LN9@sqlite3Val@6:
	cmp	al, 98					; 00000062H
	jne	SHORT $LN10@sqlite3Val@6
; Line 30206
	mov	al, 99					; 00000063H
$LN10@sqlite3Val@6:
; Line 30208
	mov	dl, BYTE PTR _enc$[esp+16]
	call	_applyAffinity
$LN63@sqlite3Val@6:
; Line 30229
	mov	ecx, DWORD PTR _ppVal$[esp+16]
	mov	edx, DWORD PTR _pVal$[esp+20]
	pop	edi
	pop	ebp
	pop	ebx
	mov	DWORD PTR [ecx], edx
; Line 30230
	xor	eax, eax
	pop	esi
; Line 30237
	pop	ecx
	ret	0
$no_mem$88715:
; Line 30233
	push	esi
	call	_free
	add	esp, 4
$LN64@sqlite3Val@6:
	mov	eax, DWORD PTR _pVal$[esp+20]
$LN67@sqlite3Val@6:
; Line 30234
	test	eax, eax
	mov	esi, eax
	je	SHORT $LN59@sqlite3Val@6
	push	eax
	call	_sqlite3VdbeMemRelease
	push	esi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	call	_free
	add	esp, 8
$LN59@sqlite3Val@6:
; Line 30235
	mov	eax, DWORD PTR _ppVal$[esp+16]
	pop	edi
	pop	ebp
	pop	ebx
	mov	DWORD PTR [eax], 0
; Line 30236
	mov	eax, 7
	pop	esi
; Line 30237
	pop	ecx
	ret	0
_sqlite3ValueFromExpr ENDP
_TEXT	ENDS
PUBLIC	_pKey2$GSCopy$
PUBLIC	_pKey1$GSCopy$
PUBLIC	_userData$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3VdbeRecordCompare
_TEXT	SEGMENT
_serial_type1$89547 = -188				; size = 4
_idx1$ = -188						; size = 4
_idx2$ = -184						; size = 4
_d1$ = -180						; size = 4
_d2$ = -176						; size = 4
_rc$ = -172						; size = 4
_szHdr1$ = -168						; size = 4
_szHdr2$ = -164						; size = 4
_i$ = -160						; size = 4
tv534 = -156						; size = 4
_userData$GSCopy$ = -152				; size = 4
_serial_type2$89548 = -148				; size = 4
_pKey1$GSCopy$ = -144					; size = 4
_pKey2$GSCopy$ = -140					; size = 4
_nField$ = -136						; size = 4
_mem1$ = -132						; size = 64
_mem2$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_userData$ = 8						; size = 4
_nKey1$ = 12						; size = 4
_pKey1$ = 16						; size = 4
_nKey2$ = 20						; size = 4
_pKey2$ = 24						; size = 4
_sqlite3VdbeRecordCompare PROC				; COMDAT
; Line 32292
	sub	esp, 188				; 000000bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+188], eax
	mov	eax, DWORD PTR _userData$[esp+184]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _pKey2$[esp+196]
	push	edi
	mov	edi, DWORD PTR _pKey1$[esp+200]
; Line 32308
	movzx	ebx, BYTE PTR [edi]
	xor	ecx, ecx
	cmp	ebx, 127				; 0000007fH
	mov	DWORD PTR _userData$GSCopy$[esp+204], eax
	mov	al, BYTE PTR [eax]
	mov	DWORD PTR _pKey1$GSCopy$[esp+204], edi
	mov	DWORD PTR _pKey2$GSCopy$[esp+204], esi
	mov	DWORD PTR _i$[esp+204], ecx
	mov	DWORD PTR _rc$[esp+204], ecx
	mov	BYTE PTR _mem1$[esp+231], al
	mov	BYTE PTR _mem2$[esp+231], al
	mov	DWORD PTR _szHdr1$[esp+204], ebx
	ja	SHORT $LN18@sqlite3Vdb@47
	lea	ebp, DWORD PTR [ecx+1]
	jmp	SHORT $LN19@sqlite3Vdb@47
$LN18@sqlite3Vdb@47:
	lea	eax, DWORD PTR _szHdr1$[esp+204]
	push	eax
	call	_sqlite3GetVarint32
	mov	ebx, DWORD PTR _szHdr1$[esp+208]
	add	esp, 4
	mov	ebp, eax
$LN19@sqlite3Vdb@47:
; Line 32310
	movzx	eax, BYTE PTR [esi]
	cmp	eax, 127				; 0000007fH
	mov	DWORD PTR _d1$[esp+204], ebx
	mov	DWORD PTR _szHdr2$[esp+204], eax
	ja	SHORT $LN20@sqlite3Vdb@47
	mov	DWORD PTR _idx2$[esp+204], 1
	jmp	SHORT $LN21@sqlite3Vdb@47
$LN20@sqlite3Vdb@47:
	lea	ecx, DWORD PTR _szHdr2$[esp+204]
	push	ecx
	mov	edi, esi
	call	_sqlite3GetVarint32
	mov	DWORD PTR _idx2$[esp+208], eax
	mov	eax, DWORD PTR _szHdr2$[esp+208]
	add	esp, 4
$LN21@sqlite3Vdb@47:
; Line 32313
	cmp	ebp, ebx
	mov	ecx, DWORD PTR _userData$GSCopy$[esp+204]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _d2$[esp+204], eax
	mov	DWORD PTR _nField$[esp+204], edx
	jae	$LN48@sqlite3Vdb@47
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv534[esp+204], ecx
	jmp	SHORT $LN15@sqlite3Vdb@47
	npad	11
$LL46@sqlite3Vdb@47:
; Line 32311
	mov	ebp, DWORD PTR _idx1$[esp+204]
	mov	eax, DWORD PTR _szHdr2$[esp+204]
	mov	esi, DWORD PTR _pKey2$GSCopy$[esp+204]
$LN15@sqlite3Vdb@47:
; Line 32313
	cmp	DWORD PTR _idx2$[esp+204], eax
	jae	$LN48@sqlite3Vdb@47
; Line 32318
	mov	eax, DWORD PTR _pKey1$GSCopy$[esp+204]
	movzx	ebx, BYTE PTR [eax+ebp]
	cmp	ebx, 127				; 0000007fH
	lea	edi, DWORD PTR [eax+ebp]
	mov	DWORD PTR _serial_type1$89547[esp+204], ebx
	ja	SHORT $LN22@sqlite3Vdb@47
	mov	eax, 1
	jmp	SHORT $LN23@sqlite3Vdb@47
$LN22@sqlite3Vdb@47:
	lea	ecx, DWORD PTR _serial_type1$89547[esp+204]
	push	ecx
	call	_sqlite3GetVarint32
	mov	ebx, DWORD PTR _serial_type1$89547[esp+208]
	add	esp, 4
$LN23@sqlite3Vdb@47:
; Line 32319
	mov	edx, DWORD PTR _d1$[esp+204]
	add	ebp, eax
	cmp	edx, DWORD PTR _nKey1$[esp+200]
	mov	DWORD PTR _idx1$[esp+204], ebp
	jb	SHORT $LN47@sqlite3Vdb@47
	cmp	ebx, 12					; 0000000cH
	jb	SHORT $LN29@sqlite3Vdb@47
	lea	eax, DWORD PTR [ebx-12]
	shr	eax, 1
	jmp	SHORT $LN28@sqlite3Vdb@47
$LN29@sqlite3Vdb@47:
	movzx	eax, BYTE PTR ?aSize@?3??sqlite3VdbeSerialTypeLen@@9@9[ebx]
$LN28@sqlite3Vdb@47:
	test	eax, eax
	jg	$LN48@sqlite3Vdb@47
$LN47@sqlite3Vdb@47:
; Line 32320
	mov	eax, DWORD PTR _idx2$[esp+204]
	movzx	ebp, BYTE PTR [esi+eax]
	cmp	ebp, 127				; 0000007fH
	lea	edi, DWORD PTR [esi+eax]
	mov	DWORD PTR _serial_type2$89548[esp+204], ebp
	ja	SHORT $LN24@sqlite3Vdb@47
	mov	eax, 1
	jmp	SHORT $LN25@sqlite3Vdb@47
$LN24@sqlite3Vdb@47:
	lea	ecx, DWORD PTR _serial_type2$89548[esp+204]
	push	ecx
	call	_sqlite3GetVarint32
	mov	ebp, DWORD PTR _serial_type2$89548[esp+208]
	add	esp, 4
$LN25@sqlite3Vdb@47:
; Line 32321
	mov	edx, DWORD PTR _d2$[esp+204]
	add	DWORD PTR _idx2$[esp+204], eax
	cmp	edx, DWORD PTR _nKey2$[esp+200]
	jb	SHORT $LN12@sqlite3Vdb@47
	cmp	ebp, 12					; 0000000cH
	jb	SHORT $LN33@sqlite3Vdb@47
	lea	eax, DWORD PTR [ebp-12]
	shr	eax, 1
	jmp	SHORT $LN32@sqlite3Vdb@47
$LN33@sqlite3Vdb@47:
	movzx	eax, BYTE PTR ?aSize@?3??sqlite3VdbeSerialTypeLen@@9@9[ebp]
$LN32@sqlite3Vdb@47:
	test	eax, eax
	jg	$LN48@sqlite3Vdb@47
$LN12@sqlite3Vdb@47:
; Line 32325
	mov	eax, DWORD PTR _pKey1$GSCopy$[esp+204]
	mov	ecx, DWORD PTR _d1$[esp+204]
	add	ecx, eax
	lea	esi, DWORD PTR _mem1$[esp+204]
	mov	eax, ebx
	call	_sqlite3VdbeSerialGet
; Line 32326
	mov	edx, DWORD PTR _pKey2$GSCopy$[esp+204]
	add	DWORD PTR _d1$[esp+204], eax
	mov	edi, DWORD PTR _d2$[esp+204]
	lea	ecx, DWORD PTR [edx+edi]
	lea	esi, DWORD PTR _mem2$[esp+204]
	mov	eax, ebp
	call	_sqlite3VdbeSerialGet
	add	edi, eax
	mov	DWORD PTR _d2$[esp+204], edi
; Line 32330
	mov	edi, DWORD PTR _i$[esp+204]
	cmp	edi, DWORD PTR _nField$[esp+204]
	jge	SHORT $LN26@sqlite3Vdb@47
	mov	eax, DWORD PTR tv534[esp+204]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN27@sqlite3Vdb@47
$LN26@sqlite3Vdb@47:
	xor	eax, eax
$LN27@sqlite3Vdb@47:
	push	eax
	lea	eax, DWORD PTR _mem2$[esp+208]
	lea	ecx, DWORD PTR _mem1$[esp+208]
	call	_sqlite3MemCompare
	add	esp, 4
; Line 32331
	test	BYTE PTR _mem1$[esp+228], 64		; 00000040H
	mov	esi, eax
	mov	DWORD PTR _rc$[esp+204], esi
	je	SHORT $LN11@sqlite3Vdb@47
	lea	ecx, DWORD PTR _mem1$[esp+204]
	push	ecx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN11@sqlite3Vdb@47:
; Line 32332
	test	BYTE PTR _mem2$[esp+228], 64		; 00000040H
	je	SHORT $LN10@sqlite3Vdb@47
	lea	edx, DWORD PTR _mem2$[esp+204]
	push	edx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN10@sqlite3Vdb@47:
; Line 32333
	test	esi, esi
	jne	SHORT $LN8@sqlite3Vdb@47
	mov	eax, DWORD PTR _szHdr1$[esp+204]
; Line 32336
	add	DWORD PTR tv534[esp+204], 4
	add	edi, 1
	cmp	DWORD PTR _idx1$[esp+204], eax
	mov	DWORD PTR _i$[esp+204], edi
	jb	$LL46@sqlite3Vdb@47
; Line 32343
	cmp	DWORD PTR _rc$[esp+204], esi
	jne	SHORT $LN51@sqlite3Vdb@47
$LN48@sqlite3Vdb@47:
; Line 32344
	mov	ecx, DWORD PTR _userData$GSCopy$[esp+204]
	cmp	BYTE PTR [ecx+1], 0
; Line 32345
	jne	SHORT $LN52@sqlite3Vdb@47
; Line 32346
	mov	edx, DWORD PTR _nKey1$[esp+200]
	cmp	DWORD PTR _d1$[esp+204], edx
	jae	SHORT $LN5@sqlite3Vdb@47
; Line 32347
	mov	eax, 1
	jmp	SHORT $LN1@sqlite3Vdb@47
$LN5@sqlite3Vdb@47:
; Line 32348
	mov	eax, DWORD PTR _nKey2$[esp+200]
	cmp	DWORD PTR _d2$[esp+204], eax
	jae	SHORT $LN45@sqlite3Vdb@47
$LN52@sqlite3Vdb@47:
; Line 32349
	or	eax, -1
; Line 32351
	jmp	SHORT $LN1@sqlite3Vdb@47
$LN51@sqlite3Vdb@47:
; Line 32348
	mov	edi, DWORD PTR _i$[esp+204]
	mov	esi, DWORD PTR _rc$[esp+204]
$LN8@sqlite3Vdb@47:
; Line 32352
	mov	ecx, DWORD PTR _userData$GSCopy$[esp+204]
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	je	SHORT $LN42@sqlite3Vdb@47
	cmp	edi, DWORD PTR [ecx+4]
	jge	SHORT $LN42@sqlite3Vdb@47
	cmp	BYTE PTR [eax+edi], 0
	je	SHORT $LN42@sqlite3Vdb@47
; Line 32353
	neg	esi
$LN42@sqlite3Vdb@47:
	mov	eax, esi
	jmp	SHORT $LN1@sqlite3Vdb@47
$LN45@sqlite3Vdb@47:
; Line 32356
	mov	eax, DWORD PTR _rc$[esp+204]
$LN1@sqlite3Vdb@47:
; Line 32357
	mov	ecx, DWORD PTR __$ArrayPad$[esp+204]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 188				; 000000bcH
	ret	0
_sqlite3VdbeRecordCompare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_value_blob
_TEXT	SEGMENT
_pVal$ = 8						; size = 4
_sqlite3_value_blob PROC				; COMDAT
; Line 32517
	push	esi
; Line 32519
	mov	esi, DWORD PTR _pVal$[esp]
	test	BYTE PTR [esi+24], 18			; 00000012H
	je	SHORT $LN2@sqlite3_va@4
; Line 32520
	call	_sqlite3VdbeMemExpandBlob
; Line 32521
	mov	ax, WORD PTR [esi+24]
	and	ax, 65533				; 0000fffdH
; Line 32522
	or	ax, 16					; 00000010H
	mov	WORD PTR [esi+24], ax
; Line 32523
	mov	eax, DWORD PTR [esi+16]
	pop	esi
; Line 32527
	ret	0
$LN2@sqlite3_va@4:
; Line 32525
	mov	ecx, esi
	mov	eax, 1
	pop	esi
	jmp	_sqlite3ValueText
_sqlite3_value_blob ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _columnMallocFailure
_TEXT	SEGMENT
_columnMallocFailure PROC				; COMDAT
; _pStmt$ = esi
; Line 32971
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	eax, DWORD PTR [esi+124]
	je	SHORT $LN3@columnMall
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN3@columnMall
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN3@columnMall:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [esi+124], eax
; Line 32972
	ret	0
_columnMallocFailure ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_blob
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_blob PROC				; COMDAT
; Line 32978
	push	esi
	push	edi
; Line 32980
	mov	edi, DWORD PTR _pStmt$[esp+4]
	test	edi, edi
	je	SHORT $LN7@sqlite3_co@7
	cmp	BYTE PTR [edi+560], 0
	je	SHORT $LN7@sqlite3_co@7
	mov	ecx, DWORD PTR [edi+544]
	jmp	SHORT $LN9@sqlite3_co@7
$LN7@sqlite3_co@7:
	xor	ecx, ecx
$LN9@sqlite3_co@7:
	mov	eax, DWORD PTR _i$[esp+4]
	cmp	eax, ecx
	jge	SHORT $LN3@sqlite3_co@7
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@7
	sub	eax, ecx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [edi+40]
	mov	esi, eax
	jmp	SHORT $LN5@sqlite3_co@7
$LN3@sqlite3_co@7:
	mov	eax, DWORD PTR [edi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	esi, OFFSET ?nullMem@?2??columnMem@@9@9
$LN5@sqlite3_co@7:
	test	BYTE PTR [esi+24], 18			; 00000012H
	je	SHORT $LN12@sqlite3_co@7
	call	_sqlite3VdbeMemExpandBlob
	mov	ax, WORD PTR [esi+24]
	and	ax, 65533				; 0000fffdH
	or	ax, 16					; 00000010H
	mov	WORD PTR [esi+24], ax
	mov	esi, DWORD PTR [esi+16]
	jmp	SHORT $LN11@sqlite3_co@7
$LN12@sqlite3_co@7:
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	mov	esi, eax
$LN11@sqlite3_co@7:
; Line 32985
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	eax, DWORD PTR [edi+124]
	je	SHORT $LN19@sqlite3_co@7
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN19@sqlite3_co@7
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN19@sqlite3_co@7:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [edi+124], eax
	pop	edi
; Line 32986
	mov	eax, esi
	pop	esi
; Line 32987
	ret	0
_sqlite3_column_blob ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_bytes
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_bytes PROC				; COMDAT
; Line 32988
	push	ebx
; Line 32989
	mov	ebx, DWORD PTR _pStmt$[esp]
	test	ebx, ebx
	push	edi
	je	SHORT $LN7@sqlite3_co@8
	cmp	BYTE PTR [ebx+560], 0
	je	SHORT $LN7@sqlite3_co@8
	mov	ecx, DWORD PTR [ebx+544]
	jmp	SHORT $LN9@sqlite3_co@8
$LN7@sqlite3_co@8:
	xor	ecx, ecx
$LN9@sqlite3_co@8:
	mov	eax, DWORD PTR _i$[esp+4]
	cmp	eax, ecx
	push	esi
	jge	SHORT $LN3@sqlite3_co@8
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@8
	sub	eax, ecx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [ebx+40]
	mov	esi, eax
	jmp	SHORT $LN5@sqlite3_co@8
$LN3@sqlite3_co@8:
	mov	eax, DWORD PTR [ebx]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	esi, OFFSET ?nullMem@?2??columnMem@@9@9
$LN5@sqlite3_co@8:
	test	BYTE PTR [esi+24], 16			; 00000010H
	jne	SHORT $LN15@sqlite3_co@8
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN15@sqlite3_co@8
	xor	edi, edi
	jmp	SHORT $LN17@sqlite3_co@8
$LN15@sqlite3_co@8:
	test	WORD PTR [esi+24], 2048			; 00000800H
	mov	edi, DWORD PTR [esi+20]
	je	SHORT $LN17@sqlite3_co@8
	add	edi, DWORD PTR [esi]
$LN17@sqlite3_co@8:
; Line 32990
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	eax, DWORD PTR [ebx+124]
	pop	esi
	je	SHORT $LN21@sqlite3_co@8
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN21@sqlite3_co@8
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN21@sqlite3_co@8:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [ebx+124], eax
; Line 32991
	mov	eax, edi
	pop	edi
	pop	ebx
; Line 32992
	ret	0
_sqlite3_column_bytes ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_bytes16
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_bytes16 PROC				; COMDAT
; Line 32993
	push	ebx
	push	esi
	push	edi
; Line 32994
	mov	edi, DWORD PTR _pStmt$[esp+8]
	test	edi, edi
	je	SHORT $LN7@sqlite3_co@9
	cmp	BYTE PTR [edi+560], 0
	je	SHORT $LN7@sqlite3_co@9
	mov	ecx, DWORD PTR [edi+544]
	jmp	SHORT $LN9@sqlite3_co@9
$LN7@sqlite3_co@9:
	xor	ecx, ecx
$LN9@sqlite3_co@9:
	mov	eax, DWORD PTR _i$[esp+8]
	cmp	eax, ecx
	jge	SHORT $LN3@sqlite3_co@9
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@9
	sub	eax, ecx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [edi+40]
	mov	esi, eax
	jmp	SHORT $LN5@sqlite3_co@9
$LN3@sqlite3_co@9:
	mov	eax, DWORD PTR [edi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	esi, OFFSET ?nullMem@?2??columnMem@@9@9
$LN5@sqlite3_co@9:
	test	BYTE PTR [esi+24], 16			; 00000010H
	jne	SHORT $LN15@sqlite3_co@9
	mov	al, 2
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN15@sqlite3_co@9
	xor	ebx, ebx
	jmp	SHORT $LN17@sqlite3_co@9
$LN15@sqlite3_co@9:
	test	WORD PTR [esi+24], 2048			; 00000800H
	mov	ebx, DWORD PTR [esi+20]
	je	SHORT $LN17@sqlite3_co@9
	add	ebx, DWORD PTR [esi]
$LN17@sqlite3_co@9:
; Line 32995
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	eax, DWORD PTR [edi+124]
	je	SHORT $LN21@sqlite3_co@9
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN21@sqlite3_co@9
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN21@sqlite3_co@9:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [edi+124], eax
	pop	edi
	pop	esi
; Line 32996
	mov	eax, ebx
	pop	ebx
; Line 32997
	ret	0
_sqlite3_column_bytes16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_double
_TEXT	SEGMENT
_val$ = -8						; size = 8
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_double PROC				; COMDAT
; Line 32998
	sub	esp, 8
	push	edi
; Line 32999
	mov	edi, DWORD PTR _pStmt$[esp+8]
	test	edi, edi
	je	SHORT $LN7@sqlite3_co@10
	cmp	BYTE PTR [edi+560], 0
	je	SHORT $LN7@sqlite3_co@10
	mov	ecx, DWORD PTR [edi+544]
	jmp	SHORT $LN9@sqlite3_co@10
$LN7@sqlite3_co@10:
	xor	ecx, ecx
$LN9@sqlite3_co@10:
	mov	eax, DWORD PTR _i$[esp+8]
	cmp	eax, ecx
	jge	SHORT $LN3@sqlite3_co@10
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@10
	sub	eax, ecx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [edi+40]
	jmp	SHORT $LN5@sqlite3_co@10
$LN3@sqlite3_co@10:
	mov	eax, DWORD PTR [edi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	eax, OFFSET ?nullMem@?2??columnMem@@9@9
$LN5@sqlite3_co@10:
	push	esi
	mov	esi, eax
	call	_sqlite3VdbeRealValue
	fstp	QWORD PTR _val$[esp+16]
; Line 33000
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	eax, DWORD PTR [edi+124]
	pop	esi
	je	SHORT $LN15@sqlite3_co@10
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN15@sqlite3_co@10
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN15@sqlite3_co@10:
; Line 33001
	fld	QWORD PTR _val$[esp+12]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [edi+124], eax
	pop	edi
; Line 33002
	add	esp, 8
	ret	0
_sqlite3_column_double ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_int
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_int PROC				; COMDAT
; Line 33003
	push	esi
	push	edi
; Line 33004
	mov	edi, DWORD PTR _pStmt$[esp+4]
	test	edi, edi
	je	SHORT $LN7@sqlite3_co@11
	cmp	BYTE PTR [edi+560], 0
	je	SHORT $LN7@sqlite3_co@11
	mov	ecx, DWORD PTR [edi+544]
	jmp	SHORT $LN9@sqlite3_co@11
$LN7@sqlite3_co@11:
	xor	ecx, ecx
$LN9@sqlite3_co@11:
	mov	eax, DWORD PTR _i$[esp+4]
	cmp	eax, ecx
	jge	SHORT $LN3@sqlite3_co@11
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@11
	sub	eax, ecx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [edi+40]
	jmp	SHORT $LN5@sqlite3_co@11
$LN3@sqlite3_co@11:
	mov	eax, DWORD PTR [edi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	eax, OFFSET ?nullMem@?2??columnMem@@9@9
$LN5@sqlite3_co@11:
	mov	esi, eax
	call	_sqlite3VdbeIntValue
; Line 33005
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, eax
	mov	eax, DWORD PTR [edi+124]
	je	SHORT $LN15@sqlite3_co@11
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN15@sqlite3_co@11
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN15@sqlite3_co@11:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [edi+124], eax
	pop	edi
; Line 33006
	mov	eax, esi
	pop	esi
; Line 33007
	ret	0
_sqlite3_column_int ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_int64
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_int64 PROC				; COMDAT
; Line 33008
	push	ebx
	push	esi
	push	edi
; Line 33009
	mov	edi, DWORD PTR _pStmt$[esp+8]
	test	edi, edi
	je	SHORT $LN7@sqlite3_co@12
	cmp	BYTE PTR [edi+560], 0
	je	SHORT $LN7@sqlite3_co@12
	mov	ecx, DWORD PTR [edi+544]
	jmp	SHORT $LN9@sqlite3_co@12
$LN7@sqlite3_co@12:
	xor	ecx, ecx
$LN9@sqlite3_co@12:
	mov	eax, DWORD PTR _i$[esp+8]
	cmp	eax, ecx
	jge	SHORT $LN3@sqlite3_co@12
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@12
	sub	eax, ecx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [edi+40]
	jmp	SHORT $LN5@sqlite3_co@12
$LN3@sqlite3_co@12:
	mov	eax, DWORD PTR [edi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	eax, OFFSET ?nullMem@?2??columnMem@@9@9
$LN5@sqlite3_co@12:
	mov	esi, eax
	call	_sqlite3VdbeIntValue
; Line 33010
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, eax
	mov	eax, DWORD PTR [edi+124]
	mov	ebx, edx
	je	SHORT $LN15@sqlite3_co@12
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN15@sqlite3_co@12
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN15@sqlite3_co@12:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [edi+124], eax
	pop	edi
; Line 33011
	mov	eax, esi
	pop	esi
	mov	edx, ebx
	pop	ebx
; Line 33012
	ret	0
_sqlite3_column_int64 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_text
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_text PROC				; COMDAT
; Line 33013
	push	esi
; Line 33014
	mov	esi, DWORD PTR _pStmt$[esp]
	test	esi, esi
	push	edi
	je	SHORT $LN7@sqlite3_co@13
	cmp	BYTE PTR [esi+560], 0
	je	SHORT $LN7@sqlite3_co@13
	mov	ecx, DWORD PTR [esi+544]
	jmp	SHORT $LN9@sqlite3_co@13
$LN7@sqlite3_co@13:
	xor	ecx, ecx
$LN9@sqlite3_co@13:
	mov	eax, DWORD PTR _i$[esp+4]
	cmp	eax, ecx
	jge	SHORT $LN3@sqlite3_co@13
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@13
	sub	eax, ecx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [esi+40]
	mov	ecx, eax
	jmp	SHORT $LN5@sqlite3_co@13
$LN3@sqlite3_co@13:
	mov	eax, DWORD PTR [esi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	ecx, OFFSET ?nullMem@?2??columnMem@@9@9
$LN5@sqlite3_co@13:
	mov	al, 1
	call	_sqlite3ValueText
; Line 33015
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	edi, eax
	mov	eax, DWORD PTR [esi+124]
	je	SHORT $LN15@sqlite3_co@13
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN15@sqlite3_co@13
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN15@sqlite3_co@13:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [esi+124], eax
; Line 33016
	mov	eax, edi
	pop	edi
	pop	esi
; Line 33017
	ret	0
_sqlite3_column_text ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_text16
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_sqlite3_column_text16 PROC				; COMDAT
; Line 33022
	push	esi
; Line 33023
	mov	esi, DWORD PTR _pStmt$[esp]
	test	esi, esi
	push	edi
	je	SHORT $LN7@sqlite3_co@14
	cmp	BYTE PTR [esi+560], 0
	je	SHORT $LN7@sqlite3_co@14
	mov	ecx, DWORD PTR [esi+544]
	jmp	SHORT $LN9@sqlite3_co@14
$LN7@sqlite3_co@14:
	xor	ecx, ecx
$LN9@sqlite3_co@14:
	mov	eax, DWORD PTR _i$[esp+4]
	cmp	eax, ecx
	jge	SHORT $LN3@sqlite3_co@14
	test	eax, eax
	jl	SHORT $LN3@sqlite3_co@14
	sub	eax, ecx
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR [esi+40]
	mov	ecx, eax
	jmp	SHORT $LN5@sqlite3_co@14
$LN3@sqlite3_co@14:
	mov	eax, DWORD PTR [esi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	ecx, OFFSET ?nullMem@?2??columnMem@@9@9
$LN5@sqlite3_co@14:
	mov	al, 2
	call	_sqlite3ValueText
; Line 33024
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	edi, eax
	mov	eax, DWORD PTR [esi+124]
	je	SHORT $LN15@sqlite3_co@14
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN15@sqlite3_co@14
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN15@sqlite3_co@14:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [esi+124], eax
; Line 33025
	mov	eax, edi
	pop	edi
	pop	esi
; Line 33026
	ret	0
_sqlite3_column_text16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _columnName
_TEXT	SEGMENT
_xFunc$ = 8						; size = 4
_useType$ = 12						; size = 4
_columnName PROC					; COMDAT
; _pStmt$ = ecx
; _N$ = edx
; Line 33063
	test	ecx, ecx
	je	SHORT $LN1@columnName
	mov	eax, DWORD PTR [ecx+544]
; Line 33065
	cmp	edx, eax
	jge	SHORT $LN1@columnName
	test	edx, edx
	jl	SHORT $LN1@columnName
; Line 33069
	imul	eax, DWORD PTR _useType$[esp-4]
	add	eax, edx
	shl	eax, 6
	add	eax, DWORD PTR [ecx+48]
	push	esi
	push	eax
	call	DWORD PTR _xFunc$[esp+4]
	add	esp, 4
; Line 33074
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, eax
	je	SHORT $LN9@columnName
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN9@columnName
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
$LN9@columnName:
; Line 33075
	mov	eax, esi
	pop	esi
; Line 33076
	ret	0
$LN1@columnName:
; Line 33066
	xor	eax, eax
; Line 33076
	ret	0
_columnName ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_name
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_N$ = 12						; size = 4
_sqlite3_column_name PROC				; COMDAT
; Line 33084
	mov	edx, DWORD PTR _N$[esp-4]
	mov	ecx, DWORD PTR _pStmt$[esp-4]
	push	0
	push	OFFSET _sqlite3_value_text
	call	_columnName
	add	esp, 8
; Line 33085
	ret	0
_sqlite3_column_name ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_name16
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_N$ = 12						; size = 4
_sqlite3_column_name16 PROC				; COMDAT
; Line 33089
	mov	edx, DWORD PTR _N$[esp-4]
	mov	ecx, DWORD PTR _pStmt$[esp-4]
	push	0
	push	OFFSET _sqlite3_value_text16
	call	_columnName
	add	esp, 8
; Line 33090
	ret	0
_sqlite3_column_name16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_decltype
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_N$ = 12						; size = 4
_sqlite3_column_decltype PROC				; COMDAT
; Line 33099
	mov	edx, DWORD PTR _N$[esp-4]
	mov	ecx, DWORD PTR _pStmt$[esp-4]
	push	1
	push	OFFSET _sqlite3_value_text
	call	_columnName
	add	esp, 8
; Line 33100
	ret	0
_sqlite3_column_decltype ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_column_decltype16
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_N$ = 12						; size = 4
_sqlite3_column_decltype16 PROC				; COMDAT
; Line 33104
	mov	edx, DWORD PTR _N$[esp-4]
	mov	ecx, DWORD PTR _pStmt$[esp-4]
	push	1
	push	OFFSET _sqlite3_value_text16
	call	_columnName
	add	esp, 8
; Line 33105
	ret	0
_sqlite3_column_decltype16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _bindText
_TEXT	SEGMENT
_zData$ = 8						; size = 4
_nData$ = 12						; size = 4
_xDel$ = 16						; size = 4
_encoding$ = 20						; size = 4
_bindText PROC						; COMDAT
; _pStmt$ = ecx
; _i$ = eax
; Line 33199
	push	ebp
	mov	ebp, DWORD PTR _zData$[esp]
	push	esi
	push	edi
	mov	esi, ecx
	mov	edi, eax
; Line 33204
	call	_vdbeUnbind
; Line 33205
	test	eax, eax
	jne	SHORT $LN4@bindText
	test	ebp, ebp
	je	SHORT $LN4@bindText
; Line 33208
	mov	eax, DWORD PTR [esi+64]
; Line 33209
	mov	ecx, DWORD PTR _xDel$[esp+8]
	mov	edx, DWORD PTR _encoding$[esp+8]
	push	ebx
	push	ecx
	shl	edi, 6
	lea	ebx, DWORD PTR [eax+edi-64]
	mov	eax, DWORD PTR _nData$[esp+16]
	push	edx
	push	eax
	push	ebp
	push	ebx
	call	_sqlite3VdbeMemSetStr
	mov	edi, eax
	add	esp, 20					; 00000014H
; Line 33210
	test	edi, edi
	jne	SHORT $LN8@bindText
	cmp	DWORD PTR _encoding$[esp+12], eax
	je	SHORT $LN8@bindText
; Line 33211
	test	BYTE PTR [ebx+24], 2
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+20]
	movzx	eax, BYTE PTR [eax+121]
	je	SHORT $LN6@bindText
	movzx	ecx, BYTE PTR [ebx+27]
	cmp	ecx, eax
	je	SHORT $LN6@bindText
	push	eax
	push	ebx
	call	_sqlite3VdbeMemTranslate
	add	esp, 8
	mov	edi, eax
	jmp	SHORT $LN8@bindText
$LN6@bindText:
	xor	edi, edi
$LN8@bindText:
; Line 33214
	mov	eax, DWORD PTR [esi]
	push	0
	push	edi
	call	_sqlite3Error
; Line 33215
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	mov	ecx, edi
	call	_sqlite3ApiExit
	pop	ebx
$LN4@bindText:
	pop	edi
	pop	esi
	pop	ebp
; Line 33216
	ret	0
_bindText ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_blob
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_zData$ = 16						; size = 4
_nData$ = 20						; size = 4
_xDel$ = 24						; size = 4
_sqlite3_bind_blob PROC					; COMDAT
; Line 33228
	push	esi
; Line 33229
	mov	esi, DWORD PTR _pStmt$[esp]
	push	edi
	mov	edi, DWORD PTR _i$[esp+4]
	mov	eax, edi
	call	_vdbeUnbind
	test	eax, eax
	jne	SHORT $LN6@sqlite3_bi@8
	mov	ecx, DWORD PTR _zData$[esp+4]
	test	ecx, ecx
	je	SHORT $LN6@sqlite3_bi@8
	mov	edx, DWORD PTR _xDel$[esp+4]
	mov	eax, DWORD PTR [esi+64]
	push	edx
	mov	edx, DWORD PTR _nData$[esp+8]
	push	0
	push	edx
	shl	edi, 6
	lea	eax, DWORD PTR [eax+edi-64]
	push	ecx
	push	eax
	call	_sqlite3VdbeMemSetStr
	mov	edi, eax
	mov	eax, DWORD PTR [esi]
	push	0
	push	edi
	call	_sqlite3Error
	mov	esi, DWORD PTR [esi]
	add	esp, 28					; 0000001cH
	mov	ecx, edi
	call	_sqlite3ApiExit
$LN6@sqlite3_bi@8:
	pop	edi
	pop	esi
; Line 33230
	ret	0
_sqlite3_bind_blob ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_int
_TEXT	SEGMENT
_p$ = 8							; size = 4
_i$ = 12						; size = 4
_iValue$ = 16						; size = 4
_sqlite3_bind_int PROC					; COMDAT
; Line 33240
	push	ebx
	push	esi
; Line 33241
	mov	esi, DWORD PTR _p$[esp+4]
	push	edi
	mov	edi, DWORD PTR _i$[esp+8]
	mov	eax, edi
	call	_vdbeUnbind
	mov	ebx, eax
	test	ebx, ebx
	jne	SHORT $LN6@sqlite3_bi@9
	mov	eax, DWORD PTR [esi+64]
	shl	edi, 6
	lea	esi, DWORD PTR [eax+edi-64]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	eax, DWORD PTR _iValue$[esp+12]
	cdq
	mov	DWORD PTR [esi], eax
	add	esp, 4
	mov	DWORD PTR [esi+4], edx
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
	mov	eax, ebx
$LN6@sqlite3_bi@9:
	pop	edi
	pop	esi
	pop	ebx
; Line 33242
	ret	0
_sqlite3_bind_int ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_text
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_zData$ = 16						; size = 4
_nData$ = 20						; size = 4
_xDel$ = 24						; size = 4
_sqlite3_bind_text PROC					; COMDAT
; Line 33262
	mov	eax, DWORD PTR _xDel$[esp-4]
	mov	ecx, DWORD PTR _nData$[esp-4]
	mov	edx, DWORD PTR _zData$[esp-4]
	push	1
	push	eax
	mov	eax, DWORD PTR _i$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR _pStmt$[esp+8]
	push	edx
	call	_bindText
	add	esp, 16					; 00000010H
; Line 33263
	ret	0
_sqlite3_bind_text ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_bind_text16
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_i$ = 12						; size = 4
_zData$ = 16						; size = 4
_nData$ = 20						; size = 4
_xDel$ = 24						; size = 4
_sqlite3_bind_text16 PROC				; COMDAT
; Line 33272
	mov	eax, DWORD PTR _xDel$[esp-4]
	mov	ecx, DWORD PTR _nData$[esp-4]
	mov	edx, DWORD PTR _zData$[esp-4]
	push	2
	push	eax
	mov	eax, DWORD PTR _i$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR _pStmt$[esp+8]
	push	edx
	call	_bindText
	add	esp, 16					; 00000010H
; Line 33273
	ret	0
_sqlite3_bind_text16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprCollSeq
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_sqlite3ExprCollSeq PROC				; COMDAT
; _pExpr$ = ecx
; Line 38953
	xor	eax, eax
; Line 38954
	test	ecx, ecx
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp]
	je	SHORT $LN1@sqlite3Exp@18
	push	esi
	npad	4
$LL11@sqlite3Exp@18:
; Line 38956
	cmp	BYTE PTR [ecx], 31			; 0000001fH
	mov	esi, DWORD PTR [ecx+4]
	jne	SHORT $LN2@sqlite3Exp@18
	test	esi, esi
	jne	SHORT $LN14@sqlite3Exp@18
; Line 38957
	mov	ecx, DWORD PTR [ecx+8]
	xor	eax, eax
	test	ecx, ecx
	jne	SHORT $LL11@sqlite3Exp@18
	pop	esi
	pop	ebp
; Line 38964
	ret	0
$LN2@sqlite3Exp@18:
; Line 38960
	test	esi, esi
	je	SHORT $LN17@sqlite3Exp@18
$LN14@sqlite3Exp@18:
	push	ebx
	mov	ebx, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR [ebp]
	push	-1
	push	ebx
	mov	eax, esi
	call	_sqlite3GetCollSeq
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@sqlite3Exp@18
	cmp	DWORD PTR [ebp+24], eax
	jne	SHORT $LN6@sqlite3Exp@18
	push	ebx
	push	OFFSET ??_C@_0BP@CGLMEPGG@no?5such?5collation?5sequence?3?5?$CFs?$AA@
	mov	edi, ebp
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN6@sqlite3Exp@18:
	add	DWORD PTR [ebp+24], 1
	pop	edi
	pop	ebx
; Line 38961
	xor	eax, eax
	pop	esi
$LN1@sqlite3Exp@18:
	pop	ebp
; Line 38964
	ret	0
$LN16@sqlite3Exp@18:
	pop	edi
	pop	ebx
; Line 38963
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 38964
	ret	0
$LN17@sqlite3Exp@18:
; Line 38963
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 38964
	ret	0
_sqlite3ExprCollSeq ENDP
_TEXT	ENDS
PUBLIC	_sqlite3BinaryCompareCollSeq
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3BinaryCompareCollSeq
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_pLeft$ = 12						; size = 4
_pRight$ = 16						; size = 4
_sqlite3BinaryCompareCollSeq PROC			; COMDAT
; Line 39066
	mov	ecx, DWORD PTR _pLeft$[esp-4]
	mov	eax, 256				; 00000100H
	test	WORD PTR [ecx+2], ax
	je	SHORT $LN5@sqlite3Bin
; Line 39078
	mov	eax, DWORD PTR [ecx+4]
; Line 39079
	ret	0
$LN5@sqlite3Bin:
	push	edi
; Line 39069
	mov	edi, DWORD PTR _pRight$[esp]
	test	edi, edi
	je	SHORT $LN3@sqlite3Bin
	test	WORD PTR [edi+2], ax
	je	SHORT $LN3@sqlite3Bin
; Line 39078
	mov	eax, DWORD PTR [edi+4]
	pop	edi
; Line 39079
	ret	0
$LN3@sqlite3Bin:
	push	esi
; Line 39073
	mov	esi, DWORD PTR _pParse$[esp+4]
	push	esi
	call	_sqlite3ExprCollSeq
	add	esp, 4
; Line 39074
	test	eax, eax
	jne	SHORT $LN10@sqlite3Bin
; Line 39075
	push	esi
	mov	ecx, edi
	call	_sqlite3ExprCollSeq
	add	esp, 4
$LN10@sqlite3Bin:
	pop	esi
	pop	edi
; Line 39079
	ret	0
_sqlite3BinaryCompareCollSeq ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _codeCompare
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_pParse$ = 8						; size = 4
_opcode$ = 12						; size = 4
_dest$ = 16						; size = 4
_codeCompare PROC					; COMDAT
; _pLeft$ = edx
; _pRight$ = ecx
; _jumpIfNull$ = eax
; Line 39091
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+4]
	push	esi
	push	edi
	mov	esi, edx
; Line 39092
	push	eax
	mov	edi, ecx
	call	_binaryCompareP1
	mov	DWORD PTR _p1$[esp+16], eax
; Line 39093
	mov	eax, 256				; 00000100H
	add	esp, 4
	test	WORD PTR [esi+2], ax
	je	SHORT $LN7@codeCompar
	mov	ebx, DWORD PTR [esi+4]
	jmp	SHORT $LN37@codeCompar
$LN7@codeCompar:
	test	edi, edi
	je	SHORT $LN5@codeCompar
	test	WORD PTR [edi+2], ax
	je	SHORT $LN5@codeCompar
	mov	ebx, DWORD PTR [edi+4]
	jmp	SHORT $LN37@codeCompar
$LN5@codeCompar:
	push	ebp
	mov	ecx, esi
	call	_sqlite3ExprCollSeq
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN37@codeCompar
	push	ebp
	mov	ecx, edi
	call	_sqlite3ExprCollSeq
	add	esp, 4
	mov	ebx, eax
$LN37@codeCompar:
; Line 39094
	mov	ecx, DWORD PTR _dest$[esp+12]
	mov	edx, DWORD PTR _p1$[esp+12]
	mov	eax, DWORD PTR _opcode$[esp+12]
	mov	esi, DWORD PTR [ebp+12]
	push	ecx
	push	edx
	push	eax
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	xor	ebp, ebp
	add	esp, 12					; 0000000cH
	cmp	esi, ebp
	mov	edi, eax
	je	SHORT $LN34@codeCompar
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebp
	je	SHORT $LN34@codeCompar
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN29@codeCompar
	cmp	DWORD PTR _inMutex, ebp
	jg	SHORT $LN34@codeCompar
$LN29@codeCompar:
	cmp	edi, ebp
	jl	SHORT $LN25@codeCompar
	cmp	edi, DWORD PTR [esi+12]
	jl	SHORT $LN24@codeCompar
$LN25@codeCompar:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN36@codeCompar
$LN24@codeCompar:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	cmp	ebx, ebp
	mov	DWORD PTR [esi+12], ebp
	mov	eax, edi
	jne	SHORT $LN35@codeCompar
	pop	edi
	mov	DWORD PTR [esi+12], ebp
	mov	DWORD PTR [esi+16], ebp
	pop	esi
	pop	ebp
	pop	ebx
; Line 39095
	ret	0
$LN35@codeCompar:
	pop	edi
; Line 39094
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], -4			; fffffffcH
	pop	esi
	pop	ebp
	pop	ebx
; Line 39095
	ret	0
$LN34@codeCompar:
; Line 39094
	mov	ecx, ebx
	mov	eax, -4					; fffffffcH
	call	_freeP3
$LN36@codeCompar:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 39095
	ret	0
_codeCompare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprDup
_TEXT	SEGMENT
tv202 = 8						; size = 4
_p$ = 8							; size = 4
_sqlite3ExprDup PROC					; COMDAT
; Line 39351
	push	ebp
; Line 39353
	mov	ebp, DWORD PTR _p$[esp]
	test	ebp, ebp
	jne	SHORT $LN4@sqlite3Exp@19
	xor	eax, eax
	pop	ebp
; Line 39369
	ret	0
$LN4@sqlite3Exp@19:
; Line 39354
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN11@sqlite3Exp@19
	test	esi, esi
	jg	SHORT $LN22@sqlite3Exp@19
$LN11@sqlite3Exp@19:
	push	72					; 00000048H
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN3@sqlite3Exp@19
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN21@sqlite3Exp@19
	test	esi, esi
	jg	SHORT $LN22@sqlite3Exp@19
$LN21@sqlite3Exp@19:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN22@sqlite3Exp@19:
	pop	esi
	pop	ebx
; Line 39355
	xor	eax, eax
	pop	ebp
; Line 39369
	ret	0
$LN3@sqlite3Exp@19:
	push	edi
; Line 39356
	mov	ecx, 18					; 00000012H
	mov	esi, ebp
	mov	edi, ebx
	rep movsd
; Line 39357
	mov	eax, DWORD PTR [ebp+20]
	test	eax, eax
	mov	DWORD PTR tv202[esp+12], eax
	je	SHORT $LN2@sqlite3Exp@19
; Line 39358
	mov	esi, DWORD PTR [ebp+24]
	shr	esi, 1
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN29@sqlite3Exp@19
	mov	eax, DWORD PTR tv202[esp+12]
	push	esi
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN29@sqlite3Exp@19:
; Line 39359
	or	DWORD PTR [ebx+24], 1
	mov	DWORD PTR [ebx+20], edi
$LN2@sqlite3Exp@19:
; Line 39363
	mov	DWORD PTR [ebx+28], 0
; Line 39364
	mov	ecx, DWORD PTR [ebp+8]
	push	ecx
	call	_sqlite3ExprDup
	mov	DWORD PTR [ebx+8], eax
; Line 39365
	mov	edx, DWORD PTR [ebp+12]
	push	edx
	call	_sqlite3ExprDup
	mov	DWORD PTR [ebx+12], eax
; Line 39366
	mov	eax, DWORD PTR [ebp+16]
	push	eax
	call	_sqlite3ExprListDup
	mov	DWORD PTR [ebx+16], eax
; Line 39367
	mov	ecx, DWORD PTR [ebp+56]
	push	ecx
	call	_sqlite3SelectDup
	add	esp, 16					; 00000010H
	pop	edi
	mov	DWORD PTR [ebx+56], eax
	pop	esi
; Line 39368
	mov	eax, ebx
	pop	ebx
	pop	ebp
; Line 39369
	ret	0
_sqlite3ExprDup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@DFNOCIJJ@ambiguous?5column?5name?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BD@IEIMFPKF@no?5such?5column?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_03PNKCFLFB@old?$AA@			; `string'
PUBLIC	??_C@_03CLCAEGCJ@new?$AA@			; `string'
;	COMDAT ??_C@_0BK@DFNOCIJJ@ambiguous?5column?5name?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BK@DFNOCIJJ@ambiguous?5column?5name?3?5?$CFs?$AA@ DB 'ambiguous co'
	DB	'lumn name: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IEIMFPKF@no?5such?5column?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BD@IEIMFPKF@no?5such?5column?3?5?$CFs?$AA@ DB 'no such column: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PNKCFLFB@old?$AA@
CONST	SEGMENT
??_C@_03PNKCFLFB@old?$AA@ DB 'old', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CLCAEGCJ@new?$AA@
CONST	SEGMENT
??_C@_03CLCAEGCJ@new?$AA@ DB 'new', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _lookupName
_TEXT	SEGMENT
$T124581 = -48						; size = 1
_zName$124347 = -44					; size = 4
_cnt$ = -40						; size = 4
_zName$124366 = -36					; size = 4
_pItem$ = -32						; size = 4
_i$ = -28						; size = 4
_zName$124328 = -24					; size = 4
_db$ = -20						; size = 4
_cntTab$ = -16						; size = 4
_pMatch$ = -12						; size = 4
_pSrcList$92214 = -8					; size = 4
_pTopNC$ = -4						; size = 4
_pParse$ = 8						; size = 4
_z$92290 = 12						; size = 4
_pColumnToken$ = 12					; size = 4
_pNC$ = 16						; size = 4
_pExpr$ = 20						; size = 4
_lookupName PROC					; COMDAT
; _pDbToken$ = eax
; _pTableToken$ = ecx
; Line 39865
	sub	esp, 48					; 00000030H
	push	ebx
	push	ebp
	mov	ebx, ecx
; Line 39872
	mov	ecx, DWORD PTR _pParse$[esp+52]
	mov	edx, DWORD PTR [ecx]
; Line 39875
	mov	ecx, DWORD PTR _pNC$[esp+52]
	push	esi
	push	edi
	xor	edi, edi
; Line 39878
	cmp	eax, edi
	mov	DWORD PTR _cnt$[esp+64], edi
	mov	DWORD PTR _cntTab$[esp+64], edi
	mov	DWORD PTR _db$[esp+64], edx
	mov	DWORD PTR _pMatch$[esp+64], edi
	mov	DWORD PTR _pTopNC$[esp+64], ecx
	je	SHORT $LN72@lookupName
	mov	esi, DWORD PTR [eax+4]
	mov	ebp, DWORD PTR [eax]
	shr	esi, 1
	cmp	ebp, edi
	jne	SHORT $LN76@lookupName
	mov	esi, edi
	mov	DWORD PTR _zName$124328[esp+64], edi
	call	_sqlite3Dequote
	jmp	SHORT $LN71@lookupName
$LN76@lookupName:
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN75@lookupName
	push	esi
	push	ebp
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN75@lookupName:
	mov	DWORD PTR _zName$124328[esp+64], edi
	mov	esi, DWORD PTR _zName$124328[esp+64]
	xor	edi, edi
	call	_sqlite3Dequote
	jmp	SHORT $LN71@lookupName
$LN72@lookupName:
	mov	DWORD PTR _zName$124328[esp+64], edi
$LN71@lookupName:
; Line 39879
	cmp	ebx, edi
	je	SHORT $LN80@lookupName
	mov	esi, DWORD PTR [ebx+4]
	mov	ebp, DWORD PTR [ebx]
	shr	esi, 1
	cmp	ebp, edi
	jne	SHORT $LN84@lookupName
	xor	esi, esi
	mov	DWORD PTR _zName$124347[esp+64], esi
	call	_sqlite3Dequote
	jmp	SHORT $LN79@lookupName
$LN84@lookupName:
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN83@lookupName
	push	esi
	push	ebp
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN83@lookupName:
	mov	esi, edi
	xor	edi, edi
	mov	DWORD PTR _zName$124347[esp+64], esi
	call	_sqlite3Dequote
	jmp	SHORT $LN79@lookupName
$LN80@lookupName:
	mov	DWORD PTR _zName$124347[esp+64], edi
$LN79@lookupName:
; Line 39880
	mov	eax, DWORD PTR _pColumnToken$[esp+60]
	cmp	eax, edi
	je	SHORT $LN88@lookupName
	mov	esi, DWORD PTR [eax+4]
	mov	ebp, DWORD PTR [eax]
	shr	esi, 1
	cmp	ebp, edi
	jne	SHORT $LN92@lookupName
	xor	esi, esi
	mov	DWORD PTR _zName$124366[esp+64], esi
	call	_sqlite3Dequote
	jmp	SHORT $LN87@lookupName
$LN92@lookupName:
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN91@lookupName
	push	esi
	push	ebp
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN91@lookupName:
	mov	esi, edi
	xor	edi, edi
	mov	DWORD PTR _zName$124366[esp+64], esi
	call	_sqlite3Dequote
	jmp	SHORT $LN87@lookupName
$LN88@lookupName:
	mov	DWORD PTR _zName$124366[esp+64], edi
$LN87@lookupName:
; Line 39881
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN62@lookupName
	cmp	DWORD PTR _inMutex, edi
	jg	$lookupname_end$92209
	xor	edi, edi
$LN62@lookupName:
; Line 39886
	cmp	DWORD PTR _pNC$[esp+60], edi
	mov	edx, DWORD PTR _pExpr$[esp+60]
	mov	DWORD PTR [edx+36], -1
	je	$LN233@lookupName
	npad	2
$LL61@lookupName:
	cmp	DWORD PTR _cnt$[esp+64], 0
	jne	$LN14@lookupName
; Line 39888
	mov	eax, DWORD PTR _pNC$[esp+60]
	mov	eax, DWORD PTR [eax+4]
; Line 39890
	test	eax, eax
	mov	DWORD PTR _pSrcList$92214[esp+64], eax
	je	$LN56@lookupName
; Line 39891
	cmp	WORD PTR [eax], 0
	lea	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _i$[esp+64], 0
	mov	DWORD PTR _pItem$[esp+64], ecx
	jle	$LN56@lookupName
	mov	ebx, ecx
	npad	7
$LL247@lookupName:
; Line 39896
	mov	ebp, DWORD PTR [ebx+12]
; Line 39898
	mov	edx, DWORD PTR [ebp+76]
	test	edx, edx
	mov	edi, DWORD PTR _db$[esp+64]
	mov	esi, -1000000				; fff0bdc0H
	je	SHORT $LN255@lookupName
	mov	ecx, DWORD PTR [edi]
	xor	esi, esi
	test	ecx, ecx
	jle	SHORT $LN255@lookupName
	mov	eax, DWORD PTR [edi+4]
	add	eax, 20					; 00000014H
$LL100@lookupName:
	cmp	DWORD PTR [eax], edx
	je	SHORT $LN255@lookupName
	add	esi, 1
	add	eax, 24					; 00000018H
	cmp	esi, ecx
	jl	SHORT $LL100@lookupName
$LN255@lookupName:
; Line 39900
	mov	edx, DWORD PTR _zName$124347[esp+64]
	test	edx, edx
	je	SHORT $LN49@lookupName
; Line 39901
	mov	ecx, DWORD PTR [ebx+8]
	test	ecx, ecx
; Line 39904
	jne	SHORT $LN261@lookupName
; Line 39905
	mov	ecx, DWORD PTR [ebp]
; Line 39906
	test	ecx, ecx
	je	$LN57@lookupName
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN57@lookupName
; Line 39907
	mov	edx, DWORD PTR _zName$124328[esp+64]
	test	edx, edx
	je	SHORT $LN49@lookupName
	mov	ecx, DWORD PTR [edi+4]
	lea	eax, DWORD PTR [esi+esi*2]
	mov	ecx, DWORD PTR [ecx+eax*8]
$LN261@lookupName:
	call	_sqlite3StrICmp
	test	eax, eax
; Line 39908
	jne	$LN57@lookupName
$LN49@lookupName:
; Line 39912
	mov	eax, DWORD PTR _cntTab$[esp+64]
	mov	edx, eax
	add	eax, 1
	test	edx, edx
	mov	DWORD PTR _cntTab$[esp+64], eax
	jne	SHORT $LN48@lookupName
; Line 39913
	mov	ecx, DWORD PTR [ebx+24]
	mov	eax, DWORD PTR _pExpr$[esp+60]
	mov	DWORD PTR [eax+36], ecx
; Line 39914
	mov	edx, DWORD PTR [ebp+76]
	mov	DWORD PTR [eax+64], edx
; Line 39915
	mov	DWORD PTR _pMatch$[esp+64], ebx
$LN48@lookupName:
; Line 39917
	mov	edi, DWORD PTR [ebp+8]
	xor	esi, esi
	cmp	DWORD PTR [ebp+4], esi
	jle	$LN57@lookupName
$LL47@lookupName:
; Line 39918
	mov	ecx, DWORD PTR [edi]
	mov	al, BYTE PTR [ecx]
	test	al, al
	mov	edx, DWORD PTR _zName$124366[esp+64]
	je	SHORT $LN248@lookupName
$LL105@lookupName:
	movzx	ebx, BYTE PTR [edx]
	movzx	eax, al
	mov	al, BYTE PTR _sqlite3UpperToLower[eax]
	cmp	al, BYTE PTR _sqlite3UpperToLower[ebx]
	jne	SHORT $LN246@lookupName
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL105@lookupName
$LN246@lookupName:
	mov	ebx, DWORD PTR _pItem$[esp+64]
$LN248@lookupName:
	movzx	edx, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[edx]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[ecx]
	sub	edx, eax
	je	SHORT $LN219@lookupName
	add	esi, 1
	add	edi, 20					; 00000014H
	cmp	esi, DWORD PTR [ebp+4]
	jl	SHORT $LL47@lookupName
; Line 40123
	jmp	$LN57@lookupName
$LN219@lookupName:
; Line 39919
	mov	ecx, DWORD PTR [ebp+8]
; Line 39922
	mov	edx, DWORD PTR [ebx+24]
	add	DWORD PTR _cnt$[esp+64], 1
	lea	eax, DWORD PTR [esi+esi*4]
	add	eax, eax
	add	eax, eax
	mov	edi, DWORD PTR [eax+ecx+12]
	mov	ecx, DWORD PTR _pExpr$[esp+60]
	mov	DWORD PTR [ecx+36], edx
; Line 39924
	mov	edx, DWORD PTR [ebp+76]
	mov	DWORD PTR [ecx+64], edx
; Line 39926
	cmp	esi, DWORD PTR [ebp+12]
	mov	DWORD PTR _pMatch$[esp+64], ebx
	jne	SHORT $LN65@lookupName
	or	esi, -1
$LN65@lookupName:
; Line 39928
	test	WORD PTR [ecx+2], 256			; 00000100H
	mov	DWORD PTR [ecx+40], esi
	mov	edx, DWORD PTR [ebp+8]
	mov	al, BYTE PTR [eax+edx+18]
	mov	BYTE PTR [ecx+1], al
	jne	$LN43@lookupName
; Line 39929
	test	edi, edi
	mov	eax, DWORD PTR _db$[esp+64]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	bl, BYTE PTR [edx+121]
	je	SHORT $LN110@lookupName
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL238@lookupName:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL238@lookupName
	mov	esi, DWORD PTR _db$[esp+64]
	sub	eax, edx
	add	esi, 248				; 000000f8H
	mov	ebp, eax
	je	SHORT $LN119@lookupName
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN119@lookupName
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN125@lookupName
	mov	eax, OFFSET _binHash
$LN125@lookupName:
	push	ebp
	push	edi
	call	eax
	mov	edx, DWORD PTR [esi+20]
	sub	edx, 1
	push	ebp
	and	edx, eax
	push	edi
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN119@lookupName
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN109@lookupName
$LN119@lookupName:
	xor	eax, eax
	jmp	SHORT $LN109@lookupName
$LN110@lookupName:
	mov	eax, DWORD PTR [eax+28]
$LN109@lookupName:
	test	eax, eax
	je	SHORT $LN108@lookupName
	movzx	ecx, bl
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax+ecx*4-20]
$LN108@lookupName:
	mov	edx, DWORD PTR _pExpr$[esp+60]
	mov	ebx, DWORD PTR _pItem$[esp+64]
	mov	DWORD PTR [edx+4], eax
$LN43@lookupName:
; Line 39931
	mov	eax, DWORD PTR _pSrcList$92214[esp+64]
	movsx	ecx, WORD PTR [eax]
	sub	ecx, 1
	cmp	DWORD PTR _i$[esp+64], ecx
	jge	$LN57@lookupName
; Line 39932
	test	BYTE PTR [ebx+69], 4
	je	SHORT $LN41@lookupName
; Line 39935
	add	ebx, 48					; 00000030H
; Line 39936
	jmp	SHORT $LN262@lookupName
$LN41@lookupName:
; Line 39937
	mov	eax, DWORD PTR [ebx+80]
	test	eax, eax
	je	SHORT $LN57@lookupName
	mov	ebp, DWORD PTR [eax+4]
; Line 39942
	xor	edi, edi
	test	ebp, ebp
	jle	SHORT $LN57@lookupName
	mov	esi, DWORD PTR [eax]
$LL38@lookupName:
; Line 39943
	mov	ecx, DWORD PTR [esi]
	mov	al, BYTE PTR [ecx]
	test	al, al
	mov	edx, DWORD PTR _zName$124366[esp+64]
	je	SHORT $LN251@lookupName
	npad	4
$LL135@lookupName:
	movzx	ebx, BYTE PTR [edx]
	movzx	eax, al
	mov	al, BYTE PTR _sqlite3UpperToLower[eax]
	cmp	al, BYTE PTR _sqlite3UpperToLower[ebx]
	jne	SHORT $LN251@lookupName
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL135@lookupName
$LN251@lookupName:
	movzx	edx, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[edx]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[ecx]
	sub	edx, eax
	je	SHORT $LN220@lookupName
	add	edi, 1
	add	esi, 8
	cmp	edi, ebp
	jl	SHORT $LL38@lookupName
; Line 40123
	mov	ebx, DWORD PTR _pItem$[esp+64]
	jmp	SHORT $LN57@lookupName
$LN220@lookupName:
; Line 39944
	add	DWORD PTR _pItem$[esp+64], 48		; 00000030H
; Line 39945
	mov	ebx, DWORD PTR _pItem$[esp+64]
$LN262@lookupName:
	add	DWORD PTR _i$[esp+64], 1
$LN57@lookupName:
; Line 39891
	mov	ecx, DWORD PTR _pSrcList$92214[esp+64]
	mov	eax, DWORD PTR _i$[esp+64]
	movsx	edx, WORD PTR [ecx]
	add	eax, 1
	add	ebx, 48					; 00000030H
	cmp	eax, edx
	mov	DWORD PTR _i$[esp+64], eax
	mov	DWORD PTR _pItem$[esp+64], ebx
	jl	$LL247@lookupName
$LN56@lookupName:
; Line 39961
	cmp	DWORD PTR _zName$124328[esp+64], 0
	jne	$LN27@lookupName
	cmp	DWORD PTR _zName$124347[esp+64], 0
	je	$LN27@lookupName
	cmp	DWORD PTR _cnt$[esp+64], 0
	jne	$LN244@lookupName
	mov	eax, DWORD PTR _pParse$[esp+60]
	mov	esi, DWORD PTR [eax+172]
	test	esi, esi
	je	$LN234@lookupName
; Line 39964
	mov	edi, DWORD PTR [esi+4]
	cmp	edi, -1
	je	SHORT $LN249@lookupName
	mov	edx, DWORD PTR _zName$124347[esp+64]
	mov	ecx, OFFSET ??_C@_03CLCAEGCJ@new?$AA@
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN249@lookupName
; Line 39965
	mov	ecx, DWORD PTR _pExpr$[esp+60]
	mov	DWORD PTR [ecx+36], edi
; Line 39967
	jmp	SHORT $LN263@lookupName
$LN249@lookupName:
; Line 39968
	mov	edi, DWORD PTR [esi+8]
	cmp	edi, -1
	je	$LN234@lookupName
	mov	edx, DWORD PTR _zName$124347[esp+64]
	mov	ecx, OFFSET ??_C@_03PNKCFLFB@old?$AA@
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN234@lookupName
; Line 39969
	mov	edx, DWORD PTR _pExpr$[esp+60]
	mov	DWORD PTR [edx+36], edi
$LN263@lookupName:
; Line 39971
	mov	ebx, DWORD PTR [esi]
; Line 39974
	test	ebx, ebx
	je	$LN234@lookupName
; Line 39978
	mov	eax, DWORD PTR [ebx+76]
	mov	ecx, DWORD PTR _pExpr$[esp+60]
	mov	ebp, DWORD PTR [ebx+8]
; Line 39979
	add	DWORD PTR _cntTab$[esp+64], 1
	mov	DWORD PTR [ecx+64], eax
	mov	edi, DWORD PTR [ebx+4]
; Line 39980
	xor	esi, esi
	test	edi, edi
	jle	$LN234@lookupName
$LL29@lookupName:
; Line 39981
	mov	edx, DWORD PTR _zName$124366[esp+64]
	mov	ecx, DWORD PTR [ebp]
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN221@lookupName
	add	esi, 1
	add	ebp, 20					; 00000014H
	cmp	esi, edi
	jl	SHORT $LL29@lookupName
; Line 40123
	jmp	$LN234@lookupName
$LN221@lookupName:
; Line 39982
	mov	edx, DWORD PTR [ebx+8]
	lea	eax, DWORD PTR [esi+esi*4]
	add	eax, eax
	add	eax, eax
; Line 39984
	cmp	esi, DWORD PTR [ebx+12]
	mov	ebp, DWORD PTR [edx+eax+12]
	mov	DWORD PTR _cnt$[esp+64], 1
	jne	SHORT $LN67@lookupName
	or	esi, -1
$LN67@lookupName:
	mov	ecx, DWORD PTR _pExpr$[esp+60]
; Line 39986
	test	WORD PTR [ecx+2], 256			; 00000100H
	mov	DWORD PTR [ecx+40], esi
	mov	edx, DWORD PTR [ebx+8]
	mov	al, BYTE PTR [edx+eax+18]
	mov	BYTE PTR [ecx+1], al
	jne	$LN25@lookupName
; Line 39987
	test	ebp, ebp
	mov	esi, DWORD PTR _db$[esp+64]
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	al, BYTE PTR [edx+121]
	mov	BYTE PTR $T124581[esp+64], al
	je	SHORT $LN140@lookupName
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
$LL239@lookupName:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL239@lookupName
	sub	eax, edx
	add	esi, 248				; 000000f8H
	mov	edi, eax
	je	SHORT $LN149@lookupName
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN149@lookupName
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN155@lookupName
	mov	eax, OFFSET _binHash
$LN155@lookupName:
	push	edi
	push	ebp
	call	eax
	mov	edx, DWORD PTR [esi+20]
	sub	edx, 1
	push	edi
	and	edx, eax
	push	ebp
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN149@lookupName
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN139@lookupName
$LN149@lookupName:
	xor	eax, eax
	jmp	SHORT $LN139@lookupName
$LN140@lookupName:
	mov	eax, DWORD PTR [esi+28]
$LN139@lookupName:
	test	eax, eax
	je	SHORT $LN138@lookupName
	movzx	ecx, BYTE PTR $T124581[esp+64]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax+ecx*4-20]
$LN138@lookupName:
	mov	edx, DWORD PTR _pExpr$[esp+60]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, edx
$LN25@lookupName:
; Line 39989
	mov	DWORD PTR [ecx+60], ebx
; Line 40000
	jmp	$LN244@lookupName
$LN27@lookupName:
	cmp	DWORD PTR _cnt$[esp+64], 0
	jne	$LN244@lookupName
$LN234@lookupName:
	mov	edi, 1
	cmp	DWORD PTR _cntTab$[esp+64], edi
	jne	SHORT $LN241@lookupName
	mov	esi, DWORD PTR _zName$124366[esp+64]
	call	_sqlite3IsRowid
	test	eax, eax
	je	SHORT $LN241@lookupName
; Line 40002
	mov	eax, DWORD PTR _pExpr$[esp+60]
	mov	DWORD PTR _cnt$[esp+64], edi
	mov	DWORD PTR [eax+40], -1
; Line 40003
	mov	BYTE PTR [eax+1], 100			; 00000064H
; Line 40018
	jmp	SHORT $LN244@lookupName
$LN241@lookupName:
	mov	eax, DWORD PTR _pNC$[esp+60]
	mov	ebx, DWORD PTR [eax+8]
	test	ebx, ebx
	je	SHORT $LN242@lookupName
	cmp	DWORD PTR _zName$124347[esp+64], 0
	jne	SHORT $LN242@lookupName
	mov	ebp, DWORD PTR [ebx]
; Line 40019
	xor	edi, edi
	test	ebp, ebp
	jle	SHORT $LN242@lookupName
	mov	esi, DWORD PTR [ebx+12]
	add	esi, 4
	npad	1
$LL257@lookupName:
; Line 40020
	mov	ecx, DWORD PTR [esi]
; Line 40021
	test	ecx, ecx
	je	SHORT $LN21@lookupName
	mov	edx, DWORD PTR _zName$124366[esp+64]
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN222@lookupName
$LN21@lookupName:
; Line 40019
	add	edi, 1
	add	esi, 12					; 0000000cH
	cmp	edi, ebp
	jl	SHORT $LL257@lookupName
; Line 40045
	cmp	DWORD PTR _cnt$[esp+64], 0
	jne	SHORT $LN244@lookupName
$LN242@lookupName:
; Line 40046
	mov	ecx, DWORD PTR _pNC$[esp+60]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _pNC$[esp+60], edx
$LN244@lookupName:
; Line 39886
	cmp	DWORD PTR _pNC$[esp+60], 0
	jne	$LL61@lookupName
; Line 40060
	cmp	DWORD PTR _cnt$[esp+64], 0
	jne	$LN14@lookupName
$LN233@lookupName:
	cmp	DWORD PTR _zName$124347[esp+64], 0
	jne	$LN237@lookupName
	mov	edx, DWORD PTR _pColumnToken$[esp+60]
	mov	eax, DWORD PTR [edx]
	cmp	BYTE PTR [eax], 34			; 00000022H
	jne	$LN237@lookupName
; Line 40061
	mov	eax, DWORD PTR _zName$124366[esp+64]
	test	eax, eax
	je	SHORT $LN182@lookupName
	push	eax
	call	_free
	add	esp, 4
$LN182@lookupName:
	pop	edi
	pop	esi
	pop	ebp
; Line 40062
	xor	eax, eax
	pop	ebx
; Line 40130
	add	esp, 48					; 00000030H
	ret	0
$LN222@lookupName:
; Line 40026
	mov	ecx, DWORD PTR [ebx+12]
	lea	eax, DWORD PTR [edi+edi*2]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_sqlite3ExprDup
; Line 40027
	mov	esi, DWORD PTR _pExpr$[esp+64]
	mov	ebp, eax
	mov	eax, 256				; 00000100H
	add	esp, 4
	test	WORD PTR [esi+2], ax
	je	SHORT $LN18@lookupName
; Line 40028
	mov	ecx, DWORD PTR [esi+4]
; Line 40029
	or	WORD PTR [ebp+2], ax
	mov	DWORD PTR [ebp+4], ecx
$LN18@lookupName:
; Line 40031
	test	BYTE PTR [esi+32], 1
	je	SHORT $LN250@lookupName
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN250@lookupName
	push	eax
	call	_free
	add	esp, 4
$LN250@lookupName:
; Line 40032
	test	BYTE PTR [esi+24], 1
	je	SHORT $LN172@lookupName
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN172@lookupName
	push	eax
	call	_free
	add	esp, 4
$LN172@lookupName:
; Line 40033
	mov	ebx, DWORD PTR _pExpr$[esp+60]
	mov	ecx, 18					; 00000012H
	mov	esi, ebp
	mov	edi, ebx
; Line 40034
	push	ebp
	rep movsd
	call	_free
	add	esp, 4
; Line 40035
	mov	esi, 1
; Line 40037
	jmp	$LN264@lookupName
$LN14@lookupName:
; Line 40069
	cmp	DWORD PTR _cnt$[esp+64], 1
	je	$LN13@lookupName
$LN237@lookupName:
; Line 40070
	xor	esi, esi
; Line 40072
	cmp	DWORD PTR _cnt$[esp+64], esi
	mov	DWORD PTR _z$92290[esp+60], esi
	mov	ebx, OFFSET ??_C@_0BD@IEIMFPKF@no?5such?5column?3?5?$CFs?$AA@
	je	SHORT $LN70@lookupName
	mov	ebx, OFFSET ??_C@_0BK@DFNOCIJJ@ambiguous?5column?5name?3?5?$CFs?$AA@
$LN70@lookupName:
; Line 40073
	mov	eax, DWORD PTR _zName$124328[esp+64]
	cmp	eax, esi
	je	SHORT $LN12@lookupName
; Line 40074
	mov	ecx, DWORD PTR _zName$124366[esp+64]
	mov	edx, DWORD PTR _zName$124347[esp+64]
	push	esi
	push	ecx
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	push	edx
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	push	eax
	lea	eax, DWORD PTR _z$92290[esp+84]
	push	eax
	call	_sqlite3SetString
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN9@lookupName
$LN12@lookupName:
; Line 40075
	mov	eax, DWORD PTR _zName$124347[esp+64]
	cmp	eax, esi
	je	SHORT $LN10@lookupName
; Line 40076
	mov	ecx, DWORD PTR _zName$124366[esp+64]
	push	esi
	push	ecx
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	push	eax
	lea	edx, DWORD PTR _z$92290[esp+76]
	push	edx
	call	_sqlite3SetString
	add	esp, 20					; 00000014H
; Line 40077
	jmp	SHORT $LN9@lookupName
$LN10@lookupName:
; Line 40078
	mov	ebp, DWORD PTR _zName$124366[esp+64]
	cmp	ebp, esi
	je	SHORT $LN184@lookupName
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
$LL240@lookupName:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL240@lookupName
	sub	eax, edx
	lea	edi, DWORD PTR [eax+1]
	mov	ecx, edi
	call	_sqlite3MallocRaw
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN184@lookupName
	push	edi
	push	ebp
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN184@lookupName:
	mov	DWORD PTR _z$92290[esp+60], esi
$LN9@lookupName:
; Line 40080
	mov	eax, DWORD PTR _z$92290[esp+60]
	mov	edi, DWORD PTR _pParse$[esp+60]
	push	eax
	push	ebx
	call	_sqlite3ErrorMsg
; Line 40081
	mov	eax, DWORD PTR _z$92290[esp+68]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN191@lookupName
	push	eax
	call	_free
	add	esp, 4
$LN191@lookupName:
; Line 40082
	mov	eax, DWORD PTR _pTopNC$[esp+64]
	add	DWORD PTR [eax+16], 1
$LN13@lookupName:
; Line 40091
	mov	ecx, DWORD PTR _pExpr$[esp+60]
	mov	ecx, DWORD PTR [ecx+40]
	test	ecx, ecx
	jl	SHORT $lookupname_end$92209
	mov	esi, DWORD PTR _pMatch$[esp+64]
	test	esi, esi
	je	SHORT $lookupname_end$92209
; Line 40093
	cmp	ecx, 64					; 00000040H
	jb	SHORT $LN7@lookupName
; Line 40094
	mov	ecx, 63					; 0000003fH
$LN7@lookupName:
; Line 40097
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	or	DWORD PTR [esi+40], eax
	or	DWORD PTR [esi+44], edx
$lookupname_end$92209:
; Line 40103
	mov	eax, DWORD PTR _zName$124328[esp+64]
	test	eax, eax
	je	SHORT $LN196@lookupName
	push	eax
	call	_free
	add	esp, 4
$LN196@lookupName:
; Line 40104
	cmp	DWORD PTR _zName$124347[esp+64], 0
	je	SHORT $LN201@lookupName
	mov	edx, DWORD PTR _zName$124347[esp+64]
	push	edx
	call	_free
	add	esp, 4
$LN201@lookupName:
; Line 40105
	mov	edi, DWORD PTR _pExpr$[esp+60]
	mov	eax, DWORD PTR [edi+8]
	push	eax
	call	_sqlite3ExprDelete
; Line 40107
	mov	ecx, DWORD PTR [edi+12]
	xor	esi, esi
	push	ecx
	mov	DWORD PTR [edi+8], esi
	call	_sqlite3ExprDelete
; Line 40108
	mov	DWORD PTR [edi+12], esi
; Line 40109
	mov	esi, DWORD PTR _cnt$[esp+72]
	add	esp, 8
	mov	BYTE PTR [edi], 149			; 00000095H
	mov	ebx, edi
$LN264@lookupName:
; Line 40111
	mov	eax, DWORD PTR _zName$124366[esp+64]
	test	eax, eax
	mov	ebp, DWORD PTR _pMatch$[esp+64]
	mov	edi, DWORD PTR _pTopNC$[esp+64]
$lookupname_end_2$92286:
	je	SHORT $LN206@lookupName
	push	eax
	call	_free
	add	esp, 4
$LN206@lookupName:
; Line 40112
	cmp	esi, 1
	jne	SHORT $LN6@lookupName
; Line 40114
	mov	esi, DWORD PTR _pNC$[esp+60]
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR _pParse$[esp+60]
	push	edx
	push	ebx
	push	eax
	call	_sqlite3AuthRead
	add	esp, 12					; 0000000cH
; Line 40115
	test	ebp, ebp
	je	SHORT $LN217@lookupName
	cmp	DWORD PTR [ebp+16], 0
	jne	SHORT $LN217@lookupName
; Line 40116
	mov	ecx, DWORD PTR [ebp+12]
	mov	DWORD PTR [ebx+60], ecx
$LN217@lookupName:
; Line 40122
	mov	eax, 1
	add	DWORD PTR [edi+12], eax
; Line 40123
	cmp	edi, esi
	je	SHORT $LN223@lookupName
$LL4@lookupName:
; Line 40124
	mov	edi, DWORD PTR [edi+32]
	add	DWORD PTR [edi+12], eax
	cmp	edi, esi
	jne	SHORT $LL4@lookupName
$LN223@lookupName:
	pop	edi
	pop	esi
	pop	ebp
; Line 40126
	xor	eax, eax
	pop	ebx
; Line 40130
	add	esp, 48					; 00000030H
	ret	0
$LN6@lookupName:
	pop	edi
	pop	esi
	pop	ebp
; Line 40128
	mov	eax, 1
	pop	ebx
; Line 40130
	add	esp, 48					; 00000030H
	ret	0
_lookupName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@HIKOHDBA@parameters?5prohibited?5in?5CHECK?5c@ ; `string'
PUBLIC	??_C@_0CL@HPCDGFPK@subqueries?5prohibited?5in?5CHECK?5c@ ; `string'
PUBLIC	??_C@_0CN@GBOJIJCC@wrong?5number?5of?5arguments?5to?5fun@ ; `string'
PUBLIC	??_C@_0BH@DEPAIHDK@no?5such?5function?3?5?$CF?4?$CKs?$AA@ ; `string'
PUBLIC	??_C@_0CE@JOMBDPK@misuse?5of?5aggregate?5function?5?$CF?4?$CK@ ; `string'
PUBLIC	??_C@_0CD@CLOCOINF@not?5authorized?5to?5use?5function?3?5@ ; `string'
;	COMDAT ??_C@_0CL@HIKOHDBA@parameters?5prohibited?5in?5CHECK?5c@
CONST	SEGMENT
??_C@_0CL@HIKOHDBA@parameters?5prohibited?5in?5CHECK?5c@ DB 'parameters p'
	DB	'rohibited in CHECK constraints', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HPCDGFPK@subqueries?5prohibited?5in?5CHECK?5c@
CONST	SEGMENT
??_C@_0CL@HPCDGFPK@subqueries?5prohibited?5in?5CHECK?5c@ DB 'subqueries p'
	DB	'rohibited in CHECK constraints', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GBOJIJCC@wrong?5number?5of?5arguments?5to?5fun@
CONST	SEGMENT
??_C@_0CN@GBOJIJCC@wrong?5number?5of?5arguments?5to?5fun@ DB 'wrong numbe'
	DB	'r of arguments to function %.*s()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DEPAIHDK@no?5such?5function?3?5?$CF?4?$CKs?$AA@
CONST	SEGMENT
??_C@_0BH@DEPAIHDK@no?5such?5function?3?5?$CF?4?$CKs?$AA@ DB 'no such fun'
	DB	'ction: %.*s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JOMBDPK@misuse?5of?5aggregate?5function?5?$CF?4?$CK@
CONST	SEGMENT
??_C@_0CE@JOMBDPK@misuse?5of?5aggregate?5function?5?$CF?4?$CK@ DB 'misuse'
	DB	' of aggregate function %.*s()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CLOCOINF@not?5authorized?5to?5use?5function?3?5@
CONST	SEGMENT
??_C@_0CD@CLOCOINF@not?5authorized?5to?5use?5function?3?5@ DB 'not author'
	DB	'ized to use function: %s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _nameResolverStep
_TEXT	SEGMENT
_pParse$ = -20						; size = 4
_n$92345 = -16						; size = 4
_wrong_num_args$92347 = -12				; size = 4
tv515 = -8						; size = 4
_enc$92354 = -8						; size = 4
_pList$92344 = -4					; size = 4
_zId$92352 = 8						; size = 4
_pArg$ = 8						; size = 4
_is_agg$92348 = 12					; size = 4
_pExpr$ = 12						; size = 4
_nameResolverStep PROC					; COMDAT
; Line 40143
	sub	esp, 20					; 00000014H
	push	ebp
; Line 40147
	mov	ebp, DWORD PTR _pExpr$[esp+20]
	xor	ecx, ecx
	cmp	ebp, ecx
	jne	SHORT $LN35@nameResolv
	lea	eax, DWORD PTR [ecx+1]
	pop	ebp
; Line 40302
	add	esp, 20					; 00000014H
	ret	0
$LN35@nameResolv:
; Line 40151
	movzx	eax, WORD PTR [ebp+2]
	test	al, 4
	push	esi
	mov	esi, DWORD PTR _pArg$[esp+24]
	push	edi
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR _pParse$[esp+32], edi
	je	SHORT $LN34@nameResolv
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebp
; Line 40302
	add	esp, 20					; 00000014H
	ret	0
$LN34@nameResolv:
; Line 40152
	or	eax, 4
	mov	WORD PTR [ebp+2], ax
; Line 40162
	movzx	eax, BYTE PTR [ebp]
	add	eax, -17				; ffffffefH
	cmp	eax, 135				; 00000087H
	push	ebx
	ja	$LN1@nameResolv
	movzx	eax, BYTE PTR $LN114@nameResolv[eax]
	jmp	DWORD PTR $LN121@nameResolv[eax*4]
$LN31@nameResolv:
; Line 40168
	mov	ecx, DWORD PTR [ebp+20]
	cmp	BYTE PTR [ecx], 39			; 00000027H
	je	$LN1@nameResolv
$LN30@nameResolv:
; Line 40174
	push	ebp
	push	esi
	add	ebp, 20					; 00000014H
	push	ebp
	push	edi
	xor	ecx, ecx
	xor	eax, eax
	call	_lookupName
	add	esp, 16					; 00000010H
	pop	ebx
	pop	edi
	pop	esi
; Line 40175
	mov	eax, 1
	pop	ebp
; Line 40302
	add	esp, 20					; 00000014H
	ret	0
$LN28@nameResolv:
; Line 40188
	mov	edx, DWORD PTR [ebp+12]
; Line 40189
	cmp	BYTE PTR [edx], 23			; 00000017H
	jne	SHORT $LN27@nameResolv
; Line 40191
	mov	ecx, DWORD PTR [ebp+8]
	xor	eax, eax
; Line 40193
	jmp	SHORT $LN120@nameResolv
$LN27@nameResolv:
; Line 40195
	mov	eax, DWORD PTR [ebp+8]
; Line 40196
	mov	ecx, DWORD PTR [edx+8]
; Line 40197
	mov	edx, DWORD PTR [edx+12]
	add	eax, 20					; 00000014H
$LN120@nameResolv:
; Line 40199
	push	ebp
	add	edx, 20					; 00000014H
	push	esi
	push	edx
	add	ecx, 20					; 00000014H
	push	edi
	call	_lookupName
	add	esp, 16					; 00000010H
	pop	ebx
	pop	edi
	pop	esi
; Line 40200
	mov	eax, 1
	pop	ebp
; Line 40302
	add	esp, 20					; 00000014H
	ret	0
$LN25@nameResolv:
; Line 40207
	mov	eax, DWORD PTR [ebp+16]
; Line 40208
	cmp	eax, ecx
	mov	DWORD PTR _pList$92344[esp+36], eax
	je	SHORT $LN38@nameResolv
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _n$92345[esp+36], edx
	jmp	SHORT $LN39@nameResolv
$LN38@nameResolv:
	mov	DWORD PTR _n$92345[esp+36], ecx
$LN39@nameResolv:
; Line 40217
	mov	eax, DWORD PTR [edi]
; Line 40220
	mov	edi, DWORD PTR [ebp+24]
	mov	DWORD PTR _wrong_num_args$92347[esp+36], ecx
	mov	DWORD PTR _is_agg$92348[esp+32], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	movzx	ecx, BYTE PTR [edx+121]
	mov	edx, DWORD PTR [ebp+20]
; Line 40221
	push	0
	push	ecx
	mov	DWORD PTR _enc$92354[esp+44], ecx
	mov	ecx, DWORD PTR _n$92345[esp+44]
	push	ecx
	shr	edi, 1
	push	edx
	mov	ebx, edi
	mov	DWORD PTR _zId$92352[esp+48], edx
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
; Line 40222
	test	eax, eax
	jne	SHORT $LN24@nameResolv
; Line 40223
	mov	edx, DWORD PTR _enc$92354[esp+36]
	mov	ecx, DWORD PTR _pParse$[esp+36]
	push	eax
	mov	eax, DWORD PTR _zId$92352[esp+36]
	push	edx
	push	-1
	push	eax
	mov	eax, DWORD PTR [ecx]
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
; Line 40224
	test	eax, eax
; Line 40226
	je	$LN113@nameResolv
; Line 40227
	mov	DWORD PTR _wrong_num_args$92347[esp+36], 1
; Line 40229
	jmp	SHORT $LN21@nameResolv
$LN24@nameResolv:
; Line 40230
	xor	edx, edx
	cmp	DWORD PTR [eax+16], edx
	sete	dl
	mov	DWORD PTR _is_agg$92348[esp+32], edx
$LN21@nameResolv:
; Line 40234
	mov	ebx, DWORD PTR _pParse$[esp+36]
	add	eax, 28					; 0000001cH
	push	0
	push	eax
	mov	DWORD PTR tv515[esp+44], eax
	push	0
	push	31					; 0000001fH
	mov	eax, ebx
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
; Line 40235
	test	eax, eax
	je	SHORT $LN19@nameResolv
; Line 40236
	cmp	eax, 1
	jne	SHORT $LN18@nameResolv
; Line 40238
	mov	eax, DWORD PTR tv515[esp+36]
	push	eax
	push	OFFSET ??_C@_0CD@CLOCOINF@not?5authorized?5to?5use?5function?3?5@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 40239
	add	DWORD PTR [esi+16], 1
$LN18@nameResolv:
	pop	ebx
	pop	edi
	pop	esi
; Line 40241
	mov	BYTE PTR [ebp], 92			; 0000005cH
; Line 40242
	mov	eax, 1
	pop	ebp
; Line 40302
	add	esp, 20					; 00000014H
	ret	0
$LN19@nameResolv:
; Line 40246
	cmp	DWORD PTR _is_agg$92348[esp+32], 0
	je	SHORT $LN15@nameResolv
	cmp	BYTE PTR [esi+20], 0
	jne	SHORT $LN15@nameResolv
; Line 40247
	mov	ecx, DWORD PTR _zId$92352[esp+32]
	push	ecx
	push	edi
	push	OFFSET ??_C@_0CE@JOMBDPK@misuse?5of?5aggregate?5function?5?$CF?4?$CK@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
; Line 40248
	add	DWORD PTR [esi+16], 1
; Line 40249
	mov	DWORD PTR _is_agg$92348[esp+32], 0
	jmp	SHORT $LN115@nameResolv
$LN113@nameResolv:
; Line 40251
	mov	edx, DWORD PTR _zId$92352[esp+32]
	push	edx
	push	edi
	mov	edi, DWORD PTR _pParse$[esp+44]
	push	OFFSET ??_C@_0BH@DEPAIHDK@no?5such?5function?3?5?$CF?4?$CKs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
; Line 40252
	add	DWORD PTR [esi+16], 1
	jmp	SHORT $LN115@nameResolv
$LN15@nameResolv:
; Line 40253
	cmp	DWORD PTR _wrong_num_args$92347[esp+36], 0
	je	SHORT $LN13@nameResolv
; Line 40255
	mov	eax, DWORD PTR _zId$92352[esp+32]
	push	eax
	push	edi
	push	OFFSET ??_C@_0CN@GBOJIJCC@wrong?5number?5of?5arguments?5to?5fun@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
; Line 40256
	add	DWORD PTR [esi+16], 1
$LN13@nameResolv:
; Line 40258
	cmp	DWORD PTR _is_agg$92348[esp+32], 0
	je	SHORT $LN115@nameResolv
; Line 40259
	mov	BYTE PTR [ebp], 150			; 00000096H
; Line 40260
	mov	BYTE PTR [esi+21], 1
; Line 40262
	mov	BYTE PTR [esi+20], 0
$LN115@nameResolv:
; Line 40263
	xor	ebp, ebp
	cmp	DWORD PTR [esi+16], ebp
	jne	SHORT $LN8@nameResolv
	xor	edi, edi
$LL116@nameResolv:
	cmp	ebp, DWORD PTR _n$92345[esp+36]
	jge	SHORT $LN8@nameResolv
; Line 40264
	mov	ecx, DWORD PTR _pList$92344[esp+36]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+edi]
	push	esi
	push	OFFSET _nameResolverStep
	push	eax
	call	_walkExprTree
	add	esp, 12					; 0000000cH
	add	ebp, 1
	add	edi, 12					; 0000000cH
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LL116@nameResolv
$LN8@nameResolv:
; Line 40266
	mov	eax, DWORD PTR _is_agg$92348[esp+32]
	test	eax, eax
	je	SHORT $LN119@nameResolv
	pop	ebx
	pop	edi
	mov	BYTE PTR [esi+20], 1
	pop	esi
	pop	ebp
; Line 40302
	add	esp, 20					; 00000014H
	ret	0
$LN6@nameResolv:
; Line 40277
	cmp	DWORD PTR [ebp+56], ecx
	je	SHORT $LN1@nameResolv
; Line 40280
	cmp	BYTE PTR [esi+22], cl
	mov	ebx, DWORD PTR [esi+12]
	je	SHORT $LN4@nameResolv
; Line 40281
	push	OFFSET ??_C@_0CL@HPCDGFPK@subqueries?5prohibited?5in?5CHECK?5c@
	call	_sqlite3ErrorMsg
	add	esp, 4
$LN4@nameResolv:
; Line 40284
	mov	ecx, DWORD PTR [ebp+56]
	push	esi
	push	ecx
	push	edi
	call	_sqlite3SelectResolve
	add	esp, 12					; 0000000cH
; Line 40286
	cmp	ebx, DWORD PTR [esi+12]
	je	SHORT $LN1@nameResolv
; Line 40287
	or	WORD PTR [ebp+2], 32			; 00000020H
	pop	ebx
	pop	edi
	pop	esi
; Line 40301
	xor	eax, eax
	pop	ebp
; Line 40302
	add	esp, 20					; 00000014H
	ret	0
$LN2@nameResolv:
; Line 40294
	cmp	BYTE PTR [esi+22], cl
	je	SHORT $LN1@nameResolv
; Line 40295
	push	OFFSET ??_C@_0CL@HIKOHDBA@parameters?5prohibited?5in?5CHECK?5c@
	call	_sqlite3ErrorMsg
	add	esp, 4
$LN1@nameResolv:
; Line 40301
	xor	eax, eax
$LN119@nameResolv:
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 40302
	add	esp, 20					; 00000014H
	ret	0
	npad	3
$LN121@nameResolv:
	DD	$LN6@nameResolv
	DD	$LN30@nameResolv
	DD	$LN31@nameResolv
	DD	$LN28@nameResolv
	DD	$LN2@nameResolv
	DD	$LN25@nameResolv
	DD	$LN1@nameResolv
$LN114@nameResolv:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	0
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	DB	6
	DB	6
	DB	6
	DB	5
_nameResolverStep ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DA@HPOBBFJP@Expression?5tree?5is?5too?5large?5?$CIma@ ; `string'
;	COMDAT ??_C@_0DA@HPOBBFJP@Expression?5tree?5is?5too?5large?5?$CIma@
CONST	SEGMENT
??_C@_0DA@HPOBBFJP@Expression?5tree?5is?5too?5large?5?$CIma@ DB 'Expressi'
	DB	'on tree is too large (maximum depth %d)', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3ExprResolveNames
_TEXT	SEGMENT
_sqlite3ExprResolveNames PROC				; COMDAT
; _pNC$ = esi
; _pExpr$ = ebx
; Line 40330
	test	ebx, ebx
	jne	SHORT $LN6@sqlite3Exp@20
	xor	eax, eax
; Line 40356
	ret	0
$LN6@sqlite3Exp@20:
; Line 40332
	mov	eax, DWORD PTR [ebx+68]
	push	edi
	mov	edi, DWORD PTR [esi]
	mov	ecx, DWORD PTR [edi+196]
	add	ecx, eax
	cmp	ecx, 1000				; 000003e8H
	jle	SHORT $LN5@sqlite3Exp@20
; Line 40336
	push	1000					; 000003e8H
	push	OFFSET ??_C@_0DA@HPOBBFJP@Expression?5tree?5is?5too?5large?5?$CIma@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 40337
	mov	eax, 1
	pop	edi
; Line 40356
	ret	0
$LN5@sqlite3Exp@20:
; Line 40339
	add	DWORD PTR [edi+196], eax
; Line 40341
	movzx	edi, BYTE PTR [esi+21]
; Line 40343
	push	esi
	push	OFFSET _nameResolverStep
	push	ebx
	mov	BYTE PTR [esi+21], 0
	call	_walkExprTree
; Line 40345
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [ebx+68]
	sub	DWORD PTR [eax+196], edx
	add	esp, 12					; 0000000cH
; Line 40347
	cmp	DWORD PTR [esi+16], 0
	jle	SHORT $LN4@sqlite3Exp@20
; Line 40348
	or	WORD PTR [ebx+2], 8
$LN4@sqlite3Exp@20:
; Line 40350
	cmp	BYTE PTR [esi+21], 0
	je	SHORT $LN3@sqlite3Exp@20
; Line 40351
	or	WORD PTR [ebx+2], 2
; Line 40355
	mov	al, BYTE PTR [ebx+2]
	and	al, 8
	xor	ecx, ecx
	cmp	al, 8
	sete	cl
	pop	edi
	mov	eax, ecx
; Line 40356
	ret	0
$LN3@sqlite3Exp@20:
; Line 40352
	test	edi, edi
	je	SHORT $LN1@sqlite3Exp@20
; Line 40353
	mov	BYTE PTR [esi+21], 1
$LN1@sqlite3Exp@20:
; Line 40355
	mov	al, BYTE PTR [ebx+2]
	and	al, 8
	xor	ecx, ecx
	cmp	al, 8
	sete	cl
	pop	edi
	mov	eax, ecx
; Line 40356
	ret	0
_sqlite3ExprResolveNames ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3CodeSubselect
_TEXT	SEGMENT
_affinity$92421 = -33					; size = 1
_testAddr$ = -32					; size = 4
_pItem$92435 = -28					; size = 4
_i$92433 = -24						; size = 4
_iMem$92449 = -20					; size = 4
_addr$92423 = -20					; size = 4
_keyInfo$92422 = -16					; size = 16
_pSel$92448 = 8						; size = 4
_pParse$ = 8						; size = 4
_pExpr$ = 12						; size = 4
_sqlite3CodeSubselect PROC				; COMDAT
; Line 40382
	sub	esp, 36					; 00000024H
	push	ebx
; Line 40384
	mov	ebx, DWORD PTR _pParse$[esp+36]
	push	esi
	mov	esi, DWORD PTR [ebx+12]
	test	esi, esi
	push	edi
	mov	DWORD PTR _testAddr$[esp+48], 0
	jne	SHORT $LN58@sqlite3Cod
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	esi, eax
; Line 40385
	test	esi, esi
	mov	DWORD PTR [ebx+12], eax
	je	$LN52@sqlite3Cod
$LN58@sqlite3Cod:
	push	ebp
; Line 40398
	mov	ebp, DWORD PTR _pExpr$[esp+48]
	test	BYTE PTR [ebp+2], 32			; 00000020H
	jne	SHORT $LN59@sqlite3Cod
	cmp	DWORD PTR [ebx+172], 0
	jne	SHORT $LN59@sqlite3Cod
; Line 40399
	mov	edi, DWORD PTR [ebx+32]
; Line 40400
	push	0
	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR [ebx+32], eax
	push	edi
	push	1
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 40401
	push	0
	push	0
	push	10					; 0000000aH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 40403
	push	edi
	mov	DWORD PTR _testAddr$[esp+80], eax
	push	1
	push	48					; 00000030H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 36					; 00000024H
$LN59@sqlite3Cod:
; Line 40406
	mov	al, BYTE PTR [ebp]
	cmp	al, 17					; 00000011H
	je	SHORT $LN5@sqlite3Cod
	cmp	al, 64					; 00000040H
	je	SHORT $LN16@sqlite3Cod
	cmp	al, 110					; 0000006eH
	jne	$LN2@sqlite3Cod
$LN5@sqlite3Cod:
; Line 40502
	mov	eax, DWORD PTR [ebx+32]
	mov	DWORD PTR [ebp+40], eax
	add	DWORD PTR [ebx+32], 1
; Line 40504
	cmp	BYTE PTR [ebp], 110			; 0000006eH
	mov	edi, DWORD PTR [ebp+56]
	mov	DWORD PTR _iMem$92449[esp+52], eax
	mov	DWORD PTR _pSel$92448[esp+48], edi
	jne	$LN4@sqlite3Cod
; Line 40506
	push	0
	push	eax
	mov	ebp, 5
	push	133					; 00000085H
; Line 40508
	jmp	$LN64@sqlite3Cod
$LN16@sqlite3Cod:
; Line 40412
	mov	eax, DWORD PTR [ebp+8]
	call	_sqlite3ExprAffinity
; Line 40427
	mov	ecx, DWORD PTR [ebx+28]
	mov	DWORD PTR [ebp+36], ecx
	mov	edi, 1
	add	DWORD PTR [ebx+28], edi
; Line 40428
	mov	edx, DWORD PTR [ebp+36]
	push	0
	push	edx
	mov	BYTE PTR _affinity$92421[esp+60], al
	push	121					; 00000079H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	DWORD PTR _addr$92423[esp+64], eax
; Line 40429
	xor	eax, eax
	mov	DWORD PTR _keyInfo$92422[esp+68], eax
	mov	DWORD PTR _keyInfo$92422[esp+64], eax
	mov	DWORD PTR _keyInfo$92422[esp+72], eax
	mov	DWORD PTR _keyInfo$92422[esp+76], eax
; Line 40431
	mov	eax, DWORD PTR [ebp+36]
	push	edi
	push	eax
	push	104					; 00000068H
	mov	eax, esi
	mov	DWORD PTR _keyInfo$92422[esp+80], edi
	call	_sqlite3VdbeAddOp
; Line 40433
	mov	ecx, DWORD PTR [ebp+56]
	add	esp, 24					; 00000018H
	test	ecx, ecx
	je	SHORT $LN15@sqlite3Cod
; Line 40439
	movsx	eax, BYTE PTR _affinity$92421[esp+52]
; Line 40442
	push	0
	push	0
	push	0
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR [ebp+36]
	push	0
	push	eax
	push	6
	push	ecx
	push	ebx
	call	_sqlite3Select
	add	esp, 32					; 00000020H
	test	eax, eax
	jne	$LN63@sqlite3Cod
; Line 40445
	mov	ecx, DWORD PTR [ebp+56]
	mov	eax, DWORD PTR [ecx]
; Line 40446
	test	eax, eax
	je	$LN60@sqlite3Cod
	cmp	DWORD PTR [eax], 0
	jle	$LN60@sqlite3Cod
; Line 40448
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ebp+8]
	push	eax
	push	ecx
	push	ebx
	call	_sqlite3BinaryCompareCollSeq
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _keyInfo$92422[esp+64], eax
; Line 40449
	jmp	$LN60@sqlite3Cod
$LN15@sqlite3Cod:
; Line 40450
	mov	eax, DWORD PTR [ebp+16]
	test	eax, eax
	je	$LN60@sqlite3Cod
; Line 40462
	cmp	BYTE PTR _affinity$92421[esp+52], 0
	jne	SHORT $LN10@sqlite3Cod
; Line 40463
	mov	BYTE PTR _affinity$92421[esp+52], 98	; 00000062H
$LN10@sqlite3Cod:
; Line 40465
	mov	edx, DWORD PTR [ebp+8]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _keyInfo$92422[esp+64], ecx
; Line 40468
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _i$92433[esp+52], ecx
	mov	DWORD PTR _pItem$92435[esp+52], edx
	jle	$LN60@sqlite3Cod
$LL62@sqlite3Cod:
; Line 40476
	cmp	DWORD PTR _testAddr$[esp+52], 0
	mov	eax, DWORD PTR _pItem$92435[esp+52]
	mov	edi, DWORD PTR [eax]
	jle	SHORT $LN6@sqlite3Cod
	mov	ecx, edi
	call	_sqlite3ExprIsConstant
	test	eax, eax
	jne	SHORT $LN6@sqlite3Cod
; Line 40477
	mov	ecx, DWORD PTR _testAddr$[esp+52]
	lea	edx, DWORD PTR [eax+3]
	add	ecx, -1
	mov	eax, esi
	call	_sqlite3VdbeChangeToNoop
; Line 40478
	mov	DWORD PTR _testAddr$[esp+52], 0
$LN6@sqlite3Cod:
; Line 40482
	push	edi
	push	ebx
	call	_sqlite3ExprCode
; Line 40483
	push	0
	push	1
	push	91					; 0000005bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 20					; 00000014H
	test	ecx, ecx
	je	SHORT $LN57@sqlite3Cod
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN45@sqlite3Cod
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN57@sqlite3Cod
$LN45@sqlite3Cod:
	test	eax, eax
	jl	SHORT $LN41@sqlite3Cod
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN40@sqlite3Cod
$LN41@sqlite3Cod:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN43@sqlite3Cod
$LN40@sqlite3Cod:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	ebp, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ebp+12]
	call	_freeP3
	mov	edi, 1
	lea	ebx, DWORD PTR _affinity$92421[esp+52]
	mov	DWORD PTR [ebp+12], 0
	call	_sqlite3StrNDup
	mov	ebx, DWORD PTR _pParse$[esp+48]
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR [ebp+16], -1
	mov	ebp, DWORD PTR _pExpr$[esp+48]
	jmp	SHORT $LN43@sqlite3Cod
$LN57@sqlite3Cod:
	lea	ecx, DWORD PTR _affinity$92421[esp+52]
	mov	eax, 1
	call	_freeP3
$LN43@sqlite3Cod:
; Line 40484
	mov	eax, DWORD PTR [ebp+36]
	push	0
	push	eax
	push	111					; 0000006fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	eax, DWORD PTR _i$92433[esp+64]
	add	DWORD PTR _pItem$92435[esp+64], 12	; 0000000cH
	sub	eax, 1
	add	esp, 12					; 0000000cH
	test	eax, eax
	mov	DWORD PTR _i$92433[esp+52], eax
	jg	$LL62@sqlite3Cod
$LN60@sqlite3Cod:
; Line 40487
	mov	eax, DWORD PTR _addr$92423[esp+52]
	lea	ecx, DWORD PTR _keyInfo$92422[esp+52]
	push	ecx
	mov	edx, -6					; fffffffaH
	mov	ecx, esi
	call	_sqlite3VdbeChangeP3
	add	esp, 4
; Line 40488
	jmp	SHORT $LN2@sqlite3Cod
$LN4@sqlite3Cod:
; Line 40510
	push	eax
	push	0
	mov	ebp, 10					; 0000000aH
	push	48					; 00000030H
$LN64@sqlite3Cod:
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 40513
	mov	edx, DWORD PTR [edi+40]
	add	esp, 12					; 0000000cH
	push	edx
	call	_sqlite3ExprDelete
; Line 40514
	push	0
	push	124					; 0000007cH
	mov	eax, OFFSET ?one@?N@??sqlite3CodeSubselect@@9@9
	xor	edi, edi
	call	_sqlite3Expr
	mov	ecx, DWORD PTR _pSel$92448[esp+60]
; Line 40515
	push	edi
	push	edi
	push	edi
	push	edi
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _iMem$92449[esp+80]
	push	eax
	push	ebp
	push	ecx
	push	ebx
	call	_sqlite3Select
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN63@sqlite3Cod
$LN2@sqlite3Cod:
; Line 40522
	mov	eax, DWORD PTR _testAddr$[esp+52]
	test	eax, eax
	je	SHORT $LN63@sqlite3Cod
; Line 40523
	jl	SHORT $LN63@sqlite3Cod
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, eax
	jle	SHORT $LN63@sqlite3Cod
	mov	esi, DWORD PTR [esi+20]
	test	esi, esi
	je	SHORT $LN63@sqlite3Cod
	lea	edx, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [esi+edx*4+8], ecx
$LN63@sqlite3Cod:
	pop	ebp
$LN52@sqlite3Cod:
	pop	edi
	pop	esi
	pop	ebx
; Line 40527
	add	esp, 36					; 00000024H
	ret	0
_sqlite3CodeSubselect ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _addAggInfoColumn
_TEXT	SEGMENT
_i$ = -4						; size = 4
_addAggInfoColumn PROC					; COMDAT
; _pInfo$ = edi
; Line 41264
	push	ecx
	push	esi
; Line 41273
	lea	eax, DWORD PTR _i$[esp+8]
	push	eax
	mov	eax, DWORD PTR [edi+16]
	lea	ecx, DWORD PTR [edi+24]
	push	ecx
	lea	esi, DWORD PTR [edi+20]
	push	24					; 00000018H
	mov	ecx, 3
	call	_sqlite3ArrayAllocate
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+16], eax
; Line 41274
	mov	eax, DWORD PTR _i$[esp+8]
	pop	esi
; Line 41275
	pop	ecx
	ret	0
_addAggInfoColumn ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _addAggInfoFunc
_TEXT	SEGMENT
_i$ = -4						; size = 4
_addAggInfoFunc PROC					; COMDAT
; _pInfo$ = edi
; Line 41281
	push	ecx
	push	esi
; Line 41290
	lea	eax, DWORD PTR _i$[esp+8]
	push	eax
	mov	eax, DWORD PTR [edi+32]
	lea	ecx, DWORD PTR [edi+40]
	push	ecx
	lea	esi, DWORD PTR [edi+36]
	push	16					; 00000010H
	mov	ecx, 3
	call	_sqlite3ArrayAllocate
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+32], eax
; Line 41291
	mov	eax, DWORD PTR _i$[esp+8]
	pop	esi
; Line 41292
	pop	ecx
	ret	0
_addAggInfoFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _analyzeAggregate
_TEXT	SEGMENT
_pAggInfo$ = -4						; size = 4
_i$124866 = 8						; size = 4
_i$124862 = 8						; size = 4
_k$92804 = 8						; size = 4
_i$ = 8							; size = 4
_pArg$ = 8						; size = 4
_enc$92829 = 12						; size = 1
_pItem$92823 = 12					; size = 4
_n$92812 = 12						; size = 4
_pExpr$ = 12						; size = 4
_analyzeAggregate PROC					; COMDAT
; Line 41301
	push	ecx
	push	ebx
	push	ebp
	push	esi
; Line 41304
	mov	esi, DWORD PTR _pArg$[esp+12]
; Line 41306
	mov	ebx, DWORD PTR [esi+28]
	mov	ebp, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	push	edi
; Line 41309
	mov	edi, DWORD PTR _pExpr$[esp+16]
	movzx	eax, BYTE PTR [edi]
	sub	eax, 149				; 00000095H
	mov	DWORD PTR _pAggInfo$[esp+20], ebx
	je	$LN51@analyzeAgg
	sub	eax, 1
	je	SHORT $LN11@analyzeAgg
	sub	eax, 1
	je	$LN51@analyzeAgg
$LN10@analyzeAgg:
; Line 41418
	cmp	DWORD PTR [edi+56], 0
	je	SHORT $LN1@analyzeAgg
; Line 41419
	add	DWORD PTR [esi+24], 1
; Line 41420
	mov	eax, DWORD PTR [edi+56]
	push	esi
	push	OFFSET _analyzeAggregate
	push	eax
	call	_walkSelectExpr
	add	esp, 12					; 0000000cH
; Line 41421
	add	DWORD PTR [esi+24], -1
$LN1@analyzeAgg:
	pop	edi
	pop	esi
	pop	ebp
; Line 41423
	xor	eax, eax
	pop	ebx
; Line 41424
	pop	ecx
	ret	0
$LN11@analyzeAgg:
; Line 41376
	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN10@analyzeAgg
; Line 41381
	cmp	DWORD PTR [ebx+36], 0
	mov	eax, DWORD PTR [ebx+32]
	lea	esi, DWORD PTR [ebx+36]
	mov	DWORD PTR _pItem$92823[esp+16], eax
	mov	DWORD PTR _i$[esp+16], 0
	jle	SHORT $LN52@analyzeAgg
	npad	5
$LL55@analyzeAgg:
; Line 41382
	mov	ecx, DWORD PTR _pItem$92823[esp+16]
	mov	edx, DWORD PTR [ecx]
	push	edi
	push	edx
	call	_sqlite3ExprCompare
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN52@analyzeAgg
	mov	eax, DWORD PTR _i$[esp+16]
	add	DWORD PTR _pItem$92823[esp+16], 16	; 00000010H
	add	eax, 1
	cmp	eax, DWORD PTR [esi]
	mov	DWORD PTR _i$[esp+16], eax
	jl	SHORT $LL55@analyzeAgg
$LN52@analyzeAgg:
; Line 41386
	mov	eax, DWORD PTR _i$[esp+16]
	cmp	eax, DWORD PTR [esi]
	jl	$LN53@analyzeAgg
; Line 41389
	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+20]
	mov	cl, BYTE PTR [eax+121]
; Line 41390
	lea	edx, DWORD PTR _i$124866[esp+16]
	push	edx
	lea	eax, DWORD PTR [ebx+40]
	push	eax
	mov	eax, DWORD PTR [ebx+32]
	mov	BYTE PTR _enc$92829[esp+24], cl
	push	16					; 00000010H
	mov	ecx, 3
	call	_sqlite3ArrayAllocate
	mov	ecx, DWORD PTR _i$124866[esp+28]
	add	esp, 12					; 0000000cH
; Line 41391
	test	ecx, ecx
	mov	DWORD PTR [ebx+32], eax
	mov	DWORD PTR _i$[esp+16], ecx
	jl	SHORT $LN53@analyzeAgg
; Line 41392
	shl	ecx, 4
	add	ecx, eax
	mov	esi, ecx
; Line 41393
	mov	DWORD PTR [esi], edi
; Line 41394
	mov	ecx, DWORD PTR [ebp+32]
	mov	DWORD PTR [esi+8], ecx
	add	DWORD PTR [ebp+32], 1
; Line 41397
	mov	eax, DWORD PTR [edi+16]
	test	eax, eax
	je	SHORT $LN33@analyzeAgg
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN34@analyzeAgg
$LN33@analyzeAgg:
	xor	eax, eax
$LN34@analyzeAgg:
	mov	edx, DWORD PTR _enc$92829[esp+16]
	mov	ebx, DWORD PTR [edi+24]
	push	0
	push	edx
	push	eax
	mov	eax, DWORD PTR [edi+20]
	push	eax
	mov	eax, DWORD PTR [ebp]
	shr	ebx, 1
	call	_sqlite3FindFunction
; Line 41400
	mov	ebx, DWORD PTR _pAggInfo$[esp+36]
	add	esp, 16					; 00000010H
	mov	DWORD PTR [esi+4], eax
	test	BYTE PTR [edi+2], 16			; 00000010H
	je	SHORT $LN3@analyzeAgg
	mov	ecx, DWORD PTR [ebp+28]
; Line 41407
	mov	edx, DWORD PTR _i$[esp+16]
	mov	DWORD PTR [esi+12], ecx
	add	DWORD PTR [ebp+28], 1
	mov	DWORD PTR [edi+44], ebx
	mov	DWORD PTR [edi+48], edx
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 41424
	pop	ecx
	ret	0
$LN3@analyzeAgg:
; Line 41401
	mov	DWORD PTR [esi+12], -1
$LN53@analyzeAgg:
; Line 41407
	mov	edx, DWORD PTR _i$[esp+16]
	mov	DWORD PTR [edi+44], ebx
	mov	DWORD PTR [edi+48], edx
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, 1
	pop	ebx
; Line 41424
	pop	ecx
	ret	0
$LN51@analyzeAgg:
; Line 41314
	test	ecx, ecx
	je	$LN59@analyzeAgg
; Line 41316
	movsx	edx, WORD PTR [ecx]
	xor	eax, eax
	test	edx, edx
	jle	$LN59@analyzeAgg
	mov	esi, DWORD PTR [edi+36]
	add	ecx, 32					; 00000020H
	npad	3
$LL26@analyzeAgg:
; Line 41318
	cmp	esi, DWORD PTR [ecx]
	je	SHORT $LN44@analyzeAgg
	add	eax, 1
	add	ecx, 48					; 00000030H
	cmp	eax, edx
	jl	SHORT $LL26@analyzeAgg
	pop	edi
	pop	esi
	pop	ebp
; Line 41371
	mov	eax, 1
	pop	ebx
; Line 41424
	pop	ecx
	ret	0
$LN44@analyzeAgg:
; Line 41327
	mov	edx, DWORD PTR [ebx+20]
	mov	ecx, DWORD PTR [ebx+16]
	lea	esi, DWORD PTR [ebx+20]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN57@analyzeAgg
; Line 41326
	add	ecx, 8
	npad	5
$LL22@analyzeAgg:
; Line 41329
	mov	edx, DWORD PTR [edi+36]
	cmp	DWORD PTR [ecx-4], edx
	jne	SHORT $LN21@analyzeAgg
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [edi+40]
	je	SHORT $LN57@analyzeAgg
$LN21@analyzeAgg:
; Line 41327
	add	eax, 1
	add	ecx, 24					; 00000018H
	cmp	eax, DWORD PTR [esi]
	jl	SHORT $LL22@analyzeAgg
$LN57@analyzeAgg:
; Line 41333
	cmp	eax, DWORD PTR [esi]
	jl	$LN12@analyzeAgg
	lea	eax, DWORD PTR _i$124862[esp+16]
	push	eax
	mov	eax, DWORD PTR [ebx+16]
	lea	ecx, DWORD PTR [ebx+24]
	push	ecx
	push	24					; 00000018H
	mov	ecx, 3
	call	_sqlite3ArrayAllocate
	mov	ecx, DWORD PTR _i$124862[esp+28]
	add	esp, 12					; 0000000cH
	test	ecx, ecx
	mov	DWORD PTR [ebx+16], eax
	mov	DWORD PTR _k$92804[esp+16], ecx
	jl	SHORT $LN54@analyzeAgg
; Line 41334
	lea	edx, DWORD PTR [ecx+ecx*2]
; Line 41335
	mov	ecx, DWORD PTR [edi+60]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	DWORD PTR [eax], ecx
; Line 41336
	mov	edx, DWORD PTR [edi+36]
	mov	DWORD PTR [eax+4], edx
; Line 41337
	mov	ecx, DWORD PTR [edi+40]
	mov	DWORD PTR [eax+8], ecx
; Line 41338
	mov	edx, DWORD PTR [ebp+32]
	mov	DWORD PTR [eax+16], edx
	add	DWORD PTR [ebp+32], 1
; Line 41339
	mov	DWORD PTR [eax+12], -1
; Line 41340
	mov	DWORD PTR [eax+20], edi
; Line 41341
	mov	ecx, DWORD PTR [ebx+8]
	test	ecx, ecx
	je	SHORT $LN14@analyzeAgg
; Line 41344
	mov	edx, DWORD PTR [ecx+12]
; Line 41345
	mov	ecx, DWORD PTR [ecx]
; Line 41346
	xor	ebp, ebp
	test	ecx, ecx
	mov	DWORD PTR _n$92812[esp+16], ecx
	jle	SHORT $LN14@analyzeAgg
	npad	4
$LL16@analyzeAgg:
; Line 41347
	mov	esi, DWORD PTR [edx]
; Line 41349
	cmp	BYTE PTR [esi], 149			; 00000095H
	jne	SHORT $LN15@analyzeAgg
	mov	ecx, DWORD PTR [esi+36]
	cmp	ecx, DWORD PTR [edi+36]
	jne	SHORT $LN56@analyzeAgg
	mov	ecx, DWORD PTR [esi+40]
	cmp	ecx, DWORD PTR [edi+40]
	je	SHORT $LN46@analyzeAgg
$LN56@analyzeAgg:
	mov	ecx, DWORD PTR _n$92812[esp+16]
$LN15@analyzeAgg:
; Line 41346
	add	ebp, 1
	add	edx, 12					; 0000000cH
	cmp	ebp, ecx
	jl	SHORT $LL16@analyzeAgg
; Line 41349
	jmp	SHORT $LN14@analyzeAgg
$LN46@analyzeAgg:
; Line 41350
	mov	DWORD PTR [eax+12], ebp
$LN14@analyzeAgg:
; Line 41355
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN54@analyzeAgg
; Line 41356
	mov	edx, DWORD PTR [ebx+12]
	mov	DWORD PTR [eax+12], edx
	add	DWORD PTR [ebx+12], 1
$LN54@analyzeAgg:
	mov	eax, DWORD PTR _k$92804[esp+16]
$LN12@analyzeAgg:
; Line 41365
	mov	BYTE PTR [edi], 151			; 00000097H
; Line 41366
	mov	DWORD PTR [edi+48], eax
	mov	DWORD PTR [edi+44], ebx
$LN59@analyzeAgg:
	pop	edi
	pop	esi
	pop	ebp
; Line 41371
	mov	eax, 1
	pop	ebx
; Line 41424
	pop	ecx
	ret	0
_analyzeAggregate ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprAnalyzeAggregates
_TEXT	SEGMENT
_sqlite3ExprAnalyzeAggregates PROC			; COMDAT
; _pNC$ = esi
; _pExpr$ = ecx
; Line 41438
	mov	eax, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR [eax+24]
; Line 41439
	push	esi
	push	OFFSET _analyzeAggregate
	push	ecx
	call	_walkExprTree
; Line 41440
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+24]
	add	esp, 12					; 0000000cH
	sub	eax, edi
	pop	edi
; Line 41441
	ret	0
_sqlite3ExprAnalyzeAggregates ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprAnalyzeAggList
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pList$ = 8						; size = 4
_sqlite3ExprAnalyzeAggList PROC				; COMDAT
; _pNC$ = esi
; Line 41449
	push	ecx
; Line 41453
	mov	eax, DWORD PTR _pList$[esp]
	push	edi
	xor	edi, edi
	cmp	eax, edi
	je	SHORT $LN12@sqlite3Exp@21
	push	ebx
; Line 41454
	mov	ebx, DWORD PTR [eax+12]
	push	ebp
	mov	DWORD PTR _i$[esp+16], edi
	jmp	SHORT $LN3@sqlite3Exp@21
	npad	9
$LL13@sqlite3Exp@21:
	mov	eax, DWORD PTR _pList$[esp+12]
$LN3@sqlite3Exp@21:
	mov	ecx, DWORD PTR _i$[esp+16]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN11@sqlite3Exp@21
; Line 41455
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [esi]
	mov	ebp, DWORD PTR [edx+24]
	push	esi
	push	OFFSET _analyzeAggregate
	push	eax
	call	_walkExprTree
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+24]
	add	DWORD PTR _i$[esp+28], 1
	sub	edx, ebp
	add	edi, edx
	add	esp, 12					; 0000000cH
	add	ebx, 12					; 0000000cH
	test	edi, edi
	je	SHORT $LL13@sqlite3Exp@21
$LN11@sqlite3Exp@21:
	pop	ebp
	pop	ebx
; Line 41458
	mov	eax, edi
	pop	edi
; Line 41459
	pop	ecx
	ret	0
$LN12@sqlite3Exp@21:
; Line 41458
	mov	eax, edi
	pop	edi
; Line 41459
	pop	ecx
	ret	0
_sqlite3ExprAnalyzeAggList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AlterFunctions
_TEXT	SEGMENT
_sqlite3AlterFunctions PROC				; COMDAT
; _db$ = edi
; Line 41622
	push	esi
; Line 41635
	xor	esi, esi
$LL3@sqlite3Alt:
; Line 41637
	mov	eax, DWORD PTR ?aFuncs@?1??sqlite3AlterFunctions@@9@9[esi+8]
	movsx	ecx, BYTE PTR ?aFuncs@?1??sqlite3AlterFunctions@@9@9[esi+4]
	mov	edx, DWORD PTR ?aFuncs@?1??sqlite3AlterFunctions@@9@9[esi]
	push	0
	push	0
	push	eax
	push	0
	push	1
	push	ecx
	push	edx
	push	edi
	call	_sqlite3CreateFunc
	add	esi, 12					; 0000000cH
	add	esp, 32					; 00000020H
	cmp	esi, 24					; 00000018H
	jb	SHORT $LL3@sqlite3Alt
	pop	esi
; Line 41639
	ret	0
_sqlite3AlterFunctions ENDP
_TEXT	ENDS
PUBLIC	??_C@_0HH@LILEMBIE@UPDATE?5?$CFQ?4?$CFs?5SET?5sql?5?$DN?5substr?$CIsq@ ; `string'
PUBLIC	??_C@_0CO@DPKGGDEF@Cannot?5add?5a?5column?5with?5non?9con@ ; `string'
PUBLIC	??_C@_0DF@JACFJFPO@Cannot?5add?5a?5NOT?5NULL?5column?5wit@ ; `string'
PUBLIC	??_C@_0BL@NAFLCLKF@Cannot?5add?5a?5UNIQUE?5column?$AA@ ; `string'
PUBLIC	??_C@_0CA@KEHKHMLG@Cannot?5add?5a?5PRIMARY?5KEY?5column?$AA@ ; `string'
;	COMDAT ??_C@_0HH@LILEMBIE@UPDATE?5?$CFQ?4?$CFs?5SET?5sql?5?$DN?5substr?$CIsq@
CONST	SEGMENT
??_C@_0HH@LILEMBIE@UPDATE?5?$CFQ?4?$CFs?5SET?5sql?5?$DN?5substr?$CIsq@ DB 'U'
	DB	'PDATE %Q.%s SET sql = substr(sql,1,%d) || '', '' || %Q || sub'
	DB	'str(sql,%d,length(sql)) WHERE type = ''table'' AND name = %Q', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DPKGGDEF@Cannot?5add?5a?5column?5with?5non?9con@
CONST	SEGMENT
??_C@_0CO@DPKGGDEF@Cannot?5add?5a?5column?5with?5non?9con@ DB 'Cannot add'
	DB	' a column with non-constant default', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JACFJFPO@Cannot?5add?5a?5NOT?5NULL?5column?5wit@
CONST	SEGMENT
??_C@_0DF@JACFJFPO@Cannot?5add?5a?5NOT?5NULL?5column?5wit@ DB 'Cannot add'
	DB	' a NOT NULL column with default value NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NAFLCLKF@Cannot?5add?5a?5UNIQUE?5column?$AA@
CONST	SEGMENT
??_C@_0BL@NAFLCLKF@Cannot?5add?5a?5UNIQUE?5column?$AA@ DB 'Cannot add a U'
	DB	'NIQUE column', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KEHKHMLG@Cannot?5add?5a?5PRIMARY?5KEY?5column?$AA@
CONST	SEGMENT
??_C@_0CA@KEHKHMLG@Cannot?5add?5a?5PRIMARY?5KEY?5column?$AA@ DB 'Cannot a'
	DB	'dd a PRIMARY KEY column', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AlterFinishAddColumn
_TEXT	SEGMENT
_pDflt$ = -24						; size = 4
_pVal$93028 = -20					; size = 4
_pCol$ = -20						; size = 4
_pNew$ = -16						; size = 4
_zTab$ = -12						; size = 4
_zDb$ = -8						; size = 4
_pTab$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pColDef$ = 12						; size = 4
_sqlite3AlterFinishAddColumn PROC			; COMDAT
; Line 41881
	mov	eax, DWORD PTR _pParse$[esp-4]
	sub	esp, 24					; 00000018H
	cmp	DWORD PTR [eax+24], 0
	jne	$LN15@sqlite3Alt@2
; Line 41885
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax+164]
	push	edi
	mov	edi, DWORD PTR [esi+76]
	test	edi, edi
	mov	DWORD PTR _pNew$[esp+36], esi
	mov	ebp, -1000000				; fff0bdc0H
	je	SHORT $LN28@sqlite3Alt@2
	mov	edx, DWORD PTR [ecx]
	xor	ebp, ebp
	test	edx, edx
	jle	SHORT $LN28@sqlite3Alt@2
	mov	eax, DWORD PTR [ecx+4]
	add	eax, 20					; 00000014H
	npad	6
$LL22@sqlite3Alt@2:
	cmp	DWORD PTR [eax], edi
	je	SHORT $LN28@sqlite3Alt@2
	add	ebp, 1
	add	eax, 24					; 00000018H
	cmp	ebp, edx
	jl	SHORT $LL22@sqlite3Alt@2
$LN28@sqlite3Alt@2:
; Line 41886
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [ebp+ebp*2]
	mov	edi, DWORD PTR [edx+eax*8]
; Line 41888
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [eax+eax*4]
	push	ebx
	mov	ebx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+eax*4-20]
	mov	DWORD PTR _pCol$[esp+40], eax
; Line 41889
	mov	eax, DWORD PTR [eax+4]
; Line 41890
	push	edi
	push	ecx
	mov	DWORD PTR _zDb$[esp+48], edi
	mov	DWORD PTR _zTab$[esp+48], ebx
	mov	DWORD PTR _pDflt$[esp+48], eax
	call	_sqlite3FindTable
; Line 41895
	mov	ecx, DWORD PTR [eax]
	push	0
	push	ecx
	push	edi
	mov	edi, DWORD PTR _pParse$[esp+56]
	mov	DWORD PTR _pTab$[esp+60], eax
	push	26					; 0000001aH
	mov	eax, edi
	call	_sqlite3AuthCheck
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	$LN35@sqlite3Alt@2
; Line 41904
	mov	eax, DWORD PTR _pDflt$[esp+40]
	test	eax, eax
	je	SHORT $LN12@sqlite3Alt@2
	cmp	BYTE PTR [eax], 92			; 0000005cH
	jne	SHORT $LN12@sqlite3Alt@2
; Line 41905
	mov	DWORD PTR _pDflt$[esp+40], 0
	mov	eax, DWORD PTR _pDflt$[esp+40]
$LN12@sqlite3Alt@2:
; Line 41912
	mov	ecx, DWORD PTR _pCol$[esp+40]
	cmp	BYTE PTR [ecx+17], 0
	je	SHORT $LN11@sqlite3Alt@2
; Line 41913
	push	OFFSET ??_C@_0CA@KEHKHMLG@Cannot?5add?5a?5PRIMARY?5KEY?5column?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 41967
	add	esp, 24					; 00000018H
	ret	0
$LN11@sqlite3Alt@2:
; Line 41916
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN10@sqlite3Alt@2
; Line 41917
	push	OFFSET ??_C@_0BL@NAFLCLKF@Cannot?5add?5a?5UNIQUE?5column?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 41967
	add	esp, 24					; 00000018H
	ret	0
$LN10@sqlite3Alt@2:
; Line 41920
	cmp	BYTE PTR [ecx+16], 0
	je	SHORT $LN9@sqlite3Alt@2
	test	eax, eax
	jne	SHORT $LN30@sqlite3Alt@2
; Line 41922
	push	OFFSET ??_C@_0DF@JACFJFPO@Cannot?5add?5a?5NOT?5NULL?5column?5wit@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 41967
	add	esp, 24					; 00000018H
	ret	0
$LN9@sqlite3Alt@2:
; Line 41929
	test	eax, eax
	je	SHORT $LN8@sqlite3Alt@2
$LN30@sqlite3Alt@2:
; Line 41931
	lea	edx, DWORD PTR _pVal$93028[esp+40]
	push	edx
	push	98					; 00000062H
	push	1
	push	eax
	call	_sqlite3ValueFromExpr
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN35@sqlite3Alt@2
; Line 41935
	mov	esi, DWORD PTR _pVal$93028[esp+40]
	test	esi, esi
	jne	SHORT $LN6@sqlite3Alt@2
; Line 41936
	push	OFFSET ??_C@_0CO@DPKGGDEF@Cannot?5add?5a?5column?5with?5non?9con@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 41967
	add	esp, 24					; 00000018H
	ret	0
$LN6@sqlite3Alt@2:
; Line 41939
	call	_sqlite3ValueFree
	mov	esi, DWORD PTR _pNew$[esp+40]
$LN8@sqlite3Alt@2:
; Line 41943
	mov	eax, DWORD PTR _pColDef$[esp+36]
	mov	edi, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax]
	shr	edi, 1
	call	_sqlite3StrNDup
	mov	edi, eax
; Line 41944
	test	edi, edi
	je	SHORT $LN31@sqlite3Alt@2
; Line 41945
	mov	eax, DWORD PTR _pColDef$[esp+36]
	mov	ecx, DWORD PTR [eax+4]
	shr	ecx, 1
	lea	ebx, DWORD PTR [ecx+edi-1]
	npad	3
$LL4@sqlite3Alt@2:
; Line 41946
	cmp	ebx, edi
	jbe	SHORT $LN1@sqlite3Alt@2
	cmp	BYTE PTR [ebx], 59			; 0000003bH
	je	SHORT $LN2@sqlite3Alt@2
$LN1@sqlite3Alt@2:
	movzx	edx, BYTE PTR [ebx]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@sqlite3Alt@2
$LN2@sqlite3Alt@2:
; Line 41947
	mov	BYTE PTR [ebx], 0
	sub	ebx, 1
; Line 41948
	jmp	SHORT $LL4@sqlite3Alt@2
$LN3@sqlite3Alt@2:
; Line 41955
	cmp	ebp, 1
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN18@sqlite3Alt@2
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN18@sqlite3Alt@2:
	mov	esi, DWORD PTR [esi+48]
	mov	ecx, DWORD PTR _zTab$[esp+40]
	mov	ebx, DWORD PTR _pParse$[esp+36]
	push	ecx
	lea	edx, DWORD PTR [esi+1]
	push	edx
	push	edi
	push	esi
	push	eax
	mov	eax, DWORD PTR _zDb$[esp+60]
	push	eax
	push	OFFSET ??_C@_0HH@LILEMBIE@UPDATE?5?$CFQ?4?$CFs?5SET?5sql?5?$DN?5substr?$CIsq@
	call	_sqlite3NestedParse
; Line 41956
	push	edi
	call	_sqlite3FreeX
	add	esp, 32					; 00000020H
	jmp	SHORT $LN5@sqlite3Alt@2
$LN31@sqlite3Alt@2:
	mov	ebx, DWORD PTR _pParse$[esp+36]
$LN5@sqlite3Alt@2:
; Line 41963
	xor	ecx, ecx
	cmp	DWORD PTR _pDflt$[esp+40], ecx
	setne	cl
	add	ecx, 2
	push	ecx
	push	ebp
	call	_sqlite3MinimumFileFormat
; Line 41966
	mov	eax, DWORD PTR _pTab$[esp+48]
	mov	edx, DWORD PTR [eax]
	push	edx
	push	eax
	push	ebx
	call	_reloadTableSchema
	add	esp, 20					; 00000014H
$LN35@sqlite3Alt@2:
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
$LN15@sqlite3Alt@2:
; Line 41967
	add	esp, 24					; 00000018H
	ret	0
_sqlite3AlterFinishAddColumn ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@MKNMEANI@DELETE?5FROM?5?$CFQ?4sqlite_stat1?5WHER@ ; `string'
PUBLIC	??_C@_0CL@CNIGKJFK@CREATE?5TABLE?5?$CFQ?4sqlite_stat1?$CItbl@ ; `string'
;	COMDAT ??_C@_0CJ@MKNMEANI@DELETE?5FROM?5?$CFQ?4sqlite_stat1?5WHER@
CONST	SEGMENT
??_C@_0CJ@MKNMEANI@DELETE?5FROM?5?$CFQ?4sqlite_stat1?5WHER@ DB 'DELETE FR'
	DB	'OM %Q.sqlite_stat1 WHERE tbl=%Q', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CNIGKJFK@CREATE?5TABLE?5?$CFQ?4sqlite_stat1?$CItbl@
CONST	SEGMENT
??_C@_0CL@CNIGKJFK@CREATE?5TABLE?5?$CFQ?4sqlite_stat1?$CItbl@ DB 'CREATE '
	DB	'TABLE %Q.sqlite_stat1(tbl,idx,stat)', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _openStatTable
_TEXT	SEGMENT
_pStat$ = 8						; size = 4
_pParse$ = 8						; size = 4
_iDb$ = 12						; size = 4
_iStatCur$ = 16						; size = 4
_zWhere$ = 20						; size = 4
_openStatTable PROC					; COMDAT
; Line 42086
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+4]
; Line 42087
	mov	ebx, DWORD PTR [ebp]
	push	esi
; Line 42091
	mov	esi, DWORD PTR [ebp+12]
	test	esi, esi
	push	edi
	jne	SHORT $LN12@openStatTa
	mov	edi, ebx
	call	_sqlite3VdbeCreate
	mov	esi, eax
; Line 42093
	test	esi, esi
	mov	DWORD PTR [ebp+12], eax
	je	$LN7@openStatTa
$LN12@openStatTa:
; Line 42094
	mov	eax, DWORD PTR _iDb$[esp+12]
	mov	ecx, DWORD PTR [ebx+4]
	lea	eax, DWORD PTR [eax+eax*2]
; Line 42095
	mov	edx, DWORD PTR [ecx+eax*8]
	lea	edi, DWORD PTR [ecx+eax*8]
	push	edx
	push	ebx
	mov	ebx, OFFSET ??_C@_0N@EIGEIEIJ@sqlite_stat1?$AA@
	call	_sqlite3FindTable
	add	esp, 8
	test	eax, eax
	mov	DWORD PTR _pStat$[esp+12], eax
	jne	SHORT $LN5@openStatTa
; Line 42103
	mov	eax, DWORD PTR [edi]
	push	eax
	push	OFFSET ??_C@_0CL@CNIGKJFK@CREATE?5TABLE?5?$CFQ?4sqlite_stat1?$CItbl@
	mov	ebx, ebp
	call	_sqlite3NestedParse
	add	esp, 8
; Line 42104
	xor	edi, edi
	jmp	SHORT $LN1@openStatTa
$LN5@openStatTa:
; Line 42105
	mov	ecx, DWORD PTR _zWhere$[esp+12]
	test	ecx, ecx
	je	SHORT $LN3@openStatTa
; Line 42111
	push	ecx
	mov	ecx, DWORD PTR [edi]
	push	ecx
	push	OFFSET ??_C@_0CJ@MKNMEANI@DELETE?5FROM?5?$CFQ?4sqlite_stat1?5WHER@
	mov	ebx, ebp
	call	_sqlite3NestedParse
; Line 42112
	mov	edx, DWORD PTR _pStat$[esp+24]
	mov	edi, DWORD PTR [edx+20]
; Line 42113
	jmp	SHORT $LN13@openStatTa
$LN3@openStatTa:
; Line 42115
	mov	edi, DWORD PTR [eax+20]
; Line 42116
	mov	eax, DWORD PTR _iDb$[esp+12]
	push	eax
	push	edi
	push	98					; 00000062H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
$LN13@openStatTa:
	add	esp, 12					; 0000000cH
; Line 42124
	test	edi, edi
	jle	SHORT $LN1@openStatTa
; Line 42125
	mov	ecx, DWORD PTR _iDb$[esp+12]
	push	OFFSET ??_C@_0N@EIGEIEIJ@sqlite_stat1?$AA@
	push	1
	push	edi
	push	ecx
	push	ebp
	call	_sqlite3TableLock
	add	esp, 20					; 00000014H
$LN1@openStatTa:
; Line 42127
	mov	edx, DWORD PTR _iDb$[esp+12]
	push	0
	push	edx
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 42128
	push	edi
	mov	edi, DWORD PTR _iStatCur$[esp+28]
	push	edi
	push	9
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 42129
	push	3
	push	edi
	push	104					; 00000068H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 36					; 00000024H
$LN7@openStatTa:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 42130
	ret	0
_openStatTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@CLLJHPMJ@invalid?5name?3?5?$CC?$CFT?$CC?$AA@ ; `string'
;	COMDAT ??_C@_0BD@CLLJHPMJ@invalid?5name?3?5?$CC?$CFT?$CC?$AA@
CONST	SEGMENT
??_C@_0BD@CLLJHPMJ@invalid?5name?3?5?$CC?$CFT?$CC?$AA@ DB 'invalid name: '
	DB	'"%T"', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _resolveAttachExpr
_TEXT	SEGMENT
_isConst$124957 = -4					; size = 4
_resolveAttachExpr PROC					; COMDAT
; _pName$ = ecx
; _pExpr$ = eax
; Line 42504
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	ebx, eax
; Line 42505
	xor	edi, edi
; Line 42506
	test	ebx, ebx
	mov	esi, ecx
	je	SHORT $LN1@resolveAtt
; Line 42507
	cmp	BYTE PTR [ebx], 23			; 00000017H
	je	SHORT $LN3@resolveAtt
; Line 42508
	call	_sqlite3ExprResolveNames
	mov	edi, eax
; Line 42509
	test	edi, edi
	jne	SHORT $LN1@resolveAtt
	lea	eax, DWORD PTR _isConst$124957[esp+16]
	push	eax
	push	OFFSET _exprNodeIsConstant
	push	ebx
	mov	DWORD PTR _isConst$124957[esp+28], 1
	call	_walkExprTree
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _isConst$124957[esp+16], edi
	jne	SHORT $LN1@resolveAtt
; Line 42510
	mov	edi, DWORD PTR [esi]
	add	ebx, 28					; 0000001cH
	push	ebx
	push	OFFSET ??_C@_0BD@CLLJHPMJ@invalid?5name?3?5?$CC?$CFT?$CC?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
	pop	edi
	pop	esi
; Line 42511
	mov	eax, 1
	pop	ebx
; Line 42518
	pop	ecx
	ret	0
$LN3@resolveAtt:
; Line 42514
	mov	BYTE PTR [ebx], 88			; 00000058H
$LN1@resolveAtt:
; Line 42517
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 42518
	pop	ecx
	ret	0
_resolveAttachExpr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ResetInternalSchema
_TEXT	SEGMENT
_i$ = -4						; size = 4
_j$ = 8							; size = 4
_iDb$ = 8						; size = 4
_sqlite3ResetInternalSchema PROC			; COMDAT
; _db$ = ebx
; Line 43617
	push	ecx
	push	ebp
	mov	ebp, DWORD PTR _iDb$[esp+4]
; Line 43621
	cmp	ebp, DWORD PTR [ebx]
	push	esi
	push	edi
	mov	edi, ebp
	jge	SHORT $LN36@sqlite3Res
	lea	esi, DWORD PTR [ebp+ebp*2]
	add	esi, esi
	add	esi, esi
	add	esi, esi
$LL16@sqlite3Res:
; Line 43622
	mov	eax, DWORD PTR [ebx+4]
	add	eax, esi
; Line 43623
	mov	eax, DWORD PTR [eax+20]
	test	eax, eax
	je	SHORT $LN13@sqlite3Res
; Line 43624
	push	eax
	call	_sqlite3SchemaFree
	add	esp, 4
$LN13@sqlite3Res:
; Line 43626
	test	ebp, ebp
	jg	$LN1@sqlite3Res
	add	edi, 1
	add	esi, 24					; 00000018H
	cmp	edi, DWORD PTR [ebx]
	jl	SHORT $LL16@sqlite3Res
$LN36@sqlite3Res:
; Line 43629
	and	DWORD PTR [ebx+8], -17			; ffffffefH
; Line 43637
	xor	ebp, ebp
	cmp	DWORD PTR [ebx], ebp
	jle	SHORT $LN9@sqlite3Res
; Line 43629
	xor	edi, edi
	npad	5
$LL11@sqlite3Res:
; Line 43638
	mov	esi, DWORD PTR [ebx+4]
	add	esi, edi
; Line 43639
	cmp	DWORD PTR [esi+4], 0
	jne	SHORT $LN10@sqlite3Res
; Line 43640
	mov	ecx, DWORD PTR [esi+12]
	test	ecx, ecx
	je	SHORT $LN7@sqlite3Res
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN7@sqlite3Res
	push	ecx
	call	eax
	add	esp, 4
$LN7@sqlite3Res:
; Line 43641
	mov	DWORD PTR [esi+12], 0
$LN10@sqlite3Res:
; Line 43637
	add	ebp, 1
	add	edi, 24					; 00000018H
	cmp	ebp, DWORD PTR [ebx]
	jl	SHORT $LL11@sqlite3Res
$LN9@sqlite3Res:
; Line 43644
	mov	esi, 2
	mov	ecx, esi
	cmp	DWORD PTR [ebx], ecx
	mov	DWORD PTR _j$[esp+12], esi
	mov	DWORD PTR _i$[esp+16], ecx
	jle	$LN4@sqlite3Res
	mov	ebp, 48					; 00000030H
	mov	edi, ebp
	npad	2
$LL6@sqlite3Res:
; Line 43645
	mov	esi, DWORD PTR [ebx+4]
; Line 43646
	cmp	DWORD PTR [edi+esi+4], 0
	jne	SHORT $LN3@sqlite3Res
; Line 43647
	mov	eax, DWORD PTR [edi+esi]
	test	eax, eax
	je	SHORT $LN22@sqlite3Res
	push	eax
	call	_free
	mov	ecx, DWORD PTR _i$[esp+20]
	add	esp, 4
$LN22@sqlite3Res:
; Line 43648
	mov	DWORD PTR [edi+esi], 0
; Line 43649
	jmp	SHORT $LN5@sqlite3Res
$LN3@sqlite3Res:
; Line 43651
	cmp	DWORD PTR _j$[esp+12], ecx
	jge	SHORT $LN2@sqlite3Res
; Line 43652
	mov	eax, DWORD PTR [edi+esi]
	mov	DWORD PTR [esi+ebp], eax
	mov	edx, DWORD PTR [edi+esi+4]
	mov	DWORD PTR [esi+ebp+4], edx
	mov	eax, DWORD PTR [edi+esi+8]
	mov	DWORD PTR [esi+ebp+8], eax
	mov	edx, DWORD PTR [edi+esi+12]
	mov	DWORD PTR [esi+ebp+12], edx
	mov	eax, DWORD PTR [edi+esi+16]
	mov	DWORD PTR [esi+ebp+16], eax
	mov	edx, DWORD PTR [edi+esi+20]
	mov	DWORD PTR [esi+ebp+20], edx
$LN2@sqlite3Res:
; Line 43654
	add	DWORD PTR _j$[esp+12], 1
	add	ebp, 24					; 00000018H
$LN5@sqlite3Res:
	add	ecx, 1
	add	edi, 24					; 00000018H
	cmp	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _i$[esp+16], ecx
	jl	SHORT $LL6@sqlite3Res
; Line 43644
	mov	esi, DWORD PTR _j$[esp+12]
$LN4@sqlite3Res:
; Line 43656
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+4]
	sub	eax, esi
	lea	eax, DWORD PTR [eax+eax*2]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	lea	ecx, DWORD PTR [esi+esi*2]
	lea	eax, DWORD PTR [edx+ecx*8]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 43658
	cmp	esi, 2
	mov	DWORD PTR [ebx], esi
	jg	SHORT $LN1@sqlite3Res
	mov	eax, DWORD PTR [ebx+4]
	lea	ebp, DWORD PTR [ebx+292]
	cmp	eax, ebp
	je	SHORT $LN1@sqlite3Res
; Line 43660
	test	eax, eax
	mov	ecx, 12					; 0000000cH
	mov	esi, eax
	mov	edi, ebp
	rep movsd
	je	SHORT $LN27@sqlite3Res
	push	eax
	call	_free
	add	esp, 4
$LN27@sqlite3Res:
; Line 43661
	mov	DWORD PTR [ebx+4], ebp
$LN1@sqlite3Res:
	pop	edi
	pop	esi
	pop	ebp
; Line 43663
	pop	ecx
	ret	0
_sqlite3ResetInternalSchema ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@MLPCOIJO@default?5value?5of?5column?5?$FL?$CFs?$FN?5is?5@ ; `string'
;	COMDAT ??_C@_0CN@MLPCOIJO@default?5value?5of?5column?5?$FL?$CFs?$FN?5is?5@
CONST	SEGMENT
??_C@_0CN@MLPCOIJO@default?5value?5of?5column?5?$FL?$CFs?$FN?5is?5@ DB 'd'
	DB	'efault value of column [%s] is not constant', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AddDefaultValue
_TEXT	SEGMENT
_isConst$124995 = -4					; size = 4
_sqlite3AddDefaultValue PROC				; COMDAT
; _pParse$ = eax
; _pExpr$ = ebx
; Line 44277
	push	ecx
	push	edi
	mov	edi, eax
; Line 44280
	mov	eax, DWORD PTR [edi+164]
	test	eax, eax
	je	SHORT $LN1@sqlite3Add@4
; Line 44281
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	push	esi
; Line 44282
	lea	eax, DWORD PTR _isConst$124995[esp+12]
	push	eax
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	OFFSET _exprNodeIsConstant
	push	ebx
	lea	esi, DWORD PTR [edx+ecx*4-20]
	mov	DWORD PTR _isConst$124995[esp+24], 2
	call	_walkExprTree
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _isConst$124995[esp+12], 0
	jne	SHORT $LN3@sqlite3Add@4
; Line 44284
	mov	ecx, DWORD PTR [esi]
	push	ecx
	push	OFFSET ??_C@_0CN@MLPCOIJO@default?5value?5of?5column?5?$FL?$CFs?$FN?5is?5@
	call	_sqlite3ErrorMsg
	add	esp, 8
	pop	esi
; Line 44294
	push	ebx
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	edi
; Line 44295
	pop	ecx
	ret	0
$LN3@sqlite3Add@4:
; Line 44287
	mov	edx, DWORD PTR [esi+4]
	push	edx
	call	_sqlite3ExprDelete
; Line 44288
	push	ebx
	call	_sqlite3ExprDup
	mov	ecx, eax
	add	esp, 8
; Line 44289
	test	ecx, ecx
	mov	DWORD PTR [esi+4], ecx
	je	SHORT $LN9@sqlite3Add@4
; Line 44290
	add	ecx, 28					; 0000001cH
	lea	eax, DWORD PTR [ebx+28]
	push	ecx
	call	_sqlite3TokenCopy
	add	esp, 4
$LN9@sqlite3Add@4:
	pop	esi
$LN1@sqlite3Add@4:
; Line 44294
	push	ebx
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	edi
; Line 44295
	pop	ecx
	ret	0
_sqlite3AddDefaultValue ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AddCheckConstraint
_TEXT	SEGMENT
_sqlite3AddCheckConstraint PROC				; COMDAT
; _pParse$ = eax
; _pCheckExpr$ = ebx
; Line 44377
	push	esi
; Line 44379
	mov	esi, DWORD PTR [eax+164]
; Line 44380
	test	esi, esi
	je	SHORT $LN1@sqlite3Add@5
	cmp	BYTE PTR [eax+188], 0
	jne	SHORT $LN1@sqlite3Add@5
	push	edi
; Line 44384
	push	ebx
	call	_sqlite3ExprDup
	mov	edi, eax
	mov	eax, DWORD PTR [esi+44]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN7@sqlite3Add@5
	mov	eax, edi
	pop	edi
; Line 44387
	push	ebx
	mov	DWORD PTR [esi+44], eax
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	esi
; Line 44388
	ret	0
; Line 44384
$LN7@sqlite3Add@5:
	test	edi, edi
	je	SHORT $LN4@sqlite3Add@5
	push	eax
	push	61					; 0000003dH
	xor	eax, eax
	call	_sqlite3Expr
	add	esp, 8
$LN4@sqlite3Add@5:
	mov	DWORD PTR [esi+44], eax
	pop	edi
$LN1@sqlite3Add@5:
; Line 44387
	push	ebx
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	esi
; Line 44388
	ret	0
_sqlite3AddCheckConstraint ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@NNGLIIOA@no?5such?5collation?5sequence?3?5?$CF?4?$CKs@ ; `string'
;	COMDAT ??_C@_0CB@NNGLIIOA@no?5such?5collation?5sequence?3?5?$CF?4?$CKs@
CONST	SEGMENT
??_C@_0CB@NNGLIIOA@no?5such?5collation?5sequence?3?5?$CF?4?$CKs@ DB 'no s'
	DB	'uch collation sequence: %.*s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3LocateCollSeq
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_enc$ = 12						; size = 1
_zName$ = 12						; size = 4
_sqlite3LocateCollSeq PROC				; COMDAT
; _nName$ = eax
; Line 44436
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zName$[esp+4]
; Line 44442
	test	ebp, ebp
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR _pParse$[esp+8]
	push	edi
	mov	edi, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	al, BYTE PTR [edx+121]
	mov	bl, BYTE PTR [edi+68]
	mov	BYTE PTR _enc$[esp+12], al
	je	SHORT $LN9@sqlite3Loc
	movzx	ecx, bl
	push	ecx
	push	ebp
	push	edi
	mov	eax, esi
	call	_findCollSeqEntry
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN8@sqlite3Loc
$LN9@sqlite3Loc:
	mov	eax, DWORD PTR [edi+28]
$LN8@sqlite3Loc:
	test	eax, eax
	je	SHORT $LN7@sqlite3Loc
	movzx	ecx, BYTE PTR _enc$[esp+12]
	lea	edx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax+edx*4-20]
$LN7@sqlite3Loc:
; Line 44443
	test	bl, bl
	jne	SHORT $LN2@sqlite3Loc
	test	eax, eax
	je	SHORT $LN3@sqlite3Loc
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@sqlite3Loc
$LN3@sqlite3Loc:
; Line 44444
	push	esi
	push	ebp
	call	_sqlite3GetCollSeq
	add	esp, 8
; Line 44445
	test	eax, eax
	jne	SHORT $LN2@sqlite3Loc
; Line 44446
	test	esi, esi
	jge	SHORT $LN1@sqlite3Loc
; Line 44447
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL12@sqlite3Loc:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL12@sqlite3Loc
	sub	eax, edx
	mov	esi, eax
$LN1@sqlite3Loc:
; Line 44449
	mov	edi, DWORD PTR _pParse$[esp+12]
	push	ebp
	push	esi
	push	OFFSET ??_C@_0CB@NNGLIIOA@no?5such?5collation?5sequence?3?5?$CF?4?$CKs@
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
; Line 44450
	xor	eax, eax
$LN2@sqlite3Loc:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44455
	ret	0
_sqlite3LocateCollSeq ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3IndexKeyinfo
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_pIdx$ = 12						; size = 4
_sqlite3IndexKeyinfo PROC				; COMDAT
; Line 46558
	mov	eax, DWORD PTR _pIdx$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax+4]
	push	edi
; Line 46559
	lea	edi, DWORD PTR [ebx+ebx*4+12]
; Line 46560
	call	_sqlite3Malloc
	mov	edi, eax
; Line 46562
	test	edi, edi
	je	SHORT $LN5@sqlite3Ind@3
	push	esi
; Line 46563
	lea	ecx, DWORD PTR [edi+ebx*4+12]
; Line 46565
	xor	esi, esi
	test	ebx, ebx
	mov	DWORD PTR [edi+8], ecx
	jle	SHORT $LN2@sqlite3Ind@3
	push	ebp
	lea	ebp, DWORD PTR [edi+12]
	npad	6
$LL4@sqlite3Ind@3:
; Line 46566
	mov	edx, DWORD PTR _pIdx$[esp+12]
	mov	eax, DWORD PTR [edx+44]
	mov	eax, DWORD PTR [eax+esi*4]
; Line 46568
	mov	ecx, DWORD PTR _pParse$[esp+12]
	push	eax
	push	ecx
	or	eax, -1
	call	_sqlite3LocateCollSeq
; Line 46569
	mov	edx, DWORD PTR _pIdx$[esp+20]
	mov	DWORD PTR [ebp], eax
	mov	eax, DWORD PTR [edx+40]
	mov	dl, BYTE PTR [esi+eax]
	mov	ecx, DWORD PTR [edi+8]
	mov	BYTE PTR [esi+ecx], dl
	add	esi, 1
	add	esp, 8
	add	ebp, 4
	cmp	esi, ebx
	jl	SHORT $LL4@sqlite3Ind@3
	pop	ebp
$LN2@sqlite3Ind@3:
; Line 46571
	mov	DWORD PTR [edi+4], ebx
	pop	esi
$LN5@sqlite3Ind@3:
; Line 46574
	mov	eax, DWORD PTR _pParse$[esp+4]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN15@sqlite3Ind@3
; Line 46575
	test	edi, edi
	je	SHORT $LN11@sqlite3Ind@3
	push	edi
	call	_free
	add	esp, 4
$LN11@sqlite3Ind@3:
	pop	edi
; Line 46576
	xor	eax, eax
	pop	ebx
; Line 46579
	ret	0
$LN15@sqlite3Ind@3:
; Line 46578
	mov	eax, edi
	pop	edi
	pop	ebx
; Line 46579
	ret	0
_sqlite3IndexKeyinfo ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_complete16
_TEXT	SEGMENT
_zSql$ = 8						; size = 4
_sqlite3_complete16 PROC				; COMDAT
; Line 47205
	push	ebx
	push	ebp
	push	esi
; Line 47208
	xor	ebp, ebp
; Line 47210
	call	_sqlite3ValueNew
	mov	esi, eax
; Line 47211
	test	esi, esi
	je	SHORT $LN61@sqlite3_co@15
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	ebx, DWORD PTR _zSql$[esp+12]
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN20@sqlite3_co@15
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	jmp	SHORT $LN61@sqlite3_co@15
$LN20@sqlite3_co@15:
	push	edi
	or	edi, -1
	mov	DWORD PTR [esi+16], ebx
	mov	BYTE PTR [esi+27], 2
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], edi
	mov	WORD PTR [esi+24], 130			; 00000082H
	call	_sqlite3Utf16ByteLen
	mov	ecx, esi
	mov	DWORD PTR [esi+20], eax
	mov	WORD PTR [esi+24], 162			; 000000a2H
	call	_sqlite3VdbeMemHandleBom
	test	eax, eax
	pop	edi
	jne	SHORT $LN61@sqlite3_co@15
	test	WORD PTR [esi+24], 256			; 00000100H
	je	SHORT $LN61@sqlite3_co@15
	mov	eax, esi
	call	_sqlite3VdbeMemMakeWriteable
$LN61@sqlite3_co@15:
; Line 47212
	mov	ebx, 1
	mov	al, bl
	mov	ecx, esi
	call	_sqlite3ValueText
; Line 47213
	test	eax, eax
	je	SHORT $LN1@sqlite3_co@15
; Line 47214
	push	eax
	call	_sqlite3_complete
	add	esp, 4
	mov	ebp, eax
$LN1@sqlite3_co@15:
; Line 47216
	test	esi, esi
	je	SHORT $LN48@sqlite3_co@15
	push	esi
	call	_sqlite3VdbeMemRelease
	push	esi
	mov	WORD PTR [esi+24], bx
	mov	BYTE PTR [esi+26], 5
	call	_free
	add	esp, 8
$LN48@sqlite3_co@15:
; Line 47217
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	eax, ebp
	je	SHORT $LN50@sqlite3_co@15
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN50@sqlite3_co@15
	sub	DWORD PTR _inMutex, ebx
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN50@sqlite3_co@15:
	pop	esi
	pop	ebp
	and	eax, 255				; 000000ffH
	pop	ebx
; Line 47218
	ret	0
_sqlite3_complete16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _minmaxFunc
_TEXT	SEGMENT
tv273 = -12						; size = 4
_iBest$ = -8						; size = 4
_pColl$ = -4						; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_minmaxFunc PROC					; COMDAT
; Line 47735
	mov	ecx, DWORD PTR _argc$[esp-4]
	sub	esp, 12					; 0000000cH
	push	ebp
	xor	ebp, ebp
	cmp	ecx, ebp
	je	$LN21@minmaxFunc
; Line 47736
	mov	eax, DWORD PTR _context$[esp+12]
	mov	edx, DWORD PTR [eax]
	push	ebx
; Line 47741
	mov	ebx, DWORD PTR _argv$[esp+16]
	push	edi
	mov	edi, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+80]
	neg	edi
	mov	DWORD PTR _pColl$[esp+24], edx
	mov	edx, DWORD PTR [ebx]
	sbb	edi, edi
	cmp	BYTE PTR [edx+26], 5
	mov	DWORD PTR _iBest$[esp+24], ebp
	je	$LN32@minmaxFunc
	push	esi
; Line 47742
	lea	esi, DWORD PTR [ebp+1]
	cmp	ecx, esi
	jle	SHORT $LN3@minmaxFunc
	mov	DWORD PTR tv273[esp+28], ebp
	npad	8
$LL31@minmaxFunc:
; Line 47743
	mov	eax, DWORD PTR [ebx+esi*4]
	cmp	BYTE PTR [eax+26], 5
	lea	ebp, DWORD PTR [esi*4]
	je	$LN34@minmaxFunc
; Line 47744
	mov	ecx, DWORD PTR _pColl$[esp+28]
	mov	edx, DWORD PTR tv273[esp+28]
	push	ecx
	mov	ecx, DWORD PTR [edx+ebx]
	call	_sqlite3MemCompare
	add	esp, 4
	xor	eax, edi
	jl	SHORT $LN4@minmaxFunc
; Line 47745
	mov	DWORD PTR _iBest$[esp+28], esi
	mov	DWORD PTR tv273[esp+28], ebp
$LN4@minmaxFunc:
	add	esi, 1
	cmp	esi, DWORD PTR _argc$[esp+24]
	jl	SHORT $LL31@minmaxFunc
	mov	eax, DWORD PTR _context$[esp+24]
	xor	ebp, ebp
$LN3@minmaxFunc:
; Line 47748
	test	BYTE PTR [eax+32], 64			; 00000040H
	mov	ecx, DWORD PTR _iBest$[esp+28]
	mov	esi, DWORD PTR [ebx+ecx*4]
	lea	ebx, DWORD PTR [eax+8]
	je	SHORT $LN22@minmaxFunc
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN22@minmaxFunc:
	mov	ecx, 8
	mov	edi, ebx
	rep movsd
	movzx	eax, WORD PTR [ebx+24]
	test	al, 18					; 00000012H
	mov	DWORD PTR [ebx+28], ebp
	je	SHORT $LN25@minmaxFunc
	and	eax, 64831				; 0000fd3fH
	or	eax, 256				; 00000100H
	mov	WORD PTR [ebx+24], ax
$LN25@minmaxFunc:
	test	WORD PTR [ebx+24], 256			; 00000100H
	je	SHORT $LN34@minmaxFunc
	pop	esi
	pop	edi
	mov	eax, ebx
	pop	ebx
	pop	ebp
; Line 47749
	add	esp, 12					; 0000000cH
; Line 47748
	jmp	_sqlite3VdbeMemMakeWriteable
$LN34@minmaxFunc:
	pop	esi
$LN32@minmaxFunc:
	pop	edi
	pop	ebx
$LN21@minmaxFunc:
	pop	ebp
; Line 47749
	add	esp, 12					; 0000000cH
	ret	0
_minmaxFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _substrFunc
_TEXT	SEGMENT
_len$ = -16						; size = 4
_p0type$ = -12						; size = 4
_p2$ = -8						; size = 8
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_substrFunc PROC					; COMDAT
; Line 47852
	sub	esp, 16					; 00000010H
	push	ebp
	push	esi
	push	edi
; Line 47860
	mov	edi, DWORD PTR _argv$[esp+24]
	mov	esi, DWORD PTR [edi]
	movzx	eax, BYTE PTR [esi+26]
; Line 47861
	cmp	eax, 4
	mov	DWORD PTR _p0type$[esp+28], eax
	jne	SHORT $LN29@substrFunc
; Line 47862
	test	BYTE PTR [esi+24], 16			; 00000010H
	jne	SHORT $LN38@substrFunc
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	test	eax, eax
	je	SHORT $LN40@substrFunc
$LN38@substrFunc:
	test	WORD PTR [esi+24], 2048			; 00000800H
	mov	eax, DWORD PTR [esi+20]
	je	SHORT $LN40@substrFunc
	add	eax, DWORD PTR [esi]
$LN40@substrFunc:
; Line 47863
	mov	esi, DWORD PTR [edi]
	test	BYTE PTR [esi+24], 18			; 00000012H
	mov	DWORD PTR _len$[esp+28], eax
	je	SHORT $LN43@substrFunc
	call	_sqlite3VdbeMemExpandBlob
	mov	ax, WORD PTR [esi+24]
	mov	ebp, DWORD PTR [esi+16]
	and	ax, 65533				; 0000fffdH
	or	ax, 16					; 00000010H
	mov	WORD PTR [esi+24], ax
	jmp	SHORT $LN42@substrFunc
$LN43@substrFunc:
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	mov	ebp, eax
$LN42@substrFunc:
; Line 47864
	test	ebp, ebp
	je	$LN56@substrFunc
; Line 47866
	jmp	SHORT $LN75@substrFunc
$LN29@substrFunc:
; Line 47867
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	mov	ebp, eax
; Line 47868
	test	ebp, ebp
	je	$LN56@substrFunc
; Line 47869
	xor	ecx, ecx
; Line 47870
	cmp	BYTE PTR [ebp], cl
	mov	DWORD PTR _len$[esp+28], ecx
	je	SHORT $LN75@substrFunc
$LL25@substrFunc:
; Line 47871
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	cmp	dl, 192					; 000000c0H
	jb	SHORT $LN24@substrFunc
	mov	dl, BYTE PTR [eax]
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN24@substrFunc
$LL21@substrFunc:
	mov	dl, BYTE PTR [eax+1]
	add	eax, 1
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	je	SHORT $LL21@substrFunc
$LN24@substrFunc:
; Line 47870
	add	ecx, 1
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LL25@substrFunc
	mov	DWORD PTR _len$[esp+28], ecx
$LN75@substrFunc:
; Line 47874
	mov	esi, DWORD PTR [edi+4]
	push	ebx
	call	_sqlite3VdbeIntValue
	cdq
	mov	ebx, eax
; Line 47875
	mov	eax, DWORD PTR _argv$[esp+28]
	mov	esi, DWORD PTR [eax+8]
	mov	edi, edx
	call	_sqlite3VdbeIntValue
; Line 47876
	test	edi, edi
	cdq
	mov	esi, eax
	mov	ecx, edx
	mov	DWORD PTR _p2$[esp+32], esi
	mov	DWORD PTR _p2$[esp+36], ecx
	jg	SHORT $LN72@substrFunc
	jl	SHORT $LN70@substrFunc
	test	ebx, ebx
	jae	SHORT $LN19@substrFunc
$LN70@substrFunc:
; Line 47877
	mov	eax, DWORD PTR _len$[esp+32]
	cdq
	add	ebx, eax
	adc	edi, edx
; Line 47878
	test	edi, edi
	jg	SHORT $LN76@substrFunc
	jl	SHORT $LN71@substrFunc
	test	ebx, ebx
	jae	SHORT $LN76@substrFunc
$LN71@substrFunc:
; Line 47879
	add	esi, ebx
	adc	ecx, edi
; Line 47880
	xor	ebx, ebx
	mov	DWORD PTR _p2$[esp+32], esi
	mov	DWORD PTR _p2$[esp+36], ecx
	xor	edi, edi
; Line 47881
	jmp	SHORT $LN76@substrFunc
$LN19@substrFunc:
; Line 47882
	test	edi, edi
	jl	SHORT $LN76@substrFunc
	jg	SHORT $LN72@substrFunc
	test	ebx, ebx
	jbe	SHORT $LN76@substrFunc
$LN72@substrFunc:
; Line 47883
	add	ebx, -1
	adc	edi, -1
$LN76@substrFunc:
; Line 47885
	mov	eax, DWORD PTR _len$[esp+32]
	add	esi, ebx
	cdq
	adc	ecx, edi
	cmp	ecx, edx
	jl	SHORT $LN77@substrFunc
	jg	SHORT $LN73@substrFunc
	cmp	esi, eax
	jbe	SHORT $LN77@substrFunc
$LN73@substrFunc:
; Line 47886
	sub	eax, ebx
	sbb	edx, edi
	mov	ecx, eax
	mov	esi, edx
	jmp	SHORT $LN15@substrFunc
$LN77@substrFunc:
	mov	esi, DWORD PTR _p2$[esp+36]
	mov	ecx, DWORD PTR _p2$[esp+32]
$LN15@substrFunc:
; Line 47888
	cmp	DWORD PTR _p0type$[esp+32], 4
	je	$LN14@substrFunc
; Line 47889
	mov	al, BYTE PTR [ebp]
	test	al, al
	je	SHORT $LN12@substrFunc
	npad	3
$LL13@substrFunc:
	mov	edx, ebx
	or	edx, edi
	je	SHORT $LN12@substrFunc
; Line 47890
	add	ebp, 1
	cmp	al, 192					; 000000c0H
	jb	SHORT $LN9@substrFunc
	mov	al, BYTE PTR [ebp]
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	SHORT $LN9@substrFunc
$LL10@substrFunc:
	mov	dl, BYTE PTR [ebp+1]
	add	ebp, 1
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	je	SHORT $LL10@substrFunc
$LN9@substrFunc:
; Line 47889
	mov	al, BYTE PTR [ebp]
; Line 47891
	add	ebx, -1
	adc	edi, -1
	test	al, al
	jne	SHORT $LL13@substrFunc
$LN12@substrFunc:
; Line 47893
	cmp	BYTE PTR [ebp], 0
	mov	eax, ebp
	je	SHORT $LN6@substrFunc
	npad	7
$LL8@substrFunc:
	mov	edx, ecx
	or	edx, esi
	je	SHORT $LN6@substrFunc
; Line 47894
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	cmp	dl, 192					; 000000c0H
	jb	SHORT $LN7@substrFunc
	mov	dl, BYTE PTR [eax]
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	jne	SHORT $LN7@substrFunc
	npad	6
$LL4@substrFunc:
	mov	dl, BYTE PTR [eax+1]
	add	eax, 1
	and	dl, 192					; 000000c0H
	cmp	dl, 128					; 00000080H
	je	SHORT $LL4@substrFunc
$LN7@substrFunc:
; Line 47893
	add	ecx, -1
	adc	esi, -1
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LL8@substrFunc
$LN6@substrFunc:
; Line 47896
	push	-1
	sub	eax, ebp
	push	1
	push	eax
	mov	eax, DWORD PTR _context$[esp+40]
	add	eax, 8
	push	ebp
	push	eax
; Line 47899
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 47901
	add	esp, 16					; 00000010H
	ret	0
$LN14@substrFunc:
; Line 47898
	xor	eax, eax
	cmp	esi, eax
	jg	SHORT $LN1@substrFunc
	jl	SHORT $LN74@substrFunc
	cmp	ecx, eax
	jae	SHORT $LN1@substrFunc
$LN74@substrFunc:
	mov	DWORD PTR _p2$[esp+32], eax
	mov	DWORD PTR _p2$[esp+36], eax
	mov	ecx, eax
$LN1@substrFunc:
; Line 47899
	push	-1
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _context$[esp+40]
	add	ebx, ebp
	add	ecx, 8
	push	ebx
	push	ecx
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
	pop	ebx
$LN56@substrFunc:
	pop	edi
	pop	esi
	pop	ebp
; Line 47901
	add	esp, 16					; 00000010H
	ret	0
_substrFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _nullifFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_nullifFunc PROC					; COMDAT
; Line 48300
	push	esi
; Line 48302
	mov	esi, DWORD PTR _argv$[esp]
	mov	ecx, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR _context$[esp+4]
	mov	eax, DWORD PTR [edi+80]
	push	eax
	mov	eax, DWORD PTR [esi+4]
	call	_sqlite3MemCompare
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@nullifFunc
; Line 48303
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	eax
	lea	ebx, DWORD PTR [edi+8]
	call	_sqlite3VdbeMemCopy
	add	esp, 4
	pop	ebx
$LN6@nullifFunc:
	pop	edi
	pop	esi
; Line 48305
	ret	0
_nullifFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _quoteFunc
_TEXT	SEGMENT
tv699 = -8						; size = 8
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_quoteFunc PROC						; COMDAT
; Line 48337
	sub	esp, 8
	push	ebx
; Line 48338
	mov	ebx, 1
	cmp	DWORD PTR _argc$[esp+8], ebx
	jl	$LN79@quoteFunc
	push	esi
; Line 48339
	mov	esi, DWORD PTR _argv$[esp+12]
	mov	ecx, DWORD PTR [esi]
	movzx	eax, BYTE PTR [ecx+26]
	add	eax, -1
	cmp	eax, 4
	ja	$LN89@quoteFunc
	push	ebp
	push	edi
	jmp	DWORD PTR $LN94@quoteFunc[eax*4]
$LN21@quoteFunc:
; Line 48341
	mov	esi, DWORD PTR _context$[esp+20]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	pop	edi
	pop	ebp
	mov	BYTE PTR [esi+27], bl
	mov	DWORD PTR [esi+16], OFFSET ??_C@_04HIBGFPH@NULL?$AA@
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 4
	mov	WORD PTR [esi+24], 130			; 00000082H
	pop	esi
	pop	ebx
; Line 48404
	add	esp, 8
	ret	0
$LN20@quoteFunc:
; Line 48346
	mov	ebx, DWORD PTR _context$[esp+20]
	push	ecx
	add	ebx, 8
	call	_sqlite3VdbeMemCopy
	add	esp, 4
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
; Line 48404
	add	esp, 8
	ret	0
$LN19@quoteFunc:
; Line 48351
	push	ecx
	call	_sqlite3_value_blob
	mov	ebp, eax
; Line 48352
	mov	eax, DWORD PTR [esi]
	push	eax
	call	_sqlite3_value_bytes
	mov	esi, eax
; Line 48355
	lea	edi, DWORD PTR [esi+esi+4]
	add	esp, 8
	cmp	edi, 1000000000				; 3b9aca00H
	jle	SHORT $LN18@quoteFunc
; Line 48356
	mov	ecx, DWORD PTR _context$[esp+20]
	push	ecx
	call	_sqlite3_result_error_toobig
	add	esp, 4
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
; Line 48404
	add	esp, 8
	ret	0
$LN18@quoteFunc:
; Line 48359
	call	_sqlite3Malloc
	mov	edi, eax
; Line 48360
	test	edi, edi
	jne	SHORT $LN17@quoteFunc
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
; Line 48404
	add	esp, 8
; Line 48361
	mov	DWORD PTR _argv$[esp-4], -1
	mov	DWORD PTR _argc$[esp-4], OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
	jmp	_sqlite3_result_error
$LN17@quoteFunc:
; Line 48364
	xor	eax, eax
	test	esi, esi
	jle	SHORT $LN13@quoteFunc
	lea	ecx, DWORD PTR [edi+3]
	npad	12
$LL15@quoteFunc:
; Line 48365
	movzx	edx, BYTE PTR [eax+ebp]
	shr	edx, 4
	movzx	edx, BYTE PTR _hexdigits[edx]
	mov	BYTE PTR [ecx-1], dl
; Line 48366
	movzx	edx, BYTE PTR [eax+ebp]
	and	edx, 15					; 0000000fH
	movzx	edx, BYTE PTR _hexdigits[edx]
	mov	BYTE PTR [ecx], dl
	add	eax, ebx
	add	ecx, 2
	cmp	eax, esi
	jl	SHORT $LL15@quoteFunc
$LN13@quoteFunc:
; Line 48368
	mov	BYTE PTR [edi+esi*2+2], 39		; 00000027H
; Line 48369
	mov	BYTE PTR [edi+esi*2+3], 0
; Line 48372
	mov	esi, DWORD PTR _context$[esp+20]
	add	esi, 8
	push	esi
	mov	BYTE PTR [edi], 88			; 00000058H
	mov	BYTE PTR [edi+1], 39			; 00000027H
	call	_sqlite3VdbeMemRelease
	mov	eax, edi
	add	esp, 4
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], bl
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 258			; 00000102H
	lea	edx, DWORD PTR [eax+1]
$LL87@quoteFunc:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL87@quoteFunc
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
; Line 48373
	push	edi
	call	_free
	add	esp, 4
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
; Line 48404
	add	esp, 8
	ret	0
$LN12@quoteFunc:
; Line 48380
	mov	al, bl
	call	_sqlite3ValueText
	mov	ebp, eax
; Line 48383
	test	ebp, ebp
	je	$LN90@quoteFunc
; Line 48384
	mov	al, BYTE PTR [ebp]
	xor	ecx, ecx
	xor	esi, esi
	xor	edi, edi
	test	al, al
	je	SHORT $LN8@quoteFunc
$LL10@quoteFunc:
	cmp	al, 39					; 00000027H
	jne	SHORT $LN9@quoteFunc
	add	esi, ebx
	adc	edi, 0
$LN9@quoteFunc:
	add	ecx, ebx
	mov	al, BYTE PTR [ecx+ebp]
	test	al, al
	jne	SHORT $LL10@quoteFunc
$LN8@quoteFunc:
; Line 48385
	mov	eax, ecx
	cdq
	add	eax, esi
	adc	edx, edi
	add	eax, 3
	adc	edx, 0
	mov	DWORD PTR tv699[esp+28], edx
	jne	SHORT $LN88@quoteFunc
	cmp	eax, 1000000000				; 3b9aca00H
	jbe	SHORT $LN6@quoteFunc
$LN88@quoteFunc:
; Line 48386
	mov	eax, DWORD PTR _context$[esp+20]
	push	eax
	call	_sqlite3_result_error_toobig
	add	esp, 4
	pop	edi
	pop	ebp
	pop	esi
	pop	ebx
; Line 48404
	add	esp, 8
	ret	0
$LN6@quoteFunc:
; Line 48389
	lea	edi, DWORD PTR [esi+ecx+3]
	call	_sqlite3Malloc
	mov	esi, eax
; Line 48390
	test	esi, esi
	je	SHORT $LN90@quoteFunc
; Line 48391
	mov	BYTE PTR [esi], 39			; 00000027H
; Line 48392
	cmp	BYTE PTR [ebp], 0
	mov	eax, ebx
	je	SHORT $LN2@quoteFunc
; Line 48391
	mov	ecx, ebp
	npad	2
$LL4@quoteFunc:
; Line 48393
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+esi], dl
	add	eax, ebx
; Line 48394
	cmp	BYTE PTR [ecx], 39			; 00000027H
	jne	SHORT $LN3@quoteFunc
; Line 48395
	mov	BYTE PTR [eax+esi], 39			; 00000027H
	add	eax, ebx
$LN3@quoteFunc:
	add	ecx, ebx
	cmp	BYTE PTR [ecx], 0
	jne	SHORT $LL4@quoteFunc
$LN2@quoteFunc:
; Line 48398
	mov	BYTE PTR [eax+esi], 39			; 00000027H
; Line 48400
	push	-1
	add	eax, ebx
	push	ebx
	push	eax
	mov	BYTE PTR [eax+esi], 0
	mov	eax, DWORD PTR _context$[esp+32]
	add	eax, 8
	push	esi
	push	eax
	call	_sqlite3VdbeMemSetStr
; Line 48401
	push	esi
	call	_free
	add	esp, 24					; 00000018H
$LN90@quoteFunc:
	pop	edi
	pop	ebp
$LN89@quoteFunc:
	pop	esi
$LN79@quoteFunc:
	pop	ebx
; Line 48404
	add	esp, 8
	ret	0
	npad	2
$LN94@quoteFunc:
	DD	$LN20@quoteFunc
	DD	$LN20@quoteFunc
	DD	$LN12@quoteFunc
	DD	$LN19@quoteFunc
	DD	$LN21@quoteFunc
_quoteFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _hexFunc
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
tv393 = 16						; size = 4
_argv$ = 16						; size = 4
_hexFunc PROC						; COMDAT
; Line 48414
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 48419
	mov	edi, DWORD PTR _argv$[esp+12]
	mov	esi, DWORD PTR [edi]
	test	BYTE PTR [esi+24], 18			; 00000012H
	je	SHORT $LN9@hexFunc
	call	_sqlite3VdbeMemExpandBlob
	mov	ax, WORD PTR [esi+24]
	and	ax, 65533				; 0000fffdH
	or	ax, 16					; 00000010H
	mov	WORD PTR [esi+24], ax
	mov	esi, DWORD PTR [esi+16]
	jmp	SHORT $LN8@hexFunc
$LN9@hexFunc:
	mov	al, 1
	mov	ecx, esi
	call	_sqlite3ValueText
	mov	esi, eax
$LN8@hexFunc:
; Line 48420
	mov	edi, DWORD PTR [edi]
	xor	ebx, ebx
	test	BYTE PTR [edi+24], 16			; 00000010H
	jne	SHORT $LN18@hexFunc
	mov	al, 1
	mov	ecx, edi
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN18@hexFunc
	xor	ebp, ebp
	jmp	SHORT $LN20@hexFunc
$LN18@hexFunc:
	test	WORD PTR [edi+24], 2048			; 00000800H
	mov	ebp, DWORD PTR [edi+20]
	je	SHORT $LN20@hexFunc
	add	ebp, DWORD PTR [edi]
$LN20@hexFunc:
; Line 48421
	lea	edi, DWORD PTR [ebp+ebp]
	lea	eax, DWORD PTR [edi+1]
	cmp	eax, 1000000000				; 3b9aca00H
	mov	DWORD PTR tv393[esp+12], edi
	jle	SHORT $LN5@hexFunc
; Line 48422
	mov	esi, DWORD PTR _context$[esp+12]
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	lea	ecx, DWORD PTR [esi+32]
	pop	edi
	mov	DWORD PTR [esi+20], ebx
	mov	DWORD PTR [esi+4], ebx
	mov	WORD PTR [esi+24], 2576			; 00000a10H
	mov	BYTE PTR [esi+26], 4
	mov	DWORD PTR [esi], 1000000001		; 3b9aca01H
	mov	DWORD PTR [esi+16], ecx
	mov	BYTE PTR [esi+27], 1
	pop	esi
	pop	ebp
	pop	ebx
; Line 48435
	ret	0
$LN5@hexFunc:
; Line 48426
	cmp	eax, ebx
	jle	SHORT $LN29@hexFunc
	push	eax
	call	_malloc
	add	esp, 4
	jmp	SHORT $LN30@hexFunc
$LN29@hexFunc:
	xor	eax, eax
$LN30@hexFunc:
; Line 48427
	cmp	eax, ebx
	mov	edx, eax
	je	SHORT $LN33@hexFunc
; Line 48428
	cmp	ebp, ebx
	jle	SHORT $LN1@hexFunc
	mov	edi, ebp
$LL3@hexFunc:
; Line 48430
	movzx	ecx, BYTE PTR [esi]
	mov	ebx, ecx
	shr	ebx, 4
	mov	bl, BYTE PTR _hexdigits[ebx]
	mov	BYTE PTR [edx], bl
; Line 48431
	and	ecx, 15					; 0000000fH
	mov	cl, BYTE PTR _hexdigits[ecx]
	add	edx, 1
	mov	BYTE PTR [edx], cl
	add	edx, 1
	add	esi, 1
	sub	edi, 1
	jne	SHORT $LL3@hexFunc
; Line 48428
	mov	edi, DWORD PTR tv393[esp+12]
$LN1@hexFunc:
; Line 48434
	push	OFFSET _sqlite3_free
	push	1
	mov	BYTE PTR [edx], 0
	mov	edx, DWORD PTR _context$[esp+20]
	push	edi
	push	eax
	add	edx, 8
	push	edx
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
$LN33@hexFunc:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 48435
	ret	0
_hexFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _minmaxStep
_TEXT	SEGMENT
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_minmaxStep PROC					; COMDAT
; Line 48942
	mov	eax, DWORD PTR _argv$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax]
; Line 48945
	cmp	BYTE PTR [ebx+26], 5
	je	$LN1@minmaxStep
	push	ebp
; Line 48946
	mov	ebp, DWORD PTR _context$[esp+4]
	push	esi
	mov	esi, DWORD PTR [ebp+72]
	mov	eax, 1024				; 00000400H
	test	WORD PTR [esi+24], ax
	push	edi
	jne	SHORT $LN12@minmaxStep
	mov	WORD PTR [esi+24], ax
	mov	DWORD PTR [esi+28], OFFSET _sqlite3FreeX
	mov	ecx, DWORD PTR [ebp]
	mov	edi, 64					; 00000040H
	mov	DWORD PTR [esi], ecx
	call	_sqlite3Malloc
	mov	DWORD PTR [esi+16], eax
$LN12@minmaxStep:
	mov	esi, DWORD PTR [esi+16]
; Line 48947
	test	esi, esi
	je	SHORT $LN24@minmaxStep
; Line 48949
	cmp	WORD PTR [esi+24], 0
	je	SHORT $LN5@minmaxStep
; Line 48961
	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [ebp+80]
	xor	ecx, ecx
	cmp	DWORD PTR [edx+8], ecx
; Line 48962
	push	eax
	setne	cl
	mov	eax, ebx
	mov	edi, ecx
	mov	ecx, esi
	call	_sqlite3MemCompare
	add	esp, 4
; Line 48963
	test	edi, edi
	je	SHORT $LN23@minmaxStep
	test	eax, eax
	jge	SHORT $LN24@minmaxStep
; Line 48967
	push	ebx
	mov	ebx, esi
	call	_sqlite3VdbeMemCopy
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 48969
	ret	0
$LN23@minmaxStep:
; Line 48963
	test	eax, eax
	jle	SHORT $LN24@minmaxStep
$LN5@minmaxStep:
; Line 48967
	push	ebx
	mov	ebx, esi
	call	_sqlite3VdbeMemCopy
	add	esp, 4
$LN24@minmaxStep:
	pop	edi
	pop	esi
	pop	ebp
$LN1@minmaxStep:
	pop	ebx
; Line 48969
	ret	0
_minmaxStep ENDP
_TEXT	ENDS
PUBLIC	??_C@_04HHHPGODM@glob?$AA@			; `string'
PUBLIC	??_C@_04HPDJJBAE@like?$AA@			; `string'
;	COMDAT ??_C@_04HHHPGODM@glob?$AA@
CONST	SEGMENT
??_C@_04HHHPGODM@glob?$AA@ DB 'glob', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPDJJBAE@like?$AA@
CONST	SEGMENT
??_C@_04HPDJJBAE@like?$AA@ DB 'like', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3RegisterLikeFunctions
_TEXT	SEGMENT
_caseSensitive$ = 8					; size = 4
_sqlite3RegisterLikeFunctions PROC			; COMDAT
; _db$ = esi
; Line 49126
	push	ebp
	mov	ebp, DWORD PTR _caseSensitive$[esp]
; Line 49128
	test	ebp, ebp
	push	edi
; Line 49129
	mov	edi, OFFSET _likeInfoAlt
	jne	SHORT $LN1@sqlite3Reg@3
; Line 49131
	mov	edi, OFFSET _likeInfoNorm
$LN1@sqlite3Reg@3:
	push	ebx
; Line 49133
	push	0
	push	0
	push	OFFSET _likeFunc
	push	edi
	push	1
	push	2
	push	OFFSET ??_C@_04HPDJJBAE@like?$AA@
	push	esi
	call	_sqlite3CreateFunc
; Line 49134
	push	0
	push	0
	push	OFFSET _likeFunc
	push	edi
	push	1
	push	3
	push	OFFSET ??_C@_04HPDJJBAE@like?$AA@
	push	esi
	call	_sqlite3CreateFunc
	add	esp, 64					; 00000040H
; Line 49136
	push	0
	push	0
	push	OFFSET _likeFunc
	push	OFFSET _globInfo
	push	1
	push	2
	push	OFFSET ??_C@_04HHHPGODM@glob?$AA@
	push	esi
	call	_sqlite3CreateFunc
; Line 49137
	push	0
	push	1
	push	2
	push	OFFSET ??_C@_04HHHPGODM@glob?$AA@
	mov	ebx, 4
	mov	eax, esi
	call	_sqlite3FindFunction
	add	esp, 48					; 00000030H
	test	eax, eax
	je	SHORT $LN5@sqlite3Reg@3
	mov	BYTE PTR [eax+4], 3
$LN5@sqlite3Reg@3:
; Line 49139
	push	0
	push	1
	push	2
	push	OFFSET ??_C@_04HPDJJBAE@like?$AA@
	mov	eax, esi
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
	test	eax, eax
	pop	ebx
	je	SHORT $LN8@sqlite3Reg@3
	test	ebp, ebp
	setne	cl
	lea	ecx, DWORD PTR [ecx+ecx+1]
	mov	BYTE PTR [eax+4], cl
$LN8@sqlite3Reg@3:
	pop	edi
	pop	ebp
; Line 49140
	ret	0
_sqlite3RegisterLikeFunctions ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3OpenTableAndIndices
_TEXT	SEGMENT
_i$125553 = -16						; size = 4
_pIdx$ = -12						; size = 4
_i$ = -8						; size = 4
_pKey$96784 = -4					; size = 4
_pParse$ = 8						; size = 4
_base$ = 12						; size = 4
_op$ = 16						; size = 4
_sqlite3OpenTableAndIndices PROC			; COMDAT
; _pTab$ = eax
; Line 50419
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	mov	esi, eax
; Line 50425
	xor	ebx, ebx
	cmp	BYTE PTR [esi+57], bl
	jne	$LN1@sqlite3Ope@4
; Line 50426
	mov	edx, DWORD PTR [esi+76]
	cmp	edx, ebx
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+24]
	mov	eax, DWORD PTR [ebp]
	push	edi
	mov	DWORD PTR _i$125553[esp+32], -1000000	; fff0bdc0H
	je	SHORT $LN67@sqlite3Ope@4
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebx
	mov	DWORD PTR _i$125553[esp+32], ebx
	jle	SHORT $LN67@sqlite3Ope@4
	mov	eax, DWORD PTR [eax+4]
	add	eax, 20					; 00000014H
	npad	6
$LL11@sqlite3Ope@4:
	cmp	DWORD PTR [eax], edx
	je	SHORT $LN67@sqlite3Ope@4
	mov	edi, DWORD PTR _i$125553[esp+32]
	add	edi, 1
	add	eax, 24					; 00000018H
	cmp	edi, ecx
	mov	DWORD PTR _i$125553[esp+32], edi
	jl	SHORT $LL11@sqlite3Ope@4
$LN67@sqlite3Ope@4:
; Line 50427
	mov	edi, DWORD PTR [ebp+12]
	cmp	edi, ebx
	jne	SHORT $LN15@sqlite3Ope@4
	mov	edi, DWORD PTR [ebp]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [ebp+12], eax
	mov	edi, eax
$LN15@sqlite3Ope@4:
; Line 50429
	mov	eax, DWORD PTR _op$[esp+28]
	mov	ecx, DWORD PTR _i$125553[esp+32]
	mov	edx, DWORD PTR _base$[esp+28]
	push	eax
	push	ecx
	push	edx
	mov	eax, ebp
	call	_sqlite3OpenTable
; Line 50430
	mov	eax, DWORD PTR [esi+16]
	add	esp, 12					; 0000000cH
	cmp	eax, ebx
	mov	DWORD PTR _i$[esp+32], 1
	mov	DWORD PTR _pIdx$[esp+32], eax
	je	$LN2@sqlite3Ope@4
	jmp	SHORT $LN4@sqlite3Ope@4
	npad	4
$LL68@sqlite3Ope@4:
	mov	eax, DWORD PTR _pIdx$[esp+32]
$LN4@sqlite3Ope@4:
; Line 50431
	push	eax
	push	ebp
	call	_sqlite3IndexKeyinfo
; Line 50433
	mov	esi, DWORD PTR [edi+12]
	add	esp, 8
	cmp	DWORD PTR [edi+16], esi
	mov	DWORD PTR _pKey$96784[esp+32], eax
	jg	SHORT $LN18@sqlite3Ope@4
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, edi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN64@sqlite3Ope@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN65@sqlite3Ope@4
$LN64@sqlite3Ope@4:
	xor	ebx, ebx
$LN18@sqlite3Ope@4:
	mov	ecx, DWORD PTR [edi+20]
	add	DWORD PTR [edi+12], 1
	mov	edx, DWORD PTR _i$125553[esp+32]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 47			; 0000002fH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [edi+564], bl
	jmp	SHORT $LN20@sqlite3Ope@4
$LN65@sqlite3Ope@4:
	xor	ebx, ebx
$LN20@sqlite3Ope@4:
; Line 50435
	mov	esi, DWORD PTR [edi+12]
	cmp	DWORD PTR [edi+16], esi
	mov	eax, DWORD PTR _pIdx$[esp+32]
	mov	ebp, DWORD PTR [eax+20]
	jg	SHORT $LN26@sqlite3Ope@4
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, edi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN66@sqlite3Ope@4
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN66@sqlite3Ope@4
	xor	eax, eax
	xor	ebx, ebx
	jmp	SHORT $LN28@sqlite3Ope@4
$LN66@sqlite3Ope@4:
	xor	ebx, ebx
$LN26@sqlite3Ope@4:
	mov	edx, DWORD PTR [edi+20]
	add	DWORD PTR [edi+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	cl, BYTE PTR _op$[esp+28]
	mov	edx, DWORD PTR _base$[esp+28]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _i$[esp+32]
	add	ecx, edx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [edi+564], bl
	mov	eax, esi
$LN28@sqlite3Ope@4:
	mov	esi, DWORD PTR [edi+20]
	cmp	esi, ebx
	je	SHORT $LN59@sqlite3Ope@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN49@sqlite3Ope@4
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN59@sqlite3Ope@4
$LN49@sqlite3Ope@4:
	cmp	eax, ebx
	jl	SHORT $LN45@sqlite3Ope@4
	cmp	eax, DWORD PTR [edi+12]
	jl	SHORT $LN69@sqlite3Ope@4
$LN45@sqlite3Ope@4:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, 1
	js	SHORT $LN3@sqlite3Ope@4
$LN69@sqlite3Ope@4:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [esi+edx*4+12]
	mov	eax, DWORD PTR [esi+edx*4+16]
	lea	esi, DWORD PTR [esi+edx*4]
	call	_freeP3
	mov	eax, DWORD PTR _pKey$96784[esp+32]
	cmp	eax, ebx
	mov	DWORD PTR [esi+12], ebx
	jne	SHORT $LN60@sqlite3Ope@4
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], ebx
	jmp	SHORT $LN3@sqlite3Ope@4
$LN60@sqlite3Ope@4:
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -6			; fffffffaH
	jmp	SHORT $LN3@sqlite3Ope@4
$LN59@sqlite3Ope@4:
	mov	ecx, DWORD PTR _pKey$96784[esp+32]
	mov	eax, -9					; fffffff7H
	call	_freeP3
$LN3@sqlite3Ope@4:
	mov	eax, DWORD PTR _pIdx$[esp+32]
	mov	eax, DWORD PTR [eax+32]
	add	DWORD PTR _i$[esp+32], 1
	cmp	eax, ebx
	mov	ebp, DWORD PTR _pParse$[esp+28]
	mov	DWORD PTR _pIdx$[esp+32], eax
	jne	$LL68@sqlite3Ope@4
$LN2@sqlite3Ope@4:
; Line 50437
	mov	ecx, DWORD PTR _base$[esp+28]
	mov	edx, DWORD PTR _i$[esp+32]
	lea	eax, DWORD PTR [edx+ecx]
	cmp	DWORD PTR [ebp+28], eax
	jg	SHORT $LN70@sqlite3Ope@4
; Line 50438
	mov	DWORD PTR [ebp+28], eax
$LN70@sqlite3Ope@4:
	pop	edi
	pop	ebp
$LN1@sqlite3Ope@4:
	pop	esi
	pop	ebx
; Line 50440
	add	esp, 16					; 00000010H
	ret	0
_sqlite3OpenTableAndIndices ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _keyInfoFromExprList
_TEXT	SEGMENT
tv257 = -4						; size = 4
_pParse$ = 8						; size = 4
_db$ = 12						; size = 4
_pList$ = 12						; size = 4
_keyInfoFromExprList PROC				; COMDAT
; Line 54119
	push	ecx
; Line 54120
	mov	eax, DWORD PTR _pParse$[esp]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pList$[esp+8]
; Line 54126
	mov	ebx, DWORD PTR [ebp]
	push	esi
	push	edi
; Line 54127
	lea	edi, DWORD PTR [ebx+ebx*4+16]
	mov	DWORD PTR _db$[esp+16], ecx
	call	_sqlite3Malloc
	mov	esi, eax
; Line 54128
	test	esi, esi
	je	SHORT $LN2@keyInfoFro
; Line 54131
	mov	eax, DWORD PTR _db$[esp+16]
	lea	edx, DWORD PTR [esi+ebx*4+12]
	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR [esi+4], ebx
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	al, BYTE PTR [edx+121]
; Line 54132
	xor	edi, edi
	test	ebx, ebx
	mov	BYTE PTR [esi], al
	mov	ebp, DWORD PTR [ebp+12]
	jle	SHORT $LN10@keyInfoFro
	lea	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR tv257[esp+20], ecx
	npad	2
$LL4@keyInfoFro:
; Line 54134
	mov	edx, DWORD PTR _pParse$[esp+16]
	mov	ecx, DWORD PTR [ebp]
	push	edx
	call	_sqlite3ExprCollSeq
	add	esp, 4
; Line 54135
	test	eax, eax
	jne	SHORT $LN1@keyInfoFro
; Line 54136
	mov	eax, DWORD PTR _db$[esp+16]
	mov	eax, DWORD PTR [eax+28]
$LN1@keyInfoFro:
; Line 54138
	mov	ecx, DWORD PTR tv257[esp+20]
	mov	DWORD PTR [ecx], eax
; Line 54139
	mov	al, BYTE PTR [ebp+8]
	mov	edx, DWORD PTR [esi+8]
	mov	BYTE PTR [edi+edx], al
	add	edi, 1
	add	ecx, 4
	add	ebp, 12					; 0000000cH
	cmp	edi, ebx
	mov	DWORD PTR tv257[esp+20], ecx
	jl	SHORT $LL4@keyInfoFro
$LN10@keyInfoFro:
; Line 54142
	mov	eax, esi
$LN2@keyInfoFro:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 54143
	pop	ecx
	ret	0
_keyInfoFromExprList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _multiSelectCollSeq
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_p$ = 12						; size = 4
_iCol$ = 16						; size = 4
_multiSelectCollSeq PROC				; COMDAT
; Line 55029
	push	ebx
; Line 55031
	mov	ebx, DWORD PTR _p$[esp]
	mov	eax, DWORD PTR [ebx+32]
	test	eax, eax
	push	esi
	mov	esi, DWORD PTR _iCol$[esp+4]
	push	edi
	mov	edi, DWORD PTR _pParse$[esp+8]
	je	SHORT $LN6@multiSelec
; Line 55032
	push	esi
	push	eax
	push	edi
	call	_multiSelectCollSeq
	add	esp, 12					; 0000000cH
; Line 55036
	test	eax, eax
	jne	SHORT $LN1@multiSelec
$LN6@multiSelec:
; Line 55037
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+12]
	lea	ecx, DWORD PTR [esi+esi*2]
	mov	ecx, DWORD PTR [edx+ecx*4]
	push	edi
	call	_sqlite3ExprCollSeq
	add	esp, 4
$LN1@multiSelec:
	pop	edi
	pop	esi
	pop	ebx
; Line 55040
	ret	0
_multiSelectCollSeq ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _substExpr
_TEXT	SEGMENT
_pExpr$ = 8						; size = 4
_iTable$ = 12						; size = 4
_pEList$ = 16						; size = 4
_substExpr PROC						; COMDAT
; Line 55486
	push	ebx
; Line 55487
	mov	ebx, DWORD PTR _pExpr$[esp]
	test	ebx, ebx
	je	$LN8@substExpr
; Line 55488
	cmp	BYTE PTR [ebx], 149			; 00000095H
	push	esi
	push	edi
	mov	edi, DWORD PTR _iTable$[esp+8]
	jne	$LN4@substExpr
	cmp	DWORD PTR [ebx+36], edi
	jne	$LN4@substExpr
; Line 55489
	mov	eax, DWORD PTR [ebx+40]
	test	eax, eax
	jge	SHORT $LN3@substExpr
	pop	edi
	pop	esi
; Line 55490
	mov	BYTE PTR [ebx], 92			; 0000005cH
	pop	ebx
; Line 55519
	ret	0
$LN3@substExpr:
; Line 55495
	mov	ecx, DWORD PTR _pEList$[esp+8]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [eax+eax*2]
	mov	esi, DWORD PTR [edx+eax*4]
; Line 55497
	mov	al, BYTE PTR [esi]
	mov	BYTE PTR [ebx], al
; Line 55499
	mov	ecx, DWORD PTR [esi+8]
	push	ecx
	call	_sqlite3ExprDup
	mov	DWORD PTR [ebx+8], eax
; Line 55501
	mov	edx, DWORD PTR [esi+12]
	push	edx
	call	_sqlite3ExprDup
	mov	DWORD PTR [ebx+12], eax
; Line 55503
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	_sqlite3ExprListDup
	mov	DWORD PTR [ebx+16], eax
; Line 55504
	mov	ecx, DWORD PTR [esi+36]
	mov	DWORD PTR [ebx+36], ecx
; Line 55505
	mov	edx, DWORD PTR [esi+60]
	mov	DWORD PTR [ebx+60], edx
; Line 55506
	mov	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [ebx+40], eax
; Line 55507
	mov	ecx, DWORD PTR [esi+48]
; Line 55508
	lea	edx, DWORD PTR [ebx+20]
	lea	eax, DWORD PTR [esi+20]
	push	edx
	mov	DWORD PTR [ebx+48], ecx
	call	_sqlite3TokenCopy
; Line 55509
	lea	ecx, DWORD PTR [ebx+28]
	lea	eax, DWORD PTR [esi+28]
	push	ecx
	call	_sqlite3TokenCopy
; Line 55510
	mov	edx, DWORD PTR [esi+56]
	push	edx
	call	_sqlite3SelectDup
	add	esp, 24					; 00000018H
	mov	DWORD PTR [ebx+56], eax
; Line 55511
	mov	ax, WORD PTR [esi+2]
	pop	edi
	pop	esi
	mov	WORD PTR [ebx+2], ax
	pop	ebx
; Line 55519
	ret	0
$LN4@substExpr:
; Line 55514
	mov	esi, DWORD PTR _pEList$[esp+8]
	mov	ecx, DWORD PTR [ebx+8]
	push	esi
	push	edi
	push	ecx
	call	_substExpr
; Line 55515
	mov	edx, DWORD PTR [ebx+12]
	push	esi
	push	edi
	push	edx
	call	_substExpr
; Line 55516
	mov	eax, DWORD PTR [ebx+56]
	push	eax
	call	_substSelect
; Line 55517
	mov	ebx, DWORD PTR [ebx+16]
	add	esp, 28					; 0000001cH
	test	ebx, ebx
	je	SHORT $LN16@substExpr
	push	ebp
	xor	ebp, ebp
	cmp	DWORD PTR [ebx], ebp
	jle	SHORT $LN18@substExpr
	xor	esi, esi
	npad	7
$LL10@substExpr:
	mov	ecx, DWORD PTR _pEList$[esp+12]
	mov	edx, DWORD PTR [ebx+12]
	mov	eax, DWORD PTR [edx+esi]
	push	ecx
	push	edi
	push	eax
	call	_substExpr
	add	ebp, 1
	add	esp, 12					; 0000000cH
	add	esi, 12					; 0000000cH
	cmp	ebp, DWORD PTR [ebx]
	jl	SHORT $LL10@substExpr
$LN18@substExpr:
	pop	ebp
$LN16@substExpr:
	pop	edi
	pop	esi
$LN8@substExpr:
	pop	ebx
; Line 55519
	ret	0
_substExpr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _substExprList
_TEXT	SEGMENT
_iTable$ = 8						; size = 4
_pEList$ = 12						; size = 4
_substExprList PROC					; COMDAT
; _pList$ = esi
; Line 55522
	test	esi, esi
	push	ebp
	mov	ebp, DWORD PTR _pEList$[esp]
	je	SHORT $LN1@substExprL
	push	edi
; Line 55523
	xor	edi, edi
	cmp	DWORD PTR [esi], edi
	jle	SHORT $LN9@substExprL
	push	ebx
	xor	ebx, ebx
$LL3@substExprL:
; Line 55524
	mov	eax, DWORD PTR _iTable$[esp+8]
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [ecx+ebx]
	push	ebp
	push	eax
	push	edx
	call	_substExpr
	add	edi, 1
	add	esp, 12					; 0000000cH
	add	ebx, 12					; 0000000cH
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LL3@substExprL
	pop	ebx
$LN9@substExprL:
	pop	edi
$LN1@substExprL:
	pop	ebp
; Line 55526
	ret	0
_substExprList ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _flattenSubquery
_TEXT	SEGMENT
_iParent$ = -24						; size = 4
tv882 = -20						; size = 4
tv826 = -20						; size = 4
tv139 = -16						; size = 4
_i$ = -16						; size = 4
_nSubSrc$99276 = -16					; size = 4
tv918 = -12						; size = 4
tv898 = -12						; size = 4
tv873 = -12						; size = 4
_pSubSrc$ = -12						; size = 4
_pSub$ = -8						; size = 4
tv582 = -4						; size = 4
$T125740 = -4						; size = 4
_jointype$99277 = -4					; size = 4
_p$ = 8							; size = 4
_iFrom$ = 12						; size = 4
_isAgg$ = 16						; size = 4
_subqueryIsAgg$ = 20					; size = 4
_flattenSubquery PROC					; COMDAT
; Line 55621
	mov	eax, DWORD PTR _p$[esp-4]
	mov	edx, DWORD PTR _subqueryIsAgg$[esp-4]
	sub	esp, 24					; 00000018H
; Line 55633
	test	eax, eax
	push	ebx
	mov	ebx, DWORD PTR _iFrom$[esp+24]
	push	edi
	mov	edi, DWORD PTR _isAgg$[esp+28]
	jne	SHORT $LN38@flattenSub
	pop	edi
	pop	ebx
; Line 55804
	add	esp, 24					; 00000018H
	ret	0
$LN38@flattenSub:
; Line 55636
	lea	ebx, DWORD PTR [ebx+ebx*2]
	push	ebp
	mov	ebp, DWORD PTR [eax+12]
	shl	ebx, 4
; Line 55639
	test	edi, edi
	mov	ecx, DWORD PTR [ebx+ebp+24]
	mov	DWORD PTR _pSub$[esp+36], ecx
	je	SHORT $LN37@flattenSub
	test	edx, edx
	je	SHORT $LN36@flattenSub
$LN91@flattenSub:
	pop	ebp
	pop	edi
	xor	eax, eax
	pop	ebx
; Line 55804
	add	esp, 24					; 00000018H
	ret	0
$LN37@flattenSub:
; Line 55640
	test	edx, edx
	je	SHORT $LN36@flattenSub
	cmp	WORD PTR [ebp], 1
	jg	SHORT $LN91@flattenSub
$LN36@flattenSub:
; Line 55641
	mov	edx, DWORD PTR [ecx+12]
	push	esi
; Line 55648
	mov	esi, DWORD PTR [ecx+40]
	test	esi, esi
	mov	DWORD PTR _pSubSrc$[esp+40], edx
	je	SHORT $LN35@flattenSub
	cmp	DWORD PTR [eax+40], 0
	jne	$LN29@flattenSub
$LN35@flattenSub:
; Line 55649
	cmp	DWORD PTR [ecx+44], 0
	jne	$LN29@flattenSub
; Line 55650
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN33@flattenSub
	test	esi, esi
	je	SHORT $LN33@flattenSub
	cmp	DWORD PTR [ecx+28], 0
; Line 55651
	jne	$LN29@flattenSub
$LN33@flattenSub:
; Line 55653
	movzx	edx, WORD PTR [edx]
	test	dx, dx
	je	$LN29@flattenSub
; Line 55655
	cmp	BYTE PTR [ecx+5], 0
	jne	SHORT $LN30@flattenSub
	test	esi, esi
	je	SHORT $LN85@flattenSub
$LN30@flattenSub:
	cmp	WORD PTR [ebp], 1
	jg	$LN29@flattenSub
	test	edi, edi
	jne	$LN29@flattenSub
$LN85@flattenSub:
; Line 55658
	cmp	BYTE PTR [eax+5], 0
	je	SHORT $LN86@flattenSub
	cmp	DWORD PTR _subqueryIsAgg$[esp+36], 0
	jne	$LN29@flattenSub
$LN86@flattenSub:
; Line 55659
	cmp	BYTE PTR [eax+9], 0
	jne	SHORT $LN88@flattenSub
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN27@flattenSub
$LN88@flattenSub:
	cmp	DWORD PTR [ecx+28], 0
; Line 55660
	jne	$LN29@flattenSub
$LN27@flattenSub:
; Line 55675
	cmp	dx, 1
	jle	SHORT $LN25@flattenSub
	test	BYTE PTR [ebx+ebp+29], 32		; 00000020H
; Line 55676
	jne	$LN29@flattenSub
$LN25@flattenSub:
; Line 55692
	mov	al, BYTE PTR [ebx+ebp+29]
	test	al, 32					; 00000020H
	je	SHORT $LN24@flattenSub
	cmp	DWORD PTR [ecx+16], 0
; Line 55693
	jne	$LN29@flattenSub
$LN24@flattenSub:
; Line 55708
	mov	ecx, DWORD PTR [ebx+ebp+32]
; Line 55710
	movsx	esi, dx
; Line 55711
	movzx	edx, al
; Line 55713
	mov	eax, DWORD PTR [ebx+ebp+20]
	push	eax
	mov	DWORD PTR _iParent$[esp+44], ecx
	mov	DWORD PTR _nSubSrc$99276[esp+44], esi
	mov	DWORD PTR _jointype$99277[esp+44], edx
	call	_sqlite3DeleteTable
; Line 55714
	mov	ecx, DWORD PTR [ebx+ebp+8]
	push	ecx
	call	_sqlite3FreeX
; Line 55715
	mov	edx, DWORD PTR [ebx+ebp+12]
	push	edx
	call	_sqlite3FreeX
; Line 55716
	mov	eax, DWORD PTR [ebx+ebp+16]
	push	eax
	call	_sqlite3FreeX
	add	esp, 16					; 00000010H
; Line 55717
	cmp	esi, 1
	jle	$LN17@flattenSub
; Line 55718
	mov	eax, esi
; Line 55719
	cmp	eax, 1
	lea	edi, DWORD PTR [eax-1]
	jle	SHORT $LN20@flattenSub
; Line 55718
	lea	esi, DWORD PTR [eax-1]
	npad	2
$LL22@flattenSub:
; Line 55720
	push	0
	xor	eax, eax
	mov	ecx, ebp
	call	_sqlite3SrcListAppend
	add	esp, 4
	sub	esi, 1
	mov	ebp, eax
	jne	SHORT $LL22@flattenSub
$LN20@flattenSub:
; Line 55722
	mov	ecx, DWORD PTR _p$[esp+36]
	mov	DWORD PTR [ecx+12], ebp
; Line 55723
	movsx	eax, WORD PTR [ebp]
	sub	eax, 1
	mov	ecx, eax
	sub	ecx, edi
	cmp	ecx, DWORD PTR _iFrom$[esp+36]
	jl	SHORT $LN17@flattenSub
	mov	edx, ecx
	lea	eax, DWORD PTR [eax+eax*2]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	shl	eax, 4
	shl	ecx, 4
	lea	ecx, DWORD PTR [ecx+ebp+8]
	lea	eax, DWORD PTR [eax+ebp+8]
	mov	DWORD PTR tv826[esp+40], ecx
	npad	9
$LL19@flattenSub:
; Line 55724
	mov	esi, DWORD PTR tv826[esp+40]
	sub	DWORD PTR tv826[esp+40], 48		; 00000030H
	mov	edi, eax
	sub	edx, 1
	mov	ecx, 12					; 0000000cH
	sub	eax, 48					; 00000030H
	cmp	edx, DWORD PTR _iFrom$[esp+36]
	rep movsd
	jge	SHORT $LL19@flattenSub
$LN17@flattenSub:
; Line 55727
	cmp	DWORD PTR _nSubSrc$99276[esp+40], 0
	jle	SHORT $LN14@flattenSub
	mov	edx, DWORD PTR _pSubSrc$[esp+40]
	mov	ecx, DWORD PTR _nSubSrc$99276[esp+40]
	add	edx, 8
	lea	eax, DWORD PTR [ebx+ebp+8]
	mov	DWORD PTR tv873[esp+40], edx
	mov	DWORD PTR tv882[esp+40], eax
	mov	DWORD PTR tv139[esp+40], ecx
$LL16@flattenSub:
; Line 55728
	mov	eax, DWORD PTR tv873[esp+40]
	mov	edi, DWORD PTR tv882[esp+40]
; Line 55729
	push	48					; 00000030H
	mov	esi, eax
	push	0
	mov	ecx, 12					; 0000000cH
	push	eax
	rep movsd
	call	_memset
	mov	eax, 48					; 00000030H
	add	DWORD PTR tv882[esp+52], eax
	add	DWORD PTR tv873[esp+52], eax
	add	esp, 12					; 0000000cH
	sub	DWORD PTR tv139[esp+40], 1
	jne	SHORT $LL16@flattenSub
$LN14@flattenSub:
; Line 55731
	mov	dl, BYTE PTR _jointype$99277[esp+40]
	mov	BYTE PTR [ebx+ebp+29], dl
; Line 55746
	mov	ebp, DWORD PTR _p$[esp+36]
	mov	ebx, DWORD PTR [ebp]
; Line 55747
	xor	eax, eax
	cmp	DWORD PTR [ebx], eax
	mov	DWORD PTR _i$[esp+40], eax
	jle	SHORT $LN83@flattenSub
; Line 55731
	mov	DWORD PTR tv898[esp+40], eax
	npad	1
$LL87@flattenSub:
; Line 55749
	mov	ecx, DWORD PTR [ebx+12]
	add	eax, ecx
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN12@flattenSub
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+28]
	test	ecx, ecx
	mov	DWORD PTR tv582[esp+40], ecx
	je	SHORT $LN12@flattenSub
; Line 55750
	mov	esi, DWORD PTR [eax+32]
	shr	esi, 1
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN43@flattenSub
	mov	edx, DWORD PTR tv582[esp+40]
	push	esi
	push	edx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN43@flattenSub:
	mov	eax, DWORD PTR [ebx+12]
	mov	ecx, DWORD PTR tv898[esp+40]
	mov	DWORD PTR [ecx+eax+4], edi
$LN12@flattenSub:
	mov	ecx, DWORD PTR _i$[esp+40]
	mov	eax, DWORD PTR tv898[esp+40]
	add	ecx, 1
	add	eax, 12					; 0000000cH
	cmp	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _i$[esp+40], ecx
	mov	DWORD PTR tv898[esp+40], eax
	jl	SHORT $LL87@flattenSub
$LN83@flattenSub:
; Line 55753
	mov	ebx, DWORD PTR _pSub$[esp+40]
	mov	esi, DWORD PTR [ebp]
	mov	edx, DWORD PTR [ebx]
	xor	edi, edi
	cmp	esi, edi
	mov	DWORD PTR $T125740[esp+40], edx
	je	SHORT $LN84@flattenSub
	cmp	DWORD PTR [esi], edi
	jle	SHORT $LN84@flattenSub
	mov	DWORD PTR tv918[esp+40], edi
	npad	2
$LL49@flattenSub:
	mov	eax, DWORD PTR $T125740[esp+40]
	mov	ecx, DWORD PTR _iParent$[esp+40]
	mov	edx, DWORD PTR [esi+12]
	push	eax
	mov	eax, DWORD PTR tv918[esp+44]
	push	ecx
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	_substExpr
	add	DWORD PTR tv918[esp+52], 12		; 0000000cH
	add	edi, 1
	add	esp, 12					; 0000000cH
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LL49@flattenSub
$LN84@flattenSub:
; Line 55754
	cmp	DWORD PTR _isAgg$[esp+36], 0
	je	SHORT $LN9@flattenSub
; Line 55755
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR _iParent$[esp+40]
	mov	esi, DWORD PTR [ebp+20]
	push	edx
	push	edi
	call	_substExprList
; Line 55756
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebp+24]
	push	eax
	push	edi
	push	ecx
	call	_substExpr
	add	esp, 20					; 00000014H
$LN9@flattenSub:
; Line 55758
	mov	eax, DWORD PTR [ebx+28]
	test	eax, eax
	je	SHORT $LN8@flattenSub
; Line 55760
	mov	DWORD PTR [ebp+28], eax
; Line 55761
	mov	DWORD PTR [ebx+28], 0
	jmp	SHORT $LN6@flattenSub
$LN8@flattenSub:
; Line 55762
	mov	esi, DWORD PTR [ebp+28]
	test	esi, esi
	je	SHORT $LN6@flattenSub
; Line 55763
	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR _iParent$[esp+40]
	push	edx
	push	eax
	call	_substExprList
	add	esp, 8
$LN6@flattenSub:
; Line 55765
	mov	eax, DWORD PTR [ebx+16]
	test	eax, eax
	je	SHORT $LN5@flattenSub
; Line 55766
	push	eax
	call	_sqlite3ExprDup
	add	esp, 4
	mov	edi, eax
; Line 55767
	jmp	SHORT $LN4@flattenSub
$LN5@flattenSub:
; Line 55768
	xor	edi, edi
$LN4@flattenSub:
; Line 55770
	cmp	DWORD PTR _subqueryIsAgg$[esp+36], 0
	je	SHORT $LN3@flattenSub
; Line 55772
	mov	ecx, DWORD PTR [ebp+16]
; Line 55774
	mov	eax, DWORD PTR _iParent$[esp+40]
	mov	DWORD PTR [ebp+24], ecx
	mov	DWORD PTR [ebp+16], edi
	mov	edx, DWORD PTR [ebx]
	push	edx
	push	eax
	push	ecx
	call	_substExpr
; Line 55775
	mov	edx, DWORD PTR [ebx+24]
	push	edx
	call	_sqlite3ExprDup
	mov	edi, eax
	mov	eax, DWORD PTR [ebp+24]
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN56@flattenSub
	mov	eax, edi
	jmp	SHORT $LN53@flattenSub
$LN56@flattenSub:
	test	edi, edi
	je	SHORT $LN53@flattenSub
	push	eax
	push	61					; 0000003dH
	xor	eax, eax
	call	_sqlite3Expr
	add	esp, 8
$LN53@flattenSub:
	mov	DWORD PTR [ebp+24], eax
; Line 55777
	mov	eax, DWORD PTR [ebx+20]
	push	eax
	call	_sqlite3ExprListDup
	add	esp, 4
	mov	DWORD PTR [ebp+20], eax
; Line 55778
	jmp	SHORT $LN2@flattenSub
$LN3@flattenSub:
; Line 55779
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR _iParent$[esp+40]
	mov	eax, DWORD PTR [ebp+16]
	push	ecx
	push	edx
	push	eax
	call	_substExpr
; Line 55780
	mov	eax, DWORD PTR [ebp+16]
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN62@flattenSub
	mov	eax, edi
	jmp	SHORT $LN59@flattenSub
$LN62@flattenSub:
	test	edi, edi
	je	SHORT $LN59@flattenSub
	push	eax
	push	61					; 0000003dH
	xor	eax, eax
	call	_sqlite3Expr
	add	esp, 8
$LN59@flattenSub:
	mov	DWORD PTR [ebp+16], eax
$LN2@flattenSub:
; Line 55786
	cmp	BYTE PTR [ebp+5], 0
	jne	SHORT $LN41@flattenSub
	cmp	BYTE PTR [ebx+5], 0
	jne	SHORT $LN41@flattenSub
	xor	eax, eax
	jmp	SHORT $LN42@flattenSub
$LN41@flattenSub:
	mov	eax, 1
$LN42@flattenSub:
	mov	BYTE PTR [ebp+5], al
; Line 55794
	mov	eax, DWORD PTR [ebx+40]
	test	eax, eax
	je	SHORT $LN1@flattenSub
; Line 55795
	mov	DWORD PTR [ebp+40], eax
; Line 55796
	mov	DWORD PTR [ebx+40], 0
$LN1@flattenSub:
; Line 55802
	push	ebx
	call	_clearSelect
	push	ebx
	call	_free
	add	esp, 8
	pop	esi
	pop	ebp
	pop	edi
; Line 55803
	mov	eax, 1
	pop	ebx
; Line 55804
	add	esp, 24					; 00000018H
	ret	0
$LN29@flattenSub:
	pop	esi
	pop	ebp
	pop	edi
; Line 55656
	xor	eax, eax
	pop	ebx
; Line 55804
	add	esp, 24					; 00000018H
	ret	0
_flattenSubquery ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EB@DGDELKPD@?$CFs?5BY?5column?5number?5?$CFd?5out?5of?5ra@ ; `string'
PUBLIC	??_C@_0BP@OLNMGBH@too?5many?5terms?5in?5?$CFs?5BY?5clause?$AA@ ; `string'
;	COMDAT ??_C@_0EB@DGDELKPD@?$CFs?5BY?5column?5number?5?$CFd?5out?5of?5ra@
CONST	SEGMENT
??_C@_0EB@DGDELKPD@?$CFs?5BY?5column?5number?5?$CFd?5out?5of?5ra@ DB '%s '
	DB	'BY column number %d out of range - should be between 1 and %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OLNMGBH@too?5many?5terms?5in?5?$CFs?5BY?5clause?$AA@
CONST	SEGMENT
??_C@_0BP@OLNMGBH@too?5many?5terms?5in?5?$CFs?5BY?5clause?$AA@ DB 'too ma'
	DB	'ny terms in %s BY clause', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _processOrderGroupBy
_TEXT	SEGMENT
tv269 = -20						; size = 4
_iCol$99386 = -16					; size = 4
_pEList$ = -12						; size = 4
_i$ = -8						; size = 4
_pParse$ = -4						; size = 4
_pNC$ = 8						; size = 4
_zType$ = 12						; size = 4
_processOrderGroupBy PROC				; COMDAT
; _pOrderBy$ = eax
; Line 55967
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
	mov	edi, eax
; Line 55969
	mov	eax, DWORD PTR _pNC$[esp+24]
	mov	esi, DWORD PTR [eax+8]
; Line 55970
	mov	ecx, DWORD PTR [eax]
; Line 55973
	xor	edx, edx
	cmp	edi, edx
	mov	DWORD PTR _pEList$[esp+28], esi
	mov	DWORD PTR _pParse$[esp+28], ecx
	jne	SHORT $LN10@processOrd
	pop	edi
	xor	eax, eax
	pop	esi
; Line 56003
	add	esp, 20					; 00000014H
	ret	0
$LN10@processOrd:
; Line 55974
	mov	eax, DWORD PTR [edi]
	cmp	eax, 2000				; 000007d0H
	jle	SHORT $LN9@processOrd
; Line 55975
	mov	eax, DWORD PTR _zType$[esp+24]
	push	eax
	push	OFFSET ??_C@_0BP@OLNMGBH@too?5many?5terms?5in?5?$CFs?5BY?5clause?$AA@
	mov	edi, ecx
	call	_sqlite3ErrorMsg
	add	esp, 8
	pop	edi
; Line 55976
	mov	eax, 1
	pop	esi
; Line 56003
	add	esp, 20					; 00000014H
	ret	0
$LN9@processOrd:
; Line 55978
	cmp	eax, edx
	push	ebx
	push	ebp
	mov	DWORD PTR _i$[esp+36], edx
	jle	$LN6@processOrd
	mov	DWORD PTR tv269[esp+36], edx
	jmp	SHORT $LN8@processOrd
$LL17@processOrd:
	mov	esi, DWORD PTR _pEList$[esp+36]
$LN8@processOrd:
; Line 55980
	mov	ecx, DWORD PTR [edi+12]
	mov	edx, DWORD PTR tv269[esp+36]
	mov	ebx, DWORD PTR [edx+ecx]
; Line 55981
	lea	eax, DWORD PTR _iCol$99386[esp+36]
	push	eax
	push	ebx
	call	_sqlite3ExprIsInteger
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@processOrd
; Line 55982
	mov	eax, DWORD PTR _iCol$99386[esp+36]
	test	eax, eax
	jle	$LN4@processOrd
	cmp	eax, DWORD PTR [esi]
	jg	SHORT $LN4@processOrd
; Line 55984
	movzx	ebp, WORD PTR [ebx+2]
	mov	esi, DWORD PTR [ebx+4]
; Line 55985
	push	ebx
	and	ebp, 256				; 00000100H
	call	_sqlite3ExprDelete
; Line 55986
	mov	eax, DWORD PTR _iCol$99386[esp+40]
	mov	edx, DWORD PTR _pEList$[esp+40]
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+ecx*4-12]
	push	ecx
	call	_sqlite3ExprDup
	mov	ecx, DWORD PTR tv269[esp+44]
	mov	edx, DWORD PTR [edi+12]
	mov	DWORD PTR [ecx+edx], eax
	mov	eax, DWORD PTR [edi+12]
	mov	ebx, DWORD PTR [ecx+eax]
	add	esp, 8
; Line 55987
	test	esi, esi
	je	SHORT $LN16@processOrd
	test	ebp, ebp
	je	SHORT $LN16@processOrd
; Line 55989
	or	WORD PTR [ebx+2], bp
	mov	DWORD PTR [ebx+4], esi
$LN16@processOrd:
; Line 55998
	mov	esi, DWORD PTR _pNC$[esp+32]
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	SHORT $LN14@processOrd
	mov	eax, DWORD PTR _i$[esp+36]
	add	DWORD PTR tv269[esp+36], 12		; 0000000cH
	add	eax, 1
	cmp	eax, DWORD PTR [edi]
	mov	DWORD PTR _i$[esp+36], eax
	jl	$LL17@processOrd
$LN6@processOrd:
	pop	ebp
	pop	ebx
	pop	edi
; Line 56002
	xor	eax, eax
	pop	esi
; Line 56003
	add	esp, 20					; 00000014H
	ret	0
$LN4@processOrd:
; Line 55994
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _zType$[esp+32]
	mov	edi, DWORD PTR _pParse$[esp+36]
	push	ecx
	push	eax
	push	edx
	push	OFFSET ??_C@_0EB@DGDELKPD@?$CFs?5BY?5column?5number?5?$CFd?5out?5of?5ra@
	call	_sqlite3ErrorMsg
	add	esp, 16					; 00000010H
$LN14@processOrd:
	pop	ebp
	pop	ebx
	pop	edi
; Line 55995
	mov	eax, 1
	pop	esi
; Line 56003
	add	esp, 20					; 00000014H
	ret	0
_processOrderGroupBy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DI@BMJPLCG@DISTINCT?5in?5aggregate?5must?5be?5fo@ ; `string'
;	COMDAT ??_C@_0DI@BMJPLCG@DISTINCT?5in?5aggregate?5must?5be?5fo@
CONST	SEGMENT
??_C@_0DI@BMJPLCG@DISTINCT?5in?5aggregate?5must?5be?5fo@ DB 'DISTINCT in '
	DB	'aggregate must be followed by an expression', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _resetAccumulator
_TEXT	SEGMENT
_i$ = -12						; size = 4
tv577 = -8						; size = 4
_pFunc$ = -8						; size = 4
$T125835 = -4						; size = 4
_pKeyInfo$99464 = -4					; size = 4
_pParse$ = 8						; size = 4
_pAggInfo$ = 12						; size = 4
_resetAccumulator PROC					; COMDAT
; Line 56141
	mov	eax, DWORD PTR _pParse$[esp-4]
; Line 56144
	mov	ecx, DWORD PTR _pAggInfo$[esp-4]
	mov	edx, DWORD PTR [ecx+36]
	sub	esp, 12					; 0000000cH
	push	esi
	mov	esi, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx+20]
	add	edx, eax
	je	$LN5@resetAccum
	push	ebx
; Line 56147
	xor	ebx, ebx
	cmp	eax, ebx
	push	ebp
	push	edi
	mov	DWORD PTR _i$[esp+28], ebx
	jle	SHORT $LN8@resetAccum
	mov	DWORD PTR tv577[esp+28], ebx
	npad	2
$LL10@resetAccum:
; Line 56148
	mov	eax, DWORD PTR [ecx+16]
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	ecx, DWORD PTR tv577[esp+28]
	mov	ebp, DWORD PTR [ecx+eax+16]
	jg	SHORT $LN14@resetAccum
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN63@resetAccum
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN64@resetAccum
$LN63@resetAccum:
	xor	ebx, ebx
$LN14@resetAccum:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 133			; 00000085H
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN9@resetAccum
$LN64@resetAccum:
	xor	ebx, ebx
$LN9@resetAccum:
; Line 56147
	mov	eax, DWORD PTR _i$[esp+28]
	mov	ecx, DWORD PTR _pAggInfo$[esp+24]
	add	DWORD PTR tv577[esp+28], 24		; 00000018H
	add	eax, 1
	cmp	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _i$[esp+28], eax
	jl	SHORT $LL10@resetAccum
$LN8@resetAccum:
; Line 56150
	cmp	DWORD PTR [ecx+36], ebx
	mov	ebp, DWORD PTR [ecx+32]
	mov	DWORD PTR _pFunc$[esp+28], ebp
	mov	DWORD PTR _i$[esp+28], ebx
	jle	$LN70@resetAccum
$LL7@resetAccum:
; Line 56151
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR $T125835[esp+28], ecx
	jg	SHORT $LN20@resetAccum
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN65@resetAccum
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN66@resetAccum
$LN65@resetAccum:
	xor	ebx, ebx
$LN20@resetAccum:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ecx, DWORD PTR $T125835[esp+28]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 133			; 00000085H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN22@resetAccum
$LN66@resetAccum:
	xor	ebx, ebx
$LN22@resetAccum:
; Line 56152
	cmp	DWORD PTR [ebp+12], ebx
	jl	$LN6@resetAccum
; Line 56153
	mov	eax, DWORD PTR [ebp]
; Line 56154
	mov	eax, DWORD PTR [eax+16]
	cmp	eax, ebx
	je	$LN2@resetAccum
	cmp	DWORD PTR [eax], 1
	jne	$LN2@resetAccum
; Line 56159
	mov	edx, DWORD PTR _pParse$[esp+24]
	push	eax
	push	edx
	call	_keyInfoFromExprList
; Line 56161
	mov	edi, DWORD PTR [esi+12]
	mov	ebp, DWORD PTR [ebp+12]
	add	esp, 8
	cmp	DWORD PTR [esi+16], edi
	mov	DWORD PTR _pKeyInfo$99464[esp+28], eax
	jg	SHORT $LN28@resetAccum
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN68@resetAccum
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN68@resetAccum
	xor	eax, eax
	xor	ebx, ebx
	jmp	SHORT $LN30@resetAccum
$LN68@resetAccum:
	xor	ebx, ebx
$LN28@resetAccum:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 121			; 00000079H
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	eax, edi
$LN30@resetAccum:
	mov	edi, DWORD PTR [esi+20]
	cmp	edi, ebx
	je	SHORT $LN60@resetAccum
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN51@resetAccum
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN60@resetAccum
$LN51@resetAccum:
	cmp	eax, ebx
	jl	SHORT $LN47@resetAccum
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN46@resetAccum
$LN47@resetAccum:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN69@resetAccum
$LN46@resetAccum:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [edi+edx*4+12]
	mov	eax, DWORD PTR [edi+edx*4+16]
	lea	edi, DWORD PTR [edi+edx*4]
	call	_freeP3
	mov	eax, DWORD PTR _pKeyInfo$99464[esp+28]
	cmp	eax, ebx
	mov	ebp, DWORD PTR _pFunc$[esp+28]
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN61@resetAccum
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN6@resetAccum
$LN61@resetAccum:
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], -6			; fffffffaH
	jmp	SHORT $LN6@resetAccum
$LN60@resetAccum:
	mov	ecx, DWORD PTR _pKeyInfo$99464[esp+28]
	mov	eax, -9					; fffffff7H
	call	_freeP3
$LN69@resetAccum:
; Line 56157
	mov	ebp, DWORD PTR _pFunc$[esp+28]
$LN6@resetAccum:
; Line 56150
	mov	eax, DWORD PTR _i$[esp+28]
	mov	ecx, DWORD PTR _pAggInfo$[esp+24]
	add	eax, 1
	add	ebp, 16					; 00000010H
	cmp	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _i$[esp+28], eax
	mov	DWORD PTR _pFunc$[esp+28], ebp
	jl	$LL7@resetAccum
$LN70@resetAccum:
	pop	edi
	pop	ebp
	pop	ebx
$LN5@resetAccum:
	pop	esi
; Line 56165
	add	esp, 12					; 0000000cH
	ret	0
$LN2@resetAccum:
; Line 56156
	mov	edi, DWORD PTR _pParse$[esp+24]
	push	OFFSET ??_C@_0DI@BMJPLCG@DISTINCT?5in?5aggregate?5must?5be?5fo@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 56157
	mov	DWORD PTR [ebp+12], -1
	jmp	SHORT $LN6@resetAccum
_resetAccumulator ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlitePersistTriggerStep
_TEXT	SEGMENT
_sqlitePersistTriggerStep PROC				; COMDAT
; _p$ = esi
; Line 57412
	push	ebx
	push	ebp
; Line 57413
	mov	ebp, DWORD PTR [esi+16]
	test	ebp, ebp
	push	edi
	je	SHORT $LN5@sqlitePers
; Line 57414
	mov	edi, DWORD PTR [esi+20]
	shr	edi, 1
	lea	ecx, DWORD PTR [edi+1]
	call	_sqlite3MallocRaw
	mov	ebx, eax
	test	ebx, ebx
	je	SHORT $LN8@sqlitePers
	push	edi
	push	ebp
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [ebx+edi], 0
$LN8@sqlitePers:
; Line 57415
	or	DWORD PTR [esi+20], 1
	mov	DWORD PTR [esi+16], ebx
$LN5@sqlitePers:
; Line 57417
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN4@sqlitePers
; Line 57418
	push	eax
	call	_sqlite3SelectDup
; Line 57419
	mov	edi, DWORD PTR [esi+12]
	add	esp, 4
	test	edi, edi
	mov	ebx, eax
	je	SHORT $LN18@sqlitePers
	push	edi
	call	_clearSelect
	push	edi
	call	_free
	add	esp, 8
$LN18@sqlitePers:
; Line 57420
	mov	DWORD PTR [esi+12], ebx
$LN4@sqlitePers:
; Line 57422
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN3@sqlitePers
; Line 57423
	push	eax
	call	_sqlite3ExprDup
	mov	edi, eax
; Line 57424
	mov	eax, DWORD PTR [esi+24]
	push	eax
	call	_sqlite3ExprDelete
	add	esp, 8
; Line 57425
	mov	DWORD PTR [esi+24], edi
$LN3@sqlitePers:
; Line 57427
	mov	eax, DWORD PTR [esi+28]
	test	eax, eax
	je	SHORT $LN2@sqlitePers
; Line 57428
	push	eax
	call	_sqlite3ExprListDup
; Line 57429
	mov	ebx, DWORD PTR [esi+28]
	add	esp, 4
	mov	edi, eax
	call	_sqlite3ExprListDelete
; Line 57430
	mov	DWORD PTR [esi+28], edi
$LN2@sqlitePers:
; Line 57432
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN1@sqlitePers
; Line 57433
	push	eax
	call	_sqlite3IdListDup
; Line 57434
	mov	edi, DWORD PTR [esi+32]
	add	esp, 4
	mov	ebx, eax
	call	_sqlite3IdListDelete
; Line 57435
	mov	DWORD PTR [esi+32], ebx
$LN1@sqlitePers:
	pop	edi
	pop	ebp
	pop	ebx
; Line 57437
	ret	0
_sqlitePersistTriggerStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3TriggerSelectStep
_TEXT	SEGMENT
_sqlite3TriggerSelectStep PROC				; COMDAT
; _pSelect$ = ebx
; Line 57447
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	esi
	push	edi
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN11@sqlite3Tri@2
	test	edi, edi
	jg	SHORT $LN37@sqlite3Tri@2
$LN11@sqlite3Tri@2:
	push	44					; 0000002cH
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN38@sqlite3Tri@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN21@sqlite3Tri@2
	test	edi, edi
	jg	SHORT $LN4@sqlite3Tri@2
$LN21@sqlite3Tri@2:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN4@sqlite3Tri@2
$LN38@sqlite3Tri@2:
	push	44					; 0000002cH
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@sqlite3Tri@2:
; Line 57448
	test	esi, esi
	jne	SHORT $LN1@sqlite3Tri@2
$LN37@sqlite3Tri@2:
; Line 57449
	test	ebx, ebx
	je	SHORT $LN35@sqlite3Tri@2
	push	ebx
	call	_clearSelect
	push	ebx
	call	_free
	add	esp, 8
$LN35@sqlite3Tri@2:
	pop	edi
; Line 57450
	xor	eax, eax
	pop	esi
; Line 57459
	ret	0
$LN1@sqlite3Tri@2:
; Line 57453
	mov	DWORD PTR [esi], 110			; 0000006eH
; Line 57454
	mov	DWORD PTR [esi+12], ebx
; Line 57455
	mov	DWORD PTR [esi+4], 99			; 00000063H
; Line 57456
	call	_sqlitePersistTriggerStep
	pop	edi
; Line 57458
	mov	eax, esi
	pop	esi
; Line 57459
	ret	0
_sqlite3TriggerSelectStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3TriggerInsertStep
_TEXT	SEGMENT
_pColumn$ = 8						; size = 4
_pEList$ = 12						; size = 4
_pSelect$ = 16						; size = 4
_orconf$ = 20						; size = 4
_sqlite3TriggerInsertStep PROC				; COMDAT
; _pTableName$ = eax
; Line 57474
	push	ebx
; Line 57475
	mov	ebx, DWORD PTR _inMutex
	push	ebp
	mov	ebp, DWORD PTR _pSelect$[esp+4]
	push	esi
	xor	esi, esi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	push	edi
	mov	edi, eax
	je	SHORT $LN12@sqlite3Tri@3
	test	ebx, ebx
	jg	SHORT $LN2@sqlite3Tri@3
$LN12@sqlite3Tri@3:
	push	44					; 0000002cH
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN30@sqlite3Tri@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN22@sqlite3Tri@3
	test	ebx, ebx
	jg	SHORT $LN5@sqlite3Tri@3
$LN22@sqlite3Tri@3:
	add	ebx, 1
	mov	DWORD PTR _inMutex, ebx
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN5@sqlite3Tri@3
$LN30@sqlite3Tri@3:
	push	44					; 0000002cH
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN5@sqlite3Tri@3:
; Line 57480
	test	esi, esi
	je	SHORT $LN2@sqlite3Tri@3
; Line 57484
	mov	edx, DWORD PTR _pColumn$[esp+12]
	mov	DWORD PTR [esi], 101			; 00000065H
	mov	DWORD PTR [esi+12], ebp
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi+16], eax
	mov	ecx, DWORD PTR [edi+4]
; Line 57485
	mov	eax, DWORD PTR _pEList$[esp+12]
	mov	DWORD PTR [esi+20], ecx
; Line 57486
	mov	ecx, DWORD PTR _orconf$[esp+12]
	mov	DWORD PTR [esi+32], edx
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+4], ecx
; Line 57487
	call	_sqlitePersistTriggerStep
	pop	edi
; Line 57494
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 57495
	ret	0
$LN2@sqlite3Tri@3:
; Line 57489
	mov	edi, DWORD PTR _pColumn$[esp+12]
	call	_sqlite3IdListDelete
; Line 57490
	mov	ebx, DWORD PTR _pEList$[esp+12]
	call	_sqlite3ExprListDelete
; Line 57491
	push	ebp
	call	_sqlite3SelectDup
	add	esp, 4
	pop	edi
; Line 57494
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 57495
	ret	0
_sqlite3TriggerInsertStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3TriggerUpdateStep
_TEXT	SEGMENT
_pEList$ = 8						; size = 4
_pWhere$ = 12						; size = 4
_orconf$ = 16						; size = 4
_sqlite3TriggerUpdateStep PROC				; COMDAT
; _pTableName$ = eax
; Line 57508
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pWhere$[esp+4]
	push	esi
	push	edi
	mov	edi, DWORD PTR _inMutex
	mov	ebx, eax
	je	SHORT $LN11@sqlite3Tri@4
	test	edi, edi
	jg	SHORT $LN29@sqlite3Tri@4
$LN11@sqlite3Tri@4:
	push	44					; 0000002cH
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN30@sqlite3Tri@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN21@sqlite3Tri@4
	test	edi, edi
	jg	SHORT $LN4@sqlite3Tri@4
$LN21@sqlite3Tri@4:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN4@sqlite3Tri@4
$LN30@sqlite3Tri@4:
	push	44					; 0000002cH
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@sqlite3Tri@4:
; Line 57509
	test	esi, esi
	jne	SHORT $LN1@sqlite3Tri@4
$LN29@sqlite3Tri@4:
; Line 57510
	mov	ebx, DWORD PTR _pEList$[esp+12]
	call	_sqlite3ExprListDelete
; Line 57511
	push	ebp
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
; Line 57512
	xor	eax, eax
	pop	ebx
; Line 57523
	ret	0
$LN1@sqlite3Tri@4:
; Line 57517
	mov	edx, DWORD PTR _pEList$[esp+12]
	mov	DWORD PTR [esi], 100			; 00000064H
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi+16], eax
	mov	ecx, DWORD PTR [ebx+4]
; Line 57519
	mov	eax, DWORD PTR _orconf$[esp+12]
	mov	DWORD PTR [esi+20], ecx
	mov	DWORD PTR [esi+28], edx
	mov	DWORD PTR [esi+24], ebp
	mov	DWORD PTR [esi+4], eax
; Line 57520
	call	_sqlitePersistTriggerStep
	pop	edi
; Line 57522
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 57523
	ret	0
_sqlite3TriggerUpdateStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3TriggerDeleteStep
_TEXT	SEGMENT
_pWhere$ = 8						; size = 4
_sqlite3TriggerDeleteStep PROC				; COMDAT
; _pTableName$ = ebx
; Line 57531
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	ebp
	mov	ebp, DWORD PTR _pWhere$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN11@sqlite3Tri@5
	test	edi, edi
	jg	SHORT $LN29@sqlite3Tri@5
$LN11@sqlite3Tri@5:
	push	44					; 0000002cH
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN30@sqlite3Tri@5
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN21@sqlite3Tri@5
	test	edi, edi
	jg	SHORT $LN4@sqlite3Tri@5
$LN21@sqlite3Tri@5:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN4@sqlite3Tri@5
$LN30@sqlite3Tri@5:
	push	44					; 0000002cH
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@sqlite3Tri@5:
; Line 57532
	test	esi, esi
	jne	SHORT $LN1@sqlite3Tri@5
$LN29@sqlite3Tri@5:
; Line 57533
	push	ebp
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	edi
	pop	esi
; Line 57534
	xor	eax, eax
	pop	ebp
; Line 57544
	ret	0
$LN1@sqlite3Tri@5:
; Line 57537
	mov	DWORD PTR [esi], 99			; 00000063H
; Line 57538
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi+16], eax
	mov	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+20], ecx
; Line 57539
	mov	DWORD PTR [esi+24], ebp
; Line 57540
	mov	DWORD PTR [esi+4], 99			; 00000063H
; Line 57541
	call	_sqlitePersistTriggerStep
	pop	edi
; Line 57543
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 57544
	ret	0
_sqlite3TriggerDeleteStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ColumnDefault
_TEXT	SEGMENT
_pValue$100152 = -4					; size = 4
_sqlite3ColumnDefault PROC				; COMDAT
; _v$ = edx
; _pTab$ = eax
; _i$ = ecx
; Line 58005
	push	ecx
; Line 58006
	test	eax, eax
	push	esi
	mov	esi, edx
	je	SHORT $LN23@sqlite3Col
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN23@sqlite3Col
; Line 58009
	mov	edx, DWORD PTR [eax+8]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [edx+ecx*4]
; Line 58010
	movzx	edx, BYTE PTR [eax+18]
	mov	eax, DWORD PTR [eax+4]
	push	edi
	lea	ecx, DWORD PTR _pValue$100152[esp+12]
	push	ecx
	mov	ecx, DWORD PTR [esi]
	push	edx
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+20]
	movzx	edx, BYTE PTR [ecx+121]
	push	edx
	push	eax
	call	_sqlite3ValueFromExpr
; Line 58011
	mov	edi, DWORD PTR _pValue$100152[esp+28]
	add	esp, 16					; 00000010H
	test	edi, edi
	je	SHORT $LN32@sqlite3Col
; Line 58012
	mov	ecx, DWORD PTR [esi+20]
	test	ecx, ecx
	je	SHORT $LN30@sqlite3Col
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN21@sqlite3Col
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN30@sqlite3Col
$LN21@sqlite3Col:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN32@sqlite3Col
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], -8			; fffffff8H
$LN32@sqlite3Col:
	pop	edi
$LN23@sqlite3Col:
	pop	esi
; Line 58017
	pop	ecx
	ret	0
$LN30@sqlite3Col:
; Line 58012
	mov	ecx, edi
	pop	edi
	mov	eax, -8					; fffffff8H
	pop	esi
; Line 58017
	add	esp, 4
; Line 58012
	jmp	_freeP3
_sqlite3ColumnDefault ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_create_module
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zName$ = 12						; size = 4
_pModule$ = 16						; size = 4
_pAux$ = 20						; size = 4
_sqlite3_create_module PROC				; COMDAT
; Line 58866
	mov	eax, DWORD PTR _zName$[esp-4]
	lea	edx, DWORD PTR [eax+1]
$LL41@sqlite3_cr:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL41@sqlite3_cr
	push	ebx
; Line 58867
	mov	ebx, DWORD PTR _db$[esp]
	sub	eax, edx
	push	ebp
	mov	ebp, eax
	lea	eax, DWORD PTR [ebp+13]
	test	eax, eax
	jle	$LN42@sqlite3_cr
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	push	edi
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN8@sqlite3_cr
	test	edi, edi
	jg	SHORT $LN45@sqlite3_cr
$LN8@sqlite3_cr:
	push	esi
	push	eax
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN40@sqlite3_cr
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN18@sqlite3_cr
	test	edi, edi
	jg	SHORT $LN46@sqlite3_cr
$LN18@sqlite3_cr:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
; Line 58868
	jmp	SHORT $LN46@sqlite3_cr
$LN40@sqlite3_cr:
; Line 58870
	mov	ecx, DWORD PTR _zName$[esp+12]
	lea	eax, DWORD PTR [ebp+1]
	push	eax
	push	ecx
	lea	edi, DWORD PTR [esi+12]
	push	edi
	call	_memcpy
; Line 58873
	mov	eax, DWORD PTR _pAux$[esp+24]
	mov	edx, DWORD PTR _pModule$[esp+24]
; Line 58874
	push	esi
	mov	DWORD PTR [esi+8], eax
	push	ebp
	push	edi
	lea	eax, DWORD PTR [ebx+180]
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi], edx
	call	_sqlite3HashInsert
	add	esp, 24					; 00000018H
; Line 58875
	test	eax, eax
	je	SHORT $LN29@sqlite3_cr
	push	eax
	call	_free
	add	esp, 4
$LN29@sqlite3_cr:
; Line 58876
	push	0
	call	_sqlite3ResetInternalSchema
	add	esp, 4
$LN46@sqlite3_cr:
	pop	esi
$LN45@sqlite3_cr:
	pop	edi
$LN42@sqlite3_cr:
; Line 58878
	xor	ecx, ecx
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ecx
	je	SHORT $LN31@sqlite3_cr
	cmp	DWORD PTR _inMutex, ecx
	jle	SHORT $LN31@sqlite3_cr
	sub	DWORD PTR _inMutex, 1
	push	ecx
	push	7
	mov	eax, ebx
	mov	DWORD PTR _sqlite3_mallocHasFailed, ecx
	call	_sqlite3Error
	add	esp, 8
	mov	ecx, 7
$LN31@sqlite3_cr:
	test	ebx, ebx
	je	SHORT $LN34@sqlite3_cr
	mov	eax, DWORD PTR [ebx+16]
	pop	ebp
	and	eax, ecx
	pop	ebx
; Line 58879
	ret	0
; Line 58878
$LN34@sqlite3_cr:
	mov	eax, 255				; 000000ffH
	pop	ebp
	and	eax, ecx
	pop	ebx
; Line 58879
	ret	0
_sqlite3_create_module ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _findTerm
_TEXT	SEGMENT
_k$ = -4						; size = 4
_pWC$ = 8						; size = 4
_iCur$ = 12						; size = 4
_iColumn$ = 16						; size = 4
_notReady$ = 20						; size = 8
_op$ = 28						; size = 2
_pIdx$ = 32						; size = 4
_findTerm PROC						; COMDAT
; Line 59992
	push	ecx
	push	ebx
; Line 59995
	mov	ebx, DWORD PTR _pWC$[esp+4]
	mov	eax, DWORD PTR [ebx+8]
	test	eax, eax
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR [ebx+16]
	mov	DWORD PTR _k$[esp+20], eax
	jne	SHORT $LN11@findTerm
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 60029
	pop	ecx
	ret	0
	npad	3
$LL29@findTerm:
; Line 59995
	mov	ebx, DWORD PTR _pWC$[esp+16]
$LN11@findTerm:
; Line 60000
	movsx	eax, WORD PTR [edi+6]
	mov	esi, DWORD PTR _iCur$[esp+16]
	cmp	eax, esi
	jne	$LN10@findTerm
	mov	eax, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [edi+28]
	and	eax, DWORD PTR _notReady$[esp+16]
	and	ecx, DWORD PTR _notReady$[esp+20]
	or	eax, ecx
	jne	$LN10@findTerm
	movsx	ecx, WORD PTR [edi+8]
	mov	eax, DWORD PTR _iColumn$[esp+16]
	cmp	ecx, eax
	jne	$LN10@findTerm
	movzx	edx, WORD PTR [edi+10]
	mov	ecx, edx
	and	ecx, DWORD PTR _op$[esp+16]
	test	cx, cx
	je	$LN10@findTerm
; Line 60001
	test	esi, esi
	jl	$LN1@findTerm
	mov	ecx, DWORD PTR _pIdx$[esp+16]
	test	ecx, ecx
	je	$LN1@findTerm
	cmp	dx, 128					; 00000080H
	je	$LN1@findTerm
; Line 60008
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR [edx+8]
	mov	esi, DWORD PTR [edi]
	mov	ebp, DWORD PTR [ebx]
	lea	eax, DWORD PTR [eax+eax*4]
	mov	bl, BYTE PTR [ecx+eax*4+18]
; Line 60009
	call	_comparisonAffinity
	movsx	eax, al
	sub	eax, 97					; 00000061H
	je	SHORT $LN15@findTerm
	sub	eax, 1
	je	SHORT $LN25@findTerm
	xor	eax, eax
	cmp	bl, 99					; 00000063H
	setge	al
	jmp	SHORT $LN17@findTerm
$LN15@findTerm:
	xor	eax, eax
	cmp	bl, 97					; 00000061H
	sete	al
$LN17@findTerm:
	test	eax, eax
	je	SHORT $LN10@findTerm
$LN25@findTerm:
; Line 60016
	mov	edx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+8]
	push	edx
	push	eax
	push	ebp
	call	_sqlite3BinaryCompareCollSeq
	add	esp, 12					; 0000000cH
; Line 60017
	test	eax, eax
	jne	SHORT $LN5@findTerm
; Line 60018
	mov	ecx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [ecx+28]
$LN5@findTerm:
; Line 60021
	mov	ebx, DWORD PTR _pIdx$[esp+16]
	mov	esi, DWORD PTR [ebx+4]
	xor	ecx, ecx
	test	esi, esi
	jle	SHORT $LN2@findTerm
	mov	edx, DWORD PTR [ebx+8]
$LL4@findTerm:
	mov	ebp, DWORD PTR _iColumn$[esp+16]
	cmp	DWORD PTR [edx], ebp
	je	SHORT $LN2@findTerm
	add	ecx, 1
	add	edx, 4
	cmp	ecx, esi
	jl	SHORT $LL4@findTerm
$LN2@findTerm:
; Line 60023
	mov	edx, DWORD PTR [ebx+44]
	mov	edx, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR [eax]
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN1@findTerm
$LN10@findTerm:
; Line 59995
	mov	eax, DWORD PTR _k$[esp+20]
	sub	eax, 1
	add	edi, 40					; 00000028H
	test	eax, eax
	mov	DWORD PTR _k$[esp+20], eax
	jne	$LL29@findTerm
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 60029
	pop	ecx
	ret	0
$LN1@findTerm:
; Line 60025
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 60029
	pop	ecx
	ret	0
_findTerm ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _exprAnalyze
_TEXT	SEGMENT
_pExpr$ = -464						; size = 4
tv2192 = -460						; size = 4
tv1327 = -460						; size = 4
_pNewExpr2$101148 = -460				; size = 4
_pNewExpr1$101147 = -460				; size = 4
_nPattern$ = -460					; size = 4
_i$101107 = -460					; size = 4
_pList$101093 = -460					; size = 4
_idxNew1$101149 = -456					; size = 4
_ok$101106 = -456					; size = 4
_i$101094 = -456					; size = 4
_op$ = -456						; size = 4
tv2463 = -452						; size = 4
tv2190 = -452						; size = 4
_pNewExpr$101164 = -452					; size = 4
_pLeft$101143 = -452					; size = 4
tv1052 = -448						; size = 4
_pOld$126772 = -448					; size = 4
_pLeft$101159 = -448					; size = 4
_pStr2$101146 = -448					; size = 4
_iColumn$101109 = -448					; size = 4
_prereqAll$ = -448					; size = 8
_prereqExpr$101162 = -440				; size = 8
_isComplete$ = -440					; size = 4
_iCursor$101110 = -440					; size = 4
_prereqLeft$ = -440					; size = 8
tv1280 = -432						; size = 4
_pMaskSet$ = -428					; size = 4
_sOr$101111 = -424					; size = 424
_pSrc$ = 8						; size = 4
_pWC$ = 12						; size = 4
_idxTerm$ = 16						; size = 4
_exprAnalyze PROC					; COMDAT
; Line 60252
	sub	esp, 464				; 000001d0H
; Line 60253
	mov	eax, DWORD PTR _idxTerm$[esp+460]
	lea	eax, DWORD PTR [eax+eax*4]
	push	ebx
	add	eax, eax
	push	ebp
	mov	ebp, DWORD PTR _pWC$[esp+468]
; Line 60254
	mov	ebx, DWORD PTR [ebp+4]
	add	eax, eax
	add	eax, eax
	push	edi
	mov	edi, DWORD PTR [ebp+16]
	add	edi, eax
; Line 60262
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	DWORD PTR tv1280[esp+476], eax
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR _pMaskSet$[esp+476], ebx
	mov	DWORD PTR _pExpr$[esp+476], eax
	je	SHORT $LN45@exprAnalyz
	cmp	DWORD PTR _inMutex, 0
	jg	$LN1@exprAnalyz
$LN45@exprAnalyz:
	push	esi
; Line 60263
	mov	esi, eax
	mov	ecx, DWORD PTR [esi+8]
	push	ecx
	push	ebx
	call	_exprTableUsage
; Line 60264
	movzx	esi, BYTE PTR [esi]
	add	esp, 8
; Line 60265
	cmp	esi, 64					; 00000040H
	mov	DWORD PTR _prereqLeft$[esp+480], eax
	mov	DWORD PTR _prereqLeft$[esp+484], edx
	mov	DWORD PTR _op$[esp+480], esi
	jne	SHORT $LN44@exprAnalyz
; Line 60268
	mov	esi, DWORD PTR _pExpr$[esp+480]
	mov	edx, DWORD PTR [esi+56]
	push	edx
	push	ebx
	call	_exprSelectTableUsage
	mov	esi, DWORD PTR [esi+16]
	mov	ecx, edx
	push	ebx
	mov	DWORD PTR tv2192[esp+492], eax
	mov	DWORD PTR tv2190[esp+492], ecx
	call	_exprListTableUsage
	mov	ecx, DWORD PTR tv2192[esp+492]
	mov	esi, DWORD PTR _op$[esp+492]
	or	ecx, eax
	mov	eax, DWORD PTR tv2190[esp+492]
	add	esp, 12					; 0000000cH
	or	eax, edx
	mov	DWORD PTR [edi+24], ecx
	mov	DWORD PTR [edi+28], eax
	jmp	SHORT $LN41@exprAnalyz
$LN44@exprAnalyz:
; Line 60269
	cmp	esi, 65					; 00000041H
	jne	SHORT $LN42@exprAnalyz
; Line 60270
	xor	eax, eax
	mov	DWORD PTR [edi+28], eax
; Line 60271
	jmp	SHORT $LN440@exprAnalyz
$LN42@exprAnalyz:
; Line 60272
	mov	eax, DWORD PTR _pExpr$[esp+480]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	ebx
	call	_exprTableUsage
	add	esp, 8
	mov	DWORD PTR [edi+28], edx
$LN440@exprAnalyz:
	mov	DWORD PTR [edi+24], eax
$LN41@exprAnalyz:
; Line 60274
	mov	edx, DWORD PTR _pExpr$[esp+480]
	push	edx
	push	ebx
	call	_exprTableUsage
	mov	DWORD PTR _prereqAll$[esp+488], eax
; Line 60275
	mov	eax, DWORD PTR _pExpr$[esp+488]
	add	esp, 8
	test	BYTE PTR [eax+2], 1
	mov	DWORD PTR _prereqAll$[esp+484], edx
	je	SHORT $LN430@exprAnalyz
; Line 60276
	mov	edx, DWORD PTR [ebx]
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN429@exprAnalyz
	mov	eax, DWORD PTR [eax+52]
	mov	DWORD PTR tv1327[esp+480], eax
	lea	eax, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR tv1327[esp+480]
$LL53@exprAnalyz:
	cmp	DWORD PTR [eax], ebx
	je	$LN387@exprAnalyz
	add	ecx, 1
	add	eax, 4
	cmp	ecx, edx
	jl	SHORT $LL53@exprAnalyz
$LN429@exprAnalyz:
	xor	eax, eax
	xor	edx, edx
$LN54@exprAnalyz:
	or	DWORD PTR _prereqAll$[esp+480], eax
	or	DWORD PTR _prereqAll$[esp+484], edx
$LN430@exprAnalyz:
; Line 60278
	mov	ecx, DWORD PTR _prereqAll$[esp+480]
	mov	edx, DWORD PTR _prereqAll$[esp+484]
; Line 60279
	or	eax, -1
; Line 60282
	cmp	esi, 64					; 00000040H
	mov	DWORD PTR [edi+32], ecx
	mov	DWORD PTR [edi+36], edx
	mov	WORD PTR [edi+6], ax
	mov	WORD PTR [edi+4], ax
	mov	WORD PTR [edi+10], 0
	je	SHORT $LN438@exprAnalyz
	cmp	esi, 68					; 00000044H
	jl	SHORT $LN58@exprAnalyz
	cmp	esi, 72					; 00000048H
	jle	SHORT $LN438@exprAnalyz
$LN58@exprAnalyz:
	cmp	esi, 65					; 00000041H
	jne	$LN39@exprAnalyz
$LN438@exprAnalyz:
	mov	eax, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [edi+28]
	and	eax, DWORD PTR _prereqLeft$[esp+480]
	and	ecx, DWORD PTR _prereqLeft$[esp+484]
	or	eax, ecx
	jne	$LN39@exprAnalyz
; Line 60283
	mov	ecx, DWORD PTR _pExpr$[esp+480]
	mov	eax, DWORD PTR [ecx+8]
; Line 60285
	cmp	BYTE PTR [eax], 149			; 00000095H
	mov	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN416@exprAnalyz
; Line 60288
	cmp	esi, 64					; 00000040H
	mov	cx, WORD PTR [eax+36]
	mov	WORD PTR [edi+6], cx
	mov	ax, WORD PTR [eax+40]
	mov	WORD PTR [edi+8], ax
	jne	SHORT $LN64@exprAnalyz
	lea	eax, DWORD PTR [esi-63]
	jmp	SHORT $LN61@exprAnalyz
$LN387@exprAnalyz:
; Line 60276
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	jmp	$LN54@exprAnalyz
; Line 60288
$LN64@exprAnalyz:
	cmp	esi, 65					; 00000041H
	jne	SHORT $LN62@exprAnalyz
	lea	eax, DWORD PTR [esi+63]
	jmp	SHORT $LN61@exprAnalyz
$LN62@exprAnalyz:
	lea	ecx, DWORD PTR [esi-68]
	mov	eax, 2
	shl	eax, cl
$LN61@exprAnalyz:
	mov	WORD PTR [edi+10], ax
$LN416@exprAnalyz:
; Line 60290
	test	edx, edx
	je	$LN425@exprAnalyz
	cmp	BYTE PTR [edx], 149			; 00000095H
	jne	$LN425@exprAnalyz
; Line 60293
	cmp	WORD PTR [edi+6], 0
	jl	SHORT $LN36@exprAnalyz
; Line 60295
	mov	ecx, DWORD PTR _pExpr$[esp+480]
	push	ecx
	call	_sqlite3ExprDup
	add	esp, 4
; Line 60296
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ebx, eax
	je	SHORT $LN35@exprAnalyz
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN35@exprAnalyz
; Line 60297
	push	ebx
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
; Line 60492
	add	esp, 464				; 000001d0H
	ret	0
$LN35@exprAnalyz:
; Line 60300
	push	3
	push	ebx
	mov	esi, ebp
	call	_whereClauseInsert
	add	esp, 8
; Line 60301
	test	eax, eax
	je	$LN439@exprAnalyz
; Line 60303
	mov	cx, WORD PTR _idxTerm$[esp+476]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ebp+16]
	lea	edi, DWORD PTR [eax+edx*8]
	mov	WORD PTR [edi+4], cx
; Line 60304
	mov	eax, DWORD PTR [ebp+16]
	add	eax, DWORD PTR tv1280[esp+480]
; Line 60306
	or	BYTE PTR [eax+12], 8
	mov	BYTE PTR [eax+13], 1
; Line 60307
	jmp	SHORT $LN33@exprAnalyz
$LN36@exprAnalyz:
; Line 60308
	mov	ebx, DWORD PTR _pExpr$[esp+480]
$LN33@exprAnalyz:
; Line 60311
	mov	eax, ebx
	call	_exprCommute
; Line 60312
	mov	eax, DWORD PTR [ebx+8]
; Line 60313
	mov	dx, WORD PTR [eax+36]
; Line 60315
	mov	ecx, DWORD PTR _prereqLeft$[esp+480]
	mov	WORD PTR [edi+6], dx
	mov	ax, WORD PTR [eax+40]
	mov	edx, DWORD PTR _prereqLeft$[esp+484]
	mov	WORD PTR [edi+8], ax
; Line 60316
	mov	eax, DWORD PTR _prereqAll$[esp+480]
	mov	DWORD PTR [edi+24], ecx
	mov	ecx, DWORD PTR _prereqAll$[esp+484]
	mov	DWORD PTR [edi+32], eax
	mov	DWORD PTR [edi+36], ecx
	mov	DWORD PTR [edi+28], edx
; Line 60317
	movzx	eax, BYTE PTR [ebx]
	call	_operatorMask
	mov	WORD PTR [edi+10], ax
; Line 60318
	jmp	$LN425@exprAnalyz
$LN39@exprAnalyz:
; Line 60325
	mov	edx, DWORD PTR _pExpr$[esp+480]
	mov	al, BYTE PTR [edx]
	cmp	al, 63					; 0000003fH
	jne	$LN31@exprAnalyz
; Line 60326
	mov	eax, edx
	mov	ecx, DWORD PTR [eax+16]
; Line 60331
	xor	ebx, ebx
	mov	DWORD PTR _pList$101093[esp+480], ecx
	mov	DWORD PTR _i$101094[esp+480], ebx
$LL30@exprAnalyz:
; Line 60335
	mov	edx, DWORD PTR _pList$101093[esp+480]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ebx+eax]
	push	ecx
	call	_sqlite3ExprDup
	mov	edx, DWORD PTR _pExpr$[esp+484]
	mov	edi, eax
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_sqlite3ExprDup
	mov	ecx, DWORD PTR _i$101094[esp+488]
	movzx	edx, BYTE PTR ?ops@?N@??exprAnalyze@@9@9[ecx]
	push	eax
	push	edx
	xor	eax, eax
	call	_sqlite3Expr
; Line 60336
	push	3
	push	eax
	mov	esi, ebp
	call	_whereClauseInsert
	mov	esi, eax
; Line 60337
	mov	eax, DWORD PTR _pSrc$[esp+500]
	push	esi
	push	ebp
	push	eax
	call	_exprAnalyze
; Line 60338
	mov	eax, DWORD PTR [ebp+16]
; Line 60339
	mov	dx, WORD PTR _idxTerm$[esp+512]
	add	DWORD PTR _i$101094[esp+516], 1
	add	ebx, 12					; 0000000cH
	add	esp, 36					; 00000024H
	cmp	ebx, 24					; 00000018H
	lea	ecx, DWORD PTR [esi+esi*4]
	mov	WORD PTR [eax+ecx*8+4], dx
	jl	SHORT $LL30@exprAnalyz
; Line 60341
	mov	ecx, DWORD PTR tv1280[esp+480]
	mov	BYTE PTR [eax+ecx+13], 2
	jmp	$LN425@exprAnalyz
$LN31@exprAnalyz:
; Line 60358
	cmp	al, 60					; 0000003cH
	jne	$LN425@exprAnalyz
; Line 60366
	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR _pMaskSet$[esp+480]
	mov	DWORD PTR _sOr$101111[esp+480], edx
; Line 60367
	mov	edx, DWORD PTR _pExpr$[esp+480]
	push	60					; 0000003cH
	mov	DWORD PTR _sOr$101111[esp+488], eax
	push	edx
	lea	eax, DWORD PTR _sOr$101111[esp+488]
	lea	ecx, DWORD PTR _sOr$101111[esp+512]
	push	eax
	mov	DWORD PTR _sOr$101111[esp+500], 0
	mov	DWORD PTR _sOr$101111[esp+504], 10	; 0000000aH
	mov	DWORD PTR _sOr$101111[esp+508], ecx
	call	_whereSplit
; Line 60368
	mov	esi, DWORD PTR _sOr$101111[esp+500]
	add	esp, 12					; 0000000cH
	add	esi, -1
	js	SHORT $LN71@exprAnalyz
	mov	edi, DWORD PTR _pSrc$[esp+476]
$LL73@exprAnalyz:
	push	esi
	lea	ecx, DWORD PTR _sOr$101111[esp+484]
	push	ecx
	push	edi
	call	_exprAnalyze
	add	esp, 12					; 0000000cH
	sub	esi, 1
	jns	SHORT $LL73@exprAnalyz
$LN71@exprAnalyz:
; Line 60370
	mov	edx, DWORD PTR _sOr$101111[esp+496]
	xor	eax, eax
	mov	DWORD PTR tv2463[esp+480], eax
$LL25@exprAnalyz:
; Line 60373
	movsx	ecx, WORD PTR [eax+edx+8]
; Line 60374
	movsx	edi, WORD PTR [eax+edx+6]
	mov	DWORD PTR _iColumn$101109[esp+480], ecx
; Line 60375
	xor	ecx, ecx
	test	edi, edi
	setge	cl
	mov	DWORD PTR _iCursor$101110[esp+480], edi
	mov	DWORD PTR _ok$101106[esp+480], ecx
; Line 60376
	mov	ecx, DWORD PTR _sOr$101111[esp+488]
	add	ecx, -1
	mov	DWORD PTR _i$101107[esp+480], ecx
	js	$LN24@exprAnalyz
; Line 60373
	lea	esi, DWORD PTR [edx+12]
	jmp	SHORT $LN22@exprAnalyz
	npad	11
$LL437@exprAnalyz:
	mov	edi, DWORD PTR _iCursor$101110[esp+480]
$LN22@exprAnalyz:
; Line 60376
	cmp	DWORD PTR _ok$101106[esp+480], 0
	je	$LN414@exprAnalyz
; Line 60377
	cmp	WORD PTR [esi-2], 2
	jne	$or_not_possible$101123
; Line 60380
	movsx	eax, WORD PTR [esi-6]
	cmp	eax, edi
	jne	SHORT $LN18@exprAnalyz
	movsx	ecx, WORD PTR [esi-4]
	cmp	ecx, DWORD PTR _iColumn$101109[esp+480]
	jne	SHORT $LN18@exprAnalyz
	mov	ebx, DWORD PTR [esi-12]
	mov	eax, DWORD PTR [ebx+12]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN83@exprAnalyz
	mov	edx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx]
	call	_sqlite3ExprAffinity
	jmp	SHORT $LN84@exprAnalyz
$LN83@exprAnalyz:
	cmp	ecx, 31					; 0000001fH
	jne	SHORT $LN82@exprAnalyz
	lea	edx, DWORD PTR [eax+20]
	call	_sqlite3AffinityType
	jmp	SHORT $LN84@exprAnalyz
$LN82@exprAnalyz:
	mov	al, BYTE PTR [eax+1]
$LN84@exprAnalyz:
	movsx	edi, al
	test	edi, edi
	je	SHORT $LN400@exprAnalyz
	mov	eax, DWORD PTR [ebx+8]
	call	_sqlite3ExprAffinity
	movsx	edx, al
	cmp	edi, edx
	jne	SHORT $LN420@exprAnalyz
$LN400@exprAnalyz:
; Line 60381
	or	BYTE PTR [esi], 16			; 00000010H
	mov	edx, DWORD PTR _sOr$101111[esp+496]
	jmp	SHORT $LN21@exprAnalyz
$LN420@exprAnalyz:
	mov	edx, DWORD PTR _sOr$101111[esp+496]
$LN18@exprAnalyz:
; Line 60382
	mov	al, BYTE PTR [esi]
	test	al, 8
	jne	SHORT $LN401@exprAnalyz
	test	al, 2
	je	SHORT $LN16@exprAnalyz
	movsx	ecx, WORD PTR [esi-8]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	test	BYTE PTR [edx+ecx*8+12], 16		; 00000010H
	je	SHORT $LN16@exprAnalyz
$LN401@exprAnalyz:
; Line 60383
	and	al, 239					; 000000efH
	mov	BYTE PTR [esi], al
; Line 60384
	mov	edx, DWORD PTR _sOr$101111[esp+496]
	jmp	SHORT $LN21@exprAnalyz
$LN16@exprAnalyz:
; Line 60385
	mov	DWORD PTR _ok$101106[esp+480], 0
$LN21@exprAnalyz:
; Line 60376
	mov	eax, DWORD PTR _i$101107[esp+480]
	sub	eax, 1
	add	esi, 40					; 00000028H
	mov	DWORD PTR _i$101107[esp+480], eax
	test	eax, eax
	mov	eax, DWORD PTR tv2463[esp+480]
	jge	$LL437@exprAnalyz
$LN24@exprAnalyz:
; Line 60388
	cmp	DWORD PTR _ok$101106[esp+480], 0
	jne	SHORT $LN419@exprAnalyz
$LN414@exprAnalyz:
	mov	cl, BYTE PTR [eax+edx+12]
	and	cl, 8
	add	eax, 40					; 00000028H
	test	cl, cl
	mov	DWORD PTR tv2463[esp+480], eax
	je	SHORT $LN14@exprAnalyz
	cmp	eax, 80					; 00000050H
	jl	$LL25@exprAnalyz
$LN14@exprAnalyz:
; Line 60389
	cmp	DWORD PTR _ok$101106[esp+480], 0
	je	$or_not_possible$101123
$LN419@exprAnalyz:
; Line 60393
	mov	ebx, DWORD PTR _sOr$101111[esp+488]
	xor	edi, edi
	xor	eax, eax
	add	ebx, -1
	mov	esi, edx
	js	SHORT $LN422@exprAnalyz
$LL12@exprAnalyz:
	cmp	DWORD PTR _ok$101106[esp+480], 0
	je	SHORT $LN422@exprAnalyz
; Line 60394
	test	BYTE PTR [esi+12], 16			; 00000010H
	je	SHORT $LN11@exprAnalyz
; Line 60395
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_sqlite3ExprDup
; Line 60396
	push	0
	push	eax
	mov	eax, edi
	call	_sqlite3ExprListAppend
; Line 60397
	mov	ecx, DWORD PTR [esi]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx+8]
	add	esp, 12					; 0000000cH
$LN11@exprAnalyz:
	sub	ebx, 1
	add	esi, 40					; 00000028H
	test	ebx, ebx
	jge	SHORT $LL12@exprAnalyz
$LN422@exprAnalyz:
; Line 60400
	push	eax
	call	_sqlite3ExprDup
	add	esp, 4
; Line 60401
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ebx, eax
	je	SHORT $LN106@exprAnalyz
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN404@exprAnalyz
$LN106@exprAnalyz:
	push	72					; 00000048H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN405@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN427@exprAnalyz
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN99@exprAnalyz
$LN427@exprAnalyz:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN99@exprAnalyz
$LN405@exprAnalyz:
	push	72					; 00000048H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN99@exprAnalyz:
	test	esi, esi
	jne	$LN96@exprAnalyz
$LN404@exprAnalyz:
	push	ebx
	call	_sqlite3ExprDelete
	push	0
	call	_sqlite3ExprDelete
	add	esp, 8
; Line 60412
	mov	ebx, edi
	call	_sqlite3ExprListDelete
$LN441@exprAnalyz:
	mov	edx, DWORD PTR _sOr$101111[esp+496]
$or_not_possible$101123:
; Line 60416
	mov	esi, DWORD PTR _sOr$101111[esp+488]
	add	esi, -1
	mov	edi, edx
	js	SHORT $LN424@exprAnalyz
$LL174@exprAnalyz:
	test	BYTE PTR [edi+12], 1
	je	SHORT $LN173@exprAnalyz
	mov	edx, DWORD PTR [edi]
	push	edx
	call	_sqlite3ExprDelete
	add	esp, 4
$LN173@exprAnalyz:
	sub	esi, 1
	add	edi, 40					; 00000028H
	test	esi, esi
	jge	SHORT $LL174@exprAnalyz
	mov	edx, DWORD PTR _sOr$101111[esp+496]
$LN424@exprAnalyz:
	lea	eax, DWORD PTR _sOr$101111[esp+504]
	cmp	edx, eax
	je	SHORT $LN425@exprAnalyz
	test	edx, edx
	je	SHORT $LN425@exprAnalyz
	push	edx
	call	_free
	add	esp, 4
$LN425@exprAnalyz:
; Line 60424
	mov	eax, DWORD PTR _pExpr$[esp+480]
	lea	ecx, DWORD PTR _isComplete$[esp+480]
	push	ecx
	mov	ecx, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [ecx]
	lea	edx, DWORD PTR _nPattern$[esp+484]
	push	edx
	call	_isLikeOrGlob
	add	esp, 8
	test	eax, eax
	je	$LN3@exprAnalyz
; Line 60432
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	edx, DWORD PTR _pExpr$[esp+480]
	mov	eax, DWORD PTR [edx+16]
	mov	eax, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR [eax+12]
	mov	edi, DWORD PTR [eax]
	mov	ebx, DWORD PTR _inMutex
	mov	DWORD PTR _pLeft$101143[esp+480], ecx
	je	SHORT $LN198@exprAnalyz
	test	ebx, ebx
	jg	$LN432@exprAnalyz
$LN198@exprAnalyz:
	push	72					; 00000048H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	$LN408@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN208@exprAnalyz
	test	ebx, ebx
	jg	$LN431@exprAnalyz
$LN208@exprAnalyz:
	add	ebx, 1
	mov	DWORD PTR _inMutex, ebx
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	$LN431@exprAnalyz
; Line 60401
$LN96@exprAnalyz:
	test	ebx, ebx
	mov	BYTE PTR [esi], 64			; 00000040H
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+48], -1
	je	SHORT $LN90@exprAnalyz
	mov	eax, 256				; 00000100H
	test	WORD PTR [ebx+2], ax
	je	SHORT $LN90@exprAnalyz
	or	WORD PTR [esi+2], ax
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR [esi+4], edx
$LN90@exprAnalyz:
	mov	ebx, esi
	call	_sqlite3ExprSetHeight
; Line 60404
	mov	eax, DWORD PTR _pExpr$[esp+480]
	movzx	ecx, BYTE PTR [eax+2]
	and	ecx, 1
	or	WORD PTR [esi+2], cx
	mov	edx, DWORD PTR [eax+52]
	mov	DWORD PTR [esi+52], edx
; Line 60405
	mov	DWORD PTR [esi+16], edi
; Line 60406
	mov	ebx, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+8], ebx
	jl	$LN137@exprAnalyz
	mov	eax, DWORD PTR [ebp+16]
	lea	ebx, DWORD PTR [ebx+ebx*4]
	shl	ebx, 4
	xor	edi, edi
	test	ebx, ebx
	mov	DWORD PTR _pOld$126772[esp+480], eax
	jle	SHORT $LN140@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN147@exprAnalyz
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN140@exprAnalyz
$LN147@exprAnalyz:
	push	ebx
	call	_malloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN406@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN426@exprAnalyz
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN140@exprAnalyz
$LN426@exprAnalyz:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN140@exprAnalyz
$LN406@exprAnalyz:
	push	ebx
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
$LN140@exprAnalyz:
	test	edi, edi
	mov	DWORD PTR [ebp+16], edi
	jne	SHORT $LN136@exprAnalyz
	push	esi
	call	_sqlite3ExprDelete
	add	esp, 4
	xor	esi, esi
	jmp	SHORT $LN138@exprAnalyz
$LN136@exprAnalyz:
	mov	eax, DWORD PTR [ebp+8]
	mov	ebx, DWORD PTR _pOld$126772[esp+480]
	lea	ecx, DWORD PTR [eax+eax*4]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	ebx
	push	edi
	call	_memcpy
	lea	edx, DWORD PTR [ebp+24]
	add	esp, 12					; 0000000cH
	cmp	ebx, edx
	je	SHORT $LN168@exprAnalyz
	test	ebx, ebx
	je	SHORT $LN168@exprAnalyz
	push	ebx
	call	_free
	add	esp, 4
$LN168@exprAnalyz:
	mov	eax, DWORD PTR [ebp+12]
	add	eax, eax
	mov	DWORD PTR [ebp+12], eax
$LN137@exprAnalyz:
	mov	eax, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp+16]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ebp+8], edx
	mov	DWORD PTR [ecx], esi
	mov	BYTE PTR [ecx+12], 3
	mov	DWORD PTR [ecx+16], ebp
	mov	WORD PTR [ecx+4], -1
	mov	esi, eax
$LN138@exprAnalyz:
; Line 60407
	mov	eax, DWORD PTR _pSrc$[esp+476]
	push	esi
	push	ebp
	push	eax
	call	_exprAnalyze
; Line 60408
	mov	eax, DWORD PTR [ebp+16]
; Line 60409
	mov	dx, WORD PTR _idxTerm$[esp+488]
	lea	ecx, DWORD PTR [esi+esi*4]
	mov	WORD PTR [eax+ecx*8+4], dx
; Line 60410
	mov	ecx, DWORD PTR tv1280[esp+492]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [eax+ecx+13], 1
; Line 60411
	jmp	$LN441@exprAnalyz
$LN408@exprAnalyz:
; Line 60432
	push	72					; 00000048H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN431@exprAnalyz:
	test	esi, esi
	jne	SHORT $LN188@exprAnalyz
$LN432@exprAnalyz:
	push	0
	call	_sqlite3ExprDelete
	push	0
	call	_sqlite3ExprDelete
	add	esp, 8
	xor	esi, esi
	jmp	SHORT $LN5@exprAnalyz
$LN188@exprAnalyz:
	xor	eax, eax
	mov	ebx, esi
	mov	BYTE PTR [esi], 88			; 00000058H
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+48], -1
	call	_sqlite3ExprSetHeight
; Line 60434
	lea	edx, DWORD PTR [esi+20]
	lea	eax, DWORD PTR [edi+20]
	push	edx
	call	_sqlite3TokenCopy
; Line 60435
	mov	eax, DWORD PTR [esi+24]
	mov	ecx, DWORD PTR _nPattern$[esp+484]
	and	eax, 1
	lea	edx, DWORD PTR [ecx+ecx]
	add	esp, 4
	or	eax, edx
	mov	DWORD PTR [esi+24], eax
; Line 60436
	mov	WORD PTR [esi+2], 64			; 00000040H
$LN5@exprAnalyz:
; Line 60438
	push	esi
	call	_sqlite3ExprDup
	add	esp, 4
; Line 60439
	test	eax, eax
	mov	DWORD PTR _pStr2$101146[esp+480], eax
	je	SHORT $LN4@exprAnalyz
; Line 60441
	mov	eax, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _nPattern$[esp+480]
	add	BYTE PTR [eax+ecx-1], 1
	lea	eax, DWORD PTR [eax+ecx-1]
$LN4@exprAnalyz:
; Line 60443
	mov	edx, DWORD PTR _pLeft$101143[esp+480]
	push	edx
	call	_sqlite3ExprDup
	push	eax
	push	72					; 00000048H
	xor	eax, eax
	mov	edi, esi
	call	_sqlite3Expr
; Line 60444
	mov	esi, DWORD PTR [ebp+12]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [ebp+8], esi
	mov	DWORD PTR _pNewExpr1$101147[esp+480], eax
	jl	$LN227@exprAnalyz
	mov	ebx, DWORD PTR [ebp+16]
	lea	esi, DWORD PTR [esi+esi*4]
	shl	esi, 4
	xor	edi, edi
	test	esi, esi
	jle	SHORT $LN230@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN237@exprAnalyz
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN230@exprAnalyz
$LN237@exprAnalyz:
	push	esi
	call	_malloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN409@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN434@exprAnalyz
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN230@exprAnalyz
$LN434@exprAnalyz:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN230@exprAnalyz
$LN409@exprAnalyz:
	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
$LN230@exprAnalyz:
	test	edi, edi
	mov	DWORD PTR [ebp+16], edi
	jne	SHORT $LN226@exprAnalyz
	mov	eax, DWORD PTR _pNewExpr1$101147[esp+480]
	push	eax
	call	_sqlite3ExprDelete
	add	esp, 4
	xor	eax, eax
	jmp	SHORT $LN442@exprAnalyz
$LN226@exprAnalyz:
	mov	eax, DWORD PTR [ebp+8]
	lea	ecx, DWORD PTR [eax+eax*4]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	push	ebx
	push	edi
	call	_memcpy
	lea	edx, DWORD PTR [ebp+24]
	add	esp, 12					; 0000000cH
	cmp	ebx, edx
	je	SHORT $LN258@exprAnalyz
	test	ebx, ebx
	je	SHORT $LN258@exprAnalyz
	push	ebx
	call	_free
	add	esp, 4
$LN258@exprAnalyz:
	mov	eax, DWORD PTR [ebp+12]
	add	eax, eax
	mov	DWORD PTR [ebp+12], eax
$LN227@exprAnalyz:
	mov	eax, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp+16]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ebp+8], edx
	mov	edx, DWORD PTR _pNewExpr1$101147[esp+480]
	mov	DWORD PTR [ecx], edx
	mov	BYTE PTR [ecx+12], 3
	mov	DWORD PTR [ecx+16], ebp
	mov	WORD PTR [ecx+4], -1
$LN442@exprAnalyz:
; Line 60445
	push	eax
	mov	DWORD PTR _idxNew1$101149[esp+484], eax
	mov	eax, DWORD PTR _pSrc$[esp+480]
	push	ebp
	push	eax
	call	_exprAnalyze
; Line 60446
	mov	ecx, DWORD PTR _pLeft$101143[esp+492]
	push	ecx
	call	_sqlite3ExprDup
	mov	edi, DWORD PTR _pStr2$101146[esp+496]
	push	eax
	push	71					; 00000047H
	xor	eax, eax
	call	_sqlite3Expr
	mov	DWORD PTR _pNewExpr2$101148[esp+504], eax
; Line 60447
	mov	eax, DWORD PTR [ebp+12]
	add	esp, 24					; 00000018H
	cmp	DWORD PTR [ebp+8], eax
	jl	$LN263@exprAnalyz
	mov	ebx, DWORD PTR [ebp+16]
	lea	esi, DWORD PTR [eax+eax*4]
	shl	esi, 4
	xor	edi, edi
	test	esi, esi
	jle	SHORT $LN266@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN273@exprAnalyz
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN266@exprAnalyz
$LN273@exprAnalyz:
	push	esi
	call	_malloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN410@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN433@exprAnalyz
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN266@exprAnalyz
$LN433@exprAnalyz:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN266@exprAnalyz
$LN410@exprAnalyz:
	push	esi
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
$LN266@exprAnalyz:
	test	edi, edi
	mov	DWORD PTR [ebp+16], edi
	jne	SHORT $LN262@exprAnalyz
	mov	edx, DWORD PTR _pNewExpr2$101148[esp+480]
	push	edx
	call	_sqlite3ExprDelete
	add	esp, 4
	xor	esi, esi
	jmp	SHORT $LN264@exprAnalyz
$LN262@exprAnalyz:
	mov	eax, DWORD PTR [ebp+8]
	lea	eax, DWORD PTR [eax+eax*4]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	push	ebx
	push	edi
	call	_memcpy
	lea	ecx, DWORD PTR [ebp+24]
	add	esp, 12					; 0000000cH
	cmp	ebx, ecx
	je	SHORT $LN294@exprAnalyz
	test	ebx, ebx
	je	SHORT $LN294@exprAnalyz
	push	ebx
	call	_free
	add	esp, 4
$LN294@exprAnalyz:
	mov	edx, DWORD PTR [ebp+12]
	add	edx, edx
	mov	DWORD PTR [ebp+12], edx
$LN263@exprAnalyz:
	mov	eax, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp+16]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [edx+ecx*8]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ebp+8], edx
	mov	edx, DWORD PTR _pNewExpr2$101148[esp+480]
	mov	DWORD PTR [ecx], edx
	mov	BYTE PTR [ecx+12], 3
	mov	DWORD PTR [ecx+16], ebp
	mov	WORD PTR [ecx+4], -1
	mov	esi, eax
$LN264@exprAnalyz:
; Line 60448
	mov	eax, DWORD PTR _pSrc$[esp+476]
	push	esi
	push	ebp
	push	eax
	call	_exprAnalyze
; Line 60449
	mov	eax, DWORD PTR [ebp+16]
	add	esp, 12					; 0000000cH
; Line 60450
	cmp	DWORD PTR _isComplete$[esp+480], 0
	je	SHORT $LN3@exprAnalyz
; Line 60451
	mov	ecx, DWORD PTR _idxNew1$101149[esp+480]
	lea	edx, DWORD PTR [ecx+ecx*4]
	mov	ecx, DWORD PTR _idxTerm$[esp+476]
	mov	WORD PTR [eax+edx*8+4], cx
; Line 60452
	lea	edx, DWORD PTR [esi+esi*4]
	mov	esi, DWORD PTR [ebp+16]
	mov	WORD PTR [esi+edx*8+4], cx
; Line 60453
	mov	ecx, DWORD PTR tv1280[esp+480]
	mov	BYTE PTR [eax+ecx+13], 2
$LN3@exprAnalyz:
; Line 60465
	mov	edi, DWORD PTR _pExpr$[esp+480]
	cmp	BYTE PTR [edi], 148			; 00000094H
	jne	$LN439@exprAnalyz
	mov	edx, DWORD PTR [edi+24]
	and	edx, -2					; fffffffeH
	cmp	edx, 10					; 0000000aH
	jne	$LN439@exprAnalyz
	mov	edx, DWORD PTR [edi+20]
	mov	eax, 5
	mov	esi, OFFSET ??_C@_05FNONLPDI@match?$AA@
	npad	6
$LL304@exprAnalyz:
	mov	cl, BYTE PTR [edx]
	sub	eax, 1
	test	cl, cl
	je	SHORT $LN436@exprAnalyz
	movzx	ebx, BYTE PTR [esi]
	movzx	ecx, cl
	mov	cl, BYTE PTR _sqlite3UpperToLower[ecx]
	cmp	cl, BYTE PTR _sqlite3UpperToLower[ebx]
	jne	SHORT $LN436@exprAnalyz
	add	edx, 1
	add	esi, 1
	test	eax, eax
	jg	SHORT $LL304@exprAnalyz
	sub	eax, 1
$LN436@exprAnalyz:
	test	eax, eax
	jl	SHORT $LN402@exprAnalyz
	movzx	eax, BYTE PTR [esi]
	movzx	edx, BYTE PTR [edx]
	movzx	ecx, BYTE PTR _sqlite3UpperToLower[eax]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[edx]
	sub	eax, ecx
	jne	$LN439@exprAnalyz
$LN402@exprAnalyz:
	mov	eax, DWORD PTR [edi+16]
	cmp	DWORD PTR [eax], 2
	jne	$LN439@exprAnalyz
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+12]
	cmp	BYTE PTR [edx], 149			; 00000095H
	jne	$LN439@exprAnalyz
; Line 60473
	mov	edx, DWORD PTR _pMaskSet$[esp+480]
	mov	eax, edi
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+12]
	mov	esi, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+12]
	push	esi
	push	edx
	mov	DWORD PTR _pLeft$101159[esp+488], edi
	call	_exprTableUsage
	mov	ebx, eax
; Line 60474
	mov	eax, DWORD PTR _pMaskSet$[esp+488]
	push	edi
	push	eax
	mov	DWORD PTR _prereqExpr$101162[esp+496], ebx
	mov	DWORD PTR _prereqExpr$101162[esp+500], edx
	call	_exprTableUsage
; Line 60475
	and	edx, DWORD PTR _prereqExpr$101162[esp+500]
	and	eax, ebx
	add	esp, 16					; 00000010H
	or	eax, edx
	jne	$LN439@exprAnalyz
; Line 60477
	push	esi
	call	_sqlite3ExprDup
	mov	edi, DWORD PTR _inMutex
	add	esp, 4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, eax
	je	SHORT $LN325@exprAnalyz
	test	edi, edi
	jg	SHORT $LN411@exprAnalyz
$LN325@exprAnalyz:
	push	72					; 00000048H
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN412@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN335@exprAnalyz
	test	edi, edi
	jg	SHORT $LN318@exprAnalyz
$LN335@exprAnalyz:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN318@exprAnalyz
$LN412@exprAnalyz:
	push	72					; 00000048H
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN318@exprAnalyz:
	test	ebx, ebx
	jne	SHORT $LN315@exprAnalyz
$LN411@exprAnalyz:
	push	0
	call	_sqlite3ExprDelete
	push	esi
	call	_sqlite3ExprDelete
	add	esp, 8
	mov	DWORD PTR _pNewExpr$101164[esp+480], 0
	jmp	SHORT $LN316@exprAnalyz
$LN315@exprAnalyz:
	mov	BYTE PTR [ebx], 43			; 0000002bH
	mov	DWORD PTR [ebx+8], 0
	mov	DWORD PTR [ebx+12], esi
	mov	DWORD PTR [ebx+48], -1
	call	_sqlite3ExprSetHeight
	mov	DWORD PTR _pNewExpr$101164[esp+480], ebx
$LN316@exprAnalyz:
; Line 60478
	mov	eax, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+8], eax
	jl	$LN346@exprAnalyz
	mov	edi, DWORD PTR [ebp+16]
	lea	esi, DWORD PTR [eax+eax*4]
	shl	esi, 4
	xor	ebx, ebx
	test	esi, esi
	jle	SHORT $LN349@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN356@exprAnalyz
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN349@exprAnalyz
$LN356@exprAnalyz:
	push	esi
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN413@exprAnalyz
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN428@exprAnalyz
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN349@exprAnalyz
$LN428@exprAnalyz:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN349@exprAnalyz
$LN413@exprAnalyz:
	push	esi
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN349@exprAnalyz:
	test	ebx, ebx
	mov	DWORD PTR [ebp+16], ebx
	jne	SHORT $LN345@exprAnalyz
	mov	ecx, DWORD PTR _pNewExpr$101164[esp+480]
	push	ecx
	call	_sqlite3ExprDelete
	add	esp, 4
	xor	eax, eax
	jmp	SHORT $LN347@exprAnalyz
$LN345@exprAnalyz:
	mov	eax, DWORD PTR [ebp+8]
	lea	edx, DWORD PTR [eax+eax*4]
	add	edx, edx
	add	edx, edx
	add	edx, edx
	push	edx
	push	edi
	push	ebx
	call	_memcpy
	lea	eax, DWORD PTR [ebp+24]
	add	esp, 12					; 0000000cH
	cmp	edi, eax
	je	SHORT $LN377@exprAnalyz
	test	edi, edi
	je	SHORT $LN377@exprAnalyz
	push	edi
	call	_free
	add	esp, 4
$LN377@exprAnalyz:
	mov	ecx, DWORD PTR [ebp+12]
	add	ecx, ecx
	mov	DWORD PTR [ebp+12], ecx
$LN346@exprAnalyz:
	mov	eax, DWORD PTR [ebp+8]
	mov	ecx, DWORD PTR [ebp+16]
	lea	edx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [ecx+edx*8]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ebp+8], edx
	mov	edx, DWORD PTR _pNewExpr$101164[esp+480]
	mov	DWORD PTR [ecx], edx
	mov	BYTE PTR [ecx+12], 3
	mov	DWORD PTR [ecx+16], ebp
	mov	WORD PTR [ecx+4], -1
$LN347@exprAnalyz:
; Line 60479
	mov	ecx, DWORD PTR [ebp+16]
; Line 60480
	mov	edx, DWORD PTR _prereqExpr$101162[esp+480]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	ecx, DWORD PTR _prereqExpr$101162[esp+484]
	mov	DWORD PTR [eax+28], ecx
; Line 60481
	mov	ecx, DWORD PTR _pLeft$101159[esp+480]
	mov	DWORD PTR [eax+24], edx
	movzx	edx, WORD PTR [ecx+36]
	mov	WORD PTR [eax+6], dx
; Line 60482
	mov	cx, WORD PTR [ecx+40]
; Line 60484
	mov	dx, WORD PTR _idxTerm$[esp+476]
	mov	WORD PTR [eax+8], cx
	mov	WORD PTR [eax+10], 64			; 00000040H
	mov	WORD PTR [eax+4], dx
; Line 60485
	mov	ecx, DWORD PTR [ebp+16]
	add	ecx, DWORD PTR tv1280[esp+480]
; Line 60488
	mov	edx, DWORD PTR [ecx+32]
	or	BYTE PTR [ecx+12], 8
	mov	BYTE PTR [ecx+13], 1
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], ecx
$LN439@exprAnalyz:
	pop	esi
$LN1@exprAnalyz:
	pop	edi
	pop	ebp
	pop	ebx
; Line 60492
	add	esp, 464				; 000001d0H
	ret	0
_exprAnalyze ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _isSortingIndex
_TEXT	SEGMENT
_j$ = -20						; size = 4
_pTerm$ = -16						; size = 4
_sortOrder$ = -12					; size = 4
_nTerm$ = -8						; size = 4
_db$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pMaskSet$ = 12						; size = 4
_pIdx$ = 16						; size = 4
_base$ = 20						; size = 4
_pOrderBy$ = 24						; size = 4
_nEqCol$ = 28						; size = 4
_pbRev$ = 32						; size = 4
_isSortingIndex PROC					; COMDAT
; Line 60541
	sub	esp, 20					; 00000014H
; Line 60546
	mov	eax, DWORD PTR _pParse$[esp+16]
	mov	ecx, DWORD PTR [eax]
; Line 60549
	mov	eax, DWORD PTR _pOrderBy$[esp+16]
; Line 60560
	mov	edx, DWORD PTR [eax+12]
	push	ebx
	push	ebp
	xor	ebx, ebx
	mov	DWORD PTR _db$[esp+28], ecx
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebx
	push	esi
	push	edi
	mov	DWORD PTR _sortOrder$[esp+36], ebx
	mov	DWORD PTR _nTerm$[esp+36], ecx
	mov	DWORD PTR _j$[esp+36], ebx
	mov	DWORD PTR _pTerm$[esp+36], edx
	jle	$LN30@isSortingI@2
	npad	12
$LL26@isSortingI@2:
	mov	edi, DWORD PTR _pIdx$[esp+32]
	cmp	ebx, DWORD PTR [edi+4]
	jg	$LN31@isSortingI@2
; Line 60568
	mov	eax, DWORD PTR _pTerm$[esp+36]
	mov	ebp, DWORD PTR [eax]
; Line 60569
	cmp	BYTE PTR [ebp], 149			; 00000095H
	jne	$LN31@isSortingI@2
	mov	ecx, DWORD PTR [ebp+36]
	cmp	ecx, DWORD PTR _base$[esp+32]
	jne	$LN31@isSortingI@2
; Line 60574
	mov	edx, DWORD PTR _pParse$[esp+32]
	push	edx
	mov	ecx, ebp
	call	_sqlite3ExprCollSeq
	add	esp, 4
; Line 60575
	test	eax, eax
	jne	SHORT $LN14@isSortingI@2
; Line 60576
	mov	eax, DWORD PTR _db$[esp+36]
	mov	eax, DWORD PTR [eax+28]
$LN14@isSortingI@2:
; Line 60578
	cmp	ebx, DWORD PTR [edi+4]
	jge	SHORT $LN13@isSortingI@2
; Line 60579
	mov	ecx, DWORD PTR [edi+8]
	mov	esi, DWORD PTR [ecx+ebx*4]
; Line 60580
	mov	edx, DWORD PTR [edi+16]
	cmp	esi, DWORD PTR [edx+12]
	jne	SHORT $LN12@isSortingI@2
; Line 60581
	or	esi, -1
$LN12@isSortingI@2:
; Line 60583
	mov	ecx, DWORD PTR [edi+40]
; Line 60584
	mov	edx, DWORD PTR _pIdx$[esp+32]
	movzx	edi, BYTE PTR [ecx+ebx]
	mov	ecx, DWORD PTR [edx+44]
	mov	edx, DWORD PTR [ecx+ebx*4]
; Line 60585
	jmp	SHORT $LN11@isSortingI@2
$LN13@isSortingI@2:
; Line 60588
	mov	edx, DWORD PTR [eax]
	or	esi, -1
	xor	edi, edi
$LN11@isSortingI@2:
; Line 60590
	cmp	DWORD PTR [ebp+40], esi
	jne	SHORT $LN9@isSortingI@2
	mov	ecx, DWORD PTR [eax]
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN9@isSortingI@2
; Line 60607
	mov	edx, DWORD PTR _pTerm$[esp+36]
	movzx	eax, BYTE PTR [edx+8]
	xor	eax, edi
; Line 60608
	cmp	ebx, DWORD PTR _nEqCol$[esp+32]
	jle	SHORT $LN6@isSortingI@2
; Line 60609
	cmp	eax, DWORD PTR _sortOrder$[esp+36]
	jne	$LN1@isSortingI@2
; Line 60614
	jmp	SHORT $LN4@isSortingI@2
$LN6@isSortingI@2:
; Line 60615
	mov	DWORD PTR _sortOrder$[esp+36], eax
$LN4@isSortingI@2:
; Line 60617
	add	DWORD PTR _j$[esp+36], 1
; Line 60618
	add	DWORD PTR _pTerm$[esp+36], 12		; 0000000cH
; Line 60619
	test	esi, esi
	jge	SHORT $LN18@isSortingI@2
	mov	eax, DWORD PTR _j$[esp+36]
	mov	ecx, DWORD PTR _pMaskSet$[esp+32]
	mov	edx, DWORD PTR _pOrderBy$[esp+32]
	push	eax
	mov	eax, DWORD PTR _base$[esp+36]
	push	ecx
	push	edx
	call	_referencesOtherTables
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN18@isSortingI@2
; Line 60626
	mov	eax, DWORD PTR _nTerm$[esp+36]
	mov	DWORD PTR _j$[esp+36], eax
; Line 60628
	jmp	SHORT $LN18@isSortingI@2
$LN9@isSortingI@2:
; Line 60592
	cmp	ebx, DWORD PTR _nEqCol$[esp+32]
	jge	SHORT $LN1@isSortingI@2
$LN18@isSortingI@2:
; Line 60560
	mov	ecx, DWORD PTR _nTerm$[esp+36]
	add	ebx, 1
	cmp	DWORD PTR _j$[esp+36], ecx
	jl	$LL26@isSortingI@2
$LN30@isSortingI@2:
; Line 60609
	mov	edi, DWORD PTR _pIdx$[esp+32]
$LN31@isSortingI@2:
; Line 60630
	mov	eax, DWORD PTR _pbRev$[esp+32]
	xor	edx, edx
	cmp	DWORD PTR _sortOrder$[esp+36], edx
	setne	dl
	mov	DWORD PTR [eax], edx
; Line 60631
	mov	eax, DWORD PTR _j$[esp+36]
	cmp	eax, DWORD PTR _nTerm$[esp+36]
	jl	SHORT $LN2@isSortingI@2
$LN32@isSortingI@2:
	pop	edi
	pop	esi
	pop	ebp
; Line 60634
	mov	eax, 1
	pop	ebx
; Line 60645
	add	esp, 20					; 00000014H
	ret	0
$LN2@isSortingI@2:
; Line 60637
	cmp	BYTE PTR [edi+24], 0
	je	SHORT $LN1@isSortingI@2
	cmp	ebx, DWORD PTR [edi+4]
	jne	SHORT $LN1@isSortingI@2
	mov	ecx, DWORD PTR _pMaskSet$[esp+32]
	mov	edx, DWORD PTR _pOrderBy$[esp+32]
	push	eax
	mov	eax, DWORD PTR _base$[esp+36]
	push	ecx
	push	edx
	call	_referencesOtherTables
	add	esp, 12					; 0000000cH
	test	eax, eax
; Line 60642
	je	SHORT $LN32@isSortingI@2
$LN1@isSortingI@2:
	pop	edi
	pop	esi
	pop	ebp
; Line 60644
	xor	eax, eax
	pop	ebx
; Line 60645
	add	esp, 20					; 00000014H
	ret	0
_isSortingIndex ENDP
_TEXT	ENDS
PUBLIC	__real@4039000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@4069000000000000
PUBLIC	__real@547d42aea2879f2e
;	COMDAT __real@4039000000000000
CONST	SEGMENT
__real@4039000000000000 DQ 04039000000000000r	; 25
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
CONST	ENDS
;	COMDAT __real@547d42aea2879f2e
CONST	SEGMENT
__real@547d42aea2879f2e DQ 0547d42aea2879f2er	; 1e+099
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _bestIndex
_TEXT	SEGMENT
_flags$ = -68						; size = 4
_iCur$ = -64						; size = 4
_i$101388 = -60						; size = 4
_bestFlags$ = -56					; size = 4
_rev$ = -52						; size = 4
tv718 = -48						; size = 4
tv704 = -48						; size = 4
tv174 = -48						; size = 4
_cost$ = -48						; size = 8
tv754 = -36						; size = 4
_eqTermMask$ = -36					; size = 4
_bestIdx$ = -32						; size = 4
_bestNEq$ = -28						; size = 4
_lowestCost$ = -24					; size = 8
_inMultiplier$101389 = -16				; size = 8
_m$101414 = -8						; size = 8
_pParse$ = 8						; size = 4
_pWC$ = 12						; size = 4
_pSrc$ = 16						; size = 4
_notReady$ = 20						; size = 8
_pOrderBy$ = 28						; size = 4
_ppIndex$ = 32						; size = 4
_pFlags$ = 36						; size = 4
_pnEq$ = 40						; size = 4
_bestIndex PROC						; COMDAT
; Line 60962
	push	ebp
	mov	ebp, esp
	and	esp, -64				; ffffffc0H
	sub	esp, 116				; 00000074H
; Line 60968
	mov	eax, DWORD PTR _pSrc$[ebp]
; Line 60977
	fld	QWORD PTR __real@547d42aea2879f2e
	push	ebx
	fstp	QWORD PTR _lowestCost$[esp+120]
	mov	ebx, DWORD PTR [eax+24]
; Line 60978
	mov	eax, DWORD PTR [eax+12]
	push	esi
; Line 60988
	mov	esi, DWORD PTR _pWC$[ebp]
	xor	ecx, ecx
	push	edi
	mov	edi, DWORD PTR [eax+16]
	cmp	edi, ecx
	mov	DWORD PTR _bestIdx$[esp+128], ecx
	mov	DWORD PTR _bestFlags$[esp+128], ecx
	mov	DWORD PTR _bestNEq$[esp+128], ecx
	mov	DWORD PTR _iCur$[esp+128], ebx
	jne	SHORT $LN46@bestIndex
	push	ecx
	push	63					; 0000003fH
	push	ecx
	push	ecx
	push	-1
	push	ebx
	push	esi
	call	_findTerm
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN46@bestIndex
	mov	eax, DWORD PTR _pOrderBy$[ebp]
	test	eax, eax
	je	SHORT $LN45@bestIndex
	mov	edx, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR _rev$[esp+128]
	mov	esi, eax
	push	ecx
	mov	eax, ebx
	call	_sortableByRowid
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN95@bestIndex
$LN45@bestIndex:
; Line 60989
	mov	edx, DWORD PTR _pFlags$[ebp]
; Line 60992
	fldz
	mov	eax, DWORD PTR _ppIndex$[ebp]
	mov	ecx, DWORD PTR _pnEq$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [ecx], 0
; Line 61187
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN95@bestIndex:
; Line 60992
	mov	esi, DWORD PTR _pWC$[ebp]
$LN46@bestIndex:
; Line 60997
	mov	edx, DWORD PTR _notReady$[ebp+4]
	mov	eax, DWORD PTR _notReady$[ebp]
	push	0
	push	3
	push	edx
	push	eax
	push	-1
	push	ebx
	push	esi
	call	_findTerm
	add	esp, 28					; 0000001cH
; Line 60998
	test	eax, eax
	je	SHORT $LN40@bestIndex
; Line 61000
	mov	ecx, DWORD PTR _ppIndex$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 61002
	test	BYTE PTR [eax+10], 2
	mov	DWORD PTR _bestFlags$[esp+128], 256	; 00000100H
	je	SHORT $LN43@bestIndex
; Line 61005
	mov	edx, DWORD PTR _pFlags$[ebp]
; Line 61008
	fldz
	mov	eax, DWORD PTR _pnEq$[ebp]
	mov	DWORD PTR [edx], 4194560		; 00400100H
	mov	DWORD PTR [eax], 1
; Line 61187
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN43@bestIndex:
; Line 61009
	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+16]
	test	eax, eax
	je	SHORT $LN41@bestIndex
; Line 61012
	fild	DWORD PTR [eax]
; Line 61013
	sub	esp, 8
	fst	QWORD PTR _lowestCost$[esp+136]
	fstp	QWORD PTR [esp]
	call	_estLog
	fmul	QWORD PTR _lowestCost$[esp+136]
	add	esp, 8
; Line 61014
	jmp	SHORT $LN172@bestIndex
$LN41@bestIndex:
; Line 61018
	fld	QWORD PTR __real@4069000000000000
$LN172@bestIndex:
	fstp	QWORD PTR _lowestCost$[esp+128]
$LN40@bestIndex:
; Line 61026
	test	edi, edi
	je	SHORT $LN49@bestIndex
	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN50@bestIndex
$LN49@bestIndex:
	mov	eax, 1000000				; 000f4240H
$LN50@bestIndex:
	test	eax, eax
	mov	DWORD PTR tv754[esp+128], eax
	fild	DWORD PTR tv754[esp+128]
	jge	SHORT $LN170@bestIndex
	fadd	QWORD PTR __real@41f0000000000000
$LN170@bestIndex:
; Line 61032
	mov	edx, DWORD PTR _notReady$[ebp+4]
	fstp	QWORD PTR _cost$[esp+128]
	mov	eax, DWORD PTR _notReady$[ebp]
	push	0
	push	60					; 0000003cH
	push	edx
	push	eax
	push	-1
	push	ebx
	push	esi
	mov	DWORD PTR _flags$[esp+156], 512		; 00000200H
	call	_findTerm
	add	esp, 28					; 0000001cH
; Line 61033
	test	eax, eax
	je	SHORT $LN39@bestIndex
; Line 61034
	mov	ecx, DWORD PTR _notReady$[ebp+4]
	mov	edx, DWORD PTR _notReady$[ebp]
	push	0
	push	24					; 00000018H
	push	ecx
	push	edx
	push	-1
	push	ebx
	push	esi
	call	_findTerm
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN38@bestIndex
; Line 61036
	fld	QWORD PTR _cost$[esp+128]
	mov	DWORD PTR _flags$[esp+128], 66048	; 00010200H
	fdiv	QWORD PTR __real@4008000000000000
	fstp	QWORD PTR _cost$[esp+128]
$LN38@bestIndex:
; Line 61038
	mov	eax, DWORD PTR _notReady$[ebp+4]
	mov	ecx, DWORD PTR _notReady$[ebp]
	push	0
	push	36					; 00000024H
	push	eax
	push	ecx
	push	-1
	push	ebx
	push	esi
	call	_findTerm
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN36@bestIndex
; Line 61040
	fld	QWORD PTR _cost$[esp+128]
	or	DWORD PTR _flags$[esp+128], 131072	; 00020000H
	fdiv	QWORD PTR __real@4008000000000000
	fstp	QWORD PTR _cost$[esp+128]
; Line 61043
	jmp	SHORT $LN36@bestIndex
$LN39@bestIndex:
; Line 61044
	mov	DWORD PTR _flags$[esp+128], 0
$LN36@bestIndex:
; Line 61049
	mov	ecx, DWORD PTR _pOrderBy$[ebp]
	test	ecx, ecx
	je	SHORT $LN32@bestIndex
; Line 61050
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	cmp	BYTE PTR [eax], 149			; 00000095H
	mov	esi, DWORD PTR [esi+4]
	jne	SHORT $LN34@bestIndex
	cmp	DWORD PTR [eax+36], ebx
	jne	SHORT $LN34@bestIndex
	cmp	DWORD PTR [eax+40], -1
	jne	SHORT $LN34@bestIndex
	push	1
	push	esi
	push	ecx
	mov	eax, ebx
	call	_referencesOtherTables
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN34@bestIndex
	mov	eax, DWORD PTR _pOrderBy$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	movzx	eax, BYTE PTR [ecx+8]
; Line 61051
	or	DWORD PTR _flags$[esp+128], 1049088	; 00100200H
; Line 61052
	test	eax, eax
	mov	DWORD PTR _rev$[esp+128], eax
	je	SHORT $LN32@bestIndex
; Line 61053
	or	DWORD PTR _flags$[esp+128], 2097152	; 00200000H
; Line 61055
	jmp	SHORT $LN32@bestIndex
$LN34@bestIndex:
; Line 61056
	fld	QWORD PTR _cost$[esp+128]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_estLog
	fld	QWORD PTR _cost$[esp+136]
	add	esp, 8
	fmul	ST(1), ST(0)
	faddp	ST(1), ST(0)
	fstp	QWORD PTR _cost$[esp+128]
$LN32@bestIndex:
; Line 61060
	fld	QWORD PTR _lowestCost$[esp+128]
	fld	QWORD PTR _cost$[esp+128]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN98@bestIndex
; Line 61062
	mov	edx, DWORD PTR _flags$[esp+128]
	fstp	ST(1)
	fst	QWORD PTR _lowestCost$[esp+128]
	mov	DWORD PTR _bestFlags$[esp+128], edx
	jmp	SHORT $LN31@bestIndex
$LN98@bestIndex:
	fstp	ST(0)
$LN31@bestIndex:
; Line 61070
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	cl, BYTE PTR [eax+21]
	not	cl
	movzx	eax, cl
	and	eax, 8
	shl	eax, 4
	or	eax, 3
; Line 61078
	test	edi, edi
	mov	DWORD PTR _eqTermMask$[esp+128], eax
	je	$LN26@bestIndex
	fstp	ST(0)
	fld	QWORD PTR __real@4024000000000000
	jmp	SHORT $LN28@bestIndex
	npad	7
$LL157@bestIndex:
	fstp	ST(0)
$LN28@bestIndex:
; Line 61080
	fld1
; Line 61088
	xor	ebx, ebx
	xor	esi, esi
	fst	QWORD PTR _inMultiplier$101389[esp+128]
	cmp	DWORD PTR [edi+4], ebx
	mov	DWORD PTR _flags$[esp+128], esi
	mov	DWORD PTR _i$101388[esp+128], ebx
	jle	$LN67@bestIndex
	fstp	ST(1)
	npad	1
$LL160@bestIndex:
; Line 61089
	mov	edx, DWORD PTR [edi+8]
	fstp	ST(0)
	mov	eax, DWORD PTR [edx+ebx*4]
; Line 61090
	mov	ecx, DWORD PTR _eqTermMask$[esp+128]
	mov	edx, DWORD PTR _notReady$[ebp+4]
	push	edi
	push	ecx
	mov	ecx, DWORD PTR _notReady$[ebp]
	push	edx
	mov	edx, DWORD PTR _iCur$[esp+140]
	push	ecx
	push	eax
	mov	eax, DWORD PTR _pWC$[ebp]
	push	edx
	push	eax
	call	_findTerm
	add	esp, 28					; 0000001cH
; Line 61091
	test	eax, eax
	je	SHORT $LN79@bestIndex
; Line 61092
	or	esi, 4096				; 00001000H
; Line 61093
	test	BYTE PTR [eax+10], 1
	je	SHORT $LN78@bestIndex
; Line 61094
	mov	eax, DWORD PTR [eax]
; Line 61095
	or	esi, 16384				; 00004000H
; Line 61096
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN20@bestIndex
; Line 61097
	fld	QWORD PTR _inMultiplier$101389[esp+128]
	fmul	QWORD PTR __real@4039000000000000
	fst	QWORD PTR _inMultiplier$101389[esp+128]
	jmp	SHORT $LN24@bestIndex
$LN20@bestIndex:
; Line 61098
	mov	eax, DWORD PTR [eax+16]
	test	eax, eax
	je	SHORT $LN78@bestIndex
; Line 61099
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	DWORD PTR tv718[esp+128], ecx
	fild	DWORD PTR tv718[esp+128]
	fmul	QWORD PTR _inMultiplier$101389[esp+128]
	fst	QWORD PTR _inMultiplier$101389[esp+128]
	jmp	SHORT $LN24@bestIndex
$LN78@bestIndex:
	fld	QWORD PTR _inMultiplier$101389[esp+128]
$LN24@bestIndex:
; Line 61088
	add	ebx, 1
	cmp	ebx, DWORD PTR [edi+4]
	jl	SHORT $LL160@bestIndex
	jmp	SHORT $LN80@bestIndex
$LN79@bestIndex:
	fld	QWORD PTR _inMultiplier$101389[esp+128]
$LN80@bestIndex:
	fld	QWORD PTR __real@4024000000000000
; Line 61092
	mov	DWORD PTR _flags$[esp+128], esi
	mov	DWORD PTR _i$101388[esp+128], ebx
	fxch	ST(1)
$LN67@bestIndex:
; Line 61103
	fld1
	fld	ST(0)
	fld	ST(3)
	fxch	ST(3)
	fcom	ST(4)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN55@bestIndex
	fstp	ST(3)
	fstp	ST(1)
	jmp	SHORT $LN54@bestIndex
$LN111@bestIndex:
	fxch	ST(3)
	fxch	ST(1)
$LN55@bestIndex:
	fxch	ST(1)
	fadd	ST(0), ST(2)
	fxch	ST(3)
	fmul	ST(0), ST(4)
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN111@bestIndex
	fstp	ST(0)
	fstp	ST(1)
	fxch	ST(1)
$LN54@bestIndex:
	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edx+ebx*4]
	fild	DWORD PTR [edx+ebx*4]
	test	eax, eax
	jge	SHORT $LN171@bestIndex
	fadd	QWORD PTR __real@41f0000000000000
$LN171@bestIndex:
; Line 61106
	cmp	BYTE PTR [edi+24], 0
	fmulp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fst	QWORD PTR _cost$[esp+128]
	je	SHORT $LN17@bestIndex
	test	esi, 16384				; 00004000H
	jne	SHORT $LN17@bestIndex
	cmp	ebx, DWORD PTR [edi+4]
	jne	SHORT $LN173@bestIndex
; Line 61107
	or	esi, 4194304				; 00400000H
	mov	DWORD PTR _flags$[esp+128], esi
$LN17@bestIndex:
; Line 61113
	cmp	ebx, DWORD PTR [edi+4]
$LN173@bestIndex:
	jge	$LN13@bestIndex
; Line 61115
	mov	edx, DWORD PTR _notReady$[ebp+4]
	fstp	ST(0)
	mov	ecx, DWORD PTR [edi+8]
	fstp	ST(0)
	mov	eax, DWORD PTR _notReady$[ebp]
	mov	esi, DWORD PTR [ecx+ebx*4]
	mov	ecx, DWORD PTR _iCur$[esp+128]
	push	edi
	push	60					; 0000003cH
	push	edx
	mov	edx, DWORD PTR _pWC$[ebp]
	push	eax
	push	esi
	push	ecx
	push	edx
	call	_findTerm
	add	esp, 28					; 0000001cH
; Line 61116
	test	eax, eax
	je	SHORT $LN81@bestIndex
; Line 61118
	mov	eax, DWORD PTR _notReady$[ebp+4]
	mov	ecx, DWORD PTR _notReady$[ebp]
	mov	edx, DWORD PTR _iCur$[esp+128]
	or	DWORD PTR _flags$[esp+128], 8192	; 00002000H
	push	edi
	push	24					; 00000018H
	push	eax
	mov	eax, DWORD PTR _pWC$[ebp]
	push	ecx
	push	esi
	push	edx
	push	eax
	call	_findTerm
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN14@bestIndex
; Line 61120
	fld	QWORD PTR _cost$[esp+128]
	or	DWORD PTR _flags$[esp+128], 65536	; 00010000H
	fdiv	QWORD PTR __real@4008000000000000
	fstp	QWORD PTR _cost$[esp+128]
$LN14@bestIndex:
; Line 61122
	mov	ecx, DWORD PTR _notReady$[ebp+4]
	mov	edx, DWORD PTR _notReady$[ebp]
	mov	eax, DWORD PTR _iCur$[esp+128]
	push	edi
	push	36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR _pWC$[ebp]
	push	edx
	push	esi
	push	eax
	push	ecx
	call	_findTerm
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN81@bestIndex
; Line 61124
	fld	QWORD PTR _cost$[esp+128]
	or	DWORD PTR _flags$[esp+128], 131072	; 00020000H
	fdiv	QWORD PTR __real@4008000000000000
	fst	QWORD PTR _cost$[esp+128]
	jmp	SHORT $LN174@bestIndex
$LN81@bestIndex:
	fld	QWORD PTR _cost$[esp+128]
$LN174@bestIndex:
	fld	QWORD PTR __real@4024000000000000
	mov	esi, DWORD PTR _flags$[esp+128]
	fxch	ST(1)
$LN13@bestIndex:
; Line 61132
	mov	eax, DWORD PTR _pOrderBy$[ebp]
	test	eax, eax
	je	SHORT $LN8@bestIndex
; Line 61134
	test	esi, 16384				; 00004000H
	jne	$LN11@bestIndex
	mov	ecx, DWORD PTR _pWC$[ebp]
	fstp	ST(0)
	lea	edx, DWORD PTR _rev$[esp+128]
	fstp	ST(0)
	push	edx
	mov	edx, DWORD PTR [ecx+4]
	push	ebx
	push	eax
	mov	eax, DWORD PTR _iCur$[esp+140]
	push	eax
	mov	eax, DWORD PTR _pParse$[ebp]
	push	edi
	push	edx
	push	eax
	call	_isSortingIndex
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	$LN82@bestIndex
; Line 61135
	test	esi, esi
	jne	SHORT $LN10@bestIndex
; Line 61136
	mov	DWORD PTR _flags$[esp+128], 8192	; 00002000H
	mov	esi, DWORD PTR _flags$[esp+128]
$LN10@bestIndex:
; Line 61142
	fld	QWORD PTR _cost$[esp+128]
	or	esi, 1048576				; 00100000H
	cmp	DWORD PTR _rev$[esp+128], 0
	fld	QWORD PTR __real@4024000000000000
	mov	DWORD PTR _flags$[esp+128], esi
	je	SHORT $LN169@bestIndex
	or	esi, 2097152				; 00200000H
	mov	DWORD PTR _flags$[esp+128], esi
$LN169@bestIndex:
	fxch	ST(1)
$LN8@bestIndex:
; Line 61152
	test	esi, esi
	je	SHORT $LN2@bestIndex
	mov	eax, DWORD PTR _pSrc$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	eax, DWORD PTR [eax+44]
	cmp	eax, -2147483648			; 80000000H
	ja	SHORT $LN2@bestIndex
	jb	SHORT $LN74@bestIndex
	test	ecx, ecx
	jae	SHORT $LN2@bestIndex
$LN74@bestIndex:
; Line 61153
	mov	DWORD PTR _m$101414[esp+132], eax
	mov	eax, DWORD PTR [edi+4]
; Line 61155
	test	eax, eax
	mov	ebx, ecx
	jle	SHORT $LN4@bestIndex
	mov	esi, DWORD PTR [edi+8]
	mov	DWORD PTR tv174[esp+128], eax
$LN6@bestIndex:
; Line 61156
	mov	ecx, DWORD PTR [esi]
; Line 61157
	cmp	ecx, 63					; 0000003fH
	jae	SHORT $LN5@bestIndex
; Line 61158
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	not	eax
	not	edx
	and	ebx, eax
	and	DWORD PTR _m$101414[esp+132], edx
$LN5@bestIndex:
	add	esi, 4
	sub	DWORD PTR tv174[esp+128], 1
	jne	SHORT $LN6@bestIndex
$LN4@bestIndex:
; Line 61161
	or	ebx, DWORD PTR _m$101414[esp+132]
; Line 61163
	mov	ebx, DWORD PTR _i$101388[esp+128]
	jne	SHORT $LN93@bestIndex
	or	DWORD PTR _flags$[esp+128], 524288	; 00080000H
	fmul	QWORD PTR __real@3fe0000000000000
$LN93@bestIndex:
	mov	esi, DWORD PTR _flags$[esp+128]
$LN2@bestIndex:
; Line 61170
	fld	QWORD PTR _lowestCost$[esp+128]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN153@bestIndex
; Line 61175
	fstp	ST(0)
	mov	DWORD PTR _bestIdx$[esp+128], edi
	fst	QWORD PTR _lowestCost$[esp+128]
	mov	DWORD PTR _bestFlags$[esp+128], esi
	mov	DWORD PTR _bestNEq$[esp+128], ebx
	jmp	SHORT $LN27@bestIndex
$LN82@bestIndex:
; Line 61142
	fld	QWORD PTR __real@4024000000000000
	fld	QWORD PTR _cost$[esp+128]
$LN11@bestIndex:
; Line 61143
	fld1
	fld	ST(0)
	fld	ST(3)
	fxch	ST(3)
	fcom	ST(4)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN59@bestIndex
	fstp	ST(3)
	fstp	ST(1)
	fmul	ST(0), ST(1)
	faddp	ST(1), ST(0)
	jmp	$LN8@bestIndex
$LN133@bestIndex:
	fxch	ST(3)
	fxch	ST(1)
$LN59@bestIndex:
	fxch	ST(1)
	fadd	ST(0), ST(2)
	fxch	ST(3)
	fmul	ST(0), ST(4)
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN133@bestIndex
	fstp	ST(0)
	fstp	ST(1)
	fxch	ST(1)
	fmul	ST(0), ST(1)
	faddp	ST(1), ST(0)
	jmp	$LN8@bestIndex
$LN153@bestIndex:
; Line 61175
	fstp	ST(1)
$LN27@bestIndex:
; Line 61078
	mov	edi, DWORD PTR [edi+32]
	test	edi, edi
	jne	$LL157@bestIndex
	mov	eax, DWORD PTR _eqTermMask$[esp+128]
	fstp	ST(1)
$LN26@bestIndex:
; Line 61181
	mov	ecx, DWORD PTR _bestIdx$[esp+128]
	mov	edx, DWORD PTR _ppIndex$[ebp]
; Line 61184
	or	eax, DWORD PTR _bestFlags$[esp+128]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _pFlags$[ebp]
; Line 61185
	mov	edx, DWORD PTR _pnEq$[ebp]
; Line 61187
	pop	edi
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _bestNEq$[esp+124]
	pop	esi
	mov	DWORD PTR [edx], eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_bestIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_create_function
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zFunctionName$ = 12					; size = 4
_nArg$ = 16						; size = 4
_enc$ = 20						; size = 4
_p$ = 24						; size = 4
_xFunc$ = 28						; size = 4
_xStep$ = 32						; size = 4
_xFinal$ = 36						; size = 4
_sqlite3_create_function PROC				; COMDAT
; Line 66589
	mov	eax, DWORD PTR _xFinal$[esp-4]
	mov	ecx, DWORD PTR _xStep$[esp-4]
	mov	edx, DWORD PTR _xFunc$[esp-4]
	push	esi
	mov	esi, DWORD PTR _db$[esp]
	push	eax
	mov	eax, DWORD PTR _p$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR _enc$[esp+8]
	push	edx
	mov	edx, DWORD PTR _nArg$[esp+12]
	push	eax
	mov	eax, DWORD PTR _zFunctionName$[esp+16]
	push	ecx
	push	edx
	push	eax
	push	esi
	call	_sqlite3CreateFunc
	add	esp, 32					; 00000020H
; Line 66591
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ecx, eax
	je	SHORT $LN3@sqlite3_cr@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN3@sqlite3_cr@2
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	mov	eax, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	ecx, 7
$LN3@sqlite3_cr@2:
	test	esi, esi
	je	SHORT $LN6@sqlite3_cr@2
	mov	eax, DWORD PTR [esi+16]
	and	eax, ecx
	pop	esi
; Line 66592
	ret	0
; Line 66591
$LN6@sqlite3_cr@2:
	mov	eax, 255				; 000000ffH
	and	eax, ecx
	pop	esi
; Line 66592
	ret	0
_sqlite3_create_function ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_create_function16
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zFunctionName$ = 12					; size = 4
_nArg$ = 16						; size = 4
_eTextRep$ = 20						; size = 4
_p$ = 24						; size = 4
_xFunc$ = 28						; size = 4
_xStep$ = 32						; size = 4
_xFinal$ = 36						; size = 4
_sqlite3_create_function16 PROC				; COMDAT
; Line 66609
	mov	ecx, DWORD PTR _zFunctionName$[esp-4]
	push	ebx
	push	esi
	push	edi
	push	-1
	call	_sqlite3Utf16to8
; Line 66610
	mov	ecx, DWORD PTR _xStep$[esp+12]
	mov	edx, DWORD PTR _xFunc$[esp+12]
	mov	edi, DWORD PTR _db$[esp+12]
	mov	esi, eax
	mov	eax, DWORD PTR _xFinal$[esp+12]
	push	eax
	mov	eax, DWORD PTR _p$[esp+16]
	push	ecx
	mov	ecx, DWORD PTR _eTextRep$[esp+20]
	push	edx
	mov	edx, DWORD PTR _nArg$[esp+24]
	push	eax
	push	ecx
	push	edx
	push	esi
	push	edi
	call	_sqlite3CreateFunc
	add	esp, 36					; 00000024H
; Line 66611
	test	esi, esi
	mov	ebx, eax
	je	SHORT $LN6@sqlite3_cr@3
	push	esi
	call	_free
	add	esp, 4
$LN6@sqlite3_cr@3:
; Line 66613
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ecx, ebx
	je	SHORT $LN8@sqlite3_cr@3
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN8@sqlite3_cr@3
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	mov	eax, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	ecx, 7
$LN8@sqlite3_cr@3:
	test	edi, edi
	je	SHORT $LN11@sqlite3_cr@3
	mov	eax, DWORD PTR [edi+16]
	pop	edi
	pop	esi
	and	eax, ecx
	pop	ebx
; Line 66614
	ret	0
; Line 66613
$LN11@sqlite3_cr@3:
	pop	edi
	mov	eax, 255				; 000000ffH
	pop	esi
	and	eax, ecx
	pop	ebx
; Line 66614
	ret	0
_sqlite3_create_function16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_overload_function
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zName$ = 12						; size = 4
_nArg$ = 16						; size = 4
_sqlite3_overload_function PROC				; COMDAT
; Line 66634
	push	ebp
; Line 66635
	mov	ebp, DWORD PTR _zName$[esp]
	push	esi
	mov	eax, ebp
	push	edi
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL13@sqlite3_ov:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL13@sqlite3_ov
; Line 66636
	mov	edi, DWORD PTR _nArg$[esp+8]
	mov	esi, DWORD PTR _db$[esp+8]
	push	ebx
	push	0
	sub	eax, edx
	push	1
	push	edi
	mov	ebx, eax
	push	ebp
	mov	eax, esi
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
	test	eax, eax
	pop	ebx
	jne	SHORT $LN14@sqlite3_ov
; Line 66638
	push	eax
	push	eax
	push	OFFSET _sqlite3InvalidFunction
	push	eax
	push	1
	push	edi
	push	ebp
	push	esi
	call	_sqlite3CreateFunc
	add	esp, 32					; 00000020H
$LN14@sqlite3_ov:
; Line 66640
	xor	ecx, ecx
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ecx
	je	SHORT $LN4@sqlite3_ov
	cmp	DWORD PTR _inMutex, ecx
	jle	SHORT $LN4@sqlite3_ov
	sub	DWORD PTR _inMutex, 1
	push	ecx
	push	7
	mov	eax, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, ecx
	call	_sqlite3Error
	add	esp, 8
	mov	ecx, 7
$LN4@sqlite3_ov:
	test	esi, esi
	je	SHORT $LN7@sqlite3_ov
	mov	eax, DWORD PTR [esi+16]
	pop	edi
	pop	esi
	and	eax, ecx
	pop	ebp
; Line 66641
	ret	0
; Line 66640
$LN7@sqlite3_ov:
	pop	edi
	mov	eax, 255				; 000000ffH
	pop	esi
	and	eax, ecx
	pop	ebp
; Line 66641
	ret	0
_sqlite3_overload_function ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeFactory
_TEXT	SEGMENT
_omitJournal$ = 8					; size = 4
_sqlite3BtreeFactory PROC				; COMDAT
; _db$ = edi
; _zFilename$ = ecx
; _nCache$ = ebx
; _ppBtree$ = esi
; Line 66757
	xor	eax, eax
; Line 66761
	cmp	DWORD PTR _omitJournal$[esp-4], eax
	je	SHORT $LN5@sqlite3Btr@27
; Line 66762
	mov	eax, 1
$LN5@sqlite3Btr@27:
; Line 66764
	test	DWORD PTR [edi+8], 4096			; 00001000H
	je	SHORT $LN4@sqlite3Btr@27
; Line 66765
	or	eax, 2
$LN4@sqlite3Btr@27:
; Line 66767
	test	ecx, ecx
	jne	SHORT $LN2@sqlite3Btr@27
; Line 66773
	cmp	BYTE PTR [edi+21], 2
	jne	SHORT $LN2@sqlite3Btr@27
	mov	ecx, OFFSET ??_C@_08CADOGOJM@?3memory?3?$AA@
$LN2@sqlite3Btr@27:
; Line 66784
	push	eax
	push	esi
	push	edi
	push	ecx
	call	_sqlite3BtreeOpen
	add	esp, 16					; 00000010H
; Line 66785
	test	eax, eax
	jne	SHORT $LN14@sqlite3Btr@27
; Line 66787
	cmp	ebx, 10					; 0000000aH
	mov	edx, DWORD PTR [esi]
	mov	edx, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [edi+276]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [edx+108], ecx
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	jle	SHORT $LN15@sqlite3Btr@27
	mov	DWORD PTR [ecx+68], ebx
; Line 66790
	ret	0
; Line 66787
$LN15@sqlite3Btr@27:
	mov	DWORD PTR [ecx+68], 10			; 0000000aH
$LN14@sqlite3Btr@27:
; Line 66790
	ret	0
_sqlite3BtreeFactory ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_errmsg16
_TEXT	SEGMENT
_db$ = 8						; size = 4
_sqlite3_errmsg16 PROC					; COMDAT
; Line 66817
	push	ebp
; Line 66839
	mov	ebp, DWORD PTR _db$[esp]
	test	ebp, ebp
	jne	SHORT $LN8@sqlite3_er@3
; Line 66840
	mov	eax, OFFSET ?outOfMemBe@?1??sqlite3_errmsg16@@9@9+1
	pop	ebp
; Line 66853
	ret	0
; Line 66842
$LN8@sqlite3_er@3:
	mov	eax, DWORD PTR [ebp+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN7@sqlite3_er@3
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN7@sqlite3_er@3
	cmp	eax, -264537850				; f03b7906H
	jne	$LN2@sqlite3_er@3
$LN7@sqlite3_er@3:
	cmp	DWORD PTR [ebp+12], 21			; 00000015H
	je	$LN2@sqlite3_er@3
; Line 66845
	mov	ecx, DWORD PTR [ebp+140]
	push	esi
	mov	al, 2
	call	_sqlite3ValueText
	mov	esi, eax
; Line 66846
	test	esi, esi
	jne	SHORT $LN1@sqlite3_er@3
; Line 66848
	mov	eax, DWORD PTR [ebp+12]
	push	edi
	call	_sqlite3ErrStr
	mov	esi, DWORD PTR [ebp+140]
	test	esi, esi
	mov	edi, eax
	je	SHORT $LN16@sqlite3_er@3
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN29@sqlite3_er@3
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	jmp	SHORT $LN16@sqlite3_er@3
$LN29@sqlite3_er@3:
	mov	eax, edi
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 130			; 00000082H
	lea	edx, DWORD PTR [eax+1]
$LL44@sqlite3_er@3:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL44@sqlite3_er@3
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	WORD PTR [esi+24], 162			; 000000a2H
$LN16@sqlite3_er@3:
; Line 66849
	mov	ecx, DWORD PTR [ebp+140]
	mov	al, 2
	call	_sqlite3ValueText
	mov	esi, eax
	pop	edi
$LN1@sqlite3_er@3:
; Line 66851
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN34@sqlite3_er@3
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN34@sqlite3_er@3
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
$LN34@sqlite3_er@3:
; Line 66852
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 66853
	ret	0
$LN2@sqlite3_er@3:
; Line 66843
	mov	eax, OFFSET ?misuseBe@?1??sqlite3_errmsg16@@9@9+1
	pop	ebp
; Line 66853
	ret	0
_sqlite3_errmsg16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_create_collation
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zName$ = 12						; size = 4
_enc$ = 16						; size = 4
_pCtx$ = 20						; size = 4
_xCompare$ = 24						; size = 4
_sqlite3_create_collation PROC				; COMDAT
; Line 67183
	mov	eax, DWORD PTR _xCompare$[esp-4]
	mov	ecx, DWORD PTR _pCtx$[esp-4]
	mov	edx, DWORD PTR _enc$[esp-4]
	push	esi
	mov	esi, DWORD PTR _db$[esp]
	push	0
	push	eax
	mov	eax, DWORD PTR _zName$[esp+8]
	push	ecx
	push	edx
	push	eax
	push	esi
	call	_createCollation
	add	esp, 24					; 00000018H
; Line 67184
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ecx, eax
	je	SHORT $LN3@sqlite3_cr@4
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN3@sqlite3_cr@4
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	mov	eax, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	ecx, 7
$LN3@sqlite3_cr@4:
	test	esi, esi
	je	SHORT $LN6@sqlite3_cr@4
	mov	eax, DWORD PTR [esi+16]
	and	eax, ecx
	pop	esi
; Line 67185
	ret	0
; Line 67184
$LN6@sqlite3_cr@4:
	mov	eax, 255				; 000000ffH
	and	eax, ecx
	pop	esi
; Line 67185
	ret	0
_sqlite3_create_collation ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_create_collation_v2
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_create_collation_v2
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zName$ = 12						; size = 4
_enc$ = 16						; size = 4
_pCtx$ = 20						; size = 4
_xCompare$ = 24						; size = 4
_xDel$ = 28						; size = 4
_sqlite3_create_collation_v2 PROC			; COMDAT
; Line 67200
	mov	eax, DWORD PTR _xDel$[esp-4]
	mov	ecx, DWORD PTR _xCompare$[esp-4]
	mov	edx, DWORD PTR _pCtx$[esp-4]
	push	esi
	mov	esi, DWORD PTR _db$[esp]
	push	eax
	mov	eax, DWORD PTR _enc$[esp+4]
	push	ecx
	mov	ecx, DWORD PTR _zName$[esp+8]
	push	edx
	push	eax
	push	ecx
	push	esi
	call	_createCollation
	add	esp, 24					; 00000018H
; Line 67201
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ecx, eax
	je	SHORT $LN3@sqlite3_cr@5
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN3@sqlite3_cr@5
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	mov	eax, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	ecx, 7
$LN3@sqlite3_cr@5:
	test	esi, esi
	je	SHORT $LN6@sqlite3_cr@5
	mov	eax, DWORD PTR [esi+16]
	and	eax, ecx
	pop	esi
; Line 67202
	ret	0
; Line 67201
$LN6@sqlite3_cr@5:
	mov	eax, 255				; 000000ffH
	and	eax, ecx
	pop	esi
; Line 67202
	ret	0
_sqlite3_create_collation_v2 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_create_collation16
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zName$ = 12						; size = 4
_enc$ = 16						; size = 4
_pCtx$ = 20						; size = 4
_xCompare$ = 24						; size = 4
_sqlite3_create_collation16 PROC			; COMDAT
; Line 67218
	mov	ecx, DWORD PTR _zName$[esp-4]
	push	ebx
	push	esi
	push	edi
	push	-1
	xor	edi, edi
	call	_sqlite3Utf16to8
; Line 67219
	mov	ebx, DWORD PTR _db$[esp+12]
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	SHORT $LN7@sqlite3_cr@6
; Line 67220
	mov	eax, DWORD PTR _xCompare$[esp+8]
	mov	ecx, DWORD PTR _pCtx$[esp+8]
	mov	edx, DWORD PTR _enc$[esp+8]
	push	edi
	push	eax
	push	ecx
	push	edx
	push	esi
	push	ebx
	call	_createCollation
; Line 67221
	push	esi
	mov	edi, eax
	call	_free
	add	esp, 28					; 0000001cH
$LN7@sqlite3_cr@6:
; Line 67223
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN9@sqlite3_cr@6
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN9@sqlite3_cr@6
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	mov	eax, ebx
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	edi, 7
$LN9@sqlite3_cr@6:
	test	ebx, ebx
	je	SHORT $LN12@sqlite3_cr@6
	mov	eax, DWORD PTR [ebx+16]
	and	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 67224
	ret	0
; Line 67223
$LN12@sqlite3_cr@6:
	mov	eax, 255				; 000000ffH
	and	eax, edi
	pop	edi
	pop	esi
	pop	ebx
; Line 67224
	ret	0
_sqlite3_create_collation16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_enable_shared_cache
_TEXT	SEGMENT
_enable$ = 8						; size = 4
_sqlite3_enable_shared_cache PROC			; COMDAT
; Line 67308
	mov	eax, 1
	call	_sqlite3WinThreadSpecificData
	test	eax, eax
	jne	SHORT $LN27@sqlite3_en@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN8@sqlite3_en@2
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN16@sqlite3_en@2
$LN8@sqlite3_en@2:
	add	DWORD PTR _inMutex, 1
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
; Line 67309
	jmp	SHORT $LN16@sqlite3_en@2
$LN27@sqlite3_en@2:
; Line 67315
	cmp	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _enable$[esp-4]
	je	SHORT $LN1@sqlite3_en@2
	test	ecx, ecx
	jne	SHORT $LN1@sqlite3_en@2
; Line 67317
	mov	eax, 21					; 00000015H
; Line 67324
	ret	0
$LN1@sqlite3_en@2:
; Line 67320
	mov	BYTE PTR [eax+4], cl
; Line 67321
	or	eax, -1
	call	_sqlite3WinThreadSpecificData
$LN16@sqlite3_en@2:
; Line 67323
	xor	eax, eax
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN18@sqlite3_en@2
	cmp	DWORD PTR _inMutex, eax
	jle	SHORT $LN18@sqlite3_en@2
	sub	DWORD PTR _inMutex, 1
	push	eax
	push	7
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN18@sqlite3_en@2:
	and	eax, 255				; 000000ffH
; Line 67324
	ret	0
_sqlite3_enable_shared_cache ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerAcquire
_TEXT	SEGMENT
_pPg$ = -4						; size = 4
_ppPage$ = 8						; size = 4
_noContent$ = 12					; size = 4
_sqlite3PagerAcquire PROC				; COMDAT
; _pPager$ = ecx
; _pgno$ = eax
; Line 20852
	push	ecx
	push	ebx
	mov	ebx, eax
; Line 20861
	cmp	ebx, 2147483647				; 7fffffffH
	push	esi
	mov	esi, ecx
	ja	$LN18@sqlite3Pag@24
	test	ebx, ebx
	je	$LN18@sqlite3Pag@24
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	DWORD PTR [esi+56]
	add	eax, 1
	cmp	ebx, eax
	je	$LN18@sqlite3Pag@24
; Line 20868
	mov	eax, DWORD PTR _ppPage$[esp+8]
	mov	DWORD PTR [eax], 0
; Line 20869
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN17@sqlite3Pag@24
	cmp	eax, 13					; 0000000dH
; Line 20870
	jne	$LN20@sqlite3Pag@24
$LN17@sqlite3Pag@24:
; Line 20877
	call	_pagerSharedLock
; Line 20878
	test	eax, eax
; Line 20879
	jne	$LN20@sqlite3Pag@24
	push	ebp
	push	edi
; Line 20883
	mov	edx, ebx
	mov	ecx, esi
	call	_pager_lookup
	mov	edi, eax
; Line 20884
	test	edi, edi
	mov	DWORD PTR _pPg$[esp+20], edi
	jne	$LN15@sqlite3Pag@24
; Line 20889
	lea	ecx, DWORD PTR _pPg$[esp+20]
	push	ecx
	mov	eax, esi
	call	_pagerAllocatePage
	add	esp, 4
; Line 20890
	test	eax, eax
; Line 20891
	jne	SHORT $LN28@sqlite3Pag@24
; Line 20894
	mov	edi, DWORD PTR _pPg$[esp+20]
	mov	DWORD PTR [edi+4], ebx
; Line 20896
	mov	ebp, DWORD PTR [esi+76]
	test	ebp, ebp
	je	SHORT $LN13@sqlite3Pag@24
	cmp	ebx, DWORD PTR [esi+32]
	jg	SHORT $LN13@sqlite3Pag@24
; Line 20899
	mov	ecx, ebx
	and	ecx, 7
	mov	edx, 1
	shl	edx, cl
	mov	eax, ebx
	shr	eax, 3
	mov	cl, BYTE PTR [eax+ebp]
	test	dl, cl
	setne	dl
	mov	BYTE PTR [edi+28], dl
; Line 20901
	jmp	SHORT $LN30@sqlite3Pag@24
$LN13@sqlite3Pag@24:
; Line 20902
	mov	BYTE PTR [edi+28], 0
$LN30@sqlite3Pag@24:
; Line 20906
	mov	eax, edi
	mov	BYTE PTR [edi+30], 0
	call	_makeClean
; Line 20907
	mov	ebp, 1
	mov	WORD PTR [edi+34], bp
; Line 20911
	mov	eax, DWORD PTR [esi+52]
	add	DWORD PTR [esi+64], ebp
	test	eax, eax
	jle	SHORT $LN11@sqlite3Pag@24
; Line 20912
	push	eax
	mov	eax, DWORD PTR [esi+56]
	lea	ecx, DWORD PTR [eax+edi+48]
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN11@sqlite3Pag@24:
; Line 20914
	call	_sqlite3PagerPagecount
; Line 20915
	cmp	DWORD PTR [esi+24], 0
	je	SHORT $LN10@sqlite3Pag@24
; Line 20916
	mov	eax, edi
	call	_sqlite3PagerUnref
; Line 20918
	mov	eax, DWORD PTR [esi+24]
$LN28@sqlite3Pag@24:
	pop	edi
	pop	ebp
$LN20@sqlite3Pag@24:
	pop	esi
	pop	ebx
; Line 20969
	pop	ecx
	ret	0
$LN10@sqlite3Pag@24:
; Line 20924
	cmp	eax, ebx
	jl	SHORT $LN26@sqlite3Pag@24
	cmp	BYTE PTR [esi+16], 0
	jne	SHORT $LN26@sqlite3Pag@24
	cmp	DWORD PTR _noContent$[esp+16], 0
	je	SHORT $LN9@sqlite3Pag@24
	cmp	BYTE PTR [esi+15], 0
	je	SHORT $LN26@sqlite3Pag@24
$LN9@sqlite3Pag@24:
; Line 20933
	mov	eax, esi
	call	_readDbPage
	mov	ebp, eax
; Line 20934
	xor	eax, eax
	cmp	ebp, eax
	je	SHORT $LN23@sqlite3Pag@24
	cmp	ebp, 522				; 0000020aH
	je	SHORT $LN23@sqlite3Pag@24
; Line 20935
	mov	DWORD PTR [edi+4], eax
; Line 20936
	mov	eax, edi
	call	_sqlite3PagerUnref
	pop	edi
; Line 20937
	mov	eax, ebp
	pop	ebp
	pop	esi
	pop	ebx
; Line 20969
	pop	ecx
	ret	0
$LN26@sqlite3Pag@24:
; Line 20925
	cmp	ebx, DWORD PTR [esi+72]
	jbe	SHORT $LN7@sqlite3Pag@24
; Line 20926
	mov	eax, edi
	call	_sqlite3PagerUnref
	pop	edi
	pop	ebp
	pop	esi
; Line 20927
	mov	eax, 13					; 0000000dH
	pop	ebx
; Line 20969
	pop	ecx
	ret	0
$LN7@sqlite3Pag@24:
; Line 20929
	mov	edx, DWORD PTR [esi+56]
	push	edx
	lea	eax, DWORD PTR [edi+48]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 20930
	cmp	DWORD PTR _noContent$[esp+16], 0
	je	SHORT $LN22@sqlite3Pag@24
	cmp	BYTE PTR [esi+15], 0
	jne	SHORT $LN22@sqlite3Pag@24
	mov	eax, ebp
	jmp	SHORT $LN23@sqlite3Pag@24
$LN22@sqlite3Pag@24:
	xor	eax, eax
$LN23@sqlite3Pag@24:
	mov	BYTE PTR [edi+32], al
; Line 20943
	mov	eax, DWORD PTR [esi+188]
; Line 20945
	mov	ecx, DWORD PTR [esi+192]
	sub	eax, 1
	and	eax, ebx
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edi+8], edx
; Line 20946
	mov	ecx, DWORD PTR [esi+192]
	mov	DWORD PTR [ecx+eax*4], edi
; Line 20947
	cmp	DWORD PTR [edi+8], 0
	je	SHORT $LN27@sqlite3Pag@24
; Line 20949
	mov	edx, DWORD PTR [edi+8]
; Line 20967
	mov	eax, DWORD PTR _ppPage$[esp+16]
	mov	DWORD PTR [edx+12], edi
	mov	DWORD PTR [eax], edi
	pop	edi
	pop	ebp
	pop	esi
; Line 20968
	xor	eax, eax
	pop	ebx
; Line 20969
	pop	ecx
	ret	0
$LN15@sqlite3Pag@24:
; Line 20959
	cmp	DWORD PTR _noContent$[esp+16], 0
	jne	SHORT $LN1@sqlite3Pag@24
; Line 20960
	call	_pager_get_content
; Line 20961
	test	eax, eax
; Line 20962
	jne	$LN28@sqlite3Pag@24
$LN1@sqlite3Pag@24:
; Line 20965
	cmp	WORD PTR [edi+34], 0
	jne	SHORT $LN24@sqlite3Pag@24
	mov	eax, edi
	call	__page_ref
; Line 20967
	mov	eax, DWORD PTR _ppPage$[esp+16]
	mov	DWORD PTR [eax], edi
	pop	edi
	pop	ebp
	pop	esi
; Line 20968
	xor	eax, eax
	pop	ebx
; Line 20969
	pop	ecx
	ret	0
$LN24@sqlite3Pag@24:
; Line 20965
	add	WORD PTR [edi+34], 1
$LN27@sqlite3Pag@24:
; Line 20967
	mov	eax, DWORD PTR _ppPage$[esp+16]
	mov	DWORD PTR [eax], edi
	pop	edi
	pop	ebp
	pop	esi
; Line 20968
	xor	eax, eax
	pop	ebx
; Line 20969
	pop	ecx
	ret	0
$LN18@sqlite3Pag@24:
	pop	esi
; Line 20862
	mov	eax, 11					; 0000000bH
	pop	ebx
; Line 20969
	pop	ecx
	ret	0
_sqlite3PagerAcquire ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerWrite
_TEXT	SEGMENT
_nPage$85283 = -12					; size = 4
_ii$85284 = -8						; size = 4
_pPage$85300 = -4					; size = 4
_pDbPage$ = 8						; size = 4
_sqlite3PagerWrite PROC					; COMDAT
; Line 21430
	mov	ecx, DWORD PTR _pDbPage$[esp-4]
	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR [ecx]
; Line 21431
	mov	eax, DWORD PTR [esi+176]
	cdq
	idiv	DWORD PTR [esi+56]
	xor	ebp, ebp
; Line 21433
	cmp	BYTE PTR [esi+16], 0
	mov	ebx, eax
	jne	$LN13@sqlite3Pag@25
	cmp	ebx, 1
	jbe	$LN13@sqlite3Pag@25
	push	edi
; Line 21449
	mov	eax, ecx
	mov	BYTE PTR [esi+18], 1
	mov	ecx, DWORD PTR [eax+4]
	lea	edi, DWORD PTR [ebx-1]
	not	edi
	sub	ecx, 1
	and	edi, ecx
	add	edi, 1
; Line 21451
	call	_sqlite3PagerPagecount
; Line 21452
	mov	edx, DWORD PTR _pDbPage$[esp+24]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, eax
	jbe	SHORT $LN12@sqlite3Pag@25
; Line 21453
	sub	ecx, edi
	add	ecx, 1
	mov	DWORD PTR _nPage$85283[esp+28], ecx
	jmp	SHORT $LN9@sqlite3Pag@25
$LN12@sqlite3Pag@25:
; Line 21454
	lea	ecx, DWORD PTR [edi+ebx-1]
	cmp	ecx, eax
	jbe	SHORT $LN10@sqlite3Pag@25
; Line 21455
	sub	eax, edi
	add	eax, 1
	mov	DWORD PTR _nPage$85283[esp+28], eax
; Line 21456
	jmp	SHORT $LN9@sqlite3Pag@25
$LN10@sqlite3Pag@25:
; Line 21457
	mov	DWORD PTR _nPage$85283[esp+28], ebx
$LN9@sqlite3Pag@25:
; Line 21463
	cmp	DWORD PTR _nPage$85283[esp+28], ebp
	mov	DWORD PTR _ii$85284[esp+28], ebp
	jle	$LN6@sqlite3Pag@25
$LL19@sqlite3Pag@25:
	test	ebp, ebp
	jne	$LN6@sqlite3Pag@25
; Line 21467
	mov	eax, DWORD PTR [esi+76]
	test	eax, eax
	je	SHORT $LN20@sqlite3Pag@25
	mov	edx, DWORD PTR _pDbPage$[esp+24]
	cmp	edi, DWORD PTR [edx+4]
	je	SHORT $LN20@sqlite3Pag@25
	cmp	edi, DWORD PTR [esi+32]
	ja	SHORT $LN20@sqlite3Pag@25
	mov	ecx, edi
	and	ecx, 7
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edi
	shr	ecx, 3
	mov	al, BYTE PTR [ecx+eax]
	test	dl, al
	jne	SHORT $LN7@sqlite3Pag@25
$LN20@sqlite3Pag@25:
; Line 21468
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	DWORD PTR [esi+56]
	add	eax, 1
	cmp	edi, eax
	je	SHORT $LN7@sqlite3Pag@25
; Line 21470
	lea	ecx, DWORD PTR _pPage$85300[esp+28]
	push	0
	push	ecx
	mov	eax, edi
	mov	ecx, esi
	call	_sqlite3PagerAcquire
	mov	ebp, eax
	add	esp, 8
; Line 21471
	test	ebp, ebp
	jne	SHORT $LN7@sqlite3Pag@25
; Line 21472
	mov	ebx, DWORD PTR _pPage$85300[esp+28]
	push	ebx
	call	_pager_write
	mov	ebp, eax
	add	esp, 4
; Line 21473
	mov	eax, ebx
	call	_sqlite3PagerUnref
$LN7@sqlite3Pag@25:
	mov	eax, DWORD PTR _ii$85284[esp+28]
	add	eax, 1
	add	edi, 1
	cmp	eax, DWORD PTR _nPage$85283[esp+28]
	mov	DWORD PTR _ii$85284[esp+28], eax
	jl	$LL19@sqlite3Pag@25
$LN6@sqlite3Pag@25:
	pop	edi
; Line 21480
	mov	BYTE PTR [esi+18], 0
	pop	esi
; Line 21484
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 21485
	add	esp, 12					; 0000000cH
	ret	0
$LN13@sqlite3Pag@25:
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
; Line 21482
	mov	DWORD PTR _pDbPage$[esp-4], ecx
	jmp	_pager_write
_sqlite3PagerWrite ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerOverwrite
_TEXT	SEGMENT
_pPg$ = -4						; size = 4
_pgno$ = 8						; size = 4
_pData$ = 12						; size = 4
_sqlite3PagerOverwrite PROC				; COMDAT
; _pPager$ = ebx
; Line 21503
	push	ecx
; Line 21507
	lea	eax, DWORD PTR _pPg$[esp+4]
	push	0
	push	eax
	mov	eax, DWORD PTR _pgno$[esp+8]
	mov	ecx, ebx
	call	_sqlite3PagerAcquire
	add	esp, 8
; Line 21508
	test	eax, eax
	jne	SHORT $LN2@sqlite3Pag@26
	push	esi
; Line 21509
	mov	esi, DWORD PTR _pPg$[esp+8]
	push	edi
	push	esi
	call	_sqlite3PagerWrite
	mov	edi, eax
	add	esp, 4
; Line 21510
	test	edi, edi
	jne	SHORT $LN1@sqlite3Pag@26
; Line 21511
	mov	ecx, DWORD PTR [ebx+56]
	mov	edx, DWORD PTR _pData$[esp+8]
	push	ecx
	push	edx
	lea	eax, DWORD PTR [esi+48]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@sqlite3Pag@26:
; Line 21513
	mov	eax, esi
	call	_sqlite3PagerUnref
; Line 21515
	mov	eax, edi
	pop	edi
	pop	esi
$LN2@sqlite3Pag@26:
; Line 21516
	pop	ecx
	ret	0
_sqlite3PagerOverwrite ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _pager_incr_changecounter
_TEXT	SEGMENT
_pPgHdr$ = -4						; size = 4
_pager_incr_changecounter PROC				; COMDAT
; _pPager$ = edi
; Line 21614
	push	ecx
; Line 21619
	cmp	BYTE PTR [edi+20], 0
	push	esi
	jne	SHORT $LN3@pager_incr
; Line 21621
	lea	eax, DWORD PTR _pPgHdr$[esp+8]
	push	0
	push	eax
	mov	eax, 1
	mov	ecx, edi
	call	_sqlite3PagerAcquire
	add	esp, 8
; Line 21622
	test	eax, eax
	jne	SHORT $LN4@pager_incr
; Line 21623
	mov	esi, DWORD PTR _pPgHdr$[esp+8]
	push	esi
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 21624
	test	eax, eax
	jne	SHORT $LN4@pager_incr
; Line 21630
	movzx	ecx, BYTE PTR [esi+74]
	movzx	edx, BYTE PTR [esi+75]
	xor	eax, eax
	mov	ah, BYTE PTR [esi+72]
	mov	al, BYTE PTR [esi+73]
	shl	eax, 8
	or	eax, ecx
	shl	eax, 8
	or	eax, edx
	add	eax, 1
; Line 21631
	mov	ecx, eax
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [esi+72], cl
	mov	edx, eax
	mov	ecx, eax
	shr	edx, 16					; 00000010H
	shr	ecx, 8
	mov	BYTE PTR [esi+75], al
; Line 21634
	mov	eax, esi
	mov	BYTE PTR [esi+73], dl
	mov	BYTE PTR [esi+74], cl
	call	_sqlite3PagerUnref
; Line 21635
	mov	BYTE PTR [edi+20], 1
$LN3@pager_incr:
; Line 21637
	xor	eax, eax
$LN4@pager_incr:
	pop	esi
; Line 21638
	pop	ecx
	ret	0
_pager_incr_changecounter ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerCommitPhaseOne
_TEXT	SEGMENT
_pPg$85364 = -8						; size = 4
_iSkip$85371 = -4					; size = 4
_zMaster$ = 8						; size = 4
_nTrunc$ = 12						; size = 4
_sqlite3PagerCommitPhaseOne PROC			; COMDAT
; _pPager$ = eax
; Line 21657
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	mov	esi, eax
; Line 21658
	xor	eax, eax
; Line 21666
	cmp	BYTE PTR [esi+10], 5
	push	edi
	je	$LN19@sqlite3Pag@27
	cmp	BYTE PTR [esi+16], al
	jne	$LN36@sqlite3Pag@27
	cmp	BYTE PTR [esi+14], al
	je	$LN19@sqlite3Pag@27
; Line 21676
	cmp	BYTE PTR [esi+17], al
	jne	$LN33@sqlite3Pag@27
; Line 21677
	mov	edi, esi
	call	_pager_incr_changecounter
	mov	edi, eax
; Line 21678
	test	edi, edi
	jne	$sync_exit$85368
; Line 21680
	mov	ebp, DWORD PTR _nTrunc$[esp+20]
	test	ebp, ebp
	je	SHORT $LN13@sqlite3Pag@27
; Line 21686
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	DWORD PTR [esi+56]
; Line 21687
	add	ebp, 1
	add	eax, 1
	cmp	ebp, DWORD PTR [esi+32]
	mov	DWORD PTR _iSkip$85371[esp+24], eax
	ja	SHORT $LN13@sqlite3Pag@27
$LL34@sqlite3Pag@27:
; Line 21688
	mov	edi, DWORD PTR [esi+76]
	mov	ecx, ebp
	and	ecx, 7
	mov	edx, 1
	shl	edx, cl
	mov	ecx, ebp
	shr	ecx, 3
	mov	cl, BYTE PTR [ecx+edi]
	test	dl, cl
	jne	SHORT $LN14@sqlite3Pag@27
	cmp	ebp, eax
	je	SHORT $LN14@sqlite3Pag@27
; Line 21689
	lea	edx, DWORD PTR _pPg$85364[esp+24]
	push	0
	push	edx
	mov	eax, ebp
	mov	ecx, esi
	call	_sqlite3PagerAcquire
	mov	edi, eax
	add	esp, 8
; Line 21690
	test	edi, edi
	jne	$sync_exit$85368
; Line 21691
	mov	ebx, DWORD PTR _pPg$85364[esp+24]
	push	ebx
	call	_sqlite3PagerWrite
	mov	edi, eax
	add	esp, 4
; Line 21692
	mov	eax, ebx
	call	_sqlite3PagerUnref
; Line 21693
	test	edi, edi
	jne	$sync_exit$85368
	mov	eax, DWORD PTR _iSkip$85371[esp+24]
$LN14@sqlite3Pag@27:
; Line 21687
	add	ebp, 1
	cmp	ebp, DWORD PTR [esi+32]
	jbe	SHORT $LL34@sqlite3Pag@27
$LN13@sqlite3Pag@27:
; Line 21698
	mov	eax, DWORD PTR _zMaster$[esp+20]
	push	eax
	call	_writeMasterJournal
	mov	edi, eax
	add	esp, 4
; Line 21699
	test	edi, edi
	jne	SHORT $sync_exit$85368
; Line 21700
	call	_syncJournal
	mov	edi, eax
; Line 21701
	test	edi, edi
	jne	SHORT $sync_exit$85368
$LN33@sqlite3Pag@27:
; Line 21705
	mov	edi, DWORD PTR _nTrunc$[esp+20]
	test	edi, edi
	je	SHORT $LN6@sqlite3Pag@27
; Line 21706
	mov	eax, esi
	call	_sqlite3PagerTruncate
	mov	edi, eax
; Line 21707
	test	edi, edi
	jne	SHORT $sync_exit$85368
$LN6@sqlite3Pag@27:
; Line 21713
	mov	eax, DWORD PTR [esi+132]
	call	_pager_write_pagelist
	mov	edi, eax
; Line 21714
	test	edi, edi
	jne	SHORT $sync_exit$85368
; Line 21718
	cmp	BYTE PTR [esi+7], al
	mov	DWORD PTR [esi+132], eax
	jne	SHORT $LN4@sqlite3Pag@27
; Line 21719
	mov	eax, DWORD PTR [esi+96]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	edi
	push	eax
	call	edx
	add	esp, 8
	mov	edi, eax
$LN4@sqlite3Pag@27:
; Line 21723
	mov	BYTE PTR [esi+10], 5
	jmp	SHORT $sync_exit$85368
$LN19@sqlite3Pag@27:
; Line 21724
	cmp	BYTE PTR [esi+16], al
	je	SHORT $LN1@sqlite3Pag@27
$LN36@sqlite3Pag@27:
	mov	edi, DWORD PTR _nTrunc$[esp+20]
	test	edi, edi
	je	SHORT $LN1@sqlite3Pag@27
; Line 21725
	mov	eax, esi
	call	_sqlite3PagerTruncate
	mov	edi, eax
$sync_exit$85368:
; Line 21729
	cmp	edi, 2826				; 00000b0aH
; Line 21735
	mov	eax, 5
	je	SHORT $LN1@sqlite3Pag@27
; Line 21737
	mov	eax, edi
$LN1@sqlite3Pag@27:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 21738
	add	esp, 8
	ret	0
_sqlite3PagerCommitPhaseOne ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3PagerMovepage
_TEXT	SEGMENT
_needSyncPgno$ = 8					; size = 4
_pPager$ = 8						; size = 4
_pPgHdr$85523 = 12					; size = 4
_pgno$ = 12						; size = 4
_sqlite3PagerMovepage PROC				; COMDAT
; _pPg$ = eax
; Line 22086
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pPager$[esp+4]
	push	esi
	push	edi
	mov	edi, eax
; Line 22097
	cmp	BYTE PTR [edi+32], 0
	mov	DWORD PTR _needSyncPgno$[esp+12], 0
	je	SHORT $LN37@sqlite3Pag@28
	mov	ebx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	call	_readDbPage
	test	eax, eax
	jne	SHORT $LN37@sqlite3Pag@28
	mov	BYTE PTR [edi+32], al
$LN37@sqlite3Pag@28:
; Line 22098
	cmp	BYTE PTR [edi+30], 0
	je	SHORT $LN8@sqlite3Pag@28
; Line 22099
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR _needSyncPgno$[esp+12], eax
$LN8@sqlite3Pag@28:
; Line 22106
	mov	esi, edi
	mov	eax, ebp
	call	_unlinkHashChain
; Line 22114
	mov	ebx, DWORD PTR _pgno$[esp+12]
	mov	BYTE PTR [edi+30], 0
	mov	eax, DWORD PTR [ebp+192]
	test	eax, eax
	je	SHORT $LN7@sqlite3Pag@28
	mov	ecx, DWORD PTR [ebp+188]
	sub	ecx, 1
	and	ecx, ebx
	mov	esi, DWORD PTR [eax+ecx*4]
	test	esi, esi
	je	SHORT $LN7@sqlite3Pag@28
$LL17@sqlite3Pag@28:
	cmp	DWORD PTR [esi+4], ebx
	je	SHORT $LN16@sqlite3Pag@28
	mov	esi, DWORD PTR [esi+8]
	test	esi, esi
	jne	SHORT $LL17@sqlite3Pag@28
$LN7@sqlite3Pag@28:
; Line 22121
	mov	BYTE PTR [edi+30], 0
$LN6@sqlite3Pag@28:
; Line 22123
	mov	esi, DWORD PTR [ebp+76]
	xor	edx, edx
	cmp	esi, edx
	je	SHORT $LN5@sqlite3Pag@28
	cmp	ebx, DWORD PTR [ebp+32]
	jg	SHORT $LN5@sqlite3Pag@28
; Line 22124
	mov	ecx, ebx
	and	ecx, 7
	mov	eax, 1
	shl	eax, cl
	mov	ecx, ebx
	shr	ecx, 3
	mov	cl, BYTE PTR [ecx+esi]
	test	al, cl
	setne	al
	mov	BYTE PTR [edi+28], al
; Line 22125
	jmp	SHORT $LN4@sqlite3Pag@28
; Line 22114
$LN16@sqlite3Pag@28:
; Line 22115
	test	esi, esi
	je	SHORT $LN7@sqlite3Pag@28
; Line 22117
	mov	eax, ebp
	call	_unlinkHashChain
; Line 22118
	cmp	BYTE PTR [esi+29], 0
	je	SHORT $LN21@sqlite3Pag@28
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	mov	BYTE PTR [esi+29], 0
	je	SHORT $LN23@sqlite3Pag@28
	mov	edx, DWORD PTR [esi+40]
	mov	DWORD PTR [eax+40], edx
$LN23@sqlite3Pag@28:
	mov	eax, DWORD PTR [esi+40]
	test	eax, eax
	je	SHORT $LN22@sqlite3Pag@28
	mov	ecx, DWORD PTR [esi+36]
	mov	DWORD PTR [eax+36], ecx
; Line 22119
	mov	cl, BYTE PTR [esi+30]
	mov	BYTE PTR [edi+30], cl
; Line 22120
	jmp	SHORT $LN6@sqlite3Pag@28
; Line 22118
$LN22@sqlite3Pag@28:
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [edx+132], eax
$LN21@sqlite3Pag@28:
; Line 22119
	mov	cl, BYTE PTR [esi+30]
	mov	BYTE PTR [edi+30], cl
; Line 22120
	jmp	SHORT $LN6@sqlite3Pag@28
$LN5@sqlite3Pag@28:
; Line 22126
	mov	BYTE PTR [edi+28], 0
$LN4@sqlite3Pag@28:
; Line 22132
	mov	DWORD PTR [edi+4], ebx
; Line 22133
	mov	eax, DWORD PTR [ebp+188]
; Line 22134
	mov	ecx, DWORD PTR [ebp+192]
	sub	eax, 1
	and	eax, ebx
	cmp	DWORD PTR [ecx+eax*4], edx
	lea	ecx, DWORD PTR [ecx+eax*4]
	je	SHORT $LN3@sqlite3Pag@28
; Line 22136
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+12], edi
$LN3@sqlite3Pag@28:
; Line 22138
	mov	ecx, DWORD PTR [ebp+192]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edi+8], ecx
; Line 22139
	mov	ecx, DWORD PTR [ebp+192]
	mov	DWORD PTR [ecx+eax*4], edi
; Line 22142
	cmp	BYTE PTR [edi+29], 0
	mov	DWORD PTR [edi+12], edx
	jne	SHORT $LN28@sqlite3Pag@28
	mov	eax, DWORD PTR [edi]
	mov	BYTE PTR [edi+29], 1
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR [edi+36], ecx
	mov	ecx, DWORD PTR [eax+132]
	cmp	ecx, edx
	je	SHORT $LN27@sqlite3Pag@28
	mov	DWORD PTR [ecx+40], edi
$LN27@sqlite3Pag@28:
	mov	DWORD PTR [edi+40], edx
	mov	DWORD PTR [eax+132], edi
$LN28@sqlite3Pag@28:
; Line 22145
	mov	eax, DWORD PTR _needSyncPgno$[esp+12]
	cmp	eax, edx
	mov	BYTE PTR [ebp+14], 1
	je	SHORT $LN2@sqlite3Pag@28
; Line 22158
	push	edx
	lea	edx, DWORD PTR _pPgHdr$85523[esp+16]
	push	edx
	mov	ecx, ebp
	call	_sqlite3PagerAcquire
	add	esp, 8
; Line 22159
	test	eax, eax
	jne	SHORT $LN9@sqlite3Pag@28
; Line 22161
	mov	eax, DWORD PTR _pPgHdr$85523[esp+12]
	mov	BYTE PTR [ebp+13], 1
	mov	BYTE PTR [eax+30], 1
; Line 22162
	mov	BYTE PTR [eax+28], 1
; Line 22163
	cmp	BYTE PTR [eax+29], 0
	jne	SHORT $LN32@sqlite3Pag@28
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [eax+29], 1
	mov	edx, DWORD PTR [ecx+132]
	mov	DWORD PTR [eax+36], edx
	mov	edx, DWORD PTR [ecx+132]
	test	edx, edx
	je	SHORT $LN31@sqlite3Pag@28
	mov	DWORD PTR [edx+40], eax
$LN31@sqlite3Pag@28:
	mov	DWORD PTR [eax+40], 0
	mov	DWORD PTR [ecx+132], eax
$LN32@sqlite3Pag@28:
; Line 22164
	call	_sqlite3PagerUnref
$LN2@sqlite3Pag@28:
; Line 22167
	xor	eax, eax
$LN9@sqlite3Pag@28:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 22168
	ret	0
_sqlite3PagerMovepage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ptrmapPut
_TEXT	SEGMENT
_pDbPage$ = -4						; size = 4
_eType$ = 8						; size = 1
_ptrmapPut PROC						; COMDAT
; _pBt$ = ecx
; _key$ = eax
; _parent$ = ebx
; Line 23171
	push	ecx
	push	esi
	mov	esi, eax
; Line 23182
	test	esi, esi
	push	edi
	mov	edi, ecx
	jne	SHORT $LN5@ptrmapPut
	pop	edi
; Line 23183
	lea	eax, DWORD PTR [esi+11]
	pop	esi
; Line 23204
	pop	ecx
	ret	0
$LN5@ptrmapPut:
; Line 23185
	movzx	ecx, WORD PTR [edi+26]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	push	ebp
	lea	ebp, DWORD PTR [edx+eax+1]
	xor	edx, edx
	lea	eax, DWORD PTR [esi-2]
	div	ebp
	mov	ecx, eax
	imul	ecx, ebp
	movzx	ebp, WORD PTR [edi+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ebp
	add	ecx, 2
	add	eax, 1
	cmp	ecx, eax
	jne	SHORT $LN8@ptrmapPut
	add	ecx, 1
$LN8@ptrmapPut:
; Line 23186
	lea	edx, DWORD PTR _pDbPage$[esp+16]
	push	0
	mov	eax, ecx
	mov	ecx, DWORD PTR [edi]
	push	edx
	call	_sqlite3PagerAcquire
	mov	ebp, eax
	add	esp, 8
; Line 23187
	test	ebp, ebp
; Line 23188
	jne	SHORT $LN18@ptrmapPut
; Line 23190
	push	esi
	call	_ptrmapPageno
; Line 23191
	mov	edi, DWORD PTR _pDbPage$[esp+20]
	sub	esi, eax
; Line 23193
	mov	al, BYTE PTR _eType$[esp+16]
	sub	esi, 1
	lea	esi, DWORD PTR [esi+esi*4]
	add	esp, 4
	cmp	al, BYTE PTR [edi+esi+48]
	jne	SHORT $LN2@ptrmapPut
	movzx	edx, BYTE PTR [edi+esi+51]
	movzx	eax, BYTE PTR [edi+esi+52]
	xor	ecx, ecx
	mov	ch, BYTE PTR [edi+esi+49]
	mov	cl, BYTE PTR [edi+esi+50]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	cmp	ecx, ebx
	je	SHORT $LN15@ptrmapPut
$LN2@ptrmapPut:
; Line 23195
	push	edi
	call	_sqlite3PagerWrite
	mov	ebp, eax
	add	esp, 4
; Line 23196
	test	ebp, ebp
	jne	SHORT $LN15@ptrmapPut
; Line 23197
	mov	cl, BYTE PTR _eType$[esp+12]
	mov	BYTE PTR [edi+esi+48], cl
; Line 23198
	mov	edx, ebx
	mov	eax, ebx
	shr	edx, 24					; 00000018H
	shr	eax, 16					; 00000010H
	mov	ecx, ebx
	shr	ecx, 8
	mov	BYTE PTR [edi+esi+49], dl
	mov	BYTE PTR [edi+esi+50], al
	mov	BYTE PTR [edi+esi+51], cl
	mov	BYTE PTR [edi+esi+52], bl
$LN15@ptrmapPut:
; Line 23202
	mov	eax, edi
	call	_sqlite3PagerUnref
$LN18@ptrmapPut:
; Line 23203
	mov	eax, ebp
	pop	ebp
	pop	edi
	pop	esi
; Line 23204
	pop	ecx
	ret	0
_ptrmapPut ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ptrmapGet
_TEXT	SEGMENT
_pDbPage$ = -4						; size = 4
_pEType$ = 8						; size = 4
_pPgno$ = 12						; size = 4
_ptrmapGet PROC						; COMDAT
; _pBt$ = ecx
; _key$ = eax
; Line 23213
	push	ecx
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
; Line 23220
	movzx	ecx, WORD PTR [esi+26]
	push	edi
	mov	edi, eax
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	ebx, DWORD PTR [edx+eax+1]
	xor	edx, edx
	lea	ebp, DWORD PTR [edi-2]
	mov	eax, ebp
	div	ebx
	mov	ecx, eax
	imul	ecx, ebx
	movzx	ebx, WORD PTR [esi+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ebx
	add	ecx, 2
	add	eax, 1
	cmp	ecx, eax
	jne	SHORT $LN7@ptrmapGet
	add	ecx, 1
$LN7@ptrmapGet:
; Line 23221
	lea	edx, DWORD PTR _pDbPage$[esp+20]
	push	0
	mov	eax, ecx
	mov	ecx, DWORD PTR [esi]
	push	edx
	call	_sqlite3PagerAcquire
	add	esp, 8
; Line 23222
	test	eax, eax
; Line 23223
	jne	$LN5@ptrmapGet
; Line 23227
	movzx	ecx, WORD PTR [esi+26]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	ebx, DWORD PTR [edx+eax+1]
	xor	edx, edx
	mov	eax, ebp
	div	ebx
	movzx	esi, WORD PTR [esi+24]
	mov	ecx, eax
	mov	eax, 1073741824				; 40000000H
	imul	ecx, ebx
	cdq
	idiv	esi
	add	ecx, 2
	add	eax, 1
	cmp	ecx, eax
	jne	SHORT $LN12@ptrmapGet
	add	ecx, 1
$LN12@ptrmapGet:
; Line 23229
	mov	eax, DWORD PTR _pDbPage$[esp+20]
; Line 23230
	mov	esi, DWORD PTR _pPgno$[esp+16]
	sub	edi, ecx
	sub	edi, 1
	test	esi, esi
	lea	ecx, DWORD PTR [edi+edi*4]
	mov	dl, BYTE PTR [ecx+eax+48]
	mov	edi, DWORD PTR _pEType$[esp+16]
	mov	BYTE PTR [edi], dl
	je	SHORT $LN3@ptrmapGet
	movzx	ebx, BYTE PTR [ecx+eax+51]
	xor	edx, edx
	mov	dh, BYTE PTR [ecx+eax+49]
	mov	dl, BYTE PTR [ecx+eax+50]
	movzx	ecx, BYTE PTR [ecx+eax+52]
	shl	edx, 8
	or	edx, ebx
	shl	edx, 8
	or	edx, ecx
	mov	DWORD PTR [esi], edx
$LN3@ptrmapGet:
; Line 23232
	call	_sqlite3PagerUnref
; Line 23233
	mov	al, BYTE PTR [edi]
	cmp	al, 1
	jb	SHORT $LN1@ptrmapGet
	cmp	al, 5
	ja	SHORT $LN1@ptrmapGet
	pop	edi
	pop	esi
	pop	ebp
; Line 23234
	xor	eax, eax
	pop	ebx
; Line 23235
	pop	ecx
	ret	0
$LN1@ptrmapGet:
; Line 23233
	mov	eax, 11					; 0000000bH
$LN5@ptrmapGet:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 23235
	pop	ecx
	ret	0
_ptrmapGet ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ptrmapPutOvflPtr
_TEXT	SEGMENT
_info$85929 = -32					; size = 32
_ptrmapPutOvflPtr PROC					; COMDAT
; _pPage$ = edi
; _pCell$ = eax
; Line 23386
	sub	esp, 32					; 00000020H
	push	ebx
	mov	ebx, eax
; Line 23387
	test	ebx, ebx
	push	esi
	je	SHORT $LN1@ptrmapPutO@2
; Line 23389
	push	ebx
	push	edi
	lea	esi, DWORD PTR _info$85929[esp+48]
	call	_sqlite3BtreeParseCellPtr
	add	esp, 8
; Line 23391
	cmp	BYTE PTR [edi+3], 0
	je	SHORT $LN5@ptrmapPutO@2
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN6@ptrmapPutO@2
$LN5@ptrmapPutO@2:
	mov	eax, DWORD PTR _info$85929[esp+48]
	mov	edx, DWORD PTR _info$85929[esp+52]
$LN6@ptrmapPutO@2:
	mov	esi, DWORD PTR _info$85929[esp+56]
	xor	ecx, ecx
	add	esi, eax
	movzx	eax, WORD PTR _info$85929[esp+66]
	adc	ecx, edx
	cdq
	cmp	ecx, edx
	jl	SHORT $LN1@ptrmapPutO@2
	jg	SHORT $LN9@ptrmapPutO@2
	cmp	esi, eax
	jbe	SHORT $LN1@ptrmapPutO@2
$LN9@ptrmapPutO@2:
; Line 23392
	movzx	eax, WORD PTR _info$85929[esp+68]
	movzx	edx, BYTE PTR [eax+ebx+2]
	add	eax, ebx
; Line 23393
	mov	ebx, DWORD PTR [edi+76]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax]
	push	3
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	eax, ecx
	mov	ecx, DWORD PTR [edi+64]
	call	_ptrmapPut
	add	esp, 4
	pop	esi
	pop	ebx
; Line 23397
	add	esp, 32					; 00000020H
	ret	0
$LN1@ptrmapPutO@2:
	pop	esi
; Line 23396
	xor	eax, eax
	pop	ebx
; Line 23397
	add	esp, 32					; 00000020H
	ret	0
_ptrmapPutOvflPtr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _ptrmapPutOvfl
_TEXT	SEGMENT
_ptrmapPutOvfl PROC					; COMDAT
; _pPage$ = ecx
; _iCell$ = eax
; Line 23403
	push	edi
	mov	edi, ecx
; Line 23405
	call	_findOverflowCell
; Line 23406
	call	_ptrmapPutOvflPtr
	pop	edi
; Line 23407
	ret	0
_ptrmapPutOvfl ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeGetPage
_TEXT	SEGMENT
_pDbPage$ = -4						; size = 4
_ppPage$ = 8						; size = 4
_sqlite3BtreeGetPage PROC				; COMDAT
; _pBt$ = edi
; _pgno$ = esi
; _noContent$ = eax
; Line 23756
	push	ecx
; Line 23761
	push	eax
	lea	ecx, DWORD PTR _pDbPage$[esp+8]
	push	ecx
	mov	ecx, DWORD PTR [edi]
	mov	eax, esi
	call	_sqlite3PagerAcquire
	add	esp, 8
; Line 23762
	test	eax, eax
	jne	SHORT $LN2@sqlite3Btr@28
; Line 23763
	mov	ecx, DWORD PTR _pDbPage$[esp+4]
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN6@sqlite3Btr@28
	mov	edx, DWORD PTR [eax+56]
	lea	eax, DWORD PTR [edx+ecx+48]
	jmp	SHORT $LN7@sqlite3Btr@28
$LN6@sqlite3Btr@28:
	xor	eax, eax
$LN7@sqlite3Btr@28:
; Line 23764
	lea	edx, DWORD PTR [ecx+48]
; Line 23765
	mov	DWORD PTR [eax+72], ecx
; Line 23768
	cmp	esi, 1
	setne	cl
	sub	cl, 1
	mov	DWORD PTR [eax+68], edx
; Line 23769
	mov	edx, DWORD PTR _ppPage$[esp]
	mov	DWORD PTR [eax+64], edi
	mov	DWORD PTR [eax+76], esi
	and	ecx, 100				; 00000064H
	mov	BYTE PTR [eax+8], cl
	mov	DWORD PTR [edx], eax
; Line 23770
	xor	eax, eax
$LN2@sqlite3Btr@28:
; Line 23771
	pop	ecx
	ret	0
_sqlite3BtreeGetPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _getAndInitPage
_TEXT	SEGMENT
_pParent$ = 8						; size = 4
_getAndInitPage PROC					; COMDAT
; _pBt$ = edi
; _pgno$ = ecx
; _ppPage$ = eax
; Line 23783
	push	ebx
	push	esi
	mov	esi, ecx
; Line 23785
	test	esi, esi
	mov	ebx, eax
	jne	SHORT $LN2@getAndInit
	pop	esi
; Line 23786
	lea	eax, DWORD PTR [ecx+11]
	pop	ebx
; Line 23793
	ret	0
$LN2@getAndInit:
; Line 23788
	push	ebx
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 23789
	test	eax, eax
	jne	SHORT $LN3@getAndInit
	mov	ebx, DWORD PTR [ebx]
	cmp	BYTE PTR [ebx], al
	jne	SHORT $LN3@getAndInit
; Line 23790
	mov	eax, DWORD PTR _pParent$[esp+4]
	push	eax
	call	_sqlite3BtreeInitPage
	add	esp, 4
$LN3@getAndInit:
	pop	esi
	pop	ebx
; Line 23793
	ret	0
_getAndInitPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeClose
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3BtreeClose PROC					; COMDAT
; Line 24001
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _p$[esp+4]
; Line 24002
	mov	ebx, DWORD PTR [ebp+4]
	push	esi
; Line 24010
	mov	esi, DWORD PTR [ebx+4]
; Line 24011
	test	esi, esi
	je	SHORT $LN10@sqlite3Btr@29
	push	edi
$LL11@sqlite3Btr@29:
; Line 24012
	mov	edi, esi
; Line 24014
	cmp	DWORD PTR [edi], ebp
	mov	esi, DWORD PTR [esi+4]
	jne	SHORT $LN9@sqlite3Btr@29
; Line 24015
	call	_sqlite3BtreeCloseCursor
$LN9@sqlite3Btr@29:
; Line 24011
	test	esi, esi
	jne	SHORT $LL11@sqlite3Btr@29
	pop	edi
$LN10@sqlite3Btr@29:
; Line 24023
	push	ebp
	call	_sqlite3BtreeRollback
; Line 24024
	push	ebp
	call	_free
	add	esp, 8
; Line 24032
	add	DWORD PTR [ebx+52], -1
; Line 24034
	jne	SHORT $LN63@sqlite3Btr@29
; Line 24041
	call	_sqlite3ThreadDataReadOnly
; Line 24042
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, ebx
	jne	SHORT $LN7@sqlite3Btr@29
; Line 24044
	mov	ecx, DWORD PTR [ebx+72]
	mov	DWORD PTR [eax+8], ecx
; Line 24045
	jmp	SHORT $LN2@sqlite3Btr@29
$LN7@sqlite3Btr@29:
; Line 24047
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN2@sqlite3Btr@29
$LL5@sqlite3Btr@29:
	mov	ecx, DWORD PTR [eax+72]
	cmp	ecx, ebx
	je	SHORT $LN3@sqlite3Btr@29
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LL5@sqlite3Btr@29
; Line 24048
	jmp	SHORT $LN2@sqlite3Btr@29
$LN3@sqlite3Btr@29:
; Line 24050
	mov	edx, DWORD PTR [ebx+72]
	mov	DWORD PTR [eax+72], edx
$LN2@sqlite3Btr@29:
; Line 24057
	mov	eax, DWORD PTR [ebx]
	call	_sqlite3PagerClose
; Line 24058
	mov	ecx, DWORD PTR [ebx+64]
	test	ecx, ecx
	je	SHORT $LN1@sqlite3Btr@29
	mov	eax, DWORD PTR [ebx+60]
	test	eax, eax
	je	SHORT $LN1@sqlite3Btr@29
; Line 24059
	push	eax
	call	ecx
	add	esp, 4
$LN1@sqlite3Btr@29:
; Line 24061
	mov	eax, DWORD PTR [ebx+60]
	test	eax, eax
	je	SHORT $LN53@sqlite3Btr@29
	push	eax
	call	_free
	add	esp, 4
$LN53@sqlite3Btr@29:
; Line 24062
	push	ebx
	call	_free
	add	esp, 4
$LN63@sqlite3Btr@29:
	pop	esi
	pop	ebp
; Line 24063
	xor	eax, eax
	pop	ebx
; Line 24064
	ret	0
_sqlite3BtreeClose ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _lockBtree
_TEXT	SEGMENT
_pPage$128331 = -4					; size = 4
_pDbPage$128332 = -4					; size = 4
_lockBtree PROC						; COMDAT
; _pBt$ = edi
; Line 24225
	push	ecx
; Line 24228
	cmp	DWORD PTR [edi+8], 0
	je	SHORT $LN11@lockBtree
	xor	eax, eax
; Line 24294
	pop	ecx
	ret	0
$LN11@lockBtree:
; Line 24229
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR _pDbPage$128332[esp+4]
	push	0
	push	eax
	mov	eax, 1
	call	_sqlite3PagerAcquire
	add	esp, 8
	test	eax, eax
	jne	$LN12@lockBtree
	mov	eax, DWORD PTR _pDbPage$128332[esp+4]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	push	ebx
	je	SHORT $LN25@lockBtree
	mov	ecx, DWORD PTR [ecx+56]
	lea	ebx, DWORD PTR [ecx+eax+48]
	jmp	SHORT $LN45@lockBtree
$LN25@lockBtree:
	xor	ebx, ebx
$LN45@lockBtree:
	lea	edx, DWORD PTR [eax+48]
	push	ebp
	mov	DWORD PTR [ebx+68], edx
	mov	DWORD PTR [ebx+72], eax
	mov	DWORD PTR [ebx+64], edi
	mov	DWORD PTR [ebx+76], 1
	mov	BYTE PTR [ebx+8], 100			; 00000064H
	push	esi
; Line 24237
	mov	esi, DWORD PTR [edi]
	mov	DWORD PTR _pPage$128331[esp+16], ebx
	call	_sqlite3PagerPagecount
	test	eax, eax
	jle	$LN9@lockBtree
; Line 24238
	mov	ebp, DWORD PTR [ebx+68]
; Line 24239
	mov	eax, 16					; 00000010H
	mov	ecx, OFFSET _zMagicHeader
	mov	edx, ebp
$LL15@lockBtree:
	mov	esi, DWORD PTR [edx]
	cmp	esi, DWORD PTR [ecx]
	jne	SHORT $LN16@lockBtree
	sub	eax, 4
	add	ecx, 4
	add	edx, 4
	cmp	eax, 4
	jae	SHORT $LL15@lockBtree
	test	eax, eax
	je	SHORT $LN17@lockBtree
$LN16@lockBtree:
	movzx	esi, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [ecx]
	sub	esi, ebx
	jne	SHORT $LN38@lockBtree
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN39@lockBtree
	movzx	esi, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [ecx]
	sub	esi, ebx
	jne	SHORT $LN38@lockBtree
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN39@lockBtree
	movzx	esi, BYTE PTR [edx]
	movzx	ebx, BYTE PTR [ecx]
	sub	esi, ebx
	jne	SHORT $LN38@lockBtree
	sub	eax, 1
	add	ecx, 1
	add	edx, 1
	test	eax, eax
	je	SHORT $LN39@lockBtree
	movzx	esi, BYTE PTR [edx]
	movzx	eax, BYTE PTR [ecx]
	sub	esi, eax
	je	SHORT $LN39@lockBtree
$LN38@lockBtree:
	test	esi, esi
	mov	ebx, DWORD PTR _pPage$128331[esp+16]
	mov	eax, 1
	jg	SHORT $LN19@lockBtree
	or	eax, -1
	jmp	SHORT $LN19@lockBtree
$LN39@lockBtree:
	mov	ebx, DWORD PTR _pPage$128331[esp+16]
$LN17@lockBtree:
	xor	eax, eax
$LN19@lockBtree:
	test	eax, eax
	jne	$page1_init_failed$86287
; Line 24242
	cmp	BYTE PTR [ebp+18], 1
	jbe	SHORT $LN7@lockBtree
; Line 24243
	mov	BYTE PTR [edi+13], 1
$LN7@lockBtree:
; Line 24245
	cmp	BYTE PTR [ebp+19], 1
	ja	$page1_init_failed$86287
; Line 24248
	xor	eax, eax
	mov	ah, BYTE PTR [ebp+16]
	mov	al, BYTE PTR [ebp+17]
; Line 24249
	lea	ecx, DWORD PTR [eax-1]
	test	ecx, eax
	jne	$page1_init_failed$86287
	cmp	eax, 512				; 00000200H
	jl	$page1_init_failed$86287
; Line 24253
	mov	WORD PTR [edi+24], ax
; Line 24254
	movzx	dx, BYTE PTR [ebp+20]
	sub	ax, dx
; Line 24255
	cmp	ax, 500					; 000001f4H
	mov	WORD PTR [edi+26], ax
	jb	$page1_init_failed$86287
; Line 24258
	movzx	eax, BYTE PTR [ebp+21]
	mov	BYTE PTR [edi+14], al
; Line 24259
	mov	cl, BYTE PTR [ebp+22]
	mov	BYTE PTR [edi+15], cl
; Line 24260
	mov	dl, BYTE PTR [ebp+23]
; Line 24262
	xor	eax, eax
	mov	BYTE PTR [edi+16], dl
	mov	ah, BYTE PTR [ebp+52]
	movzx	ecx, BYTE PTR [ebp+54]
	movzx	edx, BYTE PTR [ebp+55]
	mov	al, BYTE PTR [ebp+53]
	shl	eax, 8
	or	eax, ecx
	shl	eax, 8
	or	eax, edx
	setne	al
	mov	BYTE PTR [edi+18], al
$LN9@lockBtree:
; Line 24279
	movzx	ecx, WORD PTR [edi+26]
	movzx	edx, BYTE PTR [edi+14]
	sub	ecx, 12					; 0000000cH
	imul	ecx, edx
	mov	eax, -2139062143			; 80808081H
	imul	ecx
	add	edx, ecx
	sar	edx, 7
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR [edx+eax-23]
; Line 24280
	movzx	edx, BYTE PTR [edi+15]
	mov	DWORD PTR [edi+28], ecx
	movzx	ecx, WORD PTR [edi+26]
	sub	ecx, 12					; 0000000cH
	imul	ecx, edx
	mov	eax, -2139062143			; 80808081H
	imul	ecx
	add	edx, ecx
	sar	edx, 7
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR [edx+eax-23]
; Line 24282
	movzx	eax, BYTE PTR [edi+16]
	movzx	edx, WORD PTR [edi+26]
	mov	DWORD PTR [edi+32], ecx
	movzx	ecx, WORD PTR [edi+26]
	sub	ecx, 12					; 0000000cH
	imul	ecx, eax
	sub	edx, 35					; 00000023H
	mov	DWORD PTR [edi+36], edx
	mov	eax, -2139062143			; 80808081H
	imul	ecx
; Line 24283
	mov	eax, DWORD PTR [edi+28]
	add	edx, ecx
	sar	edx, 7
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	cmp	DWORD PTR [edi+32], eax
	lea	edx, DWORD PTR [edx+ecx-23]
	mov	DWORD PTR [edi+40], edx
	jg	SHORT $page1_init_failed$86287
	test	eax, eax
	jl	SHORT $page1_init_failed$86287
	pop	esi
	pop	ebp
; Line 24287
	mov	DWORD PTR [edi+8], ebx
; Line 24288
	xor	eax, eax
	pop	ebx
; Line 24294
	pop	ecx
	ret	0
$page1_init_failed$86287:
; Line 24291
	mov	eax, DWORD PTR [ebx+72]
	call	_sqlite3PagerUnref
	pop	esi
	pop	ebp
; Line 24292
	mov	DWORD PTR [edi+8], 0
; Line 24293
	mov	eax, 26					; 0000001aH
	pop	ebx
$LN12@lockBtree:
; Line 24294
	pop	ecx
	ret	0
_lockBtree ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _newDatabase
_TEXT	SEGMENT
_pBt$ = 8						; size = 4
_newDatabase PROC					; COMDAT
; Line 24347
	push	ebp
	mov	ebp, DWORD PTR _pBt$[esp]
	push	esi
; Line 24351
	mov	esi, DWORD PTR [ebp]
	call	_sqlite3PagerPagecount
	test	eax, eax
	jle	SHORT $LN2@newDatabas
	pop	esi
	xor	eax, eax
	pop	ebp
; Line 24374
	ret	0
$LN2@newDatabas:
; Line 24352
	mov	esi, DWORD PTR [ebp+8]
; Line 24355
	mov	eax, DWORD PTR [esi+72]
	push	edi
	mov	edi, DWORD PTR [esi+68]
	push	eax
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 24356
	test	eax, eax
	jne	$LN7@newDatabas
; Line 24357
	mov	ecx, DWORD PTR _zMagicHeader
	mov	DWORD PTR [edi], ecx
	mov	edx, DWORD PTR _zMagicHeader+4
	mov	DWORD PTR [edi+4], edx
	mov	eax, DWORD PTR _zMagicHeader+8
	mov	DWORD PTR [edi+8], eax
	mov	ecx, DWORD PTR _zMagicHeader+12
	mov	DWORD PTR [edi+12], ecx
; Line 24359
	movzx	edx, BYTE PTR [ebp+25]
	mov	BYTE PTR [edi+16], dl
	movzx	eax, BYTE PTR [ebp+24]
	mov	BYTE PTR [edi+17], al
; Line 24360
	mov	BYTE PTR [edi+18], 1
; Line 24361
	mov	BYTE PTR [edi+19], 1
; Line 24362
	movzx	ecx, BYTE PTR [ebp+24]
	sub	cl, BYTE PTR [ebp+26]
; Line 24366
	push	76					; 0000004cH
	mov	BYTE PTR [edi+20], cl
	movzx	edx, BYTE PTR [ebp+14]
	mov	BYTE PTR [edi+21], dl
	movzx	eax, BYTE PTR [ebp+15]
	mov	BYTE PTR [edi+22], al
	movzx	ecx, BYTE PTR [ebp+16]
	lea	edx, DWORD PTR [edi+24]
	push	0
	push	edx
	mov	BYTE PTR [edi+23], cl
	call	_memset
; Line 24367
	push	13					; 0000000dH
	call	_zeroPage
; Line 24371
	movzx	eax, BYTE PTR [ebp+18]
	mov	ecx, eax
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [ebp+17], 1
	mov	BYTE PTR [edi+52], cl
	mov	edx, eax
	mov	ecx, eax
	shr	edx, 16					; 00000010H
	shr	ecx, 8
	add	esp, 16					; 00000010H
	mov	BYTE PTR [edi+55], al
	mov	BYTE PTR [edi+53], dl
	mov	BYTE PTR [edi+54], cl
; Line 24373
	xor	eax, eax
$LN7@newDatabas:
	pop	edi
	pop	esi
	pop	ebp
; Line 24374
	ret	0
_newDatabase ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeBeginTrans
_TEXT	SEGMENT
_p$ = 8							; size = 4
_wrflag$ = 12						; size = 4
_sqlite3BtreeBeginTrans PROC				; COMDAT
; Line 24412
	mov	eax, DWORD PTR _p$[esp-4]
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax+4]
; Line 24421
	mov	al, BYTE PTR [eax+8]
	push	edi
	xor	edi, edi
	cmp	al, 2
	je	$LN18@sqlite3Btr@30
	cmp	al, 1
	mov	ebp, DWORD PTR _wrflag$[esp+8]
	jne	SHORT $LN19@sqlite3Btr@30
	test	ebp, ebp
	je	$LN18@sqlite3Btr@30
$LN19@sqlite3Btr@30:
; Line 24426
	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LN17@sqlite3Btr@30
	test	ebp, ebp
	je	SHORT $LN17@sqlite3Btr@30
	pop	edi
	pop	esi
; Line 24427
	mov	eax, 8
	pop	ebp
; Line 24474
	ret	0
$LN17@sqlite3Btr@30:
; Line 24434
	cmp	BYTE PTR [esi+48], 2
	jne	SHORT $LL15@sqlite3Btr@30
	test	ebp, ebp
	je	SHORT $LL15@sqlite3Btr@30
	pop	edi
	pop	esi
; Line 24435
	mov	eax, 5
	pop	ebp
; Line 24474
	ret	0
	npad	3
$LL15@sqlite3Btr@30:
; Line 24439
	cmp	DWORD PTR [esi+8], 0
	jne	SHORT $LN12@sqlite3Btr@30
; Line 24440
	mov	edi, esi
	call	_lockBtree
	mov	edi, eax
$LN12@sqlite3Btr@30:
; Line 24443
	test	edi, edi
	jne	SHORT $LN36@sqlite3Btr@30
	test	ebp, ebp
	je	$LN37@sqlite3Btr@30
; Line 24444
	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LN10@sqlite3Btr@30
; Line 24445
	mov	edi, 8
$LN36@sqlite3Btr@30:
; Line 24457
	call	_unlockBtreeIfUnused
$LN14@sqlite3Btr@30:
; Line 24460
	cmp	edi, 5
	jne	SHORT $LN4@sqlite3Btr@30
	cmp	BYTE PTR [esi+48], 0
	jne	$LN1@sqlite3Btr@30
	mov	ebp, DWORD PTR [esi+44]
	test	ebp, ebp
	je	$LN1@sqlite3Btr@30
	mov	ecx, DWORD PTR [ebp]
	test	ecx, ecx
	je	$LN1@sqlite3Btr@30
	mov	eax, DWORD PTR [ebp+8]
	test	eax, eax
	jl	SHORT $LN1@sqlite3Btr@30
	mov	edx, DWORD PTR [ebp+4]
	push	eax
	push	edx
	call	ecx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN34@sqlite3Btr@30
	add	DWORD PTR [ebp+8], 1
	mov	ebp, DWORD PTR _wrflag$[esp+8]
	jmp	SHORT $LL15@sqlite3Btr@30
$LN10@sqlite3Btr@30:
; Line 24447
	mov	ecx, DWORD PTR [esi+8]
	xor	eax, eax
	cmp	ebp, 1
	setg	al
	push	eax
	mov	eax, DWORD PTR [ecx+72]
	call	_sqlite3PagerBegin
	mov	edi, eax
	add	esp, 4
; Line 24448
	test	edi, edi
	jne	SHORT $LN36@sqlite3Btr@30
; Line 24449
	push	esi
	call	_newDatabase
	mov	edi, eax
	add	esp, 4
; Line 24454
	test	edi, edi
	jne	SHORT $LN36@sqlite3Btr@30
; Line 24455
	mov	BYTE PTR [esi+12], al
; Line 24456
	jmp	SHORT $LN14@sqlite3Btr@30
$LN34@sqlite3Btr@30:
; Line 24473
	mov	eax, edi
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp+8], -1
	pop	ebp
; Line 24474
	ret	0
$LN4@sqlite3Btr@30:
; Line 24462
	test	edi, edi
	jne	SHORT $LN1@sqlite3Btr@30
$LN37@sqlite3Btr@30:
; Line 24463
	mov	ecx, DWORD PTR _p$[esp+8]
	cmp	BYTE PTR [ecx+8], 0
	jne	SHORT $LN2@sqlite3Btr@30
; Line 24464
	add	DWORD PTR [esi+56], 1
$LN2@sqlite3Btr@30:
; Line 24466
	test	ebp, ebp
	setne	al
	add	al, 1
	mov	BYTE PTR [ecx+8], al
; Line 24467
	cmp	al, BYTE PTR [esi+48]
	jbe	SHORT $LN1@sqlite3Btr@30
; Line 24468
	mov	BYTE PTR [esi+48], al
$LN1@sqlite3Btr@30:
; Line 24473
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
; Line 24474
	ret	0
$LN18@sqlite3Btr@30:
	pop	edi
	pop	esi
; Line 24422
	xor	eax, eax
	pop	ebp
; Line 24474
	ret	0
_sqlite3BtreeBeginTrans ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _setChildPtrmaps
_TEXT	SEGMENT
_pgno$ = -16						; size = 4
_pBt$ = -12						; size = 4
_nCell$ = -8						; size = 4
_isInitOrig$ = -4					; size = 4
_setChildPtrmaps PROC					; COMDAT
; _pPage$ = eax
; Line 24483
	sub	esp, 16					; 00000010H
	push	ebx
	push	edi
	mov	edi, eax
; Line 24487
	mov	eax, DWORD PTR [edi+64]
; Line 24488
	movzx	ecx, BYTE PTR [edi]
; Line 24489
	mov	edx, DWORD PTR [edi+76]
	mov	DWORD PTR _pBt$[esp+24], eax
; Line 24491
	mov	eax, DWORD PTR [edi+80]
	push	eax
	mov	ebx, edi
	mov	DWORD PTR _isInitOrig$[esp+28], ecx
	mov	DWORD PTR _pgno$[esp+28], edx
	call	_sqlite3BtreeInitPage
	add	esp, 4
; Line 24492
	test	eax, eax
	jne	$set_child_ptrmaps_out$86379
; Line 24495
	movzx	ebx, WORD PTR [edi+20]
	push	ebp
; Line 24497
	xor	ebp, ebp
	test	ebx, ebx
	push	esi
	mov	DWORD PTR _nCell$[esp+32], ebx
	jle	SHORT $LN5@setChildPt
$LL7@setChildPt:
; Line 24498
	mov	eax, DWORD PTR [edi+68]
	movzx	ecx, WORD PTR [edi+14]
	add	ecx, eax
	xor	edx, edx
	mov	dh, BYTE PTR [ecx+ebp*2]
	lea	ecx, DWORD PTR [ecx+ebp*2]
	mov	dl, BYTE PTR [ecx+1]
	add	edx, eax
	mov	esi, edx
; Line 24500
	mov	eax, esi
	call	_ptrmapPutOvflPtr
; Line 24501
	test	eax, eax
	jne	SHORT $LN19@setChildPt
; Line 24505
	cmp	BYTE PTR [edi+4], al
	jne	SHORT $LN6@setChildPt
; Line 24506
	movzx	eax, BYTE PTR [esi+1]
	mov	ah, BYTE PTR [esi]
	movzx	ecx, BYTE PTR [esi+2]
	movzx	edx, BYTE PTR [esi+3]
; Line 24507
	mov	ebx, DWORD PTR _pgno$[esp+32]
	shl	eax, 8
	or	eax, ecx
	mov	ecx, DWORD PTR _pBt$[esp+32]
	shl	eax, 8
	or	eax, edx
	push	5
	call	_ptrmapPut
	add	esp, 4
; Line 24508
	test	eax, eax
	jne	SHORT $LN19@setChildPt
	mov	ebx, DWORD PTR _nCell$[esp+32]
$LN6@setChildPt:
; Line 24497
	add	ebp, 1
	cmp	ebp, ebx
	jl	SHORT $LL7@setChildPt
$LN5@setChildPt:
; Line 24512
	cmp	BYTE PTR [edi+4], 0
	jne	SHORT $LN19@setChildPt
; Line 24513
	movzx	eax, BYTE PTR [edi+8]
	mov	ecx, DWORD PTR [edi+68]
; Line 24514
	mov	ebx, DWORD PTR _pgno$[esp+32]
	lea	eax, DWORD PTR [eax+ecx+8]
	movzx	ecx, BYTE PTR [eax+2]
	xor	edx, edx
	mov	dh, BYTE PTR [eax]
	push	5
	mov	dl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	edx, 8
	or	edx, ecx
	mov	ecx, DWORD PTR _pBt$[esp+36]
	shl	edx, 8
	or	eax, edx
	call	_ptrmapPut
	add	esp, 4
$LN19@setChildPt:
	pop	esi
	pop	ebp
$set_child_ptrmaps_out$86379:
; Line 24518
	mov	cl, BYTE PTR _isInitOrig$[esp+24]
	mov	BYTE PTR [edi], cl
	pop	edi
	pop	ebx
; Line 24520
	add	esp, 16					; 00000010H
	ret	0
_setChildPtrmaps ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _relocatePage
_TEXT	SEGMENT
_pPtrPage$ = -8						; size = 4
_iDbPage$ = -4						; size = 4
_pBt$ = 8						; size = 4
_eType$ = 12						; size = 1
_iPtrPage$ = 16						; size = 4
_iFreePage$ = 20					; size = 4
_relocatePage PROC					; COMDAT
; _pDbPage$ = eax
; Line 24595
	sub	esp, 8
; Line 24598
	mov	ecx, DWORD PTR _pBt$[esp+4]
	push	ebp
	mov	ebp, DWORD PTR _iFreePage$[esp+8]
	push	esi
	push	edi
	mov	edi, eax
	mov	eax, DWORD PTR [edi+76]
	mov	DWORD PTR _iDbPage$[esp+20], eax
	mov	eax, DWORD PTR [ecx]
; Line 24607
	push	ebp
	push	eax
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerMovepage
	mov	esi, eax
	add	esp, 8
; Line 24608
	test	esi, esi
; Line 24609
	jne	$LN12@relocatePa
	push	ebx
; Line 24621
	mov	ebx, DWORD PTR _eType$[esp+20]
	cmp	bl, 5
	mov	DWORD PTR [edi+76], ebp
	je	$LN22@relocatePa
	cmp	bl, 1
	je	$LN22@relocatePa
; Line 24627
	mov	edi, DWORD PTR [edi+68]
	mov	ah, BYTE PTR [edi]
	movzx	edx, BYTE PTR [edi+2]
	movzx	ecx, BYTE PTR [edi+3]
	mov	al, BYTE PTR [edi+1]
	shl	eax, 8
	or	eax, edx
	shl	eax, 8
	or	eax, ecx
; Line 24628
	je	SHORT $LN8@relocatePa
; Line 24629
	mov	ecx, DWORD PTR _pBt$[esp+20]
	push	4
	mov	ebx, ebp
	call	_ptrmapPut
	mov	esi, eax
	add	esp, 4
; Line 24630
	test	esi, esi
	jne	$LN24@relocatePa
; Line 24623
	mov	ebx, DWORD PTR _eType$[esp+20]
$LN8@relocatePa:
; Line 24640
	cmp	bl, 1
	je	$LN1@relocatePa
; Line 24641
	mov	esi, DWORD PTR _iPtrPage$[esp+20]
	mov	edi, DWORD PTR _pBt$[esp+20]
	lea	edx, DWORD PTR _pPtrPage$[esp+24]
	push	edx
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 24642
	test	eax, eax
; Line 24643
	jne	SHORT $LN24@relocatePa
; Line 24645
	mov	edi, DWORD PTR _pPtrPage$[esp+24]
	mov	eax, DWORD PTR [edi+72]
	push	eax
	call	_sqlite3PagerWrite
	mov	esi, eax
	add	esp, 4
; Line 24646
	test	esi, esi
	je	SHORT $LN2@relocatePa
; Line 24647
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerUnref
	pop	ebx
	pop	edi
; Line 24656
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 24657
	add	esp, 8
	ret	0
$LN22@relocatePa:
; Line 24622
	mov	eax, edi
	call	_setChildPtrmaps
	mov	esi, eax
; Line 24623
	test	esi, esi
	je	SHORT $LN8@relocatePa
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 24657
	add	esp, 8
	ret	0
$LN2@relocatePa:
; Line 24650
	mov	ecx, DWORD PTR _iDbPage$[esp+24]
	push	ebx
	push	ebp
	push	ecx
	mov	eax, edi
	call	_modifyPagePointer
	mov	esi, eax
; Line 24651
	mov	eax, DWORD PTR [edi+72]
	add	esp, 12					; 0000000cH
	call	_sqlite3PagerUnref
; Line 24652
	test	esi, esi
	jne	SHORT $LN1@relocatePa
; Line 24653
	mov	ecx, DWORD PTR _pBt$[esp+20]
	push	ebx
	mov	ebx, DWORD PTR _iPtrPage$[esp+24]
	mov	eax, ebp
	call	_ptrmapPut
	add	esp, 4
	mov	esi, eax
$LN1@relocatePa:
; Line 24656
	mov	eax, esi
$LN24@relocatePa:
	pop	ebx
$LN12@relocatePa:
	pop	edi
	pop	esi
	pop	ebp
; Line 24657
	add	esp, 8
	ret	0
_relocatePage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _getOverflowPage
_TEXT	SEGMENT
_eType$86724 = -9					; size = 1
_next$ = -8						; size = 4
_pPage$86734 = -4					; size = 4
_pgno$86722 = -4					; size = 4
_ovfl$ = 8						; size = 4
_ppPage$ = 12						; size = 4
_pPgnoNext$ = 16					; size = 4
_getOverflowPage PROC					; COMDAT
; _pBt$ = eax
; Line 25384
	sub	esp, 12					; 0000000cH
; Line 25394
	cmp	DWORD PTR _pPgnoNext$[esp+8], 0
	push	esi
	push	edi
	mov	edi, eax
	mov	DWORD PTR _next$[esp+20], 0
	jne	SHORT $LN13@getOverflo
; Line 25395
	mov	eax, DWORD PTR _ppPage$[esp+16]
	mov	esi, DWORD PTR _ovfl$[esp+16]
	push	eax
	mov	eax, 1
	call	_sqlite3BtreeGetPage
	add	esp, 4
	pop	edi
	pop	esi
; Line 25444
	add	esp, 12					; 0000000cH
	ret	0
$LN13@getOverflo:
; Line 25405
	cmp	BYTE PTR [edi+18], 0
	push	ebx
	je	$LN26@getOverflo
; Line 25410
	movzx	ecx, WORD PTR [edi+26]
	movzx	esi, WORD PTR [edi+24]
	mov	ebx, DWORD PTR _ovfl$[esp+20]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	lea	ecx, DWORD PTR [edx+ecx+1]
	mov	eax, 1073741824				; 40000000H
	cdq
	add	ebx, 1
	idiv	esi
	push	ebp
	lea	esi, DWORD PTR [ebx-2]
	lea	ebp, DWORD PTR [eax+1]
	npad	3
$LL11@getOverflo:
	xor	edx, edx
	mov	eax, esi
	div	ecx
	imul	eax, ecx
	add	eax, 2
	cmp	eax, ebp
	jne	SHORT $LN25@getOverflo
	add	eax, 1
$LN25@getOverflo:
	cmp	eax, ebx
	je	SHORT $LN9@getOverflo
	cmp	ebx, ebp
	jne	SHORT $LN10@getOverflo
$LN9@getOverflo:
; Line 25411
	add	ebx, 1
	add	esi, 1
; Line 25412
	jmp	SHORT $LL11@getOverflo
$LN10@getOverflo:
; Line 25414
	mov	esi, DWORD PTR [edi]
	call	_sqlite3PagerPagecount
	cmp	ebx, eax
	pop	ebp
	ja	SHORT $LN26@getOverflo
; Line 25415
	lea	edx, DWORD PTR _pgno$86722[esp+24]
	push	edx
	lea	eax, DWORD PTR _eType$86724[esp+28]
	push	eax
	mov	eax, ebx
	mov	ecx, edi
	call	_ptrmapGet
	mov	esi, eax
	add	esp, 8
; Line 25416
	test	esi, esi
; Line 25417
	jne	$LN33@getOverflo
; Line 25419
	cmp	BYTE PTR _eType$86724[esp+24], 4
	jne	SHORT $LN26@getOverflo
	mov	ecx, DWORD PTR _pgno$86722[esp+24]
	cmp	ecx, DWORD PTR _ovfl$[esp+20]
	jne	SHORT $LN26@getOverflo
; Line 25426
	test	ebx, ebx
	mov	DWORD PTR _next$[esp+24], ebx
	je	SHORT $LN26@getOverflo
	cmp	DWORD PTR _ppPage$[esp+20], eax
	je	SHORT $LN31@getOverflo
$LN26@getOverflo:
; Line 25429
	mov	ebx, DWORD PTR _next$[esp+24]
	mov	esi, DWORD PTR _ovfl$[esp+20]
	xor	eax, eax
	test	ebx, ebx
	setne	al
	lea	edx, DWORD PTR _pPage$86734[esp+24]
	push	edx
	mov	DWORD PTR _pPage$86734[esp+28], 0
	call	_sqlite3BtreeGetPage
; Line 25431
	mov	ecx, DWORD PTR _pPage$86734[esp+28]
	add	esp, 4
	test	ebx, ebx
	mov	esi, eax
	jne	SHORT $LN3@getOverflo
	test	esi, esi
	jne	SHORT $LN3@getOverflo
; Line 25432
	mov	eax, DWORD PTR [ecx+68]
	movzx	edi, BYTE PTR [eax+2]
	xor	edx, edx
	mov	dh, BYTE PTR [eax]
	mov	dl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	edx, 8
	or	edx, edi
	shl	edx, 8
	or	edx, eax
	mov	DWORD PTR _next$[esp+24], edx
$LN3@getOverflo:
; Line 25435
	mov	eax, DWORD PTR _ppPage$[esp+20]
	test	eax, eax
	je	SHORT $LN2@getOverflo
; Line 25441
	mov	edx, DWORD PTR _pPgnoNext$[esp+20]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _next$[esp+24]
	pop	ebx
	pop	edi
; Line 25443
	mov	eax, esi
	mov	DWORD PTR [edx], ecx
	pop	esi
; Line 25444
	add	esp, 12					; 0000000cH
	ret	0
$LN2@getOverflo:
; Line 25438
	test	ecx, ecx
	je	SHORT $LN31@getOverflo
	mov	eax, DWORD PTR [ecx+72]
	call	_sqlite3PagerUnref
$LN31@getOverflo:
; Line 25441
	mov	ecx, DWORD PTR _next$[esp+24]
	mov	edx, DWORD PTR _pPgnoNext$[esp+20]
	mov	DWORD PTR [edx], ecx
$LN33@getOverflo:
	pop	ebx
	pop	edi
; Line 25443
	mov	eax, esi
	pop	esi
; Line 25444
	add	esp, 12					; 0000000cH
	ret	0
_getOverflowPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _copyPayload
_TEXT	SEGMENT
_eOp$ = 8						; size = 4
_copyPayload PROC					; COMDAT
; _pPayload$ = ebx
; _pBuf$ = edi
; _nByte$ = esi
; _pDbPage$ = eax
; Line 25464
	cmp	DWORD PTR _eOp$[esp-4], 0
	je	SHORT $LN3@copyPayloa
; Line 25466
	push	eax
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 25467
	test	eax, eax
; Line 25468
	jne	SHORT $LN4@copyPayloa
; Line 25470
	push	esi
	push	edi
	push	ebx
; Line 25473
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 25475
	xor	eax, eax
; Line 25476
	ret	0
$LN3@copyPayloa:
; Line 25473
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 25475
	xor	eax, eax
$LN4@copyPayloa:
; Line 25476
	ret	0
_copyPayload ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _accessPayload
_TEXT	SEGMENT
_rc$ = -20						; size = 4
tv386 = -16						; size = 4
_ovflSize$86788 = -16					; size = 4
_pBt$ = -12						; size = 4
tv644 = -8						; size = 4
_iIdx$ = -8						; size = 4
_pDbPage$86805 = -4					; size = 4
_pCur$ = 8						; size = 4
_amt$ = 12						; size = 4
_pBuf$ = 16						; size = 4
_nextPage$86789 = 20					; size = 4
_skipKey$ = 20						; size = 4
_eOp$ = 24						; size = 4
_accessPayload PROC					; COMDAT
; _offset$ = eax
; Line 25515
	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
; Line 25520
	mov	ebp, DWORD PTR _pCur$[esp+24]
; Line 25521
	mov	edx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [edx+4]
	xor	ecx, ecx
; Line 25528
	cmp	WORD PTR [ebp+62], cx
	mov	ebx, eax
	mov	eax, DWORD PTR [ebp+24]
	push	esi
	push	edi
	mov	DWORD PTR _rc$[esp+36], ecx
	mov	DWORD PTR _iIdx$[esp+36], ecx
	mov	DWORD PTR tv386[esp+36], eax
	mov	DWORD PTR _pBt$[esp+36], edx
	jne	SHORT $LN22@accessPayl
	movzx	edx, WORD PTR [eax+14]
	mov	edi, DWORD PTR [eax+68]
	mov	ecx, DWORD PTR [ebp+28]
	add	edx, edi
	lea	ecx, DWORD PTR [edx+ecx*2]
	movzx	edx, BYTE PTR [ecx+1]
	mov	dh, BYTE PTR [ecx]
	lea	esi, DWORD PTR [ebp+32]
	add	edx, edi
	push	edx
	push	eax
	call	_sqlite3BtreeParseCellPtr
	add	esp, 8
$LN22@accessPayl:
; Line 25529
	movzx	edi, WORD PTR [ebp+56]
; Line 25530
	mov	eax, DWORD PTR tv386[esp+36]
	add	edi, DWORD PTR [ebp+32]
	cmp	BYTE PTR [eax+3], 0
	je	SHORT $LN25@accessPayl
	xor	eax, eax
	jmp	SHORT $LN26@accessPayl
$LN25@accessPayl:
	mov	eax, DWORD PTR [ebp+40]
$LN26@accessPayl:
; Line 25532
	cmp	DWORD PTR _skipKey$[esp+32], 0
	je	SHORT $LN20@accessPayl
; Line 25533
	add	ebx, eax
$LN20@accessPayl:
; Line 25535
	mov	esi, DWORD PTR _amt$[esp+32]
	mov	edx, DWORD PTR [ebp+48]
	lea	ecx, DWORD PTR [ebx+esi]
	add	edx, eax
	cmp	ecx, edx
	jbe	SHORT $LN19@accessPayl
	pop	edi
	pop	esi
	pop	ebp
; Line 25537
	mov	eax, 1
	pop	ebx
; Line 25638
	add	esp, 20					; 00000014H
	ret	0
$LN19@accessPayl:
; Line 25541
	movzx	eax, WORD PTR [ebp+58]
	cmp	ebx, eax
	jge	$LN18@accessPayl
; Line 25543
	cmp	ecx, eax
	jle	SHORT $LN17@accessPayl
; Line 25544
	sub	eax, ebx
	mov	esi, eax
$LN17@accessPayl:
; Line 25546
	mov	eax, DWORD PTR tv386[esp+36]
	mov	eax, DWORD PTR [eax+72]
	add	ebx, edi
	cmp	DWORD PTR _eOp$[esp+32], 0
	je	SHORT $LN31@accessPayl
	push	eax
	call	_sqlite3PagerWrite
	add	esp, 4
	test	eax, eax
	je	SHORT $LN30@accessPayl
	mov	DWORD PTR _rc$[esp+36], eax
	jmp	SHORT $LN32@accessPayl
$LN30@accessPayl:
	mov	ecx, DWORD PTR _pBuf$[esp+32]
	push	esi
	push	ecx
	push	ebx
	jmp	SHORT $LN52@accessPayl
$LN31@accessPayl:
	mov	edx, DWORD PTR _pBuf$[esp+32]
	push	esi
	push	ebx
	push	edx
$LN52@accessPayl:
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rc$[esp+36], 0
$LN32@accessPayl:
; Line 25548
	add	DWORD PTR _pBuf$[esp+32], esi
; Line 25549
	sub	DWORD PTR _amt$[esp+32], esi
	xor	ebx, ebx
; Line 25554
	cmp	DWORD PTR _rc$[esp+36], ebx
	jne	$LN45@accessPayl
	mov	esi, DWORD PTR _amt$[esp+32]
$LN42@accessPayl:
	test	esi, esi
	jle	$LN45@accessPayl
; Line 25555
	mov	eax, DWORD PTR _pBt$[esp+36]
	movzx	esi, WORD PTR [eax+26]
; Line 25558
	movzx	eax, WORD PTR [ebp+58]
	movzx	edx, BYTE PTR [eax+edi+2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+edi]
	sub	esi, 4
	mov	DWORD PTR _ovflSize$86788[esp+36], esi
	mov	cl, BYTE PTR [eax+edi+1]
	shl	ecx, 8
	or	ecx, edx
	movzx	edx, BYTE PTR [eax+edi+3]
	shl	ecx, 8
	or	ecx, edx
; Line 25568
	cmp	BYTE PTR [ebp+84], 0
	mov	DWORD PTR _nextPage$86789[esp+32], ecx
	je	SHORT $LN49@accessPayl
	cmp	DWORD PTR [ebp+88], 0
	jne	SHORT $LN49@accessPayl
; Line 25569
	mov	ecx, DWORD PTR [ebp+52]
	sub	ecx, eax
	lea	eax, DWORD PTR [ecx+esi-1]
	xor	edx, edx
	div	esi
	mov	esi, eax
; Line 25570
	lea	edi, DWORD PTR [esi*4]
	call	_sqlite3Malloc
; Line 25571
	test	esi, esi
	mov	DWORD PTR [ebp+88], eax
	je	SHORT $LN46@accessPayl
	test	eax, eax
	jne	SHORT $LN46@accessPayl
; Line 25572
	mov	DWORD PTR _rc$[esp+36], 7
$LN46@accessPayl:
	mov	esi, DWORD PTR _ovflSize$86788[esp+36]
$LN49@accessPayl:
; Line 25580
	mov	ecx, DWORD PTR [ebp+88]
	test	ecx, ecx
	je	SHORT $LN48@accessPayl
	mov	eax, ebx
	cdq
	idiv	esi
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN48@accessPayl
; Line 25581
	mov	DWORD PTR _iIdx$[esp+36], eax
; Line 25582
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _nextPage$86789[esp+32], eax
; Line 25583
	mov	ebx, edx
$LN48@accessPayl:
; Line 25587
	mov	eax, DWORD PTR _rc$[esp+36]
	test	eax, eax
	jne	$LN45@accessPayl
	mov	edi, DWORD PTR _iIdx$[esp+36]
	add	edi, edi
	add	edi, edi
	mov	DWORD PTR tv644[esp+36], edi
$LL11@accessPayl:
	mov	edx, DWORD PTR _amt$[esp+32]
	test	edx, edx
	jle	$LN51@accessPayl
	mov	ecx, DWORD PTR _nextPage$86789[esp+32]
	test	ecx, ecx
	je	$LN51@accessPayl
; Line 25591
	mov	eax, DWORD PTR [ebp+88]
	test	eax, eax
	je	SHORT $LN8@accessPayl
; Line 25593
	mov	DWORD PTR [edi+eax], ecx
$LN8@accessPayl:
; Line 25597
	cmp	ebx, esi
	jl	SHORT $LN7@accessPayl
; Line 25605
	mov	eax, DWORD PTR [ebp+88]
	test	eax, eax
	je	SHORT $LN6@accessPayl
	mov	eax, DWORD PTR [edi+eax+4]
	test	eax, eax
	je	SHORT $LN6@accessPayl
; Line 25606
	mov	DWORD PTR _nextPage$86789[esp+32], eax
; Line 25610
	sub	ebx, esi
; Line 25611
	jmp	$LN10@accessPayl
$LN18@accessPayl:
; Line 25551
	sub	ebx, eax
; Line 25554
	jmp	$LN42@accessPayl
$LN6@accessPayl:
; Line 25609
	mov	eax, DWORD PTR _pBt$[esp+36]
	lea	edx, DWORD PTR _nextPage$86789[esp+32]
	push	edx
	push	0
	push	ecx
	call	_getOverflowPage
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rc$[esp+36], eax
; Line 25610
	sub	ebx, esi
; Line 25611
	jmp	$LN10@accessPayl
$LN7@accessPayl:
; Line 25617
	mov	ecx, DWORD PTR _pBt$[esp+36]
	mov	ecx, DWORD PTR [ecx]
	lea	eax, DWORD PTR _pDbPage$86805[esp+36]
	push	0
	push	eax
	mov	eax, DWORD PTR _nextPage$86789[esp+40]
	mov	esi, edx
	call	_sqlite3PagerAcquire
	add	esp, 8
; Line 25618
	test	eax, eax
	mov	DWORD PTR _rc$[esp+36], eax
	jne	SHORT $LN44@accessPayl
; Line 25619
	mov	ebp, DWORD PTR _pDbPage$86805[esp+36]
; Line 25620
	movzx	eax, BYTE PTR [ebp+50]
	movzx	ecx, BYTE PTR [ebp+51]
	xor	edx, edx
	mov	dh, BYTE PTR [ebp+48]
	mov	dl, BYTE PTR [ebp+49]
	shl	edx, 8
	or	edx, eax
; Line 25621
	mov	eax, DWORD PTR _ovflSize$86788[esp+36]
	shl	edx, 8
	or	edx, ecx
	mov	DWORD PTR _nextPage$86789[esp+32], edx
	mov	edx, DWORD PTR _amt$[esp+32]
	lea	ecx, DWORD PTR [ebx+edx]
	cmp	ecx, eax
	jle	SHORT $LN2@accessPayl
; Line 25622
	mov	esi, eax
	sub	esi, ebx
$LN2@accessPayl:
; Line 25624
	mov	edx, DWORD PTR _eOp$[esp+32]
	mov	edi, DWORD PTR _pBuf$[esp+32]
	push	edx
	lea	ebx, DWORD PTR [ebx+ebp+52]
	mov	eax, ebp
	call	_copyPayload
	mov	DWORD PTR _rc$[esp+40], eax
	add	esp, 4
; Line 25625
	mov	eax, ebp
	call	_sqlite3PagerUnref
; Line 25627
	sub	DWORD PTR _amt$[esp+32], esi
; Line 25628
	mov	ebp, DWORD PTR _pCur$[esp+32]
	mov	edi, DWORD PTR tv644[esp+36]
	xor	ebx, ebx
	add	DWORD PTR _pBuf$[esp+32], esi
$LN44@accessPayl:
	mov	esi, DWORD PTR _ovflSize$86788[esp+36]
$LN10@accessPayl:
; Line 25587
	mov	eax, DWORD PTR _rc$[esp+36]
	add	edi, 4
	test	eax, eax
	mov	DWORD PTR tv644[esp+36], edi
	je	$LL11@accessPayl
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 25638
	add	esp, 20					; 00000014H
	ret	0
$LN51@accessPayl:
; Line 25634
	test	eax, eax
	jne	SHORT $LN45@accessPayl
	test	edx, edx
; Line 25635
	mov	eax, 11					; 0000000bH
	jg	SHORT $LN23@accessPayl
$LN45@accessPayl:
; Line 25637
	mov	eax, DWORD PTR _rc$[esp+36]
$LN23@accessPayl:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 25638
	add	esp, 20					; 00000014H
	ret	0
_accessPayload ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeKey
_TEXT	SEGMENT
_offset$ = 8						; size = 4
_amt$ = 12						; size = 4
_pBuf$ = 16						; size = 4
_sqlite3BtreeKey PROC					; COMDAT
; _pCur$ = esi
; Line 25650
	cmp	BYTE PTR [esi+65], 2
	jne	SHORT $LN16@sqlite3Btr@31
	push	esi
	call	_sqlite3BtreeRestoreOrClearCursorPosition
	add	esp, 4
; Line 25651
	test	eax, eax
	jne	SHORT $LN3@sqlite3Btr@31
$LN16@sqlite3Btr@31:
; Line 25654
	mov	eax, DWORD PTR [esi+24]
	cmp	BYTE PTR [eax+3], 0
	je	SHORT $LN1@sqlite3Btr@31
; Line 25655
	mov	eax, 11					; 0000000bH
; Line 25662
	ret	0
$LN1@sqlite3Btr@31:
; Line 25659
	mov	ecx, DWORD PTR _pBuf$[esp-4]
	mov	edx, DWORD PTR _amt$[esp-4]
	mov	eax, DWORD PTR _offset$[esp-4]
	push	0
	push	0
	push	ecx
	push	edx
	push	esi
	call	_accessPayload
	add	esp, 20					; 00000014H
$LN3@sqlite3Btr@31:
; Line 25662
	ret	0
_sqlite3BtreeKey ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _moveToChild
_TEXT	SEGMENT
$T128534 = -4						; size = 4
_pNewPage$ = 8						; size = 4
_pCur$ = 8						; size = 4
_moveToChild PROC					; COMDAT
; _newPgno$ = eax
; Line 25768
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pCur$[esp+8]
; Line 25775
	mov	ecx, DWORD PTR [ebp+24]
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR [ebp]
	xor	ebx, ebx
	cmp	esi, ebx
	push	edi
	mov	edi, DWORD PTR [eax+4]
	mov	DWORD PTR $T128534[esp+20], ecx
	jne	SHORT $LN6@moveToChil
	pop	edi
	pop	esi
	pop	ebp
	lea	eax, DWORD PTR [ebx+11]
	pop	ebx
; Line 25788
	pop	ecx
	ret	0
; Line 25775
$LN6@moveToChil:
	lea	edx, DWORD PTR _pNewPage$[esp+16]
	push	edx
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	mov	esi, DWORD PTR _pNewPage$[esp+20]
	add	esp, 4
	cmp	eax, ebx
	jne	SHORT $LN1@moveToChil
	cmp	BYTE PTR [esi], bl
	jne	SHORT $LN5@moveToChil
	mov	eax, DWORD PTR $T128534[esp+20]
	push	eax
	mov	ebx, esi
	call	_sqlite3BtreeInitPage
	add	esp, 4
	xor	ebx, ebx
$LN5@moveToChil:
; Line 25776
	cmp	eax, ebx
	jne	SHORT $LN1@moveToChil
; Line 25777
	mov	cx, WORD PTR [ebp+28]
	mov	WORD PTR [esi+16], cx
; Line 25778
	mov	eax, DWORD PTR [ebp+24]
; Line 25779
	mov	BYTE PTR [eax+1], bl
; Line 25780
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
; Line 25781
	mov	DWORD PTR [ebp+24], esi
; Line 25782
	mov	DWORD PTR [ebp+28], ebx
; Line 25783
	mov	WORD PTR [ebp+62], bx
; Line 25784
	cmp	WORD PTR [esi+20], 1
	sbb	eax, eax
	and	eax, 11					; 0000000bH
$LN1@moveToChil:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 25788
	pop	ecx
	ret	0
_moveToChild ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _moveToRoot
_TEXT	SEGMENT
_pRoot$ = 8						; size = 4
_pCur$ = 8						; size = 4
_moveToRoot PROC					; COMDAT
; Line 25838
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pCur$[esp+4]
; Line 25841
	mov	eax, DWORD PTR [ebp]
	mov	ebx, DWORD PTR [eax+4]
	push	esi
	push	edi
	xor	edi, edi
; Line 25843
	cmp	BYTE PTR [ebp+65], 2
	jne	SHORT $LN8@moveToRoot
; Line 25844
	mov	eax, DWORD PTR [ebp+68]
	test	eax, eax
	je	SHORT $LN13@moveToRoot
	push	eax
	call	_free
	add	esp, 4
$LN13@moveToRoot:
	mov	DWORD PTR [ebp+68], edi
	mov	BYTE PTR [ebp+65], 0
$LN8@moveToRoot:
; Line 25846
	mov	esi, DWORD PTR [ebp+24]
; Line 25847
	test	esi, esi
	mov	DWORD PTR _pRoot$[esp+12], esi
	je	SHORT $LN4@moveToRoot
	mov	ecx, DWORD PTR [esi+76]
	cmp	ecx, DWORD PTR [ebp+20]
	je	SHORT $LN3@moveToRoot
$LN4@moveToRoot:
; Line 25852
	mov	esi, DWORD PTR [ebp+20]
	test	esi, esi
	jne	SHORT $LN16@moveToRoot
	mov	edi, 11					; 0000000bH
; Line 25870
	mov	eax, edi
	pop	edi
	pop	esi
	mov	BYTE PTR [ebp+65], 0
	pop	ebp
	pop	ebx
; Line 25871
	ret	0
; Line 25852
$LN16@moveToRoot:
	lea	edx, DWORD PTR _pRoot$[esp+12]
	push	edx
	xor	eax, eax
	mov	edi, ebx
	call	_sqlite3BtreeGetPage
	mov	esi, DWORD PTR _pRoot$[esp+16]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN15@moveToRoot
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LN15@moveToRoot
	push	0
	mov	ebx, esi
	call	_sqlite3BtreeInitPage
	add	esp, 4
$LN15@moveToRoot:
	test	eax, eax
	mov	edi, eax
	je	SHORT $LN2@moveToRoot
	pop	edi
	pop	esi
; Line 25853
	mov	BYTE PTR [ebp+65], 0
	pop	ebp
	pop	ebx
; Line 25871
	ret	0
$LN2@moveToRoot:
; Line 25856
	mov	eax, DWORD PTR [ebp+24]
	test	eax, eax
	je	SHORT $LN19@moveToRoot
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN19@moveToRoot:
; Line 25857
	mov	DWORD PTR [ebp+24], esi
$LN3@moveToRoot:
; Line 25859
	xor	eax, eax
	mov	DWORD PTR [ebp+28], eax
; Line 25860
	mov	WORD PTR [ebp+62], ax
; Line 25861
	cmp	WORD PTR [esi+20], ax
	jne	SHORT $LN1@moveToRoot
	cmp	BYTE PTR [esi+4], al
	jne	SHORT $LN1@moveToRoot
; Line 25864
	movzx	eax, BYTE PTR [esi+8]
	mov	ecx, DWORD PTR [esi+68]
	movzx	edx, BYTE PTR [eax+ecx+9]
	mov	dh, BYTE PTR [eax+ecx+8]
	lea	eax, DWORD PTR [eax+ecx+8]
	movzx	ecx, BYTE PTR [eax+2]
	movzx	eax, BYTE PTR [eax+3]
	shl	edx, 8
	or	edx, ecx
	shl	edx, 8
	or	eax, edx
; Line 25867
	push	ebp
	mov	BYTE PTR [ebp+65], 1
	call	_moveToChild
	add	esp, 4
	mov	edi, eax
$LN1@moveToRoot:
; Line 25869
	mov	ecx, DWORD PTR [ebp+24]
	cmp	WORD PTR [ecx+20], 0
; Line 25870
	mov	eax, edi
	pop	edi
	seta	dl
	pop	esi
	mov	BYTE PTR [ebp+65], dl
	pop	ebp
	pop	ebx
; Line 25871
	ret	0
_moveToRoot ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _moveToLeftmost
_TEXT	SEGMENT
_moveToLeftmost PROC					; COMDAT
; _pCur$ = esi
; Line 25886
	mov	eax, DWORD PTR [esi+24]
	cmp	BYTE PTR [eax+4], 0
	jne	SHORT $LN2@moveToLeft
	npad	7
$LL3@moveToLeft:
; Line 25888
	mov	ecx, DWORD PTR [eax+68]
	movzx	eax, WORD PTR [eax+14]
	mov	edx, DWORD PTR [esi+28]
	add	eax, ecx
	lea	eax, DWORD PTR [eax+edx*2]
	xor	edx, edx
	mov	dh, BYTE PTR [eax]
; Line 25889
	push	esi
	mov	dl, BYTE PTR [eax+1]
	add	edx, ecx
	xor	ecx, ecx
	mov	eax, edx
	mov	ch, BYTE PTR [eax]
	movzx	edx, BYTE PTR [eax+2]
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	eax, ecx
	call	_moveToChild
	add	esp, 4
; Line 25890
	test	eax, eax
	jne	SHORT $LN4@moveToLeft
	mov	eax, DWORD PTR [esi+24]
	cmp	BYTE PTR [eax+4], 0
	je	SHORT $LL3@moveToLeft
$LN2@moveToLeft:
; Line 25892
	xor	eax, eax
$LN4@moveToLeft:
; Line 25893
	ret	0
_moveToLeftmost ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _moveToRightmost
_TEXT	SEGMENT
_moveToRightmost PROC					; COMDAT
; _pCur$ = esi
; Line 25911
	mov	ecx, DWORD PTR [esi+24]
	cmp	BYTE PTR [ecx+4], 0
	push	edi
	jne	SHORT $LN2@moveToRigh
	npad	6
$LL3@moveToRigh:
; Line 25912
	movzx	eax, BYTE PTR [ecx+8]
	mov	edx, DWORD PTR [ecx+68]
	movzx	edi, BYTE PTR [eax+edx+10]
; Line 25913
	movzx	ecx, WORD PTR [ecx+20]
	lea	eax, DWORD PTR [eax+edx+8]
	xor	edx, edx
	mov	dh, BYTE PTR [eax]
; Line 25914
	push	esi
	mov	dl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	mov	DWORD PTR [esi+28], ecx
	shl	edx, 8
	or	edx, edi
	shl	edx, 8
	or	eax, edx
	call	_moveToChild
	add	esp, 4
; Line 25915
	test	eax, eax
	jne	SHORT $LN4@moveToRigh
	mov	ecx, DWORD PTR [esi+24]
	cmp	BYTE PTR [ecx+4], al
	je	SHORT $LL3@moveToRigh
$LN2@moveToRigh:
; Line 25917
	movzx	edx, WORD PTR [ecx+20]
	sub	edx, 1
	mov	DWORD PTR [esi+28], edx
; Line 25918
	mov	WORD PTR [esi+62], 0
; Line 25919
	xor	eax, eax
$LN4@moveToRigh:
	pop	edi
; Line 25920
	ret	0
_moveToRightmost ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeFirst
_TEXT	SEGMENT
_sqlite3BtreeFirst PROC					; COMDAT
; _pCur$ = eax
; _pRes$ = edi
; Line 25926
	push	esi
	mov	esi, eax
; Line 25928
	push	esi
	call	_moveToRoot
	add	esp, 4
; Line 25929
	test	eax, eax
	jne	SHORT $LN3@sqlite3Btr@32
; Line 25930
	cmp	BYTE PTR [esi+65], al
	jne	SHORT $LN1@sqlite3Btr@32
; Line 25932
	mov	DWORD PTR [edi], 1
	pop	esi
; Line 25939
	ret	0
$LN1@sqlite3Btr@32:
; Line 25936
	mov	DWORD PTR [edi], 0
; Line 25937
	call	_moveToLeftmost
$LN3@sqlite3Btr@32:
	pop	esi
; Line 25939
	ret	0
_sqlite3BtreeFirst ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeLast
_TEXT	SEGMENT
_sqlite3BtreeLast PROC					; COMDAT
; _pCur$ = eax
; _pRes$ = edi
; Line 25945
	push	esi
	mov	esi, eax
; Line 25947
	push	esi
	call	_moveToRoot
	add	esp, 4
; Line 25948
	test	eax, eax
	jne	SHORT $LN3@sqlite3Btr@33
; Line 25949
	cmp	BYTE PTR [esi+65], al
	jne	SHORT $LN1@sqlite3Btr@33
; Line 25951
	mov	DWORD PTR [edi], 1
	pop	esi
; Line 25958
	ret	0
$LN1@sqlite3Btr@33:
; Line 25955
	mov	DWORD PTR [edi], 0
; Line 25956
	call	_moveToRightmost
$LN3@sqlite3Btr@33:
	pop	esi
; Line 25958
	ret	0
_sqlite3BtreeLast ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeMoveto
_TEXT	SEGMENT
_lwr$86989 = -24					; size = 4
_upr$86990 = -20					; size = 4
_pPage$86992 = -16					; size = 4
_dummy$87006 = -12					; size = 4
_nCellKey$87002 = -8					; size = 8
_pCur$ = 8						; size = 4
_pKey$ = 12						; size = 4
_nKey$ = 16						; size = 8
_biasRight$ = 24					; size = 4
_pRes$ = 28						; size = 4
_sqlite3BtreeMoveto PROC				; COMDAT
; Line 25993
	sub	esp, 24					; 00000018H
	push	ebp
	mov	ebp, DWORD PTR _pCur$[esp+24]
; Line 25995
	push	ebp
	call	_moveToRoot
	add	esp, 4
; Line 25996
	test	eax, eax
	jne	$LN32@sqlite3Btr@34
; Line 25999
	cmp	BYTE PTR [ebp+65], al
	jne	SHORT $LN123@sqlite3Btr@34
; Line 26000
	mov	eax, DWORD PTR _pRes$[esp+24]
	mov	DWORD PTR [eax], -1
; Line 26002
	xor	eax, eax
	pop	ebp
; Line 26095
	add	esp, 24					; 00000018H
	ret	0
$LN123@sqlite3Btr@34:
	push	ebx
	push	esi
	push	edi
$LL33@sqlite3Btr@34:
; Line 26007
	mov	ebx, DWORD PTR [ebp+24]
; Line 26010
	movzx	ecx, WORD PTR [ebx+20]
	xor	edi, edi
	sub	ecx, 1
	or	esi, -1
; Line 26011
	cmp	BYTE PTR [ebx+3], 0
	mov	DWORD PTR _pPage$86992[esp+40], ebx
	mov	DWORD PTR _lwr$86989[esp+40], edi
	mov	DWORD PTR _upr$86990[esp+40], ecx
	jne	SHORT $LN118@sqlite3Btr@34
	cmp	DWORD PTR _pKey$[esp+36], edi
	je	$LN104@sqlite3Btr@34
$LN118@sqlite3Btr@34:
; Line 26014
	cmp	DWORD PTR _biasRight$[esp+36], 0
	je	SHORT $LN30@sqlite3Btr@34
; Line 26015
	mov	DWORD PTR [ebp+28], ecx
; Line 26016
	jmp	SHORT $LN29@sqlite3Btr@34
$LN30@sqlite3Btr@34:
; Line 26017
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [ebp+28], eax
$LN29@sqlite3Btr@34:
; Line 26019
	test	ecx, ecx
	jl	$LN103@sqlite3Btr@34
	npad	5
$LL27@sqlite3Btr@34:
; Line 26022
	mov	WORD PTR [ebp+62], 0
; Line 26023
	cmp	BYTE PTR [ebx+3], 0
	je	$LN25@sqlite3Btr@34
; Line 26025
	movzx	ecx, WORD PTR [ebx+14]
	mov	eax, DWORD PTR [ebx+68]
	mov	edx, DWORD PTR [ebp+28]
	add	ecx, eax
	lea	ecx, DWORD PTR [ecx+edx*2]
	movzx	edx, BYTE PTR [ecx+1]
	mov	dh, BYTE PTR [ecx]
	movzx	ecx, BYTE PTR [ebx+9]
	add	ecx, eax
	add	edx, ecx
; Line 26026
	cmp	BYTE PTR [ebx+7], 0
	mov	edi, edx
	je	SHORT $LN120@sqlite3Btr@34
; Line 26028
	movzx	eax, BYTE PTR [edi]
	cmp	eax, 127				; 0000007fH
	ja	SHORT $LN38@sqlite3Btr@34
	mov	eax, 1
	jmp	SHORT $LN39@sqlite3Btr@34
$LN38@sqlite3Btr@34:
	lea	edx, DWORD PTR _dummy$87006[esp+40]
	push	edx
	call	_sqlite3GetVarint32
	add	esp, 4
$LN39@sqlite3Btr@34:
	add	edi, eax
$LN120@sqlite3Btr@34:
; Line 26030
	lea	eax, DWORD PTR _nCellKey$87002[esp+40]
	push	eax
	push	edi
	call	_sqlite3GetVarint
; Line 26031
	mov	eax, DWORD PTR _nCellKey$87002[esp+52]
	mov	ecx, DWORD PTR _nKey$[esp+48]
	mov	edx, DWORD PTR _nCellKey$87002[esp+48]
	add	esp, 8
	cmp	eax, ecx
	jg	SHORT $LN116@sqlite3Btr@34
	jl	SHORT $LN115@sqlite3Btr@34
	cmp	edx, DWORD PTR _nKey$[esp+36]
	jae	SHORT $LN119@sqlite3Btr@34
$LN115@sqlite3Btr@34:
; Line 26064
	mov	eax, DWORD PTR [ebp+28]
	or	esi, -1
	add	eax, 1
	mov	DWORD PTR _lwr$86989[esp+40], eax
; Line 26065
	jmp	SHORT $LN9@sqlite3Btr@34
$LN119@sqlite3Btr@34:
; Line 26033
	cmp	eax, ecx
	jl	$LN21@sqlite3Btr@34
	jg	SHORT $LN116@sqlite3Btr@34
	cmp	edx, DWORD PTR _nKey$[esp+36]
	jbe	$LN21@sqlite3Btr@34
$LN116@sqlite3Btr@34:
; Line 26034
	mov	esi, 1
$LN10@sqlite3Btr@34:
; Line 26066
	mov	eax, DWORD PTR [ebp+28]
	sub	eax, 1
	mov	DWORD PTR _upr$86990[esp+40], eax
$LN9@sqlite3Btr@34:
; Line 26068
	mov	eax, DWORD PTR _upr$86990[esp+40]
	cmp	DWORD PTR _lwr$86989[esp+40], eax
	jg	$LN121@sqlite3Btr@34
; Line 26071
	mov	ecx, DWORD PTR _lwr$86989[esp+40]
	add	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [ebp+28], eax
; Line 26072
	jmp	$LL27@sqlite3Btr@34
$LN25@sqlite3Btr@34:
; Line 26040
	mov	edi, DWORD PTR [ebp+24]
	movzx	edx, WORD PTR [edi+14]
	mov	eax, DWORD PTR [edi+68]
	mov	ecx, DWORD PTR [ebp+28]
	add	edx, eax
	lea	ecx, DWORD PTR [edx+ecx*2]
	movzx	edx, BYTE PTR [ecx+1]
	mov	dh, BYTE PTR [ecx]
	lea	esi, DWORD PTR [ebp+32]
	add	edx, eax
	push	edx
	push	edi
	call	_sqlite3BtreeParseCellPtr
	movzx	ecx, WORD PTR [ebp+56]
	add	ecx, DWORD PTR [esi]
	add	esp, 8
	cmp	BYTE PTR [edi+3], 0
	je	SHORT $LN44@sqlite3Btr@34
	xor	edx, edx
	jmp	SHORT $LN43@sqlite3Btr@34
$LN44@sqlite3Btr@34:
	mov	edx, DWORD PTR [ebp+40]
$LN43@sqlite3Btr@34:
	movzx	eax, WORD PTR [ebp+58]
	cmp	eax, edx
	jbe	SHORT $LN40@sqlite3Btr@34
	mov	eax, edx
$LN40@sqlite3Btr@34:
; Line 26041
	mov	edi, DWORD PTR [ebp+44]
	mov	esi, DWORD PTR [ebp+40]
; Line 26042
	cdq
	cmp	edx, edi
	mov	DWORD PTR _nCellKey$87002[esp+40], esi
	mov	DWORD PTR _nCellKey$87002[esp+44], edi
	jl	SHORT $LN18@sqlite3Btr@34
	jg	SHORT $LN117@sqlite3Btr@34
	cmp	eax, esi
	jb	SHORT $LN18@sqlite3Btr@34
$LN117@sqlite3Btr@34:
; Line 26043
	mov	eax, DWORD PTR _pKey$[esp+36]
	mov	edx, DWORD PTR _nKey$[esp+36]
	push	eax
	mov	eax, DWORD PTR [ebp+16]
	push	edx
	push	ecx
	mov	ecx, DWORD PTR [ebp+12]
	push	esi
	push	eax
	call	ecx
	add	esp, 20					; 00000014H
	mov	esi, eax
; Line 26044
	jmp	$LN15@sqlite3Btr@34
$LN18@sqlite3Btr@34:
; Line 26045
	test	esi, esi
	jle	$LN100@sqlite3Btr@34
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ebx, DWORD PTR _inMutex
	je	SHORT $LN55@sqlite3Btr@34
	test	ebx, ebx
	jg	$LN100@sqlite3Btr@34
$LN55@sqlite3Btr@34:
	push	esi
	call	_malloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	$LN114@sqlite3Btr@34
; Line 26047
	cmp	BYTE PTR [ebp+65], 2
	jne	SHORT $LN109@sqlite3Btr@34
	push	ebp
	call	_sqlite3BtreeRestoreOrClearCursorPosition
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN74@sqlite3Btr@34
$LN109@sqlite3Btr@34:
	mov	edx, DWORD PTR [ebp+24]
	cmp	BYTE PTR [edx+3], 0
	je	SHORT $LN73@sqlite3Btr@34
	mov	ebx, 11					; 0000000bH
	jmp	SHORT $LN75@sqlite3Btr@34
$LN73@sqlite3Btr@34:
	push	0
	push	0
	push	edi
	push	esi
	push	ebp
	xor	eax, eax
	call	_accessPayload
	add	esp, 20					; 00000014H
$LN74@sqlite3Btr@34:
	mov	ebx, eax
$LN75@sqlite3Btr@34:
; Line 26048
	mov	eax, DWORD PTR _pKey$[esp+36]
	mov	ecx, DWORD PTR _nKey$[esp+36]
	mov	edx, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR [ebp+12]
	push	ecx
	push	edi
	push	esi
	push	edx
	call	eax
; Line 26049
	push	edi
	mov	esi, eax
	call	_free
	add	esp, 24					; 00000018H
; Line 26050
	test	ebx, ebx
	jne	$LN101@sqlite3Btr@34
	mov	ebx, DWORD PTR _pPage$86992[esp+40]
$LN15@sqlite3Btr@34:
; Line 26053
	test	esi, esi
	je	SHORT $LN102@sqlite3Btr@34
; Line 26063
	jge	$LN10@sqlite3Btr@34
; Line 26064
	mov	eax, DWORD PTR [ebp+28]
	add	eax, 1
	mov	DWORD PTR _lwr$86989[esp+40], eax
; Line 26065
	jmp	$LN9@sqlite3Btr@34
$LN21@sqlite3Btr@34:
; Line 26036
	xor	esi, esi
$LN102@sqlite3Btr@34:
; Line 26054
	cmp	BYTE PTR [ebx+6], 0
	je	$LN13@sqlite3Btr@34
	cmp	BYTE PTR [ebx+4], 0
	jne	$LN13@sqlite3Btr@34
; Line 26055
	mov	edx, DWORD PTR [ebp+28]
	mov	edi, edx
	jmp	SHORT $LN103@sqlite3Btr@34
$LN121@sqlite3Btr@34:
	mov	edi, DWORD PTR _lwr$86989[esp+40]
$LN103@sqlite3Btr@34:
; Line 26075
	cmp	BYTE PTR [ebx+4], 0
	jne	$LN122@sqlite3Btr@34
; Line 26077
	movzx	eax, WORD PTR [ebx+20]
	cmp	edi, eax
	jl	SHORT $LN5@sqlite3Btr@34
; Line 26078
	movzx	ecx, BYTE PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+68]
	lea	eax, DWORD PTR [ecx+edx+8]
; Line 26079
	jmp	SHORT $LN130@sqlite3Btr@34
$LN5@sqlite3Btr@34:
; Line 26080
	movzx	ecx, WORD PTR [ebx+14]
	mov	eax, DWORD PTR [ebx+68]
	add	ecx, eax
	movzx	edx, BYTE PTR [ecx+edi*2+1]
	mov	dh, BYTE PTR [ecx+edi*2]
	lea	ecx, DWORD PTR [ecx+edi*2]
	add	eax, edx
$LN130@sqlite3Btr@34:
	movzx	edx, BYTE PTR [eax+2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax]
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	eax, ecx
; Line 26082
	test	eax, eax
	je	SHORT $LN122@sqlite3Btr@34
; Line 26089
	push	ebp
	mov	DWORD PTR [ebp+28], edi
	mov	WORD PTR [ebp+62], 0
	call	_moveToChild
	add	esp, 4
; Line 26090
	test	eax, eax
	je	$LL33@sqlite3Btr@34
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
; Line 26095
	add	esp, 24					; 00000018H
	ret	0
$LN114@sqlite3Btr@34:
; Line 26045
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN65@sqlite3Btr@34
	test	ebx, ebx
	jg	SHORT $LN100@sqlite3Btr@34
$LN65@sqlite3Btr@34:
	add	ebx, 1
	mov	DWORD PTR _inMutex, ebx
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN100@sqlite3Btr@34:
	pop	edi
	pop	esi
	pop	ebx
; Line 26046
	mov	eax, 7
	pop	ebp
; Line 26095
	add	esp, 24					; 00000018H
	ret	0
$LN104@sqlite3Btr@34:
	pop	edi
	pop	esi
	pop	ebx
; Line 26012
	mov	eax, 11					; 0000000bH
	pop	ebp
; Line 26095
	add	esp, 24					; 00000018H
	ret	0
$LN101@sqlite3Btr@34:
	pop	edi
	pop	esi
; Line 26050
	mov	eax, ebx
	pop	ebx
	pop	ebp
; Line 26095
	add	esp, 24					; 00000018H
	ret	0
$LN13@sqlite3Btr@34:
; Line 26059
	mov	eax, DWORD PTR _pRes$[esp+36]
	test	eax, eax
	je	SHORT $LN2@sqlite3Btr@34
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], 0
; Line 26085
	xor	eax, eax
	pop	ebp
; Line 26095
	add	esp, 24					; 00000018H
	ret	0
$LN122@sqlite3Btr@34:
; Line 26084
	mov	eax, DWORD PTR _pRes$[esp+36]
	test	eax, eax
	je	SHORT $LN2@sqlite3Btr@34
	mov	DWORD PTR [eax], esi
$LN2@sqlite3Btr@34:
	pop	edi
	pop	esi
; Line 26085
	xor	eax, eax
	pop	ebx
$LN32@sqlite3Btr@34:
	pop	ebp
; Line 26095
	add	esp, 24					; 00000018H
	ret	0
_sqlite3BtreeMoveto ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _allocateBtreePage
_TEXT	SEGMENT
_searchList$87104 = -30					; size = 1
_eType$87106 = -29					; size = 1
_rc$ = -28						; size = 4
_pPrevTrunk$ = -24					; size = 4
_pPage1$ = -20						; size = 4
_pTrunk$ = -16						; size = 4
_dist$87146 = -12					; size = 4
_k$ = -12						; size = 4
_n$ = -12						; size = 4
_pDbPage$128786 = -8					; size = 4
_pNewTrunk$87132 = -4					; size = 4
_pBt$ = 8						; size = 4
_ppPage$ = 12						; size = 4
_pPgno$ = 16						; size = 4
_nearby$ = 20						; size = 4
_exact$ = 24						; size = 1
_allocateBtreePage PROC					; COMDAT
; Line 26260
	sub	esp, 32					; 00000020H
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 26268
	mov	edi, DWORD PTR _pBt$[esp+44]
	mov	ebp, DWORD PTR [edi+8]
; Line 26269
	mov	eax, DWORD PTR [ebp+68]
	movzx	edx, BYTE PTR [eax+38]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+36]
	add	eax, 36					; 00000024H
	xor	ebx, ebx
	mov	DWORD PTR _pPage1$[esp+48], ebp
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR _n$[esp+48], ecx
; Line 26270
	jle	$LN50@allocateBt
; Line 26280
	cmp	BYTE PTR _exact$[esp+44], bl
	mov	BYTE PTR _searchList$87104[esp+48], bl
	je	SHORT $LN124@allocateBt
	mov	esi, DWORD PTR [edi]
	call	_sqlite3PagerPagecount
	mov	esi, DWORD PTR _nearby$[esp+44]
	cmp	esi, eax
	ja	SHORT $LN124@allocateBt
; Line 26284
	lea	ecx, DWORD PTR _eType$87106[esp+48]
	push	ebx
	push	ecx
	mov	eax, esi
	mov	ecx, edi
	call	_ptrmapGet
	add	esp, 8
; Line 26285
	test	eax, eax
	jne	$LN51@allocateBt
; Line 26286
	cmp	BYTE PTR _eType$87106[esp+48], 2
	jne	SHORT $LN47@allocateBt
; Line 26287
	mov	BYTE PTR _searchList$87104[esp+48], 1
$LN47@allocateBt:
; Line 26289
	mov	edx, DWORD PTR _pPgno$[esp+44]
	mov	DWORD PTR [edx], esi
$LN124@allocateBt:
; Line 26296
	mov	eax, DWORD PTR [ebp+72]
	push	eax
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 26297
	test	eax, eax
	jne	$LN51@allocateBt
; Line 26298
	mov	ecx, DWORD PTR _n$[esp+48]
	mov	eax, DWORD PTR [ebp+68]
	add	ecx, -1
	add	eax, 36					; 00000024H
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], cl
	npad	2
$LL45@allocateBt:
; Line 26307
	xor	ecx, ecx
	test	ebx, ebx
	mov	DWORD PTR _pPrevTrunk$[esp+48], ebx
	je	SHORT $LN42@allocateBt
	mov	eax, DWORD PTR [ebx+68]
; Line 26308
	jmp	SHORT $LN135@allocateBt
$LN42@allocateBt:
; Line 26309
	mov	eax, DWORD PTR [ebp+68]
	add	eax, 32					; 00000020H
$LN135@allocateBt:
	mov	ch, BYTE PTR [eax]
	movzx	edx, BYTE PTR [eax+2]
; Line 26311
	push	0
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	mov	esi, ecx
	lea	ecx, DWORD PTR _pDbPage$128786[esp+52]
	push	ecx
	mov	ecx, DWORD PTR [edi]
	mov	eax, esi
	call	_sqlite3PagerAcquire
	add	esp, 8
	test	eax, eax
	jne	$LN123@allocateBt
	mov	eax, DWORD PTR _pDbPage$128786[esp+48]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN66@allocateBt
	mov	edx, DWORD PTR [ecx+56]
	lea	ebp, DWORD PTR [edx+eax+48]
	jmp	SHORT $LN67@allocateBt
$LN66@allocateBt:
	xor	ebp, ebp
$LN67@allocateBt:
	cmp	esi, 1
	setne	dl
	sub	dl, 1
	lea	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [ebp+64], edi
; Line 26317
	xor	ebx, ebx
	mov	edi, ecx
	mov	DWORD PTR [ebp+68], ecx
	mov	DWORD PTR [ebp+72], eax
	mov	DWORD PTR [ebp+76], esi
	and	edx, 100				; 00000064H
	mov	BYTE PTR [ebp+8], dl
	mov	bh, BYTE PTR [edi+4]
	movzx	eax, BYTE PTR [edi+6]
	movzx	ecx, BYTE PTR [edi+7]
	mov	bl, BYTE PTR [edi+5]
	mov	DWORD PTR _pTrunk$[esp+48], ebp
	shl	ebx, 8
	or	ebx, eax
	shl	ebx, 8
	or	ebx, ecx
	mov	DWORD PTR _k$[esp+48], ebx
; Line 26318
	jne	SHORT $LN132@allocateBt
	cmp	BYTE PTR _searchList$87104[esp+48], 0
	jne	SHORT $LN132@allocateBt
; Line 26323
	mov	edx, DWORD PTR [ebp+72]
	push	edx
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 26324
	test	eax, eax
	mov	DWORD PTR _rc$[esp+48], eax
	jne	$end_allocate_page$87118
; Line 26327
	mov	eax, DWORD PTR _pPgno$[esp+44]
; Line 26328
	mov	edx, DWORD PTR _pPage1$[esp+48]
	mov	DWORD PTR [eax], esi
	mov	ecx, DWORD PTR [ebp+68]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [ecx]
; Line 26329
	mov	edx, DWORD PTR _ppPage$[esp+44]
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [edx], ebp
; Line 26330
	mov	DWORD PTR _pTrunk$[esp+48], 0
	jmp	$LN126@allocateBt
$LN132@allocateBt:
; Line 26332
	mov	eax, DWORD PTR _pBt$[esp+44]
	movzx	ecx, WORD PTR [eax+26]
	shr	ecx, 2
	sub	ecx, 8
	cmp	ebx, ecx
	jg	$LN114@allocateBt
; Line 26337
	cmp	BYTE PTR _searchList$87104[esp+48], 0
	je	$LN34@allocateBt
	cmp	DWORD PTR _nearby$[esp+44], esi
	jne	$LN34@allocateBt
; Line 26342
	mov	edx, DWORD PTR _ppPage$[esp+44]
	mov	DWORD PTR [edx], ebp
; Line 26344
	mov	eax, DWORD PTR [ebp+72]
	push	eax
	mov	BYTE PTR _searchList$87104[esp+52], 0
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 26345
	test	eax, eax
	mov	DWORD PTR _rc$[esp+48], eax
	jne	$end_allocate_page$87118
; Line 26348
	test	ebx, ebx
	jne	SHORT $LN32@allocateBt
; Line 26349
	mov	eax, DWORD PTR _pPrevTrunk$[esp+48]
	test	eax, eax
	jne	SHORT $LN31@allocateBt
; Line 26350
	mov	ecx, DWORD PTR [ebp+68]
	mov	edx, DWORD PTR _pPage1$[esp+48]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+32], ecx
; Line 26384
	mov	DWORD PTR _pTrunk$[esp+48], ebx
; Line 26387
	jmp	$LN126@allocateBt
$LN31@allocateBt:
; Line 26352
	mov	edx, DWORD PTR [ebp+68]
	mov	eax, DWORD PTR [eax+68]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
; Line 26384
	mov	DWORD PTR _pTrunk$[esp+48], 0
; Line 26387
	jmp	$LN126@allocateBt
$LN32@allocateBt:
; Line 26360
	mov	eax, DWORD PTR [ebp+68]
	movzx	edx, BYTE PTR [eax+10]
; Line 26361
	mov	edi, DWORD PTR _pBt$[esp+44]
	add	eax, 8
	xor	ebx, ebx
	mov	bh, BYTE PTR [eax]
	lea	ecx, DWORD PTR _pNewTrunk$87132[esp+48]
	push	ecx
	mov	bl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ebx, 8
	or	ebx, edx
	shl	ebx, 8
	or	ebx, eax
	xor	eax, eax
	mov	esi, ebx
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 26362
	test	eax, eax
	mov	DWORD PTR _rc$[esp+48], eax
	jne	$end_allocate_page$87118
; Line 26365
	mov	esi, DWORD PTR _pNewTrunk$87132[esp+48]
	mov	edx, DWORD PTR [esi+72]
	push	edx
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 26366
	test	eax, eax
	mov	DWORD PTR _rc$[esp+48], eax
	jne	$LN117@allocateBt
; Line 26370
	mov	eax, DWORD PTR [ebp+68]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+68]
	mov	DWORD PTR [ecx], edx
; Line 26371
	mov	eax, DWORD PTR [esi+68]
	mov	ecx, DWORD PTR _k$[esp+48]
	add	ecx, -1
	add	eax, 4
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], cl
; Line 26372
	mov	edx, DWORD PTR [esi+68]
	lea	eax, DWORD PTR [ecx*4]
	mov	ecx, DWORD PTR [ebp+68]
	push	eax
	add	ecx, 12					; 0000000cH
	push	ecx
	add	edx, 8
	push	edx
	call	_memcpy
; Line 26373
	mov	eax, DWORD PTR [esi+72]
	add	esp, 12					; 0000000cH
	call	_sqlite3PagerUnref
; Line 26374
	mov	eax, DWORD PTR _pPrevTrunk$[esp+48]
	test	eax, eax
	jne	SHORT $LN26@allocateBt
; Line 26375
	mov	eax, DWORD PTR _pPage1$[esp+48]
	mov	eax, DWORD PTR [eax+68]
	add	eax, 32					; 00000020H
; Line 26376
	jmp	SHORT $LN136@allocateBt
$LN26@allocateBt:
; Line 26377
	mov	edx, DWORD PTR [eax+72]
	push	edx
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 26378
	test	eax, eax
	mov	DWORD PTR _rc$[esp+48], eax
	jne	$end_allocate_page$87118
; Line 26381
	mov	eax, DWORD PTR _pPrevTrunk$[esp+48]
	mov	eax, DWORD PTR [eax+68]
$LN136@allocateBt:
	mov	ecx, ebx
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [eax], cl
	mov	edx, ebx
	shr	edx, 16					; 00000010H
	mov	ecx, ebx
	shr	ecx, 8
	mov	BYTE PTR [eax+3], bl
	mov	BYTE PTR [eax+2], cl
	mov	BYTE PTR [eax+1], dl
; Line 26384
	mov	DWORD PTR _pTrunk$[esp+48], 0
; Line 26387
	jmp	$LN126@allocateBt
$LN34@allocateBt:
; Line 26392
	mov	edx, DWORD PTR [ebp+72]
	push	edx
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 26393
	test	eax, eax
	mov	DWORD PTR _rc$[esp+48], eax
	jne	$end_allocate_page$87118
; Line 26396
	mov	esi, DWORD PTR _nearby$[esp+44]
; Line 26398
	xor	ebp, ebp
	test	esi, esi
	jbe	SHORT $LN14@allocateBt
; Line 26399
	movzx	ecx, BYTE PTR [edi+10]
	movzx	edx, BYTE PTR [edi+11]
	xor	eax, eax
	mov	ah, BYTE PTR [edi+8]
	mov	al, BYTE PTR [edi+9]
	shl	eax, 8
	or	eax, ecx
	shl	eax, 8
	or	eax, edx
	sub	eax, esi
	mov	DWORD PTR _dist$87146[esp+48], eax
; Line 26400
	jns	SHORT $LN20@allocateBt
	neg	eax
	mov	DWORD PTR _dist$87146[esp+48], eax
$LN20@allocateBt:
; Line 26401
	mov	ecx, 1
	cmp	ebx, ecx
	jle	SHORT $LN14@allocateBt
	lea	eax, DWORD PTR [edi+14]
$LL19@allocateBt:
; Line 26402
	movzx	esi, BYTE PTR [eax]
	xor	edx, edx
	mov	dh, BYTE PTR [eax-2]
	mov	dl, BYTE PTR [eax-1]
	shl	edx, 8
	or	edx, esi
	movzx	esi, BYTE PTR [eax+1]
	shl	edx, 8
	or	edx, esi
	sub	edx, DWORD PTR _nearby$[esp+44]
; Line 26403
	jns	SHORT $LN16@allocateBt
	neg	edx
$LN16@allocateBt:
; Line 26404
	cmp	edx, DWORD PTR _dist$87146[esp+48]
	jge	SHORT $LN18@allocateBt
; Line 26405
	mov	ebp, ecx
; Line 26406
	mov	DWORD PTR _dist$87146[esp+48], edx
$LN18@allocateBt:
	add	ecx, 1
	add	eax, 4
	cmp	ecx, ebx
	jl	SHORT $LL19@allocateBt
; Line 26409
	mov	esi, DWORD PTR _nearby$[esp+44]
$LN14@allocateBt:
; Line 26413
	movzx	ecx, BYTE PTR [edi+ebp*4+10]
	movzx	edx, BYTE PTR [edi+ebp*4+11]
	xor	eax, eax
	mov	ah, BYTE PTR [edi+ebp*4+8]
	mov	al, BYTE PTR [edi+ebp*4+9]
	shl	eax, 8
	or	eax, ecx
	shl	eax, 8
	or	eax, edx
; Line 26414
	cmp	BYTE PTR _searchList$87104[esp+48], 0
	je	SHORT $LN12@allocateBt
	cmp	eax, esi
	jne	$LN126@allocateBt
$LN12@allocateBt:
; Line 26415
	mov	ecx, DWORD PTR _pPgno$[esp+44]
; Line 26416
	mov	edx, DWORD PTR _pBt$[esp+44]
	mov	DWORD PTR [ecx], eax
	mov	esi, DWORD PTR [edx]
	call	_sqlite3PagerPagecount
	mov	ecx, DWORD PTR _pPgno$[esp+44]
	cmp	DWORD PTR [ecx], eax
	ja	$LN120@allocateBt
; Line 26423
	lea	eax, DWORD PTR [ebx-1]
	cmp	ebp, eax
	jge	SHORT $LN10@allocateBt
; Line 26424
	mov	edx, DWORD PTR [edi+ebx*4+4]
	mov	DWORD PTR [edi+ebp*4+8], edx
$LN10@allocateBt:
; Line 26427
	mov	ebp, DWORD PTR _ppPage$[esp+44]
	lea	eax, DWORD PTR [ebx-1]
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [edi+4], dl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [edi+5], dl
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [edi+7], al
	mov	BYTE PTR [edi+6], dl
	mov	esi, DWORD PTR [ecx]
	mov	edi, DWORD PTR _pBt$[esp+44]
	push	ebp
	mov	eax, 1
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 26428
	test	eax, eax
	mov	DWORD PTR _rc$[esp+48], eax
	jne	SHORT $LN94@allocateBt
; Line 26429
	mov	eax, DWORD PTR [ebp]
	mov	edi, DWORD PTR [eax+72]
	call	_sqlite3PagerDontRollback
; Line 26430
	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 26431
	test	eax, eax
	mov	DWORD PTR _rc$[esp+48], eax
	je	SHORT $LN94@allocateBt
; Line 26432
	mov	ebp, DWORD PTR [ebp]
	test	ebp, ebp
	je	SHORT $LN94@allocateBt
	mov	eax, DWORD PTR [ebp+72]
	call	_sqlite3PagerUnref
$LN94@allocateBt:
; Line 26435
	mov	BYTE PTR _searchList$87104[esp+48], 0
$LN126@allocateBt:
; Line 26438
	mov	eax, DWORD PTR _pPrevTrunk$[esp+48]
	test	eax, eax
	je	SHORT $LN97@allocateBt
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN97@allocateBt:
; Line 26440
	cmp	BYTE PTR _searchList$87104[esp+48], 0
	mov	DWORD PTR _pPrevTrunk$[esp+48], 0
	je	SHORT $end_allocate_page$87118
	mov	ebx, DWORD PTR _pTrunk$[esp+48]
	mov	ebp, DWORD PTR _pPage1$[esp+48]
	mov	edi, DWORD PTR _pBt$[esp+44]
	jmp	$LL45@allocateBt
$LN123@allocateBt:
; Line 26311
	mov	DWORD PTR _rc$[esp+48], eax
; Line 26314
	jmp	SHORT $LN134@allocateBt
$LN114@allocateBt:
; Line 26334
	mov	DWORD PTR _rc$[esp+48], 11		; 0000000bH
$end_allocate_page$87118:
; Line 26484
	mov	eax, DWORD PTR _pTrunk$[esp+48]
	test	eax, eax
	je	SHORT $LN134@allocateBt
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN134@allocateBt:
; Line 26485
	mov	eax, DWORD PTR _pPrevTrunk$[esp+48]
	test	eax, eax
	je	SHORT $LN131@allocateBt
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN131@allocateBt:
; Line 26486
	mov	eax, DWORD PTR _rc$[esp+48]
$LN51@allocateBt:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 26487
	add	esp, 32					; 00000020H
	ret	0
$LN117@allocateBt:
; Line 26367
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
; Line 26368
	jmp	SHORT $end_allocate_page$87118
$LN120@allocateBt:
	pop	edi
	pop	esi
	pop	ebp
; Line 26418
	mov	eax, 11					; 0000000bH
	pop	ebx
; Line 26487
	add	esp, 32					; 00000020H
	ret	0
$LN50@allocateBt:
; Line 26444
	mov	esi, DWORD PTR [edi]
	call	_sqlite3PagerPagecount
	mov	esi, DWORD PTR _pPgno$[esp+44]
	add	eax, 1
	mov	DWORD PTR [esi], eax
; Line 26447
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN5@allocateBt
; Line 26452
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi], ecx
; Line 26453
	movzx	ebx, WORD PTR [edi+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ebx
	add	eax, 1
	cmp	ecx, eax
	jne	SHORT $LN5@allocateBt
; Line 26454
	add	ecx, 1
	mov	DWORD PTR [esi], ecx
$LN5@allocateBt:
; Line 26457
	cmp	BYTE PTR [edi+18], 0
	je	SHORT $LN4@allocateBt
	mov	ebx, DWORD PTR [esi]
	push	ebx
	call	_ptrmapPageno
	add	esp, 4
	cmp	eax, ebx
	jne	SHORT $LN4@allocateBt
; Line 26464
	add	ebx, 1
	mov	DWORD PTR [esi], ebx
$LN4@allocateBt:
; Line 26466
	cmp	DWORD PTR [edi+20], 0
	je	SHORT $LN3@allocateBt
; Line 26467
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi+20], eax
$LN3@allocateBt:
; Line 26472
	mov	ebx, DWORD PTR _ppPage$[esp+44]
	mov	esi, DWORD PTR [esi]
	push	ebx
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 26473
	test	eax, eax
	jne	$LN51@allocateBt
; Line 26474
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 26475
	test	eax, eax
	mov	DWORD PTR _rc$[esp+48], eax
	je	$LN131@allocateBt
; Line 26476
	mov	ebx, DWORD PTR [ebx]
	test	ebx, ebx
	je	$LN131@allocateBt
	mov	eax, DWORD PTR [ebx+72]
; Line 26485
	call	_sqlite3PagerUnref
; Line 26486
	mov	eax, DWORD PTR _rc$[esp+48]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 26487
	add	esp, 32					; 00000020H
	ret	0
_allocateBtreePage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _freePage
_TEXT	SEGMENT
_pPage1$ = -4						; size = 4
_pTrunk$87187 = 8					; size = 4
_n$ = 8							; size = 4
_pPage$ = 8						; size = 4
_freePage PROC						; COMDAT
; Line 26494
	push	ecx
	push	ebp
	mov	ebp, DWORD PTR _pPage$[esp+4]
; Line 26502
	mov	eax, DWORD PTR [ebp+80]
	test	eax, eax
	push	esi
	push	edi
	mov	edi, DWORD PTR [ebp+64]
	mov	esi, DWORD PTR [edi+8]
	mov	DWORD PTR _pPage1$[esp+16], esi
	mov	BYTE PTR [ebp], 0
	je	SHORT $LN14@freePage
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN14@freePage:
; Line 26503
	mov	DWORD PTR [ebp+80], 0
; Line 26506
	mov	eax, DWORD PTR [esi+72]
	push	eax
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 26507
	test	eax, eax
	jne	$LN12@freePage
; Line 26508
	mov	eax, DWORD PTR [esi+68]
	movzx	ecx, BYTE PTR [eax+38]
	xor	edx, edx
	mov	dh, BYTE PTR [eax+36]
	push	ebx
	mov	dl, BYTE PTR [eax+37]
	shl	edx, 8
	or	edx, ecx
	movzx	ecx, BYTE PTR [eax+39]
	shl	edx, 8
	or	edx, ecx
; Line 26509
	lea	ecx, DWORD PTR [edx+1]
	mov	ebx, ecx
	shr	ebx, 24					; 00000018H
	mov	BYTE PTR [eax+36], bl
	mov	ebx, ecx
	shr	ebx, 16					; 00000010H
	mov	BYTE PTR [eax+37], bl
	mov	ebx, ecx
	shr	ebx, 8
	mov	BYTE PTR [eax+38], bl
	mov	BYTE PTR [eax+39], cl
; Line 26524
	cmp	BYTE PTR [edi+18], 0
	mov	DWORD PTR _n$[esp+16], edx
	je	SHORT $LN41@freePage
; Line 26525
	mov	eax, DWORD PTR [ebp+76]
	push	2
	xor	ebx, ebx
	mov	ecx, edi
	call	_ptrmapPut
	add	esp, 4
; Line 26526
	test	eax, eax
	jne	$LN42@freePage
	mov	edx, DWORD PTR _n$[esp+16]
$LN41@freePage:
; Line 26530
	test	edx, edx
	jne	SHORT $LN8@freePage
; Line 26532
	mov	edx, DWORD PTR [ebp+72]
	push	edx
	call	_sqlite3PagerWrite
	mov	edi, eax
	add	esp, 4
; Line 26533
	test	edi, edi
	jne	$LN37@freePage
; Line 26534
	mov	ecx, DWORD PTR [ebp+68]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
; Line 26535
	mov	ecx, DWORD PTR [ebp+76]
	mov	eax, DWORD PTR [esi+68]
	add	eax, 32					; 00000020H
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
	pop	ebx
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], cl
; Line 26568
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
; Line 26569
	pop	ecx
	ret	0
$LN8@freePage:
; Line 26541
	mov	eax, DWORD PTR [esi+68]
	movzx	ecx, BYTE PTR [eax+33]
	mov	ch, BYTE PTR [eax+32]
	movzx	edx, BYTE PTR [eax+34]
	add	eax, 32					; 00000020H
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	mov	esi, ecx
	lea	ecx, DWORD PTR _pTrunk$87187[esp+16]
	push	ecx
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 26542
	test	eax, eax
	jne	$LN42@freePage
; Line 26543
	mov	esi, DWORD PTR _pTrunk$87187[esp+16]
	mov	eax, DWORD PTR [esi+68]
	movzx	edx, BYTE PTR [eax+6]
; Line 26544
	movzx	ecx, WORD PTR [edi+26]
	xor	ebx, ebx
	mov	bh, BYTE PTR [eax+4]
	add	eax, 4
	shr	ecx, 2
	sub	ecx, 8
	mov	bl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ebx, 8
	or	ebx, edx
	shl	ebx, 8
	or	ebx, eax
	cmp	ebx, ecx
	jl	$LN4@freePage
; Line 26547
	mov	edx, DWORD PTR [ebp+72]
	push	edx
	call	_sqlite3PagerWrite
	mov	edi, eax
	add	esp, 4
; Line 26548
	test	edi, edi
	jne	$LN37@freePage
; Line 26549
	mov	eax, DWORD PTR [esi+76]
	mov	ecx, DWORD PTR [ebp+68]
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ecx], dl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [ecx+1], dl
	mov	BYTE PTR [ecx+3], al
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [ecx+2], dl
; Line 26550
	mov	eax, DWORD PTR [ebp+68]
	add	eax, 4
	mov	BYTE PTR [eax], 0
	mov	BYTE PTR [eax+1], 0
	mov	BYTE PTR [eax+2], 0
	mov	BYTE PTR [eax+3], 0
; Line 26551
	mov	ecx, DWORD PTR [ebp+76]
	mov	eax, DWORD PTR _pPage1$[esp+20]
	mov	eax, DWORD PTR [eax+68]
	add	eax, 32					; 00000020H
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], cl
; Line 26566
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
	pop	ebx
; Line 26568
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
; Line 26569
	pop	ecx
	ret	0
$LN4@freePage:
; Line 26556
	mov	eax, DWORD PTR [esi+72]
	push	eax
	call	_sqlite3PagerWrite
	mov	edi, eax
	add	esp, 4
; Line 26557
	test	edi, edi
	jne	SHORT $LN1@freePage
; Line 26558
	mov	eax, DWORD PTR [esi+68]
	lea	ecx, DWORD PTR [ebx+1]
	add	eax, 4
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	BYTE PTR [eax+3], cl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+2], dl
; Line 26559
	mov	eax, DWORD PTR [ebp+76]
	mov	ecx, DWORD PTR [esi+68]
	lea	ecx, DWORD PTR [ecx+ebx*4+8]
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ecx], dl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [ecx+1], dl
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [ecx+2], dl
	mov	BYTE PTR [ecx+3], al
; Line 26561
	mov	eax, DWORD PTR [ebp+72]
	call	_sqlite3PagerDontWrite
$LN1@freePage:
; Line 26566
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
$LN37@freePage:
; Line 26568
	mov	eax, edi
$LN42@freePage:
	pop	ebx
$LN12@freePage:
	pop	edi
	pop	esi
	pop	ebp
; Line 26569
	pop	ecx
	ret	0
_freePage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _clearCell
_TEXT	SEGMENT
_ovflPgno$ = -40					; size = 4
_pOvfl$87210 = -36					; size = 4
_info$ = -32						; size = 32
_clearCell PROC						; COMDAT
; _pPage$ = eax
; _pCell$ = ecx
; Line 26574
	sub	esp, 40					; 00000028H
	push	ebx
; Line 26575
	mov	ebx, DWORD PTR [eax+64]
	push	esi
	push	edi
	mov	edi, ecx
; Line 26582
	push	edi
	push	eax
	lea	esi, DWORD PTR _info$[esp+60]
	call	_sqlite3BtreeParseCellPtr
; Line 26583
	mov	ax, WORD PTR _info$[esp+88]
	add	esp, 8
	test	ax, ax
	jne	SHORT $LN7@clearCell
	pop	edi
	pop	esi
; Line 26584
	xor	eax, eax
	pop	ebx
; Line 26603
	add	esp, 40					; 00000028H
	ret	0
$LN7@clearCell:
; Line 26586
	movzx	eax, ax
	movzx	ecx, BYTE PTR [eax+edi+1]
	mov	ch, BYTE PTR [eax+edi]
	movzx	edx, BYTE PTR [eax+edi+2]
	add	eax, edi
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
; Line 26588
	movzx	edx, WORD PTR _info$[esp+78]
	shl	ecx, 8
	or	ecx, eax
	mov	eax, DWORD PTR _info$[esp+72]
	mov	DWORD PTR _ovflPgno$[esp+52], ecx
	movzx	ecx, WORD PTR [ebx+26]
	sub	eax, edx
	sub	ecx, 4
	xor	edx, edx
	lea	eax, DWORD PTR [eax+ecx-1]
	div	ecx
	push	ebp
	mov	edi, eax
; Line 26590
	test	edi, edi
	je	SHORT $LN16@clearCell
$LL6@clearCell:
	sub	edi, 1
; Line 26592
	cmp	DWORD PTR _ovflPgno$[esp+56], 0
	je	SHORT $LN3@clearCell
	mov	esi, DWORD PTR [ebx]
	call	_sqlite3PagerPagecount
	mov	ecx, DWORD PTR _ovflPgno$[esp+56]
	cmp	ecx, eax
	ja	SHORT $LN3@clearCell
; Line 26596
	mov	edx, edi
	neg	edx
	sbb	edx, edx
	lea	eax, DWORD PTR _ovflPgno$[esp+56]
	and	edx, eax
	push	edx
	lea	edx, DWORD PTR _pOvfl$87210[esp+60]
	push	edx
	push	ecx
	mov	eax, ebx
	call	_getOverflowPage
	add	esp, 12					; 0000000cH
; Line 26597
	test	eax, eax
	jne	SHORT $LN18@clearCell
; Line 26598
	mov	ebp, DWORD PTR _pOvfl$87210[esp+56]
	push	ebp
	call	_freePage
	mov	esi, eax
; Line 26599
	mov	eax, DWORD PTR [ebp+72]
	add	esp, 4
	call	_sqlite3PagerUnref
; Line 26600
	test	esi, esi
	jne	SHORT $LN15@clearCell
; Line 26590
	test	edi, edi
	jne	SHORT $LL6@clearCell
$LN16@clearCell:
; Line 26602
	xor	eax, eax
$LN18@clearCell:
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 26603
	add	esp, 40					; 00000028H
	ret	0
$LN15@clearCell:
	pop	ebp
	pop	edi
; Line 26600
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 26603
	add	esp, 40					; 00000028H
	ret	0
$LN3@clearCell:
	pop	ebp
	pop	edi
	pop	esi
; Line 26593
	mov	eax, 11					; 0000000bH
	pop	ebx
; Line 26603
	add	esp, 40					; 00000028H
	ret	0
_clearCell ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _fillInCell
_TEXT	SEGMENT
_nPayload$ = -56					; size = 4
_pgnoOvfl$ = -52					; size = 4
_pSrc$ = -48						; size = 4
_pBt$ = -44						; size = 4
_pToRelease$ = -40					; size = 4
_pOvfl$ = -36						; size = 4
_info$ = -32						; size = 32
_pgnoPtrmap$87261 = 8					; size = 4
_pCell$ = 8						; size = 4
_pKey$ = 12						; size = 4
_nKey$ = 16						; size = 8
_pData$ = 24						; size = 4
_nData$ = 28						; size = 4
_nSrc$ = 32						; size = 4
_nZero$ = 32						; size = 4
_pnSize$ = 36						; size = 4
_fillInCell PROC					; COMDAT
; _pPage$ = eax
; Line 26624
	sub	esp, 56					; 00000038H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, eax
; Line 26633
	mov	ecx, DWORD PTR [edi+64]
	xor	eax, eax
; Line 26639
	xor	ebx, ebx
; Line 26640
	cmp	BYTE PTR [edi+4], al
	mov	DWORD PTR _pOvfl$[esp+72], eax
	mov	DWORD PTR _pToRelease$[esp+72], eax
	mov	DWORD PTR _pBt$[esp+72], ecx
	mov	DWORD PTR _pgnoOvfl$[esp+72], eax
	jne	SHORT $LN21@fillInCell
; Line 26641
	lea	ebx, DWORD PTR [eax+4]
$LN21@fillInCell:
; Line 26643
	cmp	BYTE PTR [edi+7], al
; Line 26644
	mov	ebp, DWORD PTR _pCell$[esp+68]
	je	SHORT $LN20@fillInCell
	mov	edx, DWORD PTR _nData$[esp+68]
	mov	eax, DWORD PTR _nZero$[esp+68]
	add	eax, edx
	cdq
	push	edx
	push	eax
	lea	ecx, DWORD PTR [ebx+ebp]
	call	_sqlite3PutVarint
	add	esp, 8
	add	ebx, eax
; Line 26645
	jmp	SHORT $LN19@fillInCell
$LN20@fillInCell:
; Line 26646
	mov	DWORD PTR _nZero$[esp+68], eax
	mov	DWORD PTR _nData$[esp+68], eax
$LN19@fillInCell:
; Line 26648
	mov	ecx, DWORD PTR _nKey$[esp+72]
	mov	edx, DWORD PTR _nKey$[esp+68]
	push	ecx
	push	edx
	lea	ecx, DWORD PTR [ebx+ebp]
	call	_sqlite3PutVarint
; Line 26649
	push	ebp
	push	edi
	lea	esi, DWORD PTR _info$[esp+88]
	add	ebx, eax
	call	_sqlite3BtreeParseCellPtr
; Line 26655
	mov	eax, DWORD PTR _nData$[esp+84]
	mov	ecx, DWORD PTR _nZero$[esp+84]
	add	esp, 16					; 00000010H
; Line 26656
	cmp	BYTE PTR [edi+3], 0
	lea	esi, DWORD PTR [eax+ecx]
	mov	DWORD PTR _nPayload$[esp+72], esi
	je	SHORT $LN18@fillInCell
; Line 26657
	mov	edx, DWORD PTR _pData$[esp+68]
	mov	DWORD PTR _pSrc$[esp+72], edx
; Line 26659
	mov	DWORD PTR _nData$[esp+68], 0
; Line 26660
	jmp	SHORT $LN52@fillInCell
$LN18@fillInCell:
; Line 26661
	mov	eax, DWORD PTR _nKey$[esp+68]
; Line 26662
	mov	ecx, DWORD PTR _pKey$[esp+68]
	add	esi, eax
	mov	DWORD PTR _nPayload$[esp+72], esi
	mov	DWORD PTR _pSrc$[esp+72], ecx
$LN52@fillInCell:
; Line 26665
	movzx	edx, WORD PTR _info$[esp+102]
	mov	ecx, DWORD PTR _pnSize$[esp+68]
; Line 26666
	movzx	edi, WORD PTR _info$[esp+98]
; Line 26667
	add	ebx, ebp
; Line 26668
	movzx	ebp, WORD PTR _info$[esp+100]
	add	ebp, DWORD PTR _pCell$[esp+68]
; Line 26670
	test	esi, esi
	mov	DWORD PTR _nSrc$[esp+68], eax
	mov	DWORD PTR [ecx], edx
	jle	$LN40@fillInCell
	jmp	SHORT $LN16@fillInCell
	npad	7
$LL50@fillInCell:
	mov	esi, DWORD PTR _nPayload$[esp+72]
	mov	eax, DWORD PTR _nSrc$[esp+68]
$LN16@fillInCell:
; Line 26671
	test	edi, edi
	jne	$LN14@fillInCell
; Line 26675
	mov	ebx, DWORD PTR _pBt$[esp+72]
	cmp	BYTE PTR [ebx+18], 0
	mov	edi, DWORD PTR _pgnoOvfl$[esp+72]
	mov	DWORD PTR _pgnoPtrmap$87261[esp+68], edi
	je	SHORT $LN9@fillInCell
; Line 26680
	movzx	ecx, WORD PTR [ebx+26]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	movzx	ecx, WORD PTR [ebx+24]
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	esi, DWORD PTR [edx+eax+1]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ecx
	lea	ecx, DWORD PTR [edi-2]
	lea	ebx, DWORD PTR [eax+1]
	npad	6
$LL12@fillInCell:
	add	ecx, 1
	xor	edx, edx
	mov	eax, ecx
	div	esi
	add	edi, 1
	imul	eax, esi
	add	eax, 2
	cmp	eax, ebx
	jne	SHORT $LN24@fillInCell
	add	eax, 1
$LN24@fillInCell:
	cmp	eax, edi
	je	SHORT $LL12@fillInCell
	cmp	edi, ebx
	je	SHORT $LL12@fillInCell
	mov	ebx, DWORD PTR _pBt$[esp+72]
	mov	DWORD PTR _pgnoOvfl$[esp+72], edi
$LN9@fillInCell:
; Line 26686
	push	0
	push	edi
	lea	edx, DWORD PTR _pgnoOvfl$[esp+80]
	push	edx
	lea	eax, DWORD PTR _pOvfl$[esp+84]
	push	eax
	push	ebx
	call	_allocateBtreePage
; Line 26698
	mov	edi, DWORD PTR _pOvfl$[esp+92]
	add	esp, 20					; 00000014H
	cmp	BYTE PTR [ebx+18], 0
	mov	esi, eax
	je	SHORT $LN48@fillInCell
	test	esi, esi
	jne	$LN51@fillInCell
; Line 26699
	mov	ebx, DWORD PTR _pgnoPtrmap$87261[esp+68]
; Line 26700
	mov	eax, DWORD PTR _pgnoOvfl$[esp+72]
	test	ebx, ebx
	setne	cl
	add	cl, 3
	push	ecx
	mov	ecx, DWORD PTR _pBt$[esp+76]
	call	_ptrmapPut
	mov	esi, eax
	add	esp, 4
; Line 26701
	test	esi, esi
	je	SHORT $LN49@fillInCell
; Line 26702
	test	edi, edi
	je	SHORT $LN48@fillInCell
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerUnref
$LN48@fillInCell:
; Line 26706
	test	esi, esi
	jne	$LN51@fillInCell
$LN49@fillInCell:
; Line 26710
	mov	eax, DWORD PTR _pgnoOvfl$[esp+72]
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ebp], dl
	mov	ecx, eax
	mov	edx, eax
	mov	BYTE PTR [ebp+3], al
; Line 26711
	mov	eax, DWORD PTR _pToRelease$[esp+72]
	shr	ecx, 16					; 00000010H
	shr	edx, 8
	test	eax, eax
	mov	BYTE PTR [ebp+1], cl
	mov	BYTE PTR [ebp+2], dl
	je	SHORT $LN35@fillInCell
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN35@fillInCell:
; Line 26713
	mov	ebp, DWORD PTR [edi+68]
; Line 26716
	mov	eax, DWORD PTR _pBt$[esp+72]
	mov	esi, DWORD PTR _nPayload$[esp+72]
	mov	BYTE PTR [ebp], 0
	mov	BYTE PTR [ebp+1], 0
	mov	BYTE PTR [ebp+2], 0
	mov	BYTE PTR [ebp+3], 0
	mov	ebx, DWORD PTR [edi+68]
	mov	DWORD PTR _pToRelease$[esp+72], edi
	movzx	edi, WORD PTR [eax+26]
	mov	eax, DWORD PTR _nSrc$[esp+68]
	add	ebx, 4
	sub	edi, 4
$LN14@fillInCell:
; Line 26719
	cmp	esi, edi
	jle	SHORT $LN5@fillInCell
	mov	esi, edi
$LN5@fillInCell:
; Line 26720
	test	eax, eax
	jle	SHORT $LN4@fillInCell
; Line 26721
	cmp	esi, eax
	jle	SHORT $LN3@fillInCell
	mov	esi, eax
$LN3@fillInCell:
; Line 26723
	mov	ecx, DWORD PTR _pSrc$[esp+72]
	push	esi
	push	ecx
	push	ebx
	call	_memcpy
; Line 26724
	jmp	SHORT $LN53@fillInCell
$LN4@fillInCell:
; Line 26725
	push	esi
	push	0
	push	ebx
	call	_memset
$LN53@fillInCell:
; Line 26730
	mov	eax, DWORD PTR _nSrc$[esp+80]
	sub	DWORD PTR _nPayload$[esp+84], esi
	add	DWORD PTR _pSrc$[esp+84], esi
	sub	eax, esi
	add	esp, 12					; 0000000cH
	add	ebx, esi
; Line 26731
	sub	edi, esi
; Line 26732
	test	eax, eax
	mov	DWORD PTR _nSrc$[esp+68], eax
	jne	SHORT $LN1@fillInCell
; Line 26733
	mov	edx, DWORD PTR _nData$[esp+68]
; Line 26734
	mov	eax, DWORD PTR _pData$[esp+68]
	mov	DWORD PTR _nSrc$[esp+68], edx
	mov	DWORD PTR _pSrc$[esp+72], eax
$LN1@fillInCell:
; Line 26670
	cmp	DWORD PTR _nPayload$[esp+72], 0
	jg	$LL50@fillInCell
; Line 26737
	mov	eax, DWORD PTR _pToRelease$[esp+72]
	test	eax, eax
	je	SHORT $LN40@fillInCell
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN40@fillInCell:
	pop	edi
	pop	esi
	pop	ebp
; Line 26738
	xor	eax, eax
	pop	ebx
; Line 26739
	add	esp, 56					; 00000038H
	ret	0
$LN51@fillInCell:
; Line 26707
	mov	eax, DWORD PTR _pToRelease$[esp+72]
	test	eax, eax
	je	SHORT $LN30@fillInCell
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN30@fillInCell:
	pop	edi
; Line 26708
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 26739
	add	esp, 56					; 00000038H
	ret	0
_fillInCell ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _reparentPage
_TEXT	SEGMENT
_pBt$ = 8						; size = 4
_pgno$ = 12						; size = 4
_idx$ = 16						; size = 4
_reparentPage PROC					; COMDAT
; _pNewParent$ = eax
; Line 26746
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pgno$[esp+4]
; Line 26751
	test	ebp, ebp
	mov	ebx, eax
	jne	SHORT $LN6@reparentPa
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 26774
	ret	0
$LN6@reparentPa:
	push	esi
; Line 26753
	mov	esi, DWORD PTR _pBt$[esp+8]
	mov	eax, DWORD PTR [esi]
	push	edi
	mov	edx, ebp
	call	_sqlite3PagerLookup
	mov	edi, eax
; Line 26754
	test	edi, edi
	je	SHORT $LN5@reparentPa
; Line 26755
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN11@reparentPa
	mov	eax, DWORD PTR [eax+56]
	lea	esi, DWORD PTR [eax+edi+48]
	jmp	SHORT $LN12@reparentPa
$LN11@reparentPa:
	xor	esi, esi
$LN12@reparentPa:
; Line 26756
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN4@reparentPa
; Line 26758
	mov	eax, DWORD PTR [esi+80]
	cmp	eax, ebx
	je	SHORT $LN3@reparentPa
; Line 26759
	test	eax, eax
	je	SHORT $LN2@reparentPa
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN2@reparentPa:
; Line 26760
	mov	DWORD PTR [esi+80], ebx
; Line 26761
	mov	eax, DWORD PTR [ebx+72]
	call	_sqlite3PagerRef
$LN3@reparentPa:
; Line 26763
	mov	cx, WORD PTR _idx$[esp+12]
	mov	WORD PTR [esi+16], cx
$LN4@reparentPa:
; Line 26765
	mov	eax, edi
	call	_sqlite3PagerUnref
	mov	esi, DWORD PTR _pBt$[esp+12]
$LN5@reparentPa:
; Line 26769
	cmp	BYTE PTR [esi+18], 0
	je	SHORT $LN1@reparentPa
; Line 26770
	mov	ebx, DWORD PTR [ebx+76]
	push	5
	mov	eax, ebp
	mov	ecx, esi
	call	_ptrmapPut
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 26774
	ret	0
$LN1@reparentPa:
	pop	edi
	pop	esi
	pop	ebp
; Line 26773
	xor	eax, eax
	pop	ebx
; Line 26774
	ret	0
_reparentPage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _reparentChildPages
_TEXT	SEGMENT
_reparentChildPages PROC				; COMDAT
; _pPage$ = esi
; Line 26788
	push	ebx
; Line 26790
	mov	ebx, DWORD PTR [esi+64]
	push	ebp
; Line 26791
	xor	ebp, ebp
; Line 26793
	cmp	BYTE PTR [esi+4], 0
	je	SHORT $LN7@reparentCh
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 26808
	ret	0
$LN7@reparentCh:
	push	edi
; Line 26795
	xor	edi, edi
	cmp	WORD PTR [esi+20], di
	jbe	SHORT $LN4@reparentCh
	npad	5
$LL6@reparentCh:
	movzx	eax, WORD PTR [esi+14]
; Line 26796
	mov	ecx, DWORD PTR [esi+68]
	add	eax, ecx
	lea	edx, DWORD PTR [eax+edi*2]
	xor	eax, eax
	mov	ah, BYTE PTR [edx]
	mov	al, BYTE PTR [edx+1]
	add	ecx, eax
; Line 26797
	cmp	BYTE PTR [esi+4], 0
	jne	SHORT $LN5@reparentCh
; Line 26798
	movzx	edx, BYTE PTR [ecx+2]
	xor	eax, eax
	mov	ah, BYTE PTR [ecx]
	push	edi
	mov	al, BYTE PTR [ecx+1]
	movzx	ecx, BYTE PTR [ecx+3]
	shl	eax, 8
	or	eax, edx
	shl	eax, 8
	or	eax, ecx
	push	eax
	push	ebx
	mov	eax, esi
	call	_reparentPage
	mov	ebp, eax
	add	esp, 12					; 0000000cH
; Line 26799
	test	ebp, ebp
	jne	SHORT $LN1@reparentCh
$LN5@reparentCh:
; Line 26795
	movzx	edx, WORD PTR [esi+20]
	add	edi, 1
	cmp	edi, edx
	jl	SHORT $LL6@reparentCh
$LN4@reparentCh:
; Line 26802
	cmp	BYTE PTR [esi+4], 0
	jne	SHORT $LN1@reparentCh
; Line 26804
	movzx	eax, BYTE PTR [esi+8]
	mov	ecx, DWORD PTR [esi+68]
	lea	eax, DWORD PTR [eax+ecx+8]
	movzx	ecx, BYTE PTR [eax+2]
	xor	edx, edx
	mov	dh, BYTE PTR [eax]
	push	edi
	mov	dl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	edx, 8
	or	edx, ecx
	shl	edx, 8
	or	eax, edx
	push	eax
	push	ebx
	mov	eax, esi
	call	_reparentPage
	add	esp, 12					; 0000000cH
	mov	ebp, eax
; Line 26805
	mov	BYTE PTR [esi+1], 0
$LN1@reparentCh:
	pop	edi
; Line 26807
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 26808
	ret	0
_reparentChildPages ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _insertCell
_TEXT	SEGMENT
_end$ = -44						; size = 4
_idx$ = -40						; size = 4
_hdr$ = -36						; size = 4
_info$87374 = -32					; size = 32
_pCell$ = 8						; size = 4
_pTemp$ = 12						; size = 4
_nSkip$ = 16						; size = 1
_insertCell PROC					; COMDAT
; _pPage$ = edi
; _i$ = ecx
; _sz$ = eax
; Line 26866
	sub	esp, 44					; 0000002cH
; Line 26880
	cmp	BYTE PTR [edi+2], 0
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pTemp$[esp+48]
	push	esi
	mov	esi, eax
	mov	ebx, ecx
	jne	$LN11@insertCell
	movzx	ecx, WORD PTR [edi+18]
	lea	eax, DWORD PTR [esi+2]
	cmp	eax, ecx
	jg	$LN11@insertCell
; Line 26894
	movzx	ecx, WORD PTR [edi+14]
; Line 26895
	movzx	edx, WORD PTR [edi+20]
	movzx	eax, BYTE PTR [edi+8]
	mov	ebp, DWORD PTR [edi+68]
	lea	edx, DWORD PTR [ecx+edx*2+2]
; Line 26896
	lea	ebx, DWORD PTR [ecx+ebx*2]
; Line 26897
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+ebp+5]
	mov	DWORD PTR _hdr$[esp+56], eax
	mov	DWORD PTR _end$[esp+56], edx
	mov	cl, BYTE PTR [eax+ebp+6]
	sub	ecx, esi
	cmp	edx, ecx
	jle	SHORT $LN7@insertCell
; Line 26898
	push	edi
	call	_defragmentPage
	add	esp, 4
; Line 26899
	test	eax, eax
	jne	$LN13@insertCell
$LN7@insertCell:
; Line 26903
	push	edi
	mov	eax, esi
	call	_allocateSpace
; Line 26908
	mov	edx, DWORD PTR _pCell$[esp+56]
	add	WORD PTR [edi+20], 1
	add	WORD PTR [edi+18], 65534		; 0000fffeH
	mov	ecx, eax
	movzx	eax, BYTE PTR _nSkip$[esp+56]
	sub	esi, eax
	add	edx, eax
	push	esi
	add	eax, ecx
	push	edx
	add	eax, ebp
	push	eax
	mov	DWORD PTR _idx$[esp+72], ecx
	call	_memcpy
; Line 26909
	mov	eax, DWORD PTR _end$[esp+72]
	add	eax, -2					; fffffffeH
	add	esp, 16					; 00000010H
	cmp	eax, ebx
	lea	ecx, DWORD PTR [eax+ebp]
	jle	SHORT $LN4@insertCell
	sub	eax, ebx
	sub	eax, 1
	shr	eax, 1
	add	eax, 1
	mov	esi, eax
$LL6@insertCell:
; Line 26910
	mov	al, BYTE PTR [ecx-2]
; Line 26911
	mov	dl, BYTE PTR [ecx-1]
	mov	BYTE PTR [ecx], al
	mov	BYTE PTR [ecx+1], dl
	add	ecx, -2					; fffffffeH
	sub	esi, 1
	jne	SHORT $LL6@insertCell
$LN4@insertCell:
; Line 26913
	mov	eax, DWORD PTR _idx$[esp+56]
	mov	BYTE PTR [ebx+ebp+1], al
	mov	ecx, eax
; Line 26914
	mov	eax, DWORD PTR _hdr$[esp+56]
	sar	ecx, 8
	mov	BYTE PTR [ebx+ebp], cl
	mov	dl, BYTE PTR [edi+21]
	mov	BYTE PTR [eax+ebp+3], dl
	mov	cl, BYTE PTR [edi+20]
	mov	BYTE PTR [eax+ebp+4], cl
; Line 26917
	mov	edx, DWORD PTR [edi+64]
	mov	BYTE PTR [edi+1], 1
	cmp	BYTE PTR [edx+18], 0
	je	$LN1@insertCell
; Line 26922
	mov	eax, DWORD PTR _pCell$[esp+52]
	push	eax
	push	edi
	lea	esi, DWORD PTR _info$87374[esp+64]
	call	_sqlite3BtreeParseCellPtr
	add	esp, 8
; Line 26924
	cmp	BYTE PTR [edi+3], 0
	je	SHORT $LN15@insertCell
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN16@insertCell
$LN15@insertCell:
	mov	eax, DWORD PTR _info$87374[esp+64]
	mov	edx, DWORD PTR _info$87374[esp+68]
$LN16@insertCell:
	mov	esi, DWORD PTR _info$87374[esp+72]
	xor	ecx, ecx
	add	esi, eax
	movzx	eax, WORD PTR _info$87374[esp+82]
	adc	ecx, edx
	cdq
	cmp	ecx, edx
	jl	$LN1@insertCell
	jg	SHORT $LN21@insertCell
	cmp	esi, eax
	jbe	$LN1@insertCell
$LN21@insertCell:
; Line 26925
	movzx	eax, WORD PTR _info$87374[esp+84]
	add	eax, DWORD PTR _pCell$[esp+52]
; Line 26926
	mov	ebx, DWORD PTR [edi+76]
	movzx	edx, BYTE PTR [eax+2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax]
	push	3
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	eax, ecx
	mov	ecx, DWORD PTR [edi+64]
	call	_ptrmapPut
	add	esp, 4
; Line 26927
	test	eax, eax
	je	SHORT $LN1@insertCell
	pop	esi
	pop	ebp
	pop	ebx
; Line 26934
	add	esp, 44					; 0000002cH
	ret	0
$LN11@insertCell:
; Line 26881
	test	ebp, ebp
	je	SHORT $LN22@insertCell
; Line 26882
	movzx	eax, BYTE PTR _nSkip$[esp+52]
	mov	ecx, DWORD PTR _pCell$[esp+52]
	sub	esi, eax
	lea	edx, DWORD PTR [eax+ecx]
	push	esi
	push	edx
	add	eax, ebp
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 26883
	jmp	SHORT $LN10@insertCell
$LN22@insertCell:
	mov	ebp, DWORD PTR _pCell$[esp+52]
$LN10@insertCell:
; Line 26885
	mov	al, BYTE PTR [edi+2]
	movzx	ecx, al
	add	al, 1
	mov	BYTE PTR [edi+2], al
; Line 26887
	mov	DWORD PTR [edi+ecx*8+24], ebp
; Line 26888
	mov	WORD PTR [edi+ecx*8+28], bx
; Line 26889
	mov	WORD PTR [edi+18], 0
$LN1@insertCell:
; Line 26933
	xor	eax, eax
$LN13@insertCell:
	pop	esi
	pop	ebp
	pop	ebx
; Line 26934
	add	esp, 44					; 0000002cH
	ret	0
_insertCell ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _balance_quick
_TEXT	SEGMENT
_pNew$ = -124						; size = 4
_parentSize$ = -120					; size = 4
_szCell$ = -120						; size = 4
_parentIdx$ = -116					; size = 4
_pBt$ = -112						; size = 4
_pCell$ = -108						; size = 4
_pgnoNew$ = -104					; size = 4
_info$129066 = -100					; size = 32
_info$ = -100						; size = 32
_parentCell$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_pParent$ = 8						; size = 4
_balance_quick PROC					; COMDAT
; _pPage$ = ecx
; Line 27016
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+124], eax
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pParent$[esp+128]
	push	edi
; Line 27024
	movzx	edi, WORD PTR [ebp+20]
; Line 27031
	push	0
	mov	ebx, ecx
	mov	eax, DWORD PTR [ebx+64]
	push	0
	lea	ecx, DWORD PTR _pgnoNew$[esp+144]
	push	ecx
	lea	edx, DWORD PTR _pNew$[esp+148]
	push	edx
	push	eax
	mov	DWORD PTR _pBt$[esp+156], eax
	mov	DWORD PTR _parentIdx$[esp+156], edi
	call	_allocateBtreePage
	add	esp, 20					; 00000014H
; Line 27032
	test	eax, eax
; Line 27033
	jne	$LN7@balance_qu
; Line 27035
	mov	eax, DWORD PTR [ebx+24]
	push	esi
; Line 27036
	push	eax
	push	ebx
	lea	esi, DWORD PTR _info$129066[esp+148]
	mov	DWORD PTR _pCell$[esp+148], eax
	call	_sqlite3BtreeParseCellPtr
; Line 27037
	mov	ecx, DWORD PTR [ebx+68]
	movzx	edx, BYTE PTR [ecx]
	movzx	eax, WORD PTR _info$129066[esp+178]
	mov	esi, DWORD PTR _pNew$[esp+148]
	push	edx
	mov	DWORD PTR _szCell$[esp+152], eax
	call	_zeroPage
; Line 27038
	lea	eax, DWORD PTR _pCell$[esp+152]
	push	eax
	push	1
	push	esi
	lea	eax, DWORD PTR _szCell$[esp+164]
	call	_assemblePage
; Line 27039
	mov	BYTE PTR [ebx+2], 0
; Line 27042
	mov	DWORD PTR [esi+80], ebp
; Line 27043
	mov	eax, DWORD PTR [ebp+72]
	movzx	ecx, WORD PTR [eax+34]
	add	esp, 24					; 00000018H
	test	cx, cx
	jne	SHORT $LN13@balance_qu
	call	__page_ref
	jmp	SHORT $LN14@balance_qu
$LN13@balance_qu:
	add	ecx, 1
	mov	WORD PTR [eax+34], cx
$LN14@balance_qu:
; Line 27050
	movzx	edx, WORD PTR [ebx+14]
	mov	eax, DWORD PTR [ebx+68]
	movzx	ecx, WORD PTR [ebx+20]
	add	edx, eax
	lea	esi, DWORD PTR [edx+ecx*2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [esi-2]
	mov	cl, BYTE PTR [esi-1]
; Line 27051
	lea	esi, DWORD PTR _info$[esp+140]
	add	eax, ecx
	push	eax
	push	ebx
	call	_sqlite3BtreeParseCellPtr
; Line 27052
	mov	eax, DWORD PTR _info$[esp+160]
	mov	ecx, DWORD PTR _info$[esp+156]
	lea	edx, DWORD PTR _parentSize$[esp+148]
	push	edx
	push	0
	push	0
	push	0
	push	eax
	push	ecx
	lea	edx, DWORD PTR _parentCell$[esp+172]
	push	0
	push	edx
	mov	eax, ebp
	call	_fillInCell
	add	esp, 40					; 00000028H
; Line 27053
	test	eax, eax
; Line 27054
	jne	$LN57@balance_qu
; Line 27057
	push	4
	push	eax
	lea	eax, DWORD PTR _parentCell$[esp+148]
	push	eax
	mov	eax, DWORD PTR _parentSize$[esp+152]
	mov	ecx, edi
	mov	edi, ebp
	call	_insertCell
	add	esp, 12					; 0000000cH
; Line 27058
	test	eax, eax
; Line 27059
	jne	$LN57@balance_qu
; Line 27061
	mov	eax, DWORD PTR _parentIdx$[esp+140]
	mov	ebx, DWORD PTR [ebx+76]
	call	_findOverflowCell
	mov	ecx, ebx
	shr	ecx, 24					; 00000018H
	mov	BYTE PTR [eax], cl
	mov	BYTE PTR [eax+3], bl
	mov	edx, ebx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	ecx, ebx
	shr	ecx, 8
	mov	BYTE PTR [eax+2], cl
; Line 27062
	movzx	edx, BYTE PTR [ebp+8]
	mov	eax, DWORD PTR [ebp+68]
	lea	ecx, DWORD PTR [edx+eax+8]
	mov	eax, DWORD PTR _pgnoNew$[esp+140]
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ecx], dl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [ecx+1], dl
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [ecx+2], dl
	mov	BYTE PTR [ecx+3], al
; Line 27069
	mov	ecx, DWORD PTR _pBt$[esp+140]
	cmp	BYTE PTR [ecx+18], 0
	je	SHORT $LN56@balance_qu
; Line 27070
	mov	ebx, DWORD PTR [ebp+76]
	push	5
	call	_ptrmapPut
; Line 27072
	mov	edi, DWORD PTR _pNew$[esp+144]
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN53@balance_qu
	call	_findOverflowCell
	call	_ptrmapPutOvflPtr
	mov	esi, eax
; Line 27074
	test	esi, esi
	je	SHORT $LN1@balance_qu
$LN53@balance_qu:
; Line 27075
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerUnref
; Line 27076
	mov	eax, esi
	pop	esi
	pop	edi
	pop	ebp
	pop	ebx
; Line 27086
	mov	ecx, DWORD PTR __$ArrayPad$[esp+124]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	ret	0
$LN56@balance_qu:
; Line 27074
	mov	edi, DWORD PTR _pNew$[esp+140]
$LN1@balance_qu:
; Line 27084
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerUnref
; Line 27085
	push	0
	push	ebp
	call	_balance
	add	esp, 8
$LN57@balance_qu:
	pop	esi
$LN7@balance_qu:
; Line 27086
	mov	ecx, DWORD PTR __$ArrayPad$[esp+136]
	pop	edi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 124				; 0000007cH
	ret	0
_balance_quick ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _balance_nonroot
_TEXT	SEGMENT
tv3048 = -200						; size = 4
tv2130 = -200						; size = 4
_pNew$87601 = -200					; size = 4
_pNew$87575 = -200					; size = 4
_j$ = -200						; size = 4
_pParent$ = -196					; size = 4
_nNew$ = -192						; size = 4
tv1890 = -188						; size = 4
_i$ = -188						; size = 4
_nxDiv$ = -184						; size = 4
_pBt$ = -180						; size = 4
tv3364 = -176						; size = 4
_pDbPage$129188 = -176					; size = 4
_pageFlags$ = -176					; size = 4
_k$ = -176						; size = 4
_pgno$87478 = -176					; size = 4
_nOld$ = -172						; size = 4
_nCell$ = -168						; size = 4
_szCell$ = -164						; size = 4
tv2155 = -160						; size = 4
tv2112 = -160						; size = 4
_sz$87617 = -160					; size = 4
_limit$87526 = -160					; size = 4
_leafCorrection$ = -156					; size = 4
_nMaxCells$ = -156					; size = 4
_p$129238 = -152					; size = 4
_leafData$ = -148					; size = 4
_iSpace$ = -144						; size = 4
_aFrom$ = -140						; size = 4
_aSpace$ = -136						; size = 4
_apOld$ = -132						; size = 12
_pgnoNew$ = -120					; size = 20
_szNew$ = -120						; size = 20
_cntNew$ = -100						; size = 20
_aCopy$ = -100						; size = 12
_apNew$ = -80						; size = 20
_apDiv$ = -80						; size = 12
tv2076 = -60						; size = 4
_apCopy$ = -56						; size = 12
_pgnoOld$ = -44						; size = 12
_info$129305 = -32					; size = 32
_info$129269 = -32					; size = 32
_info$129264 = -32					; size = 32
_info$87622 = -32					; size = 32
_pPage$ = 8						; size = 4
_balance_nonroot PROC					; COMDAT
; Line 27118
	sub	esp, 200				; 000000c8H
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _pPage$[esp+208]
; Line 27158
	mov	ebx, DWORD PTR [esi+80]
; Line 27160
	mov	ecx, DWORD PTR [ebx+72]
	mov	eax, DWORD PTR [esi+64]
	xor	ebp, ebp
	push	ecx
	mov	DWORD PTR _nMaxCells$[esp+216], ebp
	mov	DWORD PTR _iSpace$[esp+216], ebp
	mov	DWORD PTR _aFrom$[esp+216], ebp
	mov	DWORD PTR _pBt$[esp+216], eax
	mov	DWORD PTR _pParent$[esp+216], ebx
	call	_sqlite3PagerWrite
	add	esp, 4
	cmp	eax, ebp
; Line 27161
	jne	$LN107@balance_no
; Line 27181
	cmp	BYTE PTR [esi+4], 0
	je	SHORT $LN325@balance_no
	cmp	BYTE PTR [esi+3], 0
	je	SHORT $LN325@balance_no
	cmp	BYTE PTR [esi+6], 0
	je	SHORT $LN325@balance_no
	cmp	BYTE PTR [esi+2], 1
	jne	SHORT $LN325@balance_no
	mov	dx, WORD PTR [esi+28]
	cmp	dx, WORD PTR [esi+20]
	jne	SHORT $LN325@balance_no
	mov	eax, DWORD PTR [esi+80]
	cmp	DWORD PTR [eax+76], 1
	je	SHORT $LN325@balance_no
	movzx	ecx, BYTE PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+68]
	lea	eax, DWORD PTR [ecx+edx+8]
	movzx	edx, BYTE PTR [eax+2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax]
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	cmp	ecx, DWORD PTR [esi+76]
	jne	SHORT $LN325@balance_no
; Line 27186
	push	ebx
	mov	ecx, esi
	call	_balance_quick
	add	esp, 4
	pop	esi
	pop	ebp
	pop	ebx
; Line 27681
	add	esp, 200				; 000000c8H
	ret	0
$LN325@balance_no:
; Line 27195
	cmp	BYTE PTR [ebx+1], 0
	push	edi
	je	SHORT $LN104@balance_no
; Line 27199
	movzx	edi, WORD PTR [ebx+20]
	mov	ecx, DWORD PTR [esi+76]
	xor	esi, esi
	cmp	edi, ebp
	mov	DWORD PTR _pgno$87478[esp+216], ecx
	jle	SHORT $LN99@balance_no
	movzx	ecx, WORD PTR [ebx+14]
	mov	eax, DWORD PTR [ebx+68]
	add	ecx, eax
	npad	6
$LL103@balance_no:
; Line 27200
	movzx	eax, BYTE PTR [ecx+1]
	mov	ah, BYTE PTR [ecx]
	xor	edx, edx
	add	eax, DWORD PTR [ebx+68]
	mov	dh, BYTE PTR [eax]
	movzx	ebp, BYTE PTR [eax+2]
	mov	dl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	edx, 8
	or	edx, ebp
	shl	edx, 8
	or	edx, eax
	cmp	edx, DWORD PTR _pgno$87478[esp+216]
	je	SHORT $LN340@balance_no
	add	esi, 1
	add	ecx, 2
	cmp	esi, edi
	jl	SHORT $LL103@balance_no
$LN340@balance_no:
; Line 27206
	xor	ebp, ebp
$LN99@balance_no:
; Line 27215
	mov	eax, DWORD PTR [ebx+72]
	movzx	ecx, WORD PTR [eax+34]
	cmp	cx, bp
	mov	DWORD PTR _nNew$[esp+216], ebp
	mov	DWORD PTR _nOld$[esp+216], ebp
	jne	SHORT $LN117@balance_no
	call	__page_ref
	jmp	SHORT $LN118@balance_no
$LN104@balance_no:
; Line 27207
	movzx	esi, WORD PTR [esi+16]
	jmp	SHORT $LN99@balance_no
; Line 27215
$LN117@balance_no:
	add	ecx, 1
	mov	WORD PTR [eax+34], cx
$LN118@balance_no:
; Line 27225
	movzx	ecx, WORD PTR [ebx+20]
	lea	eax, DWORD PTR [esi-1]
	lea	edx, DWORD PTR [eax+3]
	cmp	edx, ecx
	mov	DWORD PTR _nxDiv$[esp+216], eax
	jle	SHORT $LN98@balance_no
; Line 27226
	lea	eax, DWORD PTR [ecx-2]
	mov	DWORD PTR _nxDiv$[esp+216], eax
$LN98@balance_no:
; Line 27228
	cmp	eax, ebp
	jge	SHORT $LN97@balance_no
; Line 27229
	xor	eax, eax
	mov	DWORD PTR _nxDiv$[esp+216], eax
$LN97@balance_no:
; Line 27232
	mov	ebp, eax
	add	eax, eax
	mov	DWORD PTR tv3048[esp+216], eax
	xor	esi, esi
	npad	7
$LL96@balance_no:
; Line 27233
	movzx	eax, WORD PTR [ebx+20]
	cmp	ebp, eax
	jge	SHORT $LN348@balance_no
; Line 27234
	movzx	ecx, WORD PTR [ebx+14]
	add	ecx, DWORD PTR tv3048[esp+216]
	mov	eax, DWORD PTR [ebx+68]
	movzx	edx, BYTE PTR [ecx+eax+1]
	mov	dh, BYTE PTR [ecx+eax]
	add	ecx, eax
	add	eax, edx
	mov	DWORD PTR _apDiv$[esp+esi+216], eax
; Line 27237
	jmp	SHORT $LN349@balance_no
$LN348@balance_no:
; Line 27238
	jne	$LN323@balance_no
; Line 27239
	mov	eax, DWORD PTR _pParent$[esp+216]
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR [eax+68]
	lea	eax, DWORD PTR [ecx+edx+8]
$LN349@balance_no:
	movzx	ecx, BYTE PTR [eax+1]
	mov	ch, BYTE PTR [eax]
	movzx	edx, BYTE PTR [eax+2]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
; Line 27243
	mov	edi, ecx
	test	edi, edi
	mov	DWORD PTR _pgnoOld$[esp+esi+216], ecx
	je	$LN322@balance_no
	mov	edx, DWORD PTR _pBt$[esp+216]
	lea	ecx, DWORD PTR _pDbPage$129188[esp+216]
	push	0
	push	ecx
	mov	ecx, DWORD PTR [edx]
	mov	eax, edi
	call	_sqlite3PagerAcquire
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN123@balance_no
	mov	eax, DWORD PTR _pDbPage$129188[esp+216]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN132@balance_no
	mov	ecx, DWORD PTR [ecx+56]
	lea	ebx, DWORD PTR [ecx+eax+48]
	jmp	SHORT $LN133@balance_no
$LN132@balance_no:
	xor	ebx, ebx
$LN133@balance_no:
	cmp	edi, 1
	setne	cl
	sub	cl, 1
	lea	edx, DWORD PTR [eax+48]
	mov	DWORD PTR [ebx+72], eax
	mov	eax, DWORD PTR _pBt$[esp+216]
	mov	DWORD PTR [ebx+64], eax
	xor	eax, eax
	mov	DWORD PTR [ebx+68], edx
	and	ecx, 100				; 00000064H
	mov	DWORD PTR [ebx+76], edi
	mov	BYTE PTR [ebx+8], cl
	cmp	BYTE PTR [ebx], al
	mov	DWORD PTR _apOld$[esp+esi+216], ebx
	jne	SHORT $LN123@balance_no
	mov	edx, DWORD PTR _pParent$[esp+216]
	push	edx
	call	_sqlite3BtreeInitPage
	add	esp, 4
$LN123@balance_no:
; Line 27244
	test	eax, eax
	mov	edi, eax
	jne	$LN248@balance_no
; Line 27245
	mov	eax, DWORD PTR _apOld$[esp+esi+216]
; Line 27248
	add	DWORD PTR _nOld$[esp+216], 1
	add	DWORD PTR tv3048[esp+216], 2
	mov	WORD PTR [eax+16], bp
; Line 27249
	movzx	edx, BYTE PTR [eax+2]
	add	edx, DWORD PTR _nMaxCells$[esp+216]
	movzx	ecx, WORD PTR [eax+20]
	mov	DWORD PTR _apCopy$[esp+esi+216], edi
	add	esi, 4
	lea	eax, DWORD PTR [edx+ecx+1]
	add	ebp, 1
	cmp	esi, 12					; 0000000cH
	mov	DWORD PTR _nMaxCells$[esp+216], eax
	jge	SHORT $LN323@balance_no
; Line 27232
	mov	ebx, DWORD PTR _pParent$[esp+216]
	jmp	$LL96@balance_no
$LN322@balance_no:
; Line 27243
	mov	edi, 11					; 0000000bH
	jmp	$LN248@balance_no
$LN323@balance_no:
; Line 27265
	mov	eax, DWORD PTR _pBt$[esp+216]
	mov	esi, DWORD PTR _nMaxCells$[esp+216]
	movzx	ecx, WORD PTR [eax+24]
	mov	dl, BYTE PTR [eax+18]
	add	esi, 1
	and	esi, -2					; fffffffeH
	add	ecx, esi
	neg	dl
	sbb	edx, edx
	and	edx, esi
	lea	eax, DWORD PTR [edx+ecx*8+264]
	test	eax, eax
	jle	SHORT $LN151@balance_no
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN140@balance_no
	test	edi, edi
	jg	SHORT $LN151@balance_no
$LN140@balance_no:
	push	eax
	call	_malloc
	add	esp, 4
	test	eax, eax
	mov	DWORD PTR _p$129238[esp+216], eax
	jne	SHORT $LN88@balance_no
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN150@balance_no
	test	edi, edi
	jg	SHORT $LN151@balance_no
$LN150@balance_no:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN151@balance_no:
; Line 27267
	mov	edi, 7
; Line 27268
	jmp	$LN248@balance_no
$LN88@balance_no:
; Line 27280
	mov	ebx, DWORD PTR _pBt$[esp+216]
	movzx	ecx, WORD PTR [ebx+24]
	lea	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR _szCell$[esp+216], eax
	lea	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR _aCopy$[esp+216], eax
	mov	eax, 1
$LL87@balance_no:
	mov	edx, DWORD PTR _aCopy$[esp+eax*4+212]
	lea	edx, DWORD PTR [edx+ecx+88]
	mov	DWORD PTR _aCopy$[esp+eax*4+216], edx
	add	eax, 1
	cmp	eax, 3
	jl	SHORT $LL87@balance_no
	cmp	BYTE PTR [ebx+18], 0
	mov	eax, DWORD PTR _aCopy$[esp+224]
	lea	eax, DWORD PTR [ecx+eax+88]
	mov	DWORD PTR _aSpace$[esp+216], eax
	je	SHORT $LN84@balance_no
; Line 27281
	lea	eax, DWORD PTR [eax+ecx*4]
	add	eax, ecx
	mov	DWORD PTR _aFrom$[esp+216], eax
$LN84@balance_no:
; Line 27291
	mov	ebp, DWORD PTR _nOld$[esp+216]
	xor	edi, edi
	test	ebp, ebp
	jle	SHORT $LN81@balance_no
	npad	3
$LL83@balance_no:
; Line 27292
	movzx	ecx, WORD PTR [ebx+24]
	mov	edx, DWORD PTR _aCopy$[esp+edi*4+216]
	lea	esi, DWORD PTR [edx+ecx]
; Line 27294
	mov	edx, DWORD PTR _apOld$[esp+edi*4+216]
	mov	eax, esi
	sub	eax, ecx
	mov	DWORD PTR [esi+68], eax
	movzx	ecx, WORD PTR [ebx+24]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	ecx, DWORD PTR [edx+68]
	push	ecx
	push	eax
	mov	DWORD PTR _apCopy$[esp+edi*4+228], esi
	call	_memcpy
; Line 27297
	movzx	edx, WORD PTR [ebx+24]
	mov	eax, esi
	sub	eax, edx
	add	edi, 1
	add	esp, 12					; 0000000cH
	cmp	edi, ebp
	mov	DWORD PTR [esi+68], eax
	jl	SHORT $LL83@balance_no
$LN81@balance_no:
; Line 27317
	mov	edx, DWORD PTR _pPage$[esp+212]
	mov	cl, BYTE PTR [edx+4]
	movzx	eax, cl
	add	eax, eax
	xor	ebx, ebx
	add	eax, eax
; Line 27318
	cmp	BYTE PTR [edx+6], bl
	mov	DWORD PTR _nCell$[esp+216], ebx
	mov	DWORD PTR _leafCorrection$[esp+216], eax
	je	SHORT $LN109@balance_no
	test	cl, cl
	mov	DWORD PTR _leafData$[esp+216], 1
	jne	SHORT $LN110@balance_no
$LN109@balance_no:
	mov	DWORD PTR _leafData$[esp+216], ebx
$LN110@balance_no:
; Line 27319
	xor	edx, edx
	cmp	ebp, ebx
	mov	DWORD PTR _i$[esp+216], edx
	jle	$LN78@balance_no
	jmp	SHORT $LN350@balance_no
	npad	12
$LL334@balance_no:
	mov	ebx, DWORD PTR _nCell$[esp+216]
$LN350@balance_no:
; Line 27320
	mov	edi, DWORD PTR _apCopy$[esp+edx*4+216]
; Line 27321
	movzx	ecx, WORD PTR [edi+20]
	movzx	esi, BYTE PTR [edi+2]
	mov	eax, DWORD PTR _p$129238[esp+216]
	add	ecx, esi
; Line 27322
	test	ecx, ecx
	mov	DWORD PTR _limit$87526[esp+216], ecx
	mov	DWORD PTR _j$[esp+216], 0
	jle	$LN75@balance_no
; Line 27329
	mov	ecx, DWORD PTR _szCell$[esp+216]
	sub	ecx, eax
	lea	ebp, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR tv3364[esp+216], ecx
	npad	6
$LL345@balance_no:
	movzx	eax, BYTE PTR [edi+2]
	sub	eax, 1
	mov	ecx, DWORD PTR _j$[esp+216]
	js	SHORT $LN160@balance_no
; Line 27324
	lea	edx, DWORD PTR [edi+eax*8+24]
$LL162@balance_no:
	movzx	esi, WORD PTR [edx+4]
	cmp	esi, ecx
	jg	SHORT $LN161@balance_no
	je	SHORT $LN286@balance_no
	sub	ecx, 1
$LN161@balance_no:
	sub	eax, 1
	sub	edx, 8
	test	eax, eax
	jge	SHORT $LL162@balance_no
$LN160@balance_no:
	movzx	edx, WORD PTR [edi+14]
	mov	eax, DWORD PTR [edi+68]
	add	edx, eax
	lea	ecx, DWORD PTR [edx+ecx*2]
	movzx	edx, BYTE PTR [ecx+1]
	mov	dh, BYTE PTR [ecx]
	add	eax, edx
$LN163@balance_no:
; Line 27325
	push	eax
	push	edi
	lea	esi, DWORD PTR _info$129264[esp+224]
	mov	DWORD PTR [ebp], eax
	call	_sqlite3BtreeParseCellPtr
	movzx	eax, WORD PTR _info$129264[esp+254]
	mov	ecx, DWORD PTR tv3364[esp+224]
; Line 27327
	mov	edx, DWORD PTR _pBt$[esp+224]
	add	esp, 8
	mov	DWORD PTR [ecx+ebp], eax
	cmp	BYTE PTR [edx+18], 0
	je	SHORT $LN71@balance_no
; Line 27329
	mov	al, BYTE PTR _i$[esp+216]
	mov	ecx, DWORD PTR _aFrom$[esp+216]
	mov	BYTE PTR [ecx+ebx], al
; Line 27330
	movzx	ecx, BYTE PTR [edi+2]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN71@balance_no
	mov	esi, DWORD PTR [ebp]
	lea	edx, DWORD PTR [edi+24]
$LL73@balance_no:
; Line 27331
	cmp	DWORD PTR [edx], esi
	je	SHORT $LN287@balance_no
	add	eax, 1
	add	edx, 8
	cmp	eax, ecx
	jl	SHORT $LL73@balance_no
; Line 27653
	jmp	SHORT $LN71@balance_no
$LN286@balance_no:
; Line 27324
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN163@balance_no
$LN287@balance_no:
; Line 27332
	mov	edx, DWORD PTR _aFrom$[esp+216]
	mov	BYTE PTR [edx+ebx], 255			; 000000ffH
$LN71@balance_no:
	mov	eax, DWORD PTR _j$[esp+216]
	add	eax, 1
; Line 27338
	add	ebx, 1
	add	ebp, 4
	cmp	eax, DWORD PTR _limit$87526[esp+216]
	mov	DWORD PTR _j$[esp+216], eax
	jl	$LL345@balance_no
	mov	edx, DWORD PTR _i$[esp+216]
	mov	DWORD PTR _nCell$[esp+216], ebx
$LN75@balance_no:
; Line 27340
	mov	eax, DWORD PTR _nOld$[esp+216]
	add	eax, -1
	cmp	edx, eax
	jge	$LN79@balance_no
; Line 27341
	mov	ebp, DWORD PTR _apDiv$[esp+edx*4+216]
	mov	ebx, DWORD PTR _pParent$[esp+216]
	push	ebp
	push	ebx
	lea	esi, DWORD PTR _info$129269[esp+224]
	call	_sqlite3BtreeParseCellPtr
	movzx	esi, WORD PTR _info$129269[esp+254]
	add	esp, 8
; Line 27342
	cmp	DWORD PTR _leafData$[esp+216], 0
	je	SHORT $LN68@balance_no
; Line 27348
	mov	eax, DWORD PTR _nxDiv$[esp+216]
	mov	ecx, esi
	push	eax
	mov	esi, ebx
	call	_dropCell
	add	esp, 4
; Line 27349
	jmp	$LN351@balance_no
$LN68@balance_no:
; Line 27352
	mov	ecx, DWORD PTR _szCell$[esp+216]
	mov	edx, DWORD PTR _nCell$[esp+216]
; Line 27353
	mov	eax, DWORD PTR _iSpace$[esp+216]
	mov	DWORD PTR [ecx+edx*4], esi
	mov	ecx, DWORD PTR _aSpace$[esp+216]
; Line 27356
	push	esi
	lea	ebx, DWORD PTR [ecx+eax]
	add	eax, esi
	push	ebp
	push	ebx
	mov	DWORD PTR _iSpace$[esp+228], eax
	call	_memcpy
; Line 27357
	mov	edx, DWORD PTR _leafCorrection$[esp+228]
	mov	ecx, DWORD PTR _nCell$[esp+228]
	mov	eax, DWORD PTR _p$129238[esp+228]
	add	ebx, edx
; Line 27359
	mov	edx, DWORD PTR _pBt$[esp+228]
	mov	DWORD PTR [eax+ecx*4], ebx
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR [edx+18], 0
; Line 27360
	mov	ebx, ecx
	je	SHORT $LN66@balance_no
	mov	eax, DWORD PTR _aFrom$[esp+216]
	mov	BYTE PTR [eax+ebx], 255			; 000000ffH
$LN66@balance_no:
; Line 27363
	mov	ecx, DWORD PTR _nxDiv$[esp+216]
	push	ecx
	mov	ecx, esi
	mov	esi, DWORD PTR _pParent$[esp+220]
	call	_dropCell
; Line 27364
	mov	eax, DWORD PTR _szCell$[esp+220]
	mov	edx, DWORD PTR _leafCorrection$[esp+220]
	sub	DWORD PTR [eax+ebx*4], edx
	mov	ecx, DWORD PTR [eax+ebx*4]
	add	esp, 4
; Line 27366
	cmp	BYTE PTR [edi+4], 0
	jne	SHORT $LN65@balance_no
; Line 27370
	movzx	eax, BYTE PTR [edi+8]
	mov	ecx, DWORD PTR [edi+68]
	mov	edx, DWORD PTR _p$129238[esp+216]
	mov	edx, DWORD PTR [edx+ebx*4]
	mov	eax, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR [edx], eax
; Line 27371
	jmp	SHORT $LN63@balance_no
$LN65@balance_no:
; Line 27373
	cmp	ecx, 4
	jge	SHORT $LN63@balance_no
; Line 27375
	mov	DWORD PTR [eax+ebx*4], 4
$LN63@balance_no:
; Line 27378
	add	ebx, 1
	mov	DWORD PTR _nCell$[esp+216], ebx
$LN351@balance_no:
	mov	edx, DWORD PTR _i$[esp+216]
$LN79@balance_no:
; Line 27319
	add	edx, 1
	cmp	edx, DWORD PTR _nOld$[esp+216]
	mov	DWORD PTR _i$[esp+216], edx
	jl	$LL334@balance_no
$LN78@balance_no:
; Line 27399
	mov	ecx, DWORD PTR _pBt$[esp+216]
	movzx	edx, WORD PTR [ecx+26]
	mov	eax, DWORD PTR _leafCorrection$[esp+216]
; Line 27400
	mov	edi, DWORD PTR _nCell$[esp+216]
	lea	esi, DWORD PTR [edx+eax-12]
	xor	ecx, ecx
	xor	ebp, ebp
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN328@balance_no
	mov	ebx, DWORD PTR _leafData$[esp+216]
	npad	10
$LL62@balance_no:
; Line 27402
	mov	edx, DWORD PTR _szCell$[esp+216]
	mov	edx, DWORD PTR [edx+ecx*4]
	lea	eax, DWORD PTR [eax+edx+2]
; Line 27403
	cmp	eax, esi
	jle	SHORT $LN61@balance_no
; Line 27404
	sub	eax, edx
; Line 27406
	test	ebx, ebx
	mov	DWORD PTR _szNew$[esp+ebp*4+216], eax
	mov	DWORD PTR _cntNew$[esp+ebp*4+216], ecx
	je	SHORT $LN341@balance_no
	sub	ecx, 1
$LN341@balance_no:
; Line 27407
	xor	eax, eax
; Line 27408
	add	ebp, 1
$LN61@balance_no:
	add	ecx, 1
	cmp	ecx, edi
	jl	SHORT $LL62@balance_no
$LN328@balance_no:
; Line 27412
	mov	DWORD PTR _cntNew$[esp+ebp*4+216], edi
; Line 27413
	add	ebp, 1
	mov	DWORD PTR _szNew$[esp+ebp*4+212], eax
; Line 27425
	lea	edi, DWORD PTR [ebp-1]
	test	edi, edi
	mov	DWORD PTR _k$[esp+216], ebp
	jle	SHORT $LN343@balance_no
$LL327@balance_no:
; Line 27431
	mov	eax, DWORD PTR _cntNew$[esp+edi*4+212]
	mov	ebx, DWORD PTR _szCell$[esp+216]
	mov	edx, DWORD PTR _szNew$[esp+edi*4+216]
	mov	esi, DWORD PTR _szNew$[esp+edi*4+212]
	sub	eax, 1
$LN352@balance_no:
; Line 27432
	mov	ecx, eax
	sub	ecx, DWORD PTR _leafData$[esp+216]
	add	ecx, 1
; Line 27435
	test	edx, edx
	je	SHORT $LN52@balance_no
	mov	ebp, esi
	sub	ebp, DWORD PTR [ebx+eax*4]
	mov	ebx, DWORD PTR [ebx+ecx*4]
	sub	ebp, 2
	lea	ebx, DWORD PTR [ebx+edx+2]
	cmp	ebx, ebp
	jg	SHORT $LN53@balance_no
	mov	ebx, DWORD PTR _szCell$[esp+216]
$LN52@balance_no:
; Line 27436
	mov	ecx, DWORD PTR [ebx+ecx*4]
; Line 27438
	add	DWORD PTR _cntNew$[esp+edi*4+212], -1
	lea	edx, DWORD PTR [edx+ecx+2]
	mov	ecx, -2					; fffffffeH
	sub	ecx, DWORD PTR [ebx+eax*4]
	mov	eax, DWORD PTR _cntNew$[esp+edi*4+212]
	add	esi, ecx
; Line 27439
	add	eax, -1
; Line 27441
	jmp	SHORT $LN352@balance_no
$LN53@balance_no:
; Line 27442
	mov	DWORD PTR _szNew$[esp+edi*4+216], edx
; Line 27443
	mov	DWORD PTR _szNew$[esp+edi*4+212], esi
	sub	edi, 1
	test	edi, edi
	jg	SHORT $LL327@balance_no
; Line 27425
	mov	ebp, DWORD PTR _k$[esp+216]
$LN343@balance_no:
; Line 27456
	mov	edx, DWORD PTR _pPage$[esp+212]
	mov	eax, DWORD PTR [edx+68]
	movzx	ecx, BYTE PTR [eax]
; Line 27457
	xor	ebx, ebx
	test	ebp, ebp
	mov	DWORD PTR _pageFlags$[esp+216], ecx
	jle	$LN271@balance_no
$LL51@balance_no:
; Line 27459
	cmp	ebx, DWORD PTR _nOld$[esp+216]
	jge	SHORT $LN48@balance_no
; Line 27460
	mov	esi, DWORD PTR _apOld$[esp+ebx*4+216]
; Line 27463
	mov	eax, DWORD PTR [esi+72]
	mov	edx, DWORD PTR _pgnoOld$[esp+ebx*4+216]
	push	eax
	mov	DWORD PTR _apNew$[esp+ebx*4+220], esi
	mov	DWORD PTR _pNew$87575[esp+220], esi
	mov	DWORD PTR _pgnoNew$[esp+ebx*4+220], edx
	mov	DWORD PTR _apOld$[esp+ebx*4+220], 0
	call	_sqlite3PagerWrite
; Line 27464
	add	DWORD PTR _nNew$[esp+220], 1
	mov	edi, eax
	add	esp, 4
; Line 27465
	test	edi, edi
	jne	$balance_cleanup$87497
; Line 27466
	jmp	SHORT $LN46@balance_no
$LN48@balance_no:
; Line 27468
	mov	ecx, DWORD PTR _pgnoNew$[esp+ebx*4+212]
	lea	eax, DWORD PTR _pgnoNew$[esp+ebx*4+216]
	push	0
	push	ecx
	push	eax
	mov	eax, DWORD PTR _pBt$[esp+228]
	lea	edx, DWORD PTR _pNew$87575[esp+228]
	push	edx
	push	eax
	call	_allocateBtreePage
	mov	edi, eax
	add	esp, 20					; 00000014H
; Line 27469
	test	edi, edi
	jne	$balance_cleanup$87497
; Line 27470
	mov	esi, DWORD PTR _pNew$87575[esp+216]
; Line 27471
	add	DWORD PTR _nNew$[esp+216], 1
	mov	DWORD PTR _apNew$[esp+ebx*4+216], esi
$LN46@balance_no:
; Line 27473
	mov	ecx, DWORD PTR _pageFlags$[esp+216]
	push	ecx
	call	_zeroPage
	add	ebx, 1
	add	esp, 4
	cmp	ebx, ebp
	jl	$LL51@balance_no
$LN271@balance_no:
; Line 27478
	cmp	ebx, DWORD PTR _nOld$[esp+216]
	jge	SHORT $LN43@balance_no
$LL44@balance_no:
; Line 27479
	mov	esi, DWORD PTR _apOld$[esp+ebx*4+216]
	push	esi
	call	_freePage
	mov	edi, eax
	add	esp, 4
; Line 27480
	test	edi, edi
	jne	$balance_cleanup$87497
; Line 27481
	test	esi, esi
	je	SHORT $LN169@balance_no
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
$LN169@balance_no:
; Line 27482
	mov	DWORD PTR _apOld$[esp+ebx*4+216], 0
; Line 27483
	add	ebx, 1
	cmp	ebx, DWORD PTR _nOld$[esp+216]
	jl	SHORT $LL44@balance_no
$LN43@balance_no:
; Line 27500
	lea	eax, DWORD PTR [ebp-1]
	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN329@balance_no
	npad	2
$LL41@balance_no:
	lea	eax, DWORD PTR _pgnoNew$[esp+ecx*4+216]
	mov	DWORD PTR tv2112[esp+216], eax
; Line 27501
	mov	eax, DWORD PTR [eax]
; Line 27503
	lea	ebx, DWORD PTR [ecx+1]
	cmp	ebx, ebp
	mov	DWORD PTR tv2130[esp+216], eax
	mov	edi, eax
	mov	edx, ecx
	mov	DWORD PTR tv1890[esp+216], ebx
	mov	eax, ebx
	jge	SHORT $LN40@balance_no
	npad	1
$LL38@balance_no:
; Line 27504
	mov	esi, DWORD PTR _pgnoNew$[esp+eax*4+216]
	cmp	esi, edi
	jae	SHORT $LN37@balance_no
; Line 27505
	mov	edx, eax
; Line 27506
	mov	edi, esi
$LN37@balance_no:
	add	eax, 1
	cmp	eax, ebp
	jl	SHORT $LL38@balance_no
; Line 27509
	cmp	edx, ecx
	jle	SHORT $LN40@balance_no
; Line 27514
	mov	edi, DWORD PTR _pgnoNew$[esp+edx*4+216]
	mov	ebx, DWORD PTR tv2112[esp+216]
	mov	esi, DWORD PTR _apNew$[esp+ecx*4+216]
	lea	eax, DWORD PTR _pgnoNew$[esp+edx*4+216]
	lea	ecx, DWORD PTR _apNew$[esp+ecx*4+216]
	mov	DWORD PTR [ebx], edi
; Line 27515
	mov	edi, DWORD PTR _apNew$[esp+edx*4+216]
; Line 27517
	mov	ebx, DWORD PTR tv1890[esp+216]
	lea	edx, DWORD PTR _apNew$[esp+edx*4+216]
	mov	DWORD PTR [ecx], edi
	mov	ecx, DWORD PTR tv2130[esp+216]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [edx], esi
$LN40@balance_no:
	mov	ecx, ebx
	lea	eax, DWORD PTR [ebp-1]
	cmp	ecx, eax
	jl	SHORT $LL41@balance_no
$LN329@balance_no:
; Line 27535
	mov	esi, DWORD PTR _nNew$[esp+216]
	mov	ebx, DWORD PTR _pParent$[esp+216]
	xor	edi, edi
	xor	ebp, ebp
	test	esi, esi
	mov	DWORD PTR _i$[esp+216], edi
	jle	$LN31@balance_no
$LL33@balance_no:
; Line 27540
	mov	ecx, DWORD PTR _cntNew$[esp+edi*4+216]
	mov	edx, DWORD PTR _szCell$[esp+216]
	mov	esi, DWORD PTR _apNew$[esp+edi*4+216]
	lea	eax, DWORD PTR _cntNew$[esp+edi*4+216]
	mov	DWORD PTR tv2076[esp+216], eax
	lea	eax, DWORD PTR [edx+ebp*4]
	mov	edx, DWORD PTR _p$129238[esp+216]
	lea	edx, DWORD PTR [edx+ebp*4]
	mov	DWORD PTR tv2155[esp+216], ecx
	push	edx
	sub	ecx, ebp
	push	ecx
	push	esi
	mov	DWORD PTR _pNew$87601[esp+228], esi
	call	_assemblePage
; Line 27550
	mov	eax, DWORD PTR _pBt$[esp+228]
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR [eax+18], 0
	je	$LN344@balance_no
; Line 27551
	cmp	ebp, DWORD PTR tv2155[esp+216]
	jge	$LN344@balance_no
	xor	ebx, ebx
$LL29@balance_no:
; Line 27553
	mov	ecx, DWORD PTR _aFrom$[esp+216]
	mov	al, BYTE PTR [ecx+ebp]
	cmp	al, 255					; 000000ffH
	je	SHORT $LN25@balance_no
	movzx	edx, al
	mov	eax, DWORD PTR _apCopy$[esp+edx*4+216]
	mov	ecx, DWORD PTR [eax+76]
	cmp	ecx, DWORD PTR [esi+76]
	je	SHORT $LN28@balance_no
$LN25@balance_no:
; Line 27554
	movzx	eax, BYTE PTR [esi+2]
	sub	eax, 1
	mov	ecx, ebx
	js	SHORT $LN176@balance_no
	lea	edx, DWORD PTR [esi+eax*8+24]
	npad	1
$LL178@balance_no:
	movzx	esi, WORD PTR [edx+4]
	cmp	esi, ecx
	jg	SHORT $LN177@balance_no
	je	$LN291@balance_no
	sub	ecx, 1
$LN177@balance_no:
	sub	eax, 1
	sub	edx, 8
	test	eax, eax
	jge	SHORT $LL178@balance_no
; Line 27653
	mov	esi, DWORD PTR _pNew$87601[esp+216]
; Line 27554
$LN176@balance_no:
	movzx	edx, WORD PTR [esi+14]
	mov	eax, DWORD PTR [esi+68]
	add	edx, eax
	lea	ecx, DWORD PTR [edx+ecx*2]
	movzx	edx, BYTE PTR [ecx+1]
	mov	dh, BYTE PTR [ecx]
	add	edx, eax
$LN179@balance_no:
	mov	eax, edx
	mov	edi, esi
	call	_ptrmapPutOvflPtr
	mov	edi, eax
; Line 27555
	test	edi, edi
	jne	$balance_cleanup$87497
$LN28@balance_no:
; Line 27551
	mov	eax, DWORD PTR tv2076[esp+216]
	add	ebp, 1
	add	ebx, 1
	cmp	ebp, DWORD PTR [eax]
	jl	$LL29@balance_no
	mov	edi, DWORD PTR _i$[esp+216]
	mov	ebx, DWORD PTR _pParent$[esp+216]
$LN344@balance_no:
; Line 27568
	mov	ecx, DWORD PTR _nNew$[esp+216]
	mov	ebp, DWORD PTR tv2155[esp+216]
	add	ecx, -1
	cmp	edi, ecx
	jge	$LN32@balance_no
	cmp	ebp, DWORD PTR _nCell$[esp+216]
	jge	$LN32@balance_no
; Line 27576
	cmp	BYTE PTR [esi+4], 0
	mov	edx, DWORD PTR _p$129238[esp+216]
	mov	eax, DWORD PTR _szCell$[esp+216]
	mov	edi, DWORD PTR [edx+ebp*4]
	mov	ecx, DWORD PTR [eax+ebp*4]
	mov	edx, DWORD PTR _leafCorrection$[esp+216]
	lea	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _sz$87617[esp+216], eax
	jne	SHORT $LN22@balance_no
; Line 27577
	mov	ecx, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR [ecx+8], edx
; Line 27578
	xor	ebx, ebx
	jmp	$LN18@balance_no
$LN291@balance_no:
; Line 27554
	mov	edx, DWORD PTR [edx]
	mov	esi, DWORD PTR _pNew$87601[esp+216]
	jmp	$LN179@balance_no
$LN22@balance_no:
; Line 27579
	cmp	DWORD PTR _leafData$[esp+216], 0
	je	SHORT $LN20@balance_no
; Line 27587
	mov	eax, DWORD PTR _p$129238[esp+216]
	mov	ecx, DWORD PTR [eax+ebp*4-4]
	sub	ebp, 1
	push	ecx
	push	esi
	lea	esi, DWORD PTR _info$87622[esp+224]
	call	_sqlite3BtreeParseCellPtr
; Line 27588
	mov	edx, DWORD PTR _aSpace$[esp+224]
	mov	esi, DWORD PTR _iSpace$[esp+224]
; Line 27589
	mov	ecx, DWORD PTR _info$87622[esp+236]
	lea	eax, DWORD PTR _sz$87617[esp+224]
	push	eax
	mov	eax, DWORD PTR _pParent$[esp+228]
	push	0
	push	0
	push	0
	lea	edi, DWORD PTR [edx+esi]
	mov	edx, DWORD PTR _info$87622[esp+248]
	push	ecx
	push	edx
	push	0
	push	edi
	call	_fillInCell
; Line 27590
	mov	eax, DWORD PTR _sz$87617[esp+256]
	add	esi, eax
	add	esp, 40					; 00000028H
	mov	DWORD PTR _iSpace$[esp+216], esi
; Line 27592
	xor	ebx, ebx
; Line 27593
	jmp	SHORT $LN353@balance_no
$LN20@balance_no:
; Line 27595
	mov	edx, DWORD PTR _iSpace$[esp+216]
	mov	ebx, DWORD PTR _aSpace$[esp+216]
	add	ebx, edx
; Line 27596
	add	edx, eax
	sub	edi, 4
; Line 27609
	cmp	ecx, 4
	mov	DWORD PTR _iSpace$[esp+216], edx
	jne	SHORT $LN18@balance_no
; Line 27611
	mov	eax, DWORD PTR _pParent$[esp+216]
	push	edi
	push	eax
	lea	esi, DWORD PTR _info$129305[esp+224]
	call	_sqlite3BtreeParseCellPtr
	movzx	eax, WORD PTR _info$129305[esp+254]
	add	esp, 8
$LN353@balance_no:
	mov	esi, DWORD PTR _pNew$87601[esp+216]
$LN18@balance_no:
; Line 27614
	mov	ecx, DWORD PTR _nxDiv$[esp+216]
	push	4
	push	ebx
	push	edi
	mov	edi, DWORD PTR _pParent$[esp+228]
	call	_insertCell
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 27615
	test	edi, edi
	jne	$balance_cleanup$87497
; Line 27616
	mov	edi, DWORD PTR _pParent$[esp+216]
	movzx	eax, BYTE PTR [edi+2]
	sub	eax, 1
	mov	ecx, DWORD PTR _nxDiv$[esp+216]
	js	SHORT $LN330@balance_no
	lea	edx, DWORD PTR [edi+eax*8+24]
$LL187@balance_no:
	movzx	ebx, WORD PTR [edx+4]
	cmp	ebx, ecx
	jg	SHORT $LN186@balance_no
	je	$LN293@balance_no
	sub	ecx, 1
$LN186@balance_no:
	sub	eax, 1
	sub	edx, 8
	test	eax, eax
	jge	SHORT $LL187@balance_no
$LN330@balance_no:
	movzx	edx, WORD PTR [edi+14]
	mov	eax, DWORD PTR [edi+68]
	add	edx, eax
	lea	ecx, DWORD PTR [edx+ecx*2]
	movzx	edx, BYTE PTR [ecx+1]
	mov	dh, BYTE PTR [ecx]
	add	eax, edx
$LN188@balance_no:
	mov	ecx, DWORD PTR [esi+76]
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], cl
; Line 27622
	mov	eax, DWORD PTR _pBt$[esp+216]
	cmp	BYTE PTR [eax+18], 0
	je	SHORT $LN331@balance_no
	cmp	DWORD PTR _leafData$[esp+216], 0
	jne	SHORT $LN331@balance_no
; Line 27623
	movzx	eax, BYTE PTR [edi+2]
	sub	eax, 1
	mov	ecx, DWORD PTR _nxDiv$[esp+216]
	js	SHORT $LN196@balance_no
	lea	edx, DWORD PTR [edi+eax*8+24]
$LL198@balance_no:
	movzx	esi, WORD PTR [edx+4]
	cmp	esi, ecx
	jg	SHORT $LN197@balance_no
	je	$LN294@balance_no
	sub	ecx, 1
$LN197@balance_no:
	sub	eax, 1
	sub	edx, 8
	test	eax, eax
	jge	SHORT $LL198@balance_no
$LN196@balance_no:
	movzx	edx, WORD PTR [edi+14]
	mov	eax, DWORD PTR [edi+68]
	add	edx, eax
	lea	ecx, DWORD PTR [edx+ecx*2]
	movzx	edx, BYTE PTR [ecx+1]
	mov	dh, BYTE PTR [ecx]
	add	edx, eax
$LN199@balance_no:
	mov	eax, edx
	call	_ptrmapPutOvflPtr
	mov	edi, eax
; Line 27624
	test	edi, edi
	jne	$balance_cleanup$87497
$LN331@balance_no:
; Line 27630
	mov	edi, DWORD PTR _i$[esp+216]
	mov	ebx, DWORD PTR _pParent$[esp+216]
	add	ebp, 1
	add	DWORD PTR _nxDiv$[esp+216], 1
$LN32@balance_no:
	add	edi, 1
	cmp	edi, DWORD PTR _nNew$[esp+216]
	mov	DWORD PTR _i$[esp+216], edi
	jl	$LL33@balance_no
; Line 27535
	mov	esi, DWORD PTR _nNew$[esp+216]
$LN31@balance_no:
; Line 27636
	test	BYTE PTR _pageFlags$[esp+216], 8
	jne	SHORT $LN14@balance_no
; Line 27637
	mov	eax, DWORD PTR _nOld$[esp+216]
	mov	ecx, DWORD PTR _apCopy$[esp+eax*4+212]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _apNew$[esp+esi*4+212]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], edx
$LN14@balance_no:
; Line 27639
	movzx	eax, BYTE PTR [ebx+2]
	movzx	edx, WORD PTR [ebx+20]
	mov	ecx, DWORD PTR _nxDiv$[esp+216]
	add	edx, eax
	cmp	ecx, edx
	jne	SHORT $LN13@balance_no
; Line 27641
	movzx	ecx, BYTE PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+68]
	mov	eax, DWORD PTR _pgnoNew$[esp+esi*4+212]
	lea	ecx, DWORD PTR [ecx+edx+8]
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ecx], dl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [ecx+1], dl
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [ecx+2], dl
	mov	BYTE PTR [ecx+3], al
; Line 27642
	jmp	SHORT $LN210@balance_no
$LN293@balance_no:
; Line 27616
	mov	eax, DWORD PTR [edx]
	jmp	$LN188@balance_no
$LN294@balance_no:
; Line 27623
	mov	edx, DWORD PTR [edx]
	jmp	$LN199@balance_no
$LN13@balance_no:
; Line 27645
	add	eax, -1
	js	SHORT $LN205@balance_no
	lea	edx, DWORD PTR [ebx+eax*8+24]
$LL207@balance_no:
	movzx	esi, WORD PTR [edx+4]
	cmp	esi, ecx
	jg	SHORT $LN206@balance_no
	je	$LN297@balance_no
	sub	ecx, 1
$LN206@balance_no:
	sub	eax, 1
	sub	edx, 8
	test	eax, eax
	jge	SHORT $LL207@balance_no
$LN205@balance_no:
	movzx	edx, WORD PTR [ebx+14]
	mov	eax, DWORD PTR [ebx+68]
	add	edx, eax
	lea	ecx, DWORD PTR [edx+ecx*2]
	xor	edx, edx
	mov	dh, BYTE PTR [ecx]
	mov	dl, BYTE PTR [ecx+1]
	add	eax, edx
$LN208@balance_no:
	mov	ecx, DWORD PTR _nNew$[esp+216]
	mov	ecx, DWORD PTR _pgnoNew$[esp+ecx*4+212]
	mov	esi, DWORD PTR _nNew$[esp+216]
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], cl
$LN210@balance_no:
; Line 27651
	xor	ebp, ebp
	test	esi, esi
	jle	SHORT $LN9@balance_no
	mov	ebx, DWORD PTR _nNew$[esp+216]
$LL11@balance_no:
; Line 27652
	mov	esi, DWORD PTR _apNew$[esp+ebp*4+216]
	call	_reparentChildPages
	mov	edi, eax
; Line 27653
	test	edi, edi
	jne	SHORT $balance_cleanup$87497
	add	ebp, 1
	cmp	ebp, ebx
	jl	SHORT $LL11@balance_no
$LN9@balance_no:
; Line 27655
	mov	esi, DWORD PTR _pParent$[esp+216]
	call	_reparentChildPages
	mov	edi, eax
; Line 27656
	test	edi, edi
	jne	SHORT $balance_cleanup$87497
; Line 27664
	push	eax
	push	esi
	call	_balance
	add	esp, 8
	mov	edi, eax
$balance_cleanup$87497:
; Line 27670
	mov	eax, DWORD PTR _p$129238[esp+216]
	push	eax
	call	_free
	add	esp, 4
$LN248@balance_no:
; Line 27671
	mov	ebx, DWORD PTR _nOld$[esp+216]
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN339@balance_no
	npad	1
$LL6@balance_no:
; Line 27672
	mov	eax, DWORD PTR _apOld$[esp+esi*4+216]
	test	eax, eax
	je	SHORT $LN5@balance_no
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN5@balance_no:
	add	esi, 1
	cmp	esi, ebx
	jl	SHORT $LL6@balance_no
$LN339@balance_no:
; Line 27674
	mov	ebx, DWORD PTR _nNew$[esp+216]
	xor	esi, esi
	test	ebx, ebx
	jle	SHORT $LN1@balance_no
$LL3@balance_no:
; Line 27675
	mov	eax, DWORD PTR _apNew$[esp+esi*4+216]
	test	eax, eax
	je	SHORT $LN2@balance_no
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN2@balance_no:
	add	esi, 1
	cmp	esi, ebx
	jl	SHORT $LL3@balance_no
$LN1@balance_no:
; Line 27677
	mov	ecx, DWORD PTR _pParent$[esp+216]
	mov	eax, DWORD PTR [ecx+72]
	call	_sqlite3PagerUnref
; Line 27680
	mov	eax, edi
	pop	edi
$LN107@balance_no:
	pop	esi
	pop	ebp
	pop	ebx
; Line 27681
	add	esp, 200				; 000000c8H
	ret	0
$LN297@balance_no:
; Line 27645
	mov	eax, DWORD PTR [edx]
	jmp	$LN208@balance_no
_balance_nonroot ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _balance_shallower
_TEXT	SEGMENT
_p$129572 = -48						; size = 4
_szCell$ = -44						; size = 4
tv639 = -40						; size = 4
_pChild$ = -40						; size = 4
_pBt$ = -36						; size = 4
_info$129589 = -32					; size = 32
_pPage$ = 8						; size = 4
_balance_shallower PROC					; COMDAT
; Line 27688
	sub	esp, 48					; 00000030H
	push	ebx
; Line 27699
	mov	ebx, DWORD PTR _pPage$[esp+48]
	mov	eax, DWORD PTR [ebx+64]
; Line 27700
	movzx	ecx, WORD PTR [eax+24]
	mov	DWORD PTR _pBt$[esp+52], eax
	sub	ecx, 8
	mov	eax, 1431655766				; 55555556H
	imul	ecx
	push	ebp
	push	esi
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	push	edi
; Line 27701
	lea	eax, DWORD PTR [esi*8]
	xor	edi, edi
	test	eax, eax
	jle	SHORT $LN36@balance_sh
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN25@balance_sh
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN36@balance_sh
$LN25@balance_sh:
	push	eax
	call	_malloc
	mov	ebp, eax
	add	esp, 4
	test	ebp, ebp
	mov	DWORD PTR _p$129572[esp+64], ebp
	jne	SHORT $LN18@balance_sh
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN71@balance_sh
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN36@balance_sh
$LN71@balance_sh:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
$LN36@balance_sh:
	pop	edi
	pop	esi
	pop	ebp
; Line 27702
	mov	eax, 7
	pop	ebx
; Line 27778
	add	esp, 48					; 00000030H
	ret	0
$LN18@balance_sh:
; Line 27704
	cmp	BYTE PTR [ebx+4], 0
	lea	eax, DWORD PTR [ebp+esi*4]
	mov	DWORD PTR _szCell$[esp+64], eax
	jne	$end_shallow_balance$87671
; Line 27720
	movzx	ecx, BYTE PTR [ebx+8]
	mov	edx, DWORD PTR [ebx+68]
	lea	eax, DWORD PTR [ecx+edx+8]
	movzx	edx, BYTE PTR [eax+2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax]
; Line 27723
	mov	edi, DWORD PTR [ebx+64]
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	mov	esi, ecx
	lea	ecx, DWORD PTR _pChild$[esp+64]
	push	ecx
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	mov	edi, eax
	add	esp, 4
; Line 27724
	test	edi, edi
	jne	$end_shallow_balance$87671
; Line 27725
	cmp	DWORD PTR [ebx+76], 1
; Line 27726
	mov	ebp, DWORD PTR _pChild$[esp+64]
	jne	$LN14@balance_sh
	push	ebx
	mov	ebx, ebp
	call	_sqlite3BtreeInitPage
	mov	edi, eax
	add	esp, 4
; Line 27727
	test	edi, edi
	jne	$LN69@balance_sh
; Line 27729
	cmp	WORD PTR [ebp+18], 100			; 00000064H
; Line 27733
	mov	esi, DWORD PTR _pPage$[esp+60]
	jb	$LN7@balance_sh
	mov	edx, DWORD PTR [ebp+68]
	movzx	eax, BYTE PTR [edx]
	push	eax
	call	_zeroPage
	add	esp, 4
; Line 27734
	cmp	WORD PTR [ebp+20], di
	jbe	SHORT $LN67@balance_sh
	mov	ebx, DWORD PTR _szCell$[esp+64]
	mov	ecx, DWORD PTR _p$129572[esp+64]
	sub	ecx, ebx
	mov	DWORD PTR tv639[esp+64], ecx
	jmp	SHORT $LN11@balance_sh
	npad	1
$LL70@balance_sh:
	mov	ecx, DWORD PTR tv639[esp+64]
$LN11@balance_sh:
	movzx	edx, WORD PTR [ebp+14]
; Line 27735
	mov	eax, DWORD PTR [ebp+68]
	add	edx, eax
	lea	esi, DWORD PTR [edx+edi*2]
	movzx	edx, BYTE PTR [esi+1]
	mov	dh, BYTE PTR [esi]
; Line 27736
	lea	esi, DWORD PTR _info$129589[esp+64]
	add	eax, edx
	push	eax
	push	ebp
	mov	DWORD PTR [ecx+ebx], eax
	call	_sqlite3BtreeParseCellPtr
	movzx	eax, WORD PTR _info$129589[esp+102]
	mov	DWORD PTR [ebx], eax
	movzx	ecx, WORD PTR [ebp+20]
	add	edi, 1
	add	esp, 8
	add	ebx, 4
	cmp	edi, ecx
	jl	SHORT $LL70@balance_sh
; Line 27734
	mov	esi, DWORD PTR _pPage$[esp+60]
$LN67@balance_sh:
; Line 27738
	movzx	eax, WORD PTR [ebp+20]
	mov	edx, DWORD PTR _p$129572[esp+64]
	push	edx
	push	eax
	mov	eax, DWORD PTR _szCell$[esp+72]
	push	esi
	call	_assemblePage
; Line 27741
	movzx	ecx, BYTE PTR [ebp+8]
	mov	edx, DWORD PTR [ebp+68]
	lea	eax, DWORD PTR [ecx+edx+8]
	movzx	edx, BYTE PTR [eax+2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax]
; Line 27742
	push	ebp
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	mov	edx, DWORD PTR [esi+68]
	shl	ecx, 8
	or	eax, ecx
	movzx	ecx, BYTE PTR [esi+8]
	lea	ecx, DWORD PTR [ecx+edx+8]
	mov	edx, eax
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [ecx], dl
	mov	edx, eax
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [ecx+1], dl
	mov	edx, eax
	shr	edx, 8
	mov	BYTE PTR [ecx+2], dl
	mov	BYTE PTR [ecx+3], al
	call	_freePage
	add	esp, 16					; 00000010H
; Line 27749
	jmp	SHORT $LN7@balance_sh
$LN14@balance_sh:
; Line 27750
	mov	eax, DWORD PTR [ebx+64]
	movzx	ecx, WORD PTR [eax+26]
	mov	edx, DWORD PTR [ebp+68]
	mov	eax, DWORD PTR [ebx+68]
	push	ecx
	push	edx
	push	eax
	call	_memcpy
; Line 27753
	push	0
	mov	BYTE PTR [ebx], 0
	mov	DWORD PTR [ebx+80], 0
	call	_sqlite3BtreeInitPage
; Line 27755
	push	ebp
	call	_freePage
	add	esp, 20					; 00000014H
	mov	esi, ebx
$LN7@balance_sh:
; Line 27759
	call	_reparentChildPages
; Line 27762
	mov	ecx, DWORD PTR _pBt$[esp+64]
	cmp	BYTE PTR [ecx+18], 0
	mov	edi, eax
	je	SHORT $LN3@balance_sh
; Line 27764
	xor	ebx, ebx
	cmp	WORD PTR [esi+20], bx
	jbe	SHORT $LN3@balance_sh
$LL5@balance_sh:
; Line 27765
	mov	eax, ebx
	mov	edi, esi
	call	_findOverflowCell
	call	_ptrmapPutOvflPtr
	mov	edi, eax
; Line 27766
	test	edi, edi
	jne	SHORT $LN69@balance_sh
	movzx	edx, WORD PTR [esi+20]
	add	ebx, 1
	cmp	ebx, edx
	jl	SHORT $LL5@balance_sh
$LN3@balance_sh:
; Line 27772
	test	edi, edi
	jne	SHORT $LN69@balance_sh
; Line 27773
	mov	eax, DWORD PTR [ebp+72]
	call	_sqlite3PagerUnref
$LN69@balance_sh:
	mov	ebp, DWORD PTR _p$129572[esp+64]
$end_shallow_balance$87671:
; Line 27776
	push	ebp
	call	_free
	add	esp, 4
; Line 27777
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 27778
	add	esp, 48					; 00000030H
	ret	0
_balance_shallower ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _balance_deeper
_TEXT	SEGMENT
_cdata$ = -16						; size = 4
_pChild$ = -16						; size = 4
_data$ = -12						; size = 4
_pgnoChild$ = -8					; size = 4
_pBt$ = -4						; size = 4
_balance_deeper PROC					; COMDAT
; _pPage$ = eax
; Line 27790
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	esi, eax
; Line 27804
	mov	eax, DWORD PTR [esi+76]
	mov	edi, DWORD PTR [esi+64]
	push	0
	push	eax
	lea	ecx, DWORD PTR _pgnoChild$[esp+32]
	push	ecx
	lea	edx, DWORD PTR _pChild$[esp+36]
	push	edx
	push	edi
	mov	DWORD PTR _pBt$[esp+44], edi
	call	_allocateBtreePage
	add	esp, 20					; 00000014H
; Line 27805
	test	eax, eax
	jne	$LN10@balance_de
; Line 27808
	mov	ecx, DWORD PTR [esi+68]
; Line 27809
	movzx	eax, BYTE PTR [esi+8]
; Line 27810
	add	eax, ecx
	mov	DWORD PTR _data$[esp+24], ecx
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+5]
	push	ebx
	movzx	ebx, WORD PTR [edi+26]
; Line 27811
	mov	edi, DWORD PTR _pChild$[esp+28]
	mov	edx, DWORD PTR [edi+68]
	mov	cl, BYTE PTR [eax+6]
	push	ebp
	mov	DWORD PTR _cdata$[esp+32], edx
; Line 27812
	movzx	edx, WORD PTR [esi+14]
	mov	ebp, ecx
	movzx	ecx, WORD PTR [esi+20]
	lea	edx, DWORD PTR [edx+ecx*2]
	movzx	ecx, BYTE PTR [esi+8]
	sub	edx, ecx
	push	edx
	push	eax
	mov	eax, DWORD PTR _cdata$[esp+40]
	push	eax
	call	_memcpy
; Line 27813
	mov	ecx, DWORD PTR _data$[esp+44]
	mov	eax, DWORD PTR _cdata$[esp+44]
	sub	ebx, ebp
	push	ebx
	lea	edx, DWORD PTR [ecx+ebp]
	push	edx
	add	eax, ebp
	push	eax
	call	_memcpy
; Line 27815
	push	esi
	mov	ebx, edi
	call	_sqlite3BtreeInitPage
	mov	ebx, eax
	add	esp, 28					; 0000001cH
; Line 27816
	test	ebx, ebx
	jne	$balancedeeper_out$87710
; Line 27817
	movzx	ecx, BYTE PTR [esi+2]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	push	ecx
	lea	edx, DWORD PTR [esi+24]
	push	edx
	lea	eax, DWORD PTR [edi+24]
	push	eax
	call	_memcpy
; Line 27818
	mov	al, BYTE PTR [esi+2]
	add	esp, 12					; 0000000cH
; Line 27819
	test	al, al
	mov	BYTE PTR [edi+2], al
	je	SHORT $LN7@balance_de
; Line 27820
	mov	WORD PTR [edi+18], bx
$LN7@balance_de:
; Line 27823
	mov	ecx, DWORD PTR [edi+68]
	movzx	edx, BYTE PTR [ecx]
	and	edx, -9					; fffffff7H
	push	edx
	call	_zeroPage
; Line 27824
	movzx	eax, BYTE PTR [esi+8]
	mov	ecx, DWORD PTR [esi+68]
	lea	eax, DWORD PTR [eax+ecx+8]
	mov	ecx, DWORD PTR _pgnoChild$[esp+36]
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
	mov	BYTE PTR [eax+3], cl
; Line 27827
	mov	ecx, DWORD PTR _pBt$[esp+36]
	add	esp, 4
	mov	BYTE PTR [eax+2], dl
	cmp	BYTE PTR [ecx+18], 0
	je	SHORT $LN2@balance_de
; Line 27829
	mov	ebx, DWORD PTR [esi+76]
	mov	eax, DWORD PTR [edi+76]
	push	5
	call	_ptrmapPut
	mov	ebx, eax
	add	esp, 4
; Line 27830
	test	ebx, ebx
	jne	SHORT $balancedeeper_out$87710
; Line 27831
	xor	esi, esi
	cmp	WORD PTR [edi+20], si
	jbe	SHORT $LN2@balance_de
	npad	4
$LL4@balance_de:
; Line 27832
	mov	eax, esi
	call	_findOverflowCell
	call	_ptrmapPutOvflPtr
; Line 27833
	test	eax, eax
	jne	SHORT $LN22@balance_de
	movzx	eax, WORD PTR [edi+20]
	add	esi, 1
	cmp	esi, eax
	jl	SHORT $LL4@balance_de
$LN2@balance_de:
; Line 27839
	push	edi
	call	_balance_nonroot
	add	esp, 4
	mov	ebx, eax
$balancedeeper_out$87710:
; Line 27842
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerUnref
; Line 27843
	mov	eax, ebx
$LN22@balance_de:
	pop	ebp
	pop	ebx
$LN10@balance_de:
	pop	edi
	pop	esi
; Line 27844
	add	esp, 16					; 00000010H
	ret	0
_balance_deeper ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _balance
_TEXT	SEGMENT
_pPage$ = 8						; size = 4
_insert$ = 12						; size = 4
_balance PROC						; COMDAT
; Line 27850
	push	esi
; Line 27852
	mov	esi, DWORD PTR _pPage$[esp]
	push	edi
	xor	edi, edi
	cmp	DWORD PTR [esi+80], edi
	jne	SHORT $LN6@balance
; Line 27853
	cmp	BYTE PTR [esi+2], 0
	jbe	SHORT $LN9@balance
; Line 27854
	mov	eax, esi
	call	_balance_deeper
	mov	edi, eax
; Line 27856
	test	edi, edi
	jne	SHORT $LN2@balance
$LN9@balance:
	cmp	WORD PTR [esi+20], 0
	jne	SHORT $LN13@balance
; Line 27857
	push	esi
	call	_balance_shallower
	add	esp, 4
	pop	edi
	pop	esi
; Line 27866
	ret	0
$LN6@balance:
; Line 27861
	cmp	BYTE PTR [esi+2], 0
	ja	SHORT $LN1@balance
	cmp	DWORD PTR _insert$[esp+4], edi
	jne	SHORT $LN13@balance
	mov	eax, DWORD PTR [esi+64]
	movzx	ecx, WORD PTR [eax+26]
	add	ecx, ecx
	mov	eax, 1431655766				; 55555556H
	imul	ecx
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx
	movzx	edx, WORD PTR [esi+18]
	cmp	edx, ecx
	jle	SHORT $LN13@balance
$LN1@balance:
; Line 27862
	push	esi
	call	_balance_nonroot
	add	esp, 4
	pop	edi
	pop	esi
; Line 27866
	ret	0
$LN13@balance:
; Line 27865
	mov	eax, edi
$LN2@balance:
	pop	edi
	pop	esi
; Line 27866
	ret	0
_balance ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _checkReadLocks
_TEXT	SEGMENT
_pgnoRoot$ = 8						; size = 4
_checkReadLocks PROC					; COMDAT
; _pBtree$ = eax
; _pExclude$ = ebx
; Line 27884
	push	ebp
	mov	ebp, DWORD PTR _pgnoRoot$[esp]
	push	esi
	push	edi
; Line 27887
	mov	edi, DWORD PTR [eax]
; Line 27888
	mov	eax, DWORD PTR [eax+4]
	mov	esi, DWORD PTR [eax+4]
	test	esi, esi
	je	SHORT $LN9@checkReadL
$LL11@checkReadL:
; Line 27889
	cmp	esi, ebx
	je	SHORT $LN10@checkReadL
; Line 27890
	cmp	BYTE PTR [esi+65], 1
	jne	SHORT $LN10@checkReadL
; Line 27891
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ebp
	jne	SHORT $LN10@checkReadL
; Line 27892
	cmp	BYTE PTR [esi+64], 0
	jne	SHORT $LN5@checkReadL
; Line 27893
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [ecx]
; Line 27895
	test	eax, eax
	je	SHORT $LN15@checkReadL
	cmp	eax, edi
	je	SHORT $LN10@checkReadL
	test	DWORD PTR [eax+8], 16384		; 00004000H
	jne	SHORT $LN10@checkReadL
$LN15@checkReadL:
	pop	edi
	pop	esi
; Line 27896
	mov	eax, 6
	pop	ebp
; Line 27903
	ret	0
$LN5@checkReadL:
; Line 27898
	mov	edx, DWORD PTR [esi+24]
	cmp	DWORD PTR [edx+76], eax
	je	SHORT $LN10@checkReadL
; Line 27899
	push	esi
	call	_moveToRoot
	add	esp, 4
$LN10@checkReadL:
	mov	esi, DWORD PTR [esi+4]
	test	esi, esi
	jne	SHORT $LL11@checkReadL
$LN9@checkReadL:
	pop	edi
	pop	esi
; Line 27902
	xor	eax, eax
	pop	ebp
; Line 27903
	ret	0
_checkReadLocks ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _clearDatabasePage
_TEXT	SEGMENT
_pPage$ = -4						; size = 4
_pBt$ = 8						; size = 4
_pgno$ = 12						; size = 4
_pParent$ = 16						; size = 4
_freePageFlag$ = 20					; size = 4
_clearDatabasePage PROC					; COMDAT
; Line 28250
	push	ecx
	push	esi
	push	edi
; Line 28256
	mov	edi, DWORD PTR _pBt$[esp+8]
	mov	esi, DWORD PTR [edi]
	mov	DWORD PTR _pPage$[esp+12], 0
	call	_sqlite3PagerPagecount
	mov	esi, DWORD PTR _pgno$[esp+8]
	cmp	esi, eax
	jbe	SHORT $LN13@clearDatab
	pop	edi
; Line 28257
	mov	eax, 11					; 0000000bH
	pop	esi
; Line 28284
	pop	ecx
	ret	0
$LN13@clearDatab:
; Line 28260
	test	esi, esi
	push	ebp
	jne	SHORT $LN17@clearDatab
	mov	ebp, 11					; 0000000bH
; Line 28283
	mov	eax, ebp
	pop	ebp
	pop	edi
	pop	esi
; Line 28284
	pop	ecx
	ret	0
; Line 28260
$LN17@clearDatab:
	lea	eax, DWORD PTR _pPage$[esp+16]
	push	ebx
	push	eax
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	mov	esi, DWORD PTR _pPage$[esp+24]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN16@clearDatab
	cmp	BYTE PTR [esi], 0
	jne	SHORT $LN16@clearDatab
	mov	ecx, DWORD PTR _pParent$[esp+16]
	push	ecx
	mov	ebx, esi
	call	_sqlite3BtreeInitPage
	add	esp, 4
$LN16@clearDatab:
; Line 28261
	test	eax, eax
	mov	ebp, eax
	jne	$cleardatabasepage_out$87893
; Line 28262
	xor	edi, edi
	cmp	WORD PTR [esi+20], di
	jbe	SHORT $LN9@clearDatab
$LL11@clearDatab:
	movzx	edx, WORD PTR [esi+14]
; Line 28263
	mov	eax, DWORD PTR [esi+68]
	add	edx, eax
	xor	ebx, ebx
	mov	bh, BYTE PTR [edx+edi*2]
	lea	ecx, DWORD PTR [edx+edi*2]
	mov	bl, BYTE PTR [ecx+1]
	add	ebx, eax
; Line 28264
	cmp	BYTE PTR [esi+4], 0
	jne	SHORT $LN7@clearDatab
; Line 28265
	movzx	eax, BYTE PTR [ebx+1]
	mov	ah, BYTE PTR [ebx]
	movzx	ecx, BYTE PTR [ebx+2]
	movzx	edx, BYTE PTR [ebx+3]
	shl	eax, 8
	or	eax, ecx
	mov	ecx, DWORD PTR [esi+80]
	push	1
	shl	eax, 8
	or	eax, edx
	mov	edx, DWORD PTR _pBt$[esp+20]
	push	ecx
	push	eax
	push	edx
	call	_clearDatabasePage
	mov	ebp, eax
	add	esp, 16					; 00000010H
; Line 28266
	test	ebp, ebp
	jne	$cleardatabasepage_out$87893
$LN7@clearDatab:
; Line 28268
	mov	ecx, ebx
	mov	eax, esi
	call	_clearCell
	mov	ebp, eax
; Line 28269
	test	ebp, ebp
	jne	$cleardatabasepage_out$87893
	movzx	eax, WORD PTR [esi+20]
	add	edi, 1
	cmp	edi, eax
	jl	SHORT $LL11@clearDatab
$LN9@clearDatab:
; Line 28271
	cmp	BYTE PTR [esi+4], 0
	jne	SHORT $LN32@clearDatab
; Line 28272
	mov	eax, DWORD PTR [esi+68]
	movzx	edx, BYTE PTR [eax+10]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+8]
	add	eax, 8
	push	1
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	mov	edx, DWORD PTR _pBt$[esp+20]
	shl	ecx, 8
	or	eax, ecx
	mov	ecx, DWORD PTR [esi+80]
	push	ecx
	push	eax
	push	edx
	call	_clearDatabasePage
	mov	ebp, eax
	add	esp, 16					; 00000010H
; Line 28273
	test	ebp, ebp
	jne	SHORT $cleardatabasepage_out$87893
$LN32@clearDatab:
; Line 28275
	cmp	DWORD PTR _freePageFlag$[esp+16], 0
	je	SHORT $LN3@clearDatab
; Line 28276
	push	esi
	call	_freePage
	mov	ebp, eax
	jmp	SHORT $LN33@clearDatab
$LN3@clearDatab:
; Line 28277
	mov	eax, DWORD PTR [esi+72]
	push	eax
	call	_sqlite3PagerWrite
	mov	ebp, eax
	add	esp, 4
	test	ebp, ebp
	jne	SHORT $cleardatabasepage_out$87893
; Line 28278
	mov	ecx, DWORD PTR [esi+68]
	movzx	edx, BYTE PTR [ecx]
	or	edx, 8
	push	edx
	call	_zeroPage
$LN33@clearDatab:
	add	esp, 4
$cleardatabasepage_out$87893:
; Line 28282
	test	esi, esi
	pop	ebx
	je	SHORT $LN24@clearDatab
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
$LN24@clearDatab:
; Line 28283
	mov	eax, ebp
	pop	ebp
	pop	edi
	pop	esi
; Line 28284
	pop	ecx
	ret	0
_clearDatabasePage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeGetMeta
_TEXT	SEGMENT
_pDbPage$ = -4						; size = 4
_idx$ = 8						; size = 4
_pMeta$ = 12						; size = 4
_sqlite3BtreeGetMeta PROC				; COMDAT
; _p$ = eax
; Line 28452
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _idx$[esp+8]
	push	esi
	push	edi
	mov	edi, eax
; Line 28456
	mov	esi, DWORD PTR [edi+4]
; Line 28463
	push	1
	mov	bl, 1
	call	_queryTableLock
	add	esp, 4
; Line 28464
	test	eax, eax
; Line 28465
	jne	SHORT $LN3@sqlite3Btr@35
; Line 28469
	mov	ecx, DWORD PTR [esi]
	push	eax
	lea	eax, DWORD PTR _pDbPage$[esp+24]
	push	eax
	mov	eax, 1
	call	_sqlite3PagerAcquire
	add	esp, 8
; Line 28470
	test	eax, eax
	jne	SHORT $LN3@sqlite3Btr@35
; Line 28472
	mov	eax, DWORD PTR _pDbPage$[esp+20]
	movzx	ecx, BYTE PTR [eax+ebp*4+85]
	mov	ch, BYTE PTR [eax+ebp*4+84]
	movzx	edx, BYTE PTR [eax+ebp*4+86]
	shl	ecx, 8
	or	ecx, edx
	movzx	edx, BYTE PTR [eax+ebp*4+87]
	shl	ecx, 8
	or	ecx, edx
	mov	edx, DWORD PTR _pMeta$[esp+16]
	mov	DWORD PTR [edx], ecx
; Line 28473
	call	_sqlite3PagerUnref
; Line 28483
	push	1
	push	1
	mov	esi, edi
	call	_lockTable
	add	esp, 8
$LN3@sqlite3Btr@35:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 28485
	pop	ecx
	ret	0
_sqlite3BtreeGetMeta ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeUpdateMeta
_TEXT	SEGMENT
_sqlite3BtreeUpdateMeta PROC				; COMDAT
; _p$ = ecx
; _idx$ = edi
; _iMeta$ = ebx
; Line 28496
	cmp	BYTE PTR [ecx+8], 2
	mov	eax, DWORD PTR [ecx+4]
	je	SHORT $LN2@sqlite3Btr@36
; Line 28497
	mov	al, BYTE PTR [eax+13]
	neg	al
	sbb	eax, eax
	and	eax, 7
	add	eax, 1
; Line 28505
	ret	0
$LN2@sqlite3Btr@36:
; Line 28500
	mov	eax, DWORD PTR [eax+8]
	push	esi
	mov	esi, DWORD PTR [eax+68]
; Line 28501
	mov	eax, DWORD PTR [eax+72]
	push	eax
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 28502
	test	eax, eax
	jne	SHORT $LN7@sqlite3Btr@36
; Line 28503
	mov	eax, ebx
	mov	ecx, ebx
	mov	edx, ebx
	shr	eax, 8
	shr	ecx, 24					; 00000018H
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [esi+edi*4+38], al
	mov	BYTE PTR [esi+edi*4+36], cl
	mov	BYTE PTR [esi+edi*4+37], dl
	mov	BYTE PTR [esi+edi*4+39], bl
; Line 28504
	xor	eax, eax
$LN7@sqlite3Btr@36:
	pop	esi
; Line 28505
	ret	0
_sqlite3BtreeUpdateMeta ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@EAEHHDPC@Bad?5ptr?5map?5entry?5key?$DN?$CFd?5expecte@ ; `string'
PUBLIC	??_C@_0BN@NJCBBLIO@Failed?5to?5read?5ptrmap?5key?$DN?$CFd?$AA@ ; `string'
;	COMDAT ??_C@_0DG@EAEHHDPC@Bad?5ptr?5map?5entry?5key?$DN?$CFd?5expecte@
CONST	SEGMENT
??_C@_0DG@EAEHHDPC@Bad?5ptr?5map?5entry?5key?$DN?$CFd?5expecte@ DB 'Bad p'
	DB	'tr map entry key=%d expected=(%d,%d) got=(%d,%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NJCBBLIO@Failed?5to?5read?5ptrmap?5key?$DN?$CFd?$AA@
CONST	SEGMENT
??_C@_0BN@NJCBBLIO@Failed?5to?5read?5ptrmap?5key?$DN?$CFd?$AA@ DB 'Failed'
	DB	' to read ptrmap key=%d', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _checkPtrmap
_TEXT	SEGMENT
_ePtrmapType$ = -5					; size = 1
_iPtrmapParent$ = -4					; size = 4
_iParent$ = 8						; size = 4
_zContext$ = 12						; size = 4
_checkPtrmap PROC					; COMDAT
; _pCheck$ = edi
; _iChild$ = esi
; _eType$ = ebx
; Line 28593
	sub	esp, 8
	push	ebp
	mov	ebp, DWORD PTR _zContext$[esp+8]
; Line 28598
	lea	eax, DWORD PTR _iPtrmapParent$[esp+12]
	push	eax
	lea	ecx, DWORD PTR _ePtrmapType$[esp+16]
	push	ecx
	mov	ecx, DWORD PTR [edi]
	mov	eax, esi
	call	_ptrmapGet
	add	esp, 8
; Line 28599
	test	eax, eax
	je	SHORT $LN3@checkPtrma
; Line 28600
	push	esi
	push	OFFSET ??_C@_0BN@NJCBBLIO@Failed?5to?5read?5ptrmap?5key?$DN?$CFd?$AA@
	mov	eax, ebp
	mov	ecx, edi
	call	_checkAppendMsg
	add	esp, 8
	pop	ebp
; Line 28609
	add	esp, 8
	ret	0
$LN3@checkPtrma:
; Line 28604
	mov	al, BYTE PTR _ePtrmapType$[esp+12]
	cmp	al, bl
	mov	ecx, DWORD PTR _iPtrmapParent$[esp+12]
	jne	SHORT $LN6@checkPtrma
	cmp	ecx, DWORD PTR _iParent$[esp+8]
	je	SHORT $LN2@checkPtrma
$LN6@checkPtrma:
; Line 28607
	push	ecx
	movzx	edx, al
	mov	eax, DWORD PTR _iParent$[esp+12]
	push	edx
	push	eax
	movzx	ecx, bl
	push	ecx
	push	esi
	push	OFFSET ??_C@_0DG@EAEHHDPC@Bad?5ptr?5map?5entry?5key?$DN?$CFd?5expecte@
	mov	eax, ebp
	mov	ecx, edi
	call	_checkAppendMsg
	add	esp, 24					; 00000018H
$LN2@checkPtrma:
	pop	ebp
; Line 28609
	add	esp, 8
	ret	0
_checkPtrmap ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@GMIBDIEE@failed?5to?5get?5page?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0DJ@PBFEOOMP@?$CFd?5of?5?$CFd?5pages?5missing?5from?5over@ ; `string'
PUBLIC	??_C@_0CH@LNHECGJJ@freelist?5leaf?5count?5too?5big?5on?5p@ ; `string'
;	COMDAT ??_C@_0BG@GMIBDIEE@failed?5to?5get?5page?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BG@GMIBDIEE@failed?5to?5get?5page?5?$CFd?$AA@ DB 'failed to get pa'
	DB	'ge %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@PBFEOOMP@?$CFd?5of?5?$CFd?5pages?5missing?5from?5over@
CONST	SEGMENT
??_C@_0DJ@PBFEOOMP@?$CFd?5of?5?$CFd?5pages?5missing?5from?5over@ DB '%d o'
	DB	'f %d pages missing from overflow list starting at %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LNHECGJJ@freelist?5leaf?5count?5too?5big?5on?5p@
CONST	SEGMENT
??_C@_0CH@LNHECGJJ@freelist?5leaf?5count?5too?5big?5on?5p@ DB 'freelist l'
	DB	'eaf count too big on page %d', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _checkList
_TEXT	SEGMENT
_pOvflPage$88058 = -20					; size = 4
_n$88068 = -16						; size = 4
tv93 = -12						; size = 4
_iFirst$ = -8						; size = 4
_expected$ = -4						; size = 4
_isFreeList$ = 8					; size = 4
_N$ = 12						; size = 4
_zContext$ = 16						; size = 4
_checkList PROC						; COMDAT
; _pCheck$ = ecx
; _iPage$ = eax
; Line 28622
	sub	esp, 20					; 00000014H
	push	ebx
; Line 28624
	mov	ebx, DWORD PTR _N$[esp+20]
; Line 28626
	test	ebx, ebx
	push	esi
	mov	esi, eax
	push	edi
	mov	edi, ecx
	mov	DWORD PTR _expected$[esp+32], ebx
	mov	DWORD PTR _iFirst$[esp+32], esi
	jle	$LN42@checkList
	push	ebp
	npad	1
$LL15@checkList:
	sub	ebx, 1
	cmp	DWORD PTR [edi+16], 0
	mov	DWORD PTR _N$[esp+32], ebx
	je	$LN52@checkList
; Line 28629
	cmp	esi, 1
	jl	$LN38@checkList
; Line 28635
	test	esi, esi
	je	$LN52@checkList
	cmp	esi, DWORD PTR [edi+8]
	jg	$LN19@checkList
	test	esi, esi
	jl	$LN19@checkList
	mov	eax, DWORD PTR [edi+12]
	cmp	DWORD PTR [eax+esi*4], 1
	je	$LN47@checkList
	mov	ecx, eax
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, 1
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR [eax], edx
	jg	$LN52@checkList
; Line 28636
	mov	ecx, DWORD PTR [edi+4]
	lea	eax, DWORD PTR _pOvflPage$88058[esp+36]
	push	0
	push	eax
	mov	eax, esi
	call	_sqlite3PagerAcquire
	add	esp, 8
	test	eax, eax
	jne	$LN40@checkList
; Line 28641
	cmp	DWORD PTR _isFreeList$[esp+32], eax
	je	$LN10@checkList
; Line 28642
	mov	ebp, DWORD PTR _pOvflPage$88058[esp+36]
	movzx	ecx, BYTE PTR [ebp+54]
	movzx	edx, BYTE PTR [ebp+55]
	xor	eax, eax
	mov	ah, BYTE PTR [ebp+52]
	mov	al, BYTE PTR [ebp+53]
	shl	eax, 8
	or	eax, ecx
; Line 28644
	mov	ecx, DWORD PTR [edi]
	shl	eax, 8
	or	eax, edx
	cmp	BYTE PTR [ecx+18], 0
	mov	DWORD PTR _n$88068[esp+36], eax
	je	SHORT $LN49@checkList
; Line 28645
	mov	edx, DWORD PTR _zContext$[esp+32]
	push	edx
	push	0
	mov	bl, 2
	call	_checkPtrmap
	mov	eax, DWORD PTR _n$88068[esp+44]
	mov	ebx, DWORD PTR _N$[esp+40]
	add	esp, 8
$LN49@checkList:
; Line 28648
	mov	ecx, DWORD PTR [edi]
	movzx	edx, WORD PTR [ecx+26]
	shr	edx, 2
	sub	edx, 8
	cmp	eax, edx
	jle	SHORT $LN8@checkList
; Line 28650
	mov	eax, DWORD PTR _zContext$[esp+32]
	push	esi
	push	OFFSET ??_C@_0CH@LNHECGJJ@freelist?5leaf?5count?5too?5big?5on?5p@
	mov	ecx, edi
	call	_checkAppendMsg
	add	esp, 8
; Line 28651
	sub	ebx, 1
; Line 28652
	jmp	$LN1@checkList
$LN8@checkList:
; Line 28653
	test	eax, eax
	jle	SHORT $LN4@checkList
	mov	eax, DWORD PTR _n$88068[esp+36]
	add	ebp, 58					; 0000003aH
	mov	DWORD PTR tv93[esp+36], eax
	npad	7
$LL51@checkList:
; Line 28654
	movzx	edx, BYTE PTR [ebp]
	movzx	eax, BYTE PTR [ebp+1]
	xor	ecx, ecx
	mov	ch, BYTE PTR [ebp-2]
	mov	cl, BYTE PTR [ebp-1]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	mov	esi, ecx
; Line 28656
	mov	ecx, DWORD PTR [edi]
	cmp	BYTE PTR [ecx+18], 0
	je	SHORT $LN3@checkList
; Line 28657
	mov	edx, DWORD PTR _zContext$[esp+32]
	push	edx
	push	0
	mov	bl, 2
	call	_checkPtrmap
	add	esp, 8
$LN3@checkList:
; Line 28660
	mov	eax, DWORD PTR _zContext$[esp+32]
	mov	edx, esi
	mov	ecx, edi
	call	_checkRef
	add	ebp, 4
	sub	DWORD PTR tv93[esp+36], 1
	jne	SHORT $LL51@checkList
	mov	ebp, DWORD PTR _pOvflPage$88058[esp+36]
	mov	eax, DWORD PTR _n$88068[esp+36]
	mov	ebx, DWORD PTR _N$[esp+32]
$LN4@checkList:
; Line 28662
	sub	ebx, eax
; Line 28666
	jmp	SHORT $LN1@checkList
$LN10@checkList:
; Line 28671
	mov	eax, DWORD PTR [edi]
	cmp	BYTE PTR [eax+18], 0
	je	SHORT $LN50@checkList
	test	ebx, ebx
	jle	SHORT $LN50@checkList
; Line 28673
	mov	eax, DWORD PTR _pOvflPage$88058[esp+36]
	mov	ecx, DWORD PTR _zContext$[esp+32]
	xor	edx, edx
	mov	dh, BYTE PTR [eax+48]
	push	ecx
	movzx	ecx, BYTE PTR [eax+50]
	push	esi
	mov	bl, 4
	mov	dl, BYTE PTR [eax+49]
	movzx	eax, BYTE PTR [eax+51]
	shl	edx, 8
	or	edx, ecx
	shl	edx, 8
	or	edx, eax
	mov	esi, edx
	call	_checkPtrmap
	mov	ebx, DWORD PTR _N$[esp+40]
	add	esp, 8
$LN50@checkList:
	mov	ebp, DWORD PTR _pOvflPage$88058[esp+36]
$LN1@checkList:
; Line 28677
	movzx	edx, BYTE PTR [ebp+50]
	movzx	eax, BYTE PTR [ebp+51]
	xor	ecx, ecx
	mov	ch, BYTE PTR [ebp+48]
	mov	cl, BYTE PTR [ebp+49]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
; Line 28678
	mov	eax, ebp
	mov	esi, ecx
	call	_sqlite3PagerUnref
	test	ebx, ebx
	jg	$LL15@checkList
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 28680
	add	esp, 20					; 00000014H
	ret	0
$LN47@checkList:
; Line 28635
	push	esi
	push	OFFSET ??_C@_0BJ@HHKCLCDH@2nd?5reference?5to?5page?5?$CFd?$AA@
	jmp	SHORT $LN53@checkList
$LN19@checkList:
	push	esi
	push	OFFSET ??_C@_0BH@LLKFEBHC@invalid?5page?5number?5?$CFd?$AA@
	jmp	SHORT $LN53@checkList
$LN38@checkList:
; Line 28632
	mov	ecx, DWORD PTR _iFirst$[esp+36]
	mov	edx, DWORD PTR _expected$[esp+36]
	mov	eax, DWORD PTR _zContext$[esp+32]
	push	ecx
	push	edx
	add	ebx, 1
	push	ebx
	push	OFFSET ??_C@_0DJ@PBFEOOMP@?$CFd?5of?5?$CFd?5pages?5missing?5from?5over@
	mov	ecx, edi
	call	_checkAppendMsg
	add	esp, 16					; 00000010H
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 28680
	add	esp, 20					; 00000014H
	ret	0
$LN40@checkList:
; Line 28637
	push	esi
	push	OFFSET ??_C@_0BG@GMIBDIEE@failed?5to?5get?5page?5?$CFd?$AA@
$LN53@checkList:
	mov	eax, DWORD PTR _zContext$[esp+40]
	mov	ecx, edi
	call	_checkAppendMsg
	add	esp, 8
$LN52@checkList:
	pop	ebp
$LN42@checkList:
	pop	edi
	pop	esi
	pop	ebx
; Line 28680
	add	esp, 20					; 00000014H
	ret	0
_checkList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@NMEFLGAF@Fragmented?5space?5is?5?$CFd?5byte?5repo@ ; `string'
PUBLIC	??_C@_0CF@DKGAOHID@Multiple?5uses?5for?5byte?5?$CFd?5of?5pag@ ; `string'
PUBLIC	??_C@_0CK@JLHLDHFB@Corruption?5detected?5in?5cell?5?$CFd?5o@ ; `string'
PUBLIC	??_C@_0BM@FMPLCKPB@On?5page?5?$CFd?5at?5right?5child?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FLOCKNJL@Child?5page?5depth?5differs?$AA@ ; `string'
PUBLIC	??_C@_0BK@DEBKKJM@On?5tree?5page?5?$CFd?5cell?5?$CFd?3?5?$AA@ ; `string'
PUBLIC	??_C@_0CN@PPGDAMCK@sqlite3BtreeInitPage?$CI?$CJ?5returns?5e@ ; `string'
PUBLIC	??_C@_0CG@ILLDAEJM@unable?5to?5get?5the?5page?4?5error?5co@ ; `string'
PUBLIC	_pParent$GSCopy$
PUBLIC	_pCheck$GSCopy$
PUBLIC	??_C@_09OLGIMPDE@Page?5?$CFd?3?5?$AA@		; `string'
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0DG@NMEFLGAF@Fragmented?5space?5is?5?$CFd?5byte?5repo@
CONST	SEGMENT
??_C@_0DG@NMEFLGAF@Fragmented?5space?5is?5?$CFd?5byte?5repo@ DB 'Fragment'
	DB	'ed space is %d byte reported as %d on page %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DKGAOHID@Multiple?5uses?5for?5byte?5?$CFd?5of?5pag@
CONST	SEGMENT
??_C@_0CF@DKGAOHID@Multiple?5uses?5for?5byte?5?$CFd?5of?5pag@ DB 'Multipl'
	DB	'e uses for byte %d of page %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JLHLDHFB@Corruption?5detected?5in?5cell?5?$CFd?5o@
CONST	SEGMENT
??_C@_0CK@JLHLDHFB@Corruption?5detected?5in?5cell?5?$CFd?5o@ DB 'Corrupti'
	DB	'on detected in cell %d on page %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FMPLCKPB@On?5page?5?$CFd?5at?5right?5child?3?5?$AA@
CONST	SEGMENT
??_C@_0BM@FMPLCKPB@On?5page?5?$CFd?5at?5right?5child?3?5?$AA@ DB 'On page'
	DB	' %d at right child: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FLOCKNJL@Child?5page?5depth?5differs?$AA@
CONST	SEGMENT
??_C@_0BJ@FLOCKNJL@Child?5page?5depth?5differs?$AA@ DB 'Child page depth '
	DB	'differs', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DEBKKJM@On?5tree?5page?5?$CFd?5cell?5?$CFd?3?5?$AA@
CONST	SEGMENT
??_C@_0BK@DEBKKJM@On?5tree?5page?5?$CFd?5cell?5?$CFd?3?5?$AA@ DB 'On tree'
	DB	' page %d cell %d: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PPGDAMCK@sqlite3BtreeInitPage?$CI?$CJ?5returns?5e@
CONST	SEGMENT
??_C@_0CN@PPGDAMCK@sqlite3BtreeInitPage?$CI?$CJ?5returns?5e@ DB 'sqlite3B'
	DB	'treeInitPage() returns error code %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@ILLDAEJM@unable?5to?5get?5the?5page?4?5error?5co@
CONST	SEGMENT
??_C@_0CG@ILLDAEJM@unable?5to?5get?5the?5page?4?5error?5co@ DB 'unable to'
	DB	' get the page. error code=%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OLGIMPDE@Page?5?$CFd?3?5?$AA@
CONST	SEGMENT
??_C@_09OLGIMPDE@Page?5?$CFd?3?5?$AA@ DB 'Page %d: ', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _checkTreePage
_TEXT	SEGMENT
_pCheck$GSCopy$ = -168					; size = 4
tv1019 = -164						; size = 4
_cnt$ = -164						; size = 4
_pBt$ = -164						; size = 4
_hit$ = -160						; size = 4
_pPage$ = -160						; size = 4
_i$ = -156						; size = 4
_usableSize$ = -152					; size = 4
_pParent$GSCopy$ = -148					; size = 4
_hdr$ = -148						; size = 4
_nPage$88123 = -148					; size = 4
_depth$ = -144						; size = 4
_nCell$ = -140						; size = 4
_info$129791 = -136					; size = 32
_info$88118 = -136					; size = 32
_zContext$ = -104					; size = 100
__$ArrayPad$ = -4					; size = 4
_pCheck$ = 8						; size = 4
_iPage$ = 12						; size = 4
_pParent$ = 16						; size = 4
_zParentContext$ = 20					; size = 4
_checkTreePage PROC					; COMDAT
; Line 28707
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+168], eax
	mov	eax, DWORD PTR _pParent$[esp+164]
	push	ebx
	mov	ebx, DWORD PTR _pCheck$[esp+168]
	push	ebp
	mov	ebp, DWORD PTR _zParentContext$[esp+172]
	push	esi
; Line 28718
	mov	esi, DWORD PTR _iPage$[esp+176]
	push	edi
	push	esi
	push	OFFSET ??_C@_09OLGIMPDE@Page?5?$CFd?3?5?$AA@
	lea	ecx, DWORD PTR _zContext$[esp+192]
	push	ecx
	push	100					; 00000064H
; Line 28722
	mov	DWORD PTR _pCheck$GSCopy$[esp+200], ebx
; Line 28725
	mov	DWORD PTR _pParent$GSCopy$[esp+200], eax
	call	_sqlite3_snprintf
	mov	edi, DWORD PTR [ebx]
	movzx	edx, WORD PTR [edi+26]
	add	esp, 16					; 00000010H
	test	esi, esi
	mov	DWORD PTR _pBt$[esp+184], edi
	mov	DWORD PTR _usableSize$[esp+184], edx
	je	SHORT $LN84@checkTreeP
	mov	eax, ebp
	mov	edx, esi
	mov	ecx, ebx
	call	_checkRef
	test	eax, eax
	jne	SHORT $LN84@checkTreeP
; Line 28726
	lea	eax, DWORD PTR _pPage$[esp+184]
	push	eax
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
	test	eax, eax
	je	SHORT $LN39@checkTreeP
; Line 28728
	push	eax
	push	OFFSET ??_C@_0CG@ILLDAEJM@unable?5to?5get?5the?5page?4?5error?5co@
	lea	eax, DWORD PTR _zContext$[esp+192]
	mov	ecx, ebx
	call	_checkAppendMsg
	add	esp, 8
$LN84@checkTreeP:
; Line 28729
	xor	eax, eax
	jmp	$LN42@checkTreeP
$LN39@checkTreeP:
; Line 28731
	mov	ecx, DWORD PTR _pParent$GSCopy$[esp+184]
	mov	ebp, DWORD PTR _pPage$[esp+184]
	push	ecx
	mov	ebx, ebp
	call	_sqlite3BtreeInitPage
	xor	edi, edi
	add	esp, 4
	cmp	eax, edi
	je	SHORT $LN38@checkTreeP
; Line 28733
	mov	ecx, DWORD PTR _pCheck$GSCopy$[esp+184]
	push	eax
	push	OFFSET ??_C@_0CN@PPGDAMCK@sqlite3BtreeInitPage?$CI?$CJ?5returns?5e@
	lea	eax, DWORD PTR _zContext$[esp+192]
	call	_checkAppendMsg
	add	esp, 8
; Line 28734
	cmp	ebp, edi
	je	SHORT $LN44@checkTreeP
	mov	eax, DWORD PTR [ebp+72]
	call	_sqlite3PagerUnref
$LN44@checkTreeP:
; Line 28735
	xor	eax, eax
	jmp	$LN42@checkTreeP
$LN38@checkTreeP:
; Line 28741
	cmp	WORD PTR [ebp+20], di
	mov	DWORD PTR _depth$[esp+184], edi
	mov	DWORD PTR _i$[esp+184], edi
	jbe	$LN78@checkTreeP
	npad	12
$LL37@checkTreeP:
	mov	edx, DWORD PTR _pCheck$GSCopy$[esp+184]
	cmp	DWORD PTR [edx+16], 0
	je	$LN78@checkTreeP
; Line 28749
	mov	eax, DWORD PTR _iPage$[esp+180]
	push	edi
	push	eax
	push	OFFSET ??_C@_0BK@DEBKKJM@On?5tree?5page?5?$CFd?5cell?5?$CFd?3?5?$AA@
	lea	ecx, DWORD PTR _zContext$[esp+196]
	push	ecx
	push	100					; 00000064H
	call	_sqlite3_snprintf
	movzx	edx, WORD PTR [ebp+14]
; Line 28750
	mov	eax, DWORD PTR [ebp+68]
; Line 28751
	mov	ebx, DWORD PTR _pPage$[esp+204]
	add	edx, eax
	lea	ecx, DWORD PTR [edx+edi*2]
	xor	edx, edx
	mov	dh, BYTE PTR [ecx]
	lea	esi, DWORD PTR _info$88118[esp+204]
	mov	dl, BYTE PTR [ecx+1]
	add	edx, eax
	mov	ebp, edx
	push	ebp
	push	ebx
	call	_sqlite3BtreeParseCellPtr
; Line 28752
	mov	eax, DWORD PTR _info$88118[esp+228]
	add	esp, 28					; 0000001cH
; Line 28753
	cmp	BYTE PTR [ebx+3], 0
	jne	SHORT $LN34@checkTreeP
	mov	ecx, DWORD PTR _info$88118[esp+192]
	add	eax, ecx
$LN34@checkTreeP:
; Line 28755
	movzx	ecx, WORD PTR _info$88118[esp+210]
	cmp	eax, ecx
	jle	$LN77@checkTreeP
; Line 28756
	sub	eax, ecx
	mov	ecx, DWORD PTR _usableSize$[esp+184]
	lea	eax, DWORD PTR [eax+ecx-5]
	cdq
	add	ecx, -4					; fffffffcH
	idiv	ecx
	mov	DWORD PTR _nPage$88123[esp+184], eax
; Line 28757
	movzx	eax, WORD PTR _info$88118[esp+212]
	movzx	edx, BYTE PTR [eax+ebp+1]
	mov	dh, BYTE PTR [eax+ebp]
	movzx	ecx, BYTE PTR [eax+ebp+2]
	add	eax, ebp
	movzx	eax, BYTE PTR [eax+3]
	shl	edx, 8
	or	edx, ecx
; Line 28759
	mov	ecx, DWORD PTR _pBt$[esp+184]
	shl	edx, 8
	or	edx, eax
	cmp	BYTE PTR [ecx+18], 0
	mov	esi, edx
	je	SHORT $LN32@checkTreeP
; Line 28760
	mov	eax, DWORD PTR _iPage$[esp+180]
	mov	edi, DWORD PTR _pCheck$GSCopy$[esp+184]
	lea	edx, DWORD PTR _zContext$[esp+184]
	push	edx
	push	eax
	mov	bl, 3
	call	_checkPtrmap
	mov	ebx, DWORD PTR _pPage$[esp+192]
	mov	edi, DWORD PTR _i$[esp+192]
	add	esp, 8
$LN32@checkTreeP:
; Line 28763
	mov	edx, DWORD PTR _nPage$88123[esp+184]
	lea	ecx, DWORD PTR _zContext$[esp+184]
	push	ecx
	mov	ecx, DWORD PTR _pCheck$GSCopy$[esp+188]
	push	edx
	push	0
	mov	eax, esi
	call	_checkList
	add	esp, 12					; 0000000cH
$LN77@checkTreeP:
; Line 28768
	cmp	BYTE PTR [ebx+4], 0
	jne	$LN36@checkTreeP
; Line 28769
	movzx	ecx, BYTE PTR [ebp+2]
	movzx	edx, BYTE PTR [ebp+3]
	xor	eax, eax
	mov	ah, BYTE PTR [ebp]
	mov	al, BYTE PTR [ebp+1]
	shl	eax, 8
	or	eax, ecx
	shl	eax, 8
	or	eax, edx
	mov	esi, eax
; Line 28771
	mov	eax, DWORD PTR _pBt$[esp+184]
	cmp	BYTE PTR [eax+18], 0
	je	SHORT $LN30@checkTreeP
; Line 28772
	mov	edx, DWORD PTR _iPage$[esp+180]
	mov	edi, DWORD PTR _pCheck$GSCopy$[esp+184]
	lea	ecx, DWORD PTR _zContext$[esp+184]
	push	ecx
	push	edx
	mov	bl, 5
	call	_checkPtrmap
	mov	ebx, DWORD PTR _pPage$[esp+192]
	mov	edi, DWORD PTR _i$[esp+192]
	add	esp, 8
$LN30@checkTreeP:
; Line 28775
	mov	ebp, DWORD PTR _pCheck$GSCopy$[esp+184]
	lea	eax, DWORD PTR _zContext$[esp+184]
	push	eax
	push	ebx
	push	esi
	push	ebp
	call	_checkTreePage
	add	esp, 16					; 00000010H
; Line 28776
	test	edi, edi
	mov	esi, eax
	jle	SHORT $LN29@checkTreeP
	cmp	esi, DWORD PTR _depth$[esp+184]
	je	SHORT $LN29@checkTreeP
; Line 28777
	push	OFFSET ??_C@_0BJ@FLOCKNJL@Child?5page?5depth?5differs?$AA@
	lea	eax, DWORD PTR _zContext$[esp+188]
	mov	ecx, ebp
	call	_checkAppendMsg
	add	esp, 4
$LN29@checkTreeP:
; Line 28779
	mov	DWORD PTR _depth$[esp+184], esi
$LN36@checkTreeP:
; Line 28741
	movzx	ecx, WORD PTR [ebx+20]
	mov	ebp, DWORD PTR _pPage$[esp+184]
	add	edi, 1
	cmp	edi, ecx
	mov	DWORD PTR _i$[esp+184], edi
	jl	$LL37@checkTreeP
$LN78@checkTreeP:
; Line 28782
	cmp	BYTE PTR [ebp+4], 0
	jne	SHORT $LN28@checkTreeP
; Line 28783
	movzx	edx, BYTE PTR [ebp+8]
	mov	eax, DWORD PTR [ebp+68]
	movzx	ecx, BYTE PTR [edx+eax+9]
	mov	ch, BYTE PTR [edx+eax+8]
; Line 28785
	mov	edi, DWORD PTR _iPage$[esp+180]
	lea	eax, DWORD PTR [edx+eax+8]
	movzx	edx, BYTE PTR [eax+2]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	push	edi
	mov	esi, ecx
	push	OFFSET ??_C@_0BM@FMPLCKPB@On?5page?5?$CFd?5at?5right?5child?3?5?$AA@
	lea	ecx, DWORD PTR _zContext$[esp+192]
	push	ecx
	push	100					; 00000064H
	call	_sqlite3_snprintf
; Line 28787
	mov	edx, DWORD PTR _pBt$[esp+200]
	add	esp, 16					; 00000010H
	cmp	BYTE PTR [edx+18], 0
	je	SHORT $LN27@checkTreeP
; Line 28788
	push	0
	push	edi
	mov	edi, DWORD PTR _pCheck$GSCopy$[esp+192]
	mov	bl, 5
	call	_checkPtrmap
	add	esp, 8
$LN27@checkTreeP:
; Line 28791
	mov	ecx, DWORD PTR _pCheck$GSCopy$[esp+184]
	lea	eax, DWORD PTR _zContext$[esp+184]
	push	eax
	push	ebp
	push	esi
	push	ecx
	call	_checkTreePage
	add	esp, 16					; 00000010H
$LN28@checkTreeP:
; Line 28797
	movzx	esi, BYTE PTR [ebp+8]
; Line 28798
	mov	edi, DWORD PTR _usableSize$[esp+184]
	mov	ebx, DWORD PTR [ebp+68]
	mov	DWORD PTR _hdr$[esp+184], esi
	call	_sqlite3Malloc
	mov	edi, eax
; Line 28799
	test	edi, edi
	mov	DWORD PTR _hit$[esp+184], edi
	je	$LN58@checkTreeP
; Line 28800
	xor	edx, edx
	mov	dh, BYTE PTR [esi+ebx+5]
	mov	dl, BYTE PTR [esi+ebx+6]
	push	edx
	push	1
	push	edi
	call	_memset
; Line 28802
	movzx	ecx, BYTE PTR [ebp+4]
	xor	eax, eax
	mov	ah, BYTE PTR [esi+ebx+3]
	mov	edx, 3
	sub	edx, ecx
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+edx*4]
; Line 28803
	mov	DWORD PTR _i$[esp+184], 0
	mov	al, BYTE PTR [esi+ebx+4]
	test	eax, eax
	mov	DWORD PTR _nCell$[esp+184], eax
	jle	$LN23@checkTreeP
	lea	eax, DWORD PTR [ecx+ebx]
	mov	DWORD PTR tv1019[esp+184], eax
	jmp	SHORT $LN25@checkTreeP
$LL79@checkTreeP:
; Line 28800
	mov	eax, DWORD PTR tv1019[esp+184]
$LN25@checkTreeP:
; Line 28804
	movzx	ecx, BYTE PTR [eax+1]
	mov	ch, BYTE PTR [eax]
; Line 28805
	lea	esi, DWORD PTR _info$129791[esp+184]
	mov	edi, ecx
	lea	edx, DWORD PTR [edi+ebx]
	push	edx
	push	ebp
	call	_sqlite3BtreeParseCellPtr
	movzx	eax, WORD PTR _info$129791[esp+222]
; Line 28807
	lea	eax, DWORD PTR [eax+edi-1]
	add	esp, 8
	cmp	eax, DWORD PTR _usableSize$[esp+184]
	jge	SHORT $LN80@checkTreeP
	test	edi, edi
	jl	SHORT $LN80@checkTreeP
; Line 28811
	cmp	eax, edi
	jl	SHORT $LN24@checkTreeP
	npad	8
$LL19@checkTreeP:
	mov	ecx, DWORD PTR _hit$[esp+184]
	add	BYTE PTR [eax+ecx], 1
	sub	eax, 1
	cmp	eax, edi
	jge	SHORT $LL19@checkTreeP
; Line 28829
	jmp	SHORT $LN24@checkTreeP
$LN80@checkTreeP:
; Line 28809
	mov	eax, DWORD PTR _iPage$[esp+180]
	mov	ecx, DWORD PTR _i$[esp+184]
	push	0
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _pCheck$GSCopy$[esp+196]
	push	OFFSET ??_C@_0CK@JLHLDHFB@Corruption?5detected?5in?5cell?5?$CFd?5o@
	xor	eax, eax
	call	_checkAppendMsg
	add	esp, 16					; 00000010H
$LN24@checkTreeP:
	mov	eax, DWORD PTR _i$[esp+184]
	add	DWORD PTR tv1019[esp+184], 2
	add	eax, 1
	cmp	eax, DWORD PTR _nCell$[esp+184]
	mov	DWORD PTR _i$[esp+184], eax
	jl	$LL79@checkTreeP
	mov	esi, DWORD PTR _hdr$[esp+184]
	mov	edi, DWORD PTR _hit$[esp+184]
$LN23@checkTreeP:
; Line 28815
	xor	edx, edx
	mov	dh, BYTE PTR [esi+ebx+1]
	mov	DWORD PTR _cnt$[esp+184], 0
	mov	dl, BYTE PTR [esi+ebx+2]
	mov	esi, edx
	test	esi, esi
	jle	SHORT $LN82@checkTreeP
	npad	3
$LL16@checkTreeP:
	mov	edx, DWORD PTR _usableSize$[esp+184]
	cmp	esi, edx
	jge	SHORT $LN14@checkTreeP
	cmp	DWORD PTR _cnt$[esp+184], 10000		; 00002710H
	jge	SHORT $LN14@checkTreeP
; Line 28816
	xor	eax, eax
	mov	ah, BYTE PTR [ebx+esi+2]
	mov	al, BYTE PTR [ebx+esi+3]
; Line 28818
	lea	eax, DWORD PTR [eax+esi-1]
	cmp	eax, edx
	jge	SHORT $LN12@checkTreeP
	test	esi, esi
	jl	SHORT $LN12@checkTreeP
; Line 28822
	cmp	eax, esi
	jl	SHORT $LN8@checkTreeP
	npad	4
$LL10@checkTreeP:
	add	BYTE PTR [eax+edi], 1
	sub	eax, 1
	cmp	eax, esi
	jge	SHORT $LL10@checkTreeP
; Line 28829
	jmp	SHORT $LN8@checkTreeP
$LN12@checkTreeP:
; Line 28820
	mov	eax, DWORD PTR _iPage$[esp+180]
	mov	ecx, DWORD PTR _pCheck$GSCopy$[esp+184]
	push	0
	push	eax
	push	esi
	push	OFFSET ??_C@_0CK@JLHLDHFB@Corruption?5detected?5in?5cell?5?$CFd?5o@
	xor	eax, eax
	call	_checkAppendMsg
	mov	edx, DWORD PTR _usableSize$[esp+200]
	add	esp, 16					; 00000010H
$LN8@checkTreeP:
	add	DWORD PTR _cnt$[esp+184], 1
; Line 28824
	xor	ecx, ecx
	mov	ch, BYTE PTR [ebx+esi]
	mov	cl, BYTE PTR [ebx+esi+1]
	mov	esi, ecx
	test	esi, esi
	jg	SHORT $LL16@checkTreeP
; Line 28815
	jmp	SHORT $LN14@checkTreeP
$LN82@checkTreeP:
	mov	edx, DWORD PTR _usableSize$[esp+184]
$LN14@checkTreeP:
; Line 28826
	xor	esi, esi
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN83@checkTreeP
$LL7@checkTreeP:
; Line 28827
	mov	cl, BYTE PTR [edi+eax]
	test	cl, cl
	jne	SHORT $LN4@checkTreeP
; Line 28828
	add	esi, 1
	jmp	SHORT $LN6@checkTreeP
$LN4@checkTreeP:
; Line 28829
	cmp	cl, 1
	jg	SHORT $LN69@checkTreeP
$LN6@checkTreeP:
; Line 28826
	add	eax, 1
	cmp	eax, edx
	jl	SHORT $LL7@checkTreeP
; Line 28829
	jmp	SHORT $LN83@checkTreeP
$LN69@checkTreeP:
; Line 28831
	mov	edx, DWORD PTR _iPage$[esp+180]
	mov	ecx, DWORD PTR _pCheck$GSCopy$[esp+184]
	push	edx
	push	eax
	push	OFFSET ??_C@_0CF@DKGAOHID@Multiple?5uses?5for?5byte?5?$CFd?5of?5pag@
	xor	eax, eax
	call	_checkAppendMsg
	add	esp, 12					; 0000000cH
$LN83@checkTreeP:
; Line 28835
	mov	eax, DWORD PTR _hdr$[esp+184]
	movzx	eax, BYTE PTR [eax+ebx+7]
	cmp	esi, eax
	je	SHORT $LN1@checkTreeP
; Line 28838
	mov	ecx, DWORD PTR _iPage$[esp+180]
	push	ecx
	mov	ecx, DWORD PTR _pCheck$GSCopy$[esp+188]
	push	eax
	push	esi
	push	OFFSET ??_C@_0DG@NMEFLGAF@Fragmented?5space?5is?5?$CFd?5byte?5repo@
	xor	eax, eax
	call	_checkAppendMsg
	add	esp, 16					; 00000010H
$LN1@checkTreeP:
; Line 28841
	push	edi
	call	_free
	add	esp, 4
$LN58@checkTreeP:
; Line 28843
	mov	eax, DWORD PTR [ebp+72]
	call	_sqlite3PagerUnref
; Line 28844
	mov	eax, DWORD PTR _depth$[esp+184]
	add	eax, 1
$LN42@checkTreeP:
; Line 28845
	mov	ecx, DWORD PTR __$ArrayPad$[esp+184]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 168				; 000000a8H
	ret	0
_checkTreePage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreePutData
_TEXT	SEGMENT
_pCsr$ = 8						; size = 4
_offset$ = 12						; size = 4
_amt$ = 16						; size = 4
_z$ = 20						; size = 4
_sqlite3BtreePutData PROC				; COMDAT
; Line 29129
	push	ebx
; Line 29132
	mov	ebx, DWORD PTR _pCsr$[esp]
	cmp	BYTE PTR [ebx+65], 2
	jne	SHORT $LN5@sqlite3Btr@37
; Line 29133
	mov	eax, 4
	pop	ebx
; Line 29154
	ret	0
$LN5@sqlite3Btr@37:
; Line 29141
	cmp	BYTE PTR [ebx+64], 0
	jne	SHORT $LN4@sqlite3Btr@37
; Line 29142
	mov	eax, 8
	pop	ebx
; Line 29154
	ret	0
$LN4@sqlite3Btr@37:
; Line 29146
	mov	eax, DWORD PTR [ebx+20]
	push	eax
	mov	eax, DWORD PTR [ebx]
	call	_checkReadLocks
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@sqlite3Btr@37
; Line 29147
	mov	eax, 6
	pop	ebx
; Line 29154
	ret	0
$LN3@sqlite3Btr@37:
; Line 29149
	cmp	BYTE PTR [ebx+65], 0
	je	SHORT $LN1@sqlite3Btr@37
	mov	ecx, DWORD PTR [ebx+24]
	cmp	BYTE PTR [ecx+3], 0
	je	SHORT $LN1@sqlite3Btr@37
; Line 29153
	mov	edx, DWORD PTR _z$[esp]
	mov	eax, DWORD PTR _amt$[esp]
	push	1
	push	0
	push	edx
	push	eax
	mov	eax, DWORD PTR _offset$[esp+16]
	push	ebx
	call	_accessPayload
	add	esp, 20					; 00000014H
	pop	ebx
; Line 29154
	ret	0
$LN1@sqlite3Btr@37:
; Line 29150
	mov	eax, 1
	pop	ebx
; Line 29154
	ret	0
_sqlite3BtreePutData ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeFreeCursor
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sqlite3VdbeFreeCursor PROC				; COMDAT
; _pCx$ = esi
; Line 31191
	test	esi, esi
	push	ebp
	mov	ebp, DWORD PTR _p$[esp]
	je	$LN29@sqlite3Vdb@48
	push	edi
; Line 31194
	mov	edi, DWORD PTR [esi]
	test	edi, edi
	je	SHORT $LN3@sqlite3Vdb@48
; Line 31195
	call	_sqlite3BtreeCloseCursor
$LN3@sqlite3Vdb@48:
; Line 31197
	mov	eax, DWORD PTR [esi+48]
	test	eax, eax
	je	SHORT $LN2@sqlite3Vdb@48
; Line 31198
	push	eax
	call	_sqlite3BtreeClose
	add	esp, 4
$LN2@sqlite3Vdb@48:
; Line 31201
	mov	edx, DWORD PTR [esi+96]
	test	edx, edx
	je	SHORT $LN1@sqlite3Vdb@48
; Line 31203
	mov	ecx, DWORD PTR [esi+100]
; Line 31205
	mov	eax, DWORD PTR [ebp]
	mov	edi, -264537850				; f03b7906H
	mov	BYTE PTR [ebp+566], 1
	cmp	DWORD PTR [eax+48], edi
	jne	SHORT $LN8@sqlite3Vdb@48
	mov	DWORD PTR [eax+48], -1607883113		; a029a697H
	jmp	SHORT $LN7@sqlite3Vdb@48
$LN8@sqlite3Vdb@48:
	mov	DWORD PTR [eax+48], -1254786768		; b5357930H
	mov	DWORD PTR [eax+152], 1
$LN7@sqlite3Vdb@48:
; Line 31206
	mov	eax, DWORD PTR [ecx+28]
	push	edx
	call	eax
; Line 31207
	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	esp, 4
	cmp	ecx, -1607883113			; a029a697H
	jne	SHORT $LN13@sqlite3Vdb@48
	mov	DWORD PTR [eax+48], edi
	jmp	SHORT $LN11@sqlite3Vdb@48
$LN13@sqlite3Vdb@48:
	cmp	ecx, edi
	jne	SHORT $LN11@sqlite3Vdb@48
	mov	DWORD PTR [eax+48], -1254786768		; b5357930H
	mov	DWORD PTR [eax+152], 1
$LN11@sqlite3Vdb@48:
; Line 31208
	mov	BYTE PTR [ebp+566], 0
$LN1@sqlite3Vdb@48:
; Line 31211
	mov	eax, DWORD PTR [esi+56]
	test	eax, eax
	pop	edi
	je	SHORT $LN19@sqlite3Vdb@48
	push	eax
	call	_free
	add	esp, 4
$LN19@sqlite3Vdb@48:
; Line 31212
	mov	eax, DWORD PTR [esi+112]
	test	eax, eax
	je	SHORT $LN24@sqlite3Vdb@48
	push	eax
	call	_free
	add	esp, 4
$LN24@sqlite3Vdb@48:
	pop	ebp
; Line 31213
	mov	DWORD PTR _p$[esp-4], esi
	jmp	_free
$LN29@sqlite3Vdb@48:
	pop	ebp
; Line 31214
	ret	0
_sqlite3VdbeFreeCursor ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _closeAllCursors
_TEXT	SEGMENT
_closeAllCursors PROC					; COMDAT
; _p$ = edi
; Line 31221
	cmp	DWORD PTR [edi+56], 0
	je	SHORT $LN3@closeAllCu
	push	ebx
; Line 31222
	xor	ebx, ebx
	cmp	DWORD PTR [edi+52], ebx
	jle	SHORT $LN11@closeAllCu
	push	esi
	npad	1
$LL5@closeAllCu:
; Line 31223
	cmp	BYTE PTR [edi+566], 0
	je	SHORT $LN1@closeAllCu
	mov	eax, DWORD PTR [edi+56]
	cmp	DWORD PTR [eax+ebx*4], 0
	lea	eax, DWORD PTR [eax+ebx*4]
	je	SHORT $LN4@closeAllCu
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+96], 0
	jne	SHORT $LN4@closeAllCu
$LN1@closeAllCu:
; Line 31224
	mov	edx, DWORD PTR [edi+56]
	mov	esi, DWORD PTR [edx+ebx*4]
	push	edi
	call	_sqlite3VdbeFreeCursor
; Line 31225
	mov	eax, DWORD PTR [edi+56]
	add	esp, 4
	mov	DWORD PTR [eax+ebx*4], 0
$LN4@closeAllCu:
	add	ebx, 1
	cmp	ebx, DWORD PTR [edi+52]
	jl	SHORT $LL5@closeAllCu
	pop	esi
$LN11@closeAllCu:
	pop	ebx
$LN3@closeAllCu:
; Line 31228
	ret	0
_closeAllCursors ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _Cleanup
_TEXT	SEGMENT
tv353 = -4						; size = 4
_Cleanup PROC						; COMDAT
; _p$ = eax
; Line 31237
	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, eax
; Line 31239
	mov	ebx, DWORD PTR [edi+36]
	xor	ebp, ebp
	cmp	ebx, ebp
	je	SHORT $LN65@Cleanup
; Line 31240
	mov	esi, DWORD PTR [edi+40]
	sub	esi, ebx
	sar	esi, 6
	add	esi, 1
	cmp	esi, ebp
	jle	SHORT $LN57@Cleanup
	npad	1
$LL9@Cleanup:
	push	ebx
	sub	esi, 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	add	ebx, 64					; 00000040H
	cmp	esi, ebp
	jg	SHORT $LL9@Cleanup
$LN57@Cleanup:
; Line 31241
	mov	eax, DWORD PTR [edi+36]
	sub	eax, 64					; 00000040H
	mov	DWORD PTR [edi+40], eax
$LN65@Cleanup:
; Line 31243
	call	_closeAllCursors
; Line 31244
	mov	esi, DWORD PTR [edi+84]
	cmp	esi, ebp
	mov	ebx, DWORD PTR [edi+80]
	je	SHORT $LN59@Cleanup
	cmp	ebx, ebp
	jle	SHORT $LN59@Cleanup
	npad	1
$LL14@Cleanup:
	push	esi
	sub	ebx, 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	add	esi, 64					; 00000040H
	cmp	ebx, ebp
	jg	SHORT $LL14@Cleanup
$LN59@Cleanup:
; Line 31245
	mov	eax, DWORD PTR [edi+100]
	cmp	eax, ebp
	je	SHORT $LN18@Cleanup
	npad	6
$LL20@Cleanup:
	mov	esi, DWORD PTR [eax+12]
	push	eax
	call	_free
	add	esp, 4
	cmp	esi, ebp
	mov	eax, esi
	jne	SHORT $LL20@Cleanup
$LN18@Cleanup:
	xor	eax, eax
	mov	DWORD PTR [edi+96], eax
	mov	DWORD PTR [edi+100], eax
	mov	DWORD PTR [edi+104], eax
; Line 31246
	cmp	DWORD PTR [edi+116], ebp
	je	SHORT $LN45@Cleanup
; Line 31247
	cmp	DWORD PTR [edi+108], ebp
	jle	SHORT $LN1@Cleanup
	xor	esi, esi
	mov	DWORD PTR tv353[esp+20], esi
	npad	3
$LL3@Cleanup:
; Line 31248
	mov	ecx, DWORD PTR [edi+116]
	mov	eax, DWORD PTR [esi+ecx+16]
	test	eax, eax
	lea	esi, DWORD PTR [esi+ecx+12]
	je	SHORT $LN30@Cleanup
	npad	1
$LL32@Cleanup:
	mov	ebx, DWORD PTR [eax+12]
	push	eax
	call	_free
	add	esp, 4
	test	ebx, ebx
	mov	eax, ebx
	jne	SHORT $LL32@Cleanup
$LN30@Cleanup:
	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	esi, DWORD PTR tv353[esp+20]
	add	ebp, 1
	add	esi, 24					; 00000018H
	cmp	ebp, DWORD PTR [edi+108]
	mov	DWORD PTR tv353[esp+20], esi
	jl	SHORT $LL3@Cleanup
$LN1@Cleanup:
; Line 31250
	mov	eax, DWORD PTR [edi+116]
	test	eax, eax
	je	SHORT $LN66@Cleanup
	push	eax
	call	_free
	add	esp, 4
$LN66@Cleanup:
	xor	ebp, ebp
$LN45@Cleanup:
; Line 31255
	mov	eax, DWORD PTR [edi+556]
	cmp	eax, ebp
	mov	DWORD PTR [edi+116], ebp
	mov	DWORD PTR [edi+112], ebp
	mov	DWORD PTR [edi+108], ebp
	je	SHORT $LN64@Cleanup
	push	eax
	call	_free
	add	esp, 4
$LN64@Cleanup:
; Line 31256
	mov	DWORD PTR [edi+556], ebp
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 31257
	pop	ecx
	ret	0
_Cleanup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AbortOtherActiveVdbes
_TEXT	SEGMENT
_sqlite3AbortOtherActiveVdbes PROC			; COMDAT
; _db$ = eax
; _pExcept$ = esi
; Line 31558
	push	edi
; Line 31560
	mov	edi, DWORD PTR [eax+80]
	test	edi, edi
	je	SHORT $LN4@sqlite3Abo
$LL6@sqlite3Abo:
; Line 31561
	cmp	edi, esi
	je	SHORT $LN5@sqlite3Abo
; Line 31562
	cmp	DWORD PTR [edi+76], -1108210269		; bdf20da3H
	jne	SHORT $LN5@sqlite3Abo
	cmp	DWORD PTR [edi+120], 0
	jl	SHORT $LN5@sqlite3Abo
; Line 31564
	call	_closeAllCursors
; Line 31566
	mov	BYTE PTR [edi+563], 1
$LN5@sqlite3Abo:
	mov	edi, DWORD PTR [edi+8]
	test	edi, edi
	jne	SHORT $LL6@sqlite3Abo
$LN4@sqlite3Abo:
	pop	edi
; Line 31568
	ret	0
_sqlite3AbortOtherActiveVdbes ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeDelete
_TEXT	SEGMENT
_sqlite3VdbeDelete PROC					; COMDAT
; _p$ = esi
; Line 31914
	test	esi, esi
	je	$LN49@sqlite3Vdb@49
; Line 31915
	mov	eax, esi
	call	_Cleanup
; Line 31916
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN7@sqlite3Vdb@49
; Line 31917
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
; Line 31918
	jmp	SHORT $LN6@sqlite3Vdb@49
$LN7@sqlite3Vdb@49:
; Line 31920
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [edx+80], eax
$LN6@sqlite3Vdb@49:
; Line 31922
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN5@sqlite3Vdb@49
; Line 31923
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
$LN5@sqlite3Vdb@49:
; Line 31925
	cmp	DWORD PTR [esi+20], 0
	push	ebx
	push	edi
	je	SHORT $LN14@sqlite3Vdb@49
; Line 31926
	xor	edi, edi
	cmp	DWORD PTR [esi+12], edi
	jle	SHORT $LN1@sqlite3Vdb@49
	xor	ebx, ebx
$LL3@sqlite3Vdb@49:
; Line 31927
	mov	eax, DWORD PTR [esi+20]
; Line 31928
	mov	ecx, DWORD PTR [eax+ebx+12]
	add	eax, ebx
	mov	eax, DWORD PTR [eax+16]
	call	_freeP3
	add	edi, 1
	add	ebx, 20					; 00000014H
	cmp	edi, DWORD PTR [esi+12]
	jl	SHORT $LL3@sqlite3Vdb@49
$LN1@sqlite3Vdb@49:
; Line 31930
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN14@sqlite3Vdb@49
	push	eax
	call	_free
	add	esp, 4
$LN14@sqlite3Vdb@49:
; Line 31932
	mov	edi, DWORD PTR [esi+64]
	test	edi, edi
	mov	ebx, DWORD PTR [esi+60]
	je	SHORT $LN55@sqlite3Vdb@49
	test	ebx, ebx
	jle	SHORT $LN55@sqlite3Vdb@49
	npad	2
$LL17@sqlite3Vdb@49:
	push	edi
	sub	ebx, 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	add	edi, 64					; 00000040H
	test	ebx, ebx
	jg	SHORT $LL17@sqlite3Vdb@49
$LN55@sqlite3Vdb@49:
; Line 31933
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN24@sqlite3Vdb@49
	push	eax
	call	_free
	add	esp, 4
$LN24@sqlite3Vdb@49:
; Line 31934
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN29@sqlite3Vdb@49
	push	eax
	call	_free
	add	esp, 4
$LN29@sqlite3Vdb@49:
; Line 31935
	mov	edi, DWORD PTR [esi+48]
	test	edi, edi
	mov	eax, DWORD PTR [esi+544]
	lea	ebx, DWORD PTR [eax+eax*4]
	je	SHORT $LN57@sqlite3Vdb@49
	test	ebx, ebx
	jle	SHORT $LN57@sqlite3Vdb@49
$LL32@sqlite3Vdb@49:
	push	edi
	sub	ebx, 1
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	add	edi, 64					; 00000040H
	test	ebx, ebx
	jg	SHORT $LL32@sqlite3Vdb@49
$LN57@sqlite3Vdb@49:
; Line 31936
	mov	eax, DWORD PTR [esi+48]
	test	eax, eax
	pop	edi
	pop	ebx
	je	SHORT $LN39@sqlite3Vdb@49
	push	eax
	call	_free
	add	esp, 4
$LN39@sqlite3Vdb@49:
; Line 31937
	mov	eax, DWORD PTR [esi+588]
	test	eax, eax
	je	SHORT $LN44@sqlite3Vdb@49
	push	eax
	call	_free
	add	esp, 4
$LN44@sqlite3Vdb@49:
; Line 31939
	push	esi
	mov	DWORD PTR [esi+76], -1241070648		; b606c3c8H
	call	_free
	pop	ecx
$LN49@sqlite3Vdb@49:
; Line 31940
	ret	0
_sqlite3VdbeDelete ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _allocateCursor
_TEXT	SEGMENT
_iCur$ = 8						; size = 4
_iDb$ = 12						; size = 4
_allocateCursor PROC					; COMDAT
; _p$ = ebx
; Line 33597
	mov	eax, DWORD PTR [ebx+56]
	push	ebp
	mov	ebp, DWORD PTR _iCur$[esp]
	cmp	DWORD PTR [eax+ebp*4], 0
	lea	eax, DWORD PTR [eax+ebp*4]
	push	esi
	push	edi
	je	SHORT $LN2@allocateCu
; Line 33598
	mov	esi, DWORD PTR [eax]
	push	ebx
	call	_sqlite3VdbeFreeCursor
	add	esp, 4
$LN2@allocateCu:
; Line 33600
	mov	edi, DWORD PTR _inMutex
	xor	esi, esi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN12@allocateCu
	test	edi, edi
	jg	SHORT $LN32@allocateCu
$LN12@allocateCu:
	push	128					; 00000080H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN30@allocateCu
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN22@allocateCu
	test	edi, edi
	jg	SHORT $LN32@allocateCu
$LN22@allocateCu:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN32@allocateCu
$LN30@allocateCu:
	push	128					; 00000080H
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN32@allocateCu:
; Line 33601
	test	esi, esi
	mov	ecx, DWORD PTR [ebx+56]
	mov	DWORD PTR [ecx+ebp*4], esi
; Line 33604
	mov	eax, esi
	je	SHORT $LN1@allocateCu
	mov	edx, DWORD PTR _iDb$[esp+8]
	mov	DWORD PTR [esi+4], edx
$LN1@allocateCu:
	pop	edi
	pop	esi
	pop	ebp
; Line 33605
	ret	0
_allocateCursor ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprSetColl
_TEXT	SEGMENT
_sqlite3ExprSetColl PROC				; COMDAT
; _pParse$ = edx
; _pExpr$ = esi
; _pName$ = ecx
; Line 38939
	test	esi, esi
	jne	SHORT $LN2@sqlite3Exp@22
	xor	eax, eax
; Line 38946
	ret	0
$LN2@sqlite3Exp@22:
; Line 38940
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx]
	push	ecx
	shr	eax, 1
	push	edx
	call	_sqlite3LocateCollSeq
	add	esp, 8
; Line 38941
	test	eax, eax
	je	SHORT $LN1@sqlite3Exp@22
; Line 38943
	or	WORD PTR [esi+2], 256			; 00000100H
	mov	DWORD PTR [esi+4], eax
$LN1@sqlite3Exp@22:
; Line 38945
	mov	eax, esi
; Line 38946
	ret	0
_sqlite3ExprSetColl ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprCodeGetColumn
_TEXT	SEGMENT
_sqlite3ExprCodeGetColumn PROC				; COMDAT
; _v$ = ebx
; _pTab$ = edi
; _iColumn$ = esi
; _iTable$ = eax
; Line 40556
	test	esi, esi
	jge	SHORT $LN5@sqlite3Exp@23
; Line 40557
	test	edi, edi
	je	SHORT $LN8@sqlite3Exp@23
	cmp	BYTE PTR [edi+57], 0
	mov	ecx, 12					; 0000000cH
	jne	SHORT $LN9@sqlite3Exp@23
$LN8@sqlite3Exp@23:
	mov	ecx, 37					; 00000025H
$LN9@sqlite3Exp@23:
; Line 40558
	push	0
	push	eax
	push	ecx
; Line 40567
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40571
	ret	0
$LN5@sqlite3Exp@23:
; Line 40559
	test	edi, edi
; Line 40560
	push	esi
	push	eax
	jne	SHORT $LN3@sqlite3Exp@23
	push	3
; Line 40567
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40571
	ret	0
$LN3@sqlite3Exp@23:
; Line 40562
	mov	al, BYTE PTR [edi+57]
	neg	al
	sbb	eax, eax
	and	eax, 47					; 0000002fH
	add	eax, 3
; Line 40563
	push	eax
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40564
	mov	ecx, esi
	mov	eax, edi
	mov	edx, ebx
	call	_sqlite3ColumnDefault
; Line 40566
	mov	edx, DWORD PTR [edi+8]
	lea	ecx, DWORD PTR [esi+esi*4]
	cmp	BYTE PTR [edx+ecx*4+18], 101		; 00000065H
	jne	SHORT $LN1@sqlite3Exp@23
; Line 40567
	push	0
	push	0
	push	27					; 0000001bH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN1@sqlite3Exp@23:
; Line 40571
	ret	0
_sqlite3ExprCodeGetColumn ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@JGGJAPOJ@RAISE?$CI?$CJ?5may?5only?5be?5used?5within?5@ ; `string'
PUBLIC	??_C@_0BI@KKBMAAI@misuse?5of?5aggregate?3?5?$CFT?$AA@ ; `string'
PUBLIC	??_C@_05INALNJMO@?9?$CF?4?$CKs?$AA@		; `string'
;	COMDAT ??_C@_0DC@JGGJAPOJ@RAISE?$CI?$CJ?5may?5only?5be?5used?5within?5@
CONST	SEGMENT
??_C@_0DC@JGGJAPOJ@RAISE?$CI?$CJ?5may?5only?5be?5used?5within?5@ DB 'RAIS'
	DB	'E() may only be used within a trigger-program', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KKBMAAI@misuse?5of?5aggregate?3?5?$CFT?$AA@
CONST	SEGMENT
??_C@_0BI@KKBMAAI@misuse?5of?5aggregate?3?5?$CFT?$AA@ DB 'misuse of aggre'
	DB	'gate: %T', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05INALNJMO@?9?$CF?4?$CKs?$AA@
CONST	SEGMENT
??_C@_05INALNJMO@?9?$CF?4?$CKs?$AA@ DB '-%.*s', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3ExprCode
_TEXT	SEGMENT
_affinity$92605 = -17					; size = 1
_enc$92585 = -16					; size = 1
_pDef$92580 = -16					; size = 4
_stackChng$ = -16					; size = 4
_pColl$92586 = -12					; size = 4
_expr_end_label$92613 = -8				; size = 4
_pList$92578 = -8					; size = 4
_z$92561 = -8						; size = 4
tv1210 = -4						; size = 4
tv442 = -4						; size = 4
_ckOffset$92606 = -4					; size = 4
_constMask$92583 = -4					; size = 4
_pLeft$92556 = -4					; size = 4
_jumpInst$92614 = 8					; size = 4
_nExpr$92615 = 8					; size = 4
_pRight$92610 = 8					; size = 4
_nExpr$92579 = 8					; size = 4
_pParse$ = 8						; size = 4
_pExpr$ = 12						; size = 4
_sqlite3ExprCode PROC					; COMDAT
; Line 40583
	sub	esp, 20					; 00000014H
	push	ebp
	push	esi
; Line 40584
	mov	esi, DWORD PTR _pParse$[esp+24]
	mov	ebp, DWORD PTR [esi+12]
; Line 40588
	test	ebp, ebp
	mov	DWORD PTR _stackChng$[esp+28], 1
	je	$LN1@sqlite3Exp@24
	push	edi
; Line 40589
	mov	edi, DWORD PTR _pExpr$[esp+28]
	test	edi, edi
	jne	SHORT $LN62@sqlite3Exp@24
; Line 40590
	push	edi
	push	edi
	push	122					; 0000007aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
; Line 40958
	add	esp, 20					; 00000014H
	ret	0
$LN62@sqlite3Exp@24:
	push	ebx
; Line 40593
	movzx	ebx, BYTE PTR [edi]
; Line 40594
	lea	eax, DWORD PTR [ebx-16]
	cmp	eax, 136				; 00000088H
	ja	$LN60@sqlite3Exp@24
	movzx	eax, BYTE PTR $LN155@sqlite3Exp@24[eax]
	jmp	DWORD PTR $LN169@sqlite3Exp@24[eax*4]
$LN59@sqlite3Exp@24:
; Line 40596
	mov	eax, DWORD PTR [edi+44]
; Line 40598
	cmp	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR [edi+48]
	mov	edx, DWORD PTR [eax+16]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	lea	ecx, DWORD PTR [edx+ecx*8]
	jne	SHORT $LN58@sqlite3Exp@24
; Line 40599
	mov	eax, DWORD PTR [ecx+16]
	push	0
	push	eax
	push	1
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	jmp	$LN60@sqlite3Exp@24
$LN58@sqlite3Exp@24:
; Line 40601
	cmp	BYTE PTR [eax+1], 0
	je	SHORT $LN56@sqlite3Exp@24
; Line 40603
	mov	ecx, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR [eax+4]
	push	ecx
	push	edx
	push	3
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40604
	jmp	$LN60@sqlite3Exp@24
$LN56@sqlite3Exp@24:
; Line 40609
	mov	eax, DWORD PTR [edi+36]
	test	eax, eax
	jge	SHORT $LN54@sqlite3Exp@24
; Line 40612
	mov	eax, DWORD PTR [esi+40]
	sub	eax, DWORD PTR [edi+40]
	push	1
	sub	eax, 1
	push	eax
	push	94					; 0000005eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40613
	jmp	$LN60@sqlite3Exp@24
$LN54@sqlite3Exp@24:
; Line 40614
	mov	ecx, edi
	mov	esi, DWORD PTR [ecx+40]
	mov	edi, DWORD PTR [ecx+60]
	mov	ebx, ebp
	call	_sqlite3ExprCodeGetColumn
; Line 40616
	mov	esi, DWORD PTR _pParse$[esp+32]
	jmp	$LN60@sqlite3Exp@24
$LN52@sqlite3Exp@24:
; Line 40619
	mov	eax, edi
	mov	ebx, DWORD PTR [eax+24]
	mov	edi, DWORD PTR [eax+20]
	shr	ebx, 1
	mov	esi, ebp
	call	_codeInteger
; Line 40620
	mov	esi, DWORD PTR _pParse$[esp+32]
	jmp	$LN60@sqlite3Exp@24
$LN51@sqlite3Exp@24:
; Line 40626
	mov	eax, edi
	call	_sqlite3DequoteExpr
; Line 40627
	mov	ecx, DWORD PTR [edi+24]
	mov	edx, DWORD PTR [edi+20]
	shr	ecx, 1
	push	ecx
	push	edx
$LN167@sqlite3Exp@24:
	xor	eax, eax
	xor	ecx, ecx
	mov	edx, ebx
	mov	edi, ebp
	call	_sqlite3VdbeOp3
	add	esp, 8
; Line 40628
	jmp	$LN60@sqlite3Exp@24
$LN50@sqlite3Exp@24:
; Line 40631
	push	0
	push	0
	push	122					; 0000007aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40632
	jmp	$LN60@sqlite3Exp@24
$LN49@sqlite3Exp@24:
; Line 40639
	mov	eax, DWORD PTR [edi+24]
; Line 40640
	mov	edi, DWORD PTR [edi+20]
	shr	eax, 1
	sub	eax, 3
	add	edi, 2
; Line 40642
	test	eax, eax
	jne	SHORT $LN48@sqlite3Exp@24
; Line 40643
	mov	edi, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN48@sqlite3Exp@24:
; Line 40645
	push	eax
	push	edi
; Line 40646
	jmp	SHORT $LN167@sqlite3Exp@24
$LN47@sqlite3Exp@24:
; Line 40650
	mov	eax, DWORD PTR [edi+36]
	push	0
	push	eax
	push	25					; 00000019H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40651
	mov	edx, DWORD PTR [edi+24]
	shr	edx, 1
	add	esp, 12					; 0000000cH
	cmp	edx, 1
	jbe	$LN60@sqlite3Exp@24
; Line 40652
	mov	ecx, DWORD PTR [edi+20]
	push	ecx
	or	eax, -1
	mov	ecx, ebp
	call	_sqlite3VdbeChangeP3
	add	esp, 4
; Line 40654
	jmp	$LN60@sqlite3Exp@24
$LN45@sqlite3Exp@24:
; Line 40657
	mov	edx, DWORD PTR [edi+36]
	push	0
	push	edx
	push	1
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40658
	jmp	$LN60@sqlite3Exp@24
$LN44@sqlite3Exp@24:
; Line 40664
	mov	eax, DWORD PTR [edi+8]
	push	eax
	push	esi
	call	_sqlite3ExprCode
	add	esp, 8
; Line 40672
	push	0
	push	0
	lea	edx, DWORD PTR [edi+20]
	call	_sqlite3AffinityType
	movsx	ecx, al
	add	ecx, 41					; 00000029H
	push	ecx
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40674
	jmp	$LN2@sqlite3Exp@24
$LN43@sqlite3Exp@24:
; Line 40689
	mov	edx, DWORD PTR [edi+8]
	push	edx
	push	esi
	call	_sqlite3ExprCode
; Line 40690
	mov	eax, DWORD PTR [edi+12]
	push	eax
	push	esi
	call	_sqlite3ExprCode
; Line 40691
	mov	ecx, DWORD PTR [edi+12]
	mov	edx, DWORD PTR [edi+8]
	push	0
	push	ebx
	push	esi
	xor	eax, eax
	call	_codeCompare
	add	esp, 28					; 0000001cH
; Line 40692
	mov	DWORD PTR _stackChng$[esp+36], -1
; Line 40693
	jmp	$LN60@sqlite3Exp@24
$LN42@sqlite3Exp@24:
; Line 40718
	mov	ecx, DWORD PTR [edi+8]
	push	ecx
	push	esi
	call	_sqlite3ExprCode
; Line 40719
	mov	edx, DWORD PTR [edi+12]
	push	edx
	push	esi
	call	_sqlite3ExprCode
; Line 40720
	push	0
	push	0
	push	ebx
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 28					; 0000001cH
; Line 40721
	mov	DWORD PTR _stackChng$[esp+36], -1
; Line 40722
	jmp	$LN60@sqlite3Exp@24
$LN41@sqlite3Exp@24:
; Line 40725
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR _pLeft$92556[esp+36], eax
; Line 40727
	mov	al, BYTE PTR [eax]
	cmp	al, 125					; 0000007dH
	je	SHORT $LN39@sqlite3Exp@24
	cmp	al, 124					; 0000007cH
	jne	SHORT $LN40@sqlite3Exp@24
$LN39@sqlite3Exp@24:
; Line 40729
	mov	edi, DWORD PTR _pLeft$92556[esp+36]
	mov	eax, DWORD PTR [edi+20]
	mov	ecx, DWORD PTR [edi+24]
	push	eax
	shr	ecx, 1
	push	ecx
	push	OFFSET ??_C@_05INALNJMO@?9?$CF?4?$CKs?$AA@
	call	_sqlite3MPrintf
	add	esp, 12					; 0000000cH
; Line 40730
	cmp	BYTE PTR [edi], 125			; 0000007dH
	mov	ebx, eax
	mov	DWORD PTR _z$92561[esp+36], ebx
	jne	SHORT $LN38@sqlite3Exp@24
; Line 40731
	mov	edx, DWORD PTR [edi+24]
	shr	edx, 1
	add	edx, 1
	push	edx
	xor	eax, eax
	push	ebx
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+125]
	mov	edi, ebp
	call	_sqlite3VdbeOp3
	add	esp, 8
; Line 40735
	push	ebx
	call	_sqlite3FreeX
	add	esp, 4
; Line 40736
	jmp	$LN60@sqlite3Exp@24
$LN38@sqlite3Exp@24:
; Line 40733
	mov	eax, edi
	mov	ebx, DWORD PTR [eax+24]
	mov	edi, DWORD PTR _z$92561[esp+36]
	shr	ebx, 1
	add	ebx, 1
	mov	esi, ebp
	call	_codeInteger
	mov	esi, DWORD PTR _pParse$[esp+32]
	mov	ebx, edi
; Line 40735
	push	ebx
	call	_sqlite3FreeX
	add	esp, 4
; Line 40736
	jmp	$LN60@sqlite3Exp@24
$LN40@sqlite3Exp@24:
; Line 40744
	mov	ecx, DWORD PTR [edi+8]
	push	ecx
	push	esi
	call	_sqlite3ExprCode
; Line 40745
	push	0
	push	0
	push	ebx
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 20					; 00000014H
; Line 40747
	jmp	$LN2@sqlite3Exp@24
$LN35@sqlite3Exp@24:
; Line 40754
	push	0
	push	1
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40755
	mov	edx, DWORD PTR [edi+8]
	push	edx
	push	esi
	call	_sqlite3ExprCode
; Line 40756
	mov	eax, DWORD PTR [ebp+12]
	add	eax, 2
; Line 40757
	push	eax
	push	1
	push	ebx
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40758
	push	0
	push	-1
	push	39					; 00000027H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 44					; 0000002cH
; Line 40760
	jmp	$LN2@sqlite3Exp@24
$LN34@sqlite3Exp@24:
; Line 40763
	mov	eax, DWORD PTR [edi+44]
; Line 40764
	test	eax, eax
	jne	SHORT $LN33@sqlite3Exp@24
; Line 40766
	add	edi, 28					; 0000001cH
	push	edi
	push	OFFSET ??_C@_0BI@KKBMAAI@misuse?5of?5aggregate?3?5?$CFT?$AA@
	mov	edi, esi
	call	_sqlite3ErrorMsg
	add	esp, 8
	jmp	$LN60@sqlite3Exp@24
$LN33@sqlite3Exp@24:
; Line 40768
	mov	ecx, DWORD PTR [edi+48]
	mov	edx, DWORD PTR [eax+32]
	shl	ecx, 4
	mov	eax, DWORD PTR [ecx+edx+8]
	push	0
	push	eax
	push	1
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40770
	jmp	$LN60@sqlite3Exp@24
$LN31@sqlite3Exp@24:
; Line 40774
	mov	eax, DWORD PTR [edi+16]
; Line 40775
	test	eax, eax
	mov	DWORD PTR _pList$92578[esp+36], eax
	je	SHORT $LN66@sqlite3Exp@24
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nExpr$92579[esp+32], ecx
	jmp	SHORT $LN67@sqlite3Exp@24
$LN66@sqlite3Exp@24:
	mov	DWORD PTR _nExpr$92579[esp+32], 0
$LN67@sqlite3Exp@24:
; Line 40781
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+20]
	mov	cl, BYTE PTR [ecx+121]
; Line 40784
	mov	ebx, DWORD PTR [edi+24]
	xor	edx, edx
; Line 40785
	push	edx
	mov	BYTE PTR _enc$92585[esp+40], cl
	mov	ecx, DWORD PTR [edi+20]
	mov	DWORD PTR _constMask$92583[esp+40], edx
	mov	DWORD PTR _pColl$92586[esp+40], edx
	mov	edx, DWORD PTR _enc$92585[esp+40]
	push	edx
	mov	edx, DWORD PTR _nExpr$92579[esp+40]
	push	edx
	shr	ebx, 1
	push	ecx
	call	_sqlite3FindFunction
	mov	DWORD PTR _pDef$92580[esp+52], eax
; Line 40787
	mov	eax, DWORD PTR _pList$92578[esp+52]
	push	esi
	call	_sqlite3ExprCodeExprList
	add	esp, 20					; 00000014H
; Line 40801
	cmp	eax, 2
	mov	DWORD PTR _nExpr$92579[esp+32], eax
	jl	SHORT $LN30@sqlite3Exp@24
	test	BYTE PTR [edi+2], 128			; 00000080H
	je	SHORT $LN30@sqlite3Exp@24
; Line 40802
	mov	eax, DWORD PTR _pList$92578[esp+36]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _nExpr$92579[esp+32]
	mov	eax, DWORD PTR _pDef$92580[esp+36]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ecx+12]
	jmp	SHORT $LN166@sqlite3Exp@24
$LN30@sqlite3Exp@24:
; Line 40803
	mov	eax, DWORD PTR _nExpr$92579[esp+32]
	test	eax, eax
	jle	SHORT $LN159@sqlite3Exp@24
; Line 40804
	mov	ecx, DWORD PTR _pList$92578[esp+36]
	mov	edx, DWORD PTR [ecx+12]
	push	eax
	mov	eax, DWORD PTR _pDef$92580[esp+40]
	push	eax
	mov	eax, DWORD PTR [edx]
$LN166@sqlite3Exp@24:
	call	_sqlite3VtabOverloadFunction
	mov	DWORD PTR _pDef$92580[esp+44], eax
	add	esp, 8
$LN159@sqlite3Exp@24:
; Line 40807
	xor	ebx, ebx
	cmp	DWORD PTR _nExpr$92579[esp+32], ebx
	jle	SHORT $LN160@sqlite3Exp@24
	xor	edi, edi
$LL161@sqlite3Exp@24:
	cmp	edi, 384				; 00000180H
	jge	SHORT $LN160@sqlite3Exp@24
; Line 40808
	mov	ecx, DWORD PTR _pList$92578[esp+36]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [edi+edx]
	call	_sqlite3ExprIsConstant
	test	eax, eax
	je	SHORT $LN156@sqlite3Exp@24
; Line 40809
	mov	eax, 1
	mov	ecx, ebx
	shl	eax, cl
	or	DWORD PTR _constMask$92583[esp+36], eax
$LN156@sqlite3Exp@24:
; Line 40811
	mov	ecx, DWORD PTR _pDef$92580[esp+36]
	cmp	BYTE PTR [ecx+3], 0
	je	SHORT $LN26@sqlite3Exp@24
	cmp	DWORD PTR _pColl$92586[esp+36], 0
	jne	SHORT $LN26@sqlite3Exp@24
; Line 40812
	mov	edx, DWORD PTR _pList$92578[esp+36]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edi+eax]
	push	esi
	call	_sqlite3ExprCollSeq
	add	esp, 4
	mov	DWORD PTR _pColl$92586[esp+36], eax
$LN26@sqlite3Exp@24:
	add	ebx, 1
	add	edi, 12					; 0000000cH
	cmp	ebx, DWORD PTR _nExpr$92579[esp+32]
	jl	SHORT $LL161@sqlite3Exp@24
$LN160@sqlite3Exp@24:
; Line 40815
	mov	ecx, DWORD PTR _pDef$92580[esp+36]
	cmp	BYTE PTR [ecx+3], 0
	je	$LN158@sqlite3Exp@24
; Line 40816
	cmp	DWORD PTR _pColl$92586[esp+36], 0
	jne	SHORT $LN21@sqlite3Exp@24
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _pColl$92586[esp+36], eax
$LN21@sqlite3Exp@24:
; Line 40817
	xor	ebx, ebx
	push	ebx
	push	ebx
	push	13					; 0000000dH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	edi, DWORD PTR [ebp+20]
	add	esp, 12					; 0000000cH
	cmp	edi, ebx
	je	SHORT $LN150@sqlite3Exp@24
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN91@sqlite3Exp@24
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN150@sqlite3Exp@24
$LN91@sqlite3Exp@24:
	cmp	eax, ebx
	jl	SHORT $LN87@sqlite3Exp@24
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN157@sqlite3Exp@24
$LN87@sqlite3Exp@24:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN158@sqlite3Exp@24
$LN157@sqlite3Exp@24:
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edi+ecx*4+16]
	lea	edi, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	mov	eax, DWORD PTR _pColl$92586[esp+36]
	cmp	eax, ebx
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN151@sqlite3Exp@24
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN158@sqlite3Exp@24
$LN151@sqlite3Exp@24:
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], -4			; fffffffcH
	jmp	SHORT $LN158@sqlite3Exp@24
$LN150@sqlite3Exp@24:
	mov	ecx, DWORD PTR _pColl$92586[esp+36]
	mov	eax, -4					; fffffffcH
	call	_freeP3
$LN158@sqlite3Exp@24:
; Line 40819
	mov	ebx, DWORD PTR _nExpr$92579[esp+32]
	mov	edx, DWORD PTR _constMask$92583[esp+36]
	push	ebx
	push	edx
	push	20					; 00000014H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	edi, DWORD PTR [ebp+20]
	add	esp, 12					; 0000000cH
	test	edi, edi
	je	SHORT $LN152@sqlite3Exp@24
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN115@sqlite3Exp@24
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN152@sqlite3Exp@24
$LN115@sqlite3Exp@24:
	test	eax, eax
	jl	SHORT $LN111@sqlite3Exp@24
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN163@sqlite3Exp@24
$LN111@sqlite3Exp@24:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN113@sqlite3Exp@24
$LN163@sqlite3Exp@24:
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [edi+eax*4+12]
	lea	edi, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edi+16]
	call	_freeP3
	mov	ecx, DWORD PTR _pDef$92580[esp+36]
; Line 40820
	mov	eax, 1
	sub	eax, ebx
	mov	DWORD PTR [edi+12], ecx
	mov	DWORD PTR [edi+16], -5			; fffffffbH
	mov	DWORD PTR _stackChng$[esp+36], eax
; Line 40821
	jmp	$LN60@sqlite3Exp@24
$LN152@sqlite3Exp@24:
; Line 40819
	mov	ecx, DWORD PTR _pDef$92580[esp+36]
	mov	eax, -5					; fffffffbH
	call	_freeP3
$LN113@sqlite3Exp@24:
; Line 40820
	mov	eax, 1
	sub	eax, ebx
	mov	DWORD PTR _stackChng$[esp+36], eax
; Line 40821
	jmp	$LN60@sqlite3Exp@24
$LN20@sqlite3Exp@24:
; Line 40826
	cmp	DWORD PTR [edi+40], 0
	jne	SHORT $LN19@sqlite3Exp@24
; Line 40827
	push	edi
	push	esi
	call	_sqlite3CodeSubselect
	add	esp, 8
$LN19@sqlite3Exp@24:
; Line 40829
	mov	edx, DWORD PTR [edi+40]
	push	0
	push	edx
	push	1
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40831
	jmp	$LN60@sqlite3Exp@24
$LN18@sqlite3Exp@24:
; Line 40837
	mov	ebx, DWORD PTR _pExpr$[esp+32]
	mov	edi, esi
	mov	eax, DWORD PTR [edi+40]
	push	ebx
	push	edi
	mov	DWORD PTR _ckOffset$92606[esp+44], eax
	call	_sqlite3CodeSubselect
; Line 40843
	mov	esi, ebx
	call	_comparisonAffinity
; Line 40845
	push	0
	mov	BYTE PTR _affinity$92605[esp+48], al
	push	1
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 20					; 00000014H
; Line 40846
	cmp	DWORD PTR _ckOffset$92606[esp+36], 0
	je	SHORT $LN68@sqlite3Exp@24
	mov	eax, DWORD PTR _ckOffset$92606[esp+36]
	add	eax, 1
	jmp	SHORT $LN69@sqlite3Exp@24
$LN68@sqlite3Exp@24:
	xor	eax, eax
$LN69@sqlite3Exp@24:
	mov	DWORD PTR [edi+40], eax
; Line 40851
	mov	ecx, DWORD PTR [ebx+8]
	push	ecx
	push	edi
	call	_sqlite3ExprCode
; Line 40852
	mov	edi, DWORD PTR [ebp+12]
; Line 40853
	lea	edx, DWORD PTR [edi+4]
	push	edx
	push	-1
	push	66					; 00000042H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40854
	push	0
	push	2
	push	11					; 0000000bH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40855
	push	0
	push	0
	push	122					; 0000007aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40856
	add	edi, 7
	push	edi
	push	0
	push	95					; 0000005fH
	mov	eax, ebp
	mov	DWORD PTR tv1210[esp+92], edi
	call	_sqlite3VdbeAddOp
; Line 40857
	push	0
	push	1
	push	91					; 0000005bH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR [ebp+20]
	add	esp, 68					; 00000044H
	test	esi, esi
	je	SHORT $LN154@sqlite3Exp@24
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN141@sqlite3Exp@24
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN154@sqlite3Exp@24
$LN141@sqlite3Exp@24:
	test	eax, eax
	jl	SHORT $LN137@sqlite3Exp@24
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN136@sqlite3Exp@24
$LN137@sqlite3Exp@24:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN139@sqlite3Exp@24
$LN136@sqlite3Exp@24:
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [esi+eax*4+12]
	lea	esi, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	mov	edi, 1
	lea	ebx, DWORD PTR _affinity$92605[esp+36]
	mov	DWORD PTR [esi+12], 0
	call	_sqlite3StrNDup
	mov	ebx, DWORD PTR _pExpr$[esp+32]
	mov	edi, DWORD PTR tv1210[esp+36]
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -1
	jmp	SHORT $LN139@sqlite3Exp@24
$LN154@sqlite3Exp@24:
	lea	ecx, DWORD PTR _affinity$92605[esp+36]
	mov	eax, 1
	call	_freeP3
$LN139@sqlite3Exp@24:
; Line 40858
	mov	ecx, DWORD PTR [ebx+36]
	push	edi
	push	ecx
	push	134					; 00000086H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40859
	push	0
	push	-1
	push	39					; 00000027H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40861
	mov	esi, DWORD PTR _pParse$[esp+56]
	add	esp, 24					; 00000018H
	jmp	$LN60@sqlite3Exp@24
$LN17@sqlite3Exp@24:
; Line 40865
	mov	ebx, DWORD PTR [edi+8]
; Line 40866
	mov	edx, DWORD PTR [edi+16]
	mov	edi, DWORD PTR [edx+12]
; Line 40867
	mov	eax, DWORD PTR [edi]
; Line 40868
	push	ebx
	push	esi
	mov	DWORD PTR _pRight$92610[esp+40], eax
	call	_sqlite3ExprCode
; Line 40869
	push	0
	push	0
	push	94					; 0000005eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40870
	mov	ecx, DWORD PTR _pRight$92610[esp+52]
	push	ecx
	push	esi
	call	_sqlite3ExprCode
; Line 40871
	mov	ecx, DWORD PTR _pRight$92610[esp+60]
	push	0
	push	72					; 00000048H
	push	esi
	xor	eax, eax
	mov	edx, ebx
	call	_codeCompare
; Line 40872
	push	0
	push	1
	push	103					; 00000067H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40874
	mov	edi, DWORD PTR [edi+12]
; Line 40875
	push	edi
	push	esi
	call	_sqlite3ExprCode
; Line 40876
	push	0
	push	70					; 00000046H
	push	esi
	xor	eax, eax
	mov	ecx, edi
	mov	edx, ebx
	call	_codeCompare
	add	esp, 72					; 00000048H
; Line 40877
	push	0
	push	0
	push	61					; 0000003dH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40878
	jmp	$LN60@sqlite3Exp@24
$LN16@sqlite3Exp@24:
; Line 40881
	mov	edx, DWORD PTR [edi+8]
	push	edx
	push	esi
	call	_sqlite3ExprCode
	add	esp, 8
; Line 40883
	jmp	$LN2@sqlite3Exp@24
$LN15@sqlite3Exp@24:
; Line 40896
	mov	eax, DWORD PTR [edi+16]
; Line 40897
	mov	ebx, DWORD PTR [eax+12]
; Line 40898
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _nExpr$92615[esp+32], eax
; Line 40899
	mov	eax, ebp
	call	_sqlite3VdbeMakeLabel
	mov	DWORD PTR _expr_end_label$92613[esp+36], eax
; Line 40900
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $LN14@sqlite3Exp@24
; Line 40901
	push	eax
	push	esi
	call	_sqlite3ExprCode
	add	esp, 8
$LN14@sqlite3Exp@24:
; Line 40903
	cmp	DWORD PTR _nExpr$92615[esp+32], 0
	jle	$LN11@sqlite3Exp@24
	mov	eax, DWORD PTR _nExpr$92615[esp+32]
	add	eax, -1
	shr	eax, 1
	add	eax, 1
	mov	DWORD PTR tv442[esp+36], eax
	npad	7
$LL13@sqlite3Exp@24:
; Line 40904
	mov	ecx, DWORD PTR [ebx]
	push	ecx
	push	esi
	call	_sqlite3ExprCode
	add	esp, 8
; Line 40905
	cmp	DWORD PTR [edi+8], 0
; Line 40906
	mov	eax, ebp
	je	SHORT $LN10@sqlite3Exp@24
	push	1
	push	1
	push	94					; 0000005eH
	call	_sqlite3VdbeAddOp
; Line 40908
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [edi+8]
	push	0
	push	67					; 00000043H
	push	esi
	mov	eax, 1
	call	_codeCompare
; Line 40909
	push	0
	mov	DWORD PTR _jumpInst$92614[esp+60], eax
	push	1
	push	11					; 0000000bH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 36					; 00000024H
; Line 40910
	jmp	SHORT $LN9@sqlite3Exp@24
$LN10@sqlite3Exp@24:
; Line 40911
	push	0
	push	1
	push	89					; 00000059H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _jumpInst$92614[esp+32], eax
$LN9@sqlite3Exp@24:
; Line 40913
	mov	edx, DWORD PTR [ebx+12]
	push	edx
	push	esi
	call	_sqlite3ExprCode
; Line 40914
	mov	eax, DWORD PTR _expr_end_label$92613[esp+44]
	push	eax
	push	0
	push	95					; 0000005fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40915
	mov	eax, DWORD PTR _jumpInst$92614[esp+52]
	add	esp, 20					; 00000014H
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
	add	ebx, 24					; 00000018H
	sub	DWORD PTR tv442[esp+36], 1
	jne	$LL13@sqlite3Exp@24
$LN11@sqlite3Exp@24:
; Line 40917
	cmp	DWORD PTR [edi+8], 0
	je	SHORT $LN8@sqlite3Exp@24
; Line 40918
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN8@sqlite3Exp@24:
; Line 40920
	mov	edi, DWORD PTR [edi+12]
	test	edi, edi
	je	SHORT $LN7@sqlite3Exp@24
; Line 40921
	push	edi
	push	esi
	call	_sqlite3ExprCode
; Line 40925
	mov	edx, DWORD PTR _expr_end_label$92613[esp+44]
	add	esp, 8
	mov	ecx, ebp
	call	_sqlite3VdbeResolveLabel
; Line 40926
	jmp	$LN60@sqlite3Exp@24
$LN7@sqlite3Exp@24:
; Line 40923
	push	0
	push	0
	push	122					; 0000007aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40925
	mov	edx, DWORD PTR _expr_end_label$92613[esp+48]
	add	esp, 12					; 0000000cH
	mov	ecx, ebp
	call	_sqlite3VdbeResolveLabel
; Line 40926
	jmp	SHORT $LN60@sqlite3Exp@24
$LN5@sqlite3Exp@24:
; Line 40930
	cmp	DWORD PTR [esi+172], 0
	jne	SHORT $LN4@sqlite3Exp@24
; Line 40932
	push	OFFSET ??_C@_0DC@JGGJAPOJ@RAISE?$CI?$CJ?5may?5only?5be?5used?5within?5@
	mov	edi, esi
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 40958
	add	esp, 20					; 00000014H
	ret	0
$LN4@sqlite3Exp@24:
; Line 40935
	cmp	DWORD PTR [edi+40], 4
	je	SHORT $LN3@sqlite3Exp@24
; Line 40939
	mov	eax, edi
	call	_sqlite3DequoteExpr
; Line 40941
	mov	ecx, DWORD PTR [edi+24]
	mov	edx, DWORD PTR [edi+20]
	mov	eax, DWORD PTR [edi+40]
	shr	ecx, 1
	push	ecx
	mov	ecx, 19					; 00000013H
	push	edx
	lea	edx, DWORD PTR [ecx+17]
	mov	edi, ebp
	call	_sqlite3VdbeOp3
	add	esp, 8
; Line 40942
	jmp	SHORT $LN2@sqlite3Exp@24
$LN3@sqlite3Exp@24:
; Line 40944
	push	0
	push	0
	push	109					; 0000006dH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 40945
	mov	eax, DWORD PTR [esi+172]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	0
	push	95					; 0000005fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN2@sqlite3Exp@24:
; Line 40948
	mov	DWORD PTR _stackChng$[esp+36], 0
$LN60@sqlite3Exp@24:
; Line 40954
	mov	eax, DWORD PTR [esi+40]
	test	eax, eax
	je	SHORT $LN165@sqlite3Exp@24
; Line 40955
	mov	edx, DWORD PTR _stackChng$[esp+36]
	add	eax, edx
	mov	DWORD PTR [esi+40], eax
$LN165@sqlite3Exp@24:
	pop	ebx
	pop	edi
$LN1@sqlite3Exp@24:
	pop	esi
	pop	ebp
; Line 40958
	add	esp, 20					; 00000014H
	ret	0
$LN169@sqlite3Exp@24:
	DD	$LN40@sqlite3Exp@24
	DD	$LN20@sqlite3Exp@24
	DD	$LN44@sqlite3Exp@24
	DD	$LN5@sqlite3Exp@24
	DD	$LN42@sqlite3Exp@24
	DD	$LN17@sqlite3Exp@24
	DD	$LN18@sqlite3Exp@24
	DD	$LN35@sqlite3Exp@24
	DD	$LN43@sqlite3Exp@24
	DD	$LN41@sqlite3Exp@24
	DD	$LN16@sqlite3Exp@24
	DD	$LN51@sqlite3Exp@24
	DD	$LN50@sqlite3Exp@24
	DD	$LN52@sqlite3Exp@24
	DD	$LN49@sqlite3Exp@24
	DD	$LN45@sqlite3Exp@24
	DD	$LN47@sqlite3Exp@24
	DD	$LN15@sqlite3Exp@24
	DD	$LN31@sqlite3Exp@24
	DD	$LN56@sqlite3Exp@24
	DD	$LN34@sqlite3Exp@24
	DD	$LN59@sqlite3Exp@24
	DD	$LN60@sqlite3Exp@24
$LN155@sqlite3Exp@24:
	DB	0
	DB	1
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	2
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	3
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	4
	DB	4
	DB	22					; 00000016H
	DB	5
	DB	6
	DB	7
	DB	7
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	22					; 00000016H
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	22					; 00000016H
	DB	9
	DB	10					; 0000000aH
	DB	0
	DB	11					; 0000000bH
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	12					; 0000000cH
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	1
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	13					; 0000000dH
	DB	11					; 0000000bH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	22					; 00000016H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	18					; 00000012H
_sqlite3ExprCode ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprCodeAndCache
_TEXT	SEGMENT
_pExpr$ = 8						; size = 4
_sqlite3ExprCodeAndCache PROC				; COMDAT
; _pParse$ = ebx
; Line 40971
	push	ebp
	mov	ebp, DWORD PTR _pExpr$[esp]
	push	esi
; Line 40972
	mov	esi, DWORD PTR [ebx+12]
; Line 40975
	test	esi, esi
	je	SHORT $LN2@sqlite3Exp@25
	push	edi
; Line 40976
	mov	edi, DWORD PTR [esi+12]
; Line 40977
	push	ebp
	push	ebx
	call	_sqlite3ExprCode
; Line 40978
	mov	eax, DWORD PTR [esi+12]
; Line 40979
	lea	ecx, DWORD PTR [edi+1]
	add	esp, 8
	cmp	eax, ecx
	jg	SHORT $LN14@sqlite3Exp@25
	test	edi, edi
	jl	SHORT $LN12@sqlite3Exp@25
	cmp	edi, eax
	jge	SHORT $LN12@sqlite3Exp@25
	mov	eax, DWORD PTR [esi+20]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	jmp	SHORT $LN13@sqlite3Exp@25
$LN12@sqlite3Exp@25:
	xor	eax, eax
$LN13@sqlite3Exp@25:
	cmp	BYTE PTR [eax], 20			; 00000014H
	jne	SHORT $LN15@sqlite3Exp@25
$LN14@sqlite3Exp@25:
; Line 40980
	mov	eax, DWORD PTR [ebx+32]
; Line 40981
	push	0
	push	eax
	mov	DWORD PTR [ebp+36], eax
	add	DWORD PTR [ebx+32], 1
	push	124					; 0000007cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 40982
	mov	BYTE PTR [ebp], 127			; 0000007fH
$LN15@sqlite3Exp@25:
	pop	edi
$LN2@sqlite3Exp@25:
	pop	esi
	pop	ebp
; Line 40984
	ret	0
_sqlite3ExprCodeAndCache ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprIfTrue
_TEXT	SEGMENT
_ckOffset$ = -4						; size = 4
_addr$92698 = 8						; size = 4
_pRight$92700 = 8					; size = 4
_pParse$ = 8						; size = 4
_pExpr$ = 12						; size = 4
_dest$ = 16						; size = 4
_jumpIfNull$ = 20					; size = 4
_sqlite3ExprIfTrue PROC					; COMDAT
; Line 41021
	push	ecx
	push	ebx
	push	esi
; Line 41022
	mov	esi, DWORD PTR _pParse$[esp+8]
	mov	ebx, DWORD PTR [esi+12]
; Line 41025
	test	ebx, ebx
	mov	eax, DWORD PTR [esi+40]
	mov	DWORD PTR _ckOffset$[esp+12], eax
	je	$LN10@sqlite3Exp@26
	push	edi
	mov	edi, DWORD PTR _pExpr$[esp+12]
	test	edi, edi
	je	$LN45@sqlite3Exp@26
	push	ebp
; Line 41026
	movzx	ebp, BYTE PTR [edi]
; Line 41027
	lea	eax, DWORD PTR [ebp-16]
	cmp	eax, 56					; 00000038H
	ja	$LN1@sqlite3Exp@26
	movzx	ecx, BYTE PTR $LN44@sqlite3Exp@26[eax]
	jmp	DWORD PTR $LN47@sqlite3Exp@26[ecx*4]
$LN7@sqlite3Exp@26:
; Line 41029
	mov	eax, ebx
	call	_sqlite3VdbeMakeLabel
; Line 41030
	xor	edx, edx
	cmp	DWORD PTR _jumpIfNull$[esp+16], edx
	mov	ebp, eax
	mov	eax, DWORD PTR [edi+8]
	sete	dl
	push	edx
	push	ebp
	push	eax
	push	esi
	call	_sqlite3ExprIfFalse
; Line 41031
	mov	ecx, DWORD PTR _jumpIfNull$[esp+32]
	mov	edx, DWORD PTR _dest$[esp+32]
	mov	eax, DWORD PTR [edi+12]
	push	ecx
	push	edx
	push	eax
	push	esi
	call	_sqlite3ExprIfTrue
	add	esp, 32					; 00000020H
; Line 41032
	mov	edx, ebp
	mov	ecx, ebx
	call	_sqlite3VdbeResolveLabel
; Line 41099
	mov	edx, DWORD PTR _ckOffset$[esp+20]
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41100
	pop	ecx
	ret	0
$LN6@sqlite3Exp@26:
; Line 41036
	mov	ebx, DWORD PTR _jumpIfNull$[esp+16]
	mov	ebp, DWORD PTR _dest$[esp+16]
	mov	ecx, DWORD PTR [edi+8]
	push	ebx
	push	ebp
	push	ecx
	push	esi
	call	_sqlite3ExprIfTrue
; Line 41037
	mov	edx, DWORD PTR [edi+12]
	push	ebx
	push	ebp
	push	edx
	push	esi
	call	_sqlite3ExprIfTrue
; Line 41099
	mov	edx, DWORD PTR _ckOffset$[esp+52]
	add	esp, 32					; 00000020H
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41100
	pop	ecx
	ret	0
$LN5@sqlite3Exp@26:
; Line 41041
	mov	eax, DWORD PTR _jumpIfNull$[esp+16]
	mov	ecx, DWORD PTR _dest$[esp+16]
	mov	edx, DWORD PTR [edi+8]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	_sqlite3ExprIfFalse
; Line 41099
	mov	edx, DWORD PTR _ckOffset$[esp+36]
	add	esp, 16					; 00000010H
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41100
	pop	ecx
	ret	0
$LN4@sqlite3Exp@26:
; Line 41056
	mov	eax, DWORD PTR [edi+8]
	push	eax
	push	esi
	call	_sqlite3ExprCode
; Line 41057
	mov	ecx, DWORD PTR [edi+12]
	push	ecx
	push	esi
	call	_sqlite3ExprCode
; Line 41058
	mov	edx, DWORD PTR _dest$[esp+32]
	mov	eax, DWORD PTR _jumpIfNull$[esp+32]
	mov	ecx, DWORD PTR [edi+12]
	push	edx
	mov	edx, DWORD PTR [edi+8]
	push	ebp
	push	esi
	call	_codeCompare
; Line 41099
	mov	edx, DWORD PTR _ckOffset$[esp+48]
	add	esp, 28					; 0000001cH
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41100
	pop	ecx
	ret	0
$LN3@sqlite3Exp@26:
; Line 41065
	mov	eax, DWORD PTR [edi+8]
	push	eax
	push	esi
	call	_sqlite3ExprCode
; Line 41066
	mov	ecx, DWORD PTR _dest$[esp+24]
	push	ecx
	push	1
	push	ebp
; Line 41067
	jmp	$LN46@sqlite3Exp@26
$LN2@sqlite3Exp@26:
; Line 41078
	mov	edx, DWORD PTR [edi+16]
	mov	ebp, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
; Line 41079
	push	ebp
	push	esi
	mov	DWORD PTR _pRight$92700[esp+24], ecx
	call	_sqlite3ExprCode
; Line 41080
	push	0
	push	0
	push	94					; 0000005eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 41081
	mov	edx, DWORD PTR _pRight$92700[esp+36]
	push	edx
	push	esi
	call	_sqlite3ExprCode
; Line 41082
	mov	ecx, DWORD PTR _pRight$92700[esp+44]
	xor	eax, eax
	cmp	DWORD PTR _jumpIfNull$[esp+44], eax
	push	0
	sete	al
	push	71					; 00000047H
	push	esi
	mov	edx, ebp
	call	_codeCompare
	mov	DWORD PTR _addr$92698[esp+56], eax
; Line 41084
	mov	eax, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [eax+12]
	mov	edi, DWORD PTR [ecx+12]
; Line 41085
	push	edi
	push	esi
	call	_sqlite3ExprCode
; Line 41086
	mov	edx, DWORD PTR _dest$[esp+64]
	mov	eax, DWORD PTR _jumpIfNull$[esp+64]
	push	edx
	push	70					; 00000046H
	push	esi
	mov	ecx, edi
	mov	edx, ebp
	call	_codeCompare
; Line 41088
	push	0
	push	0
	push	47					; 0000002fH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 41089
	mov	eax, DWORD PTR _addr$92698[esp+88]
	add	esp, 72					; 00000048H
	mov	ecx, ebx
	call	_sqlite3VdbeJumpHere
; Line 41090
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 41099
	mov	edx, DWORD PTR _ckOffset$[esp+32]
	add	esp, 12					; 0000000cH
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41100
	pop	ecx
	ret	0
$LN1@sqlite3Exp@26:
; Line 41094
	push	edi
	push	esi
	call	_sqlite3ExprCode
; Line 41095
	mov	eax, DWORD PTR _dest$[esp+24]
	mov	ecx, DWORD PTR _jumpIfNull$[esp+24]
	push	eax
	push	ecx
	push	10					; 0000000aH
$LN46@sqlite3Exp@26:
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 41099
	mov	edx, DWORD PTR _ckOffset$[esp+40]
	add	esp, 20					; 00000014H
	mov	DWORD PTR [esi+40], edx
	pop	ebp
$LN45@sqlite3Exp@26:
	pop	edi
$LN10@sqlite3Exp@26:
	pop	esi
	pop	ebx
; Line 41100
	pop	ecx
	ret	0
	npad	2
$LN47@sqlite3Exp@26:
	DD	$LN5@sqlite3Exp@26
	DD	$LN6@sqlite3Exp@26
	DD	$LN7@sqlite3Exp@26
	DD	$LN2@sqlite3Exp@26
	DD	$LN3@sqlite3Exp@26
	DD	$LN4@sqlite3Exp@26
	DD	$LN1@sqlite3Exp@26
$LN44@sqlite3Exp@26:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	2
	DB	6
	DB	3
	DB	6
	DB	4
	DB	4
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
_sqlite3ExprIfTrue ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ExprIfFalse
_TEXT	SEGMENT
_ckOffset$ = -4						; size = 4
_pRight$92737 = 8					; size = 4
_pParse$ = 8						; size = 4
_pExpr$ = 12						; size = 4
_dest$ = 16						; size = 4
_jumpIfNull$ = 20					; size = 4
_sqlite3ExprIfFalse PROC				; COMDAT
; Line 41110
	push	ecx
	push	ebx
	push	esi
; Line 41111
	mov	esi, DWORD PTR _pParse$[esp+8]
	mov	ebx, DWORD PTR [esi+12]
; Line 41114
	test	ebx, ebx
	mov	eax, DWORD PTR [esi+40]
	mov	DWORD PTR _ckOffset$[esp+12], eax
	je	$LN10@sqlite3Exp@27
	push	edi
	mov	edi, DWORD PTR _pExpr$[esp+12]
	test	edi, edi
	je	$LN17@sqlite3Exp@27
; Line 41134
	movzx	eax, BYTE PTR [edi]
	push	ebp
	lea	ebp, DWORD PTR [eax+1]
	xor	ebp, 1
; Line 41147
	add	eax, -16				; fffffff0H
	sub	ebp, 1
	cmp	eax, 56					; 00000038H
	ja	$LN1@sqlite3Exp@27
	movzx	ecx, BYTE PTR $LN16@sqlite3Exp@27[eax]
	jmp	DWORD PTR $LN20@sqlite3Exp@27[ecx*4]
$LN7@sqlite3Exp@27:
; Line 41149
	mov	ebx, DWORD PTR _jumpIfNull$[esp+16]
	mov	ebp, DWORD PTR _dest$[esp+16]
	mov	edx, DWORD PTR [edi+8]
	push	ebx
	push	ebp
	push	edx
	push	esi
	call	_sqlite3ExprIfFalse
; Line 41150
	mov	eax, DWORD PTR [edi+12]
	push	ebx
	push	ebp
	push	eax
	push	esi
	call	_sqlite3ExprIfFalse
; Line 41210
	mov	edx, DWORD PTR _ckOffset$[esp+52]
	add	esp, 32					; 00000020H
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41211
	pop	ecx
	ret	0
$LN6@sqlite3Exp@27:
; Line 41154
	mov	eax, ebx
	call	_sqlite3VdbeMakeLabel
; Line 41155
	mov	edx, DWORD PTR [edi+8]
	xor	ecx, ecx
	cmp	DWORD PTR _jumpIfNull$[esp+16], ecx
	mov	ebp, eax
	sete	cl
	push	ecx
	push	ebp
	push	edx
	push	esi
	call	_sqlite3ExprIfTrue
; Line 41156
	mov	eax, DWORD PTR _jumpIfNull$[esp+32]
	mov	ecx, DWORD PTR _dest$[esp+32]
	mov	edx, DWORD PTR [edi+12]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	_sqlite3ExprIfFalse
	add	esp, 32					; 00000020H
; Line 41157
	mov	edx, ebp
	mov	ecx, ebx
	call	_sqlite3VdbeResolveLabel
; Line 41210
	mov	edx, DWORD PTR _ckOffset$[esp+20]
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41211
	pop	ecx
	ret	0
$LN5@sqlite3Exp@27:
; Line 41161
	mov	eax, DWORD PTR _jumpIfNull$[esp+16]
	mov	ecx, DWORD PTR _dest$[esp+16]
	mov	edx, DWORD PTR [edi+8]
	push	eax
	push	ecx
	push	edx
	push	esi
	call	_sqlite3ExprIfTrue
; Line 41210
	mov	edx, DWORD PTR _ckOffset$[esp+36]
	add	esp, 16					; 00000010H
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41211
	pop	ecx
	ret	0
$LN4@sqlite3Exp@27:
; Line 41170
	mov	eax, DWORD PTR [edi+8]
	push	eax
	push	esi
	call	_sqlite3ExprCode
; Line 41171
	mov	ecx, DWORD PTR [edi+12]
	push	ecx
	push	esi
	call	_sqlite3ExprCode
; Line 41172
	mov	edx, DWORD PTR _dest$[esp+32]
	mov	eax, DWORD PTR _jumpIfNull$[esp+32]
	mov	ecx, DWORD PTR [edi+12]
	push	edx
	mov	edx, DWORD PTR [edi+8]
	push	ebp
	push	esi
	call	_codeCompare
; Line 41210
	mov	edx, DWORD PTR _ckOffset$[esp+48]
	add	esp, 28					; 0000001cH
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41211
	pop	ecx
	ret	0
$LN3@sqlite3Exp@27:
; Line 41177
	mov	eax, DWORD PTR [edi+8]
	push	eax
	push	esi
	call	_sqlite3ExprCode
; Line 41178
	mov	ecx, DWORD PTR _dest$[esp+24]
	push	ecx
	push	1
	push	ebp
; Line 41179
	jmp	$LN18@sqlite3Exp@27
$LN2@sqlite3Exp@27:
; Line 41190
	mov	edx, DWORD PTR [edi+16]
	mov	ebp, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
; Line 41191
	push	ebp
	push	esi
	mov	DWORD PTR _pRight$92737[esp+24], ecx
	call	_sqlite3ExprCode
; Line 41192
	push	0
	push	0
	push	94					; 0000005eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 41193
	mov	edx, DWORD PTR _pRight$92737[esp+36]
	push	edx
	push	esi
	call	_sqlite3ExprCode
; Line 41195
	mov	ecx, DWORD PTR [ebx+12]
	xor	eax, eax
	cmp	DWORD PTR _jumpIfNull$[esp+44], eax
	mov	edx, ebp
	sete	al
	add	ecx, 3
	push	ecx
	mov	ecx, DWORD PTR _pRight$92737[esp+48]
	push	72					; 00000048H
	push	esi
	call	_codeCompare
; Line 41197
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 41198
	mov	edx, DWORD PTR _dest$[esp+68]
	push	edx
	push	0
	push	95					; 0000005fH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 41199
	mov	eax, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [eax+12]
	mov	edi, DWORD PTR [ecx+12]
	add	esp, 64					; 00000040H
; Line 41200
	push	edi
	push	esi
	call	_sqlite3ExprCode
; Line 41201
	mov	edx, DWORD PTR _dest$[esp+24]
	mov	eax, DWORD PTR _jumpIfNull$[esp+24]
	push	edx
	push	69					; 00000045H
	push	esi
	mov	ecx, edi
	mov	edx, ebp
	call	_codeCompare
; Line 41210
	mov	edx, DWORD PTR _ckOffset$[esp+40]
	add	esp, 20					; 00000014H
	pop	ebp
	pop	edi
	mov	DWORD PTR [esi+40], edx
	pop	esi
	pop	ebx
; Line 41211
	pop	ecx
	ret	0
$LN1@sqlite3Exp@27:
; Line 41205
	push	edi
	push	esi
	call	_sqlite3ExprCode
; Line 41206
	mov	eax, DWORD PTR _dest$[esp+24]
	mov	ecx, DWORD PTR _jumpIfNull$[esp+24]
	push	eax
	push	ecx
	push	89					; 00000059H
$LN18@sqlite3Exp@27:
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 41210
	mov	edx, DWORD PTR _ckOffset$[esp+40]
	add	esp, 20					; 00000014H
	mov	DWORD PTR [esi+40], edx
	pop	ebp
$LN17@sqlite3Exp@27:
	pop	edi
$LN10@sqlite3Exp@27:
	pop	esi
	pop	ebx
; Line 41211
	pop	ecx
	ret	0
$LN20@sqlite3Exp@27:
	DD	$LN5@sqlite3Exp@27
	DD	$LN6@sqlite3Exp@27
	DD	$LN7@sqlite3Exp@27
	DD	$LN2@sqlite3Exp@27
	DD	$LN3@sqlite3Exp@27
	DD	$LN4@sqlite3Exp@27
	DD	$LN1@sqlite3Exp@27
$LN16@sqlite3Exp@27:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	2
	DB	6
	DB	3
	DB	6
	DB	4
	DB	4
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
_sqlite3ExprIfFalse ENDP
_TEXT	ENDS
PUBLIC	??_C@_03GINCELHE@aaa?$AA@			; `string'
;	COMDAT ??_C@_03GINCELHE@aaa?$AA@
CONST	SEGMENT
??_C@_03GINCELHE@aaa?$AA@ DB 'aaa', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _analyzeOneTable
_TEXT	SEGMENT
_iIdxCur$ = -28						; size = 4
_endOfLoop$ = -24					; size = 4
_nCol$ = -20						; size = 4
_pIdx$ = -16						; size = 4
tv3523 = -12						; size = 4
_addr$ = -12						; size = 4
tv3090 = -8						; size = 4
tv3046 = -8						; size = 4
$T131495 = -8						; size = 4
$T131178 = -8						; size = 4
_iDb$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pTab$ = 12						; size = 4
_iStatCur$ = 16						; size = 4
_iMem$ = 20						; size = 4
_analyzeOneTable PROC					; COMDAT
; Line 42141
	sub	esp, 28					; 0000001cH
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+32]
; Line 42152
	mov	ebx, DWORD PTR [ebp+12]
	test	ebx, ebx
	push	edi
	jne	SHORT $LN598@analyzeOne
	mov	edi, DWORD PTR [ebp]
	call	_sqlite3VdbeCreate
	mov	ebx, eax
; Line 42153
	test	ebx, ebx
	mov	DWORD PTR [ebp+12], eax
	je	$LN23@analyzeOne
$LN598@analyzeOne:
	mov	edi, DWORD PTR _pTab$[esp+36]
	test	edi, edi
	je	$LN23@analyzeOne
	cmp	DWORD PTR [edi+16], 0
	je	$LN23@analyzeOne
; Line 42158
	mov	ecx, DWORD PTR [ebp]
	push	esi
	mov	esi, DWORD PTR [edi+76]
	call	_sqlite3SchemaToIndex
	mov	esi, eax
; Line 42162
	mov	eax, DWORD PTR [ebp]
	mov	edx, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [esi+esi*2]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edi]
	push	eax
	push	0
	push	ecx
	push	28					; 0000001cH
	mov	eax, ebp
	mov	DWORD PTR _iDb$[esp+60], esi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN733@analyzeOne
; Line 42168
	mov	edx, DWORD PTR [edi]
	push	edx
	push	eax
	mov	eax, DWORD PTR [edi+20]
	push	eax
	push	esi
	push	ebp
	call	_sqlite3TableLock
; Line 42171
	mov	edi, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [ebp+28]
	add	esp, 20					; 00000014H
	test	edi, edi
	mov	DWORD PTR _iIdxCur$[esp+44], ecx
	mov	DWORD PTR _pIdx$[esp+44], edi
	je	$LN733@analyzeOne
	npad	4
$LL694@analyzeOne:
; Line 42172
	mov	ebp, DWORD PTR _pIdx$[esp+44]
	mov	edx, DWORD PTR _pParse$[esp+40]
	push	ebp
	push	edx
	call	_sqlite3IndexKeyinfo
	mov	edi, eax
; Line 42177
	mov	eax, DWORD PTR _iDb$[esp+52]
	push	0
	push	eax
	push	47					; 0000002fH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 42180
	mov	eax, DWORD PTR [ebp+20]
	mov	ecx, DWORD PTR _iIdxCur$[esp+64]
	push	eax
	push	ecx
	push	14					; 0000000eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [ebx+20]
	add	esp, 32					; 00000020H
	test	ecx, ecx
	je	SHORT $LN587@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN49@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN587@analyzeOne
$LN49@analyzeOne:
	test	eax, eax
	jl	SHORT $LN45@analyzeOne
	cmp	eax, DWORD PTR [ebx+12]
	jl	SHORT $LN638@analyzeOne
$LN45@analyzeOne:
	mov	eax, DWORD PTR [ebx+12]
	sub	eax, 1
	js	SHORT $LN47@analyzeOne
$LN638@analyzeOne:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	xor	eax, eax
	cmp	edi, eax
	mov	DWORD PTR [esi+12], eax
	jne	SHORT $LN588@analyzeOne
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	jmp	SHORT $LN47@analyzeOne
$LN588@analyzeOne:
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], -6			; fffffffaH
	jmp	SHORT $LN47@analyzeOne
$LN587@analyzeOne:
	mov	ecx, edi
	mov	eax, -9					; fffffff7H
	call	_freeP3
$LN47@analyzeOne:
; Line 42181
	mov	ebp, DWORD PTR [ebp+4]
; Line 42182
	mov	eax, DWORD PTR _iMem$[esp+40]
	mov	ecx, DWORD PTR _pParse$[esp+40]
	lea	eax, DWORD PTR [eax+ebp*2]
	cmp	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR _nCol$[esp+44], ebp
	jl	SHORT $LN18@analyzeOne
; Line 42183
	add	eax, 1
	mov	DWORD PTR [ecx+32], eax
$LN18@analyzeOne:
; Line 42185
	mov	edx, DWORD PTR _iIdxCur$[esp+44]
	lea	ecx, DWORD PTR [ebp+1]
	push	ecx
	push	edx
	push	104					; 00000068H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 42200
	xor	edi, edi
	test	ebp, ebp
	jl	SHORT $LN606@analyzeOne
$LL17@analyzeOne:
; Line 42201
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN605@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN605@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN16@analyzeOne
$LN605@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	edx, DWORD PTR _iMem$[esp+40]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	xor	ecx, ecx
	add	edx, edi
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN16@analyzeOne:
	add	edi, 1
	cmp	edi, ebp
	jle	SHORT $LL17@analyzeOne
$LN606@analyzeOne:
; Line 42203
	xor	edi, edi
	test	ebp, ebp
	jle	SHORT $LN12@analyzeOne
	npad	4
$LL14@analyzeOne:
; Line 42204
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN607@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN607@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN13@analyzeOne
$LN607@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _iMem$[esp+40]
	lea	edx, DWORD PTR [edi+ebp]
	lea	edx, DWORD PTR [edx+ecx+1]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 133			; 00000085H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN13@analyzeOne:
	add	edi, 1
	cmp	edi, ebp
	jl	SHORT $LL14@analyzeOne
$LN12@analyzeOne:
; Line 42209
	mov	ecx, DWORD PTR [ebx+24]
	lea	eax, DWORD PTR [ecx+1]
	mov	DWORD PTR [ebx+24], eax
	mov	eax, DWORD PTR [ebx+28]
	cmp	ecx, eax
	mov	DWORD PTR tv3090[esp+44], ecx
	jl	$LN697@analyzeOne
	mov	ebp, DWORD PTR [ebx+32]
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [ebx+28], eax
	add	eax, eax
	add	eax, eax
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN727@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN727@analyzeOne
	xor	esi, esi
	jmp	SHORT $LN589@analyzeOne
$LN727@analyzeOne:
	test	ebp, ebp
	jne	SHORT $LN79@analyzeOne
	mov	edi, eax
	call	_sqlite3Malloc
	jmp	SHORT $LN88@analyzeOne
$LN79@analyzeOne:
	push	eax
	push	ebp
	call	_realloc
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN88@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN730@analyzeOne
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN88@analyzeOne
$LN730@analyzeOne:
	mov	ecx, 1
	add	DWORD PTR _inMutex, ecx
	mov	DWORD PTR _sqlite3_mallocHasFailed, ecx
$LN88@analyzeOne:
	mov	esi, eax
	test	esi, esi
	jne	SHORT $LN98@analyzeOne
$LN589@analyzeOne:
	test	ebp, ebp
	je	SHORT $LN98@analyzeOne
	push	ebp
	call	_free
	add	esp, 4
$LN98@analyzeOne:
	mov	ecx, DWORD PTR tv3090[esp+44]
	mov	ebp, DWORD PTR _nCol$[esp+44]
	mov	DWORD PTR [ebx+32], esi
$LN697@analyzeOne:
	mov	eax, DWORD PTR [ebx+32]
	test	eax, eax
	je	SHORT $LN728@analyzeOne
	mov	DWORD PTR [eax+ecx*4], -1
$LN728@analyzeOne:
; Line 42210
	mov	esi, DWORD PTR [ebx+12]
	or	edx, -1
	sub	edx, ecx
	cmp	DWORD PTR [ebx+16], esi
	mov	DWORD PTR _endOfLoop$[esp+44], edx
	jg	SHORT $LN698@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN643@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN644@analyzeOne
$LN643@analyzeOne:
	mov	edx, DWORD PTR _endOfLoop$[esp+44]
$LN698@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR _iIdxCur$[esp+44]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 127			; 0000007fH
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN644@analyzeOne:
; Line 42211
	mov	esi, DWORD PTR [ebx+12]
; Line 42212
	cmp	DWORD PTR [ebx+16], esi
	mov	DWORD PTR tv3046[esp+44], esi
	jg	SHORT $LN609@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN609@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN646@analyzeOne
$LN609@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	mov	ecx, 1
	add	DWORD PTR [ebx+12], ecx
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _iMem$[esp+40]
	mov	DWORD PTR [eax+8], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN646@analyzeOne:
; Line 42213
	xor	edi, edi
	test	ebp, ebp
	jle	$LN9@analyzeOne
	npad	1
$LL11@analyzeOne:
; Line 42214
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN610@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN610@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN648@analyzeOne
$LN610@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	ecx, DWORD PTR _iIdxCur$[esp+44]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 3
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN648@analyzeOne:
; Line 42215
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN611@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN611@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN650@analyzeOne
$LN611@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _iMem$[esp+40]
	lea	ecx, DWORD PTR [edi+ebp]
	lea	ecx, DWORD PTR [ecx+edx+1]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN650@analyzeOne:
; Line 42216
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN612@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN612@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN10@analyzeOne
$LN612@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	xor	ecx, ecx
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 67			; 00000043H
	mov	DWORD PTR [eax+4], 256			; 00000100H
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN10@analyzeOne:
	add	edi, 1
	cmp	edi, ebp
	jl	$LL11@analyzeOne
$LN9@analyzeOne:
; Line 42218
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN613@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN613@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN654@analyzeOne
$LN613@analyzeOne:
	mov	edx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _endOfLoop$[esp+44]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN654@analyzeOne:
; Line 42219
	xor	edi, edi
	test	ebp, ebp
	jle	$LN6@analyzeOne
	mov	ebp, DWORD PTR tv3046[esp+44]
	add	ebp, 3
	lea	eax, DWORD PTR [ebp+ebp*4]
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR tv3523[esp+44], eax
$LL8@analyzeOne:
; Line 42220
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN614@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN614@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN614@analyzeOne
	xor	esi, esi
	jmp	SHORT $LN140@analyzeOne
$LN614@analyzeOne:
	mov	edx, DWORD PTR [ebx+20]
	mov	ecx, 1
	add	DWORD PTR [ebx+12], ecx
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _iMem$[esp+40]
	lea	edx, DWORD PTR [edi+ecx+1]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN140@analyzeOne:
; Line 42221
	test	ebp, ebp
	jl	SHORT $LN144@analyzeOne
	cmp	DWORD PTR [ebx+12], ebp
	jle	SHORT $LN144@analyzeOne
	mov	eax, DWORD PTR [ebx+20]
	test	eax, eax
	je	SHORT $LN144@analyzeOne
	mov	ecx, DWORD PTR tv3523[esp+44]
	mov	DWORD PTR [eax+ecx+8], esi
$LN144@analyzeOne:
; Line 42222
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN615@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN615@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN657@analyzeOne
$LN615@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	ecx, DWORD PTR _iIdxCur$[esp+44]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 3
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN657@analyzeOne:
; Line 42223
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN616@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN616@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN7@analyzeOne
$LN616@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	lea	edx, DWORD PTR [esi+esi*4]
	mov	esi, DWORD PTR _iMem$[esp+40]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _nCol$[esp+44]
	mov	ecx, 1
	add	DWORD PTR [ebx+12], ecx
	add	edx, edi
	mov	DWORD PTR [eax+8], ecx
	xor	ecx, ecx
	lea	edx, DWORD PTR [edx+esi+1]
	mov	BYTE PTR [eax], 124			; 0000007cH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN7@analyzeOne:
	add	DWORD PTR tv3523[esp+44], 60		; 0000003cH
	add	edi, 1
	add	ebp, 3
	cmp	edi, DWORD PTR _nCol$[esp+44]
	jl	$LL8@analyzeOne
$LN6@analyzeOne:
; Line 42225
	mov	eax, DWORD PTR [ebx+32]
	test	eax, eax
	je	SHORT $LN159@analyzeOne
	mov	ecx, DWORD PTR _endOfLoop$[esp+44]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	ecx, DWORD PTR [ebx+12]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN159@analyzeOne:
; Line 42226
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN617@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN617@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN661@analyzeOne
$LN617@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	ecx, DWORD PTR _iIdxCur$[esp+44]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR tv3046[esp+44]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 110			; 0000006eH
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN661@analyzeOne:
; Line 42227
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN618@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN618@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN663@analyzeOne
$LN618@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	edx, DWORD PTR _iIdxCur$[esp+44]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN663@analyzeOne:
; Line 42247
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN619@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN619@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN665@analyzeOne
$LN619@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	edx, DWORD PTR _iMem$[esp+40]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN665@analyzeOne:
; Line 42248
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN710@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN710@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN710@analyzeOne
	mov	DWORD PTR _addr$[esp+44], 0
	jmp	SHORT $LN182@analyzeOne
$LN710@analyzeOne:
	mov	edx, DWORD PTR [ebx+20]
	xor	ecx, ecx
	add	DWORD PTR [ebx+12], 1
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	BYTE PTR [eax], 89			; 00000059H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
	mov	DWORD PTR _addr$[esp+44], esi
$LN182@analyzeOne:
; Line 42249
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN621@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN621@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN668@analyzeOne
$LN621@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	edx, DWORD PTR _iStatCur$[esp+40]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 23			; 00000017H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN668@analyzeOne:
; Line 42250
	mov	eax, DWORD PTR _pTab$[esp+40]
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	mov	edi, DWORD PTR [eax]
	mov	DWORD PTR $T131178[esp+44], edi
	jg	SHORT $LN712@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN712@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN712@analyzeOne
	xor	eax, eax
	jmp	SHORT $LN196@analyzeOne
$LN712@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	xor	ecx, ecx
	add	DWORD PTR [ebx+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 88			; 00000058H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
	mov	eax, esi
$LN196@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	test	ecx, ecx
	je	$LN590@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN217@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	$LN590@analyzeOne
$LN217@analyzeOne:
	test	eax, eax
	jl	SHORT $LN213@analyzeOne
	cmp	eax, DWORD PTR [ebx+12]
	jl	SHORT $LN212@analyzeOne
$LN213@analyzeOne:
	mov	eax, DWORD PTR [ebx+12]
	sub	eax, 1
	js	$LN215@analyzeOne
$LN212@analyzeOne:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	ebp, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ebp+12]
	call	_freeP3
	xor	ecx, ecx
	mov	eax, edi
	cmp	eax, ecx
	mov	DWORD PTR [ebp+12], ecx
	jne	SHORT $LN591@analyzeOne
	mov	DWORD PTR [ebp+12], ecx
	mov	DWORD PTR [ebp+16], ecx
	jmp	$LN215@analyzeOne
$LN591@analyzeOne:
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL603@analyzeOne:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL603@analyzeOne
	sub	eax, edx
	mov	edi, eax
	lea	eax, DWORD PTR [edi+1]
	xor	esi, esi
	test	eax, eax
	jle	SHORT $LN623@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN252@analyzeOne
	cmp	DWORD PTR _inMutex, esi
	jg	SHORT $LN623@analyzeOne
$LN252@analyzeOne:
	push	eax
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN599@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN262@analyzeOne
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN623@analyzeOne
$LN262@analyzeOne:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	mov	DWORD PTR [ebp+12], esi
	mov	DWORD PTR [ebp+16], -1
	jmp	SHORT $LN215@analyzeOne
$LN599@analyzeOne:
	mov	eax, DWORD PTR $T131178[esp+44]
	push	edi
	push	eax
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi+edi], 0
$LN623@analyzeOne:
	mov	DWORD PTR [ebp+12], esi
	mov	DWORD PTR [ebp+16], -1
	jmp	SHORT $LN215@analyzeOne
$LN590@analyzeOne:
	mov	ecx, edi
	xor	eax, eax
	call	_freeP3
$LN215@analyzeOne:
; Line 42251
	mov	ecx, DWORD PTR _pIdx$[esp+44]
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR $T131495[esp+44], edi
	jg	SHORT $LN713@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN713@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN713@analyzeOne
	xor	eax, eax
	jmp	SHORT $LN274@analyzeOne
$LN713@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	xor	ecx, ecx
	add	DWORD PTR [ebx+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 88			; 00000058H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
	mov	eax, esi
$LN274@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	test	ecx, ecx
	je	$LN592@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN295@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	$LN592@analyzeOne
$LN295@analyzeOne:
	test	eax, eax
	jl	SHORT $LN291@analyzeOne
	cmp	eax, DWORD PTR [ebx+12]
	jl	SHORT $LN290@analyzeOne
$LN291@analyzeOne:
	mov	eax, DWORD PTR [ebx+12]
	sub	eax, 1
	js	$LN293@analyzeOne
$LN290@analyzeOne:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	ebp, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [ebp+12]
	call	_freeP3
	mov	eax, DWORD PTR $T131495[esp+44]
	xor	ecx, ecx
	cmp	eax, ecx
	mov	DWORD PTR [ebp+12], ecx
	jne	SHORT $LN593@analyzeOne
	mov	DWORD PTR [ebp+12], ecx
	mov	DWORD PTR [ebp+16], ecx
	jmp	$LN293@analyzeOne
$LN593@analyzeOne:
	lea	edx, DWORD PTR [eax+1]
$LL604@analyzeOne:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL604@analyzeOne
	sub	eax, edx
	mov	edi, eax
	lea	eax, DWORD PTR [edi+1]
	xor	esi, esi
	test	eax, eax
	jle	SHORT $LN625@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN330@analyzeOne
	cmp	DWORD PTR _inMutex, esi
	jg	SHORT $LN625@analyzeOne
$LN330@analyzeOne:
	push	eax
	call	_malloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN600@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN340@analyzeOne
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN625@analyzeOne
$LN340@analyzeOne:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	mov	DWORD PTR [ebp+12], esi
	mov	DWORD PTR [ebp+16], -1
	jmp	SHORT $LN293@analyzeOne
$LN600@analyzeOne:
	mov	eax, DWORD PTR $T131495[esp+44]
	push	edi
	push	eax
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi+edi], 0
$LN625@analyzeOne:
	mov	DWORD PTR [ebp+12], esi
	mov	DWORD PTR [ebp+16], -1
	jmp	SHORT $LN293@analyzeOne
$LN592@analyzeOne:
	mov	ecx, edi
	xor	eax, eax
	call	_freeP3
$LN293@analyzeOne:
; Line 42252
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN626@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN626@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN672@analyzeOne
$LN626@analyzeOne:
	mov	edx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iMem$[esp+40]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN672@analyzeOne:
; Line 42253
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN715@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN715@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN715@analyzeOne
	xor	eax, eax
	jmp	SHORT $LN358@analyzeOne
$LN715@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	xor	ecx, ecx
	add	DWORD PTR [ebx+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 88			; 00000058H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
	mov	eax, esi
$LN358@analyzeOne:
	mov	esi, DWORD PTR [ebx+20]
	test	esi, esi
	je	$LN594@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN379@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	$LN594@analyzeOne
$LN379@analyzeOne:
	test	eax, eax
	jl	SHORT $LN375@analyzeOne
	cmp	eax, DWORD PTR [ebx+12]
	jl	SHORT $LN731@analyzeOne
$LN375@analyzeOne:
	mov	eax, DWORD PTR [ebx+12]
	sub	eax, 1
	js	$LN729@analyzeOne
$LN731@analyzeOne:
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [esi+ecx*4+16]
	lea	esi, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	mov	edi, DWORD PTR _inMutex
	xor	eax, eax
	mov	DWORD PTR [esi+12], 0
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN414@analyzeOne
	test	edi, edi
	jg	SHORT $LN406@analyzeOne
$LN414@analyzeOne:
	push	2
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN601@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN424@analyzeOne
	test	edi, edi
	jg	SHORT $LN406@analyzeOne
$LN424@analyzeOne:
	add	edi, 1
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -1
	jmp	SHORT $LN729@analyzeOne
$LN601@analyzeOne:
	mov	dl, BYTE PTR ??_C@_01CLKCMJKC@?5?$AA@
	mov	BYTE PTR [eax], dl
	mov	BYTE PTR [eax+1], 0
$LN406@analyzeOne:
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -1
	jmp	SHORT $LN729@analyzeOne
$LN594@analyzeOne:
	mov	ecx, OFFSET ??_C@_01CLKCMJKC@?5?$AA@
	xor	eax, eax
	call	_freeP3
$LN729@analyzeOne:
; Line 42254
	mov	ebp, DWORD PTR _nCol$[esp+44]
	xor	edi, edi
	test	ebp, ebp
	jle	$LN3@analyzeOne
	npad	1
$LL5@analyzeOne:
; Line 42255
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN628@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN628@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN675@analyzeOne
$LN628@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	edx, DWORD PTR _iMem$[esp+40]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN675@analyzeOne:
; Line 42256
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN629@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN629@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN677@analyzeOne
$LN629@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	edx, DWORD PTR _iMem$[esp+40]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [edi+edx+1]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN677@analyzeOne:
; Line 42257
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN718@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN718@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN679@analyzeOne
$LN718@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	xor	ecx, ecx
	add	DWORD PTR [ebx+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 78			; 0000004eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN679@analyzeOne:
; Line 42258
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN631@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN631@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN681@analyzeOne
$LN631@analyzeOne:
	mov	edx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 39			; 00000027H
	mov	DWORD PTR [eax+4], -1
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN681@analyzeOne:
; Line 42259
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN632@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN632@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN683@analyzeOne
$LN632@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	edx, DWORD PTR _iMem$[esp+40]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	lea	ecx, DWORD PTR [edi+edx+1]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN683@analyzeOne:
; Line 42260
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN721@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN721@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN685@analyzeOne
$LN721@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	xor	ecx, ecx
	add	DWORD PTR [ebx+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 81			; 00000051H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN685@analyzeOne:
; Line 42261
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN722@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN722@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN687@analyzeOne
$LN722@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	xor	ecx, ecx
	add	DWORD PTR [ebx+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 141			; 0000008dH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN687@analyzeOne:
; Line 42263
	mov	esi, DWORD PTR [ebx+12]
	lea	eax, DWORD PTR [ebp-1]
	cmp	edi, eax
	jne	SHORT $LN2@analyzeOne
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN635@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN635@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN4@analyzeOne
$LN635@analyzeOne:
	mov	edx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	lea	ecx, DWORD PTR [ebp+ebp-1]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 83			; 00000053H
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
; Line 42264
	jmp	SHORT $LN4@analyzeOne
$LN2@analyzeOne:
; Line 42265
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN636@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN636@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN4@analyzeOne
$LN636@analyzeOne:
	mov	eax, DWORD PTR [ebx+20]
	mov	ecx, 1
	add	DWORD PTR [ebx+12], ecx
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN4@analyzeOne:
	add	edi, 1
	cmp	edi, ebp
	jl	$LL5@analyzeOne
$LN3@analyzeOne:
; Line 42268
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN637@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN637@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN637@analyzeOne
	xor	eax, eax
	jmp	SHORT $LN490@analyzeOne
$LN637@analyzeOne:
	mov	edx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 91			; 0000005bH
	mov	DWORD PTR [eax+4], 3
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
	mov	eax, esi
$LN490@analyzeOne:
	mov	esi, DWORD PTR [ebx+20]
	test	esi, esi
	je	$LN596@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN511@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	$LN596@analyzeOne
$LN511@analyzeOne:
	test	eax, eax
	jl	SHORT $LN507@analyzeOne
	cmp	eax, DWORD PTR [ebx+12]
	jl	SHORT $LN732@analyzeOne
$LN507@analyzeOne:
	mov	eax, DWORD PTR [ebx+12]
	sub	eax, 1
	js	$LN509@analyzeOne
$LN732@analyzeOne:
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [esi+eax*4+12]
	lea	esi, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	mov	edi, DWORD PTR _inMutex
	xor	eax, eax
	mov	DWORD PTR [esi+12], 0
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN546@analyzeOne
	test	edi, edi
	jg	SHORT $LN538@analyzeOne
$LN546@analyzeOne:
	push	4
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN602@analyzeOne
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN556@analyzeOne
	test	edi, edi
	jg	SHORT $LN538@analyzeOne
$LN556@analyzeOne:
	add	edi, 1
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -1
	jmp	SHORT $LN509@analyzeOne
$LN602@analyzeOne:
	mov	cx, WORD PTR ??_C@_03GINCELHE@aaa?$AA@
	mov	WORD PTR [eax], cx
	mov	dl, BYTE PTR ??_C@_03GINCELHE@aaa?$AA@+2
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], 0
$LN538@analyzeOne:
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -1
	jmp	SHORT $LN509@analyzeOne
$LN596@analyzeOne:
	mov	ecx, OFFSET ??_C@_03GINCELHE@aaa?$AA@
	xor	eax, eax
	call	_freeP3
$LN509@analyzeOne:
; Line 42269
	mov	esi, DWORD PTR [ebx+12]
	cmp	DWORD PTR [ebx+16], esi
	jg	SHORT $LN692@analyzeOne
	lea	eax, DWORD PTR [esi+1]
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN692@analyzeOne
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN693@analyzeOne
$LN692@analyzeOne:
	mov	ecx, DWORD PTR [ebx+20]
	add	DWORD PTR [ebx+12], 1
	mov	edx, DWORD PTR _iStatCur$[esp+40]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 113			; 00000071H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], 8
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [ebx+564], cl
$LN693@analyzeOne:
; Line 42270
	mov	edx, DWORD PTR _addr$[esp+44]
	test	edx, edx
	jl	SHORT $LN20@analyzeOne
	mov	ecx, DWORD PTR [ebx+12]
	cmp	ecx, edx
	jle	SHORT $LN20@analyzeOne
	mov	eax, DWORD PTR [ebx+20]
	test	eax, eax
	je	SHORT $LN20@analyzeOne
	lea	edx, DWORD PTR [edx+edx*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
$LN20@analyzeOne:
	mov	eax, DWORD PTR _pIdx$[esp+44]
	mov	eax, DWORD PTR [eax+32]
	test	eax, eax
	mov	DWORD PTR _pIdx$[esp+44], eax
	jne	$LL694@analyzeOne
$LN733@analyzeOne:
	pop	esi
$LN23@analyzeOne:
	pop	edi
	pop	ebp
	pop	ebx
; Line 42272
	add	esp, 28					; 0000001cH
	ret	0
_analyzeOneTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@HKAEEBEM@database?5?$CFs?5is?5locked?$AA@ ; `string'
PUBLIC	??_C@_0CK@NCGPBHIO@cannot?5DETACH?5database?5within?5tr@ ; `string'
PUBLIC	??_C@_0BK@KGABJE@cannot?5detach?5database?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BF@PJFCJDG@no?5such?5database?3?5?$CFs?$AA@ ; `string'
PUBLIC	_context$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BG@HKAEEBEM@database?5?$CFs?5is?5locked?$AA@
CONST	SEGMENT
??_C@_0BG@HKAEEBEM@database?5?$CFs?5is?5locked?$AA@ DB 'database %s is lo'
	DB	'cked', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NCGPBHIO@cannot?5DETACH?5database?5within?5tr@
CONST	SEGMENT
??_C@_0CK@NCGPBHIO@cannot?5DETACH?5database?5within?5tr@ DB 'cannot DETAC'
	DB	'H database within transaction', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KGABJE@cannot?5detach?5database?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BK@KGABJE@cannot?5detach?5database?5?$CFs?$AA@ DB 'cannot detach d'
	DB	'atabase %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PJFCJDG@no?5such?5database?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@PJFCJDG@no?5such?5database?3?5?$CFs?$AA@ DB 'no such database: '
	DB	'%s', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _detachFunc
_TEXT	SEGMENT
_zName$ = -144						; size = 4
_context$GSCopy$ = -140					; size = 4
_db$ = -136						; size = 4
_zErr$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_detachFunc PROC					; COMDAT
; Line 42698
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+144], eax
	mov	eax, DWORD PTR _argv$[esp+140]
; Line 42699
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _context$[esp+148]
	push	edi
	mov	al, 1
	mov	DWORD PTR _context$GSCopy$[esp+156], esi
	call	_sqlite3ValueText
	mov	edx, eax
; Line 42700
	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+8]
; Line 42702
	xor	ebx, ebx
; Line 42705
	test	edx, edx
	mov	DWORD PTR _zName$[esp+156], edx
	mov	DWORD PTR _db$[esp+156], eax
	jne	SHORT $LN10@detachFunc
	mov	DWORD PTR _zName$[esp+156], OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	edx, DWORD PTR _zName$[esp+156]
$LN10@detachFunc:
	push	ebp
; Line 42706
	mov	ebp, DWORD PTR [eax]
	xor	edi, edi
	test	ebp, ebp
	jle	SHORT $LN40@detachFunc
	mov	esi, DWORD PTR [eax+4]
	npad	1
$LL46@detachFunc:
; Line 42708
	cmp	DWORD PTR [esi+4], 0
	mov	ebx, esi
	je	SHORT $LN8@detachFunc
; Line 42709
	mov	ecx, DWORD PTR [esi]
	call	_sqlite3StrICmp
	test	eax, eax
	mov	edx, DWORD PTR _zName$[esp+160]
	je	SHORT $LN45@detachFunc
$LN8@detachFunc:
; Line 42706
	add	edi, 1
	add	esi, 24					; 00000018H
	cmp	edi, ebp
	jl	SHORT $LL46@detachFunc
$LN45@detachFunc:
	mov	esi, DWORD PTR _context$GSCopy$[esp+160]
$LN40@detachFunc:
; Line 42712
	cmp	edi, ebp
	pop	ebp
	jl	SHORT $LN4@detachFunc
; Line 42713
	push	edx
	push	OFFSET ??_C@_0BF@PJFCJDG@no?5such?5database?3?5?$CFs?$AA@
	lea	ecx, DWORD PTR _zErr$[esp+164]
	push	ecx
; Line 42714
	jmp	SHORT $LN47@detachFunc
$LN4@detachFunc:
; Line 42716
	cmp	edi, 2
	jge	SHORT $LN3@detachFunc
; Line 42717
	push	edx
	push	OFFSET ??_C@_0BK@KGABJE@cannot?5detach?5database?5?$CFs?$AA@
; Line 42718
	jmp	SHORT $LN48@detachFunc
$LN3@detachFunc:
; Line 42720
	mov	eax, DWORD PTR _db$[esp+156]
	cmp	BYTE PTR [eax+20], 0
	jne	SHORT $LN2@detachFunc
; Line 42722
	push	OFFSET ??_C@_0CK@NCGPBHIO@cannot?5DETACH?5database?5within?5tr@
	lea	ecx, DWORD PTR _zErr$[esp+160]
	push	ecx
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 12					; 0000000cH
; Line 42723
	jmp	SHORT $detach_error$93343
$LN2@detachFunc:
; Line 42725
	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN1@detachFunc
	cmp	BYTE PTR [eax+8], 0
	je	SHORT $LN1@detachFunc
; Line 42726
	push	edx
	push	OFFSET ??_C@_0BG@HKAEEBEM@database?5?$CFs?5is?5locked?$AA@
$LN48@detachFunc:
	lea	edx, DWORD PTR _zErr$[esp+164]
	push	edx
$LN47@detachFunc:
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
$detach_error$93343:
; Line 42737
	mov	BYTE PTR [esi+76], 1
	add	esi, 8
	push	esi
	call	_sqlite3VdbeMemRelease
	lea	eax, DWORD PTR _zErr$[esp+160]
	add	esp, 4
	mov	DWORD PTR [esi+16], eax
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL43@detachFunc:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL43@detachFunc
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
	pop	edi
	pop	esi
	pop	ebx
; Line 42738
	mov	ecx, DWORD PTR __$ArrayPad$[esp+144]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 144				; 00000090H
	ret	0
$LN1@detachFunc:
; Line 42730
	push	eax
	call	_sqlite3BtreeClose
; Line 42731
	xor	eax, eax
	mov	DWORD PTR [ebx+4], eax
; Line 42732
	mov	DWORD PTR [ebx+20], eax
; Line 42733
	mov	ebx, DWORD PTR _db$[esp+160]
	push	eax
	call	_sqlite3ResetInternalSchema
; Line 42738
	mov	ecx, DWORD PTR __$ArrayPad$[esp+164]
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 144				; 00000090H
	ret	0
_detachFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _codeAttach
_TEXT	SEGMENT
_sName$ = -36						; size = 36
_type$ = 8						; size = 4
_zFunc$ = 12						; size = 4
_nFunc$ = 16						; size = 4
_pFilename$ = 20					; size = 4
_pDbname$ = 24						; size = 4
_pKey$ = 28						; size = 4
_codeAttach PROC					; COMDAT
; _pParse$ = ecx
; _pAuthArg$ = eax
; Line 42753
	sub	esp, 36					; 00000024H
; Line 42762
	test	eax, eax
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	mov	ebp, DWORD PTR [esi]
	push	edi
	je	SHORT $LN4@codeAttach
; Line 42763
	add	eax, 28					; 0000001cH
	call	_sqlite3NameFromToken
	mov	edi, eax
; Line 42764
	test	edi, edi
	je	$attach_end$93377
; Line 42767
	mov	eax, DWORD PTR _type$[esp+48]
	push	0
	push	0
	push	edi
	push	eax
	mov	eax, esi
	call	_sqlite3AuthCheck
; Line 42768
	push	edi
	mov	ebx, eax
	call	_free
	add	esp, 20					; 00000014H
; Line 42769
	test	ebx, ebx
	jne	$attach_end$93377
$LN4@codeAttach:
; Line 42782
	mov	ebx, DWORD PTR _pFilename$[esp+48]
	xor	eax, eax
	mov	DWORD PTR _sName$[esp+52], eax
	mov	DWORD PTR _sName$[esp+56], eax
	mov	DWORD PTR _sName$[esp+60], eax
	mov	DWORD PTR _sName$[esp+64], eax
	mov	DWORD PTR _sName$[esp+68], eax
	mov	DWORD PTR _sName$[esp+72], eax
	mov	DWORD PTR _sName$[esp+76], eax
	mov	DWORD PTR _sName$[esp+80], eax
	mov	DWORD PTR _sName$[esp+84], eax
	mov	eax, ebx
	lea	ecx, DWORD PTR _sName$[esp+52]
	mov	DWORD PTR _sName$[esp+52], esi
	call	_resolveAttachExpr
	test	eax, eax
	jne	$LN42@codeAttach
	mov	eax, DWORD PTR _pDbname$[esp+48]
	lea	ecx, DWORD PTR _sName$[esp+52]
	call	_resolveAttachExpr
	test	eax, eax
	jne	$LN42@codeAttach
	mov	eax, DWORD PTR _pKey$[esp+48]
	lea	ecx, DWORD PTR _sName$[esp+52]
	call	_resolveAttachExpr
	test	eax, eax
	jne	$LN42@codeAttach
; Line 42787
	mov	edi, DWORD PTR [esi+12]
	test	edi, edi
	jne	SHORT $LN14@codeAttach
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [esi+12], eax
	mov	edi, eax
$LN14@codeAttach:
; Line 42788
	push	ebx
	push	esi
	call	_sqlite3ExprCode
; Line 42789
	mov	ecx, DWORD PTR _pDbname$[esp+56]
	push	ecx
	push	esi
	call	_sqlite3ExprCode
; Line 42790
	mov	edx, DWORD PTR _pKey$[esp+64]
	push	edx
	push	esi
	call	_sqlite3ExprCode
	add	esp, 24					; 00000018H
; Line 42793
	test	edi, edi
	je	$attach_end$93377
; Line 42794
	mov	esi, DWORD PTR _nFunc$[esp+48]
	push	esi
	push	0
	push	20					; 00000014H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 42795
	mov	ebx, DWORD PTR _zFunc$[esp+60]
	mov	eax, ebx
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [eax+1]
$LL41@codeAttach:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL41@codeAttach
	push	0
	push	1
	sub	eax, ecx
	push	esi
	push	ebx
	mov	ebx, eax
	mov	eax, ebp
	call	_sqlite3FindFunction
	mov	ebx, eax
; Line 42796
	mov	eax, DWORD PTR [edi+20]
	xor	ebp, ebp
	add	esp, 16					; 00000010H
	cmp	eax, ebp
	je	SHORT $LN39@codeAttach
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN30@codeAttach
	cmp	DWORD PTR _inMutex, ebp
	jg	SHORT $LN39@codeAttach
$LN30@codeAttach:
	mov	ecx, DWORD PTR [edi+12]
	sub	ecx, 1
	js	SHORT $LN32@codeAttach
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	esi, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	cmp	ebx, ebp
	mov	DWORD PTR [esi+12], ebp
	jne	SHORT $LN40@codeAttach
	mov	DWORD PTR [esi+12], ebp
	mov	DWORD PTR [esi+16], ebp
	jmp	SHORT $LN32@codeAttach
$LN40@codeAttach:
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], -5			; fffffffbH
	jmp	SHORT $LN32@codeAttach
$LN39@codeAttach:
	mov	ecx, ebx
	mov	eax, -5					; fffffffbH
	call	_freeP3
$LN32@codeAttach:
; Line 42802
	xor	edx, edx
	cmp	DWORD PTR _type$[esp+48], 24		; 00000018H
	push	ebp
	sete	dl
	mov	eax, edi
	push	edx
	push	15					; 0000000fH
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	jmp	SHORT $attach_end$93377
$LN42@codeAttach:
; Line 42783
	add	DWORD PTR [esi+24], 1
$attach_end$93377:
; Line 42806
	mov	eax, DWORD PTR _pFilename$[esp+48]
	push	eax
	call	_sqlite3ExprDelete
; Line 42807
	mov	ecx, DWORD PTR _pDbname$[esp+52]
	push	ecx
	call	_sqlite3ExprDelete
; Line 42808
	mov	edx, DWORD PTR _pKey$[esp+56]
	push	edx
	call	_sqlite3ExprDelete
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 42809
	add	esp, 36					; 00000024H
	ret	0
_codeAttach ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@PDAEIIFA@sqlite_detach?$AA@		; `string'
;	COMDAT ??_C@_0O@PDAEIIFA@sqlite_detach?$AA@
CONST	SEGMENT
??_C@_0O@PDAEIIFA@sqlite_detach?$AA@ DB 'sqlite_detach', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Detach
_TEXT	SEGMENT
_sqlite3Detach PROC					; COMDAT
; _pParse$ = ecx
; _pDbname$ = eax
; Line 42817
	push	eax
	push	0
	push	0
	push	1
	push	OFFSET ??_C@_0O@PDAEIIFA@sqlite_detach?$AA@
	push	25					; 00000019H
	call	_codeAttach
	add	esp, 24					; 00000018H
; Line 42818
	ret	0
_sqlite3Detach ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@GJLGHGMJ@sqlite_attach?$AA@		; `string'
;	COMDAT ??_C@_0O@GJLGHGMJ@sqlite_attach?$AA@
CONST	SEGMENT
??_C@_0O@GJLGHGMJ@sqlite_attach?$AA@ DB 'sqlite_attach', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Attach
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_sqlite3Attach PROC					; COMDAT
; _p$ = eax
; _pDbname$ = edx
; _pKey$ = ecx
; Line 42826
	push	ecx
	mov	ecx, DWORD PTR _pParse$[esp]
	push	edx
	push	eax
	push	3
	push	OFFSET ??_C@_0O@GJLGHGMJ@sqlite_attach?$AA@
	push	24					; 00000018H
	call	_codeAttach
	add	esp, 24					; 00000018H
; Line 42827
	ret	0
_sqlite3Attach ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AddCollateType
_TEXT	SEGMENT
_zType$ = 8						; size = 4
_nType$ = 12						; size = 4
_sqlite3AddCollateType PROC				; COMDAT
; _pParse$ = eax
; Line 44394
	push	ebp
	mov	ebp, DWORD PTR _nType$[esp]
	push	esi
; Line 44398
	mov	esi, DWORD PTR [eax+164]
	test	esi, esi
	je	SHORT $LN2@sqlite3Add@6
	push	ebx
; Line 44401
	mov	ebx, DWORD PTR _zType$[esp+8]
	push	edi
	mov	edi, DWORD PTR [esi+4]
	push	ebx
	push	eax
	mov	eax, ebp
	sub	edi, 1
	call	_sqlite3LocateCollSeq
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@sqlite3Add@6
; Line 44403
	test	ebx, ebx
	je	SHORT $LN9@sqlite3Add@6
$LN10@sqlite3Add@6:
	lea	ecx, DWORD PTR [ebp+1]
	call	_sqlite3MallocRaw
	mov	ebx, eax
	test	ebx, ebx
	je	SHORT $LN9@sqlite3Add@6
	mov	eax, DWORD PTR _zType$[esp+12]
	push	ebp
	push	eax
	push	ebx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [ebx+ebp], 0
$LN9@sqlite3Add@6:
	mov	edx, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [edi+edi*4]
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR [edx+ecx+12], ebx
; Line 44409
	mov	eax, DWORD PTR [esi+16]
	test	eax, eax
	je	SHORT $LN15@sqlite3Add@6
$LL4@sqlite3Add@6:
; Line 44411
	mov	edx, DWORD PTR [eax+8]
	cmp	DWORD PTR [edx], edi
	jne	SHORT $LN3@sqlite3Add@6
; Line 44412
	mov	edx, DWORD PTR [esi+8]
	mov	ebx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [edx+ecx+12]
	mov	DWORD PTR [ebx], edx
$LN3@sqlite3Add@6:
	mov	eax, DWORD PTR [eax+32]
	test	eax, eax
	jne	SHORT $LL4@sqlite3Add@6
$LN15@sqlite3Add@6:
	pop	edi
	pop	ebx
$LN2@sqlite3Add@6:
	pop	esi
	pop	ebp
; Line 44416
	ret	0
_sqlite3AddCollateType ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DK@GONLDKLN@unable?5to?5get?5a?5write?5lock?5on?5th@ ; `string'
PUBLIC	??_C@_0EG@GIEOJFED@unable?5to?5open?5a?5temporary?5datab@ ; `string'
;	COMDAT ??_C@_0DK@GONLDKLN@unable?5to?5get?5a?5write?5lock?5on?5th@
CONST	SEGMENT
??_C@_0DK@GONLDKLN@unable?5to?5get?5a?5write?5lock?5on?5th@ DB 'unable to'
	DB	' get a write lock on the temporary database file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@GIEOJFED@unable?5to?5open?5a?5temporary?5datab@
CONST	SEGMENT
??_C@_0EG@GIEOJFED@unable?5to?5open?5a?5temporary?5datab@ DB 'unable to o'
	DB	'pen a temporary database file for storing temporary tables', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3OpenTempDatabase
_TEXT	SEGMENT
$T132669 = -4						; size = 4
_pParse$ = 8						; size = 4
_sqlite3OpenTempDatabase PROC				; COMDAT
; Line 46317
	push	ecx
; Line 46318
	mov	ecx, DWORD PTR _pParse$[esp]
	push	ebp
	push	esi
	mov	esi, DWORD PTR [ecx]
; Line 46319
	mov	eax, DWORD PTR [esi+4]
	cmp	DWORD PTR [eax+28], 0
	push	edi
	lea	edi, DWORD PTR [eax+28]
	jne	$LN1@sqlite3Ope@5
	cmp	BYTE PTR [ecx+128], 0
	jne	$LN1@sqlite3Ope@5
; Line 46321
	xor	ecx, ecx
	xor	eax, eax
	test	DWORD PTR [esi+8], 4096			; 00001000H
	je	SHORT $LN53@sqlite3Ope@5
	lea	eax, DWORD PTR [ecx+2]
$LN53@sqlite3Ope@5:
	cmp	BYTE PTR [esi+21], 2
	jne	SHORT $LN8@sqlite3Ope@5
	mov	ecx, OFFSET ??_C@_08CADOGOJM@?3memory?3?$AA@
$LN8@sqlite3Ope@5:
	push	eax
	push	edi
	push	esi
	push	ecx
	call	_sqlite3BtreeOpen
	mov	ebp, eax
	add	esp, 16					; 00000010H
	test	ebp, ebp
	jne	SHORT $LN57@sqlite3Ope@5
	mov	ecx, DWORD PTR [edi]
	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [esi+276]
	mov	DWORD PTR [ecx+44], eax
	mov	DWORD PTR [edx+108], eax
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
; Line 46328
	xor	eax, eax
	mov	DWORD PTR [edx+68], 2000		; 000007d0H
	cmp	BYTE PTR [esi+20], al
	sete	al
	test	eax, DWORD PTR [esi+8]
	je	$LN1@sqlite3Ope@5
; Line 46329
	mov	ecx, DWORD PTR [esi+4]
	mov	ebp, DWORD PTR [ecx+28]
	mov	esi, DWORD PTR [ebp+4]
	xor	edi, edi
	cmp	BYTE PTR [ebp+8], 2
	mov	DWORD PTR $T132669[esp+16], ebp
	je	$LN1@sqlite3Ope@5
	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LN40@sqlite3Ope@5
	lea	esi, DWORD PTR [edi+8]
	jmp	$LN54@sqlite3Ope@5
$LN57@sqlite3Ope@5:
; Line 46324
	mov	edi, DWORD PTR _pParse$[esp+12]
	push	OFFSET ??_C@_0EG@GIEOJFED@unable?5to?5open?5a?5temporary?5datab@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 46325
	mov	DWORD PTR [edi+4], ebp
	pop	edi
	pop	esi
; Line 46326
	mov	eax, 1
	pop	ebp
; Line 46340
	pop	ecx
	ret	0
; Line 46329
$LN40@sqlite3Ope@5:
	cmp	BYTE PTR [esi+48], 2
	jne	SHORT $LL38@sqlite3Ope@5
	mov	esi, 5
	jmp	$LN54@sqlite3Ope@5
	npad	5
$LL38@sqlite3Ope@5:
	cmp	DWORD PTR [esi+8], 0
	jne	SHORT $LN35@sqlite3Ope@5
	mov	edi, esi
	call	_lockBtree
	mov	edi, eax
$LN35@sqlite3Ope@5:
	test	edi, edi
	jne	SHORT $LN30@sqlite3Ope@5
	cmp	BYTE PTR [esi+13], 0
	je	SHORT $LN33@sqlite3Ope@5
	mov	edi, 8
$LN30@sqlite3Ope@5:
	call	_unlockBtreeIfUnused
$LN37@sqlite3Ope@5:
	cmp	edi, 5
	jne	SHORT $LN27@sqlite3Ope@5
	cmp	BYTE PTR [esi+48], 0
	jne	SHORT $LN60@sqlite3Ope@5
	mov	ebp, DWORD PTR [esi+44]
	test	ebp, ebp
	je	SHORT $LN60@sqlite3Ope@5
	mov	ecx, DWORD PTR [ebp]
	test	ecx, ecx
	je	SHORT $LN60@sqlite3Ope@5
	mov	eax, DWORD PTR [ebp+8]
	test	eax, eax
	jl	SHORT $LN60@sqlite3Ope@5
	push	eax
	mov	eax, DWORD PTR [ebp+4]
	push	eax
	call	ecx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN58@sqlite3Ope@5
	add	DWORD PTR [ebp+8], 1
	mov	ebp, DWORD PTR $T132669[esp+16]
	jmp	SHORT $LL38@sqlite3Ope@5
$LN33@sqlite3Ope@5:
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [edx+72]
	push	0
	call	_sqlite3PagerBegin
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN30@sqlite3Ope@5
	push	esi
	call	_newDatabase
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN30@sqlite3Ope@5
	mov	BYTE PTR [esi+12], al
	jmp	SHORT $LN37@sqlite3Ope@5
$LN58@sqlite3Ope@5:
	mov	DWORD PTR [ebp+8], -1
	jmp	SHORT $LN60@sqlite3Ope@5
$LN27@sqlite3Ope@5:
	test	edi, edi
	jne	SHORT $LN60@sqlite3Ope@5
	cmp	BYTE PTR [ebp+8], 0
	jne	SHORT $LN59@sqlite3Ope@5
	add	DWORD PTR [esi+56], 1
$LN59@sqlite3Ope@5:
	mov	BYTE PTR [ebp+8], 2
	cmp	BYTE PTR [esi+48], 2
	jae	SHORT $LN60@sqlite3Ope@5
	mov	BYTE PTR [esi+48], 2
$LN60@sqlite3Ope@5:
; Line 46330
	test	edi, edi
	mov	esi, edi
	je	SHORT $LN1@sqlite3Ope@5
$LN54@sqlite3Ope@5:
; Line 46332
	mov	edi, DWORD PTR _pParse$[esp+12]
	push	OFFSET ??_C@_0DK@GONLDKLN@unable?5to?5get?5a?5write?5lock?5on?5th@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 46333
	mov	DWORD PTR [edi+4], esi
	pop	edi
	pop	esi
; Line 46334
	mov	eax, 1
	pop	ebp
; Line 46340
	pop	ecx
	ret	0
$LN1@sqlite3Ope@5:
	pop	edi
	pop	esi
; Line 46339
	xor	eax, eax
	pop	ebp
; Line 46340
	pop	ecx
	ret	0
_sqlite3OpenTempDatabase ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3CodeVerifySchema
_TEXT	SEGMENT
_sqlite3CodeVerifySchema PROC				; COMDAT
; _pParse$ = esi
; _iDb$ = ebx
; Line 46369
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	push	edi
	jne	SHORT $LN11@sqlite3Cod@2
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
; Line 46370
	test	eax, eax
	mov	DWORD PTR [esi+12], eax
	je	SHORT $LN1@sqlite3Cod@2
$LN11@sqlite3Cod@2:
; Line 46372
	cmp	DWORD PTR [esi+52], 0
	mov	edi, DWORD PTR [esi]
	jne	SHORT $LN4@sqlite3Cod@2
; Line 46373
	push	0
	push	0
	push	95					; 0000005fH
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	add	eax, 1
	mov	DWORD PTR [esi+52], eax
$LN4@sqlite3Cod@2:
; Line 46375
	test	ebx, ebx
	jl	SHORT $LN1@sqlite3Cod@2
; Line 46380
	mov	eax, DWORD PTR [esi+48]
	mov	edx, 1
	mov	ecx, ebx
	shl	edx, cl
	test	eax, edx
	jne	SHORT $LN1@sqlite3Cod@2
; Line 46381
	or	eax, edx
; Line 46383
	cmp	ebx, 1
	mov	DWORD PTR [esi+48], eax
	mov	ecx, DWORD PTR [edi+4]
	lea	eax, DWORD PTR [ebx+ebx*2]
	mov	edx, DWORD PTR [ecx+eax*8+20]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [esi+ebx*4+56], eax
	jne	SHORT $LN1@sqlite3Cod@2
; Line 46384
	push	esi
	call	_sqlite3OpenTempDatabase
	add	esp, 4
$LN1@sqlite3Cod@2:
	pop	edi
; Line 46388
	ret	0
_sqlite3CodeVerifySchema ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BeginWriteOperation
_TEXT	SEGMENT
_setStatement$ = 8					; size = 4
_sqlite3BeginWriteOperation PROC			; COMDAT
; _pParse$ = ecx
; _iDb$ = eax
; Line 46408
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _setStatement$[esp+4]
	push	esi
	push	edi
	mov	ebx, eax
	mov	esi, ecx
	npad	4
$LL10@sqlite3Beg@2:
; Line 46409
	mov	edi, DWORD PTR [esi+12]
	test	edi, edi
	jne	SHORT $LN13@sqlite3Beg@2
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	edi, eax
; Line 46410
	test	edi, edi
	mov	DWORD PTR [esi+12], eax
	je	SHORT $LN12@sqlite3Beg@2
$LN13@sqlite3Beg@2:
; Line 46411
	call	_sqlite3CodeVerifySchema
; Line 46412
	mov	eax, 1
	mov	ecx, ebx
	shl	eax, cl
	or	DWORD PTR [esi+44], eax
; Line 46413
	test	ebp, ebp
	je	SHORT $LN3@sqlite3Beg@2
	cmp	BYTE PTR [esi+19], 0
	jne	SHORT $LN3@sqlite3Beg@2
; Line 46414
	push	0
	push	ebx
	push	40					; 00000028H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN3@sqlite3Beg@2:
; Line 46416
	cmp	ebx, 1
	je	SHORT $LN12@sqlite3Beg@2
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN12@sqlite3Beg@2
; Line 46417
	mov	ebx, 1
	jmp	SHORT $LL10@sqlite3Beg@2
$LN12@sqlite3Beg@2:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 46419
	ret	0
_sqlite3BeginWriteOperation ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3GenerateIndexKey
_TEXT	SEGMENT
_j$ = -8						; size = 4
_pTab$ = -4						; size = 4
$T132741 = 8						; size = 4
_pIdx$ = 8						; size = 4
_iCur$ = 12						; size = 4
_sqlite3GenerateIndexKey PROC				; COMDAT
; _v$ = esi
; Line 47673
	sub	esp, 8
; Line 47677
	mov	ecx, DWORD PTR _iCur$[esp+4]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pIdx$[esp+12]
	mov	eax, DWORD PTR [ebp+16]
	push	edi
	xor	ebx, ebx
	push	ebx
	push	ecx
	mov	DWORD PTR _pTab$[esp+28], eax
	push	37					; 00000025H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 47678
	xor	eax, eax
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [ebp+4], ebx
	mov	DWORD PTR _j$[esp+20], eax
	jle	$LN3@sqlite3Gen
$LL5@sqlite3Gen:
; Line 47679
	mov	edx, DWORD PTR [ebp+8]
	mov	ebp, DWORD PTR [edx+eax*4]
; Line 47680
	mov	eax, DWORD PTR _pTab$[esp+20]
	cmp	ebp, DWORD PTR [eax+12]
; Line 47681
	mov	edi, DWORD PTR [esi+12]
	jne	SHORT $LN2@sqlite3Gen
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN8@sqlite3Gen
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN28@sqlite3Gen
	cmp	DWORD PTR _inMutex, 0
	jg	$LN31@sqlite3Gen
$LN28@sqlite3Gen:
	xor	ebx, ebx
$LN8@sqlite3Gen:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _j$[esp+20]
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
; Line 47682
	jmp	SHORT $LN4@sqlite3Gen
$LN2@sqlite3Gen:
; Line 47683
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN14@sqlite3Gen
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN29@sqlite3Gen
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN30@sqlite3Gen
$LN29@sqlite3Gen:
	xor	ebx, ebx
$LN14@sqlite3Gen:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ecx, DWORD PTR _iCur$[esp+16]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+4], ecx
	mov	BYTE PTR [eax], 3
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
; Line 47684
	mov	eax, DWORD PTR _pTab$[esp+20]
	mov	ecx, ebp
	mov	edx, esi
	mov	BYTE PTR [esi+564], bl
	call	_sqlite3ColumnDefault
	jmp	SHORT $LN4@sqlite3Gen
$LN30@sqlite3Gen:
	mov	eax, DWORD PTR _pTab$[esp+20]
	mov	ecx, ebp
	mov	edx, esi
	xor	ebx, ebx
	call	_sqlite3ColumnDefault
	jmp	SHORT $LN4@sqlite3Gen
$LN31@sqlite3Gen:
	xor	ebx, ebx
$LN4@sqlite3Gen:
; Line 47678
	mov	eax, DWORD PTR _j$[esp+20]
	mov	edx, DWORD PTR _pIdx$[esp+16]
	add	eax, 1
	cmp	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _j$[esp+20], eax
	mov	ebp, edx
	jl	$LL5@sqlite3Gen
$LN3@sqlite3Gen:
; Line 47687
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR $T132741[esp+16], eax
	jg	SHORT $LN20@sqlite3Gen
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN32@sqlite3Gen
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN22@sqlite3Gen
$LN32@sqlite3Gen:
	xor	ebx, ebx
$LN20@sqlite3Gen:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR $T132741[esp+16]
	mov	BYTE PTR [eax], 55			; 00000037H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
$LN22@sqlite3Gen:
	pop	edi
; Line 47688
	mov	eax, ebp
	pop	ebp
	mov	ecx, esi
	pop	ebx
; Line 47689
	add	esp, 8
; Line 47688
	jmp	_sqlite3IndexAffinityStr
_sqlite3GenerateIndexKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DO@MAKCDDCJ@temporary?5storage?5cannot?5be?5chan@ ; `string'
;	COMDAT ??_C@_0DO@MAKCDDCJ@temporary?5storage?5cannot?5be?5chan@
CONST	SEGMENT
??_C@_0DO@MAKCDDCJ@temporary?5storage?5cannot?5be?5chan@ DB 'temporary st'
	DB	'orage cannot be changed from within a transaction', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _invalidateTempStorage
_TEXT	SEGMENT
_invalidateTempStorage PROC				; COMDAT
; _pParse$ = eax
; Line 51732
	push	ebx
	push	edi
	mov	edi, eax
; Line 51733
	mov	ebx, DWORD PTR [edi]
; Line 51734
	mov	eax, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [eax+28]
	test	eax, eax
	je	SHORT $LN2@invalidate@3
; Line 51735
	cmp	BYTE PTR [ebx+20], 0
	jne	SHORT $LN1@invalidate@3
; Line 51737
	push	OFFSET ??_C@_0DO@MAKCDDCJ@temporary?5storage?5cannot?5be?5chan@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	edi
; Line 51738
	mov	eax, 1
	pop	ebx
; Line 51745
	ret	0
$LN1@invalidate@3:
; Line 51740
	push	eax
	call	_sqlite3BtreeClose
; Line 51741
	mov	ecx, DWORD PTR [ebx+4]
; Line 51742
	push	0
	mov	DWORD PTR [ecx+28], 0
	call	_sqlite3ResetInternalSchema
	add	esp, 8
$LN2@invalidate@3:
	pop	edi
; Line 51744
	xor	eax, eax
	pop	ebx
; Line 51745
	ret	0
_invalidateTempStorage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _changeTempStorage
_TEXT	SEGMENT
_changeTempStorage PROC					; COMDAT
; _pParse$ = edi
; _zStorageType$ = eax
; Line 51754
	push	ebx
	push	esi
	mov	esi, eax
; Line 51755
	mov	al, BYTE PTR [esi]
	cmp	al, 48					; 00000030H
	jl	SHORT $LN10@changeTemp
	cmp	al, 50					; 00000032H
	jg	SHORT $LN10@changeTemp
	movsx	ebx, al
	sub	ebx, 48					; 00000030H
	jmp	SHORT $LN6@changeTemp
$LN10@changeTemp:
	mov	edx, OFFSET ??_C@_04DAMGJPCA@file?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN8@changeTemp
	lea	ebx, DWORD PTR [eax+1]
	jmp	SHORT $LN6@changeTemp
$LN8@changeTemp:
	mov	edx, OFFSET ??_C@_06HLKELJGF@memory?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	mov	ebx, eax
	neg	ebx
	sbb	ebx, ebx
	and	ebx, -2					; fffffffeH
	add	ebx, 2
$LN6@changeTemp:
; Line 51756
	mov	esi, DWORD PTR [edi]
; Line 51757
	movzx	eax, BYTE PTR [esi+21]
	cmp	eax, ebx
	je	SHORT $LN13@changeTemp
; Line 51758
	mov	eax, edi
	call	_invalidateTempStorage
	test	eax, eax
	je	SHORT $LN1@changeTemp
	pop	esi
; Line 51759
	mov	eax, 1
	pop	ebx
; Line 51763
	ret	0
$LN1@changeTemp:
; Line 51761
	mov	BYTE PTR [esi+21], bl
$LN13@changeTemp:
	pop	esi
; Line 51762
	xor	eax, eax
	pop	ebx
; Line 51763
	ret	0
_changeTempStorage ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _computeLimitRegisters
_TEXT	SEGMENT
_iOffset$ = -4						; size = 4
_iLimit$ = 8						; size = 4
_p$ = 8							; size = 4
_iBreak$ = 12						; size = 4
_computeLimitRegisters PROC				; COMDAT
; _pParse$ = eax
; Line 54953
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _p$[esp+8]
	push	esi
; Line 54954
	xor	esi, esi
; Line 54965
	cmp	DWORD PTR [ebp+40], esi
	push	edi
	mov	ebx, eax
	mov	DWORD PTR _iLimit$[esp+16], esi
	je	SHORT $LN30@computeLim
; Line 54966
	mov	edi, DWORD PTR [ebx+32]
	mov	DWORD PTR [ebp+48], edi
; Line 54968
	mov	esi, DWORD PTR [ebx+12]
	add	DWORD PTR [ebx+32], 2
	test	esi, esi
	mov	DWORD PTR _iLimit$[esp+16], edi
	jne	SHORT $LN34@computeLim
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	edi, DWORD PTR _iLimit$[esp+16]
	mov	esi, eax
; Line 54969
	test	esi, esi
	mov	DWORD PTR [ebx+12], eax
	je	$LN27@computeLim
$LN34@computeLim:
; Line 54970
	mov	eax, DWORD PTR [ebp+40]
	push	eax
	push	ebx
	call	_sqlite3ExprCode
; Line 54971
	push	0
	push	0
	push	35					; 00000023H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54972
	push	1
	push	edi
	push	124					; 0000007cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54974
	mov	ecx, DWORD PTR _iBreak$[esp+48]
	push	ecx
	push	edi
	push	119					; 00000077H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54975
	push	0
	push	edi
	push	1
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
$LN30@computeLim:
; Line 54977
	cmp	DWORD PTR [ebp+44], 0
	je	$LN31@computeLim
; Line 54978
	mov	edi, DWORD PTR [ebx+32]
	mov	DWORD PTR [ebp+52], edi
; Line 54979
	mov	esi, DWORD PTR [ebx+12]
	add	DWORD PTR [ebx+32], 1
	test	esi, esi
	mov	DWORD PTR _iOffset$[esp+20], edi
	jne	SHORT $LN36@computeLim
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	edi, DWORD PTR _iOffset$[esp+20]
	mov	esi, eax
; Line 54980
	test	esi, esi
	mov	DWORD PTR [ebx+12], eax
	je	$LN27@computeLim
$LN36@computeLim:
; Line 54981
	mov	edx, DWORD PTR [ebp+44]
	push	edx
	push	ebx
	call	_sqlite3ExprCode
; Line 54982
	push	0
	push	0
	push	35					; 00000023H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54983
	xor	eax, eax
	cmp	DWORD PTR [ebp+40], eax
	sete	al
	push	eax
	push	edi
	push	124					; 0000007cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54985
	push	0
	push	edi
	push	5
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54986
	push	0
	mov	edi, eax
	push	1
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54987
	push	0
	push	0
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 68					; 00000044H
; Line 54988
	test	edi, edi
	jl	SHORT $LN17@computeLim
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, edi
	jle	SHORT $LN17@computeLim
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN17@computeLim
	lea	edx, DWORD PTR [edi+edi*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
$LN17@computeLim:
; Line 54989
	cmp	DWORD PTR [ebp+40], 0
	je	$LN27@computeLim
; Line 54990
	push	0
	push	0
	push	78					; 0000004eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN31@computeLim:
; Line 54993
	cmp	DWORD PTR [ebp+40], 0
	je	$LN27@computeLim
; Line 54994
	mov	eax, DWORD PTR _iLimit$[esp+16]
	push	0
	push	eax
	push	5
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54995
	push	0
	mov	edi, eax
	push	1
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54996
	mov	ebx, DWORD PTR _iLimit$[esp+40]
	add	ebx, 1
	push	ebx
	push	-1
	push	48					; 00000030H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 54997
	push	0
	push	0
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 48					; 00000030H
; Line 54998
	test	esi, esi
	mov	ebp, eax
	je	SHORT $LN22@computeLim
	test	edi, edi
	jl	SHORT $LN22@computeLim
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, edi
	jle	SHORT $LN22@computeLim
	mov	eax, DWORD PTR [esi+20]
	test	eax, eax
	je	SHORT $LN22@computeLim
	lea	edx, DWORD PTR [edi+edi*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
$LN22@computeLim:
; Line 54999
	push	1
	push	ebx
	push	124					; 0000007cH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 55001
	test	esi, esi
	je	SHORT $LN27@computeLim
	test	ebp, ebp
	jl	SHORT $LN27@computeLim
	mov	eax, DWORD PTR [esi+12]
	cmp	eax, ebp
	jle	SHORT $LN27@computeLim
	mov	esi, DWORD PTR [esi+20]
	test	esi, esi
	je	SHORT $LN27@computeLim
	lea	ecx, DWORD PTR [ebp+ebp*4]
	mov	DWORD PTR [esi+ecx*4+8], eax
$LN27@computeLim:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 55003
	pop	ecx
	ret	0
_computeLimitRegisters ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _simpleMinMaxQuery
_TEXT	SEGMENT
_pIdx$ = -56						; size = 4
_seekOp$ = -52						; size = 4
_base$ = -48						; size = 4
_pSrc$ = -44						; size = 4
_pKey$99364 = -40					; size = 4
_pTab$ = -40						; size = 4
_brk$ = -36						; size = 4
_pExpr$ = -32						; size = 4
_eListItem$ = -28					; size = 12
_eList$ = -16						; size = 16
_pParse$ = 8						; size = 4
_p$ = 12						; size = 4
_eDest$ = 16						; size = 4
_iParm$ = 20						; size = 4
_simpleMinMaxQuery PROC					; COMDAT
; Line 55844
	mov	eax, DWORD PTR _p$[esp-4]
	sub	esp, 56					; 00000038H
	cmp	DWORD PTR [eax+20], 0
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+56]
	jne	$LN27@simpleMinM
	cmp	DWORD PTR [eax+24], 0
	jne	$LN27@simpleMinM
	cmp	DWORD PTR [eax+16], 0
	jne	$LN27@simpleMinM
	push	ebx
; Line 55845
	mov	ebx, DWORD PTR [eax+12]
; Line 55846
	cmp	WORD PTR [ebx], 1
	mov	DWORD PTR _pSrc$[esp+64], ebx
	jne	SHORT $LN40@simpleMinM
; Line 55847
	mov	eax, DWORD PTR [eax]
; Line 55848
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN40@simpleMinM
; Line 55849
	mov	eax, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax]
; Line 55850
	cmp	BYTE PTR [eax], 150			; 00000096H
	je	SHORT $LN24@simpleMinM
$LN40@simpleMinM:
	pop	ebx
	xor	eax, eax
	pop	ebp
; Line 55953
	add	esp, 56					; 00000038H
	ret	0
$LN24@simpleMinM:
	push	edi
; Line 55851
	mov	edi, DWORD PTR [eax+16]
; Line 55852
	test	edi, edi
	je	$LN22@simpleMinM
	cmp	DWORD PTR [edi], 1
	jne	$LN22@simpleMinM
; Line 55853
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, -2					; fffffffeH
	cmp	ecx, 6
	jne	$LN22@simpleMinM
	push	esi
; Line 55854
	mov	esi, DWORD PTR [eax+20]
	lea	eax, DWORD PTR [ecx-3]
	mov	edx, OFFSET ??_C@_03KLIPLJLL@min?$AA@
	mov	ecx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	SHORT $LN20@simpleMinM
; Line 55855
	mov	DWORD PTR _seekOp$[esp+72], 127		; 0000007fH
	jmp	SHORT $LN17@simpleMinM
$LN20@simpleMinM:
; Line 55856
	mov	eax, 3
	mov	edx, OFFSET ??_C@_03LJAEFNNE@max?$AA@
	mov	ecx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	$LN34@simpleMinM
; Line 55857
	mov	DWORD PTR _seekOp$[esp+72], 52		; 00000034H
$LN17@simpleMinM:
; Line 55861
	mov	edx, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [edx]
; Line 55862
	cmp	BYTE PTR [ecx], 149			; 00000095H
	mov	DWORD PTR _pExpr$[esp+72], ecx
	jne	$LN34@simpleMinM
; Line 55864
	mov	ebx, DWORD PTR [ebx+20]
; Line 55867
	cmp	BYTE PTR [ebx+57], 0
	mov	edi, DWORD PTR [ecx+40]
	mov	DWORD PTR _pTab$[esp+72], ebx
	jne	$LN34@simpleMinM
; Line 55875
	test	edi, edi
	jge	$LN14@simpleMinM
; Line 55876
	mov	DWORD PTR _pIdx$[esp+72], 0
$LN7@simpleMinM:
; Line 55894
	mov	esi, ebp
	call	_sqlite3GetVdbe
	mov	edi, eax
; Line 55895
	test	edi, edi
	je	$LN34@simpleMinM
; Line 55899
	cmp	DWORD PTR _eDest$[esp+68], 8
	jne	SHORT $LN5@simpleMinM
; Line 55900
	mov	ecx, DWORD PTR _iParm$[esp+68]
	push	1
	push	ecx
	push	121					; 00000079H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN5@simpleMinM:
; Line 55908
	mov	esi, DWORD PTR [ebx+76]
	mov	ecx, DWORD PTR [ebp]
	call	_sqlite3SchemaToIndex
	mov	ebx, eax
; Line 55910
	mov	esi, ebp
	call	_sqlite3CodeVerifySchema
; Line 55911
	mov	eax, DWORD PTR _pTab$[esp+72]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+20]
	push	edx
	push	0
	push	eax
	push	ebx
	push	ebp
	call	_sqlite3TableLock
; Line 55912
	mov	ecx, DWORD PTR _pSrc$[esp+92]
	mov	edx, DWORD PTR [ecx+32]
; Line 55913
	mov	eax, edi
	mov	DWORD PTR _base$[esp+92], edx
	call	_sqlite3VdbeMakeLabel
	mov	esi, eax
; Line 55914
	mov	eax, DWORD PTR _p$[esp+88]
	push	esi
	push	eax
	mov	eax, ebp
	mov	DWORD PTR _brk$[esp+100], esi
	call	_computeLimitRegisters
; Line 55915
	mov	ecx, DWORD PTR _pSrc$[esp+100]
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN4@simpleMinM
; Line 55916
	mov	edx, DWORD PTR _base$[esp+72]
	mov	esi, DWORD PTR _pTab$[esp+72]
	push	14					; 0000000eH
	push	ebx
	push	edx
	mov	eax, ebp
	call	_sqlite3OpenTable
	mov	esi, DWORD PTR _brk$[esp+84]
	add	esp, 12					; 0000000cH
$LN4@simpleMinM:
; Line 55918
	mov	eax, DWORD PTR _pIdx$[esp+72]
	test	eax, eax
	jne	SHORT $LN3@simpleMinM
; Line 55919
	mov	ecx, DWORD PTR _seekOp$[esp+72]
	push	eax
	mov	eax, DWORD PTR _base$[esp+76]
	push	eax
	push	ecx
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 55920
	jmp	$LN2@simpleMinM
$LN14@simpleMinM:
; Line 55878
	push	ebp
	call	_sqlite3ExprCollSeq
	mov	esi, eax
	add	esp, 4
; Line 55879
	test	esi, esi
	je	SHORT $LN34@simpleMinM
; Line 55880
	mov	eax, DWORD PTR [ebx+16]
	test	eax, eax
	mov	DWORD PTR _pIdx$[esp+72], eax
	je	SHORT $LN34@simpleMinM
	jmp	SHORT $LN11@simpleMinM
	npad	8
$LL35@simpleMinM:
	mov	eax, DWORD PTR _pIdx$[esp+72]
$LN11@simpleMinM:
; Line 55883
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx], edi
	jne	SHORT $LN10@simpleMinM
	mov	eax, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	call	_sqlite3StrICmp
	test	eax, eax
	je	$LN7@simpleMinM
	mov	eax, DWORD PTR _pIdx$[esp+72]
$LN10@simpleMinM:
; Line 55880
	mov	eax, DWORD PTR [eax+32]
	test	eax, eax
	mov	DWORD PTR _pIdx$[esp+72], eax
	jne	SHORT $LL35@simpleMinM
$LN34@simpleMinM:
	pop	esi
	pop	edi
	pop	ebx
; Line 55887
	xor	eax, eax
	pop	ebp
; Line 55953
	add	esp, 56					; 00000038H
	ret	0
$LN3@simpleMinM:
; Line 55928
	push	eax
	push	ebp
	call	_sqlite3IndexKeyinfo
; Line 55929
	mov	esi, DWORD PTR [ebp+28]
; Line 55931
	push	0
	mov	DWORD PTR _pKey$99364[esp+84], eax
	lea	edx, DWORD PTR [esi+1]
	push	ebx
	push	47					; 0000002fH
	mov	eax, edi
	mov	DWORD PTR [ebp+28], edx
	call	_sqlite3VdbeAddOp
; Line 55933
	mov	eax, DWORD PTR _pKey$99364[esp+92]
	mov	ecx, DWORD PTR _pIdx$[esp+92]
	push	-9					; fffffff7H
	push	eax
	mov	eax, DWORD PTR [ecx+20]
	mov	ecx, esi
	mov	edx, 14					; 0000000eH
	call	_sqlite3VdbeOp3
	add	esp, 28					; 0000001cH
; Line 55934
	cmp	DWORD PTR _seekOp$[esp+72], 127		; 0000007fH
	jne	SHORT $LN36@simpleMinM
; Line 55935
	push	0
	push	0
	push	122					; 0000007aH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 55936
	push	0
	push	1
	push	91					; 0000005bH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 55937
	mov	DWORD PTR _seekOp$[esp+72], 7
$LN36@simpleMinM:
; Line 55939
	mov	edx, DWORD PTR _seekOp$[esp+72]
	push	0
	push	esi
	push	edx
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 55940
	push	0
	push	esi
	push	54					; 00000036H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 55941
	push	0
	push	esi
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 55942
	mov	eax, DWORD PTR _base$[esp+108]
	push	0
	push	eax
	push	128					; 00000080H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR _brk$[esp+120]
	add	esp, 48					; 00000030H
$LN2@simpleMinM:
; Line 55947
	mov	edx, DWORD PTR _pExpr$[esp+72]
	xor	eax, eax
; Line 55948
	push	eax
	push	esi
	push	esi
	mov	DWORD PTR _eListItem$[esp+84], eax
	mov	DWORD PTR _eListItem$[esp+88], eax
	mov	DWORD PTR _eListItem$[esp+92], eax
	mov	eax, DWORD PTR _iParm$[esp+80]
	push	eax
	mov	eax, DWORD PTR _p$[esp+84]
	lea	ecx, DWORD PTR _eListItem$[esp+88]
	mov	DWORD PTR _eList$[esp+100], ecx
	mov	ecx, DWORD PTR _eDest$[esp+84]
	push	ecx
	push	-1
	push	0
	mov	DWORD PTR _eListItem$[esp+100], edx
	push	0
	lea	edx, DWORD PTR _eList$[esp+104]
	push	edx
	push	eax
	push	ebp
	xor	eax, eax
	mov	DWORD PTR _eList$[esp+116], 1
	call	_selectInnerLoop
; Line 55949
	mov	edx, esi
	mov	ecx, edi
	call	_sqlite3VdbeResolveLabel
; Line 55950
	mov	ecx, DWORD PTR _base$[esp+116]
	push	0
	push	ecx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
	pop	esi
	pop	edi
	pop	ebx
; Line 55952
	mov	eax, 1
	pop	ebp
; Line 55953
	add	esp, 56					; 00000038H
	ret	0
$LN22@simpleMinM:
	pop	edi
	pop	ebx
; Line 55852
	xor	eax, eax
	pop	ebp
; Line 55953
	add	esp, 56					; 00000038H
	ret	0
$LN27@simpleMinM:
; Line 55844
	xor	eax, eax
	pop	ebp
; Line 55953
	add	esp, 56					; 00000038H
	ret	0
_simpleMinMaxQuery ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _updateAccumulator
_TEXT	SEGMENT
_pF$ = -24						; size = 4
_i$ = -20						; size = 4
$T133085 = -16						; size = 4
$T133384 = -16						; size = 4
_j$99503 = -16						; size = 4
_nArg$99493 = -12					; size = 4
tv738 = -8						; size = 4
_addrNext$99494 = -8					; size = 4
$T133402 = -4						; size = 4
_pList$99495 = -4					; size = 4
_pParse$ = 8						; size = 4
_pAggInfo$ = 12						; size = 4
_updateAccumulator PROC					; COMDAT
; Line 56186
	sub	esp, 24					; 00000018H
	mov	eax, DWORD PTR _pAggInfo$[esp+20]
; Line 56187
	mov	ecx, DWORD PTR _pParse$[esp+20]
; Line 56193
	mov	edx, DWORD PTR [eax+32]
	push	ebx
	push	ebp
	xor	ebx, ebx
	cmp	DWORD PTR [eax+36], ebx
	push	esi
	mov	esi, DWORD PTR [ecx+12]
	push	edi
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR _i$[esp+40], ebx
	mov	DWORD PTR _pF$[esp+40], edx
	jle	$LN13@updateAccu
	npad	5
$LL15@updateAccu:
; Line 56196
	mov	eax, DWORD PTR _pF$[esp+40]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+16]
; Line 56197
	cmp	eax, ebx
	mov	DWORD PTR _addrNext$99494[esp+40], ebx
	mov	DWORD PTR _pList$99495[esp+40], eax
	je	SHORT $LN12@updateAccu
; Line 56198
	mov	edi, DWORD PTR [eax]
; Line 56199
	cmp	edi, ebx
	mov	ebp, DWORD PTR [eax+12]
	mov	DWORD PTR _nArg$99493[esp+40], edi
	jle	SHORT $LN230@updateAccu
$LL20@updateAccu:
	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR _pParse$[esp+36]
	push	edx
	push	eax
	call	_sqlite3ExprCode
	sub	edi, 1
	add	esp, 8
	add	ebp, 12					; 0000000cH
	cmp	edi, ebx
	jg	SHORT $LL20@updateAccu
; Line 56200
	jmp	SHORT $LN230@updateAccu
$LN12@updateAccu:
; Line 56201
	mov	DWORD PTR _nArg$99493[esp+40], ebx
$LN230@updateAccu:
; Line 56203
	mov	ecx, DWORD PTR _pF$[esp+40]
	cmp	DWORD PTR [ecx+12], ebx
	jl	$LN229@updateAccu
; Line 56204
	mov	ecx, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+28]
	cmp	ecx, eax
	lea	edx, DWORD PTR [ecx+1]
	mov	DWORD PTR tv738[esp+40], ecx
	mov	DWORD PTR [esi+24], edx
	jl	SHORT $LN228@updateAccu
	mov	ebp, DWORD PTR [esi+32]
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [esi+28], eax
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	lea	edi, DWORD PTR [eax*4]
	je	SHORT $LN38@updateAccu
	cmp	DWORD PTR _inMutex, ebx
	jle	SHORT $LN38@updateAccu
	xor	edi, edi
	jmp	SHORT $LN199@updateAccu
$LN38@updateAccu:
	cmp	ebp, ebx
	jne	SHORT $LN37@updateAccu
	call	_sqlite3Malloc
	jmp	SHORT $LN227@updateAccu
$LN37@updateAccu:
	push	edi
	push	ebp
	call	_realloc
	add	esp, 8
	cmp	eax, ebx
	jne	SHORT $LN227@updateAccu
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN235@updateAccu
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN227@updateAccu
$LN235@updateAccu:
	mov	ecx, 1
	add	DWORD PTR _inMutex, ecx
	mov	DWORD PTR _sqlite3_mallocHasFailed, ecx
$LN227@updateAccu:
	mov	edi, eax
	cmp	edi, ebx
	jne	SHORT $LN234@updateAccu
$LN199@updateAccu:
	cmp	ebp, ebx
	je	SHORT $LN234@updateAccu
	push	ebp
	call	_free
	add	esp, 4
$LN234@updateAccu:
	mov	ecx, DWORD PTR tv738[esp+40]
	mov	DWORD PTR [esi+32], edi
$LN228@updateAccu:
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ebx
	je	SHORT $LN231@updateAccu
	mov	DWORD PTR [eax+ecx*4], -1
$LN231@updateAccu:
; Line 56206
	mov	eax, DWORD PTR _pF$[esp+40]
	mov	edi, DWORD PTR [esi+12]
	or	ebp, -1
	sub	ebp, ecx
	cmp	DWORD PTR [esi+16], edi
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _addrNext$99494[esp+40], ebp
	mov	DWORD PTR $T133085[esp+40], ecx
	jg	SHORT $LN236@updateAccu
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN212@updateAccu
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN213@updateAccu
$LN212@updateAccu:
	xor	ebx, ebx
$LN236@updateAccu:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 91			; 0000005bH
	mov	DWORD PTR [eax+4], -1
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN62@updateAccu
$LN213@updateAccu:
	xor	ebx, ebx
$LN62@updateAccu:
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN237@updateAccu
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN214@updateAccu
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN215@updateAccu
$LN214@updateAccu:
	xor	ebx, ebx
$LN237@updateAccu:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR $T133085[esp+40]
	add	edi, 3
	mov	BYTE PTR [eax], 112			; 00000070H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN70@updateAccu
$LN215@updateAccu:
	xor	ebx, ebx
$LN70@updateAccu:
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN238@updateAccu
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN216@updateAccu
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN217@updateAccu
$LN216@updateAccu:
	xor	ebx, ebx
$LN238@updateAccu:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 11			; 0000000bH
	mov	DWORD PTR [eax+4], 2
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN76@updateAccu
$LN217@updateAccu:
	xor	ebx, ebx
$LN76@updateAccu:
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN239@updateAccu
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN218@updateAccu
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN219@updateAccu
$LN218@updateAccu:
	xor	ebx, ebx
$LN239@updateAccu:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN82@updateAccu
$LN219@updateAccu:
	xor	ebx, ebx
$LN82@updateAccu:
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN240@updateAccu
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN220@updateAccu
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN221@updateAccu
$LN220@updateAccu:
	xor	ebx, ebx
$LN240@updateAccu:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR $T133085[esp+40]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 111			; 0000006fH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN229@updateAccu
$LN221@updateAccu:
	xor	ebx, ebx
$LN229@updateAccu:
; Line 56208
	mov	eax, DWORD PTR _pF$[esp+40]
	mov	ecx, DWORD PTR [eax+4]
	cmp	BYTE PTR [ecx+3], bl
	je	$LN115@updateAccu
; Line 56213
	mov	edx, DWORD PTR _pList$99495[esp+40]
	mov	edi, DWORD PTR [edx+12]
	xor	ebp, ebp
	mov	DWORD PTR _j$99503[esp+40], ebx
	npad	5
$LL232@updateAccu:
	mov	eax, DWORD PTR _j$99503[esp+40]
	cmp	eax, DWORD PTR _nArg$99493[esp+40]
	jge	SHORT $LN6@updateAccu
; Line 56214
	mov	ecx, DWORD PTR _pParse$[esp+36]
	push	ecx
	mov	ecx, DWORD PTR [edi]
	call	_sqlite3ExprCollSeq
	add	DWORD PTR _j$99503[esp+44], 1
	mov	ebp, eax
	add	esp, 4
	add	edi, 12					; 0000000cH
	cmp	ebp, ebx
	je	SHORT $LL232@updateAccu
; Line 56216
	jmp	SHORT $LN5@updateAccu
$LN6@updateAccu:
	cmp	ebp, ebx
	jne	SHORT $LN5@updateAccu
; Line 56217
	mov	edx, DWORD PTR _pParse$[esp+36]
	mov	eax, DWORD PTR [edx]
	mov	ebp, DWORD PTR [eax+28]
$LN5@updateAccu:
; Line 56219
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN94@updateAccu
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN223@updateAccu
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN223@updateAccu
	xor	edi, edi
	xor	ebx, ebx
	jmp	SHORT $LN96@updateAccu
$LN223@updateAccu:
	xor	ebx, ebx
$LN94@updateAccu:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 13			; 0000000dH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
$LN96@updateAccu:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	mov	eax, edi
	je	SHORT $LN200@updateAccu
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN117@updateAccu
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN200@updateAccu
$LN117@updateAccu:
	cmp	edi, ebx
	jl	SHORT $LN113@updateAccu
	cmp	edi, DWORD PTR [esi+12]
	jl	SHORT $LN112@updateAccu
$LN113@updateAccu:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN115@updateAccu
$LN112@updateAccu:
	lea	eax, DWORD PTR [eax+eax*4]
	lea	edi, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edi+16]
	call	_freeP3
	cmp	ebp, ebx
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN201@updateAccu
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN115@updateAccu
$LN201@updateAccu:
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [edi+16], -4			; fffffffcH
	jmp	SHORT $LN115@updateAccu
$LN200@updateAccu:
	mov	ecx, ebp
	mov	eax, -4					; fffffffcH
	call	_freeP3
$LN115@updateAccu:
; Line 56221
	mov	eax, DWORD PTR _pF$[esp+40]
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	mov	ecx, DWORD PTR [eax+4]
	mov	ebp, DWORD PTR [eax+8]
	mov	DWORD PTR $T133384[esp+40], ecx
	jg	SHORT $LN233@updateAccu
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN224@updateAccu
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN224@updateAccu
	xor	eax, eax
	xor	ebx, ebx
	jmp	SHORT $LN130@updateAccu
$LN224@updateAccu:
	xor	ebx, ebx
$LN233@updateAccu:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ecx, DWORD PTR _nArg$99493[esp+40]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	eax, edi
$LN130@updateAccu:
	mov	edi, DWORD PTR [esi+20]
	cmp	edi, ebx
	je	SHORT $LN202@updateAccu
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN151@updateAccu
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN202@updateAccu
$LN151@updateAccu:
	cmp	eax, ebx
	jl	SHORT $LN147@updateAccu
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN146@updateAccu
$LN147@updateAccu:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN149@updateAccu
$LN146@updateAccu:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [edi+edx*4+12]
	mov	eax, DWORD PTR [edi+edx*4+16]
	lea	edi, DWORD PTR [edi+edx*4]
	call	_freeP3
	mov	eax, DWORD PTR $T133384[esp+40]
	cmp	eax, ebx
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN203@updateAccu
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN149@updateAccu
$LN203@updateAccu:
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], -5			; fffffffbH
	jmp	SHORT $LN149@updateAccu
$LN202@updateAccu:
	mov	ecx, DWORD PTR $T133384[esp+40]
	mov	eax, -5					; fffffffbH
	call	_freeP3
$LN149@updateAccu:
; Line 56222
	mov	ecx, DWORD PTR _addrNext$99494[esp+40]
	cmp	ecx, ebx
	je	SHORT $LN14@updateAccu
; Line 56223
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ebx
	je	SHORT $LN14@updateAccu
	mov	edx, DWORD PTR [esi+12]
	lea	ecx, DWORD PTR [ecx*4+4]
	sub	eax, ecx
	mov	DWORD PTR [eax], edx
$LN14@updateAccu:
	mov	eax, DWORD PTR _i$[esp+40]
	mov	ecx, DWORD PTR _pAggInfo$[esp+36]
	add	DWORD PTR _pF$[esp+40], 16		; 00000010H
	add	eax, 1
	cmp	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _i$[esp+40], eax
	jl	$LL15@updateAccu
$LN13@updateAccu:
; Line 56226
	mov	eax, DWORD PTR _pAggInfo$[esp+36]
	cmp	DWORD PTR [eax+28], ebx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _i$[esp+40], ebx
	jle	$LN204@updateAccu
	lea	ebp, DWORD PTR [ecx+16]
$LL3@updateAccu:
; Line 56227
	mov	edx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR _pParse$[esp+36]
	push	edx
	push	eax
	call	_sqlite3ExprCode
; Line 56228
	mov	edi, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [ebp]
	add	esp, 8
	cmp	DWORD PTR [esi+16], edi
	mov	DWORD PTR $T133402[esp+40], ecx
	jg	SHORT $LN185@updateAccu
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN225@updateAccu
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN226@updateAccu
$LN225@updateAccu:
	xor	ebx, ebx
$LN185@updateAccu:
	mov	eax, DWORD PTR [esi+20]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR $T133402[esp+40]
	mov	ecx, 1
	add	DWORD PTR [esi+12], ecx
	mov	BYTE PTR [eax], 124			; 0000007cH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN2@updateAccu
$LN226@updateAccu:
	xor	ebx, ebx
$LN2@updateAccu:
; Line 56226
	mov	eax, DWORD PTR _i$[esp+40]
	mov	ecx, DWORD PTR _pAggInfo$[esp+36]
	add	eax, 1
	add	ebp, 24					; 00000018H
	cmp	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _i$[esp+40], eax
	jl	$LL3@updateAccu
	pop	edi
	pop	esi
	pop	ebp
; Line 56230
	mov	BYTE PTR [ecx], bl
	pop	ebx
; Line 56231
	add	esp, 24					; 00000018H
	ret	0
$LN204@updateAccu:
	pop	edi
	pop	esi
	pop	ebp
; Line 56230
	mov	BYTE PTR [eax], bl
	pop	ebx
; Line 56231
	add	esp, 24					; 00000018H
	ret	0
_updateAccumulator ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@JFPIJHCG@type?$DN?8trigger?8?5AND?5name?$DN?8?$CFq?8?$AA@ ; `string'
;	COMDAT ??_C@_0BN@JFPIJHCG@type?$DN?8trigger?8?5AND?5name?$DN?8?$CFq?8?$AA@
CONST	SEGMENT
??_C@_0BN@JFPIJHCG@type?$DN?8trigger?8?5AND?5name?$DN?8?$CFq?8?$AA@ DB 't'
	DB	'ype=''trigger'' AND name=''%q''', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3FinishTrigger
_TEXT	SEGMENT
tv385 = -20						; size = 4
_sFix$ = -16						; size = 16
_pStepList$ = 8						; size = 4
_pAll$ = 12						; size = 4
_sqlite3FinishTrigger PROC				; COMDAT
; _pParse$ = eax
; Line 57324
	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	mov	ebx, eax
; Line 57332
	cmp	DWORD PTR [ebx+24], 0
	mov	ebp, DWORD PTR [ebx+168]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ebx]
	mov	DWORD PTR tv385[esp+36], edi
	mov	DWORD PTR [ebx+168], 0
	jne	$triggerfinish_cleanup$99852
	test	ebp, ebp
	je	$triggerfinish_cleanup$99852
; Line 57333
	mov	edx, DWORD PTR [ebp+28]
	test	edx, edx
	mov	esi, -1000000				; fff0bdc0H
	je	SHORT $LN52@sqlite3Fin@7
	mov	ecx, DWORD PTR [edi]
	xor	esi, esi
	test	ecx, ecx
	jle	SHORT $LN52@sqlite3Fin@7
	mov	eax, DWORD PTR [edi+4]
	add	eax, 20					; 00000014H
	npad	5
$LL15@sqlite3Fin@7:
	cmp	DWORD PTR [eax], edx
	je	SHORT $LN52@sqlite3Fin@7
	add	esi, 1
	add	eax, 24					; 00000018H
	cmp	esi, ecx
	jl	SHORT $LL15@sqlite3Fin@7
$LN52@sqlite3Fin@7:
; Line 57334
	mov	eax, DWORD PTR _pStepList$[esp+32]
; Line 57335
	test	eax, eax
	mov	DWORD PTR [ebp+36], eax
	je	SHORT $LN6@sqlite3Fin@7
	jmp	SHORT $LN7@sqlite3Fin@7
	npad	5
$LL62@sqlite3Fin@7:
	mov	eax, DWORD PTR _pStepList$[esp+32]
$LN7@sqlite3Fin@7:
; Line 57336
	mov	DWORD PTR [eax+8], ebp
; Line 57337
	mov	eax, DWORD PTR [eax+36]
	test	eax, eax
	mov	DWORD PTR _pStepList$[esp+32], eax
	jne	SHORT $LL62@sqlite3Fin@7
$LN6@sqlite3Fin@7:
; Line 57340
	test	esi, esi
	jl	SHORT $LN5@sqlite3Fin@7
	cmp	esi, 1
	je	SHORT $LN5@sqlite3Fin@7
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _sFix$[esp+36], ebx
	mov	edx, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [esi+esi*2]
	mov	eax, DWORD PTR [edx+ecx*8]
	lea	ecx, DWORD PTR [ebp+20]
	mov	DWORD PTR _sFix$[esp+40], eax
	mov	DWORD PTR _sFix$[esp+44], OFFSET ??_C@_07DIDNFGDE@trigger?$AA@
	mov	DWORD PTR _sFix$[esp+48], ecx
	mov	edx, DWORD PTR [ebp+36]
	push	edx
	lea	eax, DWORD PTR _sFix$[esp+40]
	push	eax
	call	_sqlite3FixTriggerStep
	add	esp, 8
	test	eax, eax
	jne	$triggerfinish_cleanup$99852
$LN5@sqlite3Fin@7:
; Line 57347
	cmp	BYTE PTR [edi+68], 0
	jne	$LN65@sqlite3Fin@7
; Line 57364
	mov	edi, DWORD PTR [ebx+12]
	test	edi, edi
	jne	SHORT $LN58@sqlite3Fin@7
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	edi, eax
; Line 57365
	test	edi, edi
	mov	DWORD PTR [ebx+12], eax
	je	$triggerfinish_cleanup$99852
$LN58@sqlite3Fin@7:
; Line 57366
	push	0
	mov	eax, esi
	mov	ecx, ebx
	call	_sqlite3BeginWriteOperation
; Line 57367
	push	esi
	call	_sqlite3OpenMasterTable
; Line 57368
	push	OFFSET ?insertTrig@?4??sqlite3FinishTrigger@@9@9
	push	10					; 0000000aH
	push	edi
	call	_sqlite3VdbeAddOpList
; Line 57369
	mov	ecx, DWORD PTR [ebp]
	mov	ebx, eax
	push	ecx
	lea	eax, DWORD PTR [ebx+2]
	xor	edx, edx
	mov	ecx, edi
	call	_sqlite3VdbeChangeP3
; Line 57370
	mov	edx, DWORD PTR [ebp+4]
	push	edx
	lea	eax, DWORD PTR [ebx+3]
	xor	edx, edx
	mov	ecx, edi
	call	_sqlite3VdbeChangeP3
; Line 57371
	mov	eax, DWORD PTR _pAll$[esp+60]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	push	eax
	shr	edx, 1
	lea	eax, DWORD PTR [ebx+6]
	mov	ecx, edi
	call	_sqlite3VdbeChangeP3
; Line 57372
	mov	ecx, DWORD PTR tv385[esp+68]
	call	_sqlite3ChangeCookie
; Line 57373
	push	0
	push	0
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 57375
	mov	ecx, DWORD PTR [ebp]
	push	ecx
	push	OFFSET ??_C@_0BN@JFPIJHCG@type?$DN?8trigger?8?5AND?5name?$DN?8?$CFq?8?$AA@
	call	_sqlite3MPrintf
	push	0
	mov	ebx, eax
	push	esi
	push	28					; 0000001cH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [edi+20]
	add	esp, 64					; 00000040H
	test	ecx, ecx
	je	SHORT $LN56@sqlite3Fin@7
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN45@sqlite3Fin@7
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN56@sqlite3Fin@7
$LN45@sqlite3Fin@7:
	test	eax, eax
	jl	SHORT $LN41@sqlite3Fin@7
	cmp	eax, DWORD PTR [edi+12]
	jl	SHORT $LN40@sqlite3Fin@7
$LN41@sqlite3Fin@7:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, 1
	js	SHORT $LN61@sqlite3Fin@7
$LN40@sqlite3Fin@7:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	xor	eax, eax
	cmp	ebx, eax
	mov	DWORD PTR [edi+12], eax
	jne	SHORT $LN57@sqlite3Fin@7
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	jmp	SHORT $LN61@sqlite3Fin@7
$LN57@sqlite3Fin@7:
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], -1
	jmp	SHORT $LN61@sqlite3Fin@7
$LN56@sqlite3Fin@7:
	mov	ecx, ebx
	or	eax, -1
	call	_freeP3
$LN61@sqlite3Fin@7:
	mov	edi, DWORD PTR tv385[esp+36]
; Line 57378
	cmp	BYTE PTR [edi+68], 0
	je	SHORT $triggerfinish_cleanup$99852
$LN65@sqlite3Fin@7:
; Line 57383
	mov	edx, DWORD PTR [ebp]
	mov	eax, edx
	lea	ebx, DWORD PTR [eax+1]
	npad	5
$LL59@sqlite3Fin@7:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL59@sqlite3Fin@7
	mov	ecx, DWORD PTR [edi+4]
	sub	eax, ebx
	push	ebp
	push	eax
	lea	eax, DWORD PTR [esi+esi*2]
	mov	eax, DWORD PTR [ecx+eax*8+20]
	push	edx
	add	eax, 60					; 0000003cH
	call	_sqlite3HashInsert
	add	esp, 12					; 0000000cH
; Line 57384
	test	eax, eax
	jne	SHORT $triggerfinish_cleanup$99852
; Line 57388
	mov	ebx, DWORD PTR [ebp+4]
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL60@sqlite3Fin@7:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL60@sqlite3Fin@7
; Line 57389
	mov	esi, DWORD PTR [ebp+32]
	sub	eax, edx
	lea	edi, DWORD PTR [eax+1]
	add	esi, 4
	call	_sqlite3HashFind
; Line 57391
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR [ebp+40], edx
; Line 57392
	mov	DWORD PTR [eax+32], ebp
; Line 57393
	xor	ebp, ebp
$triggerfinish_cleanup$99852:
; Line 57397
	mov	esi, ebp
	call	_sqlite3DeleteTrigger
; Line 57399
	mov	eax, DWORD PTR _pStepList$[esp+32]
	push	eax
	call	_sqlite3DeleteTriggerStep
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 57400
	add	esp, 20					; 00000014H
	ret	0
_sqlite3FinishTrigger ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3DropTriggerPtr
_TEXT	SEGMENT
_pOp$133590 = -12					; size = 4
_zTab$99984 = -12					; size = 4
tv417 = -8						; size = 4
tv428 = -4						; size = 4
_pTrigger$ = 8						; size = 4
_sqlite3DropTriggerPtr PROC				; COMDAT
; _pParse$ = eax
; Line 57616
	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 57622
	mov	edi, DWORD PTR _pTrigger$[esp+24]
	mov	edx, DWORD PTR [edi+28]
	test	edx, edx
	mov	ebx, eax
	mov	esi, DWORD PTR [ebx]
	mov	DWORD PTR tv417[esp+28], esi
	mov	ebp, -1000000				; fff0bdc0H
	je	SHORT $LN68@sqlite3Dro
	mov	ecx, DWORD PTR [esi]
	xor	ebp, ebp
	test	ecx, ecx
	jle	SHORT $LN68@sqlite3Dro
	mov	eax, DWORD PTR [esi+4]
	add	eax, 20					; 00000014H
	npad	3
$LL12@sqlite3Dro:
	cmp	DWORD PTR [eax], edx
	je	SHORT $LN68@sqlite3Dro
	add	ebp, 1
	add	eax, 24					; 00000018H
	cmp	ebp, ecx
	jl	SHORT $LL12@sqlite3Dro
$LN68@sqlite3Dro:
; Line 57624
	mov	edx, edi
	call	_tableOfTrigger
; Line 57630
	mov	esi, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [ebp+ebp*2]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
; Line 57631
	cmp	ebp, 1
	mov	esi, DWORD PTR [ecx+esi]
	mov	edx, 16					; 00000010H
	mov	DWORD PTR tv428[esp+28], ecx
	jne	$LN7@sqlite3Dro
	mov	DWORD PTR _zTab$99984[esp+28], OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
; Line 57632
	lea	edx, DWORD PTR [ebp+13]
$LN4@sqlite3Dro:
; Line 57634
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edi]
	push	esi
	push	eax
	push	ecx
	push	edx
	mov	eax, ebx
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN60@sqlite3Dro
	mov	edx, DWORD PTR _zTab$99984[esp+28]
	push	esi
	push	eax
	push	edx
	push	9
	mov	eax, ebx
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN60@sqlite3Dro
; Line 57643
	mov	esi, DWORD PTR [ebx+12]
	test	esi, esi
	jne	SHORT $LN75@sqlite3Dro
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	esi, eax
	test	esi, esi
	mov	DWORD PTR [ebx+12], eax
	je	$LN60@sqlite3Dro
$LN75@sqlite3Dro:
; Line 57657
	push	0
	mov	eax, ebp
	mov	ecx, ebx
	call	_sqlite3BeginWriteOperation
; Line 57658
	push	ebp
	call	_sqlite3OpenMasterTable
; Line 57659
	push	OFFSET ?dropTrigger@?4??sqlite3DropTriggerPtr@@9@9
	push	9
	push	esi
	call	_sqlite3VdbeAddOpList
; Line 57660
	mov	ecx, DWORD PTR _pTrigger$[esp+44]
	mov	ebx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 20					; 00000014H
	add	eax, 1
	test	ecx, ecx
	je	SHORT $LN71@sqlite3Dro
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN36@sqlite3Dro
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN71@sqlite3Dro
$LN36@sqlite3Dro:
	test	eax, eax
	jl	SHORT $LN32@sqlite3Dro
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN78@sqlite3Dro
$LN32@sqlite3Dro:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN34@sqlite3Dro
$LN78@sqlite3Dro:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edi+12]
	mov	DWORD PTR _pOp$133590[esp+28], edi
	call	_freeP3
	xor	eax, eax
	cmp	ebx, eax
	mov	DWORD PTR [edi+12], eax
	jne	SHORT $LN72@sqlite3Dro
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	jmp	SHORT $LN34@sqlite3Dro
$LN7@sqlite3Dro:
; Line 57631
	mov	DWORD PTR _zTab$99984[esp+28], OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
; Line 57632
	jmp	$LN4@sqlite3Dro
$LN72@sqlite3Dro:
; Line 57660
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL76@sqlite3Dro:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL76@sqlite3Dro
	sub	eax, edx
	mov	edi, eax
	call	_sqlite3StrNDup
	mov	ecx, DWORD PTR _pOp$133590[esp+28]
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], -1
	jmp	SHORT $LN34@sqlite3Dro
$LN71@sqlite3Dro:
	mov	ecx, ebx
	xor	eax, eax
	call	_freeP3
$LN34@sqlite3Dro:
; Line 57661
	mov	eax, DWORD PTR tv417[esp+28]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR tv428[esp+28]
	mov	eax, DWORD PTR [edx+ecx+20]
	mov	ecx, DWORD PTR [eax]
	xor	edi, edi
	push	edi
	add	ecx, 1
	push	ecx
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	push	edi
	push	ebp
	push	4
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 57662
	push	edi
	push	edi
	push	30					; 0000001eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 57663
	mov	edx, DWORD PTR _pTrigger$[esp+60]
	mov	ebx, DWORD PTR [edx]
	push	edi
	push	ebp
	push	62					; 0000003eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [esi+20]
	add	esp, 48					; 00000030H
	cmp	ecx, edi
	je	SHORT $LN73@sqlite3Dro
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN62@sqlite3Dro
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN73@sqlite3Dro
$LN62@sqlite3Dro:
	cmp	eax, edi
	jl	SHORT $LN58@sqlite3Dro
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN57@sqlite3Dro
$LN58@sqlite3Dro:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN60@sqlite3Dro
$LN57@sqlite3Dro:
	lea	eax, DWORD PTR [eax+eax*4]
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	cmp	ebx, edi
	mov	DWORD PTR [esi+12], edi
	jne	SHORT $LN74@sqlite3Dro
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
$LN60@sqlite3Dro:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 57665
	add	esp, 12					; 0000000cH
	ret	0
$LN74@sqlite3Dro:
; Line 57663
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL77@sqlite3Dro:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL77@sqlite3Dro
	sub	eax, edx
	mov	edi, eax
	call	_sqlite3StrNDup
	pop	edi
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -1
	pop	esi
	pop	ebp
	pop	ebx
; Line 57665
	add	esp, 12					; 0000000cH
	ret	0
$LN73@sqlite3Dro:
	pop	edi
	pop	esi
	pop	ebp
; Line 57663
	mov	ecx, ebx
	xor	eax, eax
	pop	ebx
; Line 57665
	add	esp, 12					; 0000000cH
; Line 57663
	jmp	_freeP3
_sqlite3DropTriggerPtr ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _exprAnalyzeAll
_TEXT	SEGMENT
_exprAnalyzeAll PROC					; COMDAT
; _pTabList$ = ebx
; _pWC$ = edi
; Line 60042
	push	esi
; Line 60044
	mov	esi, DWORD PTR [edi+8]
	sub	esi, 1
	js	SHORT $LN1@exprAnalyz@2
	npad	7
$LL3@exprAnalyz@2:
; Line 60045
	push	esi
	push	edi
	push	ebx
	call	_exprAnalyze
	add	esp, 12					; 0000000cH
	sub	esi, 1
	jns	SHORT $LL3@exprAnalyz@2
$LN1@exprAnalyz@2:
	pop	esi
; Line 60047
	ret	0
_exprAnalyzeAll ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _codeEqualityTerm
_TEXT	SEGMENT
_pTerm$ = 8						; size = 4
_codeEqualityTerm PROC					; COMDAT
; _pParse$ = ecx
; _pLevel$ = eax
; Line 61261
	push	ebx
	push	esi
	mov	esi, eax
; Line 61262
	mov	eax, DWORD PTR _pTerm$[esp+4]
	mov	ebx, DWORD PTR [eax]
; Line 61264
	mov	al, BYTE PTR [ebx]
	cmp	al, 68					; 00000044H
	push	edi
	mov	edi, DWORD PTR [ecx+12]
	jne	SHORT $LN7@codeEquali
; Line 61265
	mov	edx, DWORD PTR [ebx+12]
	push	edx
	push	ecx
	call	_sqlite3ExprCode
; Line 61295
	mov	eax, DWORD PTR _pTerm$[esp+16]
	add	esp, 8
	call	_disableTerm
	pop	edi
	pop	esi
	pop	ebx
; Line 61296
	ret	0
$LN7@codeEquali:
; Line 61266
	cmp	al, 65					; 00000041H
	jne	SHORT $LN5@codeEquali
; Line 61267
	push	0
	push	0
	push	122					; 0000007aH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 61295
	mov	eax, DWORD PTR _pTerm$[esp+20]
	add	esp, 12					; 0000000cH
	call	_disableTerm
	pop	edi
	pop	esi
	pop	ebx
; Line 61296
	ret	0
$LN5@codeEquali:
	push	ebp
; Line 61274
	push	ebx
	push	ecx
	call	_sqlite3CodeSubselect
; Line 61275
	mov	ebp, DWORD PTR [ebx+36]
; Line 61276
	push	0
	push	ebp
	push	127					; 0000007fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 20					; 00000014H
; Line 61278
	cmp	DWORD PTR [esi+60], 0
	jne	SHORT $LN3@codeEquali
; Line 61279
	mov	eax, edi
	call	_sqlite3VdbeMakeLabel
	mov	DWORD PTR [esi+32], eax
$LN3@codeEquali:
; Line 61281
	add	DWORD PTR [esi+60], 1
	mov	eax, DWORD PTR [esi+60]
; Line 61283
	mov	ebx, DWORD PTR [esi+64]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	call	_sqlite3ReallocOrFree
; Line 61285
	test	eax, eax
	mov	DWORD PTR [esi+64], eax
	je	SHORT $LN2@codeEquali
; Line 61286
	mov	ecx, DWORD PTR [esi+60]
; Line 61288
	push	0
	lea	ebx, DWORD PTR [eax+ecx*8-8]
	push	ebp
	push	3
	mov	eax, edi
	mov	DWORD PTR [ebx], ebp
	call	_sqlite3VdbeAddOp
; Line 61289
	push	0
	mov	DWORD PTR [ebx+4], eax
	push	-1
	push	65					; 00000041H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 61295
	mov	eax, DWORD PTR _pTerm$[esp+36]
	add	esp, 24					; 00000018H
	pop	ebp
	call	_disableTerm
	pop	edi
	pop	esi
	pop	ebx
; Line 61296
	ret	0
$LN2@codeEquali:
; Line 61295
	mov	eax, DWORD PTR _pTerm$[esp+12]
	pop	ebp
	mov	DWORD PTR [esi+60], 0
	call	_disableTerm
	pop	edi
	pop	esi
	pop	ebx
; Line 61296
	ret	0
_codeEqualityTerm ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _codeAllEqualityTerms
_TEXT	SEGMENT
_termsInMem$ = -20					; size = 4
tv365 = -16						; size = 4
_nEq$ = -12						; size = 4
_pIdx$ = -8						; size = 4
$T133725 = -4						; size = 4
_iCur$ = -4						; size = 4
_j$ = 8							; size = 4
_pParse$ = 8						; size = 4
_pWC$ = 12						; size = 4
_notReady$ = 16						; size = 8
_codeAllEqualityTerms PROC				; COMDAT
; _pLevel$ = esi
; Line 61326
	sub	esp, 20					; 00000014H
; Line 61331
	mov	eax, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR [esi+16]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+24]
	mov	DWORD PTR _iCur$[esp+28], eax
; Line 61340
	mov	eax, DWORD PTR [ebp+32]
	push	edi
	mov	edi, DWORD PTR [ebp+12]
	mov	DWORD PTR [esi+8], eax
	add	DWORD PTR [ebp+32], 1
; Line 61341
	test	DWORD PTR [esi+4], 16384		; 00004000H
	mov	eax, DWORD PTR [ebp+32]
	mov	DWORD PTR _nEq$[esp+32], edx
	mov	DWORD PTR _termsInMem$[esp+32], 0
	mov	DWORD PTR _pIdx$[esp+32], ecx
	je	SHORT $LN11@codeAllEqu
; Line 61342
	mov	ebx, DWORD PTR [esi+56]
	add	ebx, eax
	mov	DWORD PTR [ebp+32], ebx
; Line 61343
	mov	DWORD PTR _termsInMem$[esp+32], 1
$LN11@codeAllEqu:
; Line 61349
	test	edx, edx
	mov	DWORD PTR _j$[esp+28], 0
	jle	$LN24@codeAllEqu
	mov	DWORD PTR tv365[esp+32], -1
	jmp	SHORT $LN10@codeAllEqu
	npad	6
$LL29@codeAllEqu:
	mov	ecx, DWORD PTR _pIdx$[esp+32]
$LN10@codeAllEqu:
; Line 61350
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _j$[esp+28]
	mov	eax, DWORD PTR [edx+eax*4]
; Line 61351
	mov	edx, DWORD PTR _notReady$[esp+32]
	push	ecx
	movzx	ecx, WORD PTR [esi+4]
	push	ecx
	mov	ecx, DWORD PTR _notReady$[esp+36]
	push	edx
	mov	edx, DWORD PTR _iCur$[esp+44]
	push	ecx
	push	eax
	mov	eax, DWORD PTR _pWC$[esp+48]
	push	edx
	push	eax
	call	_findTerm
	mov	ebx, eax
	add	esp, 28					; 0000001cH
; Line 61352
	test	ebx, ebx
	je	SHORT $LN32@codeAllEqu
; Line 61354
	push	ebx
	mov	eax, esi
	mov	ecx, ebp
	call	_codeEqualityTerm
	add	esp, 4
; Line 61355
	test	BYTE PTR [ebx+10], 129			; 00000081H
	jne	SHORT $LN30@codeAllEqu
; Line 61356
	cmp	DWORD PTR _termsInMem$[esp+32], 0
	je	SHORT $LN14@codeAllEqu
	or	eax, -1
	jmp	SHORT $LN15@codeAllEqu
$LN14@codeAllEqu:
	mov	eax, DWORD PTR tv365[esp+32]
$LN15@codeAllEqu:
	mov	ecx, DWORD PTR [esi+28]
	push	ecx
	push	eax
	push	65					; 00000041H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN30@codeAllEqu:
; Line 61358
	cmp	DWORD PTR _termsInMem$[esp+32], 0
	je	SHORT $LN9@codeAllEqu
; Line 61359
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR _j$[esp+28]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	1
	push	ecx
	push	124					; 0000007cH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN9@codeAllEqu:
	mov	eax, DWORD PTR _j$[esp+28]
	sub	DWORD PTR tv365[esp+32], 1
	add	eax, 1
	cmp	eax, DWORD PTR _nEq$[esp+32]
	mov	DWORD PTR _j$[esp+28], eax
	jl	$LL29@codeAllEqu
$LN32@codeAllEqu:
; Line 61349
	mov	edx, DWORD PTR _nEq$[esp+32]
$LN24@codeAllEqu:
; Line 61365
	cmp	DWORD PTR _termsInMem$[esp+32], 0
	je	SHORT $LN1@codeAllEqu
; Line 61366
	xor	eax, eax
	test	edx, edx
	mov	DWORD PTR _j$[esp+28], eax
	jle	SHORT $LN1@codeAllEqu
	npad	5
$LL3@codeAllEqu:
; Line 61367
	mov	edx, DWORD PTR [esi+8]
	mov	ebp, DWORD PTR [edi+12]
	cmp	DWORD PTR [edi+16], ebp
	lea	eax, DWORD PTR [edx+eax+1]
	mov	DWORD PTR $T133725[esp+32], eax
	jg	SHORT $LN27@codeAllEqu
	lea	eax, DWORD PTR [ebp+1]
	mov	ebx, edi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN27@codeAllEqu
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN2@codeAllEqu
$LN27@codeAllEqu:
	mov	edx, DWORD PTR [edi+20]
	add	DWORD PTR [edi+12], 1
	lea	ecx, DWORD PTR [ebp+ebp*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR $T133725[esp+32]
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [edi+564], cl
$LN2@codeAllEqu:
	mov	eax, DWORD PTR _j$[esp+28]
	add	eax, 1
	cmp	eax, DWORD PTR _nEq$[esp+32]
	mov	DWORD PTR _j$[esp+28], eax
	jl	SHORT $LL3@codeAllEqu
$LN1@codeAllEqu:
	pop	edi
	pop	ebp
	pop	ebx
; Line 61370
	add	esp, 20					; 00000014H
	ret	0
_codeAllEqualityTerms ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MIFGBAGJ@?$CL?$AA@			; `string'
PUBLIC	??_C@_0M@FEBHOCCB@?$CFz?5ORDER?5BY?$AA@		; `string'
PUBLIC	??_C@_0BN@GIJPKDIL@?$CFz?5VIRTUAL?5TABLE?5INDEX?5?$CFd?3?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BF@ILEGLOOO@?$CFz?5USING?5PRIMARY?5KEY?$AA@ ; `string'
PUBLIC	??_C@_0BB@BIEKKNLE@?$CFz?5WITH?5INDEX?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_08CKMPFKL@?$CFz?5AS?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_08HCMEEBCG@TABLE?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BM@BLDEAGOK@at?5most?5?$CFd?5tables?5in?5a?5join?$AA@ ; `string'
;	COMDAT ??_C@_01MIFGBAGJ@?$CL?$AA@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL?$AA@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FEBHOCCB@?$CFz?5ORDER?5BY?$AA@
CONST	SEGMENT
??_C@_0M@FEBHOCCB@?$CFz?5ORDER?5BY?$AA@ DB '%z ORDER BY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GIJPKDIL@?$CFz?5VIRTUAL?5TABLE?5INDEX?5?$CFd?3?$CFs?$AA@
CONST	SEGMENT
??_C@_0BN@GIJPKDIL@?$CFz?5VIRTUAL?5TABLE?5INDEX?5?$CFd?3?$CFs?$AA@ DB '%z'
	DB	' VIRTUAL TABLE INDEX %d:%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ILEGLOOO@?$CFz?5USING?5PRIMARY?5KEY?$AA@
CONST	SEGMENT
??_C@_0BF@ILEGLOOO@?$CFz?5USING?5PRIMARY?5KEY?$AA@ DB '%z USING PRIMARY K'
	DB	'EY', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BIEKKNLE@?$CFz?5WITH?5INDEX?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BB@BIEKKNLE@?$CFz?5WITH?5INDEX?5?$CFs?$AA@ DB '%z WITH INDEX %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CKMPFKL@?$CFz?5AS?5?$CFs?$AA@
CONST	SEGMENT
??_C@_08CKMPFKL@?$CFz?5AS?5?$CFs?$AA@ DB '%z AS %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HCMEEBCG@TABLE?5?$CFs?$AA@
CONST	SEGMENT
??_C@_08HCMEEBCG@TABLE?5?$CFs?$AA@ DB 'TABLE %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BLDEAGOK@at?5most?5?$CFd?5tables?5in?5a?5join?$AA@
CONST	SEGMENT
??_C@_0BM@BLDEAGOK@at?5most?5?$CFd?5tables?5in?5a?5join?$AA@ DB 'at most '
	DB	'%d tables in a join', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3WhereBegin
_TEXT	SEGMENT
_pLevel$ = -772						; size = 4
tv6025 = -768						; size = 4
tv5819 = -768						; size = 4
$T134426 = -768						; size = 4
_i$133762 = -768					; size = 4
_testOp$101694 = -768					; size = 4
_pEnd$101670 = -768					; size = 4
_j$101639 = -768					; size = 4
tv1502 = -764						; size = 4
$T134040 = -764						; size = 4
$T134025 = -764						; size = 4
_isConst$133755 = -764					; size = 4
_topLimit$101695 = -764					; size = 4
$T134885 = -764						; size = 4
_aConstraint$101643 = -764				; size = 4
_pKey$101621 = -764					; size = 4
_once$101559 = -764					; size = 4
_i$133933 = -760					; size = 4
_nxt$101632 = -760					; size = 4
_bestFlags$101554 = -760				; size = 4
_testOp$101667 = -756					; size = 4
_aUsage$101642 = -756					; size = 4
_pIdx$101631 = -756					; size = 4
_iFrom$ = -756						; size = 4
_nEq$101689 = -752					; size = 4
_pBest$101553 = -752					; size = 4
_pTabItem$ = -752					; size = 4
tv3111 = -748						; size = 4
_iCur$101630 = -748					; size = 4
_iIdxCur$101633 = -744					; size = 4
_bestNEq$101555 = -744					; size = 4
_notReady$ = -740					; size = 8
tv3668 = -732						; size = 4
_btmLimit$101696 = -732					; size = 4
_flags$101549 = -732					; size = 4
tv6023 = -728						; size = 4
tv3619 = -728						; size = 4
_bestJ$101557 = -728					; size = 4
tv3210 = -724						; size = 4
$T134922 = -724						; size = 4
$T134843 = -724						; size = 4
_db$134193 = -724					; size = 4
$T133929 = -724						; size = 4
_omitTable$101634 = -724				; size = 4
_pIx$101584 = -724					; size = 4
_doNotReorder$101564 = -724				; size = 4
tv830 = -720						; size = 4
_topEq$101690 = -720					; size = 4
_pStart$101669 = -720					; size = 4
_iIdxCur$101586 = -720					; size = 4
_pIdx$101548 = -720					; size = 4
_bRev$101635 = -716					; size = 4
_andFlags$ = -716					; size = 4
_i$ = -712						; size = 4
_j$101629 = -708					; size = 4
_btmEq$101691 = -708					; size = 4
_nEq$101550 = -708					; size = 4
_p$134449 = -704					; size = 4
_cont$ = -704						; size = 4
$T134714 = -700						; size = 4
_op$101727 = -700					; size = 4
_btmOp$101693 = -700					; size = 4
_pX$101679 = -700					; size = 4
_lowestCost$101556 = -700				; size = 8
tv3595 = -692						; size = 4
_op$101712 = -692					; size = 4
_pWInfo$ = -688						; size = 4
_wc$ = -684						; size = 424
_maskSet$ = -260					; size = 260
_pParse$ = 8						; size = 4
_pTabList$ = 12						; size = 4
_pWhere$ = 16						; size = 4
_ppOrderBy$ = 20					; size = 4
_sqlite3WhereBegin PROC					; COMDAT
; Line 61502
	sub	esp, 772				; 00000304H
; Line 61505
	mov	eax, DWORD PTR _pParse$[esp+768]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR [eax+12]
	push	esi
	mov	esi, DWORD PTR _pTabList$[esp+780]
; Line 61506
	xor	ebx, ebx
; Line 61519
	cmp	WORD PTR [esi], 64			; 00000040H
	push	edi
	mov	DWORD PTR _cont$[esp+788], ebx
	jbe	SHORT $LN127@sqlite3Whe@2
; Line 61520
	push	64					; 00000040H
	push	OFFSET ??_C@_0BM@BLDEAGOK@at?5most?5?$CFd?5tables?5in?5a?5join?$AA@
	mov	edi, eax
	call	_sqlite3ErrorMsg
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
; Line 61521
	xor	eax, eax
	pop	ebx
; Line 62208
	add	esp, 772				; 00000304H
	ret	0
$LN127@sqlite3Whe@2:
; Line 61527
	push	260					; 00000104H
	lea	ecx, DWORD PTR _maskSet$[esp+792]
	push	ebx
	push	ecx
	call	_memset
; Line 61528
	mov	edx, DWORD PTR _pParse$[esp+796]
	mov	DWORD PTR _wc$[esp+800], edx
; Line 61529
	mov	edx, DWORD PTR _pWhere$[esp+796]
	lea	eax, DWORD PTR _maskSet$[esp+800]
	push	61					; 0000003dH
	mov	DWORD PTR _wc$[esp+808], eax
	push	edx
	lea	eax, DWORD PTR _wc$[esp+808]
	lea	ecx, DWORD PTR _wc$[esp+832]
	push	eax
	mov	DWORD PTR _wc$[esp+820], ebx
	mov	DWORD PTR _wc$[esp+824], 10		; 0000000aH
	mov	DWORD PTR _wc$[esp+828], ecx
	call	_whereSplit
; Line 61534
	movsx	edi, WORD PTR [esi]
	imul	edi, 76					; 0000004cH
	add	esp, 24					; 00000018H
	add	edi, 104				; 00000068H
	call	_sqlite3Malloc
; Line 61535
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	mov	edi, eax
	mov	DWORD PTR _pWInfo$[esp+788], edi
	je	SHORT $LN126@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	$whereBeginNoMem$101537
$LN126@sqlite3Whe@2:
; Line 61538
	movsx	ecx, WORD PTR [esi]
; Line 61539
	mov	edx, DWORD PTR _pParse$[esp+784]
; Line 61541
	mov	eax, ebp
	mov	DWORD PTR [edi+20], ecx
	mov	DWORD PTR [edi], edx
	mov	DWORD PTR [edi+4], esi
	call	_sqlite3VdbeMakeLabel
; Line 61546
	cmp	DWORD PTR _pWhere$[esp+784], ebx
	mov	DWORD PTR [edi+16], eax
	je	SHORT $LN881@sqlite3Whe@2
	cmp	WORD PTR [esi], bx
	je	SHORT $LN880@sqlite3Whe@2
	mov	ecx, DWORD PTR _pWhere$[esp+784]
	lea	eax, DWORD PTR _isConst$133755[esp+788]
	push	eax
	push	OFFSET _exprNodeIsConstant
	push	ecx
	mov	DWORD PTR _isConst$133755[esp+800], 3
	call	_walkExprTree
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR _isConst$133755[esp+788], ebx
	je	SHORT $LN881@sqlite3Whe@2
$LN880@sqlite3Whe@2:
; Line 61547
	mov	edx, DWORD PTR [edi+16]
	mov	eax, DWORD PTR _pWhere$[esp+784]
	mov	ecx, DWORD PTR _pParse$[esp+784]
	push	1
	push	edx
	push	eax
	push	ecx
	call	_sqlite3ExprIfFalse
	add	esp, 16					; 00000010H
$LN881@sqlite3Whe@2:
; Line 61556
	movsx	ecx, WORD PTR [esi]
	cmp	ecx, ebx
	jle	SHORT $LN832@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+32]
	mov	DWORD PTR tv1502[esp+788], ecx
	npad	5
$LL123@sqlite3Whe@2:
; Line 61557
	mov	ecx, DWORD PTR _maskSet$[esp+788]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _maskSet$[esp+ecx*4+792], edx
	mov	ecx, 1
	add	DWORD PTR _maskSet$[esp+788], ecx
	add	eax, 48					; 00000030H
	sub	DWORD PTR tv1502[esp+788], ecx
	jne	SHORT $LL123@sqlite3Whe@2
$LN832@sqlite3Whe@2:
; Line 61559
	mov	eax, DWORD PTR _wc$[esp+796]
	add	eax, -1
	cmp	eax, ebx
	mov	DWORD PTR _i$133762[esp+788], eax
	jl	SHORT $LN144@sqlite3Whe@2
$LL146@sqlite3Whe@2:
	mov	edx, DWORD PTR _i$133762[esp+788]
	push	edx
	lea	eax, DWORD PTR _wc$[esp+792]
	push	eax
	push	esi
	call	_exprAnalyze
	add	esp, 12					; 0000000cH
	sub	DWORD PTR _i$133762[esp+788], 1
	jns	SHORT $LL146@sqlite3Whe@2
$LN144@sqlite3Whe@2:
; Line 61560
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN1032@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jle	SHORT $LN1032@sqlite3Whe@2
$whereBeginNoMem$101537:
; Line 62205
	lea	ecx, DWORD PTR _wc$[esp+788]
	push	ecx
	call	_whereClauseClear
; Line 62206
	push	edi
	call	_whereInfoFree
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
; Line 62207
	xor	eax, eax
	pop	ebx
; Line 62208
	add	esp, 772				; 00000304H
	ret	0
$LN1032@sqlite3Whe@2:
; Line 61578
	or	eax, -1
	mov	DWORD PTR _notReady$[esp+788], eax
	mov	DWORD PTR _notReady$[esp+792], eax
; Line 61581
	mov	DWORD PTR _andFlags$[esp+788], eax
; Line 61583
	lea	eax, DWORD PTR [edi+28]
	mov	DWORD PTR tv3111[esp+788], eax
	mov	DWORD PTR _pLevel$[esp+788], eax
	movsx	eax, WORD PTR [esi]
	cmp	eax, ebx
	mov	DWORD PTR _iFrom$[esp+788], ebx
	mov	DWORD PTR _i$[esp+788], ebx
	jle	$LN117@sqlite3Whe@2
	npad	5
$LL833@sqlite3Whe@2:
; Line 61599
	mov	edi, DWORD PTR _iFrom$[esp+788]
	fld	QWORD PTR __real@547d42aea2879f2e
	mov	ecx, DWORD PTR _pTabList$[esp+784]
	fstp	QWORD PTR _lowestCost$101556[esp+788]
	lea	edx, DWORD PTR [edi+edi*2]
	shl	edx, 4
	cmp	edi, eax
	mov	DWORD PTR _pBest$101553[esp+788], ebx
	mov	DWORD PTR _bestFlags$101554[esp+788], ebx
	mov	DWORD PTR _bestNEq$101555[esp+788], ebx
	mov	DWORD PTR _bestJ$101557[esp+788], ebx
	mov	DWORD PTR _once$101559[esp+788], ebx
	lea	esi, DWORD PTR [edx+ecx+8]
	jge	$LN879@sqlite3Whe@2
	mov	eax, DWORD PTR _pWInfo$[esp+788]
	mov	edx, edi
	imul	edx, 76					; 0000004cH
	lea	ecx, DWORD PTR [edx+eax+100]
	mov	DWORD PTR tv5819[esp+788], ecx
	npad	4
$LL116@sqlite3Whe@2:
; Line 61602
	mov	al, BYTE PTR [esi+21]
	and	al, 10					; 0000000aH
	neg	al
	sbb	eax, eax
	neg	eax
; Line 61603
	cmp	DWORD PTR _once$101559[esp+788], ebx
	mov	DWORD PTR _doNotReorder$101564[esp+788], eax
	je	SHORT $LN113@sqlite3Whe@2
	cmp	eax, ebx
	jne	$LN879@sqlite3Whe@2
$LN113@sqlite3Whe@2:
; Line 61604
	mov	edx, DWORD PTR _maskSet$[esp+788]
	xor	ecx, ecx
	cmp	edx, ebx
	jle	SHORT $LN152@sqlite3Whe@2
	mov	eax, DWORD PTR [esi+24]
	npad	3
$LL154@sqlite3Whe@2:
	cmp	DWORD PTR _maskSet$[esp+ecx*4+792], eax
	je	SHORT $LN789@sqlite3Whe@2
	add	ecx, 1
	cmp	ecx, edx
	jl	SHORT $LL154@sqlite3Whe@2
$LN152@sqlite3Whe@2:
	xor	eax, eax
	xor	edx, edx
$LN155@sqlite3Whe@2:
; Line 61605
	and	eax, DWORD PTR _notReady$[esp+788]
	and	edx, DWORD PTR _notReady$[esp+792]
	or	eax, edx
	jne	SHORT $LN112@sqlite3Whe@2
; Line 61606
	cmp	edi, DWORD PTR _iFrom$[esp+788]
	jne	$LN115@sqlite3Whe@2
	add	DWORD PTR _iFrom$[esp+788], 1
; Line 61607
	jmp	$LN115@sqlite3Whe@2
$LN789@sqlite3Whe@2:
; Line 61604
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	jmp	SHORT $LN155@sqlite3Whe@2
$LN112@sqlite3Whe@2:
; Line 61611
	mov	edx, DWORD PTR [esi+12]
	cmp	BYTE PTR [edx+57], bl
	je	SHORT $LN110@sqlite3Whe@2
; Line 61615
	mov	eax, DWORD PTR _ppOrderBy$[esp+784]
	cmp	eax, ebx
	je	SHORT $LN130@sqlite3Whe@2
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN131@sqlite3Whe@2
$LN130@sqlite3Whe@2:
	xor	eax, eax
$LN131@sqlite3Whe@2:
	mov	ecx, DWORD PTR tv5819[esp+788]
	xor	edx, edx
	cmp	DWORD PTR _i$[esp+788], ebx
	push	ecx
	mov	ecx, DWORD PTR _notReady$[esp+792]
	sete	dl
	push	edx
	push	eax
	mov	eax, DWORD PTR _notReady$[esp+804]
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+800]
	push	ecx
	push	esi
	lea	edx, DWORD PTR _wc$[esp+812]
	push	edx
	push	eax
	call	_bestVirtualIndex
; Line 61617
	mov	ecx, DWORD PTR tv5819[esp+820]
	mov	ecx, DWORD PTR [ecx]
	add	esp, 32					; 00000020H
; Line 61618
	cmp	ecx, ebx
	mov	DWORD PTR _flags$101549[esp+788], 8388608 ; 00800000H
	je	SHORT $LN109@sqlite3Whe@2
	cmp	DWORD PTR [ecx+32], ebx
	je	SHORT $LN109@sqlite3Whe@2
; Line 61619
	mov	DWORD PTR _flags$101549[esp+788], 9437184 ; 00900000H
$LN109@sqlite3Whe@2:
; Line 61623
	fld	QWORD PTR __real@546d42aea2879f2e
	mov	DWORD PTR _pIdx$101548[esp+788], ebx
	fcom	ST(1)
	mov	DWORD PTR _nEq$101550[esp+788], ebx
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1062@sqlite3Whe@2
; Line 61637
	fstp	ST(1)
; Line 61631
	jmp	SHORT $LN107@sqlite3Whe@2
$LN110@sqlite3Whe@2:
; Line 61636
	cmp	DWORD PTR _i$[esp+788], ebx
	jne	SHORT $LN132@sqlite3Whe@2
	mov	eax, DWORD PTR _ppOrderBy$[esp+784]
	cmp	eax, ebx
	je	SHORT $LN132@sqlite3Whe@2
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN133@sqlite3Whe@2
$LN132@sqlite3Whe@2:
	xor	eax, eax
$LN133@sqlite3Whe@2:
	lea	edx, DWORD PTR _nEq$101550[esp+788]
	push	edx
	lea	ecx, DWORD PTR _flags$101549[esp+792]
	push	ecx
	mov	ecx, DWORD PTR _notReady$[esp+796]
	lea	edx, DWORD PTR _pIdx$101548[esp+796]
	push	edx
	push	eax
	mov	eax, DWORD PTR _notReady$[esp+808]
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+804]
	push	ecx
	push	esi
	lea	edx, DWORD PTR _wc$[esp+816]
	push	edx
	push	eax
	call	_bestIndex
	add	esp, 36					; 00000024H
; Line 61637
	xor	ecx, ecx
	jmp	SHORT $LN107@sqlite3Whe@2
$LN1062@sqlite3Whe@2:
	fstp	ST(0)
$LN107@sqlite3Whe@2:
; Line 61639
	fld	QWORD PTR _lowestCost$101556[esp+788]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1065@sqlite3Whe@2
; Line 61642
	mov	edx, DWORD PTR _pIdx$101548[esp+788]
	fstp	QWORD PTR _lowestCost$101556[esp+788]
; Line 61643
	mov	eax, DWORD PTR _flags$101549[esp+788]
	mov	DWORD PTR _pBest$101553[esp+788], edx
; Line 61644
	mov	edx, DWORD PTR _nEq$101550[esp+788]
	mov	DWORD PTR _bestFlags$101554[esp+788], eax
; Line 61646
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	DWORD PTR _once$101559[esp+788], 1
	mov	DWORD PTR _bestNEq$101555[esp+788], edx
	mov	DWORD PTR _bestJ$101557[esp+788], edi
	mov	DWORD PTR [eax+68], ecx
	jmp	SHORT $LN106@sqlite3Whe@2
$LN1065@sqlite3Whe@2:
	fstp	ST(0)
$LN106@sqlite3Whe@2:
; Line 61648
	cmp	DWORD PTR _doNotReorder$101564[esp+788], ebx
	jne	SHORT $LN879@sqlite3Whe@2
$LN115@sqlite3Whe@2:
; Line 61599
	mov	ecx, DWORD PTR _pTabList$[esp+784]
	movsx	edx, WORD PTR [ecx]
	add	DWORD PTR tv5819[esp+788], 76		; 0000004cH
	add	edi, 1
	add	esi, 48					; 00000030H
	cmp	edi, edx
	jl	$LL116@sqlite3Whe@2
$LN879@sqlite3Whe@2:
; Line 61652
	mov	ecx, DWORD PTR _bestFlags$101554[esp+788]
	test	ecx, 1048576				; 00100000H
	je	SHORT $LN104@sqlite3Whe@2
; Line 61653
	mov	eax, DWORD PTR _ppOrderBy$[esp+784]
	mov	DWORD PTR [eax], ebx
$LN104@sqlite3Whe@2:
; Line 61656
	mov	eax, DWORD PTR _pLevel$[esp+788]
	and	DWORD PTR _andFlags$[esp+788], ecx
; Line 61658
	mov	edx, DWORD PTR _bestNEq$101555[esp+788]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _pBest$101553[esp+788]
; Line 61661
	cmp	ecx, ebx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+56], edx
	mov	DWORD PTR [eax+64], ebx
	mov	DWORD PTR [eax+60], ebx
	je	SHORT $LN103@sqlite3Whe@2
; Line 61662
	mov	ecx, DWORD PTR _pParse$[esp+784]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+24], edx
	add	DWORD PTR [ecx+28], 1
; Line 61663
	jmp	SHORT $LN102@sqlite3Whe@2
$LN103@sqlite3Whe@2:
; Line 61664
	mov	DWORD PTR [eax+24], -1
$LN102@sqlite3Whe@2:
; Line 61666
	mov	eax, DWORD PTR _maskSet$[esp+788]
	mov	esi, DWORD PTR _bestJ$101557[esp+788]
	xor	ecx, ecx
	cmp	eax, ebx
	jle	SHORT $LN158@sqlite3Whe@2
; Line 62043
	mov	edi, DWORD PTR _pTabList$[esp+784]
	lea	edx, DWORD PTR [esi+esi*2]
	shl	edx, 4
	mov	edx, DWORD PTR [edx+edi+32]
	npad	1
$LL160@sqlite3Whe@2:
; Line 61666
	cmp	DWORD PTR _maskSet$[esp+ecx*4+792], edx
	je	$LN792@sqlite3Whe@2
	add	ecx, 1
	cmp	ecx, eax
	jl	SHORT $LL160@sqlite3Whe@2
$LN158@sqlite3Whe@2:
	xor	eax, eax
	xor	edx, edx
$LN161@sqlite3Whe@2:
	mov	ecx, DWORD PTR _i$[esp+788]
	not	eax
	and	DWORD PTR _notReady$[esp+788], eax
; Line 61667
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	DWORD PTR [eax], esi
	add	eax, 76					; 0000004cH
	mov	DWORD PTR _pLevel$[esp+788], eax
	mov	eax, DWORD PTR _pTabList$[esp+784]
	movsx	eax, WORD PTR [eax]
	not	edx
	and	DWORD PTR _notReady$[esp+792], edx
	add	ecx, 1
	cmp	ecx, eax
	mov	DWORD PTR _i$[esp+788], ecx
	jl	$LL833@sqlite3Whe@2
$LN117@sqlite3Whe@2:
; Line 61674
	test	DWORD PTR _andFlags$[esp+788], 4194304	; 00400000H
	je	SHORT $LN101@sqlite3Whe@2
	mov	eax, DWORD PTR _ppOrderBy$[esp+784]
	cmp	eax, ebx
	je	SHORT $LN101@sqlite3Whe@2
; Line 61675
	mov	DWORD PTR [eax], ebx
$LN101@sqlite3Whe@2:
; Line 61681
	mov	esi, DWORD PTR _pParse$[esp+784]
	mov	edi, DWORD PTR [esi+12]
	cmp	edi, ebx
	jne	SHORT $LN828@sqlite3Whe@2
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	edi, eax
	cmp	edi, ebx
	mov	DWORD PTR [esi+12], eax
	je	SHORT $LN835@sqlite3Whe@2
$LN828@sqlite3Whe@2:
	cmp	DWORD PTR [esi+52], ebx
	jne	SHORT $LN835@sqlite3Whe@2
	mov	esi, DWORD PTR [edi+12]
	cmp	DWORD PTR [edi+16], esi
	jg	SHORT $LN991@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, edi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN883@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN883@sqlite3Whe@2
	xor	esi, esi
	xor	ebx, ebx
	jmp	SHORT $LN175@sqlite3Whe@2
$LN792@sqlite3Whe@2:
; Line 61666
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	jmp	$LN161@sqlite3Whe@2
$LN883@sqlite3Whe@2:
; Line 61681
	xor	ebx, ebx
$LN991@sqlite3Whe@2:
	mov	edx, DWORD PTR [edi+20]
	add	DWORD PTR [edi+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [edi+564], bl
$LN175@sqlite3Whe@2:
	mov	eax, DWORD PTR _pParse$[esp+784]
	add	esi, 1
	mov	DWORD PTR [eax+52], esi
$LN835@sqlite3Whe@2:
; Line 61682
	mov	edx, DWORD PTR _pTabList$[esp+784]
	cmp	WORD PTR [edx], bx
	mov	ecx, DWORD PTR tv3111[esp+788]
	mov	DWORD PTR _i$[esp+788], ebx
	mov	DWORD PTR _pLevel$[esp+788], ecx
	jle	$LN897@sqlite3Whe@2
$LL100@sqlite3Whe@2:
; Line 61686
	mov	eax, DWORD PTR _pLevel$[esp+788]
; Line 61689
	mov	edx, DWORD PTR _pParse$[esp+784]
	cmp	BYTE PTR [edx+128], 2
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _iIdxCur$101586[esp+788], ecx
	jne	$LN1033@sqlite3Whe@2
; Line 61691
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _pTabList$[esp+784]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 4
; Line 61692
	mov	edx, DWORD PTR [eax+ecx+12]
	lea	esi, DWORD PTR [eax+ecx+8]
	push	edx
	push	OFFSET ??_C@_08HCMEEBCG@TABLE?5?$CFs?$AA@
	call	_sqlite3MPrintf
; Line 61693
	mov	esi, DWORD PTR [esi+8]
	add	esp, 8
	cmp	esi, ebx
	mov	edi, eax
	je	SHORT $LN96@sqlite3Whe@2
; Line 61694
	push	esi
	push	edi
	push	OFFSET ??_C@_08CKMPFKL@?$CFz?5AS?5?$CFs?$AA@
	call	_sqlite3MPrintf
	add	esp, 12					; 0000000cH
	mov	edi, eax
$LN96@sqlite3Whe@2:
; Line 61696
	mov	esi, DWORD PTR _pLevel$[esp+788]
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, ebx
	je	SHORT $LN95@sqlite3Whe@2
; Line 61697
	mov	eax, DWORD PTR [eax]
	push	eax
	push	edi
	push	OFFSET ??_C@_0BB@BIEKKNLE@?$CFz?5WITH?5INDEX?5?$CFs?$AA@
	call	_sqlite3MPrintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1067@sqlite3Whe@2
$LN95@sqlite3Whe@2:
; Line 61698
	test	DWORD PTR [esi+4], 768			; 00000300H
	je	SHORT $LN93@sqlite3Whe@2
; Line 61699
	push	edi
	push	OFFSET ??_C@_0BF@ILEGLOOO@?$CFz?5USING?5PRIMARY?5KEY?$AA@
	call	_sqlite3MPrintf
	add	esp, 8
	jmp	SHORT $LN1067@sqlite3Whe@2
$LN93@sqlite3Whe@2:
; Line 61702
	mov	eax, DWORD PTR [esi+68]
	cmp	eax, ebx
	je	SHORT $LN91@sqlite3Whe@2
; Line 61705
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [eax+20]
	push	ecx
	push	edx
	push	edi
	push	OFFSET ??_C@_0BN@GIJPKDIL@?$CFz?5VIRTUAL?5TABLE?5INDEX?5?$CFd?3?$CFs?$AA@
	call	_sqlite3MPrintf
	add	esp, 16					; 00000010H
$LN1067@sqlite3Whe@2:
	mov	edi, eax
$LN91@sqlite3Whe@2:
; Line 61708
	test	DWORD PTR [esi+4], 1048576		; 00100000H
	je	SHORT $LN90@sqlite3Whe@2
; Line 61709
	push	edi
	push	OFFSET ??_C@_0M@FEBHOCCB@?$CFz?5ORDER?5BY?$AA@
	call	_sqlite3MPrintf
	add	esp, 8
	mov	edi, eax
$LN90@sqlite3Whe@2:
; Line 61711
	mov	eax, DWORD PTR [esi]
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	DWORD PTR $T133929[esp+788], eax
	jg	SHORT $LN181@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN886@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN886@sqlite3Whe@2
	xor	esi, esi
	xor	ebx, ebx
	jmp	SHORT $LN183@sqlite3Whe@2
$LN886@sqlite3Whe@2:
	xor	ebx, ebx
$LN181@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _i$[esp+788]
	mov	edx, DWORD PTR $T133929[esp+788]
	mov	BYTE PTR [eax], 118			; 00000076H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
$LN183@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	cmp	ecx, ebx
	mov	eax, esi
	je	SHORT $LN815@sqlite3Whe@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN204@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN815@sqlite3Whe@2
$LN204@sqlite3Whe@2:
	cmp	esi, ebx
	jl	SHORT $LN200@sqlite3Whe@2
	cmp	esi, DWORD PTR [ebp+12]
	jl	SHORT $LN199@sqlite3Whe@2
$LN200@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN1033@sqlite3Whe@2
$LN199@sqlite3Whe@2:
	lea	eax, DWORD PTR [eax+eax*4]
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	cmp	edi, ebx
	mov	DWORD PTR [esi+12], ebx
	jne	SHORT $LN816@sqlite3Whe@2
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], ebx
	jmp	SHORT $LN1033@sqlite3Whe@2
$LN816@sqlite3Whe@2:
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], -1
	jmp	SHORT $LN1033@sqlite3Whe@2
$LN815@sqlite3Whe@2:
	mov	ecx, edi
	or	eax, -1
	call	_freeP3
$LN1033@sqlite3Whe@2:
; Line 61714
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _pTabList$[esp+784]
	shl	edx, 4
; Line 61715
	mov	esi, DWORD PTR [edx+eax+20]
; Line 61716
	mov	ecx, DWORD PTR [esi+76]
	cmp	ecx, ebx
	lea	eax, DWORD PTR [edx+eax+8]
	mov	edx, DWORD PTR _pParse$[esp+784]
	mov	DWORD PTR _pTabItem$[esp+788], eax
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv3210[esp+788], eax
	mov	DWORD PTR _i$133933[esp+788], -1000000	; fff0bdc0H
	je	SHORT $LN793@sqlite3Whe@2
	mov	edi, DWORD PTR [eax]
	cmp	edi, ebx
	mov	DWORD PTR _i$133933[esp+788], ebx
	jle	SHORT $LN793@sqlite3Whe@2
	mov	eax, DWORD PTR [eax+4]
	add	eax, 20					; 00000014H
$LL1042@sqlite3Whe@2:
	cmp	DWORD PTR [eax], ecx
	je	SHORT $LN793@sqlite3Whe@2
	add	DWORD PTR _i$133933[esp+788], 1
	add	eax, 24					; 00000018H
	cmp	DWORD PTR _i$133933[esp+788], edi
	jl	SHORT $LL1042@sqlite3Whe@2
$LN793@sqlite3Whe@2:
; Line 61717
	cmp	BYTE PTR [esi+53], bl
	jne	$LN99@sqlite3Whe@2
	cmp	DWORD PTR [esi+24], ebx
	jne	$LN99@sqlite3Whe@2
; Line 61719
	mov	eax, DWORD PTR _pLevel$[esp+788]
	cmp	DWORD PTR [eax+68], ebx
	je	$LN87@sqlite3Whe@2
; Line 61721
	mov	ecx, DWORD PTR [esi+64]
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	eax, DWORD PTR _pTabItem$[esp+788]
	mov	edi, DWORD PTR [eax+24]
	mov	DWORD PTR $T134025[esp+788], ecx
	jg	SHORT $LN992@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN887@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN887@sqlite3Whe@2
	xor	esi, esi
	xor	ebx, ebx
	jmp	SHORT $LN224@sqlite3Whe@2
$LN887@sqlite3Whe@2:
	xor	ebx, ebx
$LN992@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 29			; 0000001dH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
$LN224@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	cmp	ecx, ebx
	mov	eax, esi
	je	SHORT $LN817@sqlite3Whe@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN245@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN817@sqlite3Whe@2
$LN245@sqlite3Whe@2:
	cmp	esi, ebx
	jl	SHORT $LN241@sqlite3Whe@2
	cmp	esi, DWORD PTR [ebp+12]
	jl	SHORT $LN240@sqlite3Whe@2
$LN241@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	$LN889@sqlite3Whe@2
$LN240@sqlite3Whe@2:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	mov	eax, DWORD PTR $T134025[esp+788]
	cmp	eax, ebx
	mov	DWORD PTR [esi+12], ebx
	jne	SHORT $LN818@sqlite3Whe@2
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], ebx
	jmp	$LN889@sqlite3Whe@2
$LN818@sqlite3Whe@2:
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -10			; fffffff6H
	jmp	$LN889@sqlite3Whe@2
$LN817@sqlite3Whe@2:
	mov	ecx, DWORD PTR $T134025[esp+788]
	mov	eax, -10				; fffffff6H
	call	_freeP3
; Line 61722
	jmp	$LN889@sqlite3Whe@2
$LN87@sqlite3Whe@2:
; Line 61724
	test	DWORD PTR [eax+4], 524288		; 00080000H
	jne	$LN85@sqlite3Whe@2
; Line 61725
	cmp	BYTE PTR [esi+57], bl
	mov	eax, DWORD PTR _pTabItem$[esp+788]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T134040[esp+788], ecx
	jne	SHORT $LN888@sqlite3Whe@2
	mov	edi, DWORD PTR [edx+12]
	cmp	edi, ebx
	jne	SHORT $LN253@sqlite3Whe@2
	mov	edi, DWORD PTR tv3210[esp+788]
	call	_sqlite3VdbeCreate
	mov	ecx, DWORD PTR _pParse$[esp+784]
	mov	DWORD PTR [ecx+12], eax
	mov	edi, eax
$LN253@sqlite3Whe@2:
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR _i$133933[esp+788]
	push	edx
	mov	edx, DWORD PTR _pParse$[esp+788]
	push	ebx
	push	eax
	push	ecx
	push	edx
	call	_sqlite3TableLock
	mov	eax, DWORD PTR _i$133933[esp+808]
	push	ebx
	push	eax
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [esi+20]
	mov	edx, DWORD PTR $T134040[esp+820]
	push	ecx
	push	edx
	push	14					; 0000000eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR $T134040[esp+832]
	push	eax
	push	ecx
	push	104					; 00000068H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
$LN888@sqlite3Whe@2:
; Line 61726
	cmp	DWORD PTR [esi+4], 64			; 00000040H
	jae	SHORT $LN889@sqlite3Whe@2
; Line 61727
	mov	ecx, DWORD PTR _pTabItem$[esp+788]
	mov	eax, DWORD PTR [ecx+40]
	mov	ecx, DWORD PTR [ecx+44]
; Line 61729
	mov	esi, eax
	xor	edx, edx
	or	esi, ecx
	je	SHORT $LN81@sqlite3Whe@2
	npad	6
$LL83@sqlite3Whe@2:
	shrd	eax, ecx, 1
	shr	ecx, 1
	mov	esi, eax
	add	edx, 1
	or	esi, ecx
	jne	SHORT $LL83@sqlite3Whe@2
$LN81@sqlite3Whe@2:
; Line 61730
	mov	ecx, DWORD PTR [ebp+12]
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, ebx
	jl	SHORT $LN889@sqlite3Whe@2
	cmp	ecx, eax
	jle	SHORT $LN889@sqlite3Whe@2
	mov	ecx, DWORD PTR [ebp+20]
	cmp	ecx, ebx
	je	SHORT $LN889@sqlite3Whe@2
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
; Line 61733
	jmp	SHORT $LN889@sqlite3Whe@2
$LN85@sqlite3Whe@2:
; Line 61734
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR _i$133933[esp+788]
	push	ecx
	mov	ecx, DWORD PTR _pParse$[esp+788]
	push	ebx
	push	edx
	push	eax
	push	ecx
	call	_sqlite3TableLock
	add	esp, 20					; 00000014H
$LN889@sqlite3Whe@2:
; Line 61736
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	edx, DWORD PTR _pTabItem$[esp+788]
; Line 61737
	mov	edi, DWORD PTR [eax+16]
	cmp	edi, ebx
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR _pIx$101584[esp+788], edi
	je	$LN1030@sqlite3Whe@2
; Line 61738
	mov	edx, DWORD PTR _pParse$[esp+784]
	push	edi
	push	edx
	call	_sqlite3IndexKeyinfo
; Line 61740
	mov	esi, DWORD PTR [ebp+12]
	add	esp, 8
	cmp	DWORD PTR [ebp+16], esi
	mov	DWORD PTR _pKey$101621[esp+788], eax
	jg	SHORT $LN261@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN891@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN892@sqlite3Whe@2
$LN891@sqlite3Whe@2:
	xor	ebx, ebx
$LN261@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _i$133933[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 47			; 0000002fH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN263@sqlite3Whe@2
$LN892@sqlite3Whe@2:
	xor	ebx, ebx
$LN263@sqlite3Whe@2:
; Line 61743
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	edi, DWORD PTR [edi+20]
	jg	SHORT $LN993@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN893@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN893@sqlite3Whe@2
	xor	esi, esi
	xor	ebx, ebx
	jmp	SHORT $LN271@sqlite3Whe@2
$LN893@sqlite3Whe@2:
	xor	ebx, ebx
$LN993@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _iIdxCur$101586[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 14			; 0000000eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
$LN271@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	cmp	ecx, ebx
	mov	eax, esi
	je	SHORT $LN819@sqlite3Whe@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN292@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN819@sqlite3Whe@2
$LN292@sqlite3Whe@2:
	cmp	esi, ebx
	jl	SHORT $LN288@sqlite3Whe@2
	cmp	esi, DWORD PTR [ebp+12]
	jl	SHORT $LN287@sqlite3Whe@2
$LN288@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN1030@sqlite3Whe@2
$LN287@sqlite3Whe@2:
	lea	eax, DWORD PTR [eax+eax*4]
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	mov	eax, DWORD PTR _pKey$101621[esp+788]
	cmp	eax, ebx
	mov	DWORD PTR [esi+12], ebx
	jne	SHORT $LN820@sqlite3Whe@2
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], ebx
	jmp	SHORT $LN1030@sqlite3Whe@2
$LN820@sqlite3Whe@2:
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -6			; fffffffaH
	jmp	SHORT $LN1030@sqlite3Whe@2
$LN819@sqlite3Whe@2:
	mov	ecx, DWORD PTR _pKey$101621[esp+788]
	mov	eax, -9					; fffffff7H
	call	_freeP3
$LN1030@sqlite3Whe@2:
; Line 61745
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	test	DWORD PTR [ecx+4], 532480		; 00082000H
	je	SHORT $LN299@sqlite3Whe@2
; Line 61748
	mov	edx, DWORD PTR _pIx$101584[esp+788]
	mov	edi, DWORD PTR [edx+4]
	mov	esi, DWORD PTR [ebp+12]
	add	edi, 1
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN994@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN894@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN895@sqlite3Whe@2
$LN894@sqlite3Whe@2:
	xor	ebx, ebx
$LN994@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _iIdxCur$101586[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 104			; 00000068H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN299@sqlite3Whe@2
$LN895@sqlite3Whe@2:
	xor	ebx, ebx
$LN299@sqlite3Whe@2:
; Line 61750
	mov	eax, DWORD PTR _pParse$[esp+784]
	mov	edi, DWORD PTR [eax+12]
	cmp	edi, ebx
	mov	esi, eax
	jne	SHORT $LN829@sqlite3Whe@2
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	edi, eax
	cmp	edi, ebx
	mov	DWORD PTR [esi+12], eax
	je	$LN99@sqlite3Whe@2
$LN829@sqlite3Whe@2:
	cmp	DWORD PTR [esi+52], ebx
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _db$134193[esp+788], ecx
	jne	SHORT $LN306@sqlite3Whe@2
	mov	esi, DWORD PTR [edi+12]
	cmp	DWORD PTR [edi+16], esi
	jg	SHORT $LN995@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, edi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN896@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN896@sqlite3Whe@2
	xor	esi, esi
	xor	ebx, ebx
	jmp	SHORT $LN315@sqlite3Whe@2
$LN896@sqlite3Whe@2:
	xor	ebx, ebx
$LN995@sqlite3Whe@2:
	mov	eax, DWORD PTR [edi+20]
	add	DWORD PTR [edi+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [edi+564], bl
$LN315@sqlite3Whe@2:
	mov	ecx, DWORD PTR _pParse$[esp+784]
	add	esi, 1
	mov	DWORD PTR [ecx+52], esi
	mov	esi, ecx
$LN306@sqlite3Whe@2:
	mov	ecx, DWORD PTR _i$133933[esp+788]
	cmp	ecx, ebx
	jl	SHORT $LN99@sqlite3Whe@2
	mov	edx, DWORD PTR [esi+48]
	mov	eax, 1
	shl	eax, cl
	test	eax, edx
	jne	SHORT $LN99@sqlite3Whe@2
	or	eax, edx
	cmp	ecx, 1
	mov	DWORD PTR [esi+48], eax
	mov	eax, DWORD PTR _db$134193[esp+788]
	mov	eax, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	edx, DWORD PTR [eax+edx*8+20]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [esi+ecx*4+56], eax
	jne	SHORT $LN99@sqlite3Whe@2
	push	esi
	call	_sqlite3OpenTempDatabase
	add	esp, 4
$LN99@sqlite3Whe@2:
	mov	ecx, DWORD PTR _pTabList$[esp+784]
	mov	eax, DWORD PTR _i$[esp+788]
	movsx	edx, WORD PTR [ecx]
	add	DWORD PTR _pLevel$[esp+788], 76		; 0000004cH
	add	eax, 1
	cmp	eax, edx
	mov	DWORD PTR _i$[esp+788], eax
	jl	$LL100@sqlite3Whe@2
$LN897@sqlite3Whe@2:
; Line 61752
	mov	eax, DWORD PTR [ebp+12]
	mov	edi, DWORD PTR _pWInfo$[esp+788]
; Line 61759
	mov	edx, DWORD PTR _pTabList$[esp+784]
	mov	ecx, DWORD PTR tv3111[esp+788]
	mov	DWORD PTR [edi+8], eax
	or	eax, -1
	cmp	WORD PTR [edx], bx
	mov	DWORD PTR _notReady$[esp+788], eax
	mov	DWORD PTR _notReady$[esp+792], eax
	mov	DWORD PTR _i$[esp+788], ebx
	mov	DWORD PTR _pLevel$[esp+788], ecx
	jle	$LN990@sqlite3Whe@2
	npad	4
$LL1029@sqlite3Whe@2:
; Line 61768
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _pTabList$[esp+784]
; Line 61785
	mov	esi, DWORD PTR [ebp+24]
	mov	edi, DWORD PTR _pParse$[esp+784]
	lea	eax, DWORD PTR [eax+eax*2]
	shl	eax, 4
	lea	eax, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _pTabItem$[esp+788], eax
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR _iCur$101630[esp+788], eax
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR _iIdxCur$101633[esp+788], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _pIdx$101631[esp+788], edx
	mov	edx, eax
	shr	eax, 19					; 00000013H
	shr	edx, 21					; 00000015H
	and	eax, 1
	and	edx, 1
	mov	DWORD PTR _omitTable$101634[esp+788], eax
	mov	eax, DWORD PTR [ebp+28]
	cmp	esi, eax
	mov	DWORD PTR _bRev$101635[esp+788], edx
	lea	edx, DWORD PTR [esi+1]
	mov	DWORD PTR [ebp+24], edx
	jl	$LN1051@sqlite3Whe@2
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [ebp+28], eax
	mov	edx, DWORD PTR _sqlite3_mallocHasFailed
	cmp	edx, ebx
	lea	edi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR [ebp+32]
	mov	DWORD PTR $T134426[esp+788], eax
	je	SHORT $LN335@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jle	SHORT $LN335@sqlite3Whe@2
	xor	edi, edi
	jmp	$LN821@sqlite3Whe@2
$LN335@sqlite3Whe@2:
	cmp	eax, ebx
	jne	SHORT $LN334@sqlite3Whe@2
	cmp	edi, ebx
	mov	DWORD PTR _p$134449[esp+788], ebx
	jle	SHORT $LN1038@sqlite3Whe@2
	cmp	edx, ebx
	je	SHORT $LN347@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN1038@sqlite3Whe@2
$LN347@sqlite3Whe@2:
	push	edi
	call	_malloc
	add	esp, 4
	cmp	eax, ebx
	mov	DWORD PTR _p$134449[esp+788], eax
	jne	SHORT $LN830@sqlite3Whe@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN357@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN1038@sqlite3Whe@2
$LN357@sqlite3Whe@2:
	mov	edi, DWORD PTR _p$134449[esp+788]
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN333@sqlite3Whe@2
$LN830@sqlite3Whe@2:
	mov	eax, DWORD PTR _p$134449[esp+788]
	push	edi
	push	ebx
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
$LN1038@sqlite3Whe@2:
	mov	edi, DWORD PTR _p$134449[esp+788]
	jmp	SHORT $LN333@sqlite3Whe@2
$LN334@sqlite3Whe@2:
	mov	ecx, eax
	push	edi
	push	ecx
	call	_realloc
	add	esp, 8
	cmp	eax, ebx
	jne	SHORT $LN368@sqlite3Whe@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN1039@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN368@sqlite3Whe@2
$LN1039@sqlite3Whe@2:
	mov	ecx, 1
	add	DWORD PTR _inMutex, ecx
	mov	DWORD PTR _sqlite3_mallocHasFailed, ecx
$LN368@sqlite3Whe@2:
	mov	edi, eax
$LN333@sqlite3Whe@2:
	cmp	edi, ebx
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	jne	SHORT $LN378@sqlite3Whe@2
	mov	eax, DWORD PTR $T134426[esp+788]
$LN821@sqlite3Whe@2:
	cmp	eax, ebx
	je	SHORT $LN378@sqlite3Whe@2
	mov	edx, DWORD PTR $T134426[esp+788]
	push	edx
	call	_free
	mov	ecx, DWORD PTR _pLevel$[esp+792]
	add	esp, 4
$LN378@sqlite3Whe@2:
	mov	DWORD PTR [ebp+32], edi
	mov	edi, DWORD PTR _pParse$[esp+784]
$LN1051@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+32]
	cmp	eax, ebx
	je	SHORT $LN321@sqlite3Whe@2
	mov	DWORD PTR [eax+esi*4], -1
$LN321@sqlite3Whe@2:
	or	eax, -1
	sub	eax, esi
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+28], eax
; Line 61786
	mov	edx, DWORD PTR [ebp+24]
	mov	DWORD PTR tv3619[esp+788], eax
	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR [ebp+24], eax
	mov	eax, DWORD PTR [ebp+28]
	cmp	edx, eax
	mov	DWORD PTR tv3595[esp+788], edx
	jl	$LN1052@sqlite3Whe@2
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [ebp+28], eax
	mov	edx, DWORD PTR _sqlite3_mallocHasFailed
	cmp	edx, ebx
	lea	esi, DWORD PTR [eax*4]
	mov	eax, DWORD PTR [ebp+32]
	mov	DWORD PTR $T134714[esp+788], eax
	je	SHORT $LN394@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jle	SHORT $LN394@sqlite3Whe@2
	xor	edi, edi
	jmp	$LN822@sqlite3Whe@2
$LN394@sqlite3Whe@2:
	cmp	eax, ebx
	jne	SHORT $LN393@sqlite3Whe@2
	xor	edi, edi
	cmp	esi, ebx
	jle	$LN392@sqlite3Whe@2
	cmp	edx, ebx
	je	SHORT $LN406@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN392@sqlite3Whe@2
$LN406@sqlite3Whe@2:
	push	esi
	call	_malloc
	mov	edi, eax
	add	esp, 4
	cmp	edi, ebx
	jne	SHORT $LN831@sqlite3Whe@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN416@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN392@sqlite3Whe@2
$LN416@sqlite3Whe@2:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN392@sqlite3Whe@2
$LN831@sqlite3Whe@2:
	push	esi
	push	ebx
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN392@sqlite3Whe@2
$LN393@sqlite3Whe@2:
	push	esi
	push	eax
	call	_realloc
	add	esp, 8
	cmp	eax, ebx
	jne	SHORT $LN427@sqlite3Whe@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN1041@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN427@sqlite3Whe@2
$LN1041@sqlite3Whe@2:
	mov	ecx, 1
	add	DWORD PTR _inMutex, ecx
	mov	DWORD PTR _sqlite3_mallocHasFailed, ecx
$LN427@sqlite3Whe@2:
	mov	edi, eax
$LN392@sqlite3Whe@2:
	cmp	edi, ebx
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	jne	SHORT $LN437@sqlite3Whe@2
$LN822@sqlite3Whe@2:
	mov	eax, DWORD PTR $T134714[esp+788]
	cmp	eax, ebx
	je	SHORT $LN437@sqlite3Whe@2
	push	eax
	call	_free
	mov	ecx, DWORD PTR _pLevel$[esp+792]
	add	esp, 4
$LN437@sqlite3Whe@2:
	mov	edx, DWORD PTR tv3595[esp+788]
	mov	DWORD PTR [ebp+32], edi
	mov	edi, DWORD PTR _pParse$[esp+784]
$LN1052@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+32]
	cmp	eax, ebx
	je	SHORT $LN1055@sqlite3Whe@2
	mov	DWORD PTR [eax+edx*4], -1
$LN1055@sqlite3Whe@2:
	or	eax, -1
	sub	eax, edx
; Line 61792
	cmp	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+36], eax
	mov	DWORD PTR _cont$[esp+788], eax
	jle	SHORT $LN441@sqlite3Whe@2
	mov	edx, DWORD PTR _pTabItem$[esp+788]
	test	BYTE PTR [edx+21], 8
	je	SHORT $LN441@sqlite3Whe@2
; Line 61793
	cmp	DWORD PTR [edi+32], ebx
	jne	SHORT $LN73@sqlite3Whe@2
	mov	DWORD PTR [edi+32], 1
$LN73@sqlite3Whe@2:
; Line 61794
	mov	eax, DWORD PTR [edi+32]
	mov	DWORD PTR [ecx+12], eax
	add	DWORD PTR [edi+32], 1
; Line 61795
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	edi, DWORD PTR [ecx+12]
	jg	SHORT $LN996@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN898@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN901@sqlite3Whe@2
$LN898@sqlite3Whe@2:
	xor	ebx, ebx
$LN996@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN441@sqlite3Whe@2
$LN901@sqlite3Whe@2:
	xor	ebx, ebx
$LN441@sqlite3Whe@2:
; Line 61800
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	mov	eax, DWORD PTR [ecx+68]
	cmp	eax, ebx
	mov	DWORD PTR tv3668[esp+788], eax
	je	$LN72@sqlite3Whe@2
; Line 61806
	mov	edi, DWORD PTR [eax]
; Line 61812
	cmp	edi, 1
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _aUsage$101642[esp+788], ecx
	mov	DWORD PTR _aConstraint$101643[esp+788], edx
	mov	DWORD PTR _j$101639[esp+788], 1
	jl	SHORT $LN795@sqlite3Whe@2
	mov	eax, DWORD PTR _j$101639[esp+788]
	npad	4
$LL71@sqlite3Whe@2:
; Line 61814
	xor	esi, esi
	cmp	edi, ebx
	jle	SHORT $LN66@sqlite3Whe@2
$LL68@sqlite3Whe@2:
; Line 61815
	cmp	DWORD PTR [ecx+esi*8], eax
	je	SHORT $LN794@sqlite3Whe@2
	add	esi, 1
	cmp	esi, edi
	jl	SHORT $LL68@sqlite3Whe@2
; Line 62114
	jmp	SHORT $LN66@sqlite3Whe@2
$LN794@sqlite3Whe@2:
; Line 61817
	mov	ecx, DWORD PTR _aConstraint$101643[esp+788]
	lea	eax, DWORD PTR [esi+esi*2]
	mov	eax, DWORD PTR [ecx+eax*4+8]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _wc$[esp+804]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _pParse$[esp+784]
	push	edx
	push	eax
	call	_sqlite3ExprCode
	mov	eax, DWORD PTR _j$101639[esp+796]
	mov	ecx, DWORD PTR _aUsage$101642[esp+796]
	add	esp, 8
$LN66@sqlite3Whe@2:
; Line 61821
	cmp	esi, edi
	je	SHORT $LN795@sqlite3Whe@2
	add	eax, 1
	cmp	eax, edi
	mov	DWORD PTR _j$101639[esp+788], eax
	jle	SHORT $LL71@sqlite3Whe@2
$LN795@sqlite3Whe@2:
; Line 61823
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN997@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN902@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN903@sqlite3Whe@2
$LN902@sqlite3Whe@2:
	xor	ebx, ebx
$LN997@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _j$101639[esp+788]
	add	ecx, -1
	mov	BYTE PTR [eax], 47			; 0000002fH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN447@sqlite3Whe@2
$LN903@sqlite3Whe@2:
	xor	ebx, ebx
$LN447@sqlite3Whe@2:
; Line 61824
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	edx, DWORD PTR tv3668[esp+788]
	mov	edi, DWORD PTR [edx+20]
	jg	SHORT $LN998@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN904@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN905@sqlite3Whe@2
$LN904@sqlite3Whe@2:
	xor	ebx, ebx
$LN998@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 47			; 0000002fH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN453@sqlite3Whe@2
$LN905@sqlite3Whe@2:
	xor	ebx, ebx
$LN453@sqlite3Whe@2:
; Line 61826
	mov	eax, DWORD PTR tv3668[esp+788]
	mov	esi, DWORD PTR [eax+28]
	mov	edi, DWORD PTR [ebp+12]
	mov	edx, DWORD PTR [eax+24]
	neg	esi
	sbb	esi, esi
	and	esi, -9					; fffffff7H
	add	esi, -2					; fffffffeH
	cmp	DWORD PTR [ebp+16], edi
	mov	DWORD PTR $T134843[esp+788], edx
	jg	SHORT $LN999@sqlite3Whe@2
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN906@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN906@sqlite3Whe@2
	xor	eax, eax
	xor	ebx, ebx
	jmp	SHORT $LN461@sqlite3Whe@2
$LN906@sqlite3Whe@2:
	xor	ebx, ebx
$LN999@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _iCur$101630[esp+788]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR tv3619[esp+788]
	mov	BYTE PTR [eax], 107			; 0000006bH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	mov	eax, edi
$LN461@sqlite3Whe@2:
	mov	edx, DWORD PTR $T134843[esp+788]
	push	edx
	mov	edx, esi
	mov	ecx, ebp
	call	_sqlite3VdbeChangeP3
; Line 61827
	mov	eax, DWORD PTR tv3668[esp+792]
	mov	esi, DWORD PTR _pLevel$[esp+792]
; Line 61828
	mov	ecx, eax
	add	esp, 4
	xor	edi, edi
	cmp	DWORD PTR [ecx], ebx
	mov	DWORD PTR [eax+28], ebx
	jle	SHORT $LN61@sqlite3Whe@2
	mov	edx, DWORD PTR _aConstraint$101643[esp+788]
	mov	eax, DWORD PTR _aUsage$101642[esp+788]
	add	edx, 8
	add	eax, 4
	mov	DWORD PTR tv6023[esp+788], edx
	mov	DWORD PTR tv6025[esp+788], eax
$LL63@sqlite3Whe@2:
; Line 61829
	mov	ecx, DWORD PTR tv6025[esp+788]
	cmp	BYTE PTR [ecx], bl
	je	SHORT $LN62@sqlite3Whe@2
; Line 61831
	mov	edx, DWORD PTR tv6023[esp+788]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _wc$[esp+804]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*8]
	call	_disableTerm
$LN62@sqlite3Whe@2:
	mov	edx, DWORD PTR tv3668[esp+788]
	add	DWORD PTR tv6025[esp+788], 8
	add	DWORD PTR tv6023[esp+788], 12		; 0000000cH
	add	edi, 1
	cmp	edi, DWORD PTR [edx]
	jl	SHORT $LL63@sqlite3Whe@2
$LN61@sqlite3Whe@2:
; Line 61835
	mov	eax, DWORD PTR _iCur$101630[esp+788]
	mov	DWORD PTR [esi+44], 2
	mov	DWORD PTR [esi+48], eax
; Line 61836
	mov	ecx, DWORD PTR [ebp+12]
	mov	DWORD PTR [esi+52], ecx
; Line 61837
	jmp	$LN1036@sqlite3Whe@2
$LN72@sqlite3Whe@2:
; Line 61840
	mov	eax, DWORD PTR [ecx+4]
	test	eax, 256				; 00000100H
	je	$LN58@sqlite3Whe@2
; Line 61846
	mov	edx, DWORD PTR _notReady$[esp+792]
	mov	eax, DWORD PTR _notReady$[esp+788]
	mov	ecx, DWORD PTR _iCur$101630[esp+788]
	push	ebx
	push	3
	push	edx
	push	eax
	push	-1
	push	ecx
	lea	edx, DWORD PTR _wc$[esp+812]
	push	edx
	call	_findTerm
; Line 61851
	mov	esi, DWORD PTR _pLevel$[esp+816]
	mov	ecx, DWORD PTR _pParse$[esp+812]
	push	eax
	mov	eax, esi
	call	_codeEqualityTerm
; Line 61852
	mov	edi, DWORD PTR [esi+32]
; Line 61853
	mov	esi, DWORD PTR [ebp+12]
	add	esp, 32					; 00000020H
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN467@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN908@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN909@sqlite3Whe@2
$LN908@sqlite3Whe@2:
	xor	ebx, ebx
$LN467@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	mov	ecx, 1
	add	DWORD PTR [ebp+12], ecx
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	BYTE PTR [eax], 35			; 00000023H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN469@sqlite3Whe@2
$LN909@sqlite3Whe@2:
	xor	ebx, ebx
$LN469@sqlite3Whe@2:
; Line 61854
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1000@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN910@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN911@sqlite3Whe@2
$LN910@sqlite3Whe@2:
	xor	ebx, ebx
$LN1000@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _iCur$101630[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 44			; 0000002cH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
; Line 61856
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	BYTE PTR [ebp+564], bl
	mov	DWORD PTR [eax+44], 21			; 00000015H
	jmp	$LN1036@sqlite3Whe@2
$LN911@sqlite3Whe@2:
	mov	eax, DWORD PTR _pLevel$[esp+788]
	xor	ebx, ebx
	mov	DWORD PTR [eax+44], 21			; 00000015H
	jmp	$LN1036@sqlite3Whe@2
$LN58@sqlite3Whe@2:
; Line 61857
	test	eax, 512				; 00000200H
	je	$LN56@sqlite3Whe@2
; Line 61865
	mov	ecx, DWORD PTR _notReady$[esp+792]
	mov	edi, DWORD PTR _notReady$[esp+788]
	mov	edx, DWORD PTR _iCur$101630[esp+788]
	push	ebx
	push	36					; 00000024H
	push	ecx
	push	edi
	push	-1
	push	edx
	lea	eax, DWORD PTR _wc$[esp+812]
	push	eax
	mov	DWORD PTR _testOp$101667[esp+816], 21	; 00000015H
	call	_findTerm
; Line 61866
	mov	ecx, DWORD PTR _notReady$[esp+820]
	mov	edx, DWORD PTR _iCur$101630[esp+816]
	push	ebx
	push	24					; 00000018H
	push	ecx
	push	edi
	mov	esi, eax
	push	-1
	push	edx
	lea	eax, DWORD PTR _wc$[esp+840]
	push	eax
	mov	DWORD PTR _pStart$101669[esp+844], esi
	call	_findTerm
; Line 61867
	mov	edi, DWORD PTR _bRev$101635[esp+844]
	add	esp, 56					; 00000038H
	cmp	edi, ebx
	mov	DWORD PTR _pEnd$101670[esp+788], eax
	je	SHORT $LN55@sqlite3Whe@2
; Line 61868
	mov	ecx, esi
; Line 61869
	mov	esi, eax
	mov	DWORD PTR _pStart$101669[esp+788], esi
; Line 61870
	mov	DWORD PTR _pEnd$101670[esp+788], ecx
$LN55@sqlite3Whe@2:
; Line 61872
	cmp	esi, ebx
	je	$LN54@sqlite3Whe@2
; Line 61874
	mov	esi, DWORD PTR [esi]
; Line 61877
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR _pParse$[esp+784]
	push	ecx
	push	edx
	call	_sqlite3ExprCode
; Line 61878
	mov	al, BYTE PTR [esi]
	add	esp, 8
	cmp	al, 70					; 00000046H
	je	SHORT $LN912@sqlite3Whe@2
	cmp	al, 69					; 00000045H
	mov	DWORD PTR $T134885[esp+788], ebx
	jne	SHORT $LN135@sqlite3Whe@2
$LN912@sqlite3Whe@2:
	mov	DWORD PTR $T134885[esp+788], 1
$LN135@sqlite3Whe@2:
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN479@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN914@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN915@sqlite3Whe@2
$LN914@sqlite3Whe@2:
	xor	ebx, ebx
$LN479@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR $T134885[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR tv3619[esp+788]
	mov	BYTE PTR [eax], 116			; 00000074H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN481@sqlite3Whe@2
$LN915@sqlite3Whe@2:
	xor	ebx, ebx
$LN481@sqlite3Whe@2:
; Line 61879
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1001@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN916@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN917@sqlite3Whe@2
$LN916@sqlite3Whe@2:
	xor	ebx, ebx
$LN1001@sqlite3Whe@2:
	add	DWORD PTR [ebp+12], 1
	mov	eax, DWORD PTR [ebp+20]
	mov	ecx, edi
	neg	ecx
	sbb	cl, cl
	lea	edx, DWORD PTR [esi+esi*4]
; Line 61881
	mov	esi, DWORD PTR _pLevel$[esp+788]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _iCur$101630[esp+788]
	and	cl, 228					; 000000e4H
	add	cl, 128					; 00000080H
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR tv3619[esp+788]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	eax, DWORD PTR _pStart$101669[esp+788]
	mov	BYTE PTR [ebp+564], bl
	call	_disableTerm
; Line 61882
	jmp	SHORT $LN493@sqlite3Whe@2
$LN917@sqlite3Whe@2:
; Line 61881
	mov	eax, DWORD PTR _pStart$101669[esp+788]
	mov	esi, DWORD PTR _pLevel$[esp+788]
	xor	ebx, ebx
	call	_disableTerm
; Line 61882
	jmp	SHORT $LN493@sqlite3Whe@2
$LN54@sqlite3Whe@2:
; Line 61883
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN491@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN919@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN920@sqlite3Whe@2
$LN919@sqlite3Whe@2:
	xor	ebx, ebx
$LN491@sqlite3Whe@2:
	add	DWORD PTR [ebp+12], 1
	mov	eax, DWORD PTR [ebp+20]
	mov	ecx, edi
	neg	ecx
	sbb	cl, cl
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _iCur$101630[esp+788]
	and	cl, 181					; 000000b5H
	add	cl, 127					; 0000007fH
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR tv3619[esp+788]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN493@sqlite3Whe@2
$LN920@sqlite3Whe@2:
	xor	ebx, ebx
$LN493@sqlite3Whe@2:
; Line 61885
	cmp	DWORD PTR _pEnd$101670[esp+788], ebx
	je	$LN52@sqlite3Whe@2
; Line 61887
	mov	edx, DWORD PTR _pEnd$101670[esp+788]
	mov	eax, DWORD PTR [edx]
; Line 61890
	mov	esi, DWORD PTR _pParse$[esp+784]
	mov	DWORD PTR _pX$101679[esp+788], eax
	mov	eax, DWORD PTR [eax+12]
	push	eax
	push	esi
	call	_sqlite3ExprCode
; Line 61891
	mov	ecx, DWORD PTR [esi+32]
	mov	eax, DWORD PTR _pLevel$[esp+796]
	mov	DWORD PTR [eax+8], ecx
	add	DWORD PTR [esi+32], 1
; Line 61892
	mov	esi, DWORD PTR [ebp+12]
	mov	edx, DWORD PTR [eax+8]
	add	esp, 8
	cmp	DWORD PTR [ebp+16], esi
	mov	DWORD PTR $T134922[esp+788], edx
	jg	SHORT $LN497@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN922@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN923@sqlite3Whe@2
$LN922@sqlite3Whe@2:
	xor	ebx, ebx
$LN497@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR $T134922[esp+788]
	mov	ecx, 1
	add	DWORD PTR [ebp+12], ecx
	mov	BYTE PTR [eax], 124			; 0000007cH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN499@sqlite3Whe@2
$LN923@sqlite3Whe@2:
	xor	ebx, ebx
$LN499@sqlite3Whe@2:
; Line 61893
	mov	eax, DWORD PTR _pX$101679[esp+788]
	mov	al, BYTE PTR [eax]
	cmp	al, 71					; 00000047H
	je	SHORT $LN50@sqlite3Whe@2
	cmp	al, 69					; 00000045H
	je	SHORT $LN50@sqlite3Whe@2
; Line 61896
	xor	eax, eax
	cmp	edi, ebx
	setne	al
	lea	eax, DWORD PTR [eax+eax+69]
	jmp	SHORT $LN1068@sqlite3Whe@2
$LN50@sqlite3Whe@2:
; Line 61894
	xor	eax, eax
	cmp	edi, ebx
	sete	al
	lea	eax, DWORD PTR [eax+eax+70]
$LN1068@sqlite3Whe@2:
; Line 61898
	mov	esi, DWORD PTR _pLevel$[esp+788]
	mov	DWORD PTR _testOp$101667[esp+788], eax
	mov	eax, DWORD PTR _pEnd$101670[esp+788]
	call	_disableTerm
$LN52@sqlite3Whe@2:
; Line 61900
	mov	eax, DWORD PTR [ebp+12]
; Line 61901
	mov	ecx, DWORD PTR _pLevel$[esp+788]
; Line 61902
	mov	edx, DWORD PTR _iCur$101630[esp+788]
	neg	edi
	sbb	edi, edi
	and	edi, -61				; ffffffc3H
	add	edi, 110				; 0000006eH
; Line 61904
	cmp	DWORD PTR _testOp$101667[esp+788], 21	; 00000015H
	mov	DWORD PTR [ecx+44], edi
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax
	je	$LN1036@sqlite3Whe@2
; Line 61905
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1002@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN924@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN925@sqlite3Whe@2
$LN924@sqlite3Whe@2:
	xor	ebx, ebx
$LN1002@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _iCur$101630[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 37			; 00000025H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN507@sqlite3Whe@2
$LN925@sqlite3Whe@2:
	xor	ebx, ebx
$LN507@sqlite3Whe@2:
; Line 61906
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	edi, DWORD PTR [eax+8]
	jg	SHORT $LN1003@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN926@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN927@sqlite3Whe@2
$LN926@sqlite3Whe@2:
	xor	ebx, ebx
$LN1003@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN513@sqlite3Whe@2
$LN927@sqlite3Whe@2:
	xor	ebx, ebx
$LN513@sqlite3Whe@2:
; Line 61907
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1004@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN928@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	$LN985@sqlite3Whe@2
$LN928@sqlite3Whe@2:
	xor	ebx, ebx
$LN1004@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	dl, BYTE PTR _testOp$101667[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR tv3619[esp+788]
	mov	BYTE PTR [eax], dl
	mov	DWORD PTR [eax+4], 355			; 00000163H
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
; Line 61908
	jmp	$LN1036@sqlite3Whe@2
$LN56@sqlite3Whe@2:
; Line 61909
	test	eax, 8192				; 00002000H
	je	$LN46@sqlite3Whe@2
; Line 61922
	mov	esi, DWORD PTR _pLevel$[esp+788]
	mov	edx, DWORD PTR [esi+56]
; Line 61933
	mov	ecx, DWORD PTR _notReady$[esp+788]
	mov	edi, eax
	shr	eax, 17					; 00000011H
	and	eax, 1
	mov	DWORD PTR _btmLimit$101696[esp+788], eax
	mov	eax, DWORD PTR _notReady$[esp+792]
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+788]
	mov	DWORD PTR _nEq$101689[esp+792], edx
	push	ecx
	lea	edx, DWORD PTR _wc$[esp+796]
	shr	edi, 16					; 00000010H
	push	edx
	and	edi, 1
	push	eax
	mov	DWORD PTR _topLimit$101695[esp+804], edi
	call	_codeAllEqualityTerms
	add	esp, 16					; 00000010H
; Line 61939
	cmp	DWORD PTR _nEq$101689[esp+788], ebx
	mov	DWORD PTR _j$101629[esp+788], ebx
	jle	SHORT $LN854@sqlite3Whe@2
	mov	eax, DWORD PTR _nEq$101689[esp+788]
	mov	DWORD PTR tv830[esp+788], eax
	mov	DWORD PTR _j$101629[esp+788], eax
	npad	3
$LL45@sqlite3Whe@2:
; Line 61940
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1005@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN929@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN930@sqlite3Whe@2
$LN929@sqlite3Whe@2:
	xor	ebx, ebx
$LN1005@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _nEq$101689[esp+788]
	add	ecx, -1
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN44@sqlite3Whe@2
$LN930@sqlite3Whe@2:
	xor	ebx, ebx
$LN44@sqlite3Whe@2:
; Line 61939
	sub	DWORD PTR tv830[esp+788], 1
	jne	SHORT $LL45@sqlite3Whe@2
$LN854@sqlite3Whe@2:
; Line 61948
	mov	edx, DWORD PTR _pIdx$101631[esp+788]
	mov	eax, DWORD PTR [edx+40]
	mov	edx, DWORD PTR _nEq$101689[esp+788]
	cmp	BYTE PTR [edx+eax], bl
	jne	SHORT $LN42@sqlite3Whe@2
; Line 61949
	mov	ecx, 24					; 00000018H
; Line 61950
	mov	DWORD PTR _btmOp$101693[esp+788], 36	; 00000024H
; Line 61951
	jmp	SHORT $LN41@sqlite3Whe@2
$LN42@sqlite3Whe@2:
; Line 61954
	mov	eax, edi
	mov	edi, DWORD PTR _btmLimit$101696[esp+788]
	mov	ecx, 36					; 00000024H
	mov	DWORD PTR _btmOp$101693[esp+788], 24	; 00000018H
	mov	DWORD PTR _topLimit$101695[esp+788], edi
	mov	DWORD PTR _btmLimit$101696[esp+788], eax
$LN41@sqlite3Whe@2:
; Line 61965
	cmp	edi, ebx
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR _nxt$101632[esp+788], eax
	je	$LN40@sqlite3Whe@2
; Line 61967
	mov	edx, DWORD PTR _pIdx$101631[esp+788]
	mov	eax, DWORD PTR [edx+8]
	mov	esi, DWORD PTR _j$101629[esp+788]
	mov	eax, DWORD PTR [eax+esi*4]
; Line 61968
	push	edx
	mov	edx, DWORD PTR _notReady$[esp+792]
	push	ecx
	mov	ecx, DWORD PTR _notReady$[esp+800]
	push	ecx
	push	edx
	push	eax
	mov	eax, DWORD PTR _iCur$101630[esp+808]
	push	eax
	lea	ecx, DWORD PTR _wc$[esp+812]
	push	ecx
	call	_findTerm
; Line 61972
	mov	ecx, DWORD PTR _pParse$[esp+812]
	mov	edi, eax
	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	ecx
	call	_sqlite3ExprCode
; Line 61973
	mov	esi, DWORD PTR [ebp+12]
	add	esp, 36					; 00000024H
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1006@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN931@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN932@sqlite3Whe@2
$LN931@sqlite3Whe@2:
	xor	ebx, ebx
$LN1006@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _nEq$101689[esp+788]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	lea	edx, DWORD PTR [ecx+ecx]
	or	ecx, -1
	sub	ecx, edx
	mov	edx, DWORD PTR _nxt$101632[esp+788]
	mov	BYTE PTR [eax], 65			; 00000041H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN531@sqlite3Whe@2
$LN932@sqlite3Whe@2:
	xor	ebx, ebx
$LN531@sqlite3Whe@2:
; Line 61974
	movzx	eax, BYTE PTR [edi+10]
; Line 61975
	mov	esi, DWORD PTR _pLevel$[esp+788]
	and	eax, 40					; 00000028H
	mov	DWORD PTR _topEq$101690[esp+788], eax
	mov	eax, edi
	call	_disableTerm
; Line 61976
	mov	DWORD PTR _testOp$101694[esp+788], 64	; 00000040H
; Line 61977
	jmp	SHORT $LN823@sqlite3Whe@2
$LN40@sqlite3Whe@2:
; Line 61978
	xor	eax, eax
	cmp	edx, ebx
	setle	al
; Line 61979
	mov	DWORD PTR _topEq$101690[esp+788], 1
	sub	eax, 1
	and	eax, 43					; 0000002bH
	add	eax, 21					; 00000015H
; Line 61981
	cmp	eax, 21					; 00000015H
	mov	DWORD PTR _testOp$101694[esp+788], eax
	je	$LN38@sqlite3Whe@2
$LN823@sqlite3Whe@2:
; Line 61982
	mov	ecx, DWORD PTR _topLimit$101695[esp+788]
	mov	edx, DWORD PTR _nEq$101689[esp+788]
; Line 61983
	mov	eax, DWORD PTR _pParse$[esp+784]
	lea	edi, DWORD PTR [ecx+edx]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pLevel$[esp+788]
	mov	DWORD PTR [edx+8], ecx
	add	DWORD PTR [eax+32], 1
; Line 61984
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1007@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN933@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN934@sqlite3Whe@2
$LN933@sqlite3Whe@2:
	xor	ebx, ebx
$LN1007@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 91			; 0000005bH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN539@sqlite3Whe@2
$LN934@sqlite3Whe@2:
	xor	ebx, ebx
$LN539@sqlite3Whe@2:
	mov	eax, DWORD PTR _pIdx$101631[esp+788]
	mov	ecx, ebp
	call	_sqlite3IndexAffinityStr
; Line 61985
	cmp	DWORD PTR _bRev$101635[esp+788], ebx
; Line 61987
	mov	esi, DWORD PTR [ebp+12]
	je	SHORT $LN37@sqlite3Whe@2
	mov	ecx, DWORD PTR _topEq$101690[esp+788]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -14				; fffffff2H
	add	ecx, 100				; 00000064H
	cmp	DWORD PTR [ebp+16], esi
	mov	DWORD PTR _op$101712[esp+788], ecx
	jg	SHORT $LN543@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN936@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	$LN989@sqlite3Whe@2
$LN936@sqlite3Whe@2:
	mov	ecx, DWORD PTR _op$101712[esp+788]
	xor	ebx, ebx
$LN543@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _nxt$101632[esp+788]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
; Line 61988
	jmp	$LN557@sqlite3Whe@2
$LN37@sqlite3Whe@2:
; Line 61989
	cmp	DWORD PTR [ebp+16], esi
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	edi, DWORD PTR [eax+8]
	jg	SHORT $LN549@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN938@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	$LN989@sqlite3Whe@2
$LN938@sqlite3Whe@2:
	xor	ebx, ebx
$LN549@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	mov	ecx, 1
	add	DWORD PTR [ebp+12], ecx
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 124			; 0000007cH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
; Line 61990
	jmp	SHORT $LN557@sqlite3Whe@2
$LN38@sqlite3Whe@2:
; Line 61991
	cmp	DWORD PTR _bRev$101635[esp+788], ebx
	je	SHORT $LN557@sqlite3Whe@2
; Line 61992
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1008@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN939@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN989@sqlite3Whe@2
$LN939@sqlite3Whe@2:
	xor	ebx, ebx
$LN1008@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	edx, DWORD PTR tv3619[esp+788]
	mov	BYTE PTR [eax], 52			; 00000034H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN557@sqlite3Whe@2
$LN989@sqlite3Whe@2:
	xor	ebx, ebx
$LN557@sqlite3Whe@2:
; Line 62004
	cmp	DWORD PTR _btmLimit$101696[esp+788], ebx
	je	$LN33@sqlite3Whe@2
; Line 62006
	mov	ecx, DWORD PTR _pIdx$101631[esp+788]
	mov	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _j$101629[esp+788]
	mov	eax, DWORD PTR [eax+edx*4]
; Line 62007
	mov	edx, DWORD PTR _notReady$[esp+792]
	push	ecx
	mov	ecx, DWORD PTR _btmOp$101693[esp+792]
	push	ecx
	mov	ecx, DWORD PTR _notReady$[esp+796]
	push	edx
	mov	edx, DWORD PTR _iCur$101630[esp+800]
	push	ecx
	push	eax
	push	edx
	lea	eax, DWORD PTR _wc$[esp+812]
	push	eax
	call	_findTerm
	mov	edi, eax
; Line 62011
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _pParse$[esp+812]
	push	edx
	push	eax
	call	_sqlite3ExprCode
; Line 62012
	mov	esi, DWORD PTR [ebp+12]
	add	esp, 36					; 00000024H
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN561@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN943@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN944@sqlite3Whe@2
$LN943@sqlite3Whe@2:
	xor	ebx, ebx
$LN561@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR _nxt$101632[esp+788]
	or	ecx, -1
	sub	ecx, DWORD PTR _nEq$101689[esp+788]
	mov	BYTE PTR [eax], 65			; 00000041H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN563@sqlite3Whe@2
$LN944@sqlite3Whe@2:
	xor	ebx, ebx
$LN563@sqlite3Whe@2:
; Line 62013
	movzx	eax, BYTE PTR [edi+10]
; Line 62014
	mov	esi, DWORD PTR _pLevel$[esp+788]
	and	eax, 40					; 00000028H
	mov	DWORD PTR _btmEq$101691[esp+788], eax
	mov	eax, edi
	call	_disableTerm
; Line 62015
	jmp	SHORT $LN32@sqlite3Whe@2
$LN33@sqlite3Whe@2:
; Line 62016
	mov	DWORD PTR _btmEq$101691[esp+788], 1
$LN32@sqlite3Whe@2:
; Line 62018
	cmp	DWORD PTR _nEq$101689[esp+788], ebx
	jg	SHORT $LN30@sqlite3Whe@2
	cmp	DWORD PTR _btmLimit$101696[esp+788], ebx
	jne	SHORT $LN30@sqlite3Whe@2
; Line 62029
	cmp	DWORD PTR _bRev$101635[esp+788], ebx
	je	SHORT $LN26@sqlite3Whe@2
; Line 62030
	mov	DWORD PTR _testOp$101694[esp+788], 21	; 00000015H
; Line 62031
	jmp	$LN583@sqlite3Whe@2
$LN26@sqlite3Whe@2:
; Line 62032
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1009@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN945@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	$LN953@sqlite3Whe@2
$LN945@sqlite3Whe@2:
	xor	ebx, ebx
$LN1009@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	edx, DWORD PTR tv3619[esp+788]
	mov	BYTE PTR [eax], 127			; 0000007fH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	$LN583@sqlite3Whe@2
$LN30@sqlite3Whe@2:
; Line 62020
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	eax, DWORD PTR _btmLimit$101696[esp+788]
	mov	ecx, DWORD PTR _nEq$101689[esp+788]
	lea	edi, DWORD PTR [eax+ecx]
	jg	SHORT $LN1010@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN946@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN947@sqlite3Whe@2
$LN946@sqlite3Whe@2:
	xor	ebx, ebx
$LN1010@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 91			; 0000005bH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN571@sqlite3Whe@2
$LN947@sqlite3Whe@2:
	xor	ebx, ebx
$LN571@sqlite3Whe@2:
	mov	eax, DWORD PTR _pIdx$101631[esp+788]
	mov	ecx, ebp
	call	_sqlite3IndexAffinityStr
; Line 62021
	cmp	DWORD PTR _bRev$101635[esp+788], ebx
	je	$LN29@sqlite3Whe@2
; Line 62022
	mov	eax, DWORD PTR _pParse$[esp+784]
	mov	edx, DWORD PTR [eax+32]
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	mov	DWORD PTR [ecx+8], edx
	add	DWORD PTR [eax+32], 1
; Line 62023
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	edi, DWORD PTR [ecx+8]
	jg	SHORT $LN575@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN949@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN950@sqlite3Whe@2
$LN949@sqlite3Whe@2:
	xor	ebx, ebx
$LN575@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	mov	ecx, 1
	add	DWORD PTR [ebp+12], ecx
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	BYTE PTR [eax], 124			; 0000007cH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
; Line 62024
	mov	DWORD PTR _testOp$101694[esp+788], 38	; 00000026H
; Line 62025
	jmp	SHORT $LN583@sqlite3Whe@2
$LN950@sqlite3Whe@2:
; Line 62023
	xor	ebx, ebx
; Line 62024
	mov	DWORD PTR _testOp$101694[esp+788], 38	; 00000026H
; Line 62025
	jmp	SHORT $LN583@sqlite3Whe@2
$LN29@sqlite3Whe@2:
; Line 62026
	mov	ecx, DWORD PTR _btmEq$101691[esp+788]
; Line 62027
	mov	esi, DWORD PTR [ebp+12]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 121				; 00000079H
	add	ecx, 7
	cmp	DWORD PTR [ebp+16], esi
	mov	DWORD PTR _op$101727[esp+788], ecx
	jg	SHORT $LN581@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN952@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN953@sqlite3Whe@2
$LN952@sqlite3Whe@2:
	mov	ecx, DWORD PTR _op$101727[esp+788]
	xor	ebx, ebx
$LN581@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _nxt$101632[esp+788]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN583@sqlite3Whe@2
$LN953@sqlite3Whe@2:
; Line 62025
	xor	ebx, ebx
; Line 62027
$LN583@sqlite3Whe@2:
; Line 62040
	cmp	DWORD PTR _testOp$101694[esp+788], 21	; 00000015H
	mov	edi, DWORD PTR [ebp+12]
	je	$LN622@sqlite3Whe@2
; Line 62041
	cmp	DWORD PTR [ebp+16], edi
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	esi, DWORD PTR [eax+8]
	jg	SHORT $LN1011@sqlite3Whe@2
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN954@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN955@sqlite3Whe@2
$LN954@sqlite3Whe@2:
	xor	ebx, ebx
$LN1011@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN597@sqlite3Whe@2
$LN955@sqlite3Whe@2:
	xor	ebx, ebx
$LN597@sqlite3Whe@2:
; Line 62042
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1012@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN956@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN957@sqlite3Whe@2
$LN956@sqlite3Whe@2:
	xor	ebx, ebx
$LN1012@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	dl, BYTE PTR _testOp$101694[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	BYTE PTR [eax], dl
	mov	edx, DWORD PTR _nxt$101632[esp+788]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN603@sqlite3Whe@2
$LN957@sqlite3Whe@2:
	xor	ebx, ebx
$LN603@sqlite3Whe@2:
; Line 62043
	cmp	DWORD PTR _topEq$101690[esp+788], ebx
	je	SHORT $LN1054@sqlite3Whe@2
	cmp	DWORD PTR _bRev$101635[esp+788], ebx
	je	SHORT $LN22@sqlite3Whe@2
$LN1054@sqlite3Whe@2:
	cmp	DWORD PTR _btmEq$101691[esp+788], ebx
	jne	SHORT $LN622@sqlite3Whe@2
	cmp	DWORD PTR _bRev$101635[esp+788], ebx
	je	SHORT $LN622@sqlite3Whe@2
$LN22@sqlite3Whe@2:
; Line 62044
	mov	esi, DWORD PTR [ebp+20]
	cmp	esi, ebx
	je	SHORT $LN824@sqlite3Whe@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN620@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN824@sqlite3Whe@2
$LN620@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN622@sqlite3Whe@2
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [esi+eax*4+12]
	lea	esi, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	mov	DWORD PTR [esi+12], OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
	mov	DWORD PTR [esi+16], -2			; fffffffeH
	jmp	SHORT $LN622@sqlite3Whe@2
$LN824@sqlite3Whe@2:
	mov	ecx, OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN622@sqlite3Whe@2:
; Line 62047
	mov	eax, DWORD PTR _btmLimit$101696[esp+788]
	or	eax, DWORD PTR _topLimit$101695[esp+788]
	je	$LN637@sqlite3Whe@2
; Line 62048
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1013@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN958@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN959@sqlite3Whe@2
$LN958@sqlite3Whe@2:
	xor	ebx, ebx
$LN1013@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	edx, DWORD PTR _nEq$101689[esp+788]
	mov	BYTE PTR [eax], 3
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN631@sqlite3Whe@2
$LN959@sqlite3Whe@2:
	xor	ebx, ebx
$LN631@sqlite3Whe@2:
; Line 62049
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1014@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN960@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN961@sqlite3Whe@2
$LN960@sqlite3Whe@2:
	xor	ebx, ebx
$LN1014@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	mov	ecx, 1
	add	DWORD PTR [ebp+12], ecx
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _cont$[esp+788]
	mov	BYTE PTR [eax], 65			; 00000041H
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN637@sqlite3Whe@2
$LN961@sqlite3Whe@2:
	xor	ebx, ebx
$LN637@sqlite3Whe@2:
; Line 62051
	cmp	DWORD PTR _omitTable$101634[esp+788], ebx
	jne	$LN1045@sqlite3Whe@2
; Line 62052
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1015@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN962@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN963@sqlite3Whe@2
$LN962@sqlite3Whe@2:
	xor	ebx, ebx
$LN1015@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 54			; 00000036H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN643@sqlite3Whe@2
$LN963@sqlite3Whe@2:
	xor	ebx, ebx
$LN643@sqlite3Whe@2:
; Line 62053
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1016@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN964@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN965@sqlite3Whe@2
$LN964@sqlite3Whe@2:
	xor	ebx, ebx
$LN1016@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _iCur$101630[esp+788]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 128			; 00000080H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN1045@sqlite3Whe@2
$LN965@sqlite3Whe@2:
	xor	ebx, ebx
$LN1045@sqlite3Whe@2:
; Line 62058
	mov	eax, DWORD PTR _bRev$101635[esp+788]
	mov	ecx, DWORD PTR _pLevel$[esp+788]
; Line 62059
	mov	edx, DWORD PTR _iIdxCur$101633[esp+788]
	neg	eax
	sbb	eax, eax
	and	eax, -61				; ffffffc3H
	add	eax, 110				; 0000006eH
	mov	DWORD PTR [ecx+44], eax
	mov	DWORD PTR [ecx+48], edx
; Line 62060
	mov	DWORD PTR [ecx+52], edi
	jmp	$LN1036@sqlite3Whe@2
$LN46@sqlite3Whe@2:
; Line 62061
	test	eax, 4096				; 00001000H
	je	$LN17@sqlite3Whe@2
; Line 62071
	mov	ecx, DWORD PTR _notReady$[esp+792]
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	edx, DWORD PTR _notReady$[esp+788]
	mov	edi, DWORD PTR [eax+56]
	mov	esi, DWORD PTR _pLevel$[esp+788]
	push	ecx
	mov	ecx, DWORD PTR _pParse$[esp+788]
	push	edx
	lea	eax, DWORD PTR _wc$[esp+796]
	push	eax
	push	ecx
	call	_codeAllEqualityTerms
; Line 62072
	mov	edx, esi
; Line 62077
	mov	esi, DWORD PTR [ebp+12]
	mov	eax, DWORD PTR [edx+32]
	add	esp, 16					; 00000010H
	cmp	DWORD PTR [ebp+16], esi
	mov	DWORD PTR _nxt$101632[esp+788], eax
	jg	SHORT $LN1017@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN966@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN967@sqlite3Whe@2
$LN966@sqlite3Whe@2:
	xor	ebx, ebx
$LN1017@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 91			; 0000005bH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN657@sqlite3Whe@2
$LN967@sqlite3Whe@2:
	xor	ebx, ebx
$LN657@sqlite3Whe@2:
	mov	eax, DWORD PTR _pIdx$101631[esp+788]
	mov	ecx, ebp
	call	_sqlite3IndexAffinityStr
; Line 62078
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	edi, DWORD PTR [eax+8]
	jg	SHORT $LN661@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN969@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN970@sqlite3Whe@2
$LN969@sqlite3Whe@2:
	xor	ebx, ebx
$LN661@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 124			; 0000007cH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN663@sqlite3Whe@2
$LN970@sqlite3Whe@2:
	xor	ebx, ebx
$LN663@sqlite3Whe@2:
; Line 62085
	cmp	DWORD PTR _bRev$101635[esp+788], ebx
; Line 62087
	mov	esi, DWORD PTR [ebp+12]
	je	$LN16@sqlite3Whe@2
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1018@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN971@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN972@sqlite3Whe@2
$LN971@sqlite3Whe@2:
	xor	ebx, ebx
$LN1018@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _iIdxCur$101633[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _nxt$101632[esp+788]
	mov	BYTE PTR [eax], 86			; 00000056H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN669@sqlite3Whe@2
$LN972@sqlite3Whe@2:
	xor	ebx, ebx
$LN669@sqlite3Whe@2:
; Line 62088
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	edx, DWORD PTR _pLevel$[esp+788]
	mov	edi, DWORD PTR [edx+8]
	jg	SHORT $LN1019@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN973@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN973@sqlite3Whe@2
	xor	edi, edi
	xor	ebx, ebx
	jmp	SHORT $LN675@sqlite3Whe@2
$LN973@sqlite3Whe@2:
	xor	ebx, ebx
$LN1019@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [eax+4], edi
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	mov	edi, esi
$LN675@sqlite3Whe@2:
; Line 62089
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1020@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN974@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN975@sqlite3Whe@2
$LN974@sqlite3Whe@2:
	xor	ebx, ebx
$LN1020@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _nxt$101632[esp+788]
	mov	BYTE PTR [eax], 38			; 00000026H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
; Line 62090
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	BYTE PTR [ebp+564], bl
	mov	DWORD PTR [eax+44], 49			; 00000031H
; Line 62091
	jmp	$LN15@sqlite3Whe@2
$LN975@sqlite3Whe@2:
; Line 62090
	mov	eax, DWORD PTR _pLevel$[esp+788]
	xor	ebx, ebx
	mov	DWORD PTR [eax+44], 49			; 00000031H
; Line 62091
	jmp	$LN15@sqlite3Whe@2
$LN16@sqlite3Whe@2:
; Line 62093
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1021@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN976@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN977@sqlite3Whe@2
$LN976@sqlite3Whe@2:
	xor	ebx, ebx
$LN1021@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	edx, DWORD PTR _nxt$101632[esp+788]
	mov	BYTE PTR [eax], 128			; 00000080H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN687@sqlite3Whe@2
$LN977@sqlite3Whe@2:
	xor	ebx, ebx
$LN687@sqlite3Whe@2:
; Line 62094
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	edi, DWORD PTR [eax+8]
	jg	SHORT $LN1022@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN978@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN978@sqlite3Whe@2
	xor	edi, edi
	xor	ebx, ebx
	jmp	SHORT $LN693@sqlite3Whe@2
$LN978@sqlite3Whe@2:
	xor	ebx, ebx
$LN1022@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+4], edi
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	mov	edi, esi
$LN693@sqlite3Whe@2:
; Line 62095
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1023@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN979@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN979@sqlite3Whe@2
	xor	eax, eax
	xor	ebx, ebx
	jmp	SHORT $LN701@sqlite3Whe@2
$LN979@sqlite3Whe@2:
	xor	ebx, ebx
$LN1023@sqlite3Whe@2:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _iIdxCur$101633[esp+788]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _nxt$101632[esp+788]
	mov	BYTE PTR [eax], 64			; 00000040H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	mov	eax, esi
$LN701@sqlite3Whe@2:
	mov	esi, DWORD PTR [ebp+20]
	cmp	esi, ebx
	je	SHORT $LN826@sqlite3Whe@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN722@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN826@sqlite3Whe@2
$LN722@sqlite3Whe@2:
	cmp	eax, ebx
	jl	SHORT $LN718@sqlite3Whe@2
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN717@sqlite3Whe@2
$LN718@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN720@sqlite3Whe@2
$LN717@sqlite3Whe@2:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [esi+edx*4+12]
	mov	eax, DWORD PTR [esi+edx*4+16]
	lea	esi, DWORD PTR [esi+edx*4]
	call	_freeP3
	mov	DWORD PTR [esi+12], OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
	mov	DWORD PTR [esi+16], -2			; fffffffeH
	jmp	SHORT $LN720@sqlite3Whe@2
$LN826@sqlite3Whe@2:
	mov	ecx, OFFSET ??_C@_01MIFGBAGJ@?$CL?$AA@
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN720@sqlite3Whe@2:
; Line 62096
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	DWORD PTR [eax+44], 110			; 0000006eH
$LN15@sqlite3Whe@2:
; Line 62098
	cmp	DWORD PTR _omitTable$101634[esp+788], ebx
	jne	$LN1046@sqlite3Whe@2
; Line 62099
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1024@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN980@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN981@sqlite3Whe@2
$LN980@sqlite3Whe@2:
	xor	ebx, ebx
$LN1024@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	BYTE PTR [eax], 54			; 00000036H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN729@sqlite3Whe@2
$LN981@sqlite3Whe@2:
	xor	ebx, ebx
$LN729@sqlite3Whe@2:
; Line 62100
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1025@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN982@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN983@sqlite3Whe@2
$LN982@sqlite3Whe@2:
	xor	ebx, ebx
$LN1025@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _iCur$101630[esp+788]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
; Line 62102
	mov	edx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	BYTE PTR [eax], 128			; 00000080H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	BYTE PTR [ebp+564], bl
	mov	DWORD PTR [eax+48], edx
; Line 62103
	mov	DWORD PTR [eax+52], edi
; Line 62104
	jmp	$LN1036@sqlite3Whe@2
$LN983@sqlite3Whe@2:
; Line 62100
	xor	ebx, ebx
$LN1046@sqlite3Whe@2:
; Line 62102
	mov	eax, DWORD PTR _pLevel$[esp+788]
	mov	edx, DWORD PTR _iIdxCur$101633[esp+788]
	mov	DWORD PTR [eax+48], edx
; Line 62103
	mov	DWORD PTR [eax+52], edi
; Line 62104
	jmp	$LN1036@sqlite3Whe@2
$LN17@sqlite3Whe@2:
; Line 62111
	mov	edi, DWORD PTR _iCur$101630[esp+788]
	mov	DWORD PTR [ecx+44], 110			; 0000006eH
	mov	DWORD PTR [ecx+48], edi
; Line 62112
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1026@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	je	SHORT $LN984@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN984@sqlite3Whe@2
	xor	esi, esi
	xor	ebx, ebx
	mov	esi, 1
	mov	DWORD PTR [ecx+52], esi
	jmp	SHORT $LN1036@sqlite3Whe@2
$LN984@sqlite3Whe@2:
	xor	ebx, ebx
$LN1026@sqlite3Whe@2:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR tv3619[esp+788]
	mov	BYTE PTR [eax], 127			; 0000007fH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	add	esi, 1
	mov	BYTE PTR [ebp+564], bl
	mov	DWORD PTR [ecx+52], esi
	jmp	SHORT $LN1036@sqlite3Whe@2
$LN985@sqlite3Whe@2:
	xor	ebx, ebx
$LN1036@sqlite3Whe@2:
; Line 62114
	mov	eax, DWORD PTR _maskSet$[esp+788]
	xor	ecx, ecx
	cmp	eax, ebx
	jle	SHORT $LN1027@sqlite3Whe@2
	mov	edx, DWORD PTR _iCur$101630[esp+788]
$LL748@sqlite3Whe@2:
	cmp	DWORD PTR _maskSet$[esp+ecx*4+792], edx
	je	$LN796@sqlite3Whe@2
	add	ecx, 1
	cmp	ecx, eax
	jl	SHORT $LL748@sqlite3Whe@2
$LN1027@sqlite3Whe@2:
	xor	eax, eax
	xor	edx, edx
$LN749@sqlite3Whe@2:
	not	eax
	and	DWORD PTR _notReady$[esp+788], eax
; Line 62119
	mov	eax, DWORD PTR _wc$[esp+796]
	not	edx
	and	DWORD PTR _notReady$[esp+792], edx
	cmp	eax, ebx
	mov	edi, eax
	jle	SHORT $LN986@sqlite3Whe@2
	mov	esi, DWORD PTR _wc$[esp+804]
	add	esi, 12					; 0000000cH
$LL12@sqlite3Whe@2:
; Line 62121
	test	BYTE PTR [esi], 6
	jne	SHORT $LN11@sqlite3Whe@2
; Line 62122
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+24]
	and	eax, DWORD PTR _notReady$[esp+788]
	and	ecx, DWORD PTR _notReady$[esp+792]
	or	eax, ecx
	jne	SHORT $LN11@sqlite3Whe@2
; Line 62125
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	cmp	DWORD PTR [ecx+12], ebx
	mov	eax, DWORD PTR [esi-12]
	je	SHORT $LN7@sqlite3Whe@2
	test	BYTE PTR [eax+2], 1
	je	SHORT $LN11@sqlite3Whe@2
$LN7@sqlite3Whe@2:
; Line 62128
	mov	edx, DWORD PTR _cont$[esp+788]
	push	1
	push	edx
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+796]
	push	eax
	call	_sqlite3ExprIfFalse
	add	esp, 16					; 00000010H
; Line 62129
	or	BYTE PTR [esi], 4
$LN11@sqlite3Whe@2:
	sub	edi, 1
	add	esi, 40					; 00000028H
	cmp	edi, ebx
	jg	SHORT $LL12@sqlite3Whe@2
$LN986@sqlite3Whe@2:
; Line 62135
	mov	ecx, DWORD PTR _pLevel$[esp+788]
	mov	edi, DWORD PTR [ecx+12]
	cmp	edi, ebx
	je	$LN76@sqlite3Whe@2
; Line 62136
	mov	edx, DWORD PTR [ebp+12]
	mov	eax, ecx
	mov	DWORD PTR [eax+40], edx
; Line 62137
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN1028@sqlite3Whe@2
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN987@sqlite3Whe@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN988@sqlite3Whe@2
$LN987@sqlite3Whe@2:
	xor	ebx, ebx
$LN1028@sqlite3Whe@2:
	mov	eax, DWORD PTR [ebp+20]
	mov	ecx, 1
	add	DWORD PTR [ebp+12], ecx
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN755@sqlite3Whe@2
$LN796@sqlite3Whe@2:
; Line 62114
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	jmp	$LN749@sqlite3Whe@2
$LN988@sqlite3Whe@2:
; Line 62137
	xor	ebx, ebx
$LN755@sqlite3Whe@2:
; Line 62139
	xor	edi, edi
	cmp	DWORD PTR _wc$[esp+796], ebx
	jle	SHORT $LN76@sqlite3Whe@2
	mov	esi, DWORD PTR _wc$[esp+804]
	add	esi, 12					; 0000000cH
	npad	3
$LL5@sqlite3Whe@2:
; Line 62140
	test	BYTE PTR [esi], 6
	jne	SHORT $LN4@sqlite3Whe@2
; Line 62141
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR [esi+24]
	and	eax, DWORD PTR _notReady$[esp+788]
	and	ecx, DWORD PTR _notReady$[esp+792]
	or	eax, ecx
	jne	SHORT $LN4@sqlite3Whe@2
; Line 62143
	mov	ecx, DWORD PTR _cont$[esp+788]
	mov	edx, DWORD PTR [esi-12]
	mov	eax, DWORD PTR _pParse$[esp+784]
	push	1
	push	ecx
	push	edx
	push	eax
	call	_sqlite3ExprIfFalse
	add	esp, 16					; 00000010H
; Line 62144
	or	BYTE PTR [esi], 4
$LN4@sqlite3Whe@2:
	add	edi, 1
	add	esi, 40					; 00000028H
	cmp	edi, DWORD PTR _wc$[esp+796]
	jl	SHORT $LL5@sqlite3Whe@2
$LN76@sqlite3Whe@2:
; Line 61759
	mov	ecx, DWORD PTR _pTabList$[esp+784]
	mov	eax, DWORD PTR _i$[esp+788]
	movsx	edx, WORD PTR [ecx]
	add	DWORD PTR _pLevel$[esp+788], 76		; 0000004cH
	add	eax, 1
	cmp	eax, edx
	mov	DWORD PTR _i$[esp+788], eax
	jl	$LL1029@sqlite3Whe@2
	mov	edi, DWORD PTR _pWInfo$[esp+788]
$LN990@sqlite3Whe@2:
; Line 62199
	mov	eax, DWORD PTR _cont$[esp+788]
	mov	DWORD PTR [edi+12], eax
; Line 62200
	mov	esi, DWORD PTR _wc$[esp+796]
	mov	ebp, DWORD PTR _wc$[esp+804]
	add	esi, -1
	cmp	esi, ebx
	jl	SHORT $LN761@sqlite3Whe@2
	npad	3
$LL763@sqlite3Whe@2:
	test	BYTE PTR [ebp+12], 1
	je	SHORT $LN762@sqlite3Whe@2
	mov	ecx, DWORD PTR [ebp]
	push	ecx
	call	_sqlite3ExprDelete
	add	esp, 4
$LN762@sqlite3Whe@2:
	sub	esi, 1
	add	ebp, 40					; 00000028H
	cmp	esi, ebx
	jge	SHORT $LL763@sqlite3Whe@2
	mov	ebp, DWORD PTR _wc$[esp+804]
$LN761@sqlite3Whe@2:
	lea	edx, DWORD PTR _wc$[esp+812]
	cmp	ebp, edx
	je	SHORT $LN769@sqlite3Whe@2
	cmp	ebp, ebx
	je	SHORT $LN769@sqlite3Whe@2
	push	ebp
	call	_free
	add	esp, 4
$LN769@sqlite3Whe@2:
; Line 62201
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 62208
	add	esp, 772				; 00000304H
	ret	0
_sqlite3WhereBegin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@MAICLPMM@Unable?5to?5close?5due?5to?5unfinalis@ ; `string'
;	COMDAT ??_C@_0CO@MAICLPMM@Unable?5to?5close?5due?5to?5unfinalis@
CONST	SEGMENT
??_C@_0CO@MAICLPMM@Unable?5to?5close?5due?5to?5unfinalis@ DB 'Unable to c'
	DB	'lose due to unfinalised statements', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3_close
_TEXT	SEGMENT
_i$ = 8							; size = 4
_db$ = 8						; size = 4
_sqlite3_close PROC					; COMDAT
; Line 66156
	push	ebx
; Line 66160
	mov	ebx, DWORD PTR _db$[esp]
	test	ebx, ebx
; Line 66161
	je	$LN120@sqlite3_cl@2
; Line 66163
	mov	eax, DWORD PTR [ebx+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN25@sqlite3_cl@2
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN25@sqlite3_cl@2
	cmp	eax, -264537850				; f03b7906H
	je	SHORT $LN25@sqlite3_cl@2
; Line 66164
	mov	eax, 21					; 00000015H
	pop	ebx
; Line 66265
	ret	0
$LN25@sqlite3_cl@2:
; Line 66174
	push	0
	call	_sqlite3ResetInternalSchema
; Line 66183
	push	68					; 00000044H
	mov	eax, ebx
	call	_callFinaliser
	add	esp, 8
; Line 66186
	cmp	DWORD PTR [ebx+80], 0
	je	SHORT $LN24@sqlite3_cl@2
; Line 66188
	push	OFFSET ??_C@_0CO@MAICLPMM@Unable?5to?5close?5due?5to?5unfinalis@
	push	5
	mov	eax, ebx
	call	_sqlite3Error
	add	esp, 8
; Line 66189
	mov	eax, 5
	pop	ebx
; Line 66265
	ret	0
$LN24@sqlite3_cl@2:
; Line 66201
	cmp	DWORD PTR [ebx+48], -1623446221		; 9f3c2d33H
	je	SHORT $LN23@sqlite3_cl@2
	mov	eax, ebx
	call	_sqlite3SafetyOn
	test	eax, eax
	je	SHORT $LN23@sqlite3_cl@2
; Line 66203
	mov	eax, 1
	pop	ebx
; Line 66265
	ret	0
$LN23@sqlite3_cl@2:
	push	ebp
	push	esi
	push	edi
; Line 66206
	xor	edi, edi
	cmp	DWORD PTR [ebx], edi
	jle	SHORT $LN20@sqlite3_cl@2
	xor	ebp, ebp
$LL22@sqlite3_cl@2:
; Line 66207
	mov	esi, DWORD PTR [ebx+4]
; Line 66208
	mov	eax, DWORD PTR [esi+ebp+4]
	add	esi, ebp
	test	eax, eax
	je	SHORT $LN21@sqlite3_cl@2
; Line 66209
	push	eax
	call	_sqlite3BtreeClose
	add	esp, 4
; Line 66211
	cmp	edi, 1
	mov	DWORD PTR [esi+4], 0
	je	SHORT $LN21@sqlite3_cl@2
; Line 66212
	mov	DWORD PTR [esi+20], 0
$LN21@sqlite3_cl@2:
; Line 66206
	add	edi, 1
	add	ebp, 24					; 00000018H
	cmp	edi, DWORD PTR [ebx]
	jl	SHORT $LL22@sqlite3_cl@2
$LN20@sqlite3_cl@2:
; Line 66216
	push	0
	call	_sqlite3ResetInternalSchema
; Line 66219
	mov	edi, DWORD PTR [ebx+228]
	add	esp, 4
	test	edi, edi
	je	SHORT $LN15@sqlite3_cl@2
	npad	6
$LL17@sqlite3_cl@2:
; Line 66221
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $LN16@sqlite3_cl@2
$LL14@sqlite3_cl@2:
; Line 66222
	mov	esi, DWORD PTR [eax+12]
; Line 66223
	push	eax
	call	_free
	add	esp, 4
	test	esi, esi
	mov	eax, esi
	jne	SHORT $LL14@sqlite3_cl@2
$LN16@sqlite3_cl@2:
; Line 66219
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $LL17@sqlite3_cl@2
$LN15@sqlite3_cl@2:
; Line 66227
	mov	eax, DWORD PTR [ebx+256]
	test	eax, eax
	mov	DWORD PTR _i$[esp+12], eax
	je	SHORT $LN9@sqlite3_cl@2
	npad	3
$LL119@sqlite3_cl@2:
; Line 66228
	mov	eax, DWORD PTR _i$[esp+12]
	mov	ebp, DWORD PTR [eax+8]
	lea	esi, DWORD PTR [ebp+16]
	mov	edi, 3
	npad	1
$LL8@sqlite3_cl@2:
; Line 66231
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN7@sqlite3_cl@2
; Line 66232
	mov	ecx, DWORD PTR [esi-8]
	push	ecx
	call	eax
	add	esp, 4
$LN7@sqlite3_cl@2:
	add	esi, 20					; 00000014H
	sub	edi, 1
	jne	SHORT $LL8@sqlite3_cl@2
; Line 66235
	test	ebp, ebp
	je	SHORT $LN10@sqlite3_cl@2
	push	ebp
	call	_free
	add	esp, 4
$LN10@sqlite3_cl@2:
	mov	edx, DWORD PTR _i$[esp+12]
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	mov	DWORD PTR _i$[esp+12], eax
	jne	SHORT $LL119@sqlite3_cl@2
$LN9@sqlite3_cl@2:
; Line 66237
	lea	esi, DWORD PTR [ebx+248]
	call	_sqlite3HashClear
; Line 66239
	mov	esi, DWORD PTR [ebx+188]
	test	esi, esi
	je	SHORT $LN2@sqlite3_cl@2
$LL4@sqlite3_cl@2:
; Line 66240
	mov	eax, DWORD PTR [esi+8]
; Line 66241
	test	eax, eax
	je	SHORT $LN3@sqlite3_cl@2
	push	eax
	call	_free
	add	esp, 4
$LN3@sqlite3_cl@2:
	mov	esi, DWORD PTR [esi]
	test	esi, esi
	jne	SHORT $LL4@sqlite3_cl@2
$LN2@sqlite3_cl@2:
; Line 66243
	lea	esi, DWORD PTR [ebx+180]
	call	_sqlite3HashClear
; Line 66246
	lea	esi, DWORD PTR [ebx+220]
	call	_sqlite3HashClear
; Line 66247
	push	0
	push	0
	mov	eax, ebx
	call	_sqlite3Error
; Line 66248
	mov	esi, DWORD PTR [ebx+140]
	add	esp, 8
	test	esi, esi
	je	SHORT $LN118@sqlite3_cl@2
; Line 66249
	push	esi
	call	_sqlite3VdbeMemRelease
	push	esi
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	call	_free
	add	esp, 8
$LN118@sqlite3_cl@2:
; Line 66251
	xor	esi, esi
	cmp	DWORD PTR [ebx+72], esi
	jle	SHORT $LN77@sqlite3_cl@2
	mov	edi, DWORD PTR __imp__FreeLibrary@4
$LL79@sqlite3_cl@2:
	mov	eax, DWORD PTR [ebx+76]
	mov	ecx, DWORD PTR [eax+esi*4]
	push	ecx
	call	edi
	add	esi, 1
	cmp	esi, DWORD PTR [ebx+72]
	jl	SHORT $LL79@sqlite3_cl@2
$LN77@sqlite3_cl@2:
	mov	eax, DWORD PTR [ebx+76]
	test	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	je	SHORT $LN87@sqlite3_cl@2
	push	eax
	call	_free
	add	esp, 4
$LN87@sqlite3_cl@2:
; Line 66261
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR [ebx+48], -1254786768		; b5357930H
	mov	eax, DWORD PTR [edx+44]
	test	eax, eax
	je	SHORT $LN92@sqlite3_cl@2
	push	eax
	call	_free
	add	esp, 4
$LN92@sqlite3_cl@2:
; Line 66262
	push	ebx
	call	_free
	add	esp, 4
; Line 66263
	or	eax, -1
	call	_sqlite3WinThreadSpecificData
$LN120@sqlite3_cl@2:
; Line 66264
	xor	eax, eax
	pop	ebx
; Line 66265
	ret	0
_sqlite3_close ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeRestoreOrClearCursorPosition
_TEXT	SEGMENT
_pCur$ = 8						; size = 4
_sqlite3BtreeRestoreOrClearCursorPosition PROC		; COMDAT
; Line 23125
	push	esi
; Line 23129
	mov	esi, DWORD PTR _pCur$[esp]
	cmp	BYTE PTR [esi+84], 0
	je	SHORT $LN2@sqlite3Btr@38
; Line 23130
	mov	eax, 4
	pop	esi
; Line 23141
	ret	0
$LN2@sqlite3Btr@38:
; Line 23134
	mov	ecx, DWORD PTR [esi+76]
	mov	edx, DWORD PTR [esi+72]
	push	edi
	lea	eax, DWORD PTR [esi+80]
	push	eax
	mov	eax, DWORD PTR [esi+68]
	push	0
	push	ecx
	push	edx
	push	eax
	push	esi
	mov	BYTE PTR [esi+65], 0
	call	_sqlite3BtreeMoveto
	mov	edi, eax
	add	esp, 24					; 00000018H
; Line 23135
	test	edi, edi
	jne	SHORT $LN1@sqlite3Btr@38
; Line 23136
	mov	eax, DWORD PTR [esi+68]
	test	eax, eax
	je	SHORT $LN8@sqlite3Btr@38
	push	eax
	call	_free
	add	esp, 4
$LN8@sqlite3Btr@38:
; Line 23137
	mov	DWORD PTR [esi+68], 0
$LN1@sqlite3Btr@38:
; Line 23140
	mov	eax, edi
	pop	edi
	pop	esi
; Line 23141
	ret	0
_sqlite3BtreeRestoreOrClearCursorPosition ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _lockBtreeWithRetry
_TEXT	SEGMENT
_inTransaction$86303 = -1				; size = 1
_lockBtreeWithRetry PROC				; COMDAT
; _pRef$ = ebx
; Line 24300
	push	ecx
; Line 24301
	xor	eax, eax
; Line 24302
	cmp	BYTE PTR [ebx+8], al
	jne	$LN1@lockBtreeW
	push	ebp
	push	esi
; Line 24303
	mov	esi, DWORD PTR [ebx+4]
	mov	al, BYTE PTR [esi+48]
	push	edi
	mov	BYTE PTR _inTransaction$86303[esp+16], al
; Line 24305
	xor	edi, edi
	npad	5
$LL19@lockBtreeW:
	cmp	DWORD PTR [esi+8], 0
	jne	SHORT $LN16@lockBtreeW
	mov	edi, esi
	call	_lockBtree
	mov	edi, eax
$LN16@lockBtreeW:
	test	edi, edi
	je	SHORT $LN18@lockBtreeW
	call	_unlockBtreeIfUnused
$LN18@lockBtreeW:
	cmp	edi, 5
	jne	SHORT $LN8@lockBtreeW
	cmp	BYTE PTR [esi+48], 0
	jne	SHORT $LN37@lockBtreeW
	mov	ebp, DWORD PTR [esi+44]
	test	ebp, ebp
	je	SHORT $LN37@lockBtreeW
	mov	ecx, DWORD PTR [ebp]
	test	ecx, ecx
	je	SHORT $LN37@lockBtreeW
	mov	eax, DWORD PTR [ebp+8]
	test	eax, eax
	jl	SHORT $LN37@lockBtreeW
	mov	edx, DWORD PTR [ebp+4]
	push	eax
	push	edx
	call	ecx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN34@lockBtreeW
	add	DWORD PTR [ebp+8], 1
	jmp	SHORT $LL19@lockBtreeW
$LN34@lockBtreeW:
	mov	DWORD PTR [ebp+8], -1
	jmp	SHORT $LN37@lockBtreeW
$LN8@lockBtreeW:
	test	edi, edi
	jne	SHORT $LN37@lockBtreeW
	cmp	BYTE PTR [ebx+8], 0
	jne	SHORT $LN6@lockBtreeW
	add	DWORD PTR [esi+56], 1
$LN6@lockBtreeW:
	mov	BYTE PTR [ebx+8], 1
	cmp	BYTE PTR [esi+48], 1
	jae	SHORT $LN37@lockBtreeW
	mov	BYTE PTR [esi+48], 1
$LN37@lockBtreeW:
; Line 24308
	test	edi, edi
	mov	eax, DWORD PTR [ebx+4]
	mov	cl, BYTE PTR _inTransaction$86303[esp+16]
	mov	BYTE PTR [eax+48], cl
	mov	BYTE PTR [ebx+8], 0
	jne	SHORT $LN35@lockBtreeW
; Line 24309
	mov	eax, DWORD PTR [ebx+4]
	add	DWORD PTR [eax+56], -1
$LN35@lockBtreeW:
; Line 24313
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
$LN1@lockBtreeW:
; Line 24314
	pop	ecx
	ret	0
_lockBtreeWithRetry ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _incrVacuumStep
_TEXT	SEGMENT
_pLastPg$86479 = -20					; size = 4
_eType$86465 = -16					; size = 1
_pFreePg$86474 = -16					; size = 4
_pFreePg$86484 = -12					; size = 4
_iFreePg$86478 = -8					; size = 4
_iFreePg$86473 = -4					; size = 4
_iPtrPage$86466 = -4					; size = 4
_nFin$ = 8						; size = 4
_incrVacuumStep PROC					; COMDAT
; _pBt$ = eax
; Line 24677
	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _nFin$[esp+24]
	push	esi
	push	edi
	mov	edi, eax
; Line 24681
	mov	esi, DWORD PTR [edi+20]
; Line 24682
	test	esi, esi
	jne	SHORT $LN21@incrVacuum
; Line 24683
	mov	esi, DWORD PTR [edi]
	call	_sqlite3PagerPagecount
	mov	esi, eax
$LN21@incrVacuum:
; Line 24686
	movzx	ecx, WORD PTR [edi+26]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	ebx, DWORD PTR [edx+eax+1]
	xor	edx, edx
	lea	eax, DWORD PTR [esi-2]
	div	ebx
	mov	ecx, eax
	imul	ecx, ebx
	movzx	ebx, WORD PTR [edi+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ebx
	add	ecx, 2
	add	eax, 1
	cmp	ecx, eax
	jne	SHORT $LN52@incrVacuum
	add	ecx, 1
$LN52@incrVacuum:
	cmp	ecx, esi
	je	$LN53@incrVacuum
	cmp	esi, eax
	je	$LN53@incrVacuum
; Line 24691
	mov	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [ecx+68]
; Line 24692
	movzx	ecx, BYTE PTR [eax+38]
	xor	edx, edx
	mov	dh, BYTE PTR [eax+36]
	add	eax, 36					; 00000024H
	mov	dl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	edx, 8
	or	edx, ecx
	shl	edx, 8
	or	edx, eax
	je	$LN18@incrVacuum
	cmp	ebp, esi
	je	$LN18@incrVacuum
; Line 24696
	lea	ecx, DWORD PTR _iPtrPage$86466[esp+36]
	push	ecx
	lea	edx, DWORD PTR _eType$86465[esp+40]
	push	edx
	mov	eax, esi
	mov	ecx, edi
	call	_ptrmapGet
	add	esp, 8
; Line 24697
	test	eax, eax
; Line 24698
	jne	$LN22@incrVacuum
; Line 24700
	mov	al, BYTE PTR _eType$86465[esp+36]
	cmp	al, 1
	jne	SHORT $LN16@incrVacuum
	pop	edi
	pop	esi
	pop	ebp
; Line 24701
	mov	eax, 11					; 0000000bH
	pop	ebx
; Line 24764
	add	esp, 20					; 00000014H
	ret	0
$LN16@incrVacuum:
; Line 24704
	cmp	al, 2
	jne	$LN15@incrVacuum
; Line 24705
	test	ebp, ebp
	jne	SHORT $LN53@incrVacuum
; Line 24713
	push	1
	push	esi
	lea	eax, DWORD PTR _iFreePg$86473[esp+44]
	push	eax
	lea	ecx, DWORD PTR _pFreePg$86474[esp+48]
	push	ecx
	push	edi
	call	_allocateBtreePage
	add	esp, 20					; 00000014H
; Line 24714
	test	eax, eax
; Line 24715
	jne	$LN22@incrVacuum
; Line 24718
	mov	eax, DWORD PTR _pFreePg$86474[esp+36]
	test	eax, eax
	je	SHORT $LN53@incrVacuum
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN53@incrVacuum:
; Line 24762
	movzx	ecx, WORD PTR [edi+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	add	esi, -1
	idiv	ecx
	lea	ebx, DWORD PTR [eax+1]
$LN57@incrVacuum:
	cmp	esi, ebx
	mov	DWORD PTR [edi+20], esi
	je	SHORT $LN1@incrVacuum
	movzx	ecx, WORD PTR [edi+26]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR [edx+eax+1]
	xor	edx, edx
	lea	eax, DWORD PTR [esi-2]
	div	ecx
	imul	eax, ecx
	add	eax, 2
	cmp	eax, ebx
	jne	SHORT $LN41@incrVacuum
; Line 24760
	add	eax, 1
$LN41@incrVacuum:
	cmp	eax, esi
	jne	$LN2@incrVacuum
$LN1@incrVacuum:
; Line 24761
	add	esi, -1
; Line 24762
	jmp	SHORT $LN57@incrVacuum
$LN15@incrVacuum:
; Line 24724
	lea	edx, DWORD PTR _pLastPg$86479[esp+36]
	push	edx
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 24725
	test	eax, eax
; Line 24726
	jne	$LN22@incrVacuum
	npad	3
$LL10@incrVacuum:
; Line 24738
	push	0
	push	0
	lea	eax, DWORD PTR _iFreePg$86478[esp+44]
	push	eax
	lea	ecx, DWORD PTR _pFreePg$86484[esp+48]
	push	ecx
	push	edi
	call	_allocateBtreePage
	mov	ebx, eax
	add	esp, 20					; 00000014H
; Line 24739
	test	ebx, ebx
	jne	SHORT $LN47@incrVacuum
; Line 24743
	mov	eax, DWORD PTR _pFreePg$86484[esp+36]
	test	eax, eax
	je	SHORT $LN9@incrVacuum
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN9@incrVacuum:
; Line 24744
	test	ebp, ebp
	mov	ebx, DWORD PTR _iFreePg$86478[esp+36]
	je	SHORT $LN6@incrVacuum
	cmp	ebx, ebp
	ja	SHORT $LL10@incrVacuum
$LN6@incrVacuum:
; Line 24747
	mov	ebp, DWORD PTR _pLastPg$86479[esp+36]
	mov	edx, DWORD PTR [ebp+72]
	push	edx
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 24748
	test	eax, eax
; Line 24749
	jne	SHORT $LN22@incrVacuum
; Line 24751
	mov	eax, DWORD PTR _iPtrPage$86466[esp+36]
	mov	ecx, DWORD PTR _eType$86465[esp+36]
	push	ebx
	push	eax
	push	ecx
	push	edi
	mov	eax, ebp
	call	_relocatePage
	mov	ebx, eax
; Line 24752
	mov	eax, DWORD PTR [ebp+72]
	add	esp, 16					; 00000010H
	call	_sqlite3PagerUnref
; Line 24753
	test	ebx, ebx
	je	$LN53@incrVacuum
	pop	edi
	pop	esi
	pop	ebp
; Line 24754
	mov	eax, ebx
	pop	ebx
; Line 24764
	add	esp, 20					; 00000014H
	ret	0
$LN47@incrVacuum:
; Line 24740
	mov	eax, DWORD PTR _pLastPg$86479[esp+36]
	test	eax, eax
	je	SHORT $LN32@incrVacuum
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN32@incrVacuum:
	pop	edi
	pop	esi
	pop	ebp
; Line 24741
	mov	eax, ebx
	pop	ebx
; Line 24764
	add	esp, 20					; 00000014H
	ret	0
$LN18@incrVacuum:
	pop	edi
	pop	esi
	pop	ebp
; Line 24693
	mov	eax, 101				; 00000065H
	pop	ebx
; Line 24764
	add	esp, 20					; 00000014H
	ret	0
$LN2@incrVacuum:
; Line 24763
	xor	eax, eax
$LN22@incrVacuum:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 24764
	add	esp, 20					; 00000014H
	ret	0
_incrVacuumStep ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeIncrVacuum
_TEXT	SEGMENT
_sqlite3BtreeIncrVacuum PROC				; COMDAT
; _p$ = eax
; Line 24774
	push	esi
; Line 24775
	mov	esi, DWORD PTR [eax+4]
; Line 24777
	cmp	BYTE PTR [esi+18], 0
	jne	SHORT $LN1@sqlite3Btr@39
; Line 24778
	mov	eax, 101				; 00000065H
	pop	esi
; Line 24782
	ret	0
$LN1@sqlite3Btr@39:
; Line 24780
	mov	eax, esi
	call	_invalidateAllOverflowCache
; Line 24781
	push	0
	mov	eax, esi
	call	_incrVacuumStep
	add	esp, 4
	pop	esi
; Line 24782
	ret	0
_sqlite3BtreeIncrVacuum ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _autoVacuumCommit
_TEXT	SEGMENT
_pgsz$86514 = -12					; size = 4
tv316 = -8						; size = 4
_pPager$ = -4						; size = 4
_pnTrunc$ = 8						; size = 4
_autoVacuumCommit PROC					; COMDAT
; _pBt$ = eax
; Line 24793
	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, eax
; Line 24800
	mov	esi, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edi]
	xor	ebp, ebp
	xor	ebx, ebx
	cmp	esi, ebp
	mov	DWORD PTR _pPager$[esp+28], eax
	je	SHORT $LN17@autoVacuum
	npad	6
$LL19@autoVacuum:
	mov	eax, DWORD PTR [esi+88]
	cmp	eax, ebp
	je	SHORT $LN27@autoVacuum
	push	eax
	call	_free
	add	esp, 4
$LN27@autoVacuum:
	mov	DWORD PTR [esi+88], ebp
	mov	esi, DWORD PTR [esi+4]
	cmp	esi, ebp
	jne	SHORT $LL19@autoVacuum
$LN17@autoVacuum:
; Line 24802
	cmp	BYTE PTR [edi+19], bl
	jne	$LN43@autoVacuum
; Line 24803
	xor	esi, esi
; Line 24805
	cmp	DWORD PTR [edi+20], ebp
	jne	$LL6@autoVacuum
; Line 24808
	movzx	ecx, WORD PTR [edi+24]
; Line 24809
	mov	esi, DWORD PTR [edi]
	mov	DWORD PTR _pgsz$86514[esp+28], ecx
	call	_sqlite3PagerPagecount
	mov	ebp, eax
; Line 24811
	push	ebp
	call	_ptrmapPageno
	add	esp, 4
	cmp	eax, ebp
	jne	SHORT $LN12@autoVacuum
	pop	edi
	pop	esi
	pop	ebp
; Line 24812
	mov	eax, 11					; 0000000bH
	pop	ebx
; Line 24852
	add	esp, 12					; 0000000cH
	ret	0
$LN12@autoVacuum:
; Line 24814
	movzx	ecx, WORD PTR [edi+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ecx
	add	eax, 1
	cmp	ebp, eax
	mov	DWORD PTR tv316[esp+28], eax
	jne	SHORT $LN11@autoVacuum
; Line 24815
	sub	ebp, 1
$LN11@autoVacuum:
; Line 24817
	mov	edx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [edx+68]
	movzx	ecx, BYTE PTR [eax+38]
	movzx	edx, BYTE PTR [eax+39]
	add	eax, 36					; 00000024H
	xor	ebx, ebx
	mov	bh, BYTE PTR [eax]
; Line 24818
	push	ebp
	mov	bl, BYTE PTR [eax+1]
	mov	eax, 1717986919				; 66666667H
	shl	ebx, 8
	or	ebx, ecx
	shl	ebx, 8
	or	ebx, edx
	imul	DWORD PTR _pgsz$86514[esp+32]
	sar	edx, 1
	mov	esi, edx
	shr	esi, 31					; 0000001fH
	add	esi, edx
	call	_ptrmapPageno
	mov	ecx, eax
; Line 24819
	mov	eax, esi
	sub	eax, ebp
	add	ecx, ebx
	add	eax, ecx
	xor	edx, edx
	div	esi
	mov	esi, ebp
	add	esp, 4
	sub	esi, eax
	sub	esi, ebx
; Line 24820
	mov	ebx, DWORD PTR tv316[esp+28]
	cmp	ebp, ebx
	jbe	SHORT $LN50@autoVacuum
	cmp	esi, ebx
	ja	SHORT $LN50@autoVacuum
; Line 24821
	sub	esi, 1
$LN50@autoVacuum:
; Line 24823
	movzx	ecx, WORD PTR [edi+26]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	ecx, DWORD PTR [edx+eax+1]
	lea	ebp, DWORD PTR [esi-2]
	npad	4
$LL9@autoVacuum:
	xor	edx, edx
	mov	eax, ebp
	div	ecx
	imul	eax, ecx
	add	eax, 2
	cmp	eax, ebx
	jne	SHORT $LN52@autoVacuum
	add	eax, 1
$LN52@autoVacuum:
	cmp	eax, esi
	je	SHORT $LN7@autoVacuum
	cmp	esi, ebx
	jne	SHORT $LN51@autoVacuum
$LN7@autoVacuum:
; Line 24824
	sub	esi, 1
	sub	ebp, 1
; Line 24825
	jmp	SHORT $LL9@autoVacuum
$LN51@autoVacuum:
	xor	ebp, ebp
$LL6@autoVacuum:
; Line 24829
	push	esi
	mov	eax, edi
	call	_incrVacuumStep
	mov	ebx, eax
	add	esp, 4
	cmp	ebx, ebp
	je	SHORT $LL6@autoVacuum
; Line 24831
	cmp	ebx, 101				; 00000065H
	jne	SHORT $LN3@autoVacuum
; Line 24833
	xor	ebx, ebx
; Line 24834
	cmp	DWORD PTR [edi+20], ebp
	je	SHORT $LN43@autoVacuum
; Line 24835
	mov	ecx, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	call	_sqlite3PagerWrite
; Line 24836
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+68]
	add	eax, 32					; 00000020H
	mov	BYTE PTR [eax], bl
	mov	BYTE PTR [eax+1], bl
	mov	BYTE PTR [eax+2], bl
	mov	BYTE PTR [eax+3], bl
; Line 24837
	mov	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [ecx+68]
	add	esp, 4
	add	eax, 36					; 00000024H
	mov	BYTE PTR [eax], bl
	mov	BYTE PTR [eax+1], bl
	mov	BYTE PTR [eax+2], bl
	mov	BYTE PTR [eax+3], bl
; Line 24838
	mov	DWORD PTR [edi+20], esi
$LN43@autoVacuum:
; Line 24847
	mov	edx, DWORD PTR [edi+20]
	mov	eax, DWORD PTR _pnTrunc$[esp+24]
	mov	DWORD PTR [eax], edx
; Line 24848
	mov	DWORD PTR [edi+20], ebp
	pop	edi
	pop	esi
	pop	ebp
; Line 24851
	mov	eax, ebx
	pop	ebx
; Line 24852
	add	esp, 12					; 0000000cH
	ret	0
$LN3@autoVacuum:
; Line 24842
	mov	edi, DWORD PTR _pPager$[esp+28]
	call	_sqlite3PagerRollback
	pop	edi
	pop	esi
	pop	ebp
; Line 24851
	mov	eax, ebx
	pop	ebx
; Line 24852
	add	esp, 12					; 0000000cH
	ret	0
_autoVacuumCommit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeCommitPhaseOne
_TEXT	SEGMENT
_nTrunc$86540 = -4					; size = 4
_zMaster$ = 8						; size = 4
_sqlite3BtreeCommitPhaseOne PROC			; COMDAT
; _p$ = ecx
; Line 24882
	push	ecx
; Line 24883
	xor	eax, eax
; Line 24884
	cmp	BYTE PTR [ecx+8], 2
	push	esi
	jne	SHORT $LN4@sqlite3Btr@40
; Line 24885
	mov	esi, DWORD PTR [ecx+4]
; Line 24888
	cmp	BYTE PTR [esi+18], al
	mov	DWORD PTR _nTrunc$86540[esp+8], eax
	je	SHORT $LN6@sqlite3Btr@40
; Line 24889
	lea	eax, DWORD PTR _nTrunc$86540[esp+8]
	push	eax
	mov	eax, esi
	call	_autoVacuumCommit
	add	esp, 4
; Line 24890
	test	eax, eax
; Line 24891
	jne	SHORT $LN4@sqlite3Btr@40
$LN6@sqlite3Btr@40:
; Line 24895
	mov	ecx, DWORD PTR _nTrunc$86540[esp+8]
	mov	edx, DWORD PTR _zMaster$[esp+4]
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	edx
	call	_sqlite3PagerCommitPhaseOne
	add	esp, 8
$LN4@sqlite3Btr@40:
	pop	esi
; Line 24898
	pop	ecx
	ret	0
_sqlite3BtreeCommitPhaseOne ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeCommit
_TEXT	SEGMENT
_nTrunc$136186 = -4					; size = 4
_sqlite3BtreeCommit PROC				; COMDAT
; _p$ = edi
; Line 24960
	push	ecx
; Line 24962
	xor	eax, eax
	cmp	BYTE PTR [edi+8], 2
	push	esi
	jne	SHORT $LN6@sqlite3Btr@41
	mov	esi, DWORD PTR [edi+4]
	cmp	BYTE PTR [esi+18], al
	mov	DWORD PTR _nTrunc$136186[esp+8], eax
	je	SHORT $LN10@sqlite3Btr@41
	lea	eax, DWORD PTR _nTrunc$136186[esp+8]
	push	eax
	mov	eax, esi
	call	_autoVacuumCommit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@sqlite3Btr@41
$LN10@sqlite3Btr@41:
	mov	ecx, DWORD PTR _nTrunc$136186[esp+8]
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	0
	call	_sqlite3PagerCommitPhaseOne
	add	esp, 8
$LN6@sqlite3Btr@41:
; Line 24963
	test	eax, eax
	pop	esi
	jne	SHORT $LN9@sqlite3Btr@41
; Line 24964
	mov	eax, edi
; Line 24967
	add	esp, 4
; Line 24964
	jmp	_sqlite3BtreeCommitPhaseTwo
$LN9@sqlite3Btr@41:
; Line 24967
	pop	ecx
	ret	0
_sqlite3BtreeCommit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeCursor
_TEXT	SEGMENT
_p$ = 8							; size = 4
_iTable$ = 12						; size = 4
_wrFlag$ = 16						; size = 4
_xCmp$ = 20						; size = 4
_pArg$ = 24						; size = 4
_ppCur$ = 28						; size = 4
_sqlite3BtreeCursor PROC				; COMDAT
; Line 25187
	cmp	DWORD PTR _wrFlag$[esp-4], 0
	mov	eax, DWORD PTR _ppCur$[esp-4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _p$[esp+4]
	push	edi
	mov	edi, DWORD PTR [esi+4]
	mov	DWORD PTR [eax], 0
	je	SHORT $LN55@sqlite3Btr@42
; Line 25188
	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN10@sqlite3Btr@42
$LN58@sqlite3Btr@42:
	pop	edi
	pop	esi
; Line 25189
	mov	eax, 8
	pop	ebx
; Line 25244
	ret	0
$LN10@sqlite3Btr@42:
; Line 25191
	mov	ecx, DWORD PTR _iTable$[esp+8]
	push	ecx
	xor	ebx, ebx
	mov	eax, esi
	call	_checkReadLocks
	add	esp, 4
	test	eax, eax
	je	SHORT $LN55@sqlite3Btr@42
	pop	edi
	pop	esi
; Line 25192
	lea	eax, DWORD PTR [ebx+6]
	pop	ebx
; Line 25244
	ret	0
$LN55@sqlite3Btr@42:
; Line 25196
	cmp	DWORD PTR [edi+8], 0
	jne	SHORT $LN56@sqlite3Btr@42
; Line 25197
	mov	ebx, esi
	call	_lockBtreeWithRetry
; Line 25198
	test	eax, eax
; Line 25199
	jne	$LN12@sqlite3Btr@42
; Line 25201
	cmp	BYTE PTR [edi+13], al
	je	SHORT $LN56@sqlite3Btr@42
	cmp	DWORD PTR _wrFlag$[esp+8], eax
; Line 25202
	jne	SHORT $LN58@sqlite3Btr@42
$LN56@sqlite3Btr@42:
; Line 25205
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, DWORD PTR _inMutex
	push	ebp
	je	SHORT $LN23@sqlite3Btr@42
	test	esi, esi
	jg	SHORT $LN53@sqlite3Btr@42
$LN23@sqlite3Btr@42:
	push	96					; 00000060H
	call	_malloc
	mov	ebp, eax
	add	esp, 4
	test	ebp, ebp
	jne	SHORT $LN54@sqlite3Btr@42
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN33@sqlite3Btr@42
	test	esi, esi
	jg	SHORT $LN16@sqlite3Btr@42
$LN33@sqlite3Btr@42:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN16@sqlite3Btr@42
$LN54@sqlite3Btr@42:
	push	96					; 00000060H
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH
$LN16@sqlite3Btr@42:
; Line 25206
	test	ebp, ebp
	jne	SHORT $LN5@sqlite3Btr@42
$LN53@sqlite3Btr@42:
; Line 25242
	mov	esi, edi
	mov	ebx, 7
	call	_unlockBtreeIfUnused
	pop	ebp
	pop	edi
	pop	esi
; Line 25243
	mov	eax, ebx
	pop	ebx
; Line 25244
	ret	0
$LN5@sqlite3Btr@42:
; Line 25210
	mov	eax, DWORD PTR _iTable$[esp+12]
; Line 25211
	cmp	eax, 1
	mov	DWORD PTR [ebp+20], eax
	jne	SHORT $LN4@sqlite3Btr@42
	mov	esi, DWORD PTR [edi]
	call	_sqlite3PagerPagecount
	test	eax, eax
	jne	SHORT $LN4@sqlite3Btr@42
; Line 25212
	lea	ebx, DWORD PTR [eax+16]
; Line 25213
	jmp	SHORT $create_cursor_exception$86660
$LN4@sqlite3Btr@42:
; Line 25215
	mov	esi, DWORD PTR [ebp+20]
	test	esi, esi
	lea	ebx, DWORD PTR [ebp+24]
	jne	SHORT $LN42@sqlite3Btr@42
	lea	ebx, DWORD PTR [esi+11]
	jmp	SHORT $create_cursor_exception$86660
$LN42@sqlite3Btr@42:
	push	ebx
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN41@sqlite3Btr@42
	mov	ebx, DWORD PTR [ebx]
	cmp	BYTE PTR [ebx], al
	jne	SHORT $LN41@sqlite3Btr@42
	push	eax
	call	_sqlite3BtreeInitPage
	add	esp, 4
$LN41@sqlite3Btr@42:
; Line 25216
	test	eax, eax
	mov	ebx, eax
	je	SHORT $LN3@sqlite3Btr@42
$create_cursor_exception$86660:
; Line 25239
	mov	eax, DWORD PTR [ebp+24]
	test	eax, eax
	je	SHORT $LN45@sqlite3Btr@42
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN45@sqlite3Btr@42:
; Line 25240
	push	ebp
	call	_free
	add	esp, 4
; Line 25242
	mov	esi, edi
	call	_unlockBtreeIfUnused
	pop	ebp
	pop	edi
	pop	esi
; Line 25243
	mov	eax, ebx
	pop	ebx
; Line 25244
	ret	0
$LN3@sqlite3Btr@42:
; Line 25224
	mov	eax, DWORD PTR _xCmp$[esp+12]
	test	eax, eax
	jne	SHORT $LN15@sqlite3Btr@42
	mov	eax, OFFSET _dfltCompare
$LN15@sqlite3Btr@42:
; Line 25225
	mov	edx, DWORD PTR _pArg$[esp+12]
; Line 25227
	mov	cl, BYTE PTR _wrFlag$[esp+12]
	mov	DWORD PTR [ebp+12], eax
	mov	eax, DWORD PTR _p$[esp+12]
	mov	DWORD PTR [ebp+16], edx
	mov	DWORD PTR [ebp], eax
	mov	BYTE PTR [ebp+64], cl
; Line 25228
	mov	eax, DWORD PTR [edi+4]
; Line 25229
	test	eax, eax
	mov	DWORD PTR [ebp+4], eax
	je	SHORT $LN2@sqlite3Btr@42
; Line 25230
	mov	DWORD PTR [eax+8], ebp
$LN2@sqlite3Btr@42:
; Line 25234
	mov	edx, DWORD PTR _ppCur$[esp+12]
	mov	DWORD PTR [edi+4], ebp
	mov	BYTE PTR [ebp+65], 0
	mov	DWORD PTR [edx], ebp
; Line 25236
	xor	eax, eax
	pop	ebp
$LN12@sqlite3Btr@42:
	pop	edi
	pop	esi
	pop	ebx
; Line 25244
	ret	0
_sqlite3BtreeCursor ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeKeySize
_TEXT	SEGMENT
_pSize$ = 8						; size = 4
_sqlite3BtreeKeySize PROC				; COMDAT
; _pCur$ = edi
; Line 25327
	cmp	BYTE PTR [edi+65], 2
	push	ebx
	jne	SHORT $LN8@sqlite3Btr@43
	push	edi
	call	_sqlite3BtreeRestoreOrClearCursorPosition
	mov	ebx, eax
	add	esp, 4
; Line 25328
	test	ebx, ebx
	jne	SHORT $LN3@sqlite3Btr@43
$LN12@sqlite3Btr@43:
; Line 25330
	cmp	BYTE PTR [edi+65], 0
	jne	SHORT $LN4@sqlite3Btr@43
; Line 25331
	mov	eax, DWORD PTR _pSize$[esp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 25337
	mov	eax, ebx
	pop	ebx
; Line 25338
	ret	0
$LN8@sqlite3Btr@43:
; Line 25327
	xor	ebx, ebx
; Line 25328
	jmp	SHORT $LN12@sqlite3Btr@43
$LN4@sqlite3Btr@43:
; Line 25333
	cmp	WORD PTR [edi+62], 0
	jne	SHORT $LN2@sqlite3Btr@43
	mov	eax, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [edi+28]
	push	ebp
	push	esi
	movzx	esi, WORD PTR [eax+14]
	add	esi, ecx
	lea	ebp, DWORD PTR [esi+edx*2]
	xor	edx, edx
	mov	dh, BYTE PTR [ebp]
	lea	esi, DWORD PTR [edi+32]
	mov	dl, BYTE PTR [ebp+1]
	add	edx, ecx
	push	edx
	push	eax
	call	_sqlite3BtreeParseCellPtr
	add	esp, 8
	pop	esi
	pop	ebp
$LN2@sqlite3Btr@43:
; Line 25334
	mov	eax, DWORD PTR _pSize$[esp]
	mov	ecx, DWORD PTR [edi+40]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [edi+44]
	mov	DWORD PTR [eax+4], edx
; Line 25337
	mov	eax, ebx
$LN3@sqlite3Btr@43:
	pop	ebx
; Line 25338
	ret	0
_sqlite3BtreeKeySize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeDataSize
_TEXT	SEGMENT
_pSize$ = 8						; size = 4
_sqlite3BtreeDataSize PROC				; COMDAT
; _pCur$ = edi
; Line 25348
	cmp	BYTE PTR [edi+65], 2
	push	ebx
	jne	SHORT $LN8@sqlite3Btr@44
	push	edi
	call	_sqlite3BtreeRestoreOrClearCursorPosition
	mov	ebx, eax
	add	esp, 4
; Line 25349
	test	ebx, ebx
	jne	SHORT $LN3@sqlite3Btr@44
$LN12@sqlite3Btr@44:
; Line 25351
	cmp	BYTE PTR [edi+65], 0
	jne	SHORT $LN4@sqlite3Btr@44
; Line 25353
	mov	eax, DWORD PTR _pSize$[esp]
	mov	DWORD PTR [eax], 0
; Line 25359
	mov	eax, ebx
	pop	ebx
; Line 25360
	ret	0
$LN8@sqlite3Btr@44:
; Line 25348
	xor	ebx, ebx
; Line 25349
	jmp	SHORT $LN12@sqlite3Btr@44
$LN4@sqlite3Btr@44:
; Line 25355
	cmp	WORD PTR [edi+62], 0
	jne	SHORT $LN2@sqlite3Btr@44
	mov	eax, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [edi+28]
	push	ebp
	push	esi
	movzx	esi, WORD PTR [eax+14]
	add	esi, ecx
	lea	ebp, DWORD PTR [esi+edx*2]
	xor	edx, edx
	mov	dh, BYTE PTR [ebp]
	lea	esi, DWORD PTR [edi+32]
	mov	dl, BYTE PTR [ebp+1]
	add	edx, ecx
	push	edx
	push	eax
	call	_sqlite3BtreeParseCellPtr
	add	esp, 8
	pop	esi
	pop	ebp
$LN2@sqlite3Btr@44:
; Line 25356
	mov	eax, DWORD PTR [edi+48]
	mov	ecx, DWORD PTR _pSize$[esp]
	mov	DWORD PTR [ecx], eax
; Line 25359
	mov	eax, ebx
$LN3@sqlite3Btr@44:
	pop	ebx
; Line 25360
	ret	0
_sqlite3BtreeDataSize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeData
_TEXT	SEGMENT
_pCur$ = 8						; size = 4
_offset$ = 12						; size = 4
_amt$ = 16						; size = 4
_pBuf$ = 20						; size = 4
_sqlite3BtreeData PROC					; COMDAT
; Line 25673
	push	esi
; Line 25674
	mov	esi, DWORD PTR _pCur$[esp]
	cmp	BYTE PTR [esi+65], 2
	jne	SHORT $LN6@sqlite3Btr@45
	push	esi
	call	_sqlite3BtreeRestoreOrClearCursorPosition
	add	esp, 4
; Line 25675
	test	eax, eax
	jne	SHORT $LN1@sqlite3Btr@45
$LN6@sqlite3Btr@45:
; Line 25679
	mov	eax, DWORD PTR _pBuf$[esp]
	mov	ecx, DWORD PTR _amt$[esp]
	push	0
	push	1
	push	eax
	mov	eax, DWORD PTR _offset$[esp+12]
	push	ecx
	push	esi
	call	_accessPayload
	add	esp, 20					; 00000014H
$LN1@sqlite3Btr@45:
	pop	esi
; Line 25682
	ret	0
_sqlite3BtreeData ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeNext
_TEXT	SEGMENT
_pCur$ = 8						; size = 4
_pRes$ = 12						; size = 4
_sqlite3BtreeNext PROC					; COMDAT
; Line 26118
	push	ebx
	push	esi
; Line 26122
	mov	esi, DWORD PTR _pCur$[esp+4]
	xor	ebx, ebx
	cmp	BYTE PTR [esi+65], 2
	jne	SHORT $LN13@sqlite3Btr@46
	push	esi
	call	_sqlite3BtreeRestoreOrClearCursorPosition
	add	esp, 4
; Line 26123
	cmp	eax, ebx
; Line 26124
	jne	$LN14@sqlite3Btr@46
$LN13@sqlite3Btr@46:
; Line 26128
	cmp	BYTE PTR [esi+65], bl
	mov	eax, DWORD PTR [esi+24]
	jne	SHORT $LN12@sqlite3Btr@46
; Line 26129
	mov	eax, DWORD PTR _pRes$[esp+4]
	mov	DWORD PTR [eax], 1
$LN35@sqlite3Btr@46:
	pop	esi
; Line 26130
	xor	eax, eax
	pop	ebx
; Line 26175
	ret	0
$LN12@sqlite3Btr@46:
; Line 26132
	cmp	DWORD PTR [esi+80], ebx
; Line 26133
	mov	DWORD PTR [esi+80], ebx
	jle	SHORT $LN11@sqlite3Btr@46
; Line 26134
	mov	ecx, DWORD PTR _pRes$[esp+4]
	pop	esi
	mov	DWORD PTR [ecx], ebx
; Line 26135
	xor	eax, eax
	pop	ebx
; Line 26175
	ret	0
$LN11@sqlite3Btr@46:
; Line 26142
	add	DWORD PTR [esi+28], 1
	mov	ecx, DWORD PTR [esi+28]
; Line 26143
	mov	WORD PTR [esi+62], bx
; Line 26144
	movzx	edx, WORD PTR [eax+20]
	cmp	ecx, edx
	jl	$LN10@sqlite3Btr@46
; Line 26145
	cmp	BYTE PTR [eax+4], bl
	jne	SHORT $LN33@sqlite3Btr@46
; Line 26146
	movzx	ecx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR [eax+68]
	lea	eax, DWORD PTR [ecx+edx+8]
	movzx	edx, BYTE PTR [eax+2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax]
	push	esi
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	eax, ecx
	call	_moveToChild
	add	esp, 4
; Line 26147
	cmp	eax, ebx
	jne	SHORT $LN14@sqlite3Btr@46
; Line 26148
	call	_moveToLeftmost
; Line 26149
	mov	ecx, DWORD PTR _pRes$[esp+4]
	pop	esi
	mov	DWORD PTR [ecx], ebx
	pop	ebx
; Line 26175
	ret	0
$LN33@sqlite3Btr@46:
	push	edi
$LL7@sqlite3Btr@46:
; Line 26153
	mov	eax, DWORD PTR [eax+80]
	cmp	eax, ebx
	je	SHORT $LN31@sqlite3Btr@46
	cmp	DWORD PTR [eax+76], 1
	ja	SHORT $LN28@sqlite3Btr@46
	movzx	edx, BYTE PTR [eax+8]
	mov	eax, DWORD PTR [eax+68]
	add	eax, edx
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+3]
	mov	cl, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN31@sqlite3Btr@46
$LN28@sqlite3Btr@46:
; Line 26158
	mov	edi, esi
	call	_sqlite3BtreeMoveToParent
; Line 26159
	mov	eax, DWORD PTR [esi+24]
; Line 26160
	movzx	edx, WORD PTR [eax+20]
	cmp	DWORD PTR [esi+28], edx
	jge	SHORT $LL7@sqlite3Btr@46
; Line 26161
	mov	ecx, DWORD PTR _pRes$[esp+8]
	mov	DWORD PTR [ecx], ebx
; Line 26162
	cmp	BYTE PTR [eax+6], bl
	je	SHORT $LN3@sqlite3Btr@46
; Line 26163
	push	ecx
	push	esi
	call	_sqlite3BtreeNext
	add	esp, 8
	pop	edi
$LN14@sqlite3Btr@46:
	pop	esi
	pop	ebx
; Line 26175
	ret	0
$LN31@sqlite3Btr@46:
; Line 26154
	mov	eax, DWORD PTR _pRes$[esp+8]
	mov	DWORD PTR [eax], 1
; Line 26155
	mov	BYTE PTR [esi+65], bl
$LN3@sqlite3Btr@46:
	pop	edi
	pop	esi
; Line 26156
	xor	eax, eax
	pop	ebx
; Line 26175
	ret	0
$LN10@sqlite3Btr@46:
; Line 26169
	mov	ecx, DWORD PTR _pRes$[esp+4]
	mov	DWORD PTR [ecx], ebx
; Line 26170
	cmp	BYTE PTR [eax+4], bl
; Line 26171
	jne	$LN35@sqlite3Btr@46
; Line 26173
	call	_moveToLeftmost
	pop	esi
	pop	ebx
; Line 26175
	ret	0
_sqlite3BtreeNext ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreePrevious
_TEXT	SEGMENT
_pCur$ = 8						; size = 4
_pRes$ = 12						; size = 4
_sqlite3BtreePrevious PROC				; COMDAT
; Line 26183
	push	esi
; Line 26188
	mov	esi, DWORD PTR _pCur$[esp]
	cmp	BYTE PTR [esi+65], 2
	jne	SHORT $LN39@sqlite3Btr@47
	push	esi
	call	_sqlite3BtreeRestoreOrClearCursorPosition
	add	esp, 4
; Line 26189
	test	eax, eax
; Line 26190
	jne	$LN12@sqlite3Btr@47
$LN39@sqlite3Btr@47:
; Line 26192
	cmp	BYTE PTR [esi+65], 0
	jne	SHORT $LN10@sqlite3Btr@47
; Line 26193
	mov	eax, DWORD PTR _pRes$[esp]
	mov	DWORD PTR [eax], 1
; Line 26194
	xor	eax, eax
	pop	esi
; Line 26231
	ret	0
$LN10@sqlite3Btr@47:
	push	edi
; Line 26196
	xor	edi, edi
	cmp	DWORD PTR [esi+80], edi
; Line 26197
	mov	DWORD PTR [esi+80], edi
	jge	SHORT $LN9@sqlite3Btr@47
; Line 26198
	mov	ecx, DWORD PTR _pRes$[esp+4]
	mov	DWORD PTR [ecx], edi
	pop	edi
; Line 26199
	xor	eax, eax
	pop	esi
; Line 26231
	ret	0
$LN9@sqlite3Btr@47:
	push	ebx
	push	ebp
; Line 26203
	mov	ebp, DWORD PTR [esi+24]
; Line 26206
	cmp	BYTE PTR [ebp+4], 0
	jne	SHORT $LN32@sqlite3Btr@47
; Line 26207
	movzx	edx, WORD PTR [ebp+14]
	mov	eax, DWORD PTR [ebp+68]
	mov	ecx, DWORD PTR [esi+28]
	add	edx, eax
	lea	ecx, DWORD PTR [edx+ecx*2]
	xor	edx, edx
	mov	dh, BYTE PTR [ecx]
; Line 26208
	push	esi
	mov	dl, BYTE PTR [ecx+1]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+edx]
	add	eax, edx
	movzx	edx, BYTE PTR [eax+2]
	mov	cl, BYTE PTR [eax+1]
	movzx	eax, BYTE PTR [eax+3]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	eax, ecx
	call	_moveToChild
	add	esp, 4
; Line 26209
	cmp	eax, edi
	jne	$LN43@sqlite3Btr@47
; Line 26210
	call	_moveToRightmost
; Line 26229
	mov	ecx, DWORD PTR _pRes$[esp+12]
	pop	ebp
	pop	ebx
	mov	DWORD PTR [ecx], edi
	pop	edi
	pop	esi
; Line 26231
	ret	0
$LN32@sqlite3Btr@47:
; Line 26212
	cmp	DWORD PTR [esi+28], edi
	jne	SHORT $LN41@sqlite3Btr@47
	npad	7
$LL5@sqlite3Btr@47:
; Line 26213
	mov	ebp, DWORD PTR [ebp+80]
	test	ebp, ebp
	je	$LN40@sqlite3Btr@47
	cmp	DWORD PTR [ebp+76], 1
	ja	SHORT $LN35@sqlite3Btr@47
	movzx	ecx, BYTE PTR [ebp+8]
	mov	edx, DWORD PTR [ebp+68]
	lea	eax, DWORD PTR [ecx+edx]
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+3]
	mov	cl, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN40@sqlite3Btr@47
$LN35@sqlite3Btr@47:
; Line 26218
	mov	edi, DWORD PTR [esi+24]
	mov	ebp, DWORD PTR [edi+80]
	mov	eax, DWORD PTR [ebp+72]
	movzx	ecx, WORD PTR [eax+34]
	test	cx, cx
	movzx	ebx, WORD PTR [edi+16]
	jne	SHORT $LN27@sqlite3Btr@47
	call	__page_ref
	jmp	SHORT $LN28@sqlite3Btr@47
$LN27@sqlite3Btr@47:
	add	ecx, 1
	mov	WORD PTR [eax+34], cx
$LN28@sqlite3Btr@47:
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerUnref
	test	ebx, ebx
	mov	DWORD PTR [esi+24], ebp
	mov	WORD PTR [esi+62], 0
	mov	DWORD PTR [esi+28], ebx
	je	SHORT $LL5@sqlite3Btr@47
$LN41@sqlite3Btr@47:
; Line 26221
	add	DWORD PTR [esi+28], -1
; Line 26222
	xor	edi, edi
	mov	WORD PTR [esi+62], di
; Line 26223
	cmp	BYTE PTR [ebp+6], 0
	je	SHORT $LN2@sqlite3Btr@47
	cmp	BYTE PTR [ebp+4], 0
	jne	SHORT $LN2@sqlite3Btr@47
; Line 26224
	mov	eax, DWORD PTR _pRes$[esp+12]
	push	eax
	push	esi
	call	_sqlite3BtreePrevious
; Line 26229
	mov	ecx, DWORD PTR _pRes$[esp+20]
	add	esp, 8
	pop	ebp
	pop	ebx
	mov	DWORD PTR [ecx], edi
	pop	edi
	pop	esi
; Line 26231
	ret	0
$LN40@sqlite3Btr@47:
; Line 26215
	mov	edx, DWORD PTR _pRes$[esp+12]
	pop	ebp
	pop	ebx
	mov	BYTE PTR [esi+65], 0
	pop	edi
	mov	DWORD PTR [edx], 1
; Line 26216
	xor	eax, eax
	pop	esi
; Line 26231
	ret	0
$LN2@sqlite3Btr@47:
; Line 26229
	mov	ecx, DWORD PTR _pRes$[esp+12]
	xor	eax, eax
	mov	DWORD PTR [ecx], edi
$LN43@sqlite3Btr@47:
	pop	ebp
	pop	ebx
	pop	edi
$LN12@sqlite3Btr@47:
	pop	esi
; Line 26231
	ret	0
_sqlite3BtreePrevious ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeCreateTable
_TEXT	SEGMENT
_pRoot$ = -16						; size = 4
_pPageMove$87852 = -16					; size = 4
_pgnoMove$87851 = -12					; size = 4
_pgnoRoot$ = -12					; size = 4
_eType$87859 = -8					; size = 1
_rc$ = -8						; size = 4
_iPtrPage$87860 = -4					; size = 4
_p$ = 8							; size = 4
_piTable$ = 12						; size = 4
_flags$ = 16						; size = 4
_sqlite3BtreeCreateTable PROC				; COMDAT
; Line 28116
	sub	esp, 16					; 00000010H
	push	esi
; Line 28117
	mov	esi, DWORD PTR _p$[esp+16]
	push	edi
	mov	edi, DWORD PTR [esi+4]
; Line 28121
	cmp	BYTE PTR [edi+48], 2
	je	SHORT $LN19@sqlite3Btr@48
; Line 28123
	mov	al, BYTE PTR [edi+13]
	neg	al
	pop	edi
	pop	esi
	sbb	eax, eax
	and	eax, 7
	add	eax, 1
; Line 28239
	add	esp, 16					; 00000010H
	ret	0
$LN19@sqlite3Btr@48:
; Line 28131
	cmp	BYTE PTR [edi+18], 0
	push	ebx
	push	ebp
	je	$LN18@sqlite3Btr@48
; Line 28140
	mov	eax, edi
	call	_invalidateAllOverflowCache
; Line 28146
	lea	eax, DWORD PTR _pgnoRoot$[esp+32]
	push	eax
	push	4
	mov	eax, esi
	call	_sqlite3BtreeGetMeta
	add	esp, 8
; Line 28147
	test	eax, eax
	jne	$LN46@sqlite3Btr@48
; Line 28148
	mov	ebp, DWORD PTR _pgnoRoot$[esp+32]
	add	ebp, 1
; Line 28154
	push	ebp
	call	_ptrmapPageno
	add	esp, 4
	cmp	ebp, eax
	je	SHORT $LN15@sqlite3Btr@48
	movzx	ecx, WORD PTR [edi+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ecx
	add	eax, 1
	cmp	ebp, eax
	jne	SHORT $LN16@sqlite3Btr@48
$LN15@sqlite3Btr@48:
; Line 28155
	add	ebp, 1
$LN16@sqlite3Btr@48:
; Line 28163
	push	1
	push	ebp
	lea	edx, DWORD PTR _pgnoMove$87851[esp+40]
	push	edx
	lea	eax, DWORD PTR _pPageMove$87852[esp+44]
	push	eax
	push	edi
	call	_allocateBtreePage
	add	esp, 20					; 00000014H
; Line 28164
	test	eax, eax
; Line 28165
	jne	$LN46@sqlite3Btr@48
; Line 28168
	cmp	DWORD PTR _pgnoMove$87851[esp+32], ebp
	je	$LN13@sqlite3Btr@48
; Line 28178
	mov	eax, DWORD PTR _pPageMove$87852[esp+32]
	test	eax, eax
	je	SHORT $LN22@sqlite3Btr@48
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN22@sqlite3Btr@48:
; Line 28181
	lea	ecx, DWORD PTR _pRoot$[esp+32]
	push	ecx
	xor	eax, eax
	mov	esi, ebp
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 28182
	test	eax, eax
; Line 28183
	jne	$LN46@sqlite3Btr@48
; Line 28185
	lea	edx, DWORD PTR _iPtrPage$87860[esp+32]
	push	edx
	lea	eax, DWORD PTR _eType$87859[esp+36]
	push	eax
	mov	eax, ebp
	mov	ecx, edi
	call	_ptrmapGet
	mov	esi, eax
	add	esp, 8
; Line 28186
	test	esi, esi
	jne	$LN45@sqlite3Btr@48
	mov	ebx, DWORD PTR _eType$87859[esp+32]
	cmp	bl, 1
	je	$LN45@sqlite3Btr@48
	cmp	bl, 2
	je	$LN45@sqlite3Btr@48
; Line 28192
	mov	esi, DWORD PTR _pRoot$[esp+32]
	mov	ecx, DWORD PTR [esi+72]
	push	ecx
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 28193
	test	eax, eax
	mov	DWORD PTR _rc$[esp+32], eax
	je	SHORT $LN9@sqlite3Btr@48
; Line 28194
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
; Line 28195
	mov	eax, DWORD PTR _rc$[esp+32]
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 28239
	add	esp, 16					; 00000010H
	ret	0
$LN9@sqlite3Btr@48:
; Line 28197
	mov	edx, DWORD PTR _pgnoMove$87851[esp+32]
	mov	eax, DWORD PTR _iPtrPage$87860[esp+32]
	push	edx
	push	eax
	push	ebx
	push	edi
	mov	eax, esi
	call	_relocatePage
	mov	ebx, eax
; Line 28198
	mov	eax, DWORD PTR [esi+72]
	add	esp, 16					; 00000010H
	call	_sqlite3PagerUnref
; Line 28201
	test	ebx, ebx
; Line 28202
	jne	SHORT $LN49@sqlite3Btr@48
; Line 28204
	lea	ecx, DWORD PTR _pRoot$[esp+32]
	push	ecx
	xor	eax, eax
	mov	esi, ebp
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 28205
	test	eax, eax
; Line 28206
	jne	$LN46@sqlite3Btr@48
; Line 28208
	mov	esi, DWORD PTR _pRoot$[esp+32]
	mov	edx, DWORD PTR [esi+72]
	push	edx
	call	_sqlite3PagerWrite
	mov	ebx, eax
	add	esp, 4
; Line 28209
	test	ebx, ebx
	je	SHORT $LN44@sqlite3Btr@48
; Line 28210
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
$LN49@sqlite3Btr@48:
	pop	ebp
; Line 28211
	mov	eax, ebx
	pop	ebx
	pop	edi
	pop	esi
; Line 28239
	add	esp, 16					; 00000010H
	ret	0
$LN45@sqlite3Btr@48:
; Line 28187
	mov	eax, DWORD PTR _pRoot$[esp+32]
	test	eax, eax
	je	SHORT $LN25@sqlite3Btr@48
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN25@sqlite3Btr@48:
	pop	ebp
	pop	ebx
	pop	edi
; Line 28188
	mov	eax, esi
	pop	esi
; Line 28239
	add	esp, 16					; 00000010H
	ret	0
$LN13@sqlite3Btr@48:
; Line 28214
	mov	esi, DWORD PTR _pPageMove$87852[esp+32]
$LN44@sqlite3Btr@48:
; Line 28218
	push	1
	xor	ebx, ebx
	mov	eax, ebp
	mov	ecx, edi
	call	_ptrmapPut
	mov	edi, eax
	add	esp, 4
; Line 28219
	test	edi, edi
; Line 28221
	jne	SHORT $LN48@sqlite3Btr@48
; Line 28223
	mov	ecx, DWORD PTR _p$[esp+28]
	mov	ebx, ebp
	lea	edi, DWORD PTR [eax+4]
	call	_sqlite3BtreeUpdateMeta
	mov	edi, eax
; Line 28224
	test	edi, edi
	je	SHORT $LN1@sqlite3Btr@48
$LN48@sqlite3Btr@48:
; Line 28225
	test	esi, esi
	je	SHORT $LN40@sqlite3Btr@48
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
$LN40@sqlite3Btr@48:
	pop	ebp
	pop	ebx
; Line 28226
	mov	eax, edi
	pop	edi
	pop	esi
; Line 28239
	add	esp, 16					; 00000010H
	ret	0
$LN18@sqlite3Btr@48:
; Line 28230
	push	0
	push	1
	lea	eax, DWORD PTR _pgnoRoot$[esp+40]
	push	eax
	lea	ecx, DWORD PTR _pRoot$[esp+44]
	push	ecx
	push	edi
	call	_allocateBtreePage
	add	esp, 20					; 00000014H
; Line 28231
	test	eax, eax
	jne	SHORT $LN46@sqlite3Btr@48
	mov	ebp, DWORD PTR _pgnoRoot$[esp+32]
	mov	esi, DWORD PTR _pRoot$[esp+32]
$LN1@sqlite3Btr@48:
; Line 28235
	mov	eax, DWORD PTR _flags$[esp+28]
	or	eax, 8
	push	eax
	call	_zeroPage
; Line 28236
	mov	eax, DWORD PTR [esi+72]
	add	esp, 4
	call	_sqlite3PagerUnref
; Line 28237
	mov	edx, DWORD PTR _piTable$[esp+28]
	mov	DWORD PTR [edx], ebp
; Line 28238
	xor	eax, eax
$LN46@sqlite3Btr@48:
	pop	ebp
	pop	ebx
	pop	edi
	pop	esi
; Line 28239
	add	esp, 16					; 00000010H
	ret	0
_sqlite3BtreeCreateTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DP@PJBOOLEO@Outstanding?5page?5count?5goes?5from@ ; `string'
PUBLIC	??_C@_0CC@IBCKHFBM@Pointer?5map?5page?5?$CFd?5is?5reference@ ; `string'
PUBLIC	??_C@_0BG@NJBAMKDO@Page?5?$CFd?5is?5never?5used?$AA@ ; `string'
PUBLIC	??_C@_0BF@CFAFGJN@List?5of?5tree?5roots?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BA@EAICBBKE@Main?5freelist?3?5?$AA@	; `string'
PUBLIC	??_C@_0BK@JIPGMNFI@Unable?5to?5malloc?5?$CFd?5bytes?$AA@ ; `string'
PUBLIC	??_C@_0CO@KJCLICBN@Unable?5to?5acquire?5a?5read?5lock?5on@ ; `string'
;	COMDAT ??_C@_0DP@PJBOOLEO@Outstanding?5page?5count?5goes?5from@
CONST	SEGMENT
??_C@_0DP@PJBOOLEO@Outstanding?5page?5count?5goes?5from@ DB 'Outstanding '
	DB	'page count goes from %d to %d during this analysis', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IBCKHFBM@Pointer?5map?5page?5?$CFd?5is?5reference@
CONST	SEGMENT
??_C@_0CC@IBCKHFBM@Pointer?5map?5page?5?$CFd?5is?5reference@ DB 'Pointer '
	DB	'map page %d is referenced', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NJBAMKDO@Page?5?$CFd?5is?5never?5used?$AA@
CONST	SEGMENT
??_C@_0BG@NJBAMKDO@Page?5?$CFd?5is?5never?5used?$AA@ DB 'Page %d is never'
	DB	' used', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CFAFGJN@List?5of?5tree?5roots?3?5?$AA@
CONST	SEGMENT
??_C@_0BF@CFAFGJN@List?5of?5tree?5roots?3?5?$AA@ DB 'List of tree roots: '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EAICBBKE@Main?5freelist?3?5?$AA@
CONST	SEGMENT
??_C@_0BA@EAICBBKE@Main?5freelist?3?5?$AA@ DB 'Main freelist: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JIPGMNFI@Unable?5to?5malloc?5?$CFd?5bytes?$AA@
CONST	SEGMENT
??_C@_0BK@JIPGMNFI@Unable?5to?5malloc?5?$CFd?5bytes?$AA@ DB 'Unable to ma'
	DB	'lloc %d bytes', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KJCLICBN@Unable?5to?5acquire?5a?5read?5lock?5on@
CONST	SEGMENT
??_C@_0CO@KJCLICBN@Unable?5to?5acquire?5a?5read?5lock?5on@ DB 'Unable to '
	DB	'acquire a read lock on the database', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3BtreeIntegrityCheck
_TEXT	SEGMENT
_i$ = -36						; size = 4
_nRef$ = -32						; size = 4
_sCheck$ = -28						; size = 28
_aRoot$ = 8						; size = 4
_nRoot$ = 12						; size = 4
_mxErr$ = 16						; size = 4
_pnErr$ = 20						; size = 4
_sqlite3BtreeIntegrityCheck PROC			; COMDAT
; _p$ = eax
; Line 28865
	sub	esp, 36					; 00000024H
	push	ebx
	mov	ebx, eax
	push	ebp
; Line 28869
	mov	ebp, DWORD PTR [ebx+4]
; Line 28871
	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	esi
	mov	DWORD PTR _nRef$[esp+48], ecx
; Line 28872
	call	_lockBtreeWithRetry
	test	eax, eax
	je	SHORT $LN20@sqlite3Btr@49
; Line 28873
	mov	ecx, 46					; 0000002eH
	call	_sqlite3MallocRaw
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN25@sqlite3Btr@49
	push	46					; 0000002eH
	push	OFFSET ??_C@_0CO@KJCLICBN@Unable?5to?5acquire?5a?5read?5lock?5on@
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN25@sqlite3Btr@49:
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 28958
	add	esp, 36					; 00000024H
	ret	0
$LN20@sqlite3Btr@49:
; Line 28875
	mov	DWORD PTR _sCheck$[esp+48], ebp
; Line 28876
	mov	esi, DWORD PTR [ebp]
	push	edi
	mov	DWORD PTR _sCheck$[esp+56], esi
; Line 28877
	call	_sqlite3PagerPagecount
; Line 28878
	mov	edx, DWORD PTR _mxErr$[esp+48]
; Line 28880
	mov	edi, DWORD PTR _pnErr$[esp+48]
	mov	DWORD PTR _sCheck$[esp+60], eax
	mov	DWORD PTR _sCheck$[esp+68], edx
	mov	DWORD PTR _sCheck$[esp+76], 0
	mov	DWORD PTR [edi], 0
; Line 28882
	mov	ecx, DWORD PTR [ebp+20]
	test	ecx, ecx
	je	SHORT $LN19@sqlite3Btr@49
; Line 28883
	mov	eax, ecx
	mov	DWORD PTR _sCheck$[esp+60], eax
$LN19@sqlite3Btr@49:
; Line 28886
	test	eax, eax
	jne	SHORT $LN18@sqlite3Btr@49
; Line 28887
	mov	esi, ebp
	call	_unlockBtreeIfUnused
	pop	edi
	pop	esi
	pop	ebp
; Line 28888
	xor	eax, eax
	pop	ebx
; Line 28958
	add	esp, 36					; 00000024H
	ret	0
$LN18@sqlite3Btr@49:
; Line 28890
	lea	ecx, DWORD PTR [eax*4+4]
	call	_sqlite3MallocRaw
	mov	esi, eax
; Line 28891
	test	esi, esi
	mov	DWORD PTR _sCheck$[esp+64], esi
	jne	SHORT $LN17@sqlite3Btr@49
; Line 28892
	mov	esi, ebp
	call	_unlockBtreeIfUnused
; Line 28895
	mov	eax, DWORD PTR _sCheck$[esp+60]
	lea	ecx, DWORD PTR [eax*4+4]
	push	ecx
	push	OFFSET ??_C@_0BK@JIPGMNFI@Unable?5to?5malloc?5?$CFd?5bytes?$AA@
	mov	DWORD PTR [edi], 1
	call	_sqlite3MPrintf
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 28958
	add	esp, 36					; 00000024H
	ret	0
$LN17@sqlite3Btr@49:
; Line 28897
	mov	ecx, DWORD PTR _sCheck$[esp+60]
	xor	eax, eax
	test	ecx, ecx
	lea	ebx, DWORD PTR [eax+1]
	jl	SHORT $LN14@sqlite3Btr@49
	npad	7
$LL64@sqlite3Btr@49:
	mov	DWORD PTR [esi+eax*4], 0
	mov	ecx, DWORD PTR _sCheck$[esp+60]
	mov	esi, DWORD PTR _sCheck$[esp+64]
	add	eax, ebx
	cmp	eax, ecx
	jle	SHORT $LL64@sqlite3Btr@49
$LN14@sqlite3Btr@49:
; Line 28898
	movzx	edi, WORD PTR [ebp+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	edi
	add	eax, ebx
; Line 28899
	cmp	eax, ecx
	jg	SHORT $LN13@sqlite3Btr@49
; Line 28900
	mov	DWORD PTR [esi+eax*4], ebx
$LN13@sqlite3Btr@49:
; Line 28907
	xor	ecx, ecx
	xor	edi, edi
	mov	DWORD PTR _sCheck$[esp+72], edi
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [edx+68]
	mov	ch, BYTE PTR [eax+36]
	movzx	edx, BYTE PTR [eax+38]
	push	OFFSET ??_C@_0BA@EAICBBKE@Main?5freelist?3?5?$AA@
	mov	cl, BYTE PTR [eax+37]
	shl	ecx, 8
	or	ecx, edx
	movzx	edx, BYTE PTR [eax+39]
	shl	ecx, 8
	or	ecx, edx
	movzx	edx, BYTE PTR [eax+34]
	push	ecx
	xor	ecx, ecx
	mov	ch, BYTE PTR [eax+32]
	push	ebx
	mov	cl, BYTE PTR [eax+33]
	movzx	eax, BYTE PTR [eax+35]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	mov	eax, ecx
	lea	ecx, DWORD PTR _sCheck$[esp+64]
	call	_checkList
	add	esp, 12					; 0000000cH
; Line 28911
	cmp	DWORD PTR _nRoot$[esp+48], edi
	mov	DWORD PTR _i$[esp+52], edi
	jle	SHORT $LN65@sqlite3Btr@49
	npad	7
$LL69@sqlite3Btr@49:
	cmp	DWORD PTR _sCheck$[esp+68], 0
	je	SHORT $LN65@sqlite3Btr@49
; Line 28912
	mov	ecx, DWORD PTR _aRoot$[esp+48]
	mov	esi, DWORD PTR [ecx+edi*4]
	test	esi, esi
	je	SHORT $LN11@sqlite3Btr@49
; Line 28914
	cmp	BYTE PTR [ebp+18], 0
	je	SHORT $LN8@sqlite3Btr@49
	cmp	esi, ebx
	jle	SHORT $LN8@sqlite3Btr@49
; Line 28915
	push	0
	push	0
	lea	edi, DWORD PTR _sCheck$[esp+60]
	call	_checkPtrmap
	mov	edi, DWORD PTR _i$[esp+60]
	add	esp, 8
$LN8@sqlite3Btr@49:
; Line 28918
	mov	edx, DWORD PTR _aRoot$[esp+48]
	mov	eax, DWORD PTR [edx+edi*4]
	push	OFFSET ??_C@_0BF@CFAFGJN@List?5of?5tree?5roots?3?5?$AA@
	push	0
	push	eax
	lea	ecx, DWORD PTR _sCheck$[esp+64]
	push	ecx
	call	_checkTreePage
	add	esp, 16					; 00000010H
$LN11@sqlite3Btr@49:
	add	edi, ebx
	cmp	edi, DWORD PTR _nRoot$[esp+48]
	mov	DWORD PTR _i$[esp+52], edi
	jl	SHORT $LL69@sqlite3Btr@49
$LN65@sqlite3Btr@49:
; Line 28923
	cmp	DWORD PTR _sCheck$[esp+60], ebx
	mov	esi, ebx
	jl	$LN66@sqlite3Btr@49
$LL7@sqlite3Btr@49:
	cmp	DWORD PTR _sCheck$[esp+68], 0
	je	$LN66@sqlite3Btr@49
; Line 28933
	mov	edx, DWORD PTR _sCheck$[esp+64]
	cmp	DWORD PTR [edx+esi*4], 0
	jne	SHORT $LN68@sqlite3Btr@49
	movzx	ecx, WORD PTR [ebp+26]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	edi, DWORD PTR [edx+eax+1]
	xor	edx, edx
	lea	eax, DWORD PTR [esi-2]
	div	edi
	mov	ecx, eax
	imul	ecx, edi
	movzx	edi, WORD PTR [ebp+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	edi
	add	ecx, 2
	add	eax, ebx
	cmp	ecx, eax
	jne	SHORT $LN33@sqlite3Btr@49
	add	ecx, ebx
$LN33@sqlite3Btr@49:
	cmp	ecx, esi
	jne	SHORT $LN3@sqlite3Btr@49
	cmp	BYTE PTR [ebp+18], 0
	jne	SHORT $LN68@sqlite3Btr@49
$LN3@sqlite3Btr@49:
; Line 28934
	push	esi
	push	OFFSET ??_C@_0BG@NJBAMKDO@Page?5?$CFd?5is?5never?5used?$AA@
	xor	eax, eax
	lea	ecx, DWORD PTR _sCheck$[esp+60]
	call	_checkAppendMsg
	add	esp, 8
$LN68@sqlite3Btr@49:
; Line 28937
	mov	ecx, DWORD PTR _sCheck$[esp+64]
	cmp	DWORD PTR [ecx+esi*4], 0
	je	SHORT $LN6@sqlite3Btr@49
	movzx	ecx, WORD PTR [ebp+26]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 1
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	lea	edi, DWORD PTR [edx+eax+1]
	xor	edx, edx
	lea	eax, DWORD PTR [esi-2]
	div	edi
	mov	ecx, eax
	imul	ecx, edi
	movzx	edi, WORD PTR [ebp+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	edi
	add	ecx, 2
	add	eax, ebx
	cmp	ecx, eax
	jne	SHORT $LN36@sqlite3Btr@49
	add	ecx, ebx
$LN36@sqlite3Btr@49:
	cmp	ecx, esi
	jne	SHORT $LN6@sqlite3Btr@49
	cmp	BYTE PTR [ebp+18], 0
	je	SHORT $LN6@sqlite3Btr@49
; Line 28938
	push	esi
	push	OFFSET ??_C@_0CC@IBCKHFBM@Pointer?5map?5page?5?$CFd?5is?5reference@
	xor	eax, eax
	lea	ecx, DWORD PTR _sCheck$[esp+60]
	call	_checkAppendMsg
	add	esp, 8
$LN6@sqlite3Btr@49:
	add	esi, ebx
	cmp	esi, DWORD PTR _sCheck$[esp+60]
	jle	$LL7@sqlite3Btr@49
$LN66@sqlite3Btr@49:
; Line 28945
	cmp	BYTE PTR [ebp+48], 0
	jne	SHORT $LN70@sqlite3Btr@49
	cmp	DWORD PTR [ebp+4], 0
	jne	SHORT $LN70@sqlite3Btr@49
	mov	eax, DWORD PTR [ebp+8]
	test	eax, eax
	je	SHORT $LN70@sqlite3Btr@49
	mov	ecx, DWORD PTR [ebp]
	cmp	DWORD PTR [ecx+64], ebx
	jl	SHORT $LN46@sqlite3Btr@49
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $LN39@sqlite3Btr@49
	movzx	edx, WORD PTR [ebp+24]
	mov	ecx, eax
	sub	ecx, edx
	mov	DWORD PTR [eax+68], ecx
	mov	DWORD PTR [eax+64], ebp
	mov	DWORD PTR [eax+76], ebx
$LN39@sqlite3Btr@49:
	mov	eax, DWORD PTR [ebp+8]
	test	eax, eax
	je	SHORT $LN46@sqlite3Btr@49
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN46@sqlite3Btr@49:
	mov	DWORD PTR [ebp+8], 0
	mov	BYTE PTR [ebp+12], 0
$LN70@sqlite3Btr@49:
; Line 28946
	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _nRef$[esp+52]
	cmp	ecx, eax
	je	SHORT $LN1@sqlite3Btr@49
; Line 28950
	push	eax
	push	ecx
	push	OFFSET ??_C@_0DP@PJBOOLEO@Outstanding?5page?5count?5goes?5from@
	xor	eax, eax
	lea	ecx, DWORD PTR _sCheck$[esp+64]
	call	_checkAppendMsg
	add	esp, 12					; 0000000cH
$LN1@sqlite3Btr@49:
; Line 28955
	mov	eax, DWORD PTR _sCheck$[esp+64]
	test	eax, eax
	je	SHORT $LN56@sqlite3Btr@49
	push	eax
	call	_free
	add	esp, 4
$LN56@sqlite3Btr@49:
; Line 28956
	mov	eax, DWORD PTR _sCheck$[esp+76]
	mov	ecx, DWORD PTR _pnErr$[esp+48]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [ecx], eax
; Line 28957
	mov	eax, DWORD PTR _sCheck$[esp+60]
	pop	ebx
; Line 28958
	add	esp, 36					; 00000024H
	ret	0
_sqlite3BtreeIntegrityCheck ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeMemFromBtree
_TEXT	SEGMENT
_available$ = -4					; size = 4
_offset$ = 8						; size = 4
_key$ = 12						; size = 4
_sqlite3VdbeMemFromBtree PROC				; COMDAT
; _pCur$ = ecx
; _amt$ = ebx
; _pMem$ = eax
; Line 30015
	push	ecx
; Line 30019
	cmp	DWORD PTR _key$[esp], 0
	push	ebp
	push	esi
	push	edi
	mov	esi, eax
	mov	edi, ecx
	mov	DWORD PTR _available$[esp+16], 0
	je	SHORT $LN12@sqlite3Vdb@50
; Line 30020
	lea	eax, DWORD PTR _available$[esp+16]
	push	eax
	call	_sqlite3BtreeKeyFetch
; Line 30021
	jmp	SHORT $LN26@sqlite3Vdb@50
$LN12@sqlite3Vdb@50:
; Line 30022
	lea	ecx, DWORD PTR _available$[esp+16]
	push	ecx
	call	_sqlite3BtreeDataFetch
$LN26@sqlite3Vdb@50:
; Line 30027
	mov	ecx, DWORD PTR _offset$[esp+16]
	lea	edx, DWORD PTR [ecx+ebx]
	add	esp, 4
	cmp	edx, DWORD PTR _available$[esp+16]
	mov	DWORD PTR [esi+20], ebx
	jg	SHORT $LN10@sqlite3Vdb@50
; Line 30028
	add	eax, ecx
	mov	DWORD PTR [esi+16], eax
; Line 30029
	mov	WORD PTR [esi+24], 272			; 00000110H
$LN3@sqlite3Vdb@50:
	pop	edi
	pop	esi
; Line 30067
	xor	eax, eax
	pop	ebp
; Line 30068
	pop	ecx
	ret	0
$LN10@sqlite3Vdb@50:
; Line 30032
	cmp	ebx, 30					; 0000001eH
	jle	SHORT $LN8@sqlite3Vdb@50
; Line 30033
	lea	ecx, DWORD PTR [ebx+2]
	call	_sqlite3MallocRaw
	mov	ebp, eax
; Line 30034
	test	ebp, ebp
	jne	SHORT $LN7@sqlite3Vdb@50
	pop	edi
	pop	esi
; Line 30035
	lea	eax, DWORD PTR [ebp+7]
	pop	ebp
; Line 30068
	pop	ecx
	ret	0
$LN7@sqlite3Vdb@50:
; Line 30039
	mov	ecx, DWORD PTR _offset$[esp+12]
	mov	WORD PTR [esi+24], 112			; 00000070H
	mov	DWORD PTR [esi+28], 0
	jmp	SHORT $LN6@sqlite3Vdb@50
$LN8@sqlite3Vdb@50:
; Line 30040
	lea	ebp, DWORD PTR [esi+32]
; Line 30041
	mov	WORD PTR [esi+24], 560			; 00000230H
$LN6@sqlite3Vdb@50:
; Line 30047
	cmp	DWORD PTR _key$[esp+12], 0
	mov	DWORD PTR [esi+16], ebp
	mov	BYTE PTR [esi+27], 0
	mov	BYTE PTR [esi+26], 4
	je	SHORT $LN5@sqlite3Vdb@50
; Line 30048
	push	ebp
	push	ebx
	push	ecx
	mov	esi, edi
	call	_sqlite3BtreeKey
	add	esp, 12					; 0000000cH
; Line 30049
	jmp	SHORT $LN15@sqlite3Vdb@50
$LN5@sqlite3Vdb@50:
; Line 30050
	cmp	BYTE PTR [edi+65], 2
	jne	SHORT $LN25@sqlite3Vdb@50
	push	edi
	call	_sqlite3BtreeRestoreOrClearCursorPosition
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN15@sqlite3Vdb@50
	mov	ecx, DWORD PTR _offset$[esp+12]
$LN25@sqlite3Vdb@50:
	push	0
	push	1
	push	ebp
	push	ebx
	push	edi
	mov	eax, ecx
	call	_accessPayload
	add	esp, 20					; 00000014H
$LN15@sqlite3Vdb@50:
	mov	esi, eax
; Line 30054
	test	esi, esi
	mov	BYTE PTR [ebx+ebp], 0
	mov	BYTE PTR [ebx+ebp+1], 0
	je	$LN3@sqlite3Vdb@50
; Line 30055
	cmp	ebx, 30					; 0000001eH
	jle	SHORT $LN23@sqlite3Vdb@50
; Line 30058
	test	ebp, ebp
	je	SHORT $LN23@sqlite3Vdb@50
	push	ebp
	call	_free
	add	esp, 4
$LN23@sqlite3Vdb@50:
	pop	edi
; Line 30063
	mov	eax, esi
	pop	esi
	pop	ebp
; Line 30068
	pop	ecx
	ret	0
_sqlite3VdbeMemFromBtree ENDP
_TEXT	ENDS
PUBLIC	??_C@_09PMECONDC@?$CFs?9mj?$CF08X?$AA@		; `string'
;	COMDAT ??_C@_09PMECONDC@?$CFs?9mj?$CF08X?$AA@
CONST	SEGMENT
??_C@_09PMECONDC@?$CFs?9mj?$CF08X?$AA@ DB '%s-mj%08X', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _vdbeCommit
_TEXT	SEGMENT
_master$89252 = -12					; size = 4
_nTrans$ = -12						; size = 4
tv1011 = -8						; size = 4
_random$89256 = -8					; size = 4
tv91 = -4						; size = 4
_nTrunc$136613 = -4					; size = 4
_needSync$89249 = -4					; size = 4
_i$ = -4						; size = 4
_rc$ = -4						; size = 4
_db$ = 8						; size = 4
_vdbeCommit PROC					; COMDAT
; Line 31316
	sub	esp, 12					; 0000000cH
	push	ebx
	mov	ebx, DWORD PTR _db$[esp+12]
	push	ebp
	push	esi
; Line 31318
	xor	ebp, ebp
	push	edi
; Line 31328
	xor	eax, eax
	mov	esi, ebx
	mov	DWORD PTR _nTrans$[esp+28], ebp
	call	_sqlite3VtabSync
	mov	edi, eax
; Line 31329
	test	edi, edi
; Line 31330
	jne	$LN47@vdbeCommit
; Line 31339
	cmp	DWORD PTR [ebx], eax
	jle	$LN39@vdbeCommit
	mov	ecx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR [ebx]
	add	ecx, 4
$LL45@vdbeCommit:
; Line 31340
	mov	edx, DWORD PTR [ecx]
; Line 31341
	test	edx, edx
	je	SHORT $LN44@vdbeCommit
	cmp	BYTE PTR [edx+8], 2
	jne	SHORT $LN44@vdbeCommit
; Line 31342
	mov	ebp, 1
; Line 31343
	cmp	eax, ebp
	je	SHORT $LN44@vdbeCommit
	add	DWORD PTR _nTrans$[esp+28], ebp
$LN44@vdbeCommit:
; Line 31339
	add	eax, 1
	add	ecx, 24					; 00000018H
	cmp	eax, esi
	jl	SHORT $LL45@vdbeCommit
; Line 31348
	test	ebp, ebp
	je	SHORT $LN39@vdbeCommit
	mov	eax, DWORD PTR [ebx+108]
	test	eax, eax
	je	SHORT $LN39@vdbeCommit
; Line 31349
	mov	ebp, -264537850				; f03b7906H
	cmp	DWORD PTR [ebx+48], ebp
	mov	esi, -1254786768			; b5357930H
	jne	SHORT $LN54@vdbeCommit
	mov	DWORD PTR [ebx+48], -1607883113		; a029a697H
	jmp	SHORT $LN53@vdbeCommit
$LN54@vdbeCommit:
	mov	DWORD PTR [ebx+48], esi
	mov	DWORD PTR [ebx+152], 1
$LN53@vdbeCommit:
; Line 31350
	mov	ecx, DWORD PTR [ebx+104]
	push	ecx
	call	eax
	mov	edi, eax
; Line 31351
	mov	eax, DWORD PTR [ebx+48]
	add	esp, 4
	cmp	eax, -1607883113			; a029a697H
	jne	SHORT $LN59@vdbeCommit
	mov	DWORD PTR [ebx+48], ebp
	jmp	SHORT $LN57@vdbeCommit
$LN59@vdbeCommit:
	cmp	eax, ebp
	jne	SHORT $LN57@vdbeCommit
	mov	DWORD PTR [ebx+48], esi
	mov	DWORD PTR [ebx+152], 1
$LN57@vdbeCommit:
; Line 31352
	test	edi, edi
	je	SHORT $LN39@vdbeCommit
	pop	edi
	pop	esi
	pop	ebp
; Line 31353
	mov	eax, 19					; 00000013H
	pop	ebx
; Line 31523
	add	esp, 12					; 0000000cH
	ret	0
$LN39@vdbeCommit:
; Line 31366
	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+84]
	lea	esi, DWORD PTR [eax+1]
$LL207@vdbeCommit:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL207@vdbeCommit
	sub	eax, esi
	je	$LN37@vdbeCommit
	cmp	DWORD PTR _nTrans$[esp+28], 1
	jle	$LN37@vdbeCommit
; Line 31398
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	ebp, DWORD PTR [eax+84]
	xor	ebx, ebx
	mov	DWORD PTR _needSync$89249[esp+28], ebx
; Line 31399
	mov	DWORD PTR _master$89252[esp+28], ebx
$LL26@vdbeCommit:
; Line 31404
	test	ebx, ebx
	je	SHORT $LN107@vdbeCommit
	push	ebx
	call	_free
	add	esp, 4
$LN107@vdbeCommit:
; Line 31405
	add	DWORD PTR _inMutex, 1
	mov	esi, 4
	lea	edi, DWORD PTR _random$89256[esp+28]
$LL110@vdbeCommit:
	sub	esi, 1
	call	_randomByte
	mov	BYTE PTR [edi], al
	add	edi, 1
	test	esi, esi
	jne	SHORT $LL110@vdbeCommit
; Line 31406
	mov	ecx, DWORD PTR _random$89256[esp+28]
	sub	DWORD PTR _inMutex, 1
	and	ecx, 2147483647				; 7fffffffH
	push	ecx
	push	ebp
	push	OFFSET ??_C@_09PMECONDC@?$CFs?9mj?$CF08X?$AA@
	call	_sqlite3MPrintf
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 31407
	test	ebx, ebx
	je	$LN190@vdbeCommit
; Line 31410
	call	_sqlite3WinFileExists
	test	eax, eax
	jne	SHORT $LL26@vdbeCommit
; Line 31413
	push	eax
	lea	edx, DWORD PTR _master$89252[esp+32]
	push	edx
	mov	eax, ebx
	call	_sqlite3WinOpenExclusive
	mov	esi, eax
	add	esp, 8
; Line 31414
	test	esi, esi
; Line 31416
	jne	$LN222@vdbeCommit
; Line 31425
	mov	ebp, DWORD PTR _db$[esp+24]
	xor	edi, edi
	cmp	DWORD PTR [ebp], edi
	jle	$LN211@vdbeCommit
	mov	DWORD PTR tv1011[esp+28], edi
$LL219@vdbeCommit:
; Line 31427
	cmp	edi, 1
	mov	eax, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR tv1011[esp+28]
	mov	eax, DWORD PTR [ecx+eax+4]
	je	SHORT $LN20@vdbeCommit
; Line 31428
	test	eax, eax
	je	SHORT $LN20@vdbeCommit
	cmp	BYTE PTR [eax+8], 2
	jne	SHORT $LN20@vdbeCommit
; Line 31429
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+88]
; Line 31430
	cmp	BYTE PTR [edx], 0
	je	SHORT $LN20@vdbeCommit
; Line 31431
	cmp	DWORD PTR _needSync$89249[esp+28], 0
	jne	SHORT $LN15@vdbeCommit
	cmp	BYTE PTR [eax+7], 0
	jne	SHORT $LN15@vdbeCommit
; Line 31432
	mov	DWORD PTR _needSync$89249[esp+28], 1
$LN15@vdbeCommit:
; Line 31434
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
$LL208@vdbeCommit:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL208@vdbeCommit
	mov	ecx, DWORD PTR _master$89252[esp+28]
	sub	eax, esi
	mov	esi, DWORD PTR [ecx]
	add	eax, 1
	push	eax
	mov	eax, DWORD PTR [esi+12]
	push	edx
	push	ecx
	call	eax
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 31435
	test	esi, esi
	jne	$LN192@vdbeCommit
$LN20@vdbeCommit:
; Line 31425
	add	DWORD PTR tv1011[esp+28], 24		; 00000018H
	add	edi, 1
	cmp	edi, DWORD PTR [ebp]
	jl	SHORT $LL219@vdbeCommit
$LN211@vdbeCommit:
; Line 31448
	mov	ecx, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+92]
; Line 31449
	mov	ecx, DWORD PTR _master$89252[esp+28]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	push	ecx
	call	eax
	mov	esi, eax
	add	esp, 8
; Line 31451
	test	esi, esi
	jne	$LN12@vdbeCommit
	cmp	DWORD PTR _needSync$89249[esp+28], eax
	je	SHORT $LN13@vdbeCommit
	mov	eax, DWORD PTR _master$89252[esp+28]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	push	esi
	push	eax
	call	edx
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	jne	$LN12@vdbeCommit
$LN13@vdbeCommit:
; Line 31468
	xor	ebp, ebp
	test	esi, esi
	jne	SHORT $LN9@vdbeCommit
	mov	eax, DWORD PTR _db$[esp+24]
	xor	edi, edi
	npad	2
$LL11@vdbeCommit:
	cmp	ebp, DWORD PTR [eax]
	jge	SHORT $LN9@vdbeCommit
; Line 31469
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+edi+4]
; Line 31470
	test	ecx, ecx
	je	SHORT $LN10@vdbeCommit
	cmp	BYTE PTR [ecx+8], 2
	jne	SHORT $LN10@vdbeCommit
; Line 31471
	push	ebx
	call	_sqlite3BtreeCommitPhaseOne
	mov	esi, eax
	mov	eax, DWORD PTR _db$[esp+28]
	add	esp, 4
$LN10@vdbeCommit:
	add	ebp, 1
	add	edi, 24					; 00000018H
	test	esi, esi
	je	SHORT $LL11@vdbeCommit
$LN9@vdbeCommit:
; Line 31474
	mov	eax, DWORD PTR _master$89252[esp+28]
	test	eax, eax
	je	SHORT $LN158@vdbeCommit
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [edx]
	lea	eax, DWORD PTR _master$89252[esp+28]
	push	eax
	call	ecx
	add	esp, 4
$LN158@vdbeCommit:
; Line 31475
	test	esi, esi
; Line 31477
	jne	$LN222@vdbeCommit
; Line 31484
	mov	eax, ebx
	call	_sqlite3WinDelete
; Line 31485
	push	ebx
	mov	esi, eax
	call	_free
	add	esp, 4
; Line 31487
	test	esi, esi
; Line 31488
	jne	$LN223@vdbeCommit
; Line 31510
	mov	eax, DWORD PTR _db$[esp+24]
	xor	ebp, ebp
	xor	ebx, ebx
	cmp	DWORD PTR [eax], ebp
	mov	DWORD PTR _rc$[esp+28], ebp
	jle	SHORT $LN2@vdbeCommit
$LL220@vdbeCommit:
; Line 31511
	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [edx+ebp+4]
; Line 31512
	test	edi, edi
	je	SHORT $LN3@vdbeCommit
; Line 31513
	cmp	BYTE PTR [edi+8], 2
	mov	esi, DWORD PTR [edi+4]
	jne	SHORT $LN176@vdbeCommit
	mov	eax, DWORD PTR [esi]
	push	eax
	call	_sqlite3PagerCommitPhaseTwo
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@vdbeCommit
	mov	BYTE PTR [esi+48], 1
	mov	BYTE PTR [esi+12], al
$LN176@vdbeCommit:
	call	_unlockAllTables
	cmp	BYTE PTR [edi+8], 0
	je	SHORT $LN173@vdbeCommit
	add	DWORD PTR [esi+56], -1
	jne	SHORT $LN173@vdbeCommit
	mov	BYTE PTR [esi+48], 0
$LN173@vdbeCommit:
	mov	BYTE PTR [edi+8], 0
	call	_unlockBtreeIfUnused
$LN3@vdbeCommit:
	mov	eax, DWORD PTR _db$[esp+24]
	add	ebx, 1
	add	ebp, 24					; 00000018H
	cmp	ebx, DWORD PTR [eax]
	jl	SHORT $LL220@vdbeCommit
$LN2@vdbeCommit:
; Line 31518
	mov	eax, DWORD PTR _db$[esp+24]
	push	64					; 00000040H
	call	_callFinaliser
	mov	edi, DWORD PTR _rc$[esp+32]
	add	esp, 4
; Line 31522
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 31523
	add	esp, 12					; 0000000cH
	ret	0
$LN190@vdbeCommit:
	pop	edi
	pop	esi
	pop	ebp
; Line 31408
	mov	eax, 7
	pop	ebx
; Line 31523
	add	esp, 12					; 0000000cH
	ret	0
$LN192@vdbeCommit:
; Line 31436
	lea	ecx, DWORD PTR _master$89252[esp+28]
	call	_sqlite3OsClose
; Line 31437
	mov	eax, ebx
	call	_sqlite3WinDelete
; Line 31438
	push	ebx
	call	_sqlite3FreeX
	add	esp, 4
$LN223@vdbeCommit:
	pop	edi
; Line 31439
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 31523
	add	esp, 12					; 0000000cH
	ret	0
$LN12@vdbeCommit:
; Line 31452
	mov	eax, DWORD PTR _master$89252[esp+28]
	test	eax, eax
	je	SHORT $LN145@vdbeCommit
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _master$89252[esp+28]
	push	edx
	call	eax
	add	esp, 4
$LN145@vdbeCommit:
; Line 31453
	mov	eax, ebx
	call	_sqlite3WinDelete
$LN222@vdbeCommit:
; Line 31454
	push	ebx
	call	_free
	add	esp, 4
	pop	edi
; Line 31455
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 31523
	add	esp, 12					; 0000000cH
	ret	0
$LN37@vdbeCommit:
; Line 31367
	xor	ebx, ebx
	test	edi, edi
	jne	SHORT $LN215@vdbeCommit
	xor	ebp, ebp
$LL212@vdbeCommit:
	mov	eax, DWORD PTR _db$[esp+24]
	cmp	ebx, DWORD PTR [eax]
	jge	SHORT $LN34@vdbeCommit
; Line 31368
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+ebp+4]
; Line 31369
	test	ecx, ecx
	je	SHORT $LN35@vdbeCommit
; Line 31370
	xor	eax, eax
	cmp	BYTE PTR [ecx+8], 2
	jne	SHORT $LN68@vdbeCommit
	mov	esi, DWORD PTR [ecx+4]
	cmp	BYTE PTR [esi+18], al
	mov	DWORD PTR _nTrunc$136613[esp+28], eax
	je	SHORT $LN209@vdbeCommit
	lea	edx, DWORD PTR _nTrunc$136613[esp+28]
	push	edx
	mov	eax, esi
	call	_autoVacuumCommit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN68@vdbeCommit
$LN209@vdbeCommit:
	mov	eax, DWORD PTR _nTrunc$136613[esp+28]
	push	eax
	mov	eax, DWORD PTR [esi]
	push	0
	call	_sqlite3PagerCommitPhaseOne
	add	esp, 8
$LN68@vdbeCommit:
	mov	edi, eax
$LN35@vdbeCommit:
; Line 31367
	add	ebx, 1
	add	ebp, 24					; 00000018H
	test	edi, edi
	je	SHORT $LL212@vdbeCommit
$LN215@vdbeCommit:
	mov	eax, DWORD PTR _db$[esp+24]
$LN34@vdbeCommit:
; Line 31379
	xor	ebx, ebx
	cmp	edi, ebx
	mov	DWORD PTR _i$[esp+28], ebx
	jne	$LN98@vdbeCommit
	jmp	SHORT $LN32@vdbeCommit
	npad	5
$LL216@vdbeCommit:
	mov	eax, DWORD PTR _db$[esp+24]
$LN32@vdbeCommit:
	mov	ecx, DWORD PTR _i$[esp+28]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN30@vdbeCommit
; Line 31380
	mov	edx, DWORD PTR [eax+4]
	mov	ebp, DWORD PTR [edx+ebx+4]
; Line 31381
	test	ebp, ebp
	je	$LN31@vdbeCommit
; Line 31382
	cmp	BYTE PTR [ebp+8], 2
	mov	edi, DWORD PTR [ebp+4]
	jne	SHORT $LN74@vdbeCommit
	mov	eax, DWORD PTR [edi]
	push	eax
	call	_sqlite3PagerCommitPhaseTwo
	add	esp, 4
	test	eax, eax
	je	SHORT $LN73@vdbeCommit
	mov	edi, eax
	jmp	$LN31@vdbeCommit
$LN73@vdbeCommit:
	mov	BYTE PTR [edi+48], 1
	mov	BYTE PTR [edi+12], 0
$LN74@vdbeCommit:
	mov	esi, DWORD PTR [ebp+4]
	add	esi, 68					; 00000044H
	cmp	DWORD PTR [esi], 0
	je	SHORT $LN79@vdbeCommit
$LL80@vdbeCommit:
	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax], ebp
	jne	SHORT $LN78@vdbeCommit
	mov	ecx, DWORD PTR [eax+12]
	push	eax
	mov	DWORD PTR [esi], ecx
	call	_free
	add	esp, 4
	jmp	SHORT $LN77@vdbeCommit
$LN78@vdbeCommit:
	lea	esi, DWORD PTR [eax+12]
$LN77@vdbeCommit:
	cmp	DWORD PTR [esi], 0
	jne	SHORT $LL80@vdbeCommit
$LN79@vdbeCommit:
	cmp	BYTE PTR [ebp+8], 0
	je	SHORT $LN71@vdbeCommit
	add	DWORD PTR [edi+56], -1
	jne	SHORT $LN71@vdbeCommit
	mov	BYTE PTR [edi+48], 0
$LN71@vdbeCommit:
	mov	BYTE PTR [ebp+8], 0
	cmp	BYTE PTR [edi+48], 0
	jne	SHORT $LN217@vdbeCommit
	cmp	DWORD PTR [edi+4], 0
	jne	SHORT $LN217@vdbeCommit
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $LN217@vdbeCommit
	mov	edx, DWORD PTR [edi]
	mov	ecx, 1
	cmp	DWORD PTR [edx+64], ecx
	jl	SHORT $LN95@vdbeCommit
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $LN88@vdbeCommit
	movzx	edx, WORD PTR [edi+24]
	mov	esi, eax
	sub	esi, edx
	mov	DWORD PTR [eax+68], esi
	mov	DWORD PTR [eax+64], edi
	mov	DWORD PTR [eax+76], ecx
$LN88@vdbeCommit:
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $LN95@vdbeCommit
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN95@vdbeCommit:
	mov	DWORD PTR [edi+8], 0
	mov	BYTE PTR [edi+12], 0
$LN217@vdbeCommit:
	xor	edi, edi
$LN31@vdbeCommit:
; Line 31379
	add	DWORD PTR _i$[esp+28], 1
	add	ebx, 24					; 00000018H
	test	edi, edi
	je	$LL216@vdbeCommit
; Line 31522
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 31523
	add	esp, 12					; 0000000cH
	ret	0
$LN30@vdbeCommit:
; Line 31385
	test	edi, edi
	jne	SHORT $LN98@vdbeCommit
; Line 31386
	mov	eax, DWORD PTR _db$[esp+24]
	push	64					; 00000040H
	call	_callFinaliser
	add	esp, 4
$LN98@vdbeCommit:
; Line 31522
	mov	eax, edi
$LN47@vdbeCommit:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 31523
	add	esp, 12					; 0000000cH
	ret	0
_vdbeCommit ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeCursorMoveto
_TEXT	SEGMENT
_res$89418 = -4						; size = 4
_sqlite3VdbeCursorMoveto PROC				; COMDAT
; _p$ = esi
; Line 31947
	push	ecx
; Line 31948
	cmp	BYTE PTR [esi+31], 0
	je	SHORT $LN4@sqlite3Vdb@51
; Line 31954
	mov	ecx, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [esi+40]
	lea	eax, DWORD PTR _res$89418[esp+4]
	push	eax
	mov	eax, DWORD PTR [esi]
	push	0
	push	ecx
	push	edx
	push	0
	push	eax
	call	_sqlite3BtreeMoveto
	add	esp, 24					; 00000018H
; Line 31955
	test	eax, eax
	jne	SHORT $LN5@sqlite3Vdb@51
; Line 31956
	mov	ecx, DWORD PTR [esi+72]
	mov	BYTE PTR [ecx], al
; Line 31957
	mov	eax, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [esi+40]
	mov	DWORD PTR [esi+12], eax
; Line 31958
	mov	eax, DWORD PTR _res$89418[esp+4]
	test	eax, eax
	sete	cl
; Line 31959
	test	eax, eax
	mov	DWORD PTR [esi+8], edx
	mov	BYTE PTR [esi+25], cl
	jge	SHORT $LN1@sqlite3Vdb@51
; Line 31960
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _res$89418[esp+4]
	push	edx
	push	eax
	call	_sqlite3BtreeNext
	add	esp, 8
; Line 31961
	test	eax, eax
	jne	SHORT $LN5@sqlite3Vdb@51
$LN1@sqlite3Vdb@51:
; Line 31966
	mov	BYTE PTR [esi+31], 0
; Line 31967
	mov	DWORD PTR [esi+104], 0
$LN4@sqlite3Vdb@51:
; Line 31969
	xor	eax, eax
$LN5@sqlite3Vdb@51:
; Line 31970
	pop	ecx
	ret	0
_sqlite3VdbeCursorMoveto ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3VdbeIdxRowid
_TEXT	SEGMENT
_typeRowid$ = -140					; size = 4
_szHdr$ = -140						; size = 4
_nCellKey$ = -140					; size = 8
_m$ = -132						; size = 64
_v$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_rowid$ = 8						; size = 4
_sqlite3VdbeIdxRowid PROC				; COMDAT
; _pCur$ = ecx
; Line 32380
	sub	esp, 140				; 0000008cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+140], eax
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _rowid$[esp+144]
	push	esi
	push	edi
; Line 32388
	lea	eax, DWORD PTR _nCellKey$[esp+156]
	xor	esi, esi
	mov	edi, ecx
	push	eax
	mov	DWORD PTR _nCellKey$[esp+160], esi
	mov	DWORD PTR _nCellKey$[esp+164], esi
	call	_sqlite3BtreeKeySize
; Line 32389
	mov	ebx, DWORD PTR _nCellKey$[esp+160]
	add	esp, 4
	cmp	DWORD PTR _nCellKey$[esp+160], esi
	jg	SHORT $LN2@sqlite3Vdb@52
	jl	SHORT $LN9@sqlite3Vdb@52
	cmp	ebx, esi
	ja	SHORT $LN2@sqlite3Vdb@52
$LN9@sqlite3Vdb@52:
; Line 32390
	mov	eax, 11					; 0000000bH
	jmp	SHORT $LN3@sqlite3Vdb@52
$LN2@sqlite3Vdb@52:
; Line 32392
	push	1
	push	esi
	lea	eax, DWORD PTR _m$[esp+164]
	mov	ecx, edi
	call	_sqlite3VdbeMemFromBtree
	add	esp, 8
; Line 32393
	cmp	eax, esi
; Line 32394
	jne	SHORT $LN3@sqlite3Vdb@52
; Line 32396
	mov	esi, DWORD PTR _m$[esp+172]
	lea	ecx, DWORD PTR _szHdr$[esp+156]
	push	ecx
	mov	edi, esi
	call	_sqlite3GetVarint32
; Line 32397
	mov	eax, DWORD PTR _szHdr$[esp+160]
	lea	edx, DWORD PTR _typeRowid$[esp+160]
	push	edx
	lea	edi, DWORD PTR [esi+eax-1]
	call	_sqlite3GetVarint32
; Line 32398
	mov	eax, DWORD PTR _typeRowid$[esp+164]
	add	esp, 8
	cmp	eax, 12					; 0000000cH
	jb	SHORT $LN6@sqlite3Vdb@52
	lea	edx, DWORD PTR [eax-12]
	shr	edx, 1
	jmp	SHORT $LN5@sqlite3Vdb@52
$LN6@sqlite3Vdb@52:
	movzx	edx, BYTE PTR ?aSize@?3??sqlite3VdbeSerialTypeLen@@9@9[eax]
$LN5@sqlite3Vdb@52:
; Line 32399
	mov	ecx, DWORD PTR _m$[esp+176]
	sub	ecx, edx
	add	ecx, esi
	lea	esi, DWORD PTR _v$[esp+156]
	call	_sqlite3VdbeSerialGet
; Line 32400
	mov	ecx, DWORD PTR _v$[esp+156]
	mov	edx, DWORD PTR _v$[esp+160]
; Line 32401
	lea	eax, DWORD PTR _m$[esp+156]
	push	eax
	mov	DWORD PTR [ebp], ecx
	mov	DWORD PTR [ebp+4], edx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
; Line 32402
	xor	eax, eax
$LN3@sqlite3Vdb@52:
; Line 32403
	mov	ecx, DWORD PTR __$ArrayPad$[esp+156]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 140				; 0000008cH
	ret	0
_sqlite3VdbeIdxRowid ENDP
_TEXT	ENDS
PUBLIC	_pKey$GSCopy$
PUBLIC	__$ArrayPad$
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3VdbeIdxKeyCompare
_TEXT	SEGMENT
_nCellKey$ = -80					; size = 8
_pKey$GSCopy$ = -72					; size = 4
_m$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
_nKey$ = 8						; size = 4
_pKey$ = 12						; size = 4
_res$ = 16						; size = 4
_sqlite3VdbeIdxKeyCompare PROC				; COMDAT
; _pC$ = esi
; Line 32419
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+80], eax
	mov	eax, DWORD PTR _pKey$[esp+76]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _res$[esp+84]
	push	edi
; Line 32426
	mov	edi, DWORD PTR [esi]
	lea	ecx, DWORD PTR _nCellKey$[esp+92]
	xor	ebx, ebx
	push	ecx
; Line 32435
	mov	DWORD PTR _pKey$GSCopy$[esp+96], eax
	mov	DWORD PTR _nCellKey$[esp+96], ebx
	mov	DWORD PTR _nCellKey$[esp+100], ebx
	call	_sqlite3BtreeKeySize
	mov	ecx, DWORD PTR _nCellKey$[esp+96]
	add	esp, 4
	cmp	DWORD PTR _nCellKey$[esp+96], ebx
	jg	SHORT $LN2@sqlite3Vdb@53
; Line 32427
	jl	SHORT $LN5@sqlite3Vdb@53
	cmp	ecx, ebx
	ja	SHORT $LN2@sqlite3Vdb@53
$LN5@sqlite3Vdb@53:
	pop	edi
; Line 32428
	mov	DWORD PTR [ebp], ebx
	pop	ebp
; Line 32438
	xor	eax, eax
	pop	ebx
; Line 32439
	mov	ecx, DWORD PTR __$ArrayPad$[esp+80]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
$LN2@sqlite3Vdb@53:
; Line 32431
	push	1
	push	ebx
	mov	ebx, ecx
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR _m$[esp+100]
	call	_sqlite3VdbeMemFromBtree
	add	esp, 8
; Line 32432
	test	eax, eax
; Line 32433
	jne	SHORT $LN3@sqlite3Vdb@53
; Line 32435
	mov	edi, DWORD PTR _m$[esp+108]
	mov	eax, edi
	call	_sqlite3VdbeIdxRowidLen
; Line 32436
	mov	edx, DWORD PTR _pKey$GSCopy$[esp+92]
	mov	ecx, DWORD PTR _nKey$[esp+88]
	push	edx
	mov	edx, DWORD PTR _m$[esp+116]
	push	ecx
	sub	edx, eax
	mov	eax, DWORD PTR [esi+76]
	push	edi
	push	edx
	push	eax
	call	_sqlite3VdbeRecordCompare
; Line 32437
	lea	ecx, DWORD PTR _m$[esp+112]
	push	ecx
	mov	DWORD PTR [ebp], eax
	call	_sqlite3VdbeMemRelease
	add	esp, 24					; 00000018H
; Line 32438
	xor	eax, eax
$LN3@sqlite3Vdb@53:
; Line 32439
	mov	ecx, DWORD PTR __$ArrayPad$[esp+92]
	pop	edi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	ret	0
_sqlite3VdbeIdxKeyCompare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _analyzeDatabase
_TEXT	SEGMENT
_iMem$ = 8						; size = 4
_iDb$ = 8						; size = 4
_analyzeDatabase PROC					; COMDAT
; _pParse$ = eax
; Line 42288
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _iDb$[esp+4]
	push	esi
	mov	esi, eax
; Line 42290
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [ebp+ebp*2]
	push	edi
	mov	edi, DWORD PTR [edx+ecx*8+20]
; Line 42295
	push	0
	mov	eax, ebp
	mov	ecx, esi
	call	_sqlite3BeginWriteOperation
; Line 42296
	mov	ebx, DWORD PTR [esi+28]
; Line 42297
	push	0
	push	ebx
	lea	eax, DWORD PTR [ebx+1]
	push	ebp
	push	esi
	mov	DWORD PTR [esi+28], eax
	call	_openStatTable
; Line 42299
	mov	edi, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [esi+32]
	add	esp, 20					; 00000014H
	test	edi, edi
	mov	DWORD PTR _iMem$[esp+12], ecx
	je	SHORT $LN1@analyzeDat
$LL22@analyzeDat:
; Line 42301
	mov	edx, DWORD PTR _iMem$[esp+12]
	mov	eax, DWORD PTR [edi+8]
	push	edx
	push	ebx
	push	eax
	push	esi
	call	_analyzeOneTable
	mov	edi, DWORD PTR [edi]
	add	esp, 16					; 00000010H
	test	edi, edi
	jne	SHORT $LL22@analyzeDat
$LN1@analyzeDat:
; Line 42303
	mov	edi, DWORD PTR [esi+12]
	test	edi, edi
	jne	SHORT $LN20@analyzeDat
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	edi, eax
	test	edi, edi
	mov	DWORD PTR [esi+12], eax
	je	SHORT $LN14@analyzeDat
$LN20@analyzeDat:
	mov	esi, DWORD PTR [edi+12]
	cmp	DWORD PTR [edi+16], esi
	jg	SHORT $LN21@analyzeDat
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, edi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN21@analyzeDat
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN14@analyzeDat
$LN21@analyzeDat:
	mov	edx, DWORD PTR [edi+20]
	add	DWORD PTR [edi+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	xor	ecx, ecx
	mov	BYTE PTR [eax], 117			; 00000075H
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	BYTE PTR [edi+564], cl
$LN14@analyzeDat:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 42304
	ret	0
_analyzeDatabase ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _analyzeTable
_TEXT	SEGMENT
_pTab$ = 8						; size = 4
_analyzeTable PROC					; COMDAT
; _pParse$ = esi
; Line 42315
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pTab$[esp+4]
	mov	edx, DWORD PTR [ebp+76]
	test	edx, edx
	push	edi
	mov	ebx, -1000000				; fff0bdc0H
	je	SHORT $LN17@analyzeTab
	mov	ecx, DWORD PTR [eax]
	xor	ebx, ebx
	test	ecx, ecx
	jle	SHORT $LN17@analyzeTab
	mov	eax, DWORD PTR [eax+4]
	add	eax, 20					; 00000014H
$LL6@analyzeTab:
	cmp	DWORD PTR [eax], edx
	je	SHORT $LN17@analyzeTab
	add	ebx, 1
	add	eax, 24					; 00000018H
	cmp	ebx, ecx
	jl	SHORT $LL6@analyzeTab
$LN17@analyzeTab:
; Line 42316
	push	0
	mov	eax, ebx
	mov	ecx, esi
	call	_sqlite3BeginWriteOperation
; Line 42317
	mov	edi, DWORD PTR [esi+28]
	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR [esi+28], eax
; Line 42318
	mov	ecx, DWORD PTR [ebp]
	push	ecx
	push	edi
	push	ebx
	push	esi
	call	_openStatTable
; Line 42319
	mov	edx, DWORD PTR [esi+32]
	push	edx
	push	edi
	push	ebp
	push	esi
	call	_analyzeOneTable
; Line 42320
	mov	eax, DWORD PTR [esi+12]
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	SHORT $LN19@analyzeTab
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	test	eax, eax
	mov	DWORD PTR [esi+12], eax
	je	SHORT $LN10@analyzeTab
$LN19@analyzeTab:
	push	0
	push	ebx
	push	117					; 00000075H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN10@analyzeTab:
	pop	edi
	pop	ebp
	pop	ebx
; Line 42321
	ret	0
_analyzeTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@NPACMCHA@indexed?5columns?5are?5not?5unique?$AA@ ; `string'
;	COMDAT ??_C@_0BP@NPACMCHA@indexed?5columns?5are?5not?5unique?$AA@
CONST	SEGMENT
??_C@_0BP@NPACMCHA@indexed?5columns?5are?5not?5unique?$AA@ DB 'indexed co'
	DB	'lumns are not unique', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3RefillIndex
_TEXT	SEGMENT
tv485 = -16						; size = 4
_tnum$ = -12						; size = 4
_pTab$ = -8						; size = 4
_addr1$ = -4						; size = 4
_pKey$ = -4						; size = 4
_pIndex$ = 8						; size = 4
_memRootPage$ = 12					; size = 4
_sqlite3RefillIndex PROC				; COMDAT
; _pParse$ = eax
; Line 45388
	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	mov	ebx, eax
; Line 45390
	mov	ecx, DWORD PTR [ebx+28]
	push	esi
	mov	esi, DWORD PTR _pIndex$[esp+24]
	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR tv485[esp+28], ecx
; Line 45396
	mov	ecx, DWORD PTR [esi+36]
	test	ecx, ecx
	push	edi
	mov	edi, DWORD PTR [ebx]
	mov	DWORD PTR _pTab$[esp+32], eax
	mov	ebp, -1000000				; fff0bdc0H
	je	SHORT $LN85@sqlite3Ref
	mov	edx, DWORD PTR [edi]
	xor	ebp, ebp
	test	edx, edx
	jle	SHORT $LN85@sqlite3Ref
	mov	eax, DWORD PTR [edi+4]
	add	eax, 20					; 00000014H
$LL11@sqlite3Ref:
	cmp	DWORD PTR [eax], ecx
	je	SHORT $LN85@sqlite3Ref
	add	ebp, 1
	add	eax, 24					; 00000018H
	cmp	ebp, edx
	jl	SHORT $LL11@sqlite3Ref
$LN85@sqlite3Ref:
; Line 45400
	mov	eax, DWORD PTR [edi+4]
	lea	edx, DWORD PTR [ebp+ebp*2]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [esi]
	push	ecx
	push	0
	push	edx
	push	27					; 0000001bH
	mov	eax, ebx
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN6@sqlite3Ref
; Line 45406
	mov	eax, DWORD PTR _pTab$[esp+32]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+20]
	push	ecx
	push	1
	push	edx
	push	ebp
	push	ebx
	call	_sqlite3TableLock
; Line 45408
	mov	edi, DWORD PTR [ebx+12]
	add	esp, 20					; 00000014H
	test	edi, edi
	jne	SHORT $LN83@sqlite3Ref
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	edi, eax
; Line 45409
	test	edi, edi
	mov	DWORD PTR [ebx+12], eax
	je	$LN6@sqlite3Ref
$LN83@sqlite3Ref:
; Line 45410
	mov	eax, DWORD PTR _memRootPage$[esp+28]
	test	eax, eax
	jl	SHORT $LN3@sqlite3Ref
; Line 45411
	push	0
	push	eax
	push	1
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45412
	mov	DWORD PTR _tnum$[esp+44], 0
; Line 45413
	jmp	SHORT $LN86@sqlite3Ref
$LN3@sqlite3Ref:
; Line 45414
	mov	eax, DWORD PTR [esi+20]
; Line 45415
	push	ebp
	push	eax
	mov	DWORD PTR _tnum$[esp+40], eax
	push	98					; 00000062H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
$LN86@sqlite3Ref:
	add	esp, 12					; 0000000cH
; Line 45417
	push	0
	push	ebp
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45418
	push	esi
	push	ebx
	call	_sqlite3IndexKeyinfo
	mov	esi, eax
; Line 45419
	mov	eax, DWORD PTR _tnum$[esp+52]
	push	eax
	mov	eax, DWORD PTR tv485[esp+56]
	add	eax, 1
	push	eax
	push	9
	mov	eax, edi
	mov	DWORD PTR _pKey$[esp+64], esi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [edi+20]
	add	esp, 32					; 00000020H
	test	ecx, ecx
	je	SHORT $LN79@sqlite3Ref
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN37@sqlite3Ref
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN79@sqlite3Ref
$LN37@sqlite3Ref:
	test	eax, eax
	jl	SHORT $LN33@sqlite3Ref
	cmp	eax, DWORD PTR [edi+12]
	jl	SHORT $LN32@sqlite3Ref
$LN33@sqlite3Ref:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, 1
	js	SHORT $LN35@sqlite3Ref
$LN32@sqlite3Ref:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	mov	eax, DWORD PTR _pKey$[esp+32]
	xor	ecx, ecx
	cmp	eax, ecx
	mov	DWORD PTR [esi+12], ecx
	jne	SHORT $LN80@sqlite3Ref
	mov	DWORD PTR [esi+12], ecx
	mov	DWORD PTR [esi+16], ecx
	jmp	SHORT $LN35@sqlite3Ref
$LN80@sqlite3Ref:
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -6			; fffffffaH
	jmp	SHORT $LN35@sqlite3Ref
$LN79@sqlite3Ref:
	mov	ecx, esi
	mov	eax, -9					; fffffff7H
	call	_freeP3
$LN35@sqlite3Ref:
; Line 45420
	mov	eax, DWORD PTR tv485[esp+32]
	mov	esi, DWORD PTR _pTab$[esp+32]
	push	14					; 0000000eH
	push	ebp
	push	eax
	mov	eax, ebx
	call	_sqlite3OpenTable
; Line 45421
	mov	ebx, DWORD PTR tv485[esp+44]
	push	0
	push	ebx
	push	127					; 0000007fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45422
	mov	ebp, DWORD PTR _pIndex$[esp+52]
	push	ebx
	push	ebp
	mov	esi, edi
	mov	DWORD PTR _addr1$[esp+64], eax
	call	_sqlite3GenerateIndexKey
	add	esp, 32					; 00000020H
; Line 45423
	cmp	BYTE PTR [ebp+24], 0
	je	$LN84@sqlite3Ref
; Line 45424
	mov	eax, DWORD PTR [edi+12]
; Line 45426
	lea	ecx, DWORD PTR [eax-1]
	test	ecx, ecx
	lea	esi, DWORD PTR [eax+4]
	jl	SHORT $LN44@sqlite3Ref
	cmp	eax, ecx
	jle	SHORT $LN44@sqlite3Ref
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN44@sqlite3Ref
	lea	ecx, DWORD PTR [ecx+ecx*4]
	mov	DWORD PTR [eax+ecx*4+8], esi
$LN44@sqlite3Ref:
; Line 45427
	push	0
	push	ebx
	push	37					; 00000025H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45428
	push	0
	push	1
	push	39					; 00000027H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45429
	push	esi
	lea	eax, DWORD PTR [ebx+1]
	push	eax
	push	32					; 00000020H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45431
	push	2
	push	19					; 00000013H
	push	36					; 00000024H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [edi+20]
	add	esp, 48					; 00000030H
	test	ecx, ecx
	je	SHORT $LN81@sqlite3Ref
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN66@sqlite3Ref
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN81@sqlite3Ref
$LN66@sqlite3Ref:
	test	eax, eax
	jl	SHORT $LN62@sqlite3Ref
	cmp	eax, DWORD PTR [edi+12]
	jl	SHORT $LN61@sqlite3Ref
$LN62@sqlite3Ref:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, 1
	js	SHORT $LN84@sqlite3Ref
$LN61@sqlite3Ref:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	mov	DWORD PTR [esi+12], OFFSET ??_C@_0BP@NPACMCHA@indexed?5columns?5are?5not?5unique?$AA@
	mov	DWORD PTR [esi+16], -2			; fffffffeH
	jmp	SHORT $LN84@sqlite3Ref
$LN81@sqlite3Ref:
	mov	ecx, OFFSET ??_C@_0BP@NPACMCHA@indexed?5columns?5are?5not?5unique?$AA@
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN84@sqlite3Ref:
; Line 45434
	push	0
	lea	ebp, DWORD PTR [ebx+1]
	push	ebp
	push	111					; 0000006fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45435
	mov	esi, DWORD PTR _addr1$[esp+44]
	lea	eax, DWORD PTR [esi+1]
	push	eax
	push	ebx
	push	110					; 0000006eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 45436
	test	esi, esi
	jl	SHORT $LN73@sqlite3Ref
	mov	ecx, DWORD PTR [edi+12]
	cmp	ecx, esi
	jle	SHORT $LN73@sqlite3Ref
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN73@sqlite3Ref
	lea	edx, DWORD PTR [esi+esi*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
$LN73@sqlite3Ref:
; Line 45437
	push	0
	push	ebx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45438
	push	0
	push	ebp
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN6@sqlite3Ref:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 45439
	add	esp, 16					; 00000010H
	ret	0
_sqlite3RefillIndex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _reindexTable
_TEXT	SEGMENT
_pTab$ = 8						; size = 4
_zColl$ = 12						; size = 4
_reindexTable PROC					; COMDAT
; _pParse$ = edi
; Line 46443
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pTab$[esp+4]
; Line 46446
	mov	ebx, DWORD PTR [ebp+16]
	test	ebx, ebx
	je	SHORT $LN3@reindexTab
	push	esi
	npad	2
$LL5@reindexTab:
; Line 46447
	mov	eax, DWORD PTR _zColl$[esp+8]
	test	eax, eax
	je	SHORT $LN1@reindexTab
	push	eax
	mov	eax, ebx
	call	_collationMatch
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@reindexTab
$LN1@reindexTab:
; Line 46448
	mov	esi, DWORD PTR [ebp+76]
	test	esi, esi
	mov	ecx, DWORD PTR [edi]
	mov	eax, -1000000				; fff0bdc0H
	je	SHORT $LN20@reindexTab
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN20@reindexTab
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 20					; 00000014H
$LL11@reindexTab:
	cmp	DWORD PTR [ecx], esi
	je	SHORT $LN20@reindexTab
	add	eax, 1
	add	ecx, 24					; 00000018H
	cmp	eax, edx
	jl	SHORT $LL11@reindexTab
$LN20@reindexTab:
; Line 46449
	push	0
	mov	ecx, edi
	call	_sqlite3BeginWriteOperation
; Line 46450
	push	-1
	push	ebx
	mov	eax, edi
	call	_sqlite3RefillIndex
	add	esp, 12					; 0000000cH
$LN4@reindexTab:
	mov	ebx, DWORD PTR [ebx+32]
	test	ebx, ebx
	jne	SHORT $LL5@reindexTab
	pop	esi
$LN3@reindexTab:
	pop	ebp
	pop	ebx
; Line 46453
	ret	0
_reindexTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _reindexDatabases
_TEXT	SEGMENT
tv168 = -4						; size = 4
_zColl$ = 8						; size = 4
_reindexDatabases PROC					; COMDAT
; _pParse$ = eax
; Line 46462
	push	ecx
	push	ebx
	push	ebp
	push	edi
	mov	edi, eax
; Line 46465
	mov	ebx, DWORD PTR [edi]
; Line 46469
	mov	eax, DWORD PTR [ebx+4]
	xor	ebp, ebp
	cmp	DWORD PTR [ebx], ebp
	jle	SHORT $LN4@reindexDat
	add	eax, 20					; 00000014H
	mov	DWORD PTR tv168[esp+16], eax
	push	esi
	npad	7
$LL13@reindexDat:
; Line 46471
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax+12]
	test	esi, esi
	je	SHORT $LN5@reindexDat
	npad	7
$LL3@reindexDat:
; Line 46473
	mov	ecx, DWORD PTR _zColl$[esp+16]
	mov	edx, DWORD PTR [esi+8]
	push	ecx
	push	edx
	call	_reindexTable
	mov	esi, DWORD PTR [esi]
	add	esp, 8
	test	esi, esi
	jne	SHORT $LL3@reindexDat
$LN5@reindexDat:
; Line 46469
	mov	eax, DWORD PTR tv168[esp+20]
	add	ebp, 1
	add	eax, 24					; 00000018H
	cmp	ebp, DWORD PTR [ebx]
	mov	DWORD PTR tv168[esp+20], eax
	jl	SHORT $LL13@reindexDat
	pop	esi
$LN4@reindexDat:
	pop	edi
	pop	ebp
	pop	ebx
; Line 46476
	pop	ecx
	ret	0
_reindexDatabases ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3GenerateRowIndexDelete
_TEXT	SEGMENT
_i$ = -4						; size = 4
_iCur$ = 8						; size = 4
_aIdxUsed$ = 12						; size = 4
_sqlite3GenerateRowIndexDelete PROC			; COMDAT
; _v$ = ecx
; _pTab$ = eax
; Line 47652
	push	ecx
	push	ebx
	push	ebp
; Line 47656
	mov	ebp, DWORD PTR [eax+16]
	xor	ebx, ebx
	cmp	ebp, ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _i$[esp+16], 1
	je	$LN2@sqlite3Gen@2
	push	edi
	npad	4
$LL4@sqlite3Gen@2:
; Line 47657
	mov	eax, DWORD PTR _aIdxUsed$[esp+16]
	cmp	eax, ebx
	je	SHORT $LN1@sqlite3Gen@2
	mov	ecx, DWORD PTR _i$[esp+20]
	cmp	BYTE PTR [ecx+eax-1], bl
	je	SHORT $LN3@sqlite3Gen@2
$LN1@sqlite3Gen@2:
; Line 47658
	mov	edx, DWORD PTR _iCur$[esp+16]
	push	edx
	push	ebp
	call	_sqlite3GenerateIndexKey
; Line 47659
	mov	edi, DWORD PTR [esi+12]
	add	esp, 8
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN7@sqlite3Gen@2
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN15@sqlite3Gen@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN16@sqlite3Gen@2
$LN15@sqlite3Gen@2:
	xor	ebx, ebx
$LN7@sqlite3Gen@2:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR _i$[esp+20]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _iCur$[esp+16]
	add	edx, ecx
	mov	BYTE PTR [eax], 73			; 00000049H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN3@sqlite3Gen@2
$LN16@sqlite3Gen@2:
	xor	ebx, ebx
$LN3@sqlite3Gen@2:
; Line 47656
	mov	ebp, DWORD PTR [ebp+32]
	add	DWORD PTR _i$[esp+20], 1
	cmp	ebp, ebx
	jne	$LL4@sqlite3Gen@2
	pop	edi
$LN2@sqlite3Gen@2:
	pop	esi
	pop	ebp
	pop	ebx
; Line 47661
	pop	ecx
	ret	0
_sqlite3GenerateRowIndexDelete ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@FDECACCL@SELECT?5name?0?5rootpage?0?5sql?5FROM?5@ ; `string'
PUBLIC	??_C@_0BI@FFDCNLCF@unsupported?5file?5format?$AA@ ; `string'
PUBLIC	??_C@_0EE@MLIDCBJA@attached?5databases?5must?5use?5the?5@ ; `string'
PUBLIC	??_C@_06FJHKNKMG@BINARY?$AA@			; `string'
;	COMDAT ??_C@_0CI@FDECACCL@SELECT?5name?0?5rootpage?0?5sql?5FROM?5@
CONST	SEGMENT
??_C@_0CI@FDECACCL@SELECT?5name?0?5rootpage?0?5sql?5FROM?5@ DB 'SELECT na'
	DB	'me, rootpage, sql FROM ''%q''.%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FFDCNLCF@unsupported?5file?5format?$AA@
CONST	SEGMENT
??_C@_0BI@FFDCNLCF@unsupported?5file?5format?$AA@ DB 'unsupported file fo'
	DB	'rmat', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@MLIDCBJA@attached?5databases?5must?5use?5the?5@
CONST	SEGMENT
??_C@_0EE@MLIDCBJA@attached?5databases?5must?5use?5the?5@ DB 'attached da'
	DB	'tabases must use the same text encoding as main database', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJHKNKMG@BINARY?$AA@
CONST	SEGMENT
??_C@_06FJHKNKMG@BINARY?$AA@ DB 'BINARY', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3InitOne
_TEXT	SEGMENT
_curMain$ = -92						; size = 4
_zMasterName$ = -88					; size = 4
tv617 = -84						; size = 4
tv627 = -80						; size = 4
tv620 = -76						; size = 4
_initData$ = -72					; size = 16
_azArg$ = -56						; size = 16
_meta$ = -40						; size = 40
_iDb$ = 8						; size = 4
_pzErrMsg$ = 12						; size = 4
_sqlite3InitOne PROC					; COMDAT
; _db$ = eax
; Line 52870
	sub	esp, 92					; 0000005cH
	push	ebx
	push	ebp
; Line 52880
	mov	ebp, DWORD PTR _iDb$[esp+96]
	cmp	ebp, 1
	push	esi
	push	edi
	mov	esi, eax
	jne	SHORT $LN28@sqlite3Ini@2
; Line 52920
	mov	ebx, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	mov	eax, OFFSET ?temp_master_schema@?1??sqlite3InitOne@@9@9
	mov	DWORD PTR _zMasterName$[esp+108], ebx
	jmp	SHORT $LN34@sqlite3Ini@2
$LN28@sqlite3Ini@2:
	mov	DWORD PTR _zMasterName$[esp+108], OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
	mov	ebx, DWORD PTR _zMasterName$[esp+108]
	mov	eax, OFFSET ?master_schema@?1??sqlite3InitOne@@9@9
$LN34@sqlite3Ini@2:
; Line 52923
	mov	edi, -264537850				; f03b7906H
	cmp	DWORD PTR [esi+48], edi
	jne	SHORT $LN36@sqlite3Ini@2
	mov	DWORD PTR [esi+48], -1607883113		; a029a697H
	jmp	SHORT $LN35@sqlite3Ini@2
$LN36@sqlite3Ini@2:
	mov	DWORD PTR [esi+48], -1254786768		; b5357930H
	mov	DWORD PTR [esi+152], 1
$LN35@sqlite3Ini@2:
; Line 52931
	push	0
	lea	ecx, DWORD PTR _azArg$[esp+112]
	push	ecx
	mov	DWORD PTR _azArg$[esp+124], eax
	mov	eax, DWORD PTR _pzErrMsg$[esp+112]
	lea	edx, DWORD PTR _initData$[esp+116]
	push	3
	push	edx
	mov	DWORD PTR _azArg$[esp+124], ebx
	mov	DWORD PTR _azArg$[esp+128], OFFSET ??_C@_01HIHLOKLC@1?$AA@
	mov	DWORD PTR _azArg$[esp+136], 0
	mov	DWORD PTR _initData$[esp+124], esi
	mov	DWORD PTR _initData$[esp+128], ebp
	mov	DWORD PTR _initData$[esp+132], eax
	call	_sqlite3InitCallback
	add	esp, 16					; 00000010H
; Line 52932
	test	eax, eax
	je	SHORT $LN26@sqlite3Ini@2
; Line 52933
	mov	eax, DWORD PTR [esi+48]
	cmp	eax, -1607883113			; a029a697H
	jne	SHORT $LN41@sqlite3Ini@2
; Line 52934
	mov	eax, DWORD PTR _initData$[esp+120]
	mov	DWORD PTR [esi+48], edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 53076
	add	esp, 92					; 0000005cH
	ret	0
; Line 52933
$LN41@sqlite3Ini@2:
	cmp	eax, edi
	jne	SHORT $LN39@sqlite3Ini@2
	mov	DWORD PTR [esi+48], -1254786768		; b5357930H
	mov	DWORD PTR [esi+152], 1
$LN39@sqlite3Ini@2:
; Line 52934
	mov	eax, DWORD PTR _initData$[esp+120]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 53076
	add	esp, 92					; 0000005cH
	ret	0
$LN26@sqlite3Ini@2:
; Line 52936
	mov	eax, DWORD PTR [esi+4]
	lea	edi, DWORD PTR [ebp+ebp*2]
	add	edi, edi
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+eax]
	push	ecx
	push	esi
	mov	DWORD PTR tv617[esp+116], edi
	call	_sqlite3FindTable
	add	esp, 8
; Line 52937
	test	eax, eax
	je	SHORT $LN184@sqlite3Ini@2
; Line 52938
	mov	BYTE PTR [eax+52], 1
$LN184@sqlite3Ini@2:
; Line 52940
	mov	eax, DWORD PTR [esi+48]
	cmp	eax, -1607883113			; a029a697H
	jne	SHORT $LN46@sqlite3Ini@2
	mov	DWORD PTR [esi+48], -264537850		; f03b7906H
	jmp	SHORT $LN185@sqlite3Ini@2
$LN46@sqlite3Ini@2:
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN185@sqlite3Ini@2
	mov	DWORD PTR [esi+48], -1254786768		; b5357930H
	mov	DWORD PTR [esi+152], 1
$LN185@sqlite3Ini@2:
; Line 52944
	mov	ebx, DWORD PTR [esi+4]
; Line 52945
	lea	eax, DWORD PTR [ebx+edi+4]
	mov	DWORD PTR tv627[esp+108], eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	mov	DWORD PTR tv620[esp+108], ebx
	jne	SHORT $LN24@sqlite3Ini@2
; Line 52946
	cmp	ebp, 1
	jne	SHORT $LN23@sqlite3Ini@2
; Line 52947
	mov	ebx, DWORD PTR [ebx+44]
	or	WORD PTR [ebx+122], bp
$LN23@sqlite3Ini@2:
	pop	edi
	pop	esi
	pop	ebp
; Line 52949
	xor	eax, eax
	pop	ebx
; Line 53076
	add	esp, 92					; 0000005cH
	ret	0
$LN24@sqlite3Ini@2:
; Line 52951
	lea	edx, DWORD PTR _curMain$[esp+108]
	push	edx
	push	0
	push	0
	push	0
	push	1
	push	eax
	call	_sqlite3BtreeCursor
	mov	ebp, eax
	add	esp, 24					; 00000018H
; Line 52952
	test	ebp, ebp
	je	SHORT $LN179@sqlite3Ini@2
	cmp	ebp, 16					; 00000010H
	je	SHORT $LN21@sqlite3Ini@2
; Line 52953
	push	0
	call	_sqlite3ErrStr
	push	eax
	mov	eax, DWORD PTR _pzErrMsg$[esp+112]
	push	eax
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 53075
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 53076
	add	esp, 92					; 0000005cH
	ret	0
$LN179@sqlite3Ini@2:
; Line 52976
	xor	edi, edi
	lea	ebx, DWORD PTR _meta$[esp+108]
$LL20@sqlite3Ini@2:
	cmp	edi, 10					; 0000000aH
	jae	SHORT $LN18@sqlite3Ini@2
; Line 52977
	mov	ecx, DWORD PTR tv627[esp+108]
	mov	eax, DWORD PTR [ecx]
	add	edi, 1
	push	ebx
	push	edi
	call	_sqlite3BtreeGetMeta
	mov	ebp, eax
	add	esp, 8
	add	ebx, 4
	test	ebp, ebp
	je	SHORT $LL20@sqlite3Ini@2
; Line 52979
	jmp	SHORT $LN178@sqlite3Ini@2
$LN18@sqlite3Ini@2:
	test	ebp, ebp
	je	SHORT $LN183@sqlite3Ini@2
$LN178@sqlite3Ini@2:
; Line 52980
	push	0
	mov	eax, ebp
	call	_sqlite3ErrStr
	mov	edx, DWORD PTR _pzErrMsg$[esp+108]
	push	eax
	push	edx
	call	_sqlite3SetString
; Line 52981
	mov	edi, DWORD PTR _curMain$[esp+120]
	add	esp, 12					; 0000000cH
	call	_sqlite3BtreeCloseCursor
	pop	edi
	pop	esi
; Line 53075
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 53076
	add	esp, 92					; 0000005cH
	ret	0
$LN21@sqlite3Ini@2:
; Line 52985
	xor	eax, eax
	mov	DWORD PTR _meta$[esp+112], eax
	mov	DWORD PTR _meta$[esp+116], eax
	mov	DWORD PTR _meta$[esp+120], eax
	mov	ecx, eax
	mov	DWORD PTR _meta$[esp+128], eax
	mov	DWORD PTR _meta$[esp+132], eax
	mov	DWORD PTR _meta$[esp+136], eax
	mov	DWORD PTR _meta$[esp+140], eax
	mov	DWORD PTR _meta$[esp+144], eax
	jmp	SHORT $LN16@sqlite3Ini@2
$LN183@sqlite3Ini@2:
	mov	ecx, DWORD PTR _meta$[esp+124]
	mov	eax, DWORD PTR _meta$[esp+108]
	mov	edi, DWORD PTR tv617[esp+108]
	mov	ebx, DWORD PTR tv620[esp+108]
$LN16@sqlite3Ini@2:
; Line 52994
	test	ecx, ecx
	mov	edx, DWORD PTR [ebx+edi+20]
	lea	ebx, DWORD PTR [ebx+edi+20]
	mov	DWORD PTR [edx], eax
	je	$LN15@sqlite3Ini@2
; Line 52995
	cmp	DWORD PTR _iDb$[esp+104], 0
; Line 52997
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [eax+20]
	jne	SHORT $LN14@sqlite3Ini@2
; Line 52998
	lea	edi, DWORD PTR [esi+248]
	test	edi, edi
	mov	BYTE PTR [edx+121], cl
	je	SHORT $LN60@sqlite3Ini@2
	cmp	DWORD PTR [edi+24], 0
	je	SHORT $LN60@sqlite3Ini@2
	cmp	BYTE PTR [edi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN66@sqlite3Ini@2
	mov	eax, OFFSET _binHash
$LN66@sqlite3Ini@2:
	push	6
	push	OFFSET ??_C@_06FJHKNKMG@BINARY?$AA@
	call	eax
	mov	edx, DWORD PTR [edi+20]
	sub	edx, 1
	push	6
	and	edx, eax
	push	OFFSET ??_C@_06FJHKNKMG@BINARY?$AA@
	mov	ecx, edi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN60@sqlite3Ini@2
	mov	eax, DWORD PTR [eax+8]
; Line 52999
	mov	edi, DWORD PTR tv617[esp+108]
	mov	DWORD PTR [esi+28], eax
	jmp	SHORT $LN186@sqlite3Ini@2
; Line 52998
$LN60@sqlite3Ini@2:
; Line 52999
	mov	edi, DWORD PTR tv617[esp+108]
	xor	eax, eax
	mov	DWORD PTR [esi+28], eax
	jmp	SHORT $LN186@sqlite3Ini@2
$LN14@sqlite3Ini@2:
; Line 53001
	movzx	eax, BYTE PTR [edx+121]
	cmp	ecx, eax
	je	SHORT $LN186@sqlite3Ini@2
; Line 53002
	mov	edi, DWORD PTR _curMain$[esp+108]
	call	_sqlite3BtreeCloseCursor
; Line 53004
	push	0
	push	OFFSET ??_C@_0EE@MLIDCBJA@attached?5databases?5must?5use?5the?5@
$LN187@sqlite3Ini@2:
	mov	ecx, DWORD PTR _pzErrMsg$[esp+112]
	push	ecx
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
; Line 53005
	mov	eax, 1
	pop	ebx
; Line 53076
	add	esp, 92					; 0000005cH
	ret	0
$LN15@sqlite3Ini@2:
; Line 53009
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [edi+edx+20]
	or	WORD PTR [eax+122], 4
$LN186@sqlite3Ini@2:
; Line 53011
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [ecx+121]
	mov	edx, DWORD PTR [ebx]
	mov	BYTE PTR [edx+121], al
; Line 53013
	mov	eax, DWORD PTR _meta$[esp+116]
; Line 53014
	test	eax, eax
	jne	SHORT $LN10@sqlite3Ini@2
	mov	eax, 2000				; 000007d0H
$LN10@sqlite3Ini@2:
; Line 53015
	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR [ecx+124], eax
; Line 53016
	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR tv627[esp+108]
	mov	eax, DWORD PTR [edx+124]
	cmp	eax, 10					; 0000000aH
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	jle	SHORT $LN78@sqlite3Ini@2
	mov	DWORD PTR [ecx+68], eax
	jmp	SHORT $LN77@sqlite3Ini@2
$LN78@sqlite3Ini@2:
	mov	DWORD PTR [ecx+68], 10			; 0000000aH
$LN77@sqlite3Ini@2:
; Line 53024
	mov	edx, DWORD PTR [ebx]
	mov	al, BYTE PTR _meta$[esp+112]
	mov	BYTE PTR [edx+120], al
; Line 53025
	mov	ecx, DWORD PTR [ebx]
	cmp	BYTE PTR [ecx+120], 0
	jne	SHORT $LN9@sqlite3Ini@2
; Line 53026
	mov	edx, ecx
	mov	BYTE PTR [edx+120], 1
$LN9@sqlite3Ini@2:
; Line 53028
	mov	eax, DWORD PTR [ebx]
	cmp	BYTE PTR [eax+120], 4
	jbe	SHORT $LN8@sqlite3Ini@2
; Line 53029
	mov	edi, DWORD PTR _curMain$[esp+108]
	call	_sqlite3BtreeCloseCursor
; Line 53030
	push	0
	push	OFFSET ??_C@_0BI@FFDCNLCF@unsupported?5file?5format?$AA@
; Line 53031
	jmp	$LN187@sqlite3Ini@2
$LN8@sqlite3Ini@2:
; Line 53038
	cmp	ebp, 16					; 00000010H
	jne	SHORT $LN7@sqlite3Ini@2
; Line 53040
	xor	ebp, ebp
; Line 53041
	jmp	SHORT $LN6@sqlite3Ini@2
$LN7@sqlite3Ini@2:
; Line 53045
	mov	edx, DWORD PTR _zMasterName$[esp+108]
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [edi+eax]
	push	edx
	push	ecx
	push	OFFSET ??_C@_0CI@FDECACCL@SELECT?5name?0?5rootpage?0?5sql?5FROM?5@
	call	_sqlite3MPrintf
	mov	edi, eax
; Line 53046
	mov	eax, esi
	call	_sqlite3SafetyOff
; Line 53047
	push	0
	lea	edx, DWORD PTR _initData$[esp+124]
	push	edx
	push	OFFSET _sqlite3InitCallback
	push	edi
	push	esi
	call	_sqlite3_exec
	mov	ebp, eax
	add	esp, 32					; 00000020H
; Line 53048
	cmp	ebp, 4
	jne	SHORT $LN5@sqlite3Ini@2
	mov	ebp, DWORD PTR _initData$[esp+120]
$LN5@sqlite3Ini@2:
; Line 53049
	mov	eax, esi
	call	_sqlite3SafetyOn
; Line 53050
	test	edi, edi
	je	SHORT $LN172@sqlite3Ini@2
	push	edi
	call	_free
	add	esp, 4
$LN172@sqlite3Ini@2:
; Line 53052
	test	ebp, ebp
	jne	SHORT $LN4@sqlite3Ini@2
; Line 53053
	mov	eax, DWORD PTR _iDb$[esp+104]
	call	_sqlite3AnalysisLoad
$LN4@sqlite3Ini@2:
; Line 53056
	mov	edi, DWORD PTR _curMain$[esp+108]
	call	_sqlite3BtreeCloseCursor
$LN6@sqlite3Ini@2:
; Line 53058
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN3@sqlite3Ini@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN3@sqlite3Ini@2
; Line 53061
	push	0
	mov	ebx, esi
	mov	ebp, 7
	call	_sqlite3ResetInternalSchema
	add	esp, 4
; Line 53063
	jmp	SHORT $LN182@sqlite3Ini@2
$LN3@sqlite3Ini@2:
	test	ebp, ebp
	je	SHORT $LN1@sqlite3Ini@2
$LN182@sqlite3Ini@2:
	test	DWORD PTR [esi+8], 262144		; 00040000H
	je	SHORT $LN2@sqlite3Ini@2
$LN1@sqlite3Ini@2:
; Line 53072
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR tv617[esp+108]
	mov	eax, DWORD PTR [ecx+eax+20]
	or	WORD PTR [eax+122], 1
; Line 53073
	xor	ebp, ebp
$LN2@sqlite3Ini@2:
	pop	edi
	pop	esi
; Line 53075
	mov	eax, ebp
	pop	ebp
	pop	ebx
; Line 53076
	add	esp, 92					; 0000005cH
	ret	0
_sqlite3InitOne ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Init
_TEXT	SEGMENT
_pzErrMsg$ = 8						; size = 4
_sqlite3Init PROC					; COMDAT
; _db$ = eax
; Line 53088
	push	ebx
	mov	ebx, eax
; Line 53090
	xor	eax, eax
; Line 53092
	cmp	BYTE PTR [ebx+68], al
	je	SHORT $LN10@sqlite3Ini@3
	pop	ebx
; Line 53124
	ret	0
$LN10@sqlite3Ini@3:
	push	ebp
	push	esi
	push	edi
; Line 53093
	xor	esi, esi
; Line 53095
	xor	edi, edi
	mov	BYTE PTR [ebx+68], 1
	xor	ebp, ebp
	npad	7
$LL9@sqlite3Ini@3:
	cmp	edi, DWORD PTR [ebx]
	jge	SHORT $LN7@sqlite3Ini@3
; Line 53096
	mov	ecx, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [ecx+ebp+20]
	test	BYTE PTR [edx+122], 1
	jne	SHORT $LN8@sqlite3Ini@3
	cmp	edi, 1
	je	SHORT $LN8@sqlite3Ini@3
; Line 53097
	mov	eax, DWORD PTR _pzErrMsg$[esp+12]
	push	eax
	push	edi
	mov	eax, ebx
	call	_sqlite3InitOne
	mov	esi, eax
	add	esp, 8
; Line 53098
	test	esi, esi
	je	SHORT $LN4@sqlite3Ini@3
; Line 53099
	push	edi
	call	_sqlite3ResetInternalSchema
	add	esp, 4
$LN4@sqlite3Ini@3:
; Line 53101
	mov	eax, 1
$LN8@sqlite3Ini@3:
; Line 53095
	add	edi, 1
	add	ebp, 24					; 00000018H
	test	esi, esi
	je	SHORT $LL9@sqlite3Ini@3
; Line 53109
	jmp	SHORT $LN3@sqlite3Ini@3
$LN7@sqlite3Ini@3:
	test	esi, esi
	jne	SHORT $LN3@sqlite3Ini@3
	cmp	DWORD PTR [ebx], 1
	jle	SHORT $LN3@sqlite3Ini@3
	mov	ecx, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [ecx+44]
	test	BYTE PTR [edx+122], 1
	jne	SHORT $LN3@sqlite3Ini@3
; Line 53110
	mov	eax, DWORD PTR _pzErrMsg$[esp+12]
	push	eax
	push	1
	mov	eax, ebx
	call	_sqlite3InitOne
	mov	esi, eax
	add	esp, 8
; Line 53111
	test	esi, esi
	je	SHORT $LN2@sqlite3Ini@3
; Line 53112
	push	1
	call	_sqlite3ResetInternalSchema
	add	esp, 4
$LN2@sqlite3Ini@3:
; Line 53114
	mov	eax, 1
$LN3@sqlite3Ini@3:
; Line 53119
	test	esi, esi
	mov	BYTE PTR [ebx+68], 0
	jne	SHORT $LN13@sqlite3Ini@3
	test	eax, eax
	je	SHORT $LN13@sqlite3Ini@3
; Line 53120
	and	DWORD PTR [ebx+8], -17			; ffffffefH
$LN13@sqlite3Ini@3:
	pop	edi
; Line 53123
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 53124
	ret	0
_sqlite3Init ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3ReadSchema
_TEXT	SEGMENT
_sqlite3ReadSchema PROC					; COMDAT
; _pParse$ = esi
; Line 53132
	mov	eax, DWORD PTR [esi]
	xor	ecx, ecx
; Line 53133
	cmp	BYTE PTR [eax+68], cl
	jne	SHORT $LN6@sqlite3Rea@4
; Line 53134
	lea	ecx, DWORD PTR [esi+8]
	push	ecx
	call	_sqlite3Init
	add	esp, 4
; Line 53136
	test	eax, eax
	je	SHORT $LN1@sqlite3Rea@4
; Line 53137
	mov	DWORD PTR [esi+4], eax
; Line 53138
	add	DWORD PTR [esi+24], 1
; Line 53141
	ret	0
$LN6@sqlite3Rea@4:
; Line 53140
	mov	eax, ecx
$LN1@sqlite3Rea@4:
; Line 53141
	ret	0
_sqlite3ReadSchema ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _schemaIsValid
_TEXT	SEGMENT
_pBt$98137 = -24					; size = 4
tv411 = -20						; size = 4
_allOk$ = -16						; size = 4
_iDb$ = -12						; size = 4
_curTemp$ = -8						; size = 4
_cookie$ = -4						; size = 4
_db$ = 8						; size = 4
_schemaIsValid PROC					; COMDAT
; Line 53148
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
; Line 53155
	xor	ecx, ecx
	mov	esi, 1
	push	edi
	mov	DWORD PTR _allOk$[esp+40], esi
	mov	DWORD PTR _iDb$[esp+40], ecx
	mov	DWORD PTR tv411[esp+40], ecx
	npad	6
$LL6@schemaIsVa:
	mov	eax, DWORD PTR _db$[esp+36]
	mov	edx, DWORD PTR _iDb$[esp+40]
	cmp	edx, DWORD PTR [eax]
	jge	$LN66@schemaIsVa
; Line 53157
	mov	eax, DWORD PTR [eax+4]
	mov	edx, DWORD PTR tv411[esp+40]
	mov	ebp, DWORD PTR [edx+eax+4]
; Line 53158
	cmp	ebp, ecx
	mov	DWORD PTR _pBt$98137[esp+40], ebp
	je	$LN5@schemaIsVa
; Line 53159
	mov	edi, DWORD PTR [ebp+4]
	cmp	DWORD PTR [edi+8], ecx
	mov	DWORD PTR _curTemp$[esp+40], ecx
	jne	SHORT $LN15@schemaIsVa
	mov	ebx, ebp
	call	_lockBtreeWithRetry
	test	eax, eax
	jne	$LN5@schemaIsVa
$LN15@schemaIsVa:
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN31@schemaIsVa
	test	esi, esi
	jg	SHORT $LN64@schemaIsVa
$LN31@schemaIsVa:
	push	96					; 00000060H
	call	_malloc
	mov	ebp, eax
	add	esp, 4
	test	ebp, ebp
	jne	SHORT $LN65@schemaIsVa
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN41@schemaIsVa
	test	esi, esi
	jg	SHORT $LN24@schemaIsVa
$LN41@schemaIsVa:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN24@schemaIsVa
$LN65@schemaIsVa:
	push	96					; 00000060H
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH
$LN24@schemaIsVa:
	test	ebp, ebp
	jne	SHORT $LN13@schemaIsVa
	mov	ebp, DWORD PTR _pBt$98137[esp+40]
$LN64@schemaIsVa:
	mov	ebx, 7
	jmp	SHORT $LN59@schemaIsVa
$LN13@schemaIsVa:
	mov	DWORD PTR [ebp+20], 1
	mov	esi, DWORD PTR [edi]
	call	_sqlite3PagerPagecount
	test	eax, eax
	jne	SHORT $LN12@schemaIsVa
	lea	ebx, DWORD PTR [eax+16]
	jmp	SHORT $create_cursor_exception$137651
$LN12@schemaIsVa:
	mov	esi, DWORD PTR [ebp+20]
	test	esi, esi
	lea	ebx, DWORD PTR [ebp+24]
	jne	SHORT $LN50@schemaIsVa
	lea	ebx, DWORD PTR [esi+11]
	jmp	SHORT $create_cursor_exception$137651
$LN50@schemaIsVa:
	push	ebx
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN49@schemaIsVa
	mov	ebx, DWORD PTR [ebx]
	cmp	BYTE PTR [ebx], al
	jne	SHORT $LN49@schemaIsVa
	push	eax
	call	_sqlite3BtreeInitPage
	add	esp, 4
$LN49@schemaIsVa:
	test	eax, eax
	mov	ebx, eax
	je	$LN11@schemaIsVa
$create_cursor_exception$137651:
	mov	eax, DWORD PTR [ebp+24]
	test	eax, eax
	je	SHORT $LN53@schemaIsVa
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN53@schemaIsVa:
	push	ebp
	call	_free
	mov	ebp, DWORD PTR _pBt$98137[esp+44]
	add	esp, 4
$LN59@schemaIsVa:
	mov	esi, edi
	call	_unlockBtreeIfUnused
; Line 53160
	test	ebx, ebx
	jne	SHORT $LN68@schemaIsVa
$LN63@schemaIsVa:
; Line 53161
	lea	ecx, DWORD PTR _cookie$[esp+40]
	push	ecx
	push	1
	mov	eax, ebp
	call	_sqlite3BtreeGetMeta
	add	esp, 8
; Line 53162
	test	eax, eax
	jne	SHORT $LN1@schemaIsVa
	mov	edx, DWORD PTR _db$[esp+36]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR tv411[esp+40]
	mov	edx, DWORD PTR [ecx+eax+20]
	mov	eax, DWORD PTR _cookie$[esp+40]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN1@schemaIsVa
; Line 53163
	mov	DWORD PTR _allOk$[esp+40], 0
$LN1@schemaIsVa:
; Line 53165
	mov	edi, DWORD PTR _curTemp$[esp+40]
	call	_sqlite3BtreeCloseCursor
$LN68@schemaIsVa:
	mov	esi, DWORD PTR _allOk$[esp+40]
$LN5@schemaIsVa:
; Line 53155
	add	DWORD PTR _iDb$[esp+40], 1
	add	DWORD PTR tv411[esp+40], 24		; 00000018H
	xor	ecx, ecx
	cmp	esi, ecx
	jne	$LL6@schemaIsVa
$LN66@schemaIsVa:
	pop	edi
; Line 53168
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 53169
	add	esp, 24					; 00000018H
	ret	0
; Line 53159
$LN11@schemaIsVa:
	mov	eax, DWORD PTR _pBt$98137[esp+40]
	mov	DWORD PTR [ebp+12], OFFSET _dfltCompare
	mov	DWORD PTR [ebp+16], 0
	mov	DWORD PTR [ebp], eax
	mov	BYTE PTR [ebp+64], 0
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	mov	DWORD PTR [ebp+4], eax
	je	SHORT $LN10@schemaIsVa
	mov	DWORD PTR [eax+8], ebp
$LN10@schemaIsVa:
	mov	DWORD PTR [edi+4], ebp
	mov	BYTE PTR [ebp+65], 0
	mov	DWORD PTR _curTemp$[esp+40], ebp
; Line 53160
	mov	ebp, DWORD PTR _pBt$98137[esp+40]
	jmp	$LN63@schemaIsVa
_schemaIsValid ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@ELCABEID@no?5such?5trigger?3?5?$CFS?$AA@ ; `string'
;	COMDAT ??_C@_0BE@ELCABEID@no?5such?5trigger?3?5?$CFS?$AA@
CONST	SEGMENT
??_C@_0BE@ELCABEID@no?5such?5trigger?3?5?$CFS?$AA@ DB 'no such trigger: %'
	DB	'S', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3DropTrigger
_TEXT	SEGMENT
_pTrigger$ = -12					; size = 4
tv193 = -8						; size = 4
_zDb$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pName$ = 12						; size = 4
_noErr$ = 16						; size = 4
_sqlite3DropTrigger PROC				; COMDAT
; Line 57568
	sub	esp, 12					; 0000000cH
	push	ebp
	push	esi
; Line 57574
	mov	esi, DWORD PTR _pParse$[esp+16]
	mov	eax, DWORD PTR [esi]
	xor	ebp, ebp
; Line 57576
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	mov	DWORD PTR _pTrigger$[esp+20], ebp
	mov	DWORD PTR tv193[esp+20], eax
	je	SHORT $LN9@sqlite3Dro@2
	cmp	DWORD PTR _inMutex, ebp
	jg	$drop_trigger_cleanup$99953
$LN9@sqlite3Dro@2:
; Line 57577
	cmp	BYTE PTR [eax+68], 0
	jne	SHORT $LN33@sqlite3Dro@2
	lea	ecx, DWORD PTR [esi+8]
	push	ecx
	call	_sqlite3Init
	add	esp, 4
	cmp	eax, ebp
	je	SHORT $LN33@sqlite3Dro@2
	add	DWORD PTR [esi+24], 1
	mov	DWORD PTR [esi+4], eax
; Line 57600
	mov	eax, DWORD PTR _pName$[esp+16]
	push	eax
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	esi
	pop	ebp
; Line 57601
	add	esp, 12					; 0000000cH
	ret	0
$LN33@sqlite3Dro@2:
; Line 57582
	mov	eax, DWORD PTR _pName$[esp+16]
	mov	edx, DWORD PTR [eax+8]
	push	edi
; Line 57583
	mov	edi, DWORD PTR [eax+12]
; Line 57584
	mov	eax, edi
	mov	DWORD PTR _zDb$[esp+24], edx
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL35@sqlite3Dro@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL35@sqlite3Dro@2
	sub	eax, edx
	push	ebx
	mov	ebx, eax
; Line 57585
	mov	eax, DWORD PTR tv193[esp+28]
	cmp	DWORD PTR [eax], ebp
	jle	$LN34@sqlite3Dro@2
	npad	6
$LL7@sqlite3Dro@2:
; Line 57586
	cmp	ebp, 2
	mov	esi, ebp
	jge	SHORT $LN13@sqlite3Dro@2
	xor	esi, 1
$LN13@sqlite3Dro@2:
; Line 57587
	mov	edx, DWORD PTR _zDb$[esp+28]
	test	edx, edx
	je	SHORT $LN4@sqlite3Dro@2
	mov	eax, DWORD PTR tv193[esp+28]
	mov	eax, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [esi+esi*2]
	mov	ecx, DWORD PTR [eax+ecx*8]
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN6@sqlite3Dro@2
$LN4@sqlite3Dro@2:
; Line 57588
	mov	edx, DWORD PTR tv193[esp+28]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [esi+esi*2]
	mov	esi, DWORD PTR [eax+ecx*8+20]
	add	esi, 60					; 0000003cH
	je	$LN24@sqlite3Dro@2
	cmp	DWORD PTR [esi+24], 0
	je	$LN24@sqlite3Dro@2
	cmp	BYTE PTR [esi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN26@sqlite3Dro@2
	mov	eax, OFFSET _binHash
$LN26@sqlite3Dro@2:
	push	ebx
	push	edi
	call	eax
	mov	edx, DWORD PTR [esi+20]
	sub	edx, 1
	push	ebx
	and	edx, eax
	push	edi
	mov	ecx, esi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN24@sqlite3Dro@2
	mov	eax, DWORD PTR [eax+8]
; Line 57589
	test	eax, eax
	mov	DWORD PTR _pTrigger$[esp+28], eax
	jne	SHORT $LN2@sqlite3Dro@2
$LN6@sqlite3Dro@2:
; Line 57585
	mov	ecx, DWORD PTR tv193[esp+28]
	add	ebp, 1
	cmp	ebp, DWORD PTR [ecx]
	jl	$LL7@sqlite3Dro@2
; Line 57591
	cmp	DWORD PTR _pTrigger$[esp+28], 0
	jne	SHORT $LN37@sqlite3Dro@2
	mov	esi, DWORD PTR _pParse$[esp+24]
$LN34@sqlite3Dro@2:
; Line 57592
	cmp	DWORD PTR _noErr$[esp+24], 0
	jne	SHORT $LN42@sqlite3Dro@2
; Line 57593
	mov	edx, DWORD PTR _pName$[esp+24]
	push	0
	push	edx
	push	OFFSET ??_C@_0BE@ELCABEID@no?5such?5trigger?3?5?$CFS?$AA@
	mov	edi, esi
	call	_sqlite3ErrorMsg
; Line 57600
	mov	eax, DWORD PTR _pName$[esp+36]
	add	esp, 12					; 0000000cH
	pop	ebx
	pop	edi
	push	eax
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	esi
	pop	ebp
; Line 57601
	add	esp, 12					; 0000000cH
	ret	0
; Line 57588
$LN24@sqlite3Dro@2:
	mov	DWORD PTR _pTrigger$[esp+28], 0
	jmp	SHORT $LN6@sqlite3Dro@2
$LN37@sqlite3Dro@2:
; Line 57595
	mov	eax, DWORD PTR _pTrigger$[esp+28]
$LN2@sqlite3Dro@2:
; Line 57597
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+28]
	call	_sqlite3DropTriggerPtr
	add	esp, 4
$LN42@sqlite3Dro@2:
	pop	ebx
	pop	edi
$drop_trigger_cleanup$99953:
; Line 57600
	mov	eax, DWORD PTR _pName$[esp+16]
	push	eax
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	esi
	pop	ebp
; Line 57601
	add	esp, 12					; 0000000cH
	ret	0
_sqlite3DropTrigger ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _saveCursorPosition
_TEXT	SEGMENT
_saveCursorPosition PROC				; COMDAT
; _pCur$ = eax
; Line 23047
	push	ebx
	push	ebp
	push	esi
	mov	esi, eax
	push	edi
; Line 23053
	lea	ebp, DWORD PTR [esi+72]
	push	ebp
	mov	edi, esi
	call	_sqlite3BtreeKeySize
	mov	edi, eax
	add	esp, 4
; Line 23061
	test	edi, edi
	jne	SHORT $LN1@saveCursor
	mov	eax, DWORD PTR [esi+24]
	cmp	BYTE PTR [eax+3], 0
	jne	SHORT $LN24@saveCursor
; Line 23062
	mov	edi, DWORD PTR [ebp]
	call	_sqlite3Malloc
	mov	ebx, eax
; Line 23063
	test	ebx, ebx
	je	SHORT $LN5@saveCursor
; Line 23064
	mov	ecx, DWORD PTR [ebp]
	push	ebx
	push	ecx
	push	0
	call	_sqlite3BtreeKey
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 23065
	test	edi, edi
	jne	SHORT $LN4@saveCursor
; Line 23066
	mov	DWORD PTR [esi+68], ebx
$LN24@saveCursor:
; Line 23077
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN14@saveCursor
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN14@saveCursor:
; Line 23078
	mov	DWORD PTR [esi+24], 0
; Line 23079
	mov	BYTE PTR [esi+65], 2
$LN1@saveCursor:
; Line 23082
	mov	eax, DWORD PTR [esi+88]
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $LN25@saveCursor
	push	eax
	call	_free
	add	esp, 4
$LN25@saveCursor:
; Line 23083
	mov	eax, edi
	pop	edi
	mov	DWORD PTR [esi+88], ebx
	pop	esi
	pop	ebp
	pop	ebx
; Line 23084
	ret	0
$LN4@saveCursor:
; Line 23068
	push	ebx
	call	_free
	add	esp, 4
; Line 23070
	jmp	SHORT $LN1@saveCursor
$LN5@saveCursor:
; Line 23071
	mov	edi, 7
; Line 23076
	jmp	SHORT $LN1@saveCursor
_saveCursorPosition ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _saveAllCursors
_TEXT	SEGMENT
_pExcept$ = 8						; size = 4
_saveAllCursors PROC					; COMDAT
; _pBt$ = eax
; _iRoot$ = edi
; Line 23091
	push	ebp
	mov	ebp, DWORD PTR _pExcept$[esp]
	push	esi
; Line 23093
	mov	esi, DWORD PTR [eax+4]
	test	esi, esi
	je	SHORT $LN4@saveAllCur
	npad	3
$LL6@saveAllCur:
; Line 23095
	cmp	esi, ebp
	je	SHORT $LN5@saveAllCur
	test	edi, edi
	je	SHORT $LN2@saveAllCur
	cmp	DWORD PTR [esi+20], edi
	jne	SHORT $LN5@saveAllCur
$LN2@saveAllCur:
	cmp	BYTE PTR [esi+65], 1
	jne	SHORT $LN5@saveAllCur
; Line 23096
	mov	eax, esi
	call	_saveCursorPosition
; Line 23097
	test	eax, eax
	jne	SHORT $LN7@saveAllCur
$LN5@saveAllCur:
; Line 23093
	mov	esi, DWORD PTR [esi+4]
	test	esi, esi
	jne	SHORT $LL6@saveAllCur
$LN4@saveAllCur:
; Line 23102
	xor	eax, eax
$LN7@saveAllCur:
	pop	esi
	pop	ebp
; Line 23103
	ret	0
_saveAllCursors ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeRollback
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_pDbPage$137796 = 8					; size = 4
_p$ = 8							; size = 4
_sqlite3BtreeRollback PROC				; COMDAT
; Line 24994
	push	ecx
	push	ebx
	push	ebp
; Line 24996
	mov	ebp, DWORD PTR _p$[esp+8]
	push	esi
	mov	esi, DWORD PTR [ebp+4]
	push	edi
; Line 24999
	mov	edi, DWORD PTR [esi+4]
	xor	ebx, ebx
	cmp	edi, ebx
	je	SHORT $LN15@sqlite3Btr@50
$LN48@sqlite3Btr@50:
	cmp	BYTE PTR [edi+65], 1
	jne	SHORT $LN16@sqlite3Btr@50
	mov	eax, edi
	call	_saveCursorPosition
	cmp	eax, ebx
	jne	SHORT $LN43@sqlite3Btr@50
$LN16@sqlite3Btr@50:
	mov	edi, DWORD PTR [edi+4]
	cmp	edi, ebx
	jne	SHORT $LN48@sqlite3Btr@50
$LN15@sqlite3Btr@50:
	mov	DWORD PTR _rc$[esp+20], ebx
; Line 25001
	jmp	SHORT $LN7@sqlite3Btr@50
$LN43@sqlite3Btr@50:
; Line 25009
	cmp	DWORD PTR [esi+4], ebx
	mov	DWORD PTR _rc$[esp+20], eax
	je	SHORT $LN7@sqlite3Btr@50
	mov	ebp, -1108210269			; bdf20da3H
$LL8@sqlite3Btr@50:
; Line 25010
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
; Line 25011
	cmp	eax, ebx
	je	SHORT $LN23@sqlite3Btr@50
; Line 25012
	mov	edi, DWORD PTR [eax+80]
	cmp	edi, ebx
	je	SHORT $LN23@sqlite3Btr@50
$LN50@sqlite3Btr@50:
	cmp	DWORD PTR [edi+76], ebp
	jne	SHORT $LN24@sqlite3Btr@50
	cmp	DWORD PTR [edi+120], ebx
	jl	SHORT $LN24@sqlite3Btr@50
	call	_closeAllCursors
	mov	BYTE PTR [edi+563], 1
$LN24@sqlite3Btr@50:
	mov	edi, DWORD PTR [edi+8]
	cmp	edi, ebx
	jne	SHORT $LN50@sqlite3Btr@50
$LN23@sqlite3Btr@50:
; Line 25009
	cmp	DWORD PTR [esi+4], ebx
	jne	SHORT $LL8@sqlite3Btr@50
	mov	ebp, DWORD PTR _p$[esp+16]
$LN7@sqlite3Btr@50:
; Line 25018
	mov	edi, ebp
	call	_unlockAllTables
; Line 25020
	cmp	BYTE PTR [ebp+8], 2
	jne	SHORT $LN5@sqlite3Btr@50
; Line 25028
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi+20], ebx
	call	_sqlite3PagerRollback
; Line 25029
	cmp	eax, ebx
	je	SHORT $LN4@sqlite3Btr@50
; Line 25030
	mov	DWORD PTR _rc$[esp+20], eax
$LN4@sqlite3Btr@50:
; Line 25036
	mov	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR _pDbPage$137796[esp+16]
	push	ebx
	push	edx
	mov	eax, 1
	call	_sqlite3PagerAcquire
	add	esp, 8
	cmp	eax, ebx
	jne	SHORT $LN37@sqlite3Btr@50
	mov	ecx, DWORD PTR _pDbPage$137796[esp+16]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, ebx
	je	SHORT $LN33@sqlite3Btr@50
	mov	eax, DWORD PTR [eax+56]
	lea	eax, DWORD PTR [eax+ecx+48]
	jmp	SHORT $LN34@sqlite3Btr@50
$LN33@sqlite3Btr@50:
	xor	eax, eax
$LN34@sqlite3Btr@50:
	lea	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+68], edx
	mov	DWORD PTR [eax+72], ecx
	mov	DWORD PTR [eax+64], esi
	mov	DWORD PTR [eax+76], 1
	mov	BYTE PTR [eax+8], 100			; 00000064H
; Line 25037
	mov	eax, ecx
	call	_sqlite3PagerUnref
$LN37@sqlite3Btr@50:
; Line 25040
	mov	BYTE PTR [esi+48], 1
$LN5@sqlite3Btr@50:
; Line 25043
	cmp	BYTE PTR [ebp+8], bl
	je	SHORT $LN1@sqlite3Btr@50
; Line 25045
	add	DWORD PTR [esi+56], -1
; Line 25046
	jne	SHORT $LN1@sqlite3Btr@50
; Line 25047
	mov	BYTE PTR [esi+48], bl
$LN1@sqlite3Btr@50:
; Line 25051
	mov	BYTE PTR [ebp+8], bl
; Line 25052
	mov	BYTE PTR [esi+12], bl
; Line 25053
	call	_unlockBtreeIfUnused
; Line 25056
	mov	eax, DWORD PTR _rc$[esp+20]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 25057
	pop	ecx
	ret	0
_sqlite3BtreeRollback ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeInsert
_TEXT	SEGMENT
_loc$ = -8						; size = 4
_szNew$ = -4						; size = 4
_newCell$ = 8						; size = 4
_pCur$ = 8						; size = 4
_pKey$ = 12						; size = 4
_nKey$ = 16						; size = 8
_pData$ = 24						; size = 4
_nData$ = 28						; size = 4
_nZero$ = 32						; size = 4
_appendBias$ = 36					; size = 4
_sqlite3BtreeInsert PROC				; COMDAT
; Line 27920
	sub	esp, 8
	push	ebp
	mov	ebp, DWORD PTR _pCur$[esp+8]
; Line 27925
	mov	eax, DWORD PTR [ebp]
	push	esi
	mov	esi, DWORD PTR [eax+4]
; Line 27929
	cmp	BYTE PTR [esi+48], 2
	je	SHORT $LN16@sqlite3Btr@51
; Line 27931
	mov	al, BYTE PTR [esi+13]
	neg	al
	pop	esi
	pop	ebp
	sbb	eax, eax
	and	eax, 7
	add	eax, 1
; Line 27994
	add	esp, 8
	ret	0
$LN16@sqlite3Btr@51:
; Line 27934
	cmp	BYTE PTR [ebp+64], 0
	jne	SHORT $LN15@sqlite3Btr@51
	pop	esi
; Line 27935
	mov	eax, 3
	pop	ebp
; Line 27994
	add	esp, 8
	ret	0
$LN15@sqlite3Btr@51:
; Line 27937
	mov	ecx, DWORD PTR [ebp+20]
	push	ebx
	push	ecx
	mov	ebx, ebp
	call	_checkReadLocks
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@sqlite3Btr@51
	pop	ebx
	pop	esi
; Line 27938
	mov	eax, 6
	pop	ebp
; Line 27994
	add	esp, 8
	ret	0
$LN14@sqlite3Btr@51:
; Line 27942
	mov	eax, DWORD PTR [ebp+68]
	test	eax, eax
	je	SHORT $LN24@sqlite3Btr@51
	push	eax
	call	_free
	add	esp, 4
$LN24@sqlite3Btr@51:
	push	edi
; Line 27946
	mov	edi, DWORD PTR [ebp+20]
	push	ebp
	mov	eax, esi
	mov	DWORD PTR [ebp+68], 0
	mov	BYTE PTR [ebp+65], 0
	call	_saveAllCursors
	add	esp, 4
	test	eax, eax
	jne	$LN31@sqlite3Btr@51
	mov	eax, DWORD PTR _appendBias$[esp+20]
	mov	ebx, DWORD PTR _nKey$[esp+24]
	mov	ecx, DWORD PTR _nKey$[esp+20]
	lea	edx, DWORD PTR _loc$[esp+24]
	push	edx
	mov	edx, DWORD PTR _pKey$[esp+24]
	push	eax
	push	ebx
	push	ecx
	push	edx
	push	ebp
	call	_sqlite3BtreeMoveto
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	$LN31@sqlite3Btr@51
; Line 27950
	mov	edi, DWORD PTR [ebp+24]
; Line 27957
	mov	eax, DWORD PTR [edi+72]
	push	eax
	call	_sqlite3PagerWrite
	add	esp, 4
; Line 27958
	test	eax, eax
	jne	$LN31@sqlite3Btr@51
; Line 27959
	movzx	ecx, WORD PTR [esi+24]
	sub	ecx, 8
	call	_sqlite3MallocRaw
; Line 27960
	test	eax, eax
	mov	DWORD PTR _newCell$[esp+20], eax
	jne	SHORT $LN10@sqlite3Btr@51
	pop	edi
	pop	ebx
	pop	esi
	mov	eax, 7
	pop	ebp
; Line 27994
	add	esp, 8
	ret	0
$LN10@sqlite3Btr@51:
; Line 27961
	mov	edx, DWORD PTR _nZero$[esp+20]
	lea	ecx, DWORD PTR _szNew$[esp+24]
	push	ecx
	mov	ecx, DWORD PTR _nData$[esp+24]
	push	edx
	mov	edx, DWORD PTR _pData$[esp+28]
	push	ecx
	mov	ecx, DWORD PTR _nKey$[esp+32]
	push	edx
	mov	edx, DWORD PTR _pKey$[esp+36]
	push	ebx
	push	ecx
	push	edx
	push	eax
	mov	eax, edi
	call	_fillInCell
	mov	esi, eax
	add	esp, 32					; 00000020H
; Line 27962
	test	esi, esi
	jne	$end_insert$87788
; Line 27965
	mov	eax, DWORD PTR _loc$[esp+24]
	test	eax, eax
	jne	SHORT $LN32@sqlite3Btr@51
	cmp	BYTE PTR [ebp+65], 1
	jne	SHORT $LN27@sqlite3Btr@51
; Line 27968
	movzx	ecx, WORD PTR [edi+14]
	mov	eax, DWORD PTR [edi+68]
	mov	edx, DWORD PTR [ebp+28]
	add	ecx, eax
	lea	ecx, DWORD PTR [ecx+edx*2]
	movzx	edx, BYTE PTR [ecx+1]
	mov	dh, BYTE PTR [ecx]
	add	edx, eax
; Line 27969
	cmp	BYTE PTR [edi+4], 0
	mov	esi, edx
	jne	SHORT $LN26@sqlite3Btr@51
; Line 27970
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR _newCell$[esp+20]
	mov	DWORD PTR [ecx], eax
$LN26@sqlite3Btr@51:
; Line 27972
	mov	eax, esi
	mov	ecx, edi
	call	_cellSizePtr
	mov	ebx, eax
; Line 27973
	mov	ecx, esi
	mov	eax, edi
	call	_clearCell
	mov	esi, eax
; Line 27974
	test	esi, esi
	jne	SHORT $end_insert$87788
; Line 27975
	mov	edx, DWORD PTR [ebp+28]
	push	edx
	mov	ecx, ebx
	mov	esi, edi
	call	_dropCell
	add	esp, 4
	jmp	SHORT $LN27@sqlite3Btr@51
$LN32@sqlite3Btr@51:
; Line 27976
	jge	SHORT $LN27@sqlite3Btr@51
	cmp	WORD PTR [edi+20], 0
	jbe	SHORT $LN27@sqlite3Btr@51
; Line 27978
	add	DWORD PTR [ebp+28], 1
; Line 27979
	mov	WORD PTR [ebp+62], 0
$LN27@sqlite3Btr@51:
; Line 27983
	mov	eax, DWORD PTR _newCell$[esp+20]
	mov	ecx, DWORD PTR [ebp+28]
	push	0
	push	0
	push	eax
	mov	eax, DWORD PTR _szNew$[esp+36]
	call	_insertCell
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 27984
	test	esi, esi
	jne	SHORT $end_insert$87788
; Line 27985
	push	1
	push	edi
	call	_balance
	mov	esi, eax
	add	esp, 8
; Line 27988
	test	esi, esi
	jne	SHORT $end_insert$87788
; Line 27989
	push	ebp
	call	_moveToRoot
	add	esp, 4
$end_insert$87788:
; Line 27992
	mov	ecx, DWORD PTR _newCell$[esp+20]
	push	ecx
	call	_sqlite3FreeX
	add	esp, 4
; Line 27993
	mov	eax, esi
$LN31@sqlite3Btr@51:
	pop	edi
	pop	ebx
	pop	esi
	pop	ebp
; Line 27994
	add	esp, 8
	ret	0
_sqlite3BtreeInsert ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeDelete
_TEXT	SEGMENT
_pgnoChild$ = -112					; size = 4
_szNext$87824 = -108					; size = 4
_pCell$ = -108						; size = 4
_pBt$ = -104						; size = 4
_notUsed$87825 = -100					; size = 4
_leafCur$87822 = -96					; size = 96
_sqlite3BtreeDelete PROC				; COMDAT
; _pCur$ = eax
; Line 28000
	sub	esp, 112				; 00000070H
	push	ebx
	mov	ebx, eax
; Line 28005
	mov	eax, DWORD PTR [ebx]
	push	ebp
	mov	ebp, DWORD PTR [eax+4]
; Line 28008
	cmp	BYTE PTR [ebp+48], 2
	push	esi
	mov	esi, DWORD PTR [ebx+24]
	mov	DWORD PTR _pgnoChild$[esp+124], 0
	mov	DWORD PTR _pBt$[esp+124], ebp
	je	SHORT $LN17@sqlite3Btr@52
; Line 28010
	mov	al, BYTE PTR [ebp+13]
	neg	al
	pop	esi
	pop	ebp
	pop	ebx
	sbb	eax, eax
	and	eax, 7
	add	eax, 1
; Line 28103
	add	esp, 112				; 00000070H
	ret	0
$LN17@sqlite3Btr@52:
; Line 28013
	movzx	ecx, WORD PTR [esi+20]
	cmp	DWORD PTR [ebx+28], ecx
	jl	SHORT $LN16@sqlite3Btr@52
	pop	esi
	pop	ebp
; Line 28014
	mov	eax, 1
	pop	ebx
; Line 28103
	add	esp, 112				; 00000070H
	ret	0
$LN16@sqlite3Btr@52:
; Line 28016
	cmp	BYTE PTR [ebx+64], 0
	jne	SHORT $LN15@sqlite3Btr@52
	pop	esi
	pop	ebp
; Line 28017
	mov	eax, 3
	pop	ebx
; Line 28103
	add	esp, 112				; 00000070H
	ret	0
$LN15@sqlite3Btr@52:
; Line 28019
	mov	edx, DWORD PTR [ebx+20]
	push	edx
	call	_checkReadLocks
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@sqlite3Btr@52
	pop	esi
	pop	ebp
; Line 28020
	mov	eax, 6
	pop	ebx
; Line 28103
	add	esp, 112				; 00000070H
	ret	0
$LN14@sqlite3Btr@52:
; Line 28032
	cmp	BYTE PTR [ebx+65], 2
	push	edi
	jne	SHORT $LN30@sqlite3Btr@52
	push	ebx
	call	_sqlite3BtreeRestoreOrClearCursorPosition
	add	esp, 4
	test	eax, eax
	jne	$LN34@sqlite3Btr@52
$LN30@sqlite3Btr@52:
	mov	edi, DWORD PTR [ebx+20]
	push	ebx
	mov	eax, ebp
	call	_saveAllCursors
	add	esp, 4
	test	eax, eax
	jne	$LN34@sqlite3Btr@52
	mov	eax, DWORD PTR [esi+72]
	push	eax
	call	_sqlite3PagerWrite
	add	esp, 4
	test	eax, eax
	jne	$LN34@sqlite3Btr@52
; Line 28040
	movzx	ecx, WORD PTR [esi+14]
	mov	eax, DWORD PTR [esi+68]
	mov	edx, DWORD PTR [ebx+28]
	add	ecx, eax
	lea	edi, DWORD PTR [ecx+edx*2]
	xor	ecx, ecx
	mov	ch, BYTE PTR [edi]
	mov	cl, BYTE PTR [edi+1]
	add	ecx, eax
; Line 28041
	cmp	BYTE PTR [esi+4], 0
	mov	edi, ecx
	mov	DWORD PTR _pCell$[esp+128], edi
	jne	SHORT $LN31@sqlite3Btr@52
; Line 28042
	movzx	eax, BYTE PTR [edi+2]
	movzx	ecx, BYTE PTR [edi+3]
	xor	edx, edx
	mov	dh, BYTE PTR [edi]
	mov	dl, BYTE PTR [edi+1]
	shl	edx, 8
	or	edx, eax
	shl	edx, 8
	or	edx, ecx
	mov	DWORD PTR _pgnoChild$[esp+128], edx
$LN31@sqlite3Btr@52:
; Line 28044
	mov	ecx, edi
	mov	eax, esi
	call	_clearCell
; Line 28045
	test	eax, eax
	jne	$LN34@sqlite3Btr@52
; Line 28047
	cmp	BYTE PTR [esi+4], al
	jne	$LN9@sqlite3Btr@52
; Line 28063
	lea	eax, DWORD PTR _leafCur$87822[esp+128]
	mov	edx, ebx
	xor	ebp, ebp
	call	_sqlite3BtreeGetTempCursor
; Line 28064
	lea	edx, DWORD PTR _notUsed$87825[esp+128]
	push	edx
	lea	eax, DWORD PTR _leafCur$87822[esp+132]
	push	eax
	call	_sqlite3BtreeNext
	mov	edi, eax
	add	esp, 8
; Line 28065
	test	edi, edi
	jne	$LN32@sqlite3Btr@52
; Line 28066
	mov	ecx, DWORD PTR _leafCur$87822[esp+152]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	call	_sqlite3PagerWrite
	mov	edi, eax
	add	esp, 4
; Line 28068
	test	edi, edi
	jne	$LN32@sqlite3Btr@52
; Line 28071
	mov	eax, DWORD PTR _pCell$[esp+128]
	mov	ecx, esi
	call	_cellSizePtr
	mov	ecx, DWORD PTR [ebx+28]
	push	ecx
	mov	ecx, eax
	call	_dropCell
; Line 28072
	mov	ecx, DWORD PTR _leafCur$87822[esp+156]
	movzx	edx, WORD PTR [ecx+14]
	mov	edi, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _leafCur$87822[esp+160]
	add	edx, edi
	lea	ebp, DWORD PTR [edx+eax*2]
	movzx	edx, BYTE PTR [ebp+1]
	mov	dh, BYTE PTR [ebp]
	add	esp, 4
	add	edi, edx
; Line 28073
	mov	eax, edi
	call	_cellSizePtr
	mov	DWORD PTR _szNext$87824[esp+128], eax
; Line 28075
	mov	eax, DWORD PTR _pBt$[esp+128]
	movzx	ecx, WORD PTR [eax+24]
	sub	ecx, 8
	call	_sqlite3MallocRaw
	mov	ebp, eax
; Line 28076
	test	ebp, ebp
	jne	SHORT $LN6@sqlite3Btr@52
; Line 28077
	lea	edi, DWORD PTR [eax+7]
; Line 28080
	jmp	SHORT $LN32@sqlite3Btr@52
$LN6@sqlite3Btr@52:
; Line 28081
	mov	eax, DWORD PTR _szNext$87824[esp+128]
	mov	ecx, DWORD PTR [ebx+28]
	push	0
	add	edi, -4					; fffffffcH
	push	ebp
	push	edi
	add	eax, 4
	mov	edi, esi
	call	_insertCell
	mov	edi, eax
	add	esp, 12					; 0000000cH
; Line 28083
	test	edi, edi
	jne	SHORT $LN32@sqlite3Btr@52
; Line 28084
	mov	eax, DWORD PTR [ebx+28]
	mov	edi, esi
	call	_findOverflowCell
	mov	ecx, DWORD PTR _pgnoChild$[esp+128]
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	BYTE PTR [eax], dl
	mov	edx, ecx
	shr	edx, 16					; 00000010H
	mov	BYTE PTR [eax+1], dl
	mov	edx, ecx
	shr	edx, 8
; Line 28085
	push	0
	push	esi
	mov	BYTE PTR [eax+2], dl
	mov	BYTE PTR [eax+3], cl
	call	_balance
	mov	edi, eax
	add	esp, 8
; Line 28087
	test	edi, edi
	jne	SHORT $LN32@sqlite3Btr@52
; Line 28088
	mov	eax, DWORD PTR _leafCur$87822[esp+156]
	mov	ecx, DWORD PTR _szNext$87824[esp+128]
	mov	esi, DWORD PTR _leafCur$87822[esp+152]
	push	eax
	call	_dropCell
; Line 28089
	mov	ecx, DWORD PTR _leafCur$87822[esp+156]
	push	edi
	push	ecx
	call	_balance
	add	esp, 12					; 0000000cH
	mov	edi, eax
$LN32@sqlite3Btr@52:
; Line 28091
	push	ebp
	call	_sqlite3FreeX
; Line 28092
	mov	eax, DWORD PTR _leafCur$87822[esp+156]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN33@sqlite3Btr@52
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
; Line 28093
	jmp	SHORT $LN33@sqlite3Btr@52
$LN9@sqlite3Btr@52:
; Line 28096
	mov	eax, edi
	mov	ecx, esi
	call	_cellSizePtr
	mov	edx, DWORD PTR [ebx+28]
	push	edx
	mov	ecx, eax
	call	_dropCell
; Line 28097
	push	0
	push	esi
	call	_balance
	add	esp, 12					; 0000000cH
	mov	edi, eax
$LN33@sqlite3Btr@52:
; Line 28099
	test	edi, edi
	jne	SHORT $LN1@sqlite3Btr@52
; Line 28100
	push	ebx
	call	_moveToRoot
	add	esp, 4
$LN1@sqlite3Btr@52:
; Line 28102
	mov	eax, edi
$LN34@sqlite3Btr@52:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 28103
	add	esp, 112				; 00000070H
	ret	0
_sqlite3BtreeDelete ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeClearTable
_TEXT	SEGMENT
_sqlite3BtreeClearTable PROC				; COMDAT
; _p$ = eax
; _iTable$ = ecx
; Line 28298
	cmp	BYTE PTR [eax+8], 2
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, ecx
	je	SHORT $LN3@sqlite3Btr@53
; Line 28299
	mov	al, BYTE PTR [esi+13]
	neg	al
	pop	edi
	pop	esi
	sbb	eax, eax
	and	eax, 7
	add	eax, 1
; Line 28312
	ret	0
$LN3@sqlite3Btr@53:
	push	ebx
; Line 28301
	push	edi
	xor	ebx, ebx
	call	_checkReadLocks
	add	esp, 4
; Line 28302
	test	eax, eax
	pop	ebx
; Line 28303
	jne	SHORT $LN4@sqlite3Btr@53
; Line 28307
	push	eax
	mov	eax, esi
	call	_saveAllCursors
	add	esp, 4
	test	eax, eax
; Line 28308
	jne	SHORT $LN4@sqlite3Btr@53
; Line 28311
	push	eax
	push	eax
	push	edi
	push	esi
	call	_clearDatabasePage
	add	esp, 16					; 00000010H
$LN4@sqlite3Btr@53:
	pop	edi
	pop	esi
; Line 28312
	ret	0
_sqlite3BtreeClearTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeDropTable
_TEXT	SEGMENT
_pMove$87938 = -8					; size = 4
_pPage$ = -8						; size = 4
_maxRootPgno$87933 = -4					; size = 4
_p$ = 8							; size = 4
_piMoved$ = 12						; size = 4
_sqlite3BtreeDropTable PROC				; COMDAT
; _iTable$ = eax
; Line 28334
	sub	esp, 8
	push	ebx
	mov	ebx, eax
; Line 28337
	mov	eax, DWORD PTR _p$[esp+8]
; Line 28339
	cmp	BYTE PTR [eax+8], 2
	push	ebp
	mov	ebp, DWORD PTR [eax+4]
	mov	DWORD PTR _pPage$[esp+16], 0
	je	SHORT $LN18@sqlite3Btr@54
; Line 28340
	mov	al, BYTE PTR [ebp+13]
	neg	al
	pop	ebp
	pop	ebx
	sbb	eax, eax
	and	eax, 7
	add	eax, 1
; Line 28439
	add	esp, 8
	ret	0
$LN18@sqlite3Btr@54:
; Line 28349
	cmp	DWORD PTR [ebp+4], 0
	je	SHORT $LN17@sqlite3Btr@54
	pop	ebp
; Line 28350
	mov	eax, 6
	pop	ebx
; Line 28439
	add	esp, 8
	ret	0
$LN17@sqlite3Btr@54:
	push	esi
	push	edi
; Line 28353
	lea	eax, DWORD PTR _pPage$[esp+24]
	push	eax
	xor	eax, eax
	mov	esi, ebx
	mov	edi, ebp
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 28354
	test	eax, eax
	jne	$LN100@sqlite3Btr@54
; Line 28355
	mov	esi, DWORD PTR _p$[esp+20]
	mov	ecx, ebx
	mov	eax, esi
	call	_sqlite3BtreeClearTable
	mov	edi, eax
; Line 28356
	test	edi, edi
	je	SHORT $LN15@sqlite3Btr@54
; Line 28357
	mov	eax, DWORD PTR _pPage$[esp+24]
	test	eax, eax
	je	$LN97@sqlite3Btr@54
	mov	eax, DWORD PTR [eax+72]
; Line 28436
	call	_sqlite3PagerUnref
; Line 28438
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 28439
	add	esp, 8
	ret	0
$LN15@sqlite3Btr@54:
; Line 28363
	cmp	ebx, 1
	mov	ecx, DWORD PTR _piMoved$[esp+20]
	mov	DWORD PTR [ecx], 0
	jle	$LN14@sqlite3Btr@54
; Line 28368
	cmp	BYTE PTR [ebp+18], 0
	je	$LN13@sqlite3Btr@54
; Line 28370
	lea	edx, DWORD PTR _maxRootPgno$87933[esp+24]
	push	edx
	push	4
	mov	eax, esi
	call	_sqlite3BtreeGetMeta
	mov	esi, eax
	add	esp, 8
; Line 28371
	test	esi, esi
	je	SHORT $LN12@sqlite3Btr@54
; Line 28372
	mov	eax, DWORD PTR _pPage$[esp+24]
	test	eax, eax
	je	SHORT $LN24@sqlite3Btr@54
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN24@sqlite3Btr@54:
	pop	edi
; Line 28373
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 28439
	add	esp, 8
	ret	0
$LN12@sqlite3Btr@54:
; Line 28376
	mov	esi, DWORD PTR _maxRootPgno$87933[esp+24]
	cmp	ebx, esi
	jne	SHORT $LN11@sqlite3Btr@54
; Line 28380
	mov	edi, DWORD PTR _pPage$[esp+24]
	push	edi
	call	_freePage
	add	esp, 4
; Line 28381
	test	edi, edi
	mov	ebx, eax
	je	SHORT $LN27@sqlite3Btr@54
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerUnref
$LN27@sqlite3Btr@54:
; Line 28382
	test	ebx, ebx
	je	$LN9@sqlite3Btr@54
$LN106@sqlite3Btr@54:
	pop	edi
	pop	esi
	pop	ebp
; Line 28383
	mov	eax, ebx
	pop	ebx
; Line 28439
	add	esp, 8
	ret	0
$LN11@sqlite3Btr@54:
; Line 28391
	mov	eax, DWORD PTR _pPage$[esp+24]
	test	eax, eax
	je	SHORT $LN30@sqlite3Btr@54
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN30@sqlite3Btr@54:
; Line 28392
	lea	eax, DWORD PTR _pMove$87938[esp+24]
	push	eax
	xor	eax, eax
	mov	edi, ebp
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 28393
	test	eax, eax
; Line 28394
	jne	$LN100@sqlite3Btr@54
; Line 28396
	mov	eax, DWORD PTR [ebp]
	mov	edi, DWORD PTR _pMove$87938[esp+24]
	push	ebx
	push	eax
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerMovepage
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN103@sqlite3Btr@54
	mov	eax, edi
	mov	DWORD PTR [edi+76], ebx
	call	_setChildPtrmaps
$LN103@sqlite3Btr@54:
	mov	ebx, eax
; Line 28397
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerUnref
; Line 28398
	test	ebx, ebx
; Line 28399
	jne	SHORT $LN106@sqlite3Btr@54
; Line 28401
	lea	ecx, DWORD PTR _pMove$87938[esp+24]
	push	ecx
	xor	eax, eax
	mov	edi, ebp
	call	_sqlite3BtreeGetPage
	add	esp, 4
; Line 28402
	test	eax, eax
; Line 28403
	jne	$LN100@sqlite3Btr@54
; Line 28405
	mov	edi, DWORD PTR _pMove$87938[esp+24]
	push	edi
	call	_freePage
	add	esp, 4
; Line 28406
	test	edi, edi
	mov	ebx, eax
	je	SHORT $LN91@sqlite3Btr@54
	mov	eax, DWORD PTR [edi+72]
	call	_sqlite3PagerUnref
$LN91@sqlite3Btr@54:
; Line 28407
	test	ebx, ebx
; Line 28408
	jne	$LN106@sqlite3Btr@54
; Line 28410
	mov	edx, DWORD PTR _piMoved$[esp+20]
	mov	DWORD PTR [edx], esi
$LN9@sqlite3Btr@54:
; Line 28419
	movzx	ecx, WORD PTR [ebp+24]
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ecx
	sub	esi, 1
	add	eax, 1
	cmp	esi, eax
	jne	SHORT $LN4@sqlite3Btr@54
; Line 28420
	sub	esi, 1
$LN4@sqlite3Btr@54:
; Line 28422
	push	esi
	mov	edi, ebp
	call	_ptrmapPageno
	add	esp, 4
	cmp	esi, eax
	jne	SHORT $LN3@sqlite3Btr@54
; Line 28423
	sub	esi, 1
$LN3@sqlite3Btr@54:
; Line 28427
	mov	ecx, DWORD PTR _p$[esp+20]
	mov	ebx, esi
	mov	edi, 4
	call	_sqlite3BtreeUpdateMeta
	mov	edi, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 28439
	add	esp, 8
	ret	0
$LN13@sqlite3Btr@54:
; Line 28429
	mov	esi, DWORD PTR _pPage$[esp+24]
	push	esi
	call	_freePage
	mov	edi, eax
; Line 28433
	jmp	SHORT $LN105@sqlite3Btr@54
$LN14@sqlite3Btr@54:
; Line 28435
	mov	esi, DWORD PTR _pPage$[esp+24]
	push	9
	call	_zeroPage
$LN105@sqlite3Btr@54:
	add	esp, 4
; Line 28436
	test	esi, esi
	je	SHORT $LN97@sqlite3Btr@54
	mov	eax, DWORD PTR [esi+72]
	call	_sqlite3PagerUnref
$LN97@sqlite3Btr@54:
; Line 28438
	mov	eax, edi
$LN100@sqlite3Btr@54:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 28439
	add	esp, 8
	ret	0
_sqlite3BtreeDropTable ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3BtreeCopyFile
_TEXT	SEGMENT
_nPage$ = -24						; size = 4
_iSkip$ = -20						; size = 4
_pDbPage$88239 = -16					; size = 4
_pBtTo$ = -12						; size = 4
_pDbPage$88245 = -8					; size = 4
_pBtFrom$ = -8						; size = 4
_nToPage$ = -4						; size = 4
_pTo$ = 8						; size = 4
_sqlite3BtreeCopyFile PROC				; COMDAT
; _pFrom$ = ecx
; Line 28995
	sub	esp, 24					; 00000018H
; Line 28999
	mov	eax, DWORD PTR _pTo$[esp+20]
	push	ebx
	mov	ebx, DWORD PTR [eax+4]
	push	ebp
; Line 29000
	mov	ebp, DWORD PTR [ecx+4]
	push	edi
; Line 29002
	mov	dl, 2
	xor	edi, edi
	cmp	BYTE PTR [eax+8], dl
	mov	DWORD PTR _pBtTo$[esp+36], ebx
	mov	DWORD PTR _pBtFrom$[esp+36], ebp
	jne	$LN14@sqlite3Btr@55
	cmp	BYTE PTR [ecx+8], dl
	jne	$LN14@sqlite3Btr@55
; Line 29005
	cmp	DWORD PTR [ebx+4], edi
	je	SHORT $LN13@sqlite3Btr@55
	lea	eax, DWORD PTR [edi+5]
	pop	edi
	pop	ebp
	pop	ebx
; Line 29046
	add	esp, 24					; 00000018H
	ret	0
$LN13@sqlite3Btr@55:
	push	esi
; Line 29006
	mov	esi, DWORD PTR [ebx]
	call	_sqlite3PagerPagecount
; Line 29007
	mov	esi, DWORD PTR [ebp]
	mov	DWORD PTR _nToPage$[esp+40], eax
	call	_sqlite3PagerPagecount
; Line 29008
	movzx	ecx, WORD PTR [ebx+24]
	mov	DWORD PTR _nPage$[esp+40], eax
	mov	eax, 1073741824				; 40000000H
	cdq
	idiv	ecx
; Line 29009
	mov	esi, 1
	add	eax, 1
	mov	DWORD PTR _iSkip$[esp+40], eax
	npad	3
$LL41@sqlite3Btr@55:
	cmp	esi, DWORD PTR _nPage$[esp+40]
	ja	SHORT $LN35@sqlite3Btr@55
; Line 29011
	cmp	esi, eax
	je	SHORT $LN11@sqlite3Btr@55
; Line 29012
	mov	ecx, DWORD PTR [ebp]
	lea	edx, DWORD PTR _pDbPage$88239[esp+40]
	push	0
	push	edx
	mov	eax, esi
	call	_sqlite3PagerAcquire
	mov	edi, eax
	add	esp, 8
; Line 29013
	test	edi, edi
	jne	SHORT $LN40@sqlite3Btr@55
; Line 29014
	mov	ebp, DWORD PTR _pDbPage$88239[esp+40]
	mov	ebx, DWORD PTR [ebx]
	lea	eax, DWORD PTR [ebp+48]
	push	eax
	push	esi
	call	_sqlite3PagerOverwrite
	mov	edi, eax
	add	esp, 8
; Line 29015
	mov	eax, ebp
	call	_sqlite3PagerUnref
	mov	ebx, DWORD PTR _pBtTo$[esp+40]
	mov	ebp, DWORD PTR _pBtFrom$[esp+40]
	mov	eax, DWORD PTR _iSkip$[esp+40]
$LN11@sqlite3Btr@55:
	add	esi, 1
	test	edi, edi
	je	SHORT $LL41@sqlite3Btr@55
; Line 29009
	jmp	SHORT $LN35@sqlite3Btr@55
$LN40@sqlite3Btr@55:
	mov	eax, DWORD PTR _iSkip$[esp+40]
$LN35@sqlite3Btr@55:
; Line 29021
	mov	ebp, DWORD PTR _nPage$[esp+40]
	add	ebp, 1
	test	edi, edi
	jne	$LN39@sqlite3Btr@55
	npad	8
$LL7@sqlite3Btr@55:
	mov	ecx, DWORD PTR _nToPage$[esp+40]
	cmp	ebp, ecx
	ja	$LN36@sqlite3Btr@55
; Line 29023
	cmp	ebp, eax
	je	SHORT $LN6@sqlite3Btr@55
; Line 29024
	lea	ecx, DWORD PTR _pDbPage$88245[esp+40]
	push	0
	push	ecx
	mov	ecx, DWORD PTR [ebx]
	mov	eax, ebp
	call	_sqlite3PagerAcquire
	mov	edi, eax
	add	esp, 8
; Line 29025
	test	edi, edi
	jne	$LN39@sqlite3Btr@55
; Line 29026
	mov	esi, DWORD PTR _pDbPage$88245[esp+40]
	push	esi
	call	_sqlite3PagerWrite
	mov	edi, eax
; Line 29027
	mov	eax, DWORD PTR [esi]
	add	esp, 4
	cmp	BYTE PTR [eax+16], 0
	jne	SHORT $LN20@sqlite3Btr@55
	cmp	BYTE PTR [esi+29], 0
	mov	BYTE PTR [esi+31], 1
	je	SHORT $LN20@sqlite3Btr@55
	cmp	BYTE PTR [eax+5], 0
	jne	SHORT $LN20@sqlite3Btr@55
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, DWORD PTR [esi+4]
	jne	SHORT $LN21@sqlite3Btr@55
	cmp	DWORD PTR [eax+32], ecx
	jl	SHORT $LN20@sqlite3Btr@55
$LN21@sqlite3Btr@55:
	mov	eax, esi
	call	_makeClean
$LN20@sqlite3Btr@55:
; Line 29036
	mov	eax, esi
	call	_sqlite3PagerUnref
	mov	eax, DWORD PTR _iSkip$[esp+40]
$LN6@sqlite3Btr@55:
	add	ebp, 1
	test	edi, edi
	je	SHORT $LL7@sqlite3Btr@55
; Line 29043
	mov	edx, DWORD PTR _pTo$[esp+36]
	push	edx
	call	_sqlite3BtreeRollback
	add	esp, 4
	pop	esi
; Line 29045
	mov	eax, edi
	pop	edi
	pop	ebp
	pop	ebx
; Line 29046
	add	esp, 24					; 00000018H
	ret	0
$LN36@sqlite3Btr@55:
; Line 29038
	test	edi, edi
	jne	SHORT $LN39@sqlite3Btr@55
	cmp	DWORD PTR _nPage$[esp+40], ecx
	jae	SHORT $LN1@sqlite3Btr@55
; Line 29039
	mov	esi, DWORD PTR [ebx]
	call	_sqlite3PagerPagecount
	mov	edi, DWORD PTR [esi+24]
	test	edi, edi
	jne	SHORT $LN39@sqlite3Btr@55
	mov	edi, DWORD PTR _nPage$[esp+40]
	cmp	edi, DWORD PTR [esi+28]
	jae	SHORT $LN44@sqlite3Btr@55
	cmp	BYTE PTR [esi+16], 0
	je	SHORT $LN28@sqlite3Btr@55
	push	esi
	mov	DWORD PTR [esi+28], edi
	call	_pager_truncate_cache
	add	esp, 4
$LN44@sqlite3Btr@55:
	xor	edi, edi
	pop	esi
; Line 29045
	mov	eax, edi
	pop	edi
	pop	ebp
	pop	ebx
; Line 29046
	add	esp, 24					; 00000018H
	ret	0
; Line 29039
$LN28@sqlite3Btr@55:
	call	_syncJournal
	test	eax, eax
	jne	SHORT $LN43@sqlite3Btr@55
	push	esi
	lea	ebx, DWORD PTR [eax+4]
	call	_pager_wait_on_lock
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN43@sqlite3Btr@55
	mov	ebx, edi
	call	_pager_truncate
$LN43@sqlite3Btr@55:
	mov	edi, eax
; Line 29042
	test	edi, edi
	je	SHORT $LN1@sqlite3Btr@55
$LN39@sqlite3Btr@55:
; Line 29043
	mov	edx, DWORD PTR _pTo$[esp+36]
	push	edx
	call	_sqlite3BtreeRollback
	add	esp, 4
$LN1@sqlite3Btr@55:
	pop	esi
; Line 29045
	mov	eax, edi
	pop	edi
	pop	ebp
	pop	ebx
; Line 29046
	add	esp, 24					; 00000018H
	ret	0
$LN14@sqlite3Btr@55:
	pop	edi
	pop	ebp
; Line 29003
	mov	eax, 1
	pop	ebx
; Line 29046
	add	esp, 24					; 00000018H
	ret	0
_sqlite3BtreeCopyFile ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JECJFHOP@unable?5to?5open?5database?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BO@FOBANNIG@database?5?$CFs?5is?5already?5in?5use?$AA@ ; `string'
PUBLIC	??_C@_0CK@JEFPBLHB@cannot?5ATTACH?5database?5within?5tr@ ; `string'
PUBLIC	??_C@_0CF@FLFLBLIN@too?5many?5attached?5databases?5?9?5ma@ ; `string'
PUBLIC	_context$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0BM@JECJFHOP@unable?5to?5open?5database?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BM@JECJFHOP@unable?5to?5open?5database?3?5?$CFs?$AA@ DB 'unable to'
	DB	' open database: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FOBANNIG@database?5?$CFs?5is?5already?5in?5use?$AA@
CONST	SEGMENT
??_C@_0BO@FOBANNIG@database?5?$CFs?5is?5already?5in?5use?$AA@ DB 'databas'
	DB	'e %s is already in use', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JEFPBLHB@cannot?5ATTACH?5database?5within?5tr@
CONST	SEGMENT
??_C@_0CK@JEFPBLHB@cannot?5ATTACH?5database?5within?5tr@ DB 'cannot ATTAC'
	DB	'H database within transaction', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FLFLBLIN@too?5many?5attached?5databases?5?9?5ma@
CONST	SEGMENT
??_C@_0CF@FLFLBLIN@too?5many?5attached?5databases?5?9?5ma@ DB 'too many a'
	DB	'ttached databases - max %d', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _attachFunc
_TEXT	SEGMENT
_zName$ = -152						; size = 4
_rc$ = -148						; size = 4
_zFile$ = -144						; size = 4
_zErrDyn$ = -140					; size = 4
_context$GSCopy$ = -136					; size = 4
_zErr$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_context$ = 8						; size = 4
_argc$ = 12						; size = 4
_argv$ = 16						; size = 4
_attachFunc PROC					; COMDAT
; Line 42535
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+152], eax
	mov	eax, DWORD PTR _context$[esp+148]
	push	ebx
	push	ebp
; Line 42545
	mov	DWORD PTR _context$GSCopy$[esp+160], eax
	mov	eax, DWORD PTR [eax]
	mov	ebx, DWORD PTR [eax+8]
	push	esi
	mov	esi, DWORD PTR _argv$[esp+160]
	mov	ecx, DWORD PTR [esi]
	push	edi
	mov	al, 1
	mov	DWORD PTR _zErrDyn$[esp+168], 0
	call	_sqlite3ValueText
; Line 42546
	mov	ecx, DWORD PTR [esi+4]
	mov	edi, eax
	mov	al, 1
	mov	DWORD PTR _zFile$[esp+168], edi
	call	_sqlite3ValueText
; Line 42547
	test	edi, edi
	mov	DWORD PTR _zName$[esp+168], eax
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	jne	SHORT $LN23@attachFunc
	mov	DWORD PTR _zFile$[esp+168], ecx
$LN23@attachFunc:
; Line 42548
	test	eax, eax
	jne	SHORT $LN22@attachFunc
	mov	DWORD PTR _zName$[esp+168], ecx
	mov	eax, ecx
$LN22@attachFunc:
; Line 42556
	mov	ebp, DWORD PTR [ebx]
	cmp	ebp, 12					; 0000000cH
	jl	SHORT $LN21@attachFunc
; Line 42560
	push	10					; 0000000aH
	push	OFFSET ??_C@_0CF@FLFLBLIN@too?5many?5attached?5databases?5?9?5ma@
; Line 42561
	jmp	$LN170@attachFunc
$LN21@attachFunc:
; Line 42563
	cmp	BYTE PTR [ebx+20], 0
	jne	SHORT $LN20@attachFunc
; Line 42565
	push	OFFSET ??_C@_0CK@JEFPBLHB@cannot?5ATTACH?5database?5within?5tr@
	lea	edx, DWORD PTR _zErr$[esp+172]
	push	edx
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 12					; 0000000cH
; Line 42566
	jmp	$attach_error$93293
$LN20@attachFunc:
; Line 42568
	xor	esi, esi
	test	ebp, ebp
	jle	SHORT $LN17@attachFunc
	mov	edi, DWORD PTR [ebx+4]
	npad	7
$LL19@attachFunc:
; Line 42569
	mov	ecx, DWORD PTR [edi]
; Line 42570
	test	ecx, ecx
	je	SHORT $LN18@attachFunc
	test	eax, eax
	je	SHORT $LN18@attachFunc
	mov	edx, eax
	call	_sqlite3StrICmp
	test	eax, eax
	mov	eax, DWORD PTR _zName$[esp+168]
	je	SHORT $LN156@attachFunc
$LN18@attachFunc:
; Line 42568
	add	esi, 1
	add	edi, 24					; 00000018H
	cmp	esi, ebp
	jl	SHORT $LL19@attachFunc
$LN17@attachFunc:
; Line 42579
	mov	eax, DWORD PTR [ebx+4]
	lea	edx, DWORD PTR [ebx+292]
	cmp	eax, edx
	jne	SHORT $LN15@attachFunc
; Line 42580
	mov	esi, DWORD PTR _inMutex
	xor	edi, edi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN39@attachFunc
	test	esi, esi
	jg	SHORT $LN166@attachFunc
$LN39@attachFunc:
	push	72					; 00000048H
	call	_malloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN159@attachFunc
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN49@attachFunc
	test	esi, esi
	jg	SHORT $LN166@attachFunc
$LN49@attachFunc:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN166@attachFunc
$LN156@attachFunc:
; Line 42571
	push	eax
	push	OFFSET ??_C@_0BO@FOBANNIG@database?5?$CFs?5is?5already?5in?5use?$AA@
; Line 42572
	jmp	$LN170@attachFunc
$LN159@attachFunc:
; Line 42580
	push	72					; 00000048H
	push	0
	push	edi
	call	_memset
	add	esp, 12					; 0000000cH
$LN166@attachFunc:
; Line 42581
	test	edi, edi
	mov	eax, edi
	je	$LN6@attachFunc
; Line 42584
	mov	esi, DWORD PTR [ebx+4]
	mov	ecx, 12					; 0000000cH
	rep movsd
; Line 42585
	jmp	SHORT $LN12@attachFunc
$LN15@attachFunc:
; Line 42586
	lea	edi, DWORD PTR [ebp+ebp*2+3]
	add	edi, edi
	add	edi, edi
	add	edi, edi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN64@attachFunc
	cmp	DWORD PTR _inMutex, 0
	jg	$LN6@attachFunc
$LN64@attachFunc:
	test	eax, eax
	jne	SHORT $LN63@attachFunc
	call	_sqlite3Malloc
	jmp	SHORT $LN62@attachFunc
$LN63@attachFunc:
	push	edi
	push	eax
	call	_realloc
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	jne	SHORT $LN58@attachFunc
	call	_sqlite3FailedMalloc
$LN58@attachFunc:
	mov	eax, ecx
$LN62@attachFunc:
; Line 42587
	test	eax, eax
	je	$LN6@attachFunc
$LN12@attachFunc:
; Line 42592
	mov	ecx, DWORD PTR [ebx]
; Line 42599
	mov	ebp, DWORD PTR _zFile$[esp+168]
	mov	DWORD PTR [ebx+4], eax
	lea	edx, DWORD PTR [ecx+ecx*2]
	lea	esi, DWORD PTR [eax+edx*8]
	xor	eax, eax
	add	ecx, 1
	mov	DWORD PTR [ebx], ecx
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], eax
	test	DWORD PTR [ebx+8], 4096			; 00001000H
	lea	edi, DWORD PTR [esi+4]
	mov	ecx, ebp
	je	SHORT $LN74@attachFunc
	mov	eax, 2
$LN74@attachFunc:
	test	ebp, ebp
	jne	SHORT $LN72@attachFunc
	cmp	BYTE PTR [ebx+21], 2
	jne	SHORT $LN72@attachFunc
	mov	ecx, OFFSET ??_C@_08CADOGOJM@?3memory?3?$AA@
$LN72@attachFunc:
	push	eax
	push	edi
	push	ebx
	push	ecx
	call	_sqlite3BtreeOpen
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN84@attachFunc
	mov	edx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [ebx+276]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [edx+108], ecx
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+68], 2000		; 000007d0H
$LN84@attachFunc:
; Line 42600
	test	eax, eax
	mov	DWORD PTR _rc$[esp+168], eax
	jne	SHORT $LN165@attachFunc
; Line 42601
	mov	eax, DWORD PTR [edi]
	call	_sqlite3SchemaGet
; Line 42602
	test	eax, eax
	mov	DWORD PTR [esi+20], eax
	jne	SHORT $LN10@attachFunc
; Line 42603
	mov	DWORD PTR _rc$[esp+168], 7
$LN164@attachFunc:
; Line 42609
	mov	ecx, DWORD PTR [edi]
	movzx	eax, BYTE PTR [ebx+340]
	test	eax, eax
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	jl	SHORT $LN165@attachFunc
	cmp	BYTE PTR [ecx+11], 0
	jne	SHORT $LN165@attachFunc
	mov	BYTE PTR [ecx+19], al
$LN165@attachFunc:
; Line 42611
	mov	eax, DWORD PTR _zName$[esp+168]
	test	eax, eax
	jne	SHORT $LN94@attachFunc
	xor	edi, edi
	jmp	SHORT $LN95@attachFunc
$LN10@attachFunc:
; Line 42604
	cmp	BYTE PTR [eax+120], 0
	je	SHORT $LN164@attachFunc
	mov	edx, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [edx+20]
	mov	dl, BYTE PTR [eax+121]
	cmp	dl, BYTE PTR [ecx+121]
	je	SHORT $LN164@attachFunc
; Line 42606
	push	OFFSET ??_C@_0EE@MLIDCBJA@attached?5databases?5must?5use?5the?5@
$LN171@attachFunc:
	lea	eax, DWORD PTR _zErr$[esp+172]
	push	eax
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 12					; 0000000cH
; Line 42607
	jmp	$attach_error$93293
; Line 42611
$LN94@attachFunc:
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL160@attachFunc:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL160@attachFunc
	sub	eax, edx
	lea	ebp, DWORD PTR [eax+1]
	mov	ecx, ebp
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN93@attachFunc
	mov	eax, DWORD PTR _zName$[esp+168]
	push	ebp
	push	eax
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN93@attachFunc:
	mov	ebp, DWORD PTR _zFile$[esp+168]
$LN95@attachFunc:
; Line 42649
	cmp	DWORD PTR _rc$[esp+168], 0
	mov	DWORD PTR [esi], edi
	mov	BYTE PTR [esi+9], 3
	jne	SHORT $LN169@attachFunc
; Line 42650
	mov	eax, DWORD PTR [ebx+48]
	cmp	eax, -1607883113			; a029a697H
	mov	esi, -1254786768			; b5357930H
	jne	SHORT $LN99@attachFunc
	mov	DWORD PTR [ebx+48], -264537850		; f03b7906H
	jmp	SHORT $LN168@attachFunc
$LN99@attachFunc:
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN168@attachFunc
	mov	DWORD PTR [ebx+48], esi
	mov	DWORD PTR [ebx+152], 1
$LN168@attachFunc:
; Line 42651
	lea	ecx, DWORD PTR _zErrDyn$[esp+168]
	push	ecx
	mov	eax, ebx
	call	_sqlite3Init
	add	esp, 4
; Line 42652
	cmp	DWORD PTR [ebx+48], -264537850		; f03b7906H
	mov	DWORD PTR _rc$[esp+168], eax
	jne	SHORT $LN103@attachFunc
	mov	DWORD PTR [ebx+48], -1607883113		; a029a697H
	jmp	SHORT $LN102@attachFunc
$LN103@attachFunc:
	mov	DWORD PTR [ebx+48], esi
	mov	DWORD PTR [ebx+152], 1
$LN102@attachFunc:
; Line 42654
	test	eax, eax
	je	$LN6@attachFunc
$LN169@attachFunc:
; Line 42655
	mov	esi, DWORD PTR [ebx]
; Line 42657
	mov	edx, DWORD PTR [ebx+4]
	sub	esi, 1
	lea	edi, DWORD PTR [esi+esi*2]
	add	edi, edi
	add	edi, edi
	add	edi, edi
	mov	eax, DWORD PTR [edi+edx+4]
	test	eax, eax
	je	SHORT $LN5@attachFunc
; Line 42658
	push	eax
	call	_sqlite3BtreeClose
; Line 42659
	mov	ecx, DWORD PTR [ebx+4]
	add	esp, 4
	xor	eax, eax
	mov	DWORD PTR [edi+ecx+4], eax
; Line 42660
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+edx+20], eax
$LN5@attachFunc:
; Line 42662
	push	0
	call	_sqlite3ResetInternalSchema
	add	esp, 4
; Line 42664
	cmp	DWORD PTR _rc$[esp+168], 7
	mov	DWORD PTR [ebx], esi
	jne	SHORT $LN4@attachFunc
; Line 42665
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN106@attachFunc
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN107@attachFunc
$LN106@attachFunc:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
$LN107@attachFunc:
; Line 42666
	push	OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
; Line 42667
	jmp	$LN171@attachFunc
$LN4@attachFunc:
; Line 42668
	push	ebp
	push	OFFSET ??_C@_0BM@JECJFHOP@unable?5to?5open?5database?3?5?$CFs?$AA@
$LN170@attachFunc:
	lea	ecx, DWORD PTR _zErr$[esp+176]
	push	ecx
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
$attach_error$93293:
; Line 42678
	mov	esi, DWORD PTR _context$GSCopy$[esp+168]
	mov	edi, DWORD PTR _zErrDyn$[esp+168]
	mov	BYTE PTR [esi+76], 1
	add	esi, 8
	test	edi, edi
	push	esi
	je	SHORT $LN2@attachFunc
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN129@attachFunc
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	jmp	SHORT $LN116@attachFunc
$LN129@attachFunc:
	mov	eax, edi
	mov	DWORD PTR [esi+16], edi
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], -1
	mov	WORD PTR [esi+24], 258			; 00000102H
	lea	edx, DWORD PTR [eax+1]
$LL161@attachFunc:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL161@attachFunc
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
$LN116@attachFunc:
; Line 42679
	mov	eax, DWORD PTR _zErrDyn$[esp+168]
	test	eax, eax
	je	SHORT $LN6@attachFunc
	push	eax
	call	_free
	add	esp, 4
; Line 42680
	jmp	SHORT $LN6@attachFunc
$LN2@attachFunc:
; Line 42681
	mov	BYTE PTR _zErr$[esp+299], 0
; Line 42682
	call	_sqlite3VdbeMemRelease
	lea	edx, DWORD PTR _zErr$[esp+172]
	mov	eax, edx
	mov	DWORD PTR [esi+16], edx
	add	esp, 4
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	lea	edx, DWORD PTR [eax+1]
$LL162@attachFunc:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL162@attachFunc
	sub	eax, edx
	mov	DWORD PTR [esi+20], eax
	mov	eax, esi
	mov	WORD PTR [esi+24], 290			; 00000122H
	call	_sqlite3VdbeMemMakeWriteable
$LN6@attachFunc:
; Line 42684
	mov	ecx, DWORD PTR __$ArrayPad$[esp+168]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 152				; 00000098H
	ret	0
_attachFunc ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3AttachFunctions
_TEXT	SEGMENT
_sqlite3AttachFunctions PROC				; COMDAT
; _db$ = esi
; Line 42836
	push	0
	push	0
	push	OFFSET _attachFunc
	push	esi
	push	1
	push	3
	push	OFFSET ??_C@_0O@GJLGHGMJ@sqlite_attach?$AA@
	push	esi
	call	_sqlite3CreateFunc
; Line 42837
	push	0
	push	0
	push	OFFSET _detachFunc
	push	esi
	push	1
	push	1
	push	OFFSET ??_C@_0O@PDAEIIFA@sqlite_detach?$AA@
	push	esi
	call	_sqlite3CreateFunc
	add	esp, 64					; 00000040H
; Line 42839
	ret	0
_sqlite3AttachFunctions ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@OFCALFBN@no?5such?5table?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BF@MMFLDMMA@no?5such?5table?3?5?$CFs?4?$CFs?$AA@ ; `string'
;	COMDAT ??_C@_0BC@OFCALFBN@no?5such?5table?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BC@OFCALFBN@no?5such?5table?3?5?$CFs?$AA@ DB 'no such table: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MMFLDMMA@no?5such?5table?3?5?$CFs?4?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@MMFLDMMA@no?5such?5table?3?5?$CFs?4?$CFs?$AA@ DB 'no such table'
	DB	': %s.%s', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3LocateTable
_TEXT	SEGMENT
_sqlite3LocateTable PROC				; COMDAT
; _pParse$ = ecx
; _zName$ = eax
; _zDbase$ = esi
; Line 43504
	push	ebx
	push	edi
	mov	edi, ecx
	mov	ebx, eax
; Line 43509
	mov	eax, DWORD PTR [edi]
	cmp	BYTE PTR [eax+68], 0
	jne	SHORT $LN4@sqlite3Loc@2
	lea	ecx, DWORD PTR [edi+8]
	push	ecx
	call	_sqlite3Init
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@sqlite3Loc@2
	add	DWORD PTR [edi+24], 1
	mov	DWORD PTR [edi+4], eax
	pop	edi
; Line 43510
	xor	eax, eax
	pop	ebx
; Line 43523
	ret	0
$LN4@sqlite3Loc@2:
; Line 43513
	mov	edx, DWORD PTR [edi]
	push	ebp
	push	esi
	push	edx
	call	_sqlite3FindTable
	mov	ebp, eax
	add	esp, 8
; Line 43514
	test	ebp, ebp
	jne	SHORT $LN3@sqlite3Loc@2
; Line 43515
	test	esi, esi
; Line 43516
	push	ebx
	je	SHORT $LN2@sqlite3Loc@2
	push	esi
	push	OFFSET ??_C@_0BF@MMFLDMMA@no?5such?5table?3?5?$CFs?4?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
; Line 43522
	mov	eax, ebp
	pop	ebp
	mov	BYTE PTR [edi+18], 1
	pop	edi
	pop	ebx
; Line 43523
	ret	0
$LN2@sqlite3Loc@2:
; Line 43518
	push	OFFSET ??_C@_0BC@OFCALFBN@no?5such?5table?3?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 43520
	mov	BYTE PTR [edi+18], 1
$LN3@sqlite3Loc@2:
; Line 43522
	mov	eax, ebp
	pop	ebp
	pop	edi
	pop	ebx
; Line 43523
	ret	0
_sqlite3LocateTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@KDDGKFDH@sqlite_sequence?$AA@		; `string'
PUBLIC	??_C@_0CD@FJHICPML@there?5is?5already?5an?5index?5named?5@ ; `string'
PUBLIC	??_C@_0BI@NMBJKJHP@table?5?$CFT?5already?5exists?$AA@ ; `string'
PUBLIC	??_C@_0CJ@GGBIBJLH@temporary?5table?5name?5must?5be?5unq@ ; `string'
;	COMDAT ??_C@_0BA@KDDGKFDH@sqlite_sequence?$AA@
CONST	SEGMENT
??_C@_0BA@KDDGKFDH@sqlite_sequence?$AA@ DB 'sqlite_sequence', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FJHICPML@there?5is?5already?5an?5index?5named?5@
CONST	SEGMENT
??_C@_0CD@FJHICPML@there?5is?5already?5an?5index?5named?5@ DB 'there is a'
	DB	'lready an index named %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NMBJKJHP@table?5?$CFT?5already?5exists?$AA@
CONST	SEGMENT
??_C@_0BI@NMBJKJHP@table?5?$CFT?5already?5exists?$AA@ DB 'table %T alread'
	DB	'y exists', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GGBIBJLH@temporary?5table?5name?5must?5be?5unq@
CONST	SEGMENT
??_C@_0CJ@GGBIBJLH@temporary?5table?5name?5must?5be?5unq@ DB 'temporary t'
	DB	'able name must be unqualified', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3StartTable
_TEXT	SEGMENT
_zName$ = -16						; size = 4
_iDb$ = -12						; size = 4
_pName$ = -8						; size = 4
tv381 = -4						; size = 4
_pParse$ = 8						; size = 4
_isTemp$ = 12						; size = 4
_isView$ = 16						; size = 4
_isVirtual$ = 20					; size = 4
_noErr$ = 24						; size = 4
_sqlite3StartTable PROC					; COMDAT
; _pName1$ = ecx
; _pName2$ = eax
; Line 43924
	sub	esp, 16					; 00000010H
; Line 43949
	test	eax, eax
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _pParse$[esp+28]
	mov	ebp, DWORD PTR [edi]
	mov	ebx, ecx
	je	SHORT $LN35@sqlite3Sta
	test	DWORD PTR [eax+4], -2			; fffffffeH
	jbe	SHORT $LN35@sqlite3Sta
	mov	esi, eax
	push	ebp
	mov	eax, ebx
	mov	DWORD PTR _pName$[esp+36], esi
	call	_sqlite3FindDb
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN48@sqlite3Sta
	push	ebx
	push	OFFSET ??_C@_0BE@DADMKDCE@unknown?5database?5?$CFT?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
	add	DWORD PTR [edi+24], 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44104
	add	esp, 16					; 00000010H
	ret	0
; Line 43949
$LN35@sqlite3Sta:
	mov	eax, DWORD PTR [ebp+60]
	mov	DWORD PTR _pName$[esp+32], ebx
	mov	esi, ecx
$LN48@sqlite3Sta:
; Line 43950
	test	eax, eax
	mov	ebx, eax
	mov	DWORD PTR _iDb$[esp+32], ebx
	jl	$LN5@sqlite3Sta
; Line 43951
	cmp	DWORD PTR _isTemp$[esp+28], 0
	je	SHORT $LN45@sqlite3Sta
	cmp	eax, 1
	jle	SHORT $LN27@sqlite3Sta
; Line 43953
	push	OFFSET ??_C@_0CJ@GGBIBJLH@temporary?5table?5name?5must?5be?5unq@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44104
	add	esp, 16					; 00000010H
	ret	0
$LN27@sqlite3Sta:
; Line 43956
	mov	DWORD PTR _iDb$[esp+32], 1
	mov	ebx, DWORD PTR _iDb$[esp+32]
$LN45@sqlite3Sta:
; Line 43958
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi+140], eax
	mov	ecx, DWORD PTR [esi+4]
; Line 43959
	mov	eax, esi
	mov	DWORD PTR [edi+144], ecx
	call	_sqlite3NameFromToken
; Line 43960
	test	eax, eax
	mov	DWORD PTR _zName$[esp+32], eax
	je	$LN5@sqlite3Sta
; Line 43961
	mov	esi, eax
	mov	eax, edi
	call	_sqlite3CheckObjectName
	test	eax, eax
	jne	$begin_table_error$93918
; Line 43964
	mov	eax, 1
	cmp	DWORD PTR [ebp+60], eax
	jne	SHORT $LN23@sqlite3Sta
	mov	DWORD PTR _isTemp$[esp+28], eax
$LN23@sqlite3Sta:
; Line 43969
	mov	edx, DWORD PTR [ebp+4]
	lea	ebx, DWORD PTR [ebx+ebx*2]
	add	ebx, ebx
	add	ebx, ebx
	add	ebx, ebx
; Line 43970
	cmp	DWORD PTR _isTemp$[esp+28], eax
	mov	esi, DWORD PTR [ebx+edx]
	mov	DWORD PTR tv381[esp+32], ebx
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN32@sqlite3Sta
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN32@sqlite3Sta:
	push	esi
	push	0
	push	eax
	push	18					; 00000012H
	mov	eax, edi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$begin_table_error$93918
; Line 43973
	cmp	DWORD PTR _isView$[esp+28], eax
	je	SHORT $LN21@sqlite3Sta
; Line 43974
	cmp	DWORD PTR _isTemp$[esp+28], eax
	sete	al
	lea	eax, DWORD PTR [eax+eax+6]
; Line 43979
	jmp	SHORT $LN17@sqlite3Sta
$LN21@sqlite3Sta:
; Line 43980
	cmp	DWORD PTR _isTemp$[esp+28], 0
	setne	al
	lea	eax, DWORD PTR [eax+eax+2]
$LN17@sqlite3Sta:
; Line 43986
	cmp	DWORD PTR _isVirtual$[esp+28], 0
	jne	SHORT $LN15@sqlite3Sta
	mov	ecx, DWORD PTR _zName$[esp+32]
	push	esi
	push	0
	push	ecx
	push	eax
	mov	eax, edi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$begin_table_error$93918
$LN15@sqlite3Sta:
; Line 43999
	cmp	BYTE PTR [edi+188], 0
	jne	$LN44@sqlite3Sta
; Line 44000
	mov	esi, edi
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$begin_table_error$93918
; Line 44003
	mov	edx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [edx+ebx]
	mov	ebx, DWORD PTR _zName$[esp+32]
	push	eax
	push	ebp
	call	_sqlite3FindTable
	add	esp, 8
; Line 44004
	test	eax, eax
	je	SHORT $LN12@sqlite3Sta
; Line 44005
	cmp	DWORD PTR _noErr$[esp+28], 0
	jne	$begin_table_error$93918
; Line 44006
	mov	ecx, DWORD PTR _pName$[esp+32]
	push	ecx
	push	OFFSET ??_C@_0BI@NMBJKJHP@table?5?$CFT?5already?5exists?$AA@
	call	_sqlite3ErrorMsg
; Line 44102
	mov	edx, ebx
	add	esp, 8
	push	edx
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44104
	add	esp, 16					; 00000010H
	ret	0
$LN12@sqlite3Sta:
; Line 44010
	push	0
	push	ebp
	call	_sqlite3FindIndex
	add	esp, 8
	test	eax, eax
	je	SHORT $LN44@sqlite3Sta
	cmp	DWORD PTR _iDb$[esp+32], 0
	je	SHORT $LN9@sqlite3Sta
	cmp	BYTE PTR [ebp+68], 0
	jne	SHORT $LN44@sqlite3Sta
$LN9@sqlite3Sta:
; Line 44011
	push	ebx
	push	OFFSET ??_C@_0CD@FJHICPML@there?5is?5already?5an?5index?5named?5@
	mov	edi, esi
	call	_sqlite3ErrorMsg
; Line 44102
	mov	edx, DWORD PTR _zName$[esp+40]
	add	esp, 8
	push	edx
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44104
	add	esp, 16					; 00000010H
	ret	0
$LN44@sqlite3Sta:
; Line 44016
	mov	edi, 80					; 00000050H
	call	_sqlite3Malloc
	mov	ebx, eax
; Line 44017
	test	ebx, ebx
	jne	SHORT $LN8@sqlite3Sta
; Line 44018
	mov	eax, DWORD PTR _pParse$[esp+28]
; Line 44019
	add	DWORD PTR [eax+24], 1
	mov	DWORD PTR [eax+4], 7
$begin_table_error$93918:
; Line 44102
	mov	edx, DWORD PTR _zName$[esp+32]
	push	edx
	call	_free
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44104
	add	esp, 16					; 00000010H
	ret	0
$LN8@sqlite3Sta:
; Line 44022
	mov	esi, DWORD PTR _zName$[esp+32]
; Line 44024
	mov	ecx, DWORD PTR tv381[esp+32]
; Line 44026
	mov	edi, DWORD PTR _pParse$[esp+28]
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+12], -1
	mov	eax, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR [eax+ecx+20]
	mov	DWORD PTR [ebx+76], edx
	mov	DWORD PTR [ebx+28], 1
	mov	eax, DWORD PTR [edi+164]
	test	eax, eax
	je	SHORT $LN7@sqlite3Sta
	push	eax
	call	_sqlite3DeleteTable
	add	esp, 4
$LN7@sqlite3Sta:
; Line 44034
	cmp	BYTE PTR [edi+19], 0
	mov	DWORD PTR [edi+164], ebx
	jne	SHORT $LN6@sqlite3Sta
	mov	edi, OFFSET ??_C@_0BA@KDDGKFDH@sqlite_sequence?$AA@
	mov	ecx, 16					; 00000010H
	xor	eax, eax
	repe cmpsb
; Line 44035
	mov	edi, DWORD PTR _pParse$[esp+28]
	jne	SHORT $LN6@sqlite3Sta
	mov	ecx, DWORD PTR [ebx+76]
	mov	DWORD PTR [ecx+116], ebx
$LN6@sqlite3Sta:
; Line 44047
	cmp	BYTE PTR [ebp+68], 0
	jne	$LN5@sqlite3Sta
	mov	esi, edi
	call	_sqlite3GetVdbe
	mov	esi, eax
	test	esi, esi
	je	$LN5@sqlite3Sta
; Line 44050
	mov	ebx, DWORD PTR _iDb$[esp+32]
	push	0
	mov	eax, ebx
	mov	ecx, edi
	call	_sqlite3BeginWriteOperation
	add	esp, 4
; Line 44053
	cmp	DWORD PTR _isVirtual$[esp+28], 0
	je	SHORT $LN4@sqlite3Sta
; Line 44054
	push	0
	push	0
	push	129					; 00000081H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN4@sqlite3Sta:
; Line 44061
	push	1
	push	ebx
	push	115					; 00000073H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 44062
	mov	eax, esi
	call	_sqlite3VdbeMakeLabel
	mov	edi, eax
; Line 44063
	push	edi
	push	0
	push	10					; 0000000aH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 44065
	mov	edx, DWORD PTR [ebp+8]
	and	edx, 32768				; 00008000H
	neg	edx
	sbb	edx, edx
	and	edx, -3					; fffffffdH
; Line 44066
	push	0
	add	edx, 4
	push	edx
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 44067
	push	1
	push	ebx
	push	4
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 44068
	mov	eax, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR [eax+20]
	movzx	edx, BYTE PTR [ecx+121]
	push	0
	push	edx
	push	47					; 0000002fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 44069
	push	4
	push	ebx
	push	4
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 72					; 00000048H
; Line 44070
	mov	edx, edi
	mov	ecx, esi
	call	_sqlite3VdbeResolveLabel
; Line 44081
	cmp	DWORD PTR _isView$[esp+28], 0
	jne	SHORT $LN2@sqlite3Sta
	cmp	DWORD PTR _isVirtual$[esp+28], 0
	jne	SHORT $LN2@sqlite3Sta
; Line 44086
	push	0
	push	ebx
	push	51					; 00000033H
	jmp	SHORT $LN49@sqlite3Sta
$LN2@sqlite3Sta:
; Line 44082
	push	0
	push	0
	push	47					; 0000002fH
$LN49@sqlite3Sta:
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 44088
	push	ebx
	mov	ebx, DWORD PTR _pParse$[esp+32]
	call	_sqlite3OpenMasterTable
; Line 44089
	push	0
	push	0
	push	23					; 00000017H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 44090
	push	0
	push	0
	push	94					; 0000005eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 44091
	push	0
	push	0
	push	122					; 0000007aH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 44092
	push	8
	push	0
	push	113					; 00000071H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 44093
	push	0
	push	0
	push	30					; 0000001eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 64					; 00000040H
; Line 44094
	push	0
	push	1
	push	103					; 00000067H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN5@sqlite3Sta:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44104
	add	esp, 16					; 00000010H
	ret	0
_sqlite3StartTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@IILCLBDE@DELETE?5FROM?5?$CFQ?4?$CFs?5WHERE?5name?$DN?$CFQ?$AA@ ; `string'
PUBLIC	??_C@_0EJ@MFMNFJHB@index?5associated?5with?5UNIQUE?5or?5@ ; `string'
PUBLIC	??_C@_0BC@JBPCAJCH@no?5such?5index?3?5?$CFS?$AA@ ; `string'
;	COMDAT ??_C@_0CA@IILCLBDE@DELETE?5FROM?5?$CFQ?4?$CFs?5WHERE?5name?$DN?$CFQ?$AA@
CONST	SEGMENT
??_C@_0CA@IILCLBDE@DELETE?5FROM?5?$CFQ?4?$CFs?5WHERE?5name?$DN?$CFQ?$AA@ DB 'D'
	DB	'ELETE FROM %Q.%s WHERE name=%Q', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@MFMNFJHB@index?5associated?5with?5UNIQUE?5or?5@
CONST	SEGMENT
??_C@_0EJ@MFMNFJHB@index?5associated?5with?5UNIQUE?5or?5@ DB 'index assoc'
	DB	'iated with UNIQUE or PRIMARY KEY constraint cannot be dropped'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBPCAJCH@no?5such?5index?3?5?$CFS?$AA@
CONST	SEGMENT
??_C@_0BC@JBPCAJCH@no?5such?5index?3?5?$CFS?$AA@ DB 'no such index: %S', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3DropIndex
_TEXT	SEGMENT
tv225 = -20						; size = 4
_code$94743 = -16					; size = 4
_zDb$94745 = -12					; size = 4
_v$ = -8						; size = 4
_pTab$94744 = -8					; size = 4
_pIndex$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pName$ = 12						; size = 4
_ifExists$ = 16						; size = 4
_sqlite3DropIndex PROC					; COMDAT
; Line 45933
	sub	esp, 20					; 00000014H
	push	ebp
	push	esi
; Line 45936
	mov	esi, DWORD PTR _pParse$[esp+24]
; Line 45939
	cmp	DWORD PTR [esi+24], 0
	mov	ebp, DWORD PTR [esi]
	mov	DWORD PTR tv225[esp+28], ebp
	jne	$exit_drop_index$94735
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN10@sqlite3Dro@3
	cmp	DWORD PTR _inMutex, 0
	jg	$exit_drop_index$94735
$LN10@sqlite3Dro@3:
; Line 45943
	cmp	BYTE PTR [ebp+68], 0
	jne	SHORT $LN23@sqlite3Dro@3
	lea	eax, DWORD PTR [esi+8]
	push	eax
	mov	eax, ebp
	call	_sqlite3Init
	add	esp, 4
	test	eax, eax
	je	SHORT $LN23@sqlite3Dro@3
; Line 45990
	mov	ecx, DWORD PTR _pName$[esp+24]
	add	DWORD PTR [esi+24], 1
	push	ecx
	mov	DWORD PTR [esi+4], eax
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	esi
	pop	ebp
; Line 45991
	add	esp, 20					; 00000014H
	ret	0
$LN23@sqlite3Dro@3:
; Line 45946
	mov	eax, DWORD PTR _pName$[esp+24]
	mov	ecx, DWORD PTR [eax+8]
	push	ebx
	mov	ebx, DWORD PTR [eax+12]
	push	edi
	push	ecx
	push	ebp
	call	_sqlite3FindIndex
	mov	edi, eax
	add	esp, 8
; Line 45947
	test	edi, edi
	mov	DWORD PTR _pIndex$[esp+36], edi
	jne	SHORT $LN7@sqlite3Dro@3
; Line 45948
	cmp	DWORD PTR _ifExists$[esp+32], eax
	jne	SHORT $LN25@sqlite3Dro@3
; Line 45949
	mov	edx, DWORD PTR _pName$[esp+32]
	push	eax
	push	edx
	push	OFFSET ??_C@_0BC@JBPCAJCH@no?5such?5index?3?5?$CFS?$AA@
	mov	edi, esi
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
$LN25@sqlite3Dro@3:
; Line 45990
	mov	ecx, DWORD PTR _pName$[esp+32]
	pop	edi
	pop	ebx
	push	ecx
	mov	BYTE PTR [esi+18], 1
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	esi
	pop	ebp
; Line 45991
	add	esp, 20					; 00000014H
	ret	0
$LN7@sqlite3Dro@3:
; Line 45954
	cmp	BYTE PTR [edi+25], 0
	je	SHORT $LN5@sqlite3Dro@3
; Line 45956
	push	0
	push	OFFSET ??_C@_0EJ@MFMNFJHB@index?5associated?5with?5UNIQUE?5or?5@
	mov	edi, esi
	call	_sqlite3ErrorMsg
; Line 45990
	mov	ecx, DWORD PTR _pName$[esp+40]
	add	esp, 8
	pop	edi
	pop	ebx
	push	ecx
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	esi
	pop	ebp
; Line 45991
	add	esp, 20					; 00000014H
	ret	0
$LN5@sqlite3Dro@3:
; Line 45959
	mov	esi, DWORD PTR [edi+36]
	mov	ecx, ebp
	call	_sqlite3SchemaToIndex
; Line 45964
	mov	ecx, DWORD PTR tv225[esp+36]
	mov	edx, DWORD PTR [ecx+4]
	mov	ebp, eax
	mov	eax, DWORD PTR [edi+16]
	lea	ebx, DWORD PTR [ebp+ebp*2]
	add	ebx, ebx
	add	ebx, ebx
	add	ebx, ebx
; Line 45965
	cmp	ebp, 1
	mov	ecx, DWORD PTR [ebx+edx]
	mov	DWORD PTR _pTab$94744[esp+36], eax
	mov	DWORD PTR _code$94743[esp+36], 10	; 0000000aH
	mov	DWORD PTR _zDb$94745[esp+36], ecx
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN14@sqlite3Dro@3
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN14@sqlite3Dro@3:
; Line 45966
	mov	esi, DWORD PTR _pParse$[esp+32]
	push	ecx
	push	0
	push	eax
	push	9
	mov	eax, esi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN27@sqlite3Dro@3
; Line 45969
	test	ebp, ebp
	mov	eax, 12					; 0000000cH
	jne	SHORT $LN3@sqlite3Dro@3
	mov	eax, DWORD PTR _code$94743[esp+36]
$LN3@sqlite3Dro@3:
; Line 45970
	mov	ecx, DWORD PTR _zDb$94745[esp+36]
	mov	edx, DWORD PTR _pTab$94744[esp+36]
	push	ecx
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edi]
	push	ecx
	push	edx
	push	eax
	mov	eax, esi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN27@sqlite3Dro@3
; Line 45977
	call	_sqlite3GetVdbe
; Line 45978
	test	eax, eax
	mov	DWORD PTR _v$[esp+36], eax
	je	SHORT $LN27@sqlite3Dro@3
; Line 45983
	cmp	ebp, 1
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN16@sqlite3Dro@3
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN16@sqlite3Dro@3:
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR tv225[esp+36]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+ebx]
	push	ecx
	push	OFFSET ??_C@_0CA@IILCLBDE@DELETE?5FROM?5?$CFQ?4?$CFs?5WHERE?5name?$DN?$CFQ?$AA@
	mov	ebx, esi
	call	_sqlite3NestedParse
; Line 45984
	mov	edi, DWORD PTR _v$[esp+52]
	mov	ecx, DWORD PTR tv225[esp+52]
	mov	esi, ebp
	call	_sqlite3ChangeCookie
; Line 45985
	mov	ebx, DWORD PTR _pIndex$[esp+52]
	mov	edx, DWORD PTR [ebx+20]
	mov	eax, DWORD PTR _pParse$[esp+48]
	push	edx
	call	_destroyRootPage
; Line 45986
	mov	eax, DWORD PTR [ebx]
	push	0
	push	eax
	xor	eax, eax
	mov	ecx, ebp
	lea	edx, DWORD PTR [eax+63]
	call	_sqlite3VdbeOp3
	add	esp, 28					; 0000001cH
$LN27@sqlite3Dro@3:
	pop	edi
	pop	ebx
$exit_drop_index$94735:
; Line 45990
	mov	ecx, DWORD PTR _pName$[esp+24]
	push	ecx
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	esi
	pop	ebp
; Line 45991
	add	esp, 20					; 00000014H
	ret	0
_sqlite3DropIndex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@PMBDNHDC@unable?5to?5identify?5the?5object?5to@ ; `string'
;	COMDAT ??_C@_0CO@PMBDNHDC@unable?5to?5identify?5the?5object?5to@
CONST	SEGMENT
??_C@_0CO@PMBDNHDC@unable?5to?5identify?5the?5object?5to@ DB 'unable to i'
	DB	'dentify the object to be reindexed', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Reindex
_TEXT	SEGMENT
_zDb$ = 8						; size = 4
_pObjName$ = 8						; size = 4
_pParse$ = 8						; size = 4
_pName2$ = 12						; size = 4
_sqlite3Reindex PROC					; COMDAT
; _pName1$ = eax
; Line 46493
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp]
	push	esi
	push	edi
; Line 46500
	mov	edi, DWORD PTR [ebp]
; Line 46505
	cmp	BYTE PTR [edi+68], 0
	mov	esi, eax
	jne	SHORT $LN25@sqlite3Rei
	lea	eax, DWORD PTR [ebp+8]
	push	eax
	mov	eax, edi
	call	_sqlite3Init
	add	esp, 4
	test	eax, eax
	je	SHORT $LN25@sqlite3Rei
	add	DWORD PTR [ebp+24], 1
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp+4], eax
	pop	ebp
; Line 46543
	ret	0
$LN25@sqlite3Rei:
; Line 46509
	test	esi, esi
	je	$LN10@sqlite3Rei
	mov	edx, DWORD PTR [esi]
	test	edx, edx
	je	$LN10@sqlite3Rei
; Line 46512
	mov	ecx, DWORD PTR _pName2$[esp+8]
	test	ecx, ecx
	push	ebx
	je	SHORT $LN7@sqlite3Rei
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN6@sqlite3Rei
$LN7@sqlite3Rei:
; Line 46514
	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [ecx+20]
	mov	bl, BYTE PTR [ecx+121]
	push	0
	push	edx
	shr	eax, 1
	push	edi
	call	_findCollSeqEntry
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN26@sqlite3Rei
	movzx	ecx, bl
	lea	edx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax+edx*4-20]
; Line 46515
	test	eax, eax
	je	SHORT $LN26@sqlite3Rei
; Line 46516
	mov	edi, DWORD PTR [esi+4]
	mov	ebx, DWORD PTR [esi]
	shr	edi, 1
	call	_sqlite3StrNDup
	mov	esi, eax
; Line 46517
	test	esi, esi
	je	SHORT $LN27@sqlite3Rei
; Line 46518
	push	esi
	mov	eax, ebp
	call	_reindexDatabases
; Line 46519
	push	esi
	call	_sqlite3FreeX
	add	esp, 8
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 46543
	ret	0
$LN26@sqlite3Rei:
; Line 46515
	mov	ecx, DWORD PTR _pName2$[esp+12]
$LN6@sqlite3Rei:
; Line 46524
	lea	edx, DWORD PTR _pObjName$[esp+12]
	mov	eax, ebp
	call	_sqlite3TwoPartName
	mov	esi, eax
; Line 46525
	test	esi, esi
	jl	SHORT $LN27@sqlite3Rei
; Line 46526
	mov	eax, DWORD PTR _pObjName$[esp+12]
	call	_sqlite3NameFromToken
	mov	ebx, eax
; Line 46527
	test	ebx, ebx
	je	SHORT $LN27@sqlite3Rei
; Line 46528
	mov	ecx, DWORD PTR [edi+4]
	lea	eax, DWORD PTR [esi+esi*2]
	mov	eax, DWORD PTR [ecx+eax*8]
; Line 46529
	push	eax
	push	edi
	mov	DWORD PTR _zDb$[esp+20], eax
	call	_sqlite3FindTable
	add	esp, 8
; Line 46530
	test	eax, eax
	je	SHORT $LN2@sqlite3Rei
; Line 46531
	push	0
	push	eax
	mov	edi, ebp
	call	_reindexTable
; Line 46532
	push	ebx
	call	_sqlite3FreeX
	add	esp, 12					; 0000000cH
$LN27@sqlite3Rei:
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 46543
	ret	0
$LN2@sqlite3Rei:
; Line 46535
	mov	edx, DWORD PTR _zDb$[esp+12]
	push	edx
	push	edi
	call	_sqlite3FindIndex
; Line 46536
	push	ebx
	mov	edi, eax
	call	_sqlite3FreeX
	add	esp, 12					; 0000000cH
; Line 46537
	test	edi, edi
	je	SHORT $LN1@sqlite3Rei
; Line 46538
	push	0
	mov	eax, esi
	mov	ecx, ebp
	call	_sqlite3BeginWriteOperation
; Line 46539
	push	-1
	push	edi
	mov	eax, ebp
	call	_sqlite3RefillIndex
	add	esp, 12					; 0000000cH
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 46543
	ret	0
$LN1@sqlite3Rei:
; Line 46542
	push	OFFSET ??_C@_0CO@PMBDNHDC@unable?5to?5identify?5the?5object?5to@
	mov	edi, ebp
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 46543
	ret	0
$LN10@sqlite3Rei:
; Line 46510
	push	0
	mov	eax, ebp
	call	_reindexDatabases
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
; Line 46543
	ret	0
_sqlite3Reindex ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3SrcListLookup
_TEXT	SEGMENT
_pParse$ = 8						; size = 4
_pSrc$ = 12						; size = 4
_sqlite3SrcListLookup PROC				; COMDAT
; Line 47246
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pSrc$[esp+4]
; Line 47247
	xor	eax, eax
; Line 47250
	xor	ebx, ebx
	cmp	WORD PTR [ebp], ax
	push	edi
	lea	edi, DWORD PTR [ebp+8]
	jle	SHORT $LN2@sqlite3Src@7
	push	esi
$LL4@sqlite3Src@7:
; Line 47251
	mov	esi, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR _pParse$[esp+12]
	call	_sqlite3LocateTable
	mov	esi, eax
; Line 47252
	mov	eax, DWORD PTR [edi+12]
	push	eax
	call	_sqlite3DeleteTable
	add	esp, 4
; Line 47254
	test	esi, esi
	mov	DWORD PTR [edi+12], esi
	je	SHORT $LN3@sqlite3Src@7
; Line 47255
	add	DWORD PTR [esi+28], 1
$LN3@sqlite3Src@7:
; Line 47250
	movsx	ecx, WORD PTR [ebp]
	add	ebx, 1
	add	edi, 48					; 00000030H
	cmp	ebx, ecx
	jl	SHORT $LL4@sqlite3Src@7
; Line 47258
	mov	eax, esi
	pop	esi
$LN2@sqlite3Src@7:
	pop	edi
	pop	ebp
	pop	ebx
; Line 47259
	ret	0
_sqlite3SrcListLookup ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3GenerateRowDelete
_TEXT	SEGMENT
_addr$ = -4						; size = 4
_pTab$ = 8						; size = 4
_sqlite3GenerateRowDelete PROC				; COMDAT
; _v$ = ecx
; _iCur$ = eax
; _count$ = ebx
; Line 47620
	push	ecx
	push	ebp
	mov	ebp, DWORD PTR _pTab$[esp+4]
	push	esi
	push	edi
	mov	esi, eax
; Line 47622
	push	0
	mov	edi, ecx
	push	esi
	push	44					; 0000002cH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	DWORD PTR _addr$[esp+28], eax
; Line 47623
	push	0
	push	esi
	mov	eax, ebp
	mov	ecx, edi
	call	_sqlite3GenerateRowIndexDelete
; Line 47624
	xor	eax, eax
	test	ebx, ebx
	setne	al
	push	eax
	push	esi
	push	92					; 0000005cH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 32					; 00000020H
; Line 47625
	test	ebx, ebx
	je	SHORT $LN19@sqlite3Gen@3
; Line 47626
	test	edi, edi
	mov	ebp, DWORD PTR [ebp]
	je	SHORT $LN31@sqlite3Gen@3
	mov	esi, DWORD PTR [edi+20]
	test	esi, esi
	je	SHORT $LN31@sqlite3Gen@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN17@sqlite3Gen@3
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN31@sqlite3Gen@3
$LN17@sqlite3Gen@3:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, 1
	js	SHORT $LN19@sqlite3Gen@3
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [esi+ecx*4+16]
	lea	esi, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	xor	eax, eax
	cmp	ebp, eax
	mov	DWORD PTR [esi+12], eax
	jne	SHORT $LN32@sqlite3Gen@3
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	jmp	SHORT $LN19@sqlite3Gen@3
$LN32@sqlite3Gen@3:
	mov	DWORD PTR [esi+12], ebp
	mov	DWORD PTR [esi+16], -2			; fffffffeH
	jmp	SHORT $LN19@sqlite3Gen@3
$LN31@sqlite3Gen@3:
	mov	ecx, ebp
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN19@sqlite3Gen@3:
; Line 47628
	test	edi, edi
	je	SHORT $LN28@sqlite3Gen@3
	mov	eax, DWORD PTR _addr$[esp+16]
	test	eax, eax
	jl	SHORT $LN28@sqlite3Gen@3
	mov	ecx, DWORD PTR [edi+12]
	cmp	ecx, eax
	jle	SHORT $LN28@sqlite3Gen@3
	mov	edi, DWORD PTR [edi+20]
	test	edi, edi
	je	SHORT $LN28@sqlite3Gen@3
	lea	edx, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [edi+edx*4+8], ecx
$LN28@sqlite3Gen@3:
	pop	edi
	pop	esi
	pop	ebp
; Line 47629
	pop	ecx
	ret	0
_sqlite3GenerateRowDelete ENDP
_TEXT	ENDS
PUBLIC	??_C@_05JGHLFIHG@MATCH?$AA@			; `string'
;	COMDAT ??_C@_05JGHLFIHG@MATCH?$AA@
CONST	SEGMENT
??_C@_05JGHLFIHG@MATCH?$AA@ DB 'MATCH', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3RegisterBuiltinFunctions
_TEXT	SEGMENT
_sqlite3RegisterBuiltinFunctions PROC			; COMDAT
; _db$ = esi
; Line 48987
	push	ebx
	push	edi
; Line 49062
	xor	edi, edi
$LL49@sqlite3Reg@4:
; Line 49064
	mov	al, BYTE PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+5]
; Line 49065
	cmp	al, 255					; 000000ffH
	jne	SHORT $LN9@sqlite3Reg@4
; Line 49066
	mov	eax, esi
; Line 49067
	jmp	SHORT $LN8@sqlite3Reg@4
$LN9@sqlite3Reg@4:
; Line 49068
	movzx	eax, al
$LN8@sqlite3Reg@4:
; Line 49071
	mov	ecx, DWORD PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+8]
	movzx	edx, BYTE PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+6]
	push	0
	push	0
	push	ecx
	mov	ecx, DWORD PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi]
	push	eax
	movsx	eax, BYTE PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+4]
	push	edx
	push	eax
	push	ecx
	push	esi
	call	_sqlite3CreateFunc
	add	esp, 32					; 00000020H
; Line 49072
	cmp	BYTE PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+7], 0
	je	SHORT $LN11@sqlite3Reg@4
; Line 49074
	mov	ecx, DWORD PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi]
	mov	eax, ecx
	lea	ebx, DWORD PTR [eax+1]
$LL45@sqlite3Reg@4:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL45@sqlite3Reg@4
	movzx	edx, BYTE PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+6]
	push	0
	push	edx
	movsx	edx, BYTE PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+4]
	sub	eax, ebx
	push	edx
	mov	ebx, eax
	push	ecx
	mov	eax, esi
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
; Line 49075
	test	eax, eax
	je	SHORT $LN11@sqlite3Reg@4
	cmp	BYTE PTR ?aFuncs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+7], 0
	je	SHORT $LN11@sqlite3Reg@4
; Line 49076
	mov	BYTE PTR [eax+3], 1
$LN11@sqlite3Reg@4:
; Line 49062
	add	edi, 12					; 0000000cH
	cmp	edi, 420				; 000001a4H
	jb	$LL49@sqlite3Reg@4
; Line 49081
	xor	edi, edi
$LL17@sqlite3Reg@4:
	mov	eax, DWORD PTR ?aFuncs@?1??sqlite3AlterFunctions@@9@9[edi+8]
	movsx	ecx, BYTE PTR ?aFuncs@?1??sqlite3AlterFunctions@@9@9[edi+4]
	mov	edx, DWORD PTR ?aFuncs@?1??sqlite3AlterFunctions@@9@9[edi]
	push	0
	push	0
	push	eax
	push	0
	push	1
	push	ecx
	push	edx
	push	esi
	call	_sqlite3CreateFunc
	add	edi, 12					; 0000000cH
	add	esp, 32					; 00000020H
	cmp	edi, 24					; 00000018H
	jb	SHORT $LL17@sqlite3Reg@4
; Line 49084
	push	0
	push	0
	push	OFFSET _attachFunc
	push	esi
	push	1
	push	3
	push	OFFSET ??_C@_0O@GJLGHGMJ@sqlite_attach?$AA@
	push	esi
	call	_sqlite3CreateFunc
	push	0
	push	0
	push	OFFSET _detachFunc
	push	esi
	push	1
	push	1
	push	OFFSET ??_C@_0O@PDAEIIFA@sqlite_detach?$AA@
	push	esi
	call	_sqlite3CreateFunc
	add	esp, 64					; 00000040H
; Line 49086
	xor	edi, edi
	npad	9
$LL50@sqlite3Reg@4:
; Line 49089
	mov	eax, DWORD PTR ?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+12]
	mov	ecx, DWORD PTR ?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+8]
	movzx	edx, BYTE PTR ?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+5]
	push	eax
	movsx	eax, BYTE PTR ?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+4]
	push	ecx
	mov	ecx, DWORD PTR ?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi]
	push	0
	push	edx
	push	1
	push	eax
	push	ecx
	push	esi
	call	_sqlite3CreateFunc
	add	esp, 32					; 00000020H
; Line 49090
	cmp	BYTE PTR ?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+6], 0
	je	SHORT $LN4@sqlite3Reg@4
; Line 49092
	mov	ecx, DWORD PTR ?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi]
	mov	eax, ecx
	lea	ebx, DWORD PTR [eax+1]
$LL46@sqlite3Reg@4:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL46@sqlite3Reg@4
	movsx	edx, BYTE PTR ?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+4]
	push	0
	sub	eax, ebx
	push	1
	push	edx
	mov	ebx, eax
	push	ecx
	mov	eax, esi
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
; Line 49093
	test	eax, eax
	je	SHORT $LN4@sqlite3Reg@4
	cmp	BYTE PTR ?aAggs@?1??sqlite3RegisterBuiltinFunctions@@9@9[edi+6], 0
	je	SHORT $LN4@sqlite3Reg@4
; Line 49094
	mov	BYTE PTR [eax+3], 1
$LN4@sqlite3Reg@4:
; Line 49086
	add	edi, 16					; 00000010H
	cmp	edi, 112				; 00000070H
	jb	$LL50@sqlite3Reg@4
; Line 49098
	xor	edi, edi
	npad	7
$LL24@sqlite3Reg@4:
	mov	eax, DWORD PTR ?aFuncs@?1??sqlite3RegisterDateTimeFunctions@@9@9[edi+8]
	mov	ecx, DWORD PTR ?aFuncs@?1??sqlite3RegisterDateTimeFunctions@@9@9[edi+4]
	mov	edx, DWORD PTR ?aFuncs@?1??sqlite3RegisterDateTimeFunctions@@9@9[edi]
	push	0
	push	0
	push	eax
	push	0
	push	1
	push	ecx
	push	edx
	push	esi
	call	_sqlite3CreateFunc
	add	edi, 12					; 0000000cH
	add	esp, 32					; 00000020H
	cmp	edi, 96					; 00000060H
	jb	SHORT $LL24@sqlite3Reg@4
; Line 49099
	push	2
	push	OFFSET ??_C@_05JGHLFIHG@MATCH?$AA@
	push	esi
	call	_sqlite3_overload_function
; Line 49106
	push	0
	push	0
	push	OFFSET _likeFunc
	push	OFFSET _likeInfoNorm
	push	1
	push	2
	push	OFFSET ??_C@_04HPDJJBAE@like?$AA@
	push	esi
	call	_sqlite3CreateFunc
	push	0
	push	0
	push	OFFSET _likeFunc
	push	OFFSET _likeInfoNorm
	push	1
	push	3
	push	OFFSET ??_C@_04HPDJJBAE@like?$AA@
	push	esi
	call	_sqlite3CreateFunc
	add	esp, 76					; 0000004cH
	push	0
	push	0
	push	OFFSET _likeFunc
	push	OFFSET _globInfo
	push	1
	push	2
	push	OFFSET ??_C@_04HHHPGODM@glob?$AA@
	push	esi
	call	_sqlite3CreateFunc
	push	0
	push	1
	push	2
	push	OFFSET ??_C@_04HHHPGODM@glob?$AA@
	mov	ebx, 4
	mov	eax, esi
	call	_sqlite3FindFunction
	add	esp, 48					; 00000030H
	test	eax, eax
	je	SHORT $LN31@sqlite3Reg@4
	mov	BYTE PTR [eax+4], 3
$LN31@sqlite3Reg@4:
	push	0
	push	1
	push	2
	push	OFFSET ??_C@_04HPDJJBAE@like?$AA@
	mov	eax, esi
	call	_sqlite3FindFunction
	add	esp, 16					; 00000010H
	test	eax, eax
	pop	edi
	pop	ebx
	je	SHORT $LN34@sqlite3Reg@4
	mov	BYTE PTR [eax+4], 1
$LN34@sqlite3Reg@4:
; Line 49108
	ret	0
_sqlite3RegisterBuiltinFunctions ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@GKKFBNCL@?5is?5not?5unique?$AA@	; `string'
PUBLIC	??_C@_0BA@IJKPAPH@?5are?5not?5unique?$AA@	; `string'
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_07OJMCPGAK@column?5?$AA@			; `string'
PUBLIC	??_C@_08BLECJPKD@columns?5?$AA@			; `string'
PUBLIC	??_C@_0BL@MIGFAHKG@PRIMARY?5KEY?5must?5be?5unique?$AA@ ; `string'
PUBLIC	??_C@_0BB@CJJGLMJD@?5may?5not?5be?5NULL?$AA@	; `string'
PUBLIC	_pTab$GSCopy$
PUBLIC	_pParse$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0P@GKKFBNCL@?5is?5not?5unique?$AA@
CONST	SEGMENT
??_C@_0P@GKKFBNCL@?5is?5not?5unique?$AA@ DB ' is not unique', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IJKPAPH@?5are?5not?5unique?$AA@
CONST	SEGMENT
??_C@_0BA@IJKPAPH@?5are?5not?5unique?$AA@ DB ' are not unique', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OJMCPGAK@column?5?$AA@
CONST	SEGMENT
??_C@_07OJMCPGAK@column?5?$AA@ DB 'column ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BLECJPKD@columns?5?$AA@
CONST	SEGMENT
??_C@_08BLECJPKD@columns?5?$AA@ DB 'columns ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MIGFAHKG@PRIMARY?5KEY?5must?5be?5unique?$AA@
CONST	SEGMENT
??_C@_0BL@MIGFAHKG@PRIMARY?5KEY?5must?5be?5unique?$AA@ DB 'PRIMARY KEY mu'
	DB	'st be unique', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CJJGLMJD@?5may?5not?5be?5NULL?$AA@
CONST	SEGMENT
??_C@_0BB@CJJGLMJD@?5may?5not?5be?5NULL?$AA@ DB ' may not be NULL', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3GenerateConstraintChecks
_TEXT	SEGMENT
tv2702 = -252						; size = 4
_pIdx$ = -252						; size = 4
_nCol$ = -248						; size = 4
tv2371 = -244						; size = 4
tv1785 = -244						; size = 4
$T139088 = -244						; size = 4
$T138935 = -244						; size = 4
_pParse$GSCopy$ = -244					; size = 4
_n2$96710 = -244					; size = 4
_idx$96691 = -244					; size = 4
tv2672 = -240						; size = 4
_extra$ = -240						; size = 4
_onError$ = -236					; size = 4
_i$ = -236						; size = 4
_pTab$GSCopy$ = -232					; size = 4
_jumpInst2$ = -228					; size = 4
_addr$ = -228						; size = 4
_hasTwoRowids$ = -224					; size = 4
_iCur$ = -220						; size = 4
_zMsg$96655 = -220					; size = 4
_jumpInst1$ = -216					; size = 4
_seenReplace$ = -212					; size = 4
_zCol$96717 = -208					; size = 4
_zErrMsg$96711 = -204					; size = 200
__$ArrayPad$ = -4					; size = 4
_pParse$ = 8						; size = 4
_pTab$ = 12						; size = 4
_base$ = 16						; size = 4
_aIdxUsed$ = 20						; size = 4
_rowidChng$ = 24					; size = 4
_isUpdate$ = 28						; size = 4
_overrideError$ = 32					; size = 4
_ignoreDest$ = 36					; size = 4
_sqlite3GenerateConstraintChecks PROC			; COMDAT
; Line 50112
	sub	esp, 252				; 000000fcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+252], eax
; Line 50123
	mov	eax, DWORD PTR _pTab$[esp+248]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+256]
	xor	ebx, ebx
	cmp	DWORD PTR _isUpdate$[esp+256], ebx
	push	esi
	push	edi
	mov	DWORD PTR _pParse$GSCopy$[esp+268], ebp
	mov	DWORD PTR _pTab$GSCopy$[esp+268], eax
	mov	DWORD PTR _seenReplace$[esp+268], ebx
	mov	DWORD PTR _jumpInst1$[esp+268], ebx
	je	SHORT $LN63@sqlite3Gen@4
	cmp	DWORD PTR _rowidChng$[esp+264], ebx
	mov	DWORD PTR _hasTwoRowids$[esp+268], 1
	jne	SHORT $LN64@sqlite3Gen@4
$LN63@sqlite3Gen@4:
	mov	DWORD PTR _hasTwoRowids$[esp+268], ebx
$LN64@sqlite3Gen@4:
; Line 50125
	mov	esi, DWORD PTR [ebp+12]
	cmp	esi, ebx
	jne	SHORT $LN71@sqlite3Gen@4
	mov	edi, DWORD PTR [ebp]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [ebp+12], eax
	mov	esi, eax
$LN71@sqlite3Gen@4:
; Line 50128
	mov	ecx, DWORD PTR _pTab$GSCopy$[esp+268]
	mov	ecx, DWORD PTR [ecx+4]
; Line 50132
	xor	eax, eax
	cmp	ecx, ebx
	mov	DWORD PTR _nCol$[esp+268], ecx
	mov	DWORD PTR _i$[esp+268], eax
	jle	$LN361@sqlite3Gen@4
	mov	DWORD PTR tv2672[esp+268], ebx
	mov	DWORD PTR tv2702[esp+268], ecx
	npad	5
$LL410@sqlite3Gen@4:
; Line 50133
	mov	edx, DWORD PTR _pTab$GSCopy$[esp+268]
	cmp	eax, DWORD PTR [edx+12]
	je	$LN59@sqlite3Gen@4
; Line 50136
	mov	eax, edx
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR tv2672[esp+268]
	movzx	ebp, BYTE PTR [edx+ecx+16]
; Line 50137
	cmp	ebp, ebx
	lea	eax, DWORD PTR [edx+ecx]
	je	$LN59@sqlite3Gen@4
; Line 50138
	mov	ecx, DWORD PTR _overrideError$[esp+264]
	cmp	ecx, 99					; 00000063H
	je	SHORT $LN55@sqlite3Gen@4
; Line 50139
	mov	ebp, ecx
	jmp	SHORT $LN53@sqlite3Gen@4
$LN55@sqlite3Gen@4:
; Line 50140
	cmp	ebp, 99					; 00000063H
; Line 50143
	je	SHORT $LN412@sqlite3Gen@4
$LN53@sqlite3Gen@4:
	cmp	ebp, 5
	jne	SHORT $LN52@sqlite3Gen@4
	cmp	DWORD PTR [eax+4], ebx
	jne	SHORT $LN52@sqlite3Gen@4
$LN412@sqlite3Gen@4:
; Line 50144
	mov	ebp, 2
$LN52@sqlite3Gen@4:
; Line 50146
	mov	eax, DWORD PTR tv2702[esp+268]
	add	eax, -1
	push	1
	push	eax
	push	94					; 0000005eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 50147
	mov	edi, DWORD PTR [esi+12]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN74@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	xor	ebx, ebx
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN74@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, ebx
	jle	SHORT $LN74@sqlite3Gen@4
	mov	DWORD PTR _addr$[esp+268], ebx
	jmp	SHORT $LN76@sqlite3Gen@4
$LN74@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, 1
	add	DWORD PTR [esi+12], ecx
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 66			; 00000042H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	DWORD PTR _addr$[esp+268], edi
$LN76@sqlite3Gen@4:
; Line 50150
	lea	eax, DWORD PTR [ebp-1]
	cmp	eax, 4
	ja	$LN50@sqlite3Gen@4
	jmp	DWORD PTR $LN417@sqlite3Gen@4[eax*4]
$LN49@sqlite3Gen@4:
; Line 50155
	push	ebp
	push	19					; 00000013H
	push	36					; 00000024H
	mov	eax, esi
	mov	DWORD PTR _zMsg$96655[esp+280], ebx
	call	_sqlite3VdbeAddOp
; Line 50157
	mov	eax, DWORD PTR _pTab$GSCopy$[esp+280]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR tv2672[esp+280]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	OFFSET ??_C@_0BB@CJJGLMJD@?5may?5not?5be?5NULL?$AA@
	push	ecx
	push	OFFSET ??_C@_01LFCBOECM@?4?$AA@
	push	edx
	lea	eax, DWORD PTR _zMsg$96655[esp+300]
	push	eax
	call	_sqlite3SetString
; Line 50158
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR _zMsg$96655[esp+304]
	add	esp, 36					; 00000024H
	cmp	eax, ebx
	mov	ebp, ecx
	je	SHORT $LN349@sqlite3Gen@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN93@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN349@sqlite3Gen@4
$LN93@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, 1
	js	$LN50@sqlite3Gen@4
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	edi, DWORD PTR [eax+ecx*4]
	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edi+16]
	call	_freeP3
	cmp	ebp, ebx
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN350@sqlite3Gen@4
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN50@sqlite3Gen@4
$LN350@sqlite3Gen@4:
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [edi+16], -1
	jmp	SHORT $LN50@sqlite3Gen@4
$LN349@sqlite3Gen@4:
	or	eax, -1
	call	_freeP3
; Line 50159
	jmp	SHORT $LN50@sqlite3Gen@4
$LN48@sqlite3Gen@4:
; Line 50162
	mov	edx, DWORD PTR _nCol$[esp+268]
	mov	eax, DWORD PTR _hasTwoRowids$[esp+268]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	ebx
	push	ecx
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 50163
	mov	edx, DWORD PTR _ignoreDest$[esp+276]
	push	edx
	push	ebx
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 50164
	jmp	SHORT $LN50@sqlite3Gen@4
$LN47@sqlite3Gen@4:
; Line 50167
	mov	eax, DWORD PTR _pTab$GSCopy$[esp+268]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR tv2672[esp+268]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	ecx, DWORD PTR _pParse$GSCopy$[esp+268]
	push	eax
	push	ecx
	call	_sqlite3ExprCode
; Line 50168
	mov	edx, DWORD PTR tv2702[esp+276]
	push	ebx
	push	edx
	push	43					; 0000002bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 20					; 00000014H
$LN50@sqlite3Gen@4:
; Line 50172
	cmp	DWORD PTR _addr$[esp+268], ebx
	jl	SHORT $LN59@sqlite3Gen@4
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, DWORD PTR _addr$[esp+268]
	jle	SHORT $LN59@sqlite3Gen@4
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ebx
	je	SHORT $LN59@sqlite3Gen@4
	mov	edx, DWORD PTR _addr$[esp+268]
	lea	edx, DWORD PTR [edx+edx*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
$LN59@sqlite3Gen@4:
	mov	eax, DWORD PTR _i$[esp+268]
	add	DWORD PTR tv2672[esp+268], 20		; 00000014H
	sub	DWORD PTR tv2702[esp+268], 1
	add	eax, 1
	cmp	eax, DWORD PTR _nCol$[esp+268]
	mov	DWORD PTR _i$[esp+268], eax
	jl	$LL410@sqlite3Gen@4
; Line 50132
	mov	ebp, DWORD PTR _pParse$GSCopy$[esp+268]
$LN361@sqlite3Gen@4:
; Line 50178
	mov	eax, DWORD PTR _pTab$GSCopy$[esp+268]
	cmp	DWORD PTR [eax+44], ebx
	je	$LN362@sqlite3Gen@4
	mov	ecx, DWORD PTR [ebp]
	test	DWORD PTR [ecx+8], 8192			; 00002000H
	jne	$LN362@sqlite3Gen@4
; Line 50179
	mov	edi, DWORD PTR [esi+24]
	mov	eax, DWORD PTR [esi+28]
	cmp	edi, eax
	lea	edx, DWORD PTR [edi+1]
	mov	DWORD PTR tv2371[esp+268], edi
	mov	DWORD PTR [esi+24], edx
	jl	SHORT $LN108@sqlite3Gen@4
	mov	ebx, DWORD PTR [esi+32]
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [esi+28], eax
	add	eax, eax
	add	eax, eax
	call	_sqlite3ReallocOrFree
	mov	DWORD PTR [esi+32], eax
	xor	ebx, ebx
$LN108@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ebx
	je	SHORT $LN411@sqlite3Gen@4
	mov	DWORD PTR [eax+edi*4], -1
$LN411@sqlite3Gen@4:
; Line 50181
	mov	eax, DWORD PTR _nCol$[esp+268]
; Line 50182
	mov	ecx, DWORD PTR _pTab$GSCopy$[esp+268]
	or	edi, -1
	sub	edi, DWORD PTR tv2371[esp+268]
	push	1
	mov	DWORD PTR [ebp+40], eax
	mov	edx, DWORD PTR [ecx+44]
	push	edi
	push	edx
	push	ebp
	call	_sqlite3ExprIfTrue
	add	esp, 16					; 00000010H
; Line 50185
	cmp	DWORD PTR _overrideError$[esp+264], 99	; 00000063H
	mov	DWORD PTR [ebp+40], ebx
	je	SHORT $LN65@sqlite3Gen@4
	mov	eax, DWORD PTR _overrideError$[esp+264]
; Line 50186
	cmp	eax, 4
	je	SHORT $LN44@sqlite3Gen@4
	cmp	eax, 5
	je	SHORT $LN44@sqlite3Gen@4
; Line 50190
	push	eax
	push	19					; 00000013H
	push	36					; 00000024H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN43@sqlite3Gen@4
$LN65@sqlite3Gen@4:
; Line 50185
	mov	eax, 2
; Line 50190
	push	eax
	push	19					; 00000013H
	push	36					; 00000024H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN43@sqlite3Gen@4
$LN44@sqlite3Gen@4:
; Line 50187
	mov	eax, DWORD PTR _nCol$[esp+268]
	mov	ecx, DWORD PTR _hasTwoRowids$[esp+268]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	ebx
	push	edx
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 50188
	mov	eax, DWORD PTR _ignoreDest$[esp+276]
	push	eax
	push	ebx
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN43@sqlite3Gen@4:
; Line 50192
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ebx
	je	SHORT $LN362@sqlite3Gen@4
	mov	edx, DWORD PTR [esi+12]
	lea	ecx, DWORD PTR [edi*4+4]
	sub	eax, ecx
	mov	DWORD PTR [eax], edx
$LN362@sqlite3Gen@4:
; Line 50200
	cmp	DWORD PTR _rowidChng$[esp+264], ebx
	je	$LN380@sqlite3Gen@4
; Line 50201
	mov	eax, DWORD PTR _pTab$GSCopy$[esp+268]
	movzx	eax, BYTE PTR [eax+55]
; Line 50202
	mov	ecx, DWORD PTR _overrideError$[esp+264]
	cmp	ecx, 99					; 00000063H
	mov	DWORD PTR _onError$[esp+268], eax
	je	SHORT $LN41@sqlite3Gen@4
; Line 50203
	mov	DWORD PTR _onError$[esp+268], ecx
	jmp	SHORT $LN39@sqlite3Gen@4
$LN41@sqlite3Gen@4:
; Line 50204
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN39@sqlite3Gen@4
; Line 50205
	mov	DWORD PTR _onError$[esp+268], 2
$LN39@sqlite3Gen@4:
; Line 50208
	cmp	DWORD PTR _isUpdate$[esp+264], ebx
	je	SHORT $LN373@sqlite3Gen@4
; Line 50209
	mov	edi, DWORD PTR _nCol$[esp+268]
	push	1
	add	edi, 1
	push	edi
	push	94					; 0000005eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 50210
	push	1
	push	edi
	push	94					; 0000005eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 50211
	mov	edi, DWORD PTR [esi+12]
	add	esp, 24					; 00000018H
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN114@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	xor	ebx, ebx
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN114@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, ebx
	jle	SHORT $LN114@sqlite3Gen@4
	mov	DWORD PTR _jumpInst1$[esp+268], ebx
	jmp	SHORT $LN373@sqlite3Gen@4
$LN114@sqlite3Gen@4:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 68			; 00000044H
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	DWORD PTR _jumpInst1$[esp+268], edi
$LN373@sqlite3Gen@4:
; Line 50213
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN120@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN374@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN375@sqlite3Gen@4
$LN374@sqlite3Gen@4:
	xor	ebx, ebx
$LN120@sqlite3Gen@4:
	mov	edx, DWORD PTR [esi+20]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _nCol$[esp+268]
	mov	ecx, 1
	add	DWORD PTR [esi+12], ecx
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN122@sqlite3Gen@4
$LN375@sqlite3Gen@4:
	xor	ebx, ebx
$LN122@sqlite3Gen@4:
; Line 50214
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN126@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	xor	ebx, ebx
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN126@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, ebx
	jle	SHORT $LN126@sqlite3Gen@4
	mov	ebp, DWORD PTR _base$[esp+264]
	mov	DWORD PTR _jumpInst2$[esp+268], ebx
	jmp	SHORT $LN128@sqlite3Gen@4
$LN126@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ebp, DWORD PTR _base$[esp+264]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 44			; 0000002cH
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	DWORD PTR _jumpInst2$[esp+268], edi
$LN128@sqlite3Gen@4:
; Line 50215
	mov	eax, DWORD PTR _onError$[esp+268]
	add	eax, -1
	cmp	eax, 4
	ja	$LN35@sqlite3Gen@4
	jmp	DWORD PTR $LN418@sqlite3Gen@4[eax*4]
$LN33@sqlite3Gen@4:
; Line 50228
	mov	eax, DWORD PTR _pTab$GSCopy$[esp+268]
	push	ebx
	push	ebp
	mov	ecx, esi
	call	_sqlite3GenerateRowIndexDelete
	add	esp, 8
; Line 50229
	cmp	DWORD PTR _isUpdate$[esp+264], ebx
	je	SHORT $LN377@sqlite3Gen@4
; Line 50230
	mov	eax, DWORD PTR _hasTwoRowids$[esp+268]
	mov	edx, DWORD PTR _nCol$[esp+268]
	add	edx, eax
	push	1
	push	edx
	push	94					; 0000005eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 50231
	push	ebx
	push	ebp
	push	128					; 00000080H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN377@sqlite3Gen@4:
; Line 50233
	mov	DWORD PTR _seenReplace$[esp+268], 1
; Line 50234
	jmp	$LN379@sqlite3Gen@4
$LN31@sqlite3Gen@4:
; Line 50238
	mov	ecx, DWORD PTR _nCol$[esp+268]
	mov	edx, DWORD PTR _hasTwoRowids$[esp+268]
	lea	eax, DWORD PTR [ecx+edx+1]
	push	ebx
	push	eax
	push	11					; 0000000bH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 50239
	mov	ecx, DWORD PTR _ignoreDest$[esp+276]
	push	ecx
	push	ebx
	push	95					; 0000005fH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 50240
	jmp	$LN379@sqlite3Gen@4
$LN35@sqlite3Gen@4:
; Line 50217
	mov	DWORD PTR _onError$[esp+268], 2
$LN34@sqlite3Gen@4:
; Line 50224
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN134@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN378@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN378@sqlite3Gen@4
	xor	edi, edi
	xor	ebx, ebx
	jmp	SHORT $LN136@sqlite3Gen@4
$LN378@sqlite3Gen@4:
	xor	ebx, ebx
$LN134@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ecx, DWORD PTR _onError$[esp+268]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 36			; 00000024H
	mov	DWORD PTR [eax+4], 19			; 00000013H
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
$LN136@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	mov	eax, edi
	je	SHORT $LN353@sqlite3Gen@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN157@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN353@sqlite3Gen@4
$LN157@sqlite3Gen@4:
	cmp	edi, ebx
	jl	SHORT $LN153@sqlite3Gen@4
	cmp	edi, DWORD PTR [esi+12]
	jl	SHORT $LN152@sqlite3Gen@4
$LN153@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN379@sqlite3Gen@4
$LN152@sqlite3Gen@4:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	mov	DWORD PTR [edi+12], OFFSET ??_C@_0BL@MIGFAHKG@PRIMARY?5KEY?5must?5be?5unique?$AA@
	mov	DWORD PTR [edi+16], -2			; fffffffeH
	jmp	SHORT $LN379@sqlite3Gen@4
$LN353@sqlite3Gen@4:
	mov	ecx, OFFSET ??_C@_0BL@MIGFAHKG@PRIMARY?5KEY?5must?5be?5unique?$AA@
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN379@sqlite3Gen@4:
; Line 50243
	mov	eax, DWORD PTR _jumpInst2$[esp+268]
	cmp	eax, ebx
	jl	SHORT $LN164@sqlite3Gen@4
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jle	SHORT $LN164@sqlite3Gen@4
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	je	SHORT $LN164@sqlite3Gen@4
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN164@sqlite3Gen@4:
; Line 50244
	cmp	DWORD PTR _isUpdate$[esp+264], ebx
	je	SHORT $LN380@sqlite3Gen@4
; Line 50245
	mov	eax, DWORD PTR _jumpInst1$[esp+268]
	cmp	eax, ebx
	jl	SHORT $LN169@sqlite3Gen@4
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jle	SHORT $LN169@sqlite3Gen@4
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	je	SHORT $LN169@sqlite3Gen@4
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN169@sqlite3Gen@4:
; Line 50246
	mov	ecx, DWORD PTR _nCol$[esp+268]
	push	1
	add	ecx, 1
	push	ecx
	push	94					; 0000005eH
	mov	eax, esi
	call	_sqlite3VdbeAddOp
; Line 50247
	mov	edx, DWORD PTR _base$[esp+276]
	push	ebx
	push	edx
	push	128					; 00000080H
	mov	eax, esi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN380@sqlite3Gen@4:
; Line 50256
	mov	eax, DWORD PTR _pTab$GSCopy$[esp+268]
	mov	eax, DWORD PTR [eax+16]
	cmp	eax, ebx
	mov	DWORD PTR _extra$[esp+268], -1
	mov	DWORD PTR _iCur$[esp+268], ebx
	mov	DWORD PTR _pIdx$[esp+268], eax
	je	$LN27@sqlite3Gen@4
	mov	ebp, 1
$LL403@sqlite3Gen@4:
	mov	eax, DWORD PTR _aIdxUsed$[esp+264]
; Line 50257
	cmp	eax, ebx
	je	SHORT $LN26@sqlite3Gen@4
	mov	ecx, DWORD PTR _iCur$[esp+268]
	cmp	BYTE PTR [ecx+eax], bl
	je	$LN28@sqlite3Gen@4
$LN26@sqlite3Gen@4:
; Line 50261
	mov	edi, DWORD PTR [esi+12]
	add	DWORD PTR _extra$[esp+268], ebp
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN172@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN381@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN382@sqlite3Gen@4
$LN381@sqlite3Gen@4:
	xor	ebx, ebx
$LN172@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], ebp
	mov	ecx, DWORD PTR _nCol$[esp+268]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _extra$[esp+268]
	add	edx, ecx
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN174@sqlite3Gen@4
$LN382@sqlite3Gen@4:
	xor	ebx, ebx
$LN174@sqlite3Gen@4:
; Line 50262
	mov	edi, DWORD PTR _pIdx$[esp+268]
	xor	ebp, ebp
	cmp	DWORD PTR [edi+4], ebx
	jle	$LN404@sqlite3Gen@4
$LL25@sqlite3Gen@4:
; Line 50263
	mov	eax, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [eax+ebp*4]
; Line 50264
	mov	ecx, DWORD PTR _pTab$GSCopy$[esp+268]
	cmp	eax, DWORD PTR [ecx+12]
; Line 50265
	mov	edi, DWORD PTR [esi+12]
	mov	DWORD PTR _idx$96691[esp+268], eax
	jne	SHORT $LN22@sqlite3Gen@4
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN178@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN383@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	$LN385@sqlite3Gen@4
$LN383@sqlite3Gen@4:
	xor	ebx, ebx
$LN178@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+20]
	lea	edx, DWORD PTR [edi+edi*4]
	mov	edi, DWORD PTR _nCol$[esp+268]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _extra$[esp+268]
	mov	ecx, 1
	add	DWORD PTR [esi+12], ecx
	add	edx, ebp
	lea	edx, DWORD PTR [edx+edi+1]
$LN416@sqlite3Gen@4:
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
; Line 50266
	jmp	SHORT $LN24@sqlite3Gen@4
$LN22@sqlite3Gen@4:
; Line 50267
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN184@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN384@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN385@sqlite3Gen@4
$LN384@sqlite3Gen@4:
	xor	ebx, ebx
$LN184@sqlite3Gen@4:
	mov	edx, DWORD PTR [esi+20]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _extra$[esp+268]
	sub	edx, DWORD PTR _idx$96691[esp+268]
	mov	ecx, 1
	add	DWORD PTR [esi+12], ecx
	add	edx, ebp
	add	edx, DWORD PTR _nCol$[esp+268]
	jmp	SHORT $LN416@sqlite3Gen@4
$LN385@sqlite3Gen@4:
	xor	ebx, ebx
$LN24@sqlite3Gen@4:
; Line 50262
	mov	eax, DWORD PTR _pIdx$[esp+268]
	add	ebp, 1
	cmp	ebp, DWORD PTR [eax+4]
	mov	edi, eax
	jl	$LL25@sqlite3Gen@4
$LN404@sqlite3Gen@4:
; Line 50270
	mov	ebp, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], ebp
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR $T138935[esp+268], ecx
	jg	SHORT $LN190@sqlite3Gen@4
	lea	eax, DWORD PTR [ebp+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN386@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN386@sqlite3Gen@4
	mov	DWORD PTR _jumpInst1$[esp+268], 0
	xor	ebx, ebx
	jmp	SHORT $LN192@sqlite3Gen@4
$LN386@sqlite3Gen@4:
	xor	ebx, ebx
$LN190@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ecx, DWORD PTR $T138935[esp+268]
	lea	edx, DWORD PTR [ebp+ebp*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 55			; 00000037H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	DWORD PTR _jumpInst1$[esp+268], ebp
$LN192@sqlite3Gen@4:
; Line 50271
	mov	eax, edi
	mov	ecx, esi
	call	_sqlite3IndexAffinityStr
; Line 50274
	movzx	ebp, BYTE PTR [edi+24]
; Line 50275
	cmp	ebp, ebx
	mov	DWORD PTR _onError$[esp+268], ebp
	je	$LN28@sqlite3Gen@4
; Line 50276
	mov	eax, DWORD PTR _overrideError$[esp+264]
	cmp	eax, 99					; 00000063H
	je	SHORT $LN19@sqlite3Gen@4
; Line 50277
	mov	ebp, eax
	jmp	SHORT $LN414@sqlite3Gen@4
$LN19@sqlite3Gen@4:
; Line 50278
	cmp	ebp, 99					; 00000063H
	jne	SHORT $LN405@sqlite3Gen@4
; Line 50279
	mov	ebp, 2
$LN414@sqlite3Gen@4:
	mov	DWORD PTR _onError$[esp+268], ebp
$LN405@sqlite3Gen@4:
; Line 50281
	cmp	DWORD PTR _seenReplace$[esp+268], ebx
	je	SHORT $LN406@sqlite3Gen@4
; Line 50282
	cmp	ebp, 4
	jne	SHORT $LN15@sqlite3Gen@4
	mov	ebp, 5
	jmp	SHORT $LN415@sqlite3Gen@4
$LN15@sqlite3Gen@4:
; Line 50283
	cmp	ebp, 3
	jne	SHORT $LN406@sqlite3Gen@4
	mov	ebp, 2
$LN415@sqlite3Gen@4:
	mov	DWORD PTR _onError$[esp+268], ebp
$LN406@sqlite3Gen@4:
; Line 50288
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN196@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN387@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN388@sqlite3Gen@4
$LN387@sqlite3Gen@4:
	xor	ebx, ebx
$LN196@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+20]
	lea	edx, DWORD PTR [edi+edi*4]
	mov	edi, DWORD PTR _extra$[esp+268]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _nCol$[esp+268]
	mov	ecx, 1
	add	DWORD PTR [esi+12], ecx
	add	edi, edx
	mov	edx, DWORD PTR _hasTwoRowids$[esp+268]
	lea	edx, DWORD PTR [edi+edx+1]
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN198@sqlite3Gen@4
$LN388@sqlite3Gen@4:
	xor	ebx, ebx
$LN198@sqlite3Gen@4:
; Line 50289
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN202@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN389@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN389@sqlite3Gen@4
	mov	DWORD PTR _jumpInst2$[esp+268], 0
	xor	ebx, ebx
	jmp	SHORT $LN204@sqlite3Gen@4
$LN389@sqlite3Gen@4:
	xor	ebx, ebx
$LN202@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR _iCur$[esp+268]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _base$[esp+264]
	lea	edx, DWORD PTR [edx+ecx+1]
	mov	BYTE PTR [eax], 32			; 00000020H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	DWORD PTR _jumpInst2$[esp+268], edi
$LN204@sqlite3Gen@4:
; Line 50294
	lea	eax, DWORD PTR [ebp-1]
	cmp	eax, 4
	ja	$LN11@sqlite3Gen@4
	jmp	DWORD PTR $LN419@sqlite3Gen@4[eax*4]
$LN10@sqlite3Gen@4:
; Line 50301
	mov	eax, DWORD PTR _pIdx$[esp+268]
	cmp	DWORD PTR [eax+4], 1
	mov	eax, OFFSET ??_C@_08BLECJPKD@columns?5?$AA@
	jg	SHORT $LN68@sqlite3Gen@4
	mov	eax, OFFSET ??_C@_07OJMCPGAK@column?5?$AA@
$LN68@sqlite3Gen@4:
	push	eax
	lea	ecx, DWORD PTR _zErrMsg$96711[esp+272]
	push	ecx
	push	200					; 000000c8H
	call	_sqlite3_snprintf
; Line 50302
	lea	edi, DWORD PTR _zErrMsg$96711[esp+280]
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [edi+1]
$LL357@sqlite3Gen@4:
	mov	al, BYTE PTR [edi]
	add	edi, 1
	cmp	al, bl
	jne	SHORT $LL357@sqlite3Gen@4
; Line 50303
	mov	edx, DWORD PTR _pIdx$[esp+268]
	sub	edi, ecx
	xor	ebp, ebp
	cmp	DWORD PTR [edx+4], ebx
	jle	$LN407@sqlite3Gen@4
	npad	4
$LL409@sqlite3Gen@4:
	cmp	edi, 170				; 000000aaH
	jae	$LN407@sqlite3Gen@4
; Line 50304
	mov	eax, DWORD PTR _pIdx$[esp+268]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+ebp*4]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _pTab$GSCopy$[esp+268]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _zCol$96717[esp+268], eax
; Line 50305
	lea	edx, DWORD PTR [eax+1]
	npad	6
$LL358@sqlite3Gen@4:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	cmp	cl, bl
	jne	SHORT $LL358@sqlite3Gen@4
	sub	eax, edx
; Line 50306
	cmp	ebp, ebx
	mov	DWORD PTR _n2$96710[esp+268], eax
	jle	SHORT $LN6@sqlite3Gen@4
; Line 50307
	push	OFFSET ??_C@_02KEGNLNML@?0?5?$AA@
	lea	edx, DWORD PTR _zErrMsg$96711[esp+edi+272]
	mov	eax, 200				; 000000c8H
	push	edx
	sub	eax, edi
	push	eax
	call	_sqlite3_snprintf
	add	esp, 12					; 0000000cH
; Line 50308
	add	edi, 2
$LN6@sqlite3Gen@4:
; Line 50310
	mov	ecx, DWORD PTR _n2$96710[esp+268]
	lea	eax, DWORD PTR [ecx+edi]
; Line 50315
	mov	ecx, 200				; 000000c8H
	sub	ecx, edi
	mov	DWORD PTR tv1785[esp+268], eax
	cmp	eax, 170				; 000000aaH
	lea	eax, DWORD PTR _zErrMsg$96711[esp+edi+268]
	ja	SHORT $LN344@sqlite3Gen@4
	mov	edx, DWORD PTR _zCol$96717[esp+268]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	eax
	push	ecx
	call	_sqlite3_snprintf
	mov	edx, DWORD PTR _pIdx$[esp+284]
; Line 50316
	mov	edi, DWORD PTR tv1785[esp+284]
	add	ebp, 1
	add	esp, 16					; 00000010H
	cmp	ebp, DWORD PTR [edx+4]
	jl	$LL409@sqlite3Gen@4
; Line 50310
	jmp	SHORT $LN407@sqlite3Gen@4
$LN344@sqlite3Gen@4:
; Line 50311
	push	OFFSET ??_C@_03KHICJKCI@?4?4?4?$AA@
	push	eax
	push	ecx
	call	_sqlite3_snprintf
	add	esp, 12					; 0000000cH
; Line 50312
	add	edi, 3
$LN407@sqlite3Gen@4:
; Line 50320
	mov	edx, DWORD PTR _pIdx$[esp+268]
	cmp	DWORD PTR [edx+4], 1
	mov	eax, OFFSET ??_C@_0BA@IJKPAPH@?5are?5not?5unique?$AA@
	jg	SHORT $LN70@sqlite3Gen@4
	mov	eax, OFFSET ??_C@_0P@GKKFBNCL@?5is?5not?5unique?$AA@
$LN70@sqlite3Gen@4:
	push	eax
	lea	eax, DWORD PTR _zErrMsg$96711[esp+edi+272]
	mov	ecx, 200				; 000000c8H
	push	eax
	sub	ecx, edi
	push	ecx
	call	_sqlite3_snprintf
; Line 50321
	mov	edi, DWORD PTR [esi+12]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN210@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN391@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN391@sqlite3Gen@4
	xor	eax, eax
	xor	ebx, ebx
	jmp	SHORT $LN212@sqlite3Gen@4
$LN391@sqlite3Gen@4:
	xor	ebx, ebx
$LN210@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	ecx, DWORD PTR _onError$[esp+268]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 36			; 00000024H
	mov	DWORD PTR [eax+4], 19			; 00000013H
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	eax, edi
$LN212@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	je	$LN355@sqlite3Gen@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN233@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN355@sqlite3Gen@4
$LN233@sqlite3Gen@4:
	cmp	eax, ebx
	jl	SHORT $LN229@sqlite3Gen@4
	cmp	eax, DWORD PTR [esi+12]
	jl	SHORT $LN228@sqlite3Gen@4
$LN229@sqlite3Gen@4:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	$LN11@sqlite3Gen@4
$LN228@sqlite3Gen@4:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	lea	eax, DWORD PTR _zErrMsg$96711[esp+268]
	mov	DWORD PTR [edi+12], ebx
	lea	edx, DWORD PTR [eax+1]
$LL359@sqlite3Gen@4:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	cmp	cl, bl
	jne	SHORT $LL359@sqlite3Gen@4
	sub	eax, edx
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR $T139088[esp+268], eax
	call	_sqlite3MallocRaw
	mov	ebp, eax
	cmp	ebp, ebx
	je	SHORT $LN260@sqlite3Gen@4
	mov	eax, DWORD PTR $T139088[esp+268]
	push	eax
	lea	ecx, DWORD PTR _zErrMsg$96711[esp+272]
	push	ecx
	push	ebp
	call	_memcpy
	mov	edx, DWORD PTR $T139088[esp+280]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edx+ebp], bl
$LN260@sqlite3Gen@4:
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [edi+16], -1
	jmp	$LN11@sqlite3Gen@4
$LN355@sqlite3Gen@4:
	lea	ecx, DWORD PTR _zErrMsg$96711[esp+268]
	xor	eax, eax
	call	_freeP3
; Line 50322
	jmp	$LN11@sqlite3Gen@4
$LN3@sqlite3Gen@4:
; Line 50326
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN264@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN392@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN393@sqlite3Gen@4
$LN392@sqlite3Gen@4:
	xor	ebx, ebx
$LN264@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR _extra$[esp+268]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _nCol$[esp+268]
	add	edx, ecx
	mov	ecx, DWORD PTR _hasTwoRowids$[esp+268]
	lea	edx, DWORD PTR [edx+ecx+3]
	mov	BYTE PTR [eax], 11			; 0000000bH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN266@sqlite3Gen@4
$LN393@sqlite3Gen@4:
	xor	ebx, ebx
$LN266@sqlite3Gen@4:
; Line 50327
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN270@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN394@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	$LN402@sqlite3Gen@4
$LN394@sqlite3Gen@4:
	xor	ebx, ebx
$LN270@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR _ignoreDest$[esp+264]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
; Line 50328
	jmp	$LN11@sqlite3Gen@4
$LN2@sqlite3Gen@4:
; Line 50331
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN279@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN395@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN395@sqlite3Gen@4
	xor	ebp, ebp
	xor	ebx, ebx
	jmp	SHORT $LN281@sqlite3Gen@4
$LN395@sqlite3Gen@4:
	xor	ebx, ebx
$LN279@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR _base$[esp+264]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 44			; 0000002cH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	mov	ebp, edi
$LN281@sqlite3Gen@4:
	mov	eax, DWORD PTR _base$[esp+264]
	push	ebx
	push	eax
	mov	eax, DWORD PTR _pTab$GSCopy$[esp+276]
	mov	ecx, esi
	call	_sqlite3GenerateRowIndexDelete
	mov	edi, DWORD PTR [esi+12]
	add	esp, 8
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN285@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN396@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN397@sqlite3Gen@4
$LN396@sqlite3Gen@4:
	xor	ebx, ebx
$LN285@sqlite3Gen@4:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _base$[esp+264]
	mov	BYTE PTR [eax], 92			; 0000005cH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN287@sqlite3Gen@4
$LN397@sqlite3Gen@4:
	xor	ebx, ebx
$LN287@sqlite3Gen@4:
	cmp	ebp, ebx
	jl	SHORT $LN315@sqlite3Gen@4
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, ebp
	jle	SHORT $LN315@sqlite3Gen@4
	mov	eax, DWORD PTR [esi+20]
	cmp	eax, ebx
	je	SHORT $LN315@sqlite3Gen@4
	lea	edx, DWORD PTR [ebp+ebp*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
$LN315@sqlite3Gen@4:
; Line 50332
	cmp	DWORD PTR _isUpdate$[esp+264], ebx
	je	$LN326@sqlite3Gen@4
; Line 50333
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN318@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN398@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN399@sqlite3Gen@4
$LN398@sqlite3Gen@4:
	xor	ebx, ebx
$LN318@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+20]
	mov	edx, DWORD PTR _extra$[esp+268]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _nCol$[esp+268]
	mov	ebp, 1
	add	DWORD PTR [esi+12], ebp
	add	edx, ecx
	mov	ecx, DWORD PTR _hasTwoRowids$[esp+268]
	lea	edx, DWORD PTR [edx+ecx+1]
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN320@sqlite3Gen@4
$LN399@sqlite3Gen@4:
	xor	ebx, ebx
	lea	ebp, DWORD PTR [ebx+1]
$LN320@sqlite3Gen@4:
; Line 50334
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN324@sqlite3Gen@4
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN400@sqlite3Gen@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN401@sqlite3Gen@4
$LN400@sqlite3Gen@4:
	xor	ebx, ebx
$LN324@sqlite3Gen@4:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], ebp
	mov	edx, DWORD PTR _base$[esp+264]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 128			; 00000080H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
; Line 50336
	mov	DWORD PTR _seenReplace$[esp+268], 1
	jmp	SHORT $LN11@sqlite3Gen@4
$LN401@sqlite3Gen@4:
; Line 50334
	xor	ebx, ebx
$LN326@sqlite3Gen@4:
; Line 50336
	mov	DWORD PTR _seenReplace$[esp+268], 1
	jmp	SHORT $LN11@sqlite3Gen@4
$LN402@sqlite3Gen@4:
	xor	ebx, ebx
$LN11@sqlite3Gen@4:
; Line 50341
	mov	eax, DWORD PTR _jumpInst1$[esp+268]
	cmp	eax, ebx
	jl	SHORT $LN332@sqlite3Gen@4
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jle	SHORT $LN332@sqlite3Gen@4
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	je	SHORT $LN332@sqlite3Gen@4
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN332@sqlite3Gen@4:
; Line 50343
	mov	eax, DWORD PTR _jumpInst2$[esp+268]
	cmp	eax, ebx
	jl	SHORT $LN28@sqlite3Gen@4
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jle	SHORT $LN28@sqlite3Gen@4
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	je	SHORT $LN28@sqlite3Gen@4
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN28@sqlite3Gen@4:
	mov	ecx, DWORD PTR _pIdx$[esp+268]
	mov	eax, DWORD PTR [ecx+32]
	mov	ebp, 1
	add	DWORD PTR _iCur$[esp+268], ebp
	cmp	eax, ebx
	mov	DWORD PTR _pIdx$[esp+268], eax
	jne	$LL403@sqlite3Gen@4
$LN27@sqlite3Gen@4:
; Line 50345
	mov	ecx, DWORD PTR __$ArrayPad$[esp+268]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 252				; 000000fcH
	ret	0
	npad	3
$LN417@sqlite3Gen@4:
	DD	$LN49@sqlite3Gen@4
	DD	$LN49@sqlite3Gen@4
	DD	$LN49@sqlite3Gen@4
	DD	$LN48@sqlite3Gen@4
	DD	$LN47@sqlite3Gen@4
$LN418@sqlite3Gen@4:
	DD	$LN34@sqlite3Gen@4
	DD	$LN34@sqlite3Gen@4
	DD	$LN34@sqlite3Gen@4
	DD	$LN31@sqlite3Gen@4
	DD	$LN33@sqlite3Gen@4
$LN419@sqlite3Gen@4:
	DD	$LN10@sqlite3Gen@4
	DD	$LN10@sqlite3Gen@4
	DD	$LN10@sqlite3Gen@4
	DD	$LN3@sqlite3Gen@4
	DD	$LN2@sqlite3Gen@4
_sqlite3GenerateConstraintChecks ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _xferOptimization
_TEXT	SEGMENT
_pSrc$ = -28						; size = 4
_addr1$ = -24						; size = 4
_pSrcIdx$ = -24						; size = 4
_destHasUniqueIdx$ = -24				; size = 4
_counterMem$ = -20					; size = 4
_iDbSrc$ = -16						; size = 4
_emptyDestTest$ = -12					; size = 4
_addr2$ = -8						; size = 4
_emptySrcTest$ = -4					; size = 4
_pParse$ = 8						; size = 4
_pDest$ = 12						; size = 4
_onError$ = 16						; size = 4
_iDbDest$ = 20						; size = 4
_xferOptimization PROC					; COMDAT
; _pSelect$ = eax
; Line 50542
	sub	esp, 28					; 0000001cH
	mov	ecx, DWORD PTR _onError$[esp+24]
	push	ebx
; Line 50556
	xor	ebx, ebx
; Line 50558
	cmp	eax, ebx
	push	edi
	mov	edi, DWORD PTR _pDest$[esp+32]
	mov	DWORD PTR _destHasUniqueIdx$[esp+36], ebx
	jne	SHORT $LN55@xferOptimi
$LN118@xferOptimi:
	pop	edi
; Line 50559
	xor	eax, eax
	pop	ebx
; Line 50759
	add	esp, 28					; 0000001cH
	ret	0
$LN55@xferOptimi:
; Line 50561
	cmp	DWORD PTR [edi+32], ebx
; Line 50562
	jne	SHORT $LN118@xferOptimi
; Line 50565
	cmp	BYTE PTR [edi+57], bl
; Line 50566
	jne	SHORT $LN118@xferOptimi
; Line 50569
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN52@xferOptimi
; Line 50570
	mov	DWORD PTR _onError$[esp+32], 2
; Line 50572
	jmp	SHORT $LN51@xferOptimi
$LN52@xferOptimi:
	cmp	ecx, 2
	je	SHORT $LN51@xferOptimi
	cmp	ecx, 1
; Line 50573
	jne	SHORT $LN118@xferOptimi
$LN51@xferOptimi:
; Line 50575
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, ebx
; Line 50576
	je	SHORT $LN118@xferOptimi
; Line 50578
	cmp	WORD PTR [ecx], 1
; Line 50579
	jne	SHORT $LN118@xferOptimi
; Line 50581
	cmp	DWORD PTR [ecx+24], ebx
; Line 50582
	jne	SHORT $LN118@xferOptimi
; Line 50584
	cmp	DWORD PTR [eax+16], ebx
; Line 50585
	jne	SHORT $LN118@xferOptimi
; Line 50587
	cmp	DWORD PTR [eax+28], ebx
; Line 50588
	jne	SHORT $LN118@xferOptimi
; Line 50592
	cmp	DWORD PTR [eax+20], ebx
; Line 50593
	jne	SHORT $LN118@xferOptimi
; Line 50595
	cmp	DWORD PTR [eax+40], ebx
; Line 50596
	jne	SHORT $LN118@xferOptimi
; Line 50599
	cmp	DWORD PTR [eax+32], ebx
; Line 50600
	jne	SHORT $LN118@xferOptimi
; Line 50602
	cmp	BYTE PTR [eax+5], bl
; Line 50603
	jne	SHORT $LN118@xferOptimi
; Line 50605
	mov	eax, DWORD PTR [eax]
; Line 50607
	cmp	DWORD PTR [eax], 1
; Line 50608
	jne	SHORT $LN118@xferOptimi
; Line 50611
	mov	eax, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax]
	cmp	BYTE PTR [edx], 107			; 0000006bH
; Line 50612
	jne	SHORT $LN118@xferOptimi
; Line 50620
	mov	eax, DWORD PTR [ecx+12]
	push	esi
	mov	esi, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _pParse$[esp+36]
	call	_sqlite3LocateTable
; Line 50621
	cmp	eax, ebx
	mov	DWORD PTR _pSrc$[esp+40], eax
; Line 50622
	je	SHORT $LN117@xferOptimi
; Line 50624
	cmp	eax, edi
; Line 50625
	je	SHORT $LN117@xferOptimi
; Line 50628
	cmp	BYTE PTR [eax+57], bl
; Line 50629
	jne	SHORT $LN117@xferOptimi
; Line 50632
	cmp	DWORD PTR [eax+24], ebx
	je	SHORT $LN36@xferOptimi
$LN117@xferOptimi:
	pop	esi
	pop	edi
; Line 50633
	xor	eax, eax
	pop	ebx
; Line 50759
	add	esp, 28					; 0000001cH
	ret	0
$LN36@xferOptimi:
	push	ebp
; Line 50635
	mov	ebp, DWORD PTR [edi+4]
	cmp	ebp, DWORD PTR [eax+4]
; Line 50636
	jne	$LN116@xferOptimi
; Line 50638
	mov	ecx, DWORD PTR [edi+12]
	cmp	ecx, DWORD PTR [eax+12]
; Line 50639
	jne	$LN116@xferOptimi
; Line 50641
	cmp	ebp, ebx
	jle	SHORT $LN31@xferOptimi
	mov	edx, edi
	mov	esi, DWORD PTR [edx+8]
	mov	edi, DWORD PTR [eax+8]
	add	esi, 12					; 0000000cH
	add	edi, 12					; 0000000cH
	npad	3
$LL33@xferOptimi:
; Line 50642
	mov	cl, BYTE PTR [esi+6]
	cmp	cl, BYTE PTR [edi+6]
	jne	$LN116@xferOptimi
; Line 50645
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	mov	edx, DWORD PTR [edi]
	jne	SHORT $LN59@xferOptimi
	xor	eax, eax
	test	edx, edx
	sete	al
	jmp	SHORT $LN60@xferOptimi
$LN59@xferOptimi:
	test	edx, edx
	je	$LN116@xferOptimi
	call	_sqlite3StrICmp
	neg	eax
	sbb	eax, eax
	add	eax, 1
$LN60@xferOptimi:
	test	eax, eax
	je	$LN116@xferOptimi
; Line 50648
	cmp	BYTE PTR [esi+4], 0
	je	SHORT $LN32@xferOptimi
	cmp	BYTE PTR [edi+4], 0
	je	$LN116@xferOptimi
$LN32@xferOptimi:
; Line 50641
	add	ebx, 1
	add	esi, 20					; 00000014H
	add	edi, 20					; 00000014H
	cmp	ebx, ebp
	jl	SHORT $LL33@xferOptimi
$LN31@xferOptimi:
; Line 50652
	mov	ebx, DWORD PTR _pDest$[esp+40]
	mov	esi, DWORD PTR [ebx+16]
	test	esi, esi
	je	SHORT $LN111@xferOptimi
	mov	edx, DWORD PTR _pSrc$[esp+44]
	mov	edi, DWORD PTR [edx+16]
	mov	ebp, 1
	npad	3
$LL27@xferOptimi:
; Line 50653
	cmp	BYTE PTR [esi+24], 0
	je	SHORT $LN24@xferOptimi
; Line 50654
	mov	DWORD PTR _destHasUniqueIdx$[esp+44], ebp
$LN24@xferOptimi:
; Line 50656
	mov	edx, edi
	test	edx, edx
	je	$LN116@xferOptimi
$LL23@xferOptimi:
; Line 50657
	call	_xferCompatibleIndex
	test	eax, eax
	jne	SHORT $LN94@xferOptimi
	mov	edx, DWORD PTR [edx+32]
	test	edx, edx
	jne	SHORT $LL23@xferOptimi
	pop	ebp
	pop	esi
	pop	edi
	pop	ebx
; Line 50759
	add	esp, 28					; 0000001cH
	ret	0
$LN94@xferOptimi:
; Line 50659
	test	edx, edx
	je	$LN116@xferOptimi
	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	jne	SHORT $LL27@xferOptimi
$LN111@xferOptimi:
; Line 50664
	mov	eax, DWORD PTR [ebx+44]
	test	eax, eax
	je	SHORT $LN18@xferOptimi
	push	eax
	mov	eax, DWORD PTR _pSrc$[esp+48]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_sqlite3ExprCompare
	add	esp, 8
	test	eax, eax
; Line 50665
	je	$LN116@xferOptimi
$LN18@xferOptimi:
; Line 50680
	mov	edx, DWORD PTR _pSrc$[esp+44]
	mov	ebx, DWORD PTR _pParse$[esp+40]
	mov	esi, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR [ebx]
	call	_sqlite3SchemaToIndex
; Line 50681
	mov	esi, ebx
	mov	DWORD PTR _iDbSrc$[esp+44], eax
	call	_sqlite3GetVdbe
; Line 50682
	mov	ebx, DWORD PTR [ebx+28]
; Line 50684
	mov	edx, DWORD PTR _pDest$[esp+40]
	mov	edi, eax
	mov	eax, esi
	mov	esi, DWORD PTR _iDbDest$[esp+40]
	lea	ebp, DWORD PTR [ebx+1]
	push	edx
	lea	ecx, DWORD PTR [ebp+1]
	push	esi
	mov	DWORD PTR [eax+28], ecx
	call	_autoIncBegin
; Line 50685
	push	9
	push	esi
	mov	esi, DWORD PTR _pDest$[esp+56]
	mov	DWORD PTR _counterMem$[esp+60], eax
	mov	eax, DWORD PTR _pParse$[esp+56]
	push	ebp
	call	_sqlite3OpenTable
; Line 50686
	mov	eax, esi
	add	esp, 20					; 00000014H
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN108@xferOptimi
	mov	ecx, eax
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN16@xferOptimi
$LN108@xferOptimi:
	cmp	DWORD PTR _destHasUniqueIdx$[esp+44], 0
	je	SHORT $LN17@xferOptimi
$LN16@xferOptimi:
; Line 50697
	push	0
	push	ebp
	push	127					; 0000007fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50698
	push	0
	mov	esi, eax
	push	0
	push	95					; 0000005fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	DWORD PTR _emptyDestTest$[esp+68], eax
	add	esp, 24					; 00000018H
; Line 50699
	mov	eax, esi
	mov	ecx, edi
	call	_sqlite3VdbeJumpHere
; Line 50700
	jmp	SHORT $LN14@xferOptimi
$LN17@xferOptimi:
; Line 50701
	mov	DWORD PTR _emptyDestTest$[esp+44], 0
$LN14@xferOptimi:
; Line 50703
	mov	edx, DWORD PTR _iDbSrc$[esp+44]
	mov	esi, DWORD PTR _pSrc$[esp+44]
	mov	eax, DWORD PTR _pParse$[esp+40]
	push	14					; 0000000eH
	push	edx
	push	ebx
	call	_sqlite3OpenTable
; Line 50704
	push	0
	push	ebx
	push	127					; 0000007fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	DWORD PTR _emptySrcTest$[esp+68], eax
; Line 50705
	mov	eax, DWORD PTR _pDest$[esp+64]
	add	esp, 24					; 00000018H
	cmp	DWORD PTR [eax+12], 0
; Line 50706
	push	0
	jl	$LN13@xferOptimi
	push	ebx
	push	37					; 00000025H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50707
	push	0
	mov	DWORD PTR _addr1$[esp+60], eax
	push	0
	push	94					; 0000005eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50708
	push	0
	push	ebp
	push	44					; 0000002cH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50710
	mov	ecx, DWORD PTR _onError$[esp+76]
	push	ecx
	mov	DWORD PTR _addr2$[esp+84], eax
	push	19					; 00000013H
	push	36					; 00000024H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 48					; 00000030H
	test	edi, edi
	je	SHORT $LN109@xferOptimi
	mov	esi, DWORD PTR [edi+20]
	test	esi, esi
	je	SHORT $LN109@xferOptimi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN81@xferOptimi
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN109@xferOptimi
$LN81@xferOptimi:
	test	eax, eax
	jl	SHORT $LN77@xferOptimi
	cmp	eax, DWORD PTR [edi+12]
	jl	SHORT $LN76@xferOptimi
$LN77@xferOptimi:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, 1
	js	SHORT $LN110@xferOptimi
$LN76@xferOptimi:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [esi+edx*4+12]
	mov	eax, DWORD PTR [esi+edx*4+16]
	lea	esi, DWORD PTR [esi+edx*4]
	call	_freeP3
	mov	DWORD PTR [esi+12], OFFSET ??_C@_0BL@MIGFAHKG@PRIMARY?5KEY?5must?5be?5unique?$AA@
	mov	DWORD PTR [esi+16], -2			; fffffffeH
	jmp	SHORT $LN110@xferOptimi
$LN109@xferOptimi:
	mov	ecx, OFFSET ??_C@_0BL@MIGFAHKG@PRIMARY?5KEY?5must?5be?5unique?$AA@
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN110@xferOptimi:
; Line 50711
	mov	eax, DWORD PTR _addr2$[esp+44]
	mov	ecx, edi
	call	_sqlite3VdbeJumpHere
; Line 50712
	mov	eax, DWORD PTR _pParse$[esp+40]
	push	eax
	mov	eax, DWORD PTR _counterMem$[esp+48]
	call	_autoIncStep
	add	esp, 4
	jmp	SHORT $LN10@xferOptimi
$LN13@xferOptimi:
; Line 50713
	mov	ecx, eax
	cmp	DWORD PTR [ecx+16], 0
; Line 50714
	mov	eax, edi
	jne	SHORT $LN11@xferOptimi
	push	ebp
	push	23					; 00000017H
; Line 50715
	jmp	SHORT $LN115@xferOptimi
$LN11@xferOptimi:
; Line 50716
	push	ebx
	push	37					; 00000025H
$LN115@xferOptimi:
	call	_sqlite3VdbeAddOp
	mov	DWORD PTR _addr1$[esp+56], eax
	add	esp, 12					; 0000000cH
$LN10@xferOptimi:
; Line 50719
	push	0
	push	ebx
	push	41					; 00000029H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50722
	mov	esi, DWORD PTR _pDest$[esp+52]
	mov	edx, DWORD PTR [esi]
	push	0
	mov	eax, 11					; 0000000bH
	push	edx
	mov	ecx, ebp
	lea	edx, DWORD PTR [eax+102]
	call	_sqlite3VdbeOp3
; Line 50723
	mov	eax, DWORD PTR _addr1$[esp+64]
	push	eax
	push	ebx
	push	110					; 0000006eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50724
	mov	ecx, DWORD PTR _counterMem$[esp+76]
	mov	edx, DWORD PTR _iDbDest$[esp+72]
	mov	eax, DWORD PTR _pParse$[esp+72]
	push	ecx
	push	esi
	push	edx
	push	eax
	call	_autoIncEnd
; Line 50725
	mov	esi, DWORD PTR [esi+16]
	add	esp, 48					; 00000030H
	test	esi, esi
	je	$LN7@xferOptimi
$LL9@xferOptimi:
; Line 50726
	mov	ecx, DWORD PTR _pSrc$[esp+44]
	mov	eax, DWORD PTR [ecx+16]
	test	eax, eax
	mov	DWORD PTR _pSrcIdx$[esp+44], eax
	je	SHORT $LN96@xferOptimi
$LL6@xferOptimi:
; Line 50727
	mov	edx, DWORD PTR _pSrcIdx$[esp+44]
	call	_xferCompatibleIndex
	test	eax, eax
	jne	SHORT $LN96@xferOptimi
	mov	eax, DWORD PTR [edx+32]
	test	eax, eax
	mov	DWORD PTR _pSrcIdx$[esp+44], eax
	jne	SHORT $LL6@xferOptimi
$LN96@xferOptimi:
; Line 50730
	push	0
	push	ebx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50731
	push	0
	push	ebp
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50732
	mov	eax, DWORD PTR _iDbSrc$[esp+68]
	push	0
	push	eax
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50733
	mov	ecx, DWORD PTR _pSrcIdx$[esp+80]
	mov	edx, DWORD PTR _pParse$[esp+76]
	push	ecx
	push	edx
	call	_sqlite3IndexKeyinfo
; Line 50736
	push	-9					; fffffff7H
	push	eax
	mov	eax, DWORD PTR _pSrcIdx$[esp+96]
	mov	eax, DWORD PTR [eax+20]
	mov	ecx, ebx
	mov	edx, 14					; 0000000eH
	call	_sqlite3VdbeOp3
; Line 50737
	mov	ecx, DWORD PTR _iDbDest$[esp+92]
	push	0
	push	ecx
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50738
	mov	edx, DWORD PTR _pParse$[esp+104]
	add	esp, 64					; 00000040H
	push	esi
	push	edx
	call	_sqlite3IndexKeyinfo
; Line 50741
	push	-9					; fffffff7H
	push	eax
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, ebp
	mov	edx, 9
	call	_sqlite3VdbeOp3
; Line 50742
	push	0
	push	ebx
	push	127					; 0000007fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50743
	push	0
	mov	DWORD PTR _addr1$[esp+76], eax
	push	ebx
	push	8
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50744
	push	1
	push	ebp
	push	111					; 0000006fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50745
	mov	eax, DWORD PTR _addr1$[esp+96]
	add	eax, 1
	push	eax
	push	ebx
	push	110					; 0000006eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50746
	mov	eax, DWORD PTR _addr1$[esp+108]
	add	esp, 64					; 00000040H
	mov	ecx, edi
	call	_sqlite3VdbeJumpHere
	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	jne	$LL9@xferOptimi
$LN7@xferOptimi:
; Line 50748
	mov	eax, DWORD PTR _emptySrcTest$[esp+44]
	mov	ecx, edi
	call	_sqlite3VdbeJumpHere
; Line 50749
	push	0
	push	ebx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50750
	push	0
	push	ebp
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50751
	mov	esi, DWORD PTR _emptyDestTest$[esp+68]
	add	esp, 24					; 00000018H
	test	esi, esi
	je	SHORT $LN2@xferOptimi
; Line 50752
	push	0
	push	0
	push	36					; 00000024H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50753
	mov	eax, esi
	mov	ecx, edi
	call	_sqlite3VdbeJumpHere
; Line 50754
	push	0
	push	ebp
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN116@xferOptimi:
	pop	ebp
	pop	esi
	pop	edi
; Line 50755
	xor	eax, eax
	pop	ebx
; Line 50759
	add	esp, 28					; 0000001cH
	ret	0
$LN2@xferOptimi:
	pop	ebp
	pop	esi
	pop	edi
; Line 50757
	mov	eax, 1
	pop	ebx
; Line 50759
	add	esp, 28					; 0000001cH
	ret	0
_xferOptimization ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@JFMLENOH@too?5many?5columns?5in?5result?5set?$AA@ ; `string'
PUBLIC	??_C@_0BE@EGLAAHPP@no?5tables?5specified?$AA@	; `string'
PUBLIC	??_C@_05NNFHCGPF@?$CFs?4?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BE@EGABPGJI@sqlite_subquery_?$CFp_?$AA@	; `string'
;	COMDAT ??_C@_0BP@JFMLENOH@too?5many?5columns?5in?5result?5set?$AA@
CONST	SEGMENT
??_C@_0BP@JFMLENOH@too?5many?5columns?5in?5result?5set?$AA@ DB 'too many '
	DB	'columns in result set', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EGLAAHPP@no?5tables?5specified?$AA@
CONST	SEGMENT
??_C@_0BE@EGLAAHPP@no?5tables?5specified?$AA@ DB 'no tables specified', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NNFHCGPF@?$CFs?4?$CFs?$AA@
CONST	SEGMENT
??_C@_05NNFHCGPF@?$CFs?4?$CFs?$AA@ DB '%s.%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EGABPGJI@sqlite_subquery_?$CFp_?$AA@
CONST	SEGMENT
??_C@_0BE@EGABPGJI@sqlite_subquery_?$CFp_?$AA@ DB 'sqlite_subquery_%p_', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _prepSelectStmt
_TEXT	SEGMENT
_pNew$98892 = -72					; size = 4
_zTName$98905 = -68					; size = 4
tv1435 = -64						; size = 4
_zName$98922 = -60					; size = 4
_longNames$98894 = -56					; size = 4
tv1313 = -52						; size = 4
_i$ = -48						; size = 4
tv1375 = -44						; size = 4
tv675 = -40						; size = 4
_pEList$ = -36						; size = 4
_rc$ = -32						; size = 4
_zTabName$98912 = -28					; size = 4
_j$ = -24						; size = 4
tv1328 = -20						; size = 4
_tableSeen$98904 = -16					; size = 4
_k$ = -12						; size = 4
tv1180 = -8						; size = 4
_pTab$98911 = -4					; size = 4
_pParse$ = 8						; size = 4
_p$ = 12						; size = 4
_prepSelectStmt PROC					; COMDAT
; Line 54623
	sub	esp, 72					; 00000048H
	push	ebp
	push	esi
	mov	esi, DWORD PTR _p$[esp+76]
; Line 54629
	test	esi, esi
	je	$LN55@prepSelect
	mov	ebp, DWORD PTR [esi+12]
	test	ebp, ebp
	mov	DWORD PTR tv675[esp+80], ebp
	je	$LN55@prepSelect
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN56@prepSelect
	cmp	DWORD PTR _inMutex, 0
	jg	$LN55@prepSelect
$LN56@prepSelect:
; Line 54638
	mov	ecx, DWORD PTR _pParse$[esp+76]
	mov	eax, DWORD PTR [esi]
	push	ebx
	push	edi
	push	ebp
	push	ecx
	mov	DWORD PTR _pEList$[esp+96], eax
	call	_sqlite3SrcListAssignCursors
; Line 54644
	xor	ebx, ebx
	add	esp, 8
	cmp	WORD PTR [ebp], bx
	lea	edi, DWORD PTR [ebp+8]
	jle	$LN52@prepSelect
	npad	5
$LL54@prepSelect:
; Line 54646
	cmp	DWORD PTR [edi+12], 0
	jne	$LN305@prepSelect
; Line 54652
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jne	SHORT $LN50@prepSelect
; Line 54656
	cmp	DWORD PTR [edi+8], eax
	jne	SHORT $LN49@prepSelect
; Line 54658
	mov	edx, DWORD PTR [edi+16]
	push	edx
	push	OFFSET ??_C@_0BE@EGABPGJI@sqlite_subquery_?$CFp_?$AA@
	call	_sqlite3MPrintf
	add	esp, 8
	mov	DWORD PTR [edi+8], eax
$LN49@prepSelect:
; Line 54662
	mov	eax, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [edi+8]
	mov	edx, DWORD PTR _pParse$[esp+84]
	push	eax
	push	ecx
	push	edx
	call	_sqlite3ResultSetOfSelect
	add	esp, 12					; 0000000cH
; Line 54663
	test	eax, eax
	mov	DWORD PTR [edi+12], eax
	je	SHORT $LN308@prepSelect
; Line 54670
	mov	BYTE PTR [eax+53], 1
; Line 54672
	jmp	SHORT $LN53@prepSelect
$LN50@prepSelect:
; Line 54676
	mov	esi, DWORD PTR [edi]
	mov	ecx, DWORD PTR _pParse$[esp+84]
	call	_sqlite3LocateTable
	mov	esi, eax
; Line 54677
	test	esi, esi
	mov	DWORD PTR [edi+12], esi
	je	SHORT $LN308@prepSelect
; Line 54680
	add	DWORD PTR [esi+28], 1
; Line 54682
	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN44@prepSelect
	cmp	BYTE PTR [esi+57], 0
	je	SHORT $LN53@prepSelect
$LN44@prepSelect:
; Line 54684
	mov	eax, DWORD PTR _pParse$[esp+84]
	push	esi
	push	eax
	call	_sqlite3ViewGetColumnNames
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN308@prepSelect
; Line 54692
	cmp	DWORD PTR [edi+16], eax
	jne	SHORT $LN53@prepSelect
; Line 54693
	mov	ecx, DWORD PTR [esi+24]
	push	ecx
	call	_sqlite3SelectDup
	add	esp, 4
	mov	DWORD PTR [edi+16], eax
$LN53@prepSelect:
	movsx	edx, WORD PTR [ebp]
	add	ebx, 1
	add	edi, 48					; 00000030H
	cmp	ebx, edx
	jl	$LL54@prepSelect
; Line 54792
	mov	esi, DWORD PTR _p$[esp+84]
$LN52@prepSelect:
; Line 54702
	mov	eax, DWORD PTR _pParse$[esp+84]
	push	esi
	push	eax
	call	_sqliteProcessJoin
	add	esp, 8
	test	eax, eax
	je	SHORT $LN41@prepSelect
$LN308@prepSelect:
	pop	edi
	pop	ebx
	pop	esi
	mov	eax, 1
	pop	ebp
; Line 54829
	add	esp, 72					; 00000048H
	ret	0
$LN305@prepSelect:
	pop	edi
	pop	ebx
	pop	esi
; Line 54650
	xor	eax, eax
	pop	ebp
; Line 54829
	add	esp, 72					; 00000048H
	ret	0
$LN41@prepSelect:
; Line 54714
	mov	ebx, DWORD PTR _pEList$[esp+88]
	mov	esi, DWORD PTR [ebx]
	xor	ebp, ebp
	xor	edx, edx
	cmp	esi, ebp
	jle	SHORT $LN330@prepSelect
	mov	edi, DWORD PTR [ebx+12]
$LL40@prepSelect:
; Line 54715
	mov	eax, DWORD PTR [edi]
; Line 54716
	mov	cl, BYTE PTR [eax]
	cmp	cl, 107					; 0000006bH
	je	SHORT $LN330@prepSelect
; Line 54718
	cmp	cl, 112					; 00000070H
	jne	SHORT $LN39@prepSelect
	mov	ecx, DWORD PTR [eax+12]
	cmp	ecx, ebp
	je	SHORT $LN39@prepSelect
	cmp	BYTE PTR [ecx], 107			; 0000006bH
	jne	SHORT $LN39@prepSelect
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, ebp
	je	SHORT $LN39@prepSelect
	cmp	BYTE PTR [eax], 23			; 00000017H
	je	SHORT $LN330@prepSelect
$LN39@prepSelect:
; Line 54714
	add	edx, 1
	add	edi, 12					; 0000000cH
	cmp	edx, esi
	jl	SHORT $LL40@prepSelect
$LN330@prepSelect:
; Line 54720
	xor	ecx, ecx
; Line 54721
	cmp	edx, esi
	mov	DWORD PTR _rc$[esp+88], ecx
	jge	$LN342@prepSelect
; Line 54729
	mov	edx, DWORD PTR _pParse$[esp+84]
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+8]
; Line 54731
	test	al, 32					; 00000020H
	mov	ecx, DWORD PTR [ebx+12]
	mov	DWORD PTR _pNew$98892[esp+88], ebp
	je	SHORT $LN59@prepSelect
	test	al, 64					; 00000040H
	mov	DWORD PTR _longNames$98894[esp+88], 1
	je	SHORT $LN60@prepSelect
$LN59@prepSelect:
	mov	DWORD PTR _longNames$98894[esp+88], ebp
$LN60@prepSelect:
; Line 54733
	cmp	esi, ebp
	mov	DWORD PTR _k$[esp+88], ebp
	jle	$LN32@prepSelect
	mov	DWORD PTR tv1435[esp+88], ecx
	npad	8
$LL335@prepSelect:
; Line 54734
	mov	ebp, DWORD PTR tv1435[esp+88]
	mov	eax, DWORD PTR [ebp]
; Line 54736
	mov	cl, BYTE PTR [eax]
	xor	edi, edi
	cmp	cl, 107					; 0000006bH
	je	SHORT $LN31@prepSelect
	cmp	cl, 112					; 00000070H
	jne	SHORT $LN30@prepSelect
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, edi
	je	SHORT $LN30@prepSelect
	cmp	BYTE PTR [edx], 107			; 0000006bH
	je	SHORT $LN31@prepSelect
$LN30@prepSelect:
; Line 54739
	push	edi
	push	eax
	mov	eax, DWORD PTR _pNew$98892[esp+96]
	call	_sqlite3ExprListAppend
	mov	ecx, eax
	add	esp, 8
; Line 54740
	cmp	ecx, edi
	mov	DWORD PTR _pNew$98892[esp+88], ecx
	je	SHORT $LN29@prepSelect
; Line 54741
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR [ebp+4]
	mov	DWORD PTR [eax+edx*4-8], ecx
; Line 54745
	mov	DWORD PTR [ebp], edi
; Line 54746
	mov	DWORD PTR [ebp+4], edi
; Line 54747
	jmp	$LN33@prepSelect
$LN29@prepSelect:
; Line 54743
	mov	DWORD PTR _rc$[esp+88], 1
; Line 54745
	mov	DWORD PTR [ebp], edi
; Line 54746
	mov	DWORD PTR [ebp+4], edi
; Line 54747
	jmp	$LN33@prepSelect
$LN31@prepSelect:
; Line 54752
	cmp	cl, 112					; 00000070H
	mov	DWORD PTR _tableSeen$98904[esp+88], edi
	jne	SHORT $LN26@prepSelect
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, edi
	je	SHORT $LN26@prepSelect
; Line 54753
	add	eax, 20					; 00000014H
	cmp	eax, edi
	je	SHORT $LN187@prepSelect
	mov	esi, DWORD PTR [eax+4]
	mov	ebx, DWORD PTR [eax]
	shr	esi, 1
	cmp	ebx, edi
	jne	SHORT $LN191@prepSelect
	xor	edi, edi
	mov	esi, edi
	call	_sqlite3Dequote
	mov	ebx, edi
	mov	DWORD PTR _zTName$98905[esp+88], edi
; Line 54754
	jmp	SHORT $LN25@prepSelect
; Line 54753
$LN191@prepSelect:
	lea	ecx, DWORD PTR [esi+1]
	call	_sqlite3MallocRaw
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN190@prepSelect
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [edi+esi], 0
$LN190@prepSelect:
	mov	esi, edi
	call	_sqlite3Dequote
	mov	ebx, edi
	mov	DWORD PTR _zTName$98905[esp+88], edi
; Line 54754
	jmp	SHORT $LN25@prepSelect
; Line 54753
$LN187@prepSelect:
	xor	edi, edi
	mov	ebx, edi
	mov	DWORD PTR _zTName$98905[esp+88], edi
; Line 54754
	jmp	SHORT $LN25@prepSelect
$LN26@prepSelect:
; Line 54755
	xor	ebx, ebx
	mov	DWORD PTR _zTName$98905[esp+88], ebx
$LN25@prepSelect:
; Line 54757
	mov	eax, DWORD PTR tv675[esp+88]
	cmp	WORD PTR [eax], 0
	mov	DWORD PTR _i$[esp+88], 0
	jle	$LN321@prepSelect
	lea	ecx, DWORD PTR [eax+16]
	lea	edi, DWORD PTR [eax-28]
	mov	DWORD PTR tv1328[esp+88], ecx
	mov	DWORD PTR tv1375[esp+88], edi
	npad	7
$LL24@prepSelect:
; Line 54759
	mov	edx, DWORD PTR [ecx]
; Line 54760
	test	edx, edx
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR _pTab$98911[esp+88], esi
	mov	DWORD PTR _zTabName$98912[esp+88], edx
	je	SHORT $LN20@prepSelect
	cmp	BYTE PTR [edx], 0
	jne	SHORT $LN21@prepSelect
$LN20@prepSelect:
; Line 54761
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR _zTabName$98912[esp+88], edx
$LN21@prepSelect:
; Line 54764
	test	ebx, ebx
	je	SHORT $LN19@prepSelect
	test	edx, edx
	je	$LN23@prepSelect
	cmp	BYTE PTR [edx], 0
	je	$LN23@prepSelect
	mov	ecx, ebx
	call	_sqlite3StrICmp
	test	eax, eax
; Line 54765
	jne	$LN23@prepSelect
$LN19@prepSelect:
; Line 54768
	cmp	DWORD PTR [esi+4], 0
	mov	DWORD PTR _tableSeen$98904[esp+88], 1
	mov	DWORD PTR _j$[esp+88], 0
	jle	$LN23@prepSelect
; Line 54767
	mov	DWORD PTR tv1313[esp+88], 0
$LL17@prepSelect:
; Line 54772
	cmp	DWORD PTR _i$[esp+88], 0
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR tv1313[esp+88]
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR _zName$98922[esp+88], eax
	jle	$LN12@prepSelect
; Line 54775
	test	BYTE PTR [edi+57], 4
	je	SHORT $LN13@prepSelect
	mov	ecx, DWORD PTR [edi]
	push	eax
	call	_columnIndex
	add	esp, 4
	test	eax, eax
	jge	$LN16@prepSelect
$LN13@prepSelect:
; Line 54780
	mov	eax, DWORD PTR [edi+68]
	test	eax, eax
	je	SHORT $LN12@prepSelect
	mov	ebp, DWORD PTR [eax+4]
	xor	edi, edi
	test	ebp, ebp
	jle	SHORT $LN12@prepSelect
	mov	esi, DWORD PTR [eax]
$LL197@prepSelect:
	mov	ecx, DWORD PTR [esi]
	mov	al, BYTE PTR [ecx]
	test	al, al
	mov	edx, DWORD PTR _zName$98922[esp+88]
	je	SHORT $LN336@prepSelect
$LL202@prepSelect:
	movzx	ebx, BYTE PTR [edx]
	movzx	eax, al
	mov	al, BYTE PTR _sqlite3UpperToLower[eax]
	cmp	al, BYTE PTR _sqlite3UpperToLower[ebx]
	jne	SHORT $LN336@prepSelect
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL202@prepSelect
$LN336@prepSelect:
	movzx	ecx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[ecx]
	movzx	ecx, BYTE PTR [edx]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[ecx]
	sub	eax, edx
	je	SHORT $LN199@prepSelect
	add	edi, 1
	add	esi, 8
	cmp	edi, ebp
	jl	SHORT $LL197@prepSelect
; Line 54792
	jmp	SHORT $LN12@prepSelect
; Line 54780
$LN199@prepSelect:
	test	edi, edi
	jge	$LN16@prepSelect
$LN12@prepSelect:
; Line 54786
	mov	edi, DWORD PTR _inMutex
	xor	ebx, ebx
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN221@prepSelect
	cmp	edi, ebx
	jg	$LN341@prepSelect
$LN221@prepSelect:
	push	72					; 00000048H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	cmp	esi, ebx
	jne	SHORT $LN323@prepSelect
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN231@prepSelect
	cmp	edi, ebx
	jg	SHORT $LN338@prepSelect
$LN231@prepSelect:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN338@prepSelect
$LN323@prepSelect:
	push	72					; 00000048H
	push	ebx
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN338@prepSelect:
	cmp	esi, ebx
	je	$LN341@prepSelect
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+12], ebx
	mov	ebx, esi
	mov	BYTE PTR [esi], 23			; 00000017H
	mov	DWORD PTR [esi+48], -1
	call	_sqlite3ExprSetHeight
; Line 54788
	mov	eax, DWORD PTR _zName$98922[esp+88]
	lea	ebx, DWORD PTR [esi+20]
	xor	edi, edi
	cmp	eax, edi
	mov	DWORD PTR tv1180[esp+88], ebx
	mov	DWORD PTR [ebx], eax
	je	SHORT $LN249@prepSelect
	lea	edx, DWORD PTR [eax+1]
	npad	7
$LL326@prepSelect:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL326@prepSelect
	sub	eax, edx
	jmp	SHORT $LN250@prepSelect
$LN249@prepSelect:
	xor	eax, eax
$LN250@prepSelect:
; Line 54789
	mov	ebp, DWORD PTR _zTabName$98912[esp+88]
	add	eax, eax
	cmp	ebp, edi
	mov	DWORD PTR [ebx+4], eax
	je	$LN339@prepSelect
	cmp	DWORD PTR _longNames$98894[esp+88], edi
	jne	SHORT $LN333@prepSelect
	mov	ecx, DWORD PTR tv675[esp+88]
	cmp	WORD PTR [ecx], 1
	jle	$LN339@prepSelect
$LN333@prepSelect:
; Line 54790
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN267@prepSelect
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN324@prepSelect
$LN267@prepSelect:
	push	72					; 00000048H
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	cmp	ebx, edi
	jne	SHORT $LN325@prepSelect
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN343@prepSelect
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN260@prepSelect
$LN343@prepSelect:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN260@prepSelect
$LN325@prepSelect:
	push	72					; 00000048H
	push	edi
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN260@prepSelect:
	cmp	ebx, edi
	jne	SHORT $LN257@prepSelect
$LN324@prepSelect:
	push	edi
	call	_sqlite3ExprDelete
	push	edi
	call	_sqlite3ExprDelete
	add	esp, 8
	xor	ebx, ebx
	jmp	SHORT $LN258@prepSelect
$LN257@prepSelect:
	mov	BYTE PTR [ebx], 23			; 00000017H
	mov	DWORD PTR [ebx+8], edi
	mov	DWORD PTR [ebx+12], edi
	mov	DWORD PTR [ebx+48], -1
	call	_sqlite3ExprSetHeight
$LN258@prepSelect:
; Line 54791
	push	ebx
	push	112					; 00000070H
	xor	eax, eax
	mov	edi, esi
	call	_sqlite3Expr
	mov	esi, eax
	add	esp, 8
; Line 54792
	test	esi, esi
	je	$LN23@prepSelect
; Line 54793
	mov	eax, ebp
	mov	DWORD PTR [ebx+20], ebp
	lea	edx, DWORD PTR [eax+1]
	npad	1
$LL327@prepSelect:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL327@prepSelect
	sub	eax, edx
	lea	edx, DWORD PTR [eax+eax]
; Line 54794
	mov	eax, DWORD PTR _zName$98922[esp+88]
	push	eax
	push	ebp
	push	OFFSET ??_C@_05NNFHCGPF@?$CFs?4?$CFs?$AA@
	mov	DWORD PTR [ebx+24], edx
	call	_sqlite3MPrintf
	xor	ebx, ebx
	add	esp, 12					; 0000000cH
	cmp	eax, ebx
	lea	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [ecx], eax
	je	SHORT $LN291@prepSelect
	lea	edi, DWORD PTR [eax+1]
$LL328@prepSelect:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	cmp	dl, bl
	jne	SHORT $LL328@prepSelect
	sub	eax, edi
	jmp	SHORT $LN292@prepSelect
$LN291@prepSelect:
	xor	eax, eax
$LN292@prepSelect:
	lea	edx, DWORD PTR [eax+eax]
	mov	DWORD PTR [ecx+4], edx
; Line 54795
	or	DWORD PTR [esi+32], 1
; Line 54796
	mov	DWORD PTR [esi+20], ebx
; Line 54798
	mov	DWORD PTR [esi+24], ebx
; Line 54799
	jmp	SHORT $LN7@prepSelect
$LN339@prepSelect:
; Line 54801
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
$LN7@prepSelect:
; Line 54803
	cmp	DWORD PTR _longNames$98894[esp+88], 0
	je	SHORT $LN6@prepSelect
; Line 54804
	push	ecx
; Line 54805
	jmp	SHORT $LN349@prepSelect
$LN6@prepSelect:
; Line 54806
	mov	eax, DWORD PTR tv1180[esp+88]
	push	eax
$LN349@prepSelect:
	mov	eax, DWORD PTR _pNew$98892[esp+92]
	push	esi
	call	_sqlite3ExprListAppend
	mov	DWORD PTR _pNew$98892[esp+96], eax
	add	esp, 8
$LN16@prepSelect:
	mov	eax, DWORD PTR _j$[esp+88]
	mov	esi, DWORD PTR _pTab$98911[esp+88]
	add	DWORD PTR tv1313[esp+88], 20		; 00000014H
	add	eax, 1
	cmp	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _j$[esp+88], eax
	jge	SHORT $LN23@prepSelect
; Line 54768
	mov	edi, DWORD PTR tv1375[esp+88]
	jmp	$LL17@prepSelect
$LN341@prepSelect:
; Line 54786
	push	ebx
	call	_sqlite3ExprDelete
	push	ebx
	call	_sqlite3ExprDelete
	add	esp, 8
$LN23@prepSelect:
	mov	edx, DWORD PTR tv675[esp+88]
	mov	eax, DWORD PTR _i$[esp+88]
	mov	edi, DWORD PTR tv1375[esp+88]
	mov	ecx, DWORD PTR tv1328[esp+88]
	movsx	edx, WORD PTR [edx]
; Line 54810
	mov	ebx, DWORD PTR _zTName$98905[esp+88]
	add	eax, 1
	add	edi, 48					; 00000030H
	add	ecx, 48					; 00000030H
	cmp	eax, edx
	mov	DWORD PTR _i$[esp+88], eax
	mov	DWORD PTR tv1375[esp+88], edi
	mov	DWORD PTR tv1328[esp+88], ecx
	jl	$LL24@prepSelect
	cmp	DWORD PTR _tableSeen$98904[esp+88], 0
	mov	ebp, DWORD PTR tv1435[esp+88]
	jne	SHORT $LN4@prepSelect
$LN321@prepSelect:
; Line 54811
	test	ebx, ebx
; Line 54812
	mov	edi, DWORD PTR _pParse$[esp+84]
	je	SHORT $LN3@prepSelect
	push	ebx
	push	OFFSET ??_C@_0BC@OFCALFBN@no?5such?5table?3?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 54813
	jmp	SHORT $LN2@prepSelect
$LN3@prepSelect:
; Line 54814
	push	OFFSET ??_C@_0BE@EGLAAHPP@no?5tables?5specified?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 4
$LN2@prepSelect:
; Line 54816
	mov	DWORD PTR _rc$[esp+88], 1
$LN4@prepSelect:
; Line 54818
	test	ebx, ebx
	je	SHORT $LN33@prepSelect
	push	ebx
	call	_free
	add	esp, 4
$LN33@prepSelect:
	mov	eax, DWORD PTR _k$[esp+88]
	mov	ecx, DWORD PTR _pEList$[esp+88]
	add	eax, 1
	add	ebp, 12					; 0000000cH
	cmp	eax, DWORD PTR [ecx]
	mov	DWORD PTR _k$[esp+88], eax
	mov	DWORD PTR tv1435[esp+88], ebp
	jl	$LL335@prepSelect
$LN32@prepSelect:
; Line 54821
	mov	ebx, DWORD PTR _pEList$[esp+88]
	call	_sqlite3ExprListDelete
; Line 54822
	mov	edx, DWORD PTR _pNew$98892[esp+88]
	mov	eax, DWORD PTR _p$[esp+84]
	mov	ecx, DWORD PTR _rc$[esp+88]
	mov	DWORD PTR [eax], edx
	xor	ebp, ebp
$LN342@prepSelect:
; Line 54824
	mov	edx, DWORD PTR _p$[esp+84]
	mov	eax, DWORD PTR [edx]
	cmp	eax, ebp
	je	SHORT $LN1@prepSelect
	cmp	DWORD PTR [eax], 2000			; 000007d0H
	jle	SHORT $LN1@prepSelect
; Line 54825
	mov	edi, DWORD PTR _pParse$[esp+84]
	push	OFFSET ??_C@_0BP@JFMLENOH@too?5many?5columns?5in?5result?5set?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 54826
	mov	ecx, 1
$LN1@prepSelect:
	pop	edi
	pop	ebx
	pop	esi
; Line 54828
	mov	eax, ecx
	pop	ebp
; Line 54829
	add	esp, 72					; 00000048H
	ret	0
$LN55@prepSelect:
	pop	esi
; Line 54630
	mov	eax, 1
	pop	ebp
; Line 54829
	add	esp, 72					; 00000048H
	ret	0
_prepSelectStmt ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DJ@GJHHGJCM@ORDER?5BY?5term?5number?5?$CFd?5does?5not@ ; `string'
PUBLIC	??_C@_0DA@NAODHNII@ORDER?5BY?5position?5?$CFd?5should?5be?5b@ ; `string'
;	COMDAT ??_C@_0DJ@GJHHGJCM@ORDER?5BY?5term?5number?5?$CFd?5does?5not@
CONST	SEGMENT
??_C@_0DJ@GJHHGJCM@ORDER?5BY?5term?5number?5?$CFd?5does?5not@ DB 'ORDER B'
	DB	'Y term number %d does not match any result column', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NAODHNII@ORDER?5BY?5position?5?$CFd?5should?5be?5b@
CONST	SEGMENT
??_C@_0DA@NAODHNII@ORDER?5BY?5position?5?$CFd?5should?5be?5b@ DB 'ORDER B'
	DB	'Y position %d should be between 1 and %d', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _matchOrderbyToColumn
_TEXT	SEGMENT
_pEList$ = -24						; size = 4
_nErr$ = -20						; size = 4
_pE$98971 = -16						; size = 4
_zLabel$98973 = -12					; size = 4
_i$ = -8						; size = 4
tv394 = -4						; size = 4
_pParse$ = 8						; size = 4
_iCol$98972 = 12					; size = 4
_pSelect$ = 12						; size = 4
_pOrderBy$ = 16						; size = 4
_iTable$ = 20						; size = 4
_mustComplete$ = 24					; size = 4
_matchOrderbyToColumn PROC				; COMDAT
; Line 54851
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
; Line 54856
	mov	esi, DWORD PTR _pSelect$[esp+32]
	xor	ebp, ebp
	cmp	esi, ebp
	mov	DWORD PTR _nErr$[esp+36], ebp
	je	$LN26@matchOrder
	mov	ebx, DWORD PTR _pOrderBy$[esp+32]
	cmp	ebx, ebp
	je	$LN26@matchOrder
; Line 54857
	cmp	DWORD PTR _mustComplete$[esp+32], ebp
	je	SHORT $LN22@matchOrder
; Line 54858
	xor	eax, eax
	cmp	DWORD PTR [ebx], ebp
	jle	SHORT $LN22@matchOrder
	xor	ecx, ecx
$LL24@matchOrder:
	mov	edx, DWORD PTR [ebx+12]
	mov	BYTE PTR [edx+ecx+10], 0
	add	eax, 1
	add	ecx, 12					; 0000000cH
	cmp	eax, DWORD PTR [ebx]
	jl	SHORT $LL24@matchOrder
$LN22@matchOrder:
	push	edi
; Line 54860
	mov	edi, DWORD PTR _pParse$[esp+36]
	push	esi
	push	edi
	call	_prepSelectStmt
	add	esp, 8
	test	eax, eax
; Line 54861
	jne	SHORT $LN62@matchOrder
; Line 54863
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ebp
	je	SHORT $LN54@matchOrder
; Line 54864
	mov	ecx, DWORD PTR _iTable$[esp+36]
	push	ebp
	push	ecx
	push	ebx
	push	eax
	push	edi
	call	_matchOrderbyToColumn
	add	esp, 20					; 00000014H
	test	eax, eax
	je	SHORT $LN54@matchOrder
$LN62@matchOrder:
	pop	edi
	pop	esi
	pop	ebp
; Line 54865
	mov	eax, 1
	pop	ebx
; Line 54919
	add	esp, 24					; 00000018H
	ret	0
$LN54@matchOrder:
; Line 54869
	cmp	DWORD PTR [ebx], ebp
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR _pEList$[esp+40], edx
	mov	DWORD PTR _i$[esp+40], ebp
	jle	$LN16@matchOrder
	xor	edi, edi
	mov	DWORD PTR tv394[esp+40], edi
$LL18@matchOrder:
; Line 54871
	mov	eax, DWORD PTR [ebx+12]
	mov	esi, DWORD PTR [eax+edi]
	add	eax, edi
; Line 54872
	mov	DWORD PTR _iCol$98972[esp+36], -1
; Line 54875
	cmp	BYTE PTR [eax+10], 0
	mov	DWORD PTR _pE$98971[esp+40], esi
	jne	$LN17@matchOrder
; Line 54876
	lea	ecx, DWORD PTR _iCol$98972[esp+36]
	push	ecx
	push	esi
	call	_sqlite3ExprIsInteger
	add	esp, 8
	test	eax, eax
; Line 54877
	mov	eax, DWORD PTR _iCol$98972[esp+36]
	je	SHORT $LN14@matchOrder
	test	eax, eax
	jle	$LN57@matchOrder
	mov	edx, DWORD PTR _pEList$[esp+40]
	cmp	eax, DWORD PTR [edx]
	jg	$LN57@matchOrder
; Line 54884
	cmp	DWORD PTR _mustComplete$[esp+36], 0
	je	$LN17@matchOrder
; Line 54885
	sub	eax, 1
	mov	DWORD PTR _iCol$98972[esp+36], eax
$LN14@matchOrder:
; Line 54887
	test	eax, eax
	jge	$LN51@matchOrder
	lea	eax, DWORD PTR [esi+20]
	call	_sqlite3NameFromToken
	test	eax, eax
	mov	DWORD PTR _zLabel$98973[esp+40], eax
	je	$LN40@matchOrder
; Line 54888
	mov	eax, DWORD PTR _pEList$[esp+40]
	mov	ebp, DWORD PTR [eax+12]
	xor	edi, edi
	mov	ecx, eax
	cmp	DWORD PTR [ecx], edi
	jle	SHORT $LN7@matchOrder
	npad	3
$LL55@matchOrder:
; Line 54891
	mov	ebx, DWORD PTR [ebp+4]
	test	ebx, ebx
	je	SHORT $LN6@matchOrder
; Line 54892
	call	_sqlite3StrDup
; Line 54893
	jmp	SHORT $LN59@matchOrder
$LN6@matchOrder:
; Line 54894
	mov	eax, DWORD PTR [ebp]
	add	eax, 20					; 00000014H
	call	_sqlite3NameFromToken
$LN59@matchOrder:
	mov	esi, eax
; Line 54896
	test	esi, esi
	je	SHORT $LN30@matchOrder
	mov	edx, DWORD PTR _zLabel$98973[esp+40]
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN30@matchOrder
	lea	ebx, DWORD PTR [eax+1]
	jmp	SHORT $LN31@matchOrder
$LN30@matchOrder:
	xor	ebx, ebx
$LN31@matchOrder:
; Line 54897
	test	esi, esi
	je	SHORT $LN35@matchOrder
	push	esi
	call	_free
	add	esp, 4
$LN35@matchOrder:
; Line 54898
	test	ebx, ebx
	jne	SHORT $LN45@matchOrder
	mov	edx, DWORD PTR _pEList$[esp+40]
	add	edi, 1
	add	ebp, 12					; 0000000cH
	cmp	edi, DWORD PTR [edx]
	jl	SHORT $LL55@matchOrder
; Line 54911
	jmp	SHORT $LN60@matchOrder
$LN45@matchOrder:
; Line 54899
	mov	DWORD PTR _iCol$98972[esp+36], edi
$LN60@matchOrder:
	mov	esi, DWORD PTR _pE$98971[esp+40]
	mov	ebx, DWORD PTR _pOrderBy$[esp+36]
$LN7@matchOrder:
; Line 54903
	mov	eax, DWORD PTR _zLabel$98973[esp+40]
	push	eax
	call	_free
	mov	edi, DWORD PTR tv394[esp+44]
	mov	ebp, DWORD PTR _i$[esp+44]
	add	esp, 4
$LN40@matchOrder:
; Line 54905
	cmp	DWORD PTR _iCol$98972[esp+36], 0
	jl	SHORT $LN3@matchOrder
$LN51@matchOrder:
; Line 54908
	mov	edx, DWORD PTR _iTable$[esp+36]
	mov	BYTE PTR [esi], 149			; 00000095H
	mov	ecx, DWORD PTR _iCol$98972[esp+36]
	mov	DWORD PTR [esi+40], ecx
	mov	DWORD PTR [esi+36], edx
; Line 54909
	mov	DWORD PTR [esi+48], -1
; Line 54910
	mov	eax, DWORD PTR [ebx+12]
	mov	BYTE PTR [eax+edi+10], 1
	jmp	SHORT $LN17@matchOrder
$LN3@matchOrder:
; Line 54911
	cmp	DWORD PTR _mustComplete$[esp+36], 0
	jne	SHORT $LN47@matchOrder
$LN17@matchOrder:
; Line 54869
	add	ebp, 1
	add	edi, 12					; 0000000cH
	cmp	ebp, DWORD PTR [ebx]
	mov	DWORD PTR _i$[esp+40], ebp
	mov	DWORD PTR tv394[esp+40], edi
	jl	$LL18@matchOrder
; Line 54918
	mov	eax, DWORD PTR _nErr$[esp+40]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 54919
	add	esp, 24					; 00000018H
	ret	0
$LN57@matchOrder:
; Line 54880
	mov	ecx, DWORD PTR _pEList$[esp+40]
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR _pParse$[esp+36]
	push	edx
	push	eax
	push	OFFSET ??_C@_0DA@NAODHNII@ORDER?5BY?5position?5?$CFd?5should?5be?5b@
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
; Line 54914
	mov	DWORD PTR _nErr$[esp+32], 1
; Line 54918
	mov	eax, DWORD PTR _nErr$[esp+32]
	pop	ebp
	pop	ebx
; Line 54919
	add	esp, 24					; 00000018H
	ret	0
$LN47@matchOrder:
; Line 54913
	mov	edi, DWORD PTR _pParse$[esp+36]
	add	ebp, 1
	push	ebp
	push	OFFSET ??_C@_0DJ@GJHHGJCM@ORDER?5BY?5term?5number?5?$CFd?5does?5not@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 54914
	mov	DWORD PTR _nErr$[esp+40], 1
$LN16@matchOrder:
; Line 54918
	mov	eax, DWORD PTR _nErr$[esp+40]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 54919
	add	esp, 24					; 00000018H
	ret	0
$LN26@matchOrder:
	pop	esi
	pop	ebp
; Line 54856
	mov	eax, 1
	pop	ebx
; Line 54919
	add	esp, 24					; 00000018H
	ret	0
_matchOrderbyToColumn ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FC@CMDCIIHA@SELECTs?5to?5the?5left?5and?5right?5of@ ; `string'
PUBLIC	??_C@_0CN@DDIHOHHL@LIMIT?5clause?5should?5come?5after?5?$CF@ ; `string'
PUBLIC	??_C@_0DA@GPNKNMMI@ORDER?5BY?5clause?5should?5come?5afte@ ; `string'
EXTRN	_memmove:PROC
;	COMDAT ??_C@_0FC@CMDCIIHA@SELECTs?5to?5the?5left?5and?5right?5of@
CONST	SEGMENT
??_C@_0FC@CMDCIIHA@SELECTs?5to?5the?5left?5and?5right?5of@ DB 'SELECTs to'
	DB	' the left and right of %s do not have the same number of resu'
	DB	'lt columns', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DDIHOHHL@LIMIT?5clause?5should?5come?5after?5?$CF@
CONST	SEGMENT
??_C@_0CN@DDIHOHHL@LIMIT?5clause?5should?5come?5after?5?$CF@ DB 'LIMIT cl'
	DB	'ause should come after %s not before', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GPNKNMMI@ORDER?5BY?5clause?5should?5come?5afte@
CONST	SEGMENT
??_C@_0DA@GPNKNMMI@ORDER?5BY?5clause?5should?5come?5afte@ DB 'ORDER BY cl'
	DB	'ause should come after %s not before', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _multiSelect
_TEXT	SEGMENT
_rc$ = -40						; size = 4
_pOrderBy$ = -36					; size = 4
tv1315 = -32						; size = 4
_apColl$99156 = -32					; size = 4
tv1407 = -28						; size = 4
_iBreak$99126 = -28					; size = 4
_op$99087 = -28						; size = 4
_pOTerm$99176 = -24					; size = 4
_i$99152 = -24						; size = 4
_nSetP2$ = -24						; size = 4
_pLoop$99154 = -20					; size = 4
_iCont$99125 = -20					; size = 4
_iCont$99112 = -20					; size = 4
_priorOp$99088 = -20					; size = 4
_addr$99079 = -20					; size = 4
_pOffset$99129 = -16					; size = 4
_pLimit$99089 = -16					; size = 4
tv1498 = -12						; size = 4
_addr$99178 = -12					; size = 4
_pKeyInfo$99153 = -12					; size = 4
_iStart$99127 = -12					; size = 4
_pLimit$99128 = -12					; size = 4
_iStart$99114 = -12					; size = 4
_pOffset$99090 = -12					; size = 4
_aSetP2$ = -8						; size = 8
_pParse$ = 8						; size = 4
_eDest$ = 12						; size = 4
_iParm$ = 16						; size = 4
_aff$ = 20						; size = 4
_multiSelect PROC					; COMDAT
; _p$ = eax
; Line 55080
	sub	esp, 40					; 00000028H
	push	ebx
	mov	ebx, DWORD PTR _pParse$[esp+40]
	push	ebp
	push	esi
; Line 55081
	xor	ecx, ecx
	mov	esi, eax
; Line 55092
	cmp	esi, ecx
	push	edi
	mov	DWORD PTR _rc$[esp+56], ecx
	mov	DWORD PTR _nSetP2$[esp+56], ecx
	je	SHORT $LN63@multiSelec@2
	mov	eax, DWORD PTR [esi+32]
	cmp	eax, ecx
	mov	DWORD PTR tv1315[esp+56], eax
	je	SHORT $LN63@multiSelec@2
; Line 55099
	cmp	DWORD PTR [eax+28], ecx
	je	SHORT $LN62@multiSelec@2
; Line 55101
	movzx	eax, BYTE PTR [esi+4]
	sub	eax, 107				; 0000006bH
	je	SHORT $LN72@multiSelec@2
	sub	eax, 1
	je	SHORT $LN70@multiSelec@2
	sub	eax, 1
	je	SHORT $LN71@multiSelec@2
	mov	eax, OFFSET ??_C@_05GJNJOPB@UNION?$AA@
	jmp	SHORT $LN73@multiSelec@2
$LN71@multiSelec@2:
	mov	eax, OFFSET ??_C@_09JBOBNLLF@INTERSECT?$AA@
	jmp	SHORT $LN73@multiSelec@2
$LN70@multiSelec@2:
	mov	eax, OFFSET ??_C@_06JFIPMMLD@EXCEPT?$AA@
	jmp	SHORT $LN73@multiSelec@2
$LN72@multiSelec@2:
	mov	eax, OFFSET ??_C@_09CDPONBKL@UNION?5ALL?$AA@
$LN73@multiSelec@2:
	push	eax
	push	OFFSET ??_C@_0DA@GPNKNMMI@ORDER?5BY?5clause?5should?5come?5afte@
$LN262@multiSelec@2:
; Line 55107
	mov	edi, ebx
$LN263@multiSelec@2:
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN63@multiSelec@2:
; Line 55093
	mov	DWORD PTR _rc$[esp+56], 1
$multi_select_end$99062:
; Line 55466
	mov	eax, DWORD PTR _rc$[esp+56]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 55467
	add	esp, 40					; 00000028H
	ret	0
$LN62@multiSelec@2:
; Line 55105
	cmp	DWORD PTR [eax+40], ecx
	je	SHORT $LN61@multiSelec@2
; Line 55107
	movzx	eax, BYTE PTR [esi+4]
	call	_selectOpName
	push	eax
	push	OFFSET ??_C@_0CN@DDIHOHHL@LIMIT?5clause?5should?5come?5after?5?$CF@
; Line 55109
	jmp	SHORT $LN262@multiSelec@2
$LN61@multiSelec@2:
; Line 55114
	mov	ebp, DWORD PTR [ebx+12]
	cmp	ebp, ecx
	jne	SHORT $LN260@multiSelec@2
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
	mov	ebp, eax
; Line 55115
	test	ebp, ebp
	mov	DWORD PTR [ebx+12], eax
; Line 55117
	je	SHORT $LN63@multiSelec@2
$LN260@multiSelec@2:
; Line 55122
	cmp	DWORD PTR _eDest$[esp+52], 8
	jne	SHORT $LN248@multiSelec@2
; Line 55125
	mov	eax, DWORD PTR _iParm$[esp+52]
	push	0
	push	eax
	push	121					; 00000079H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _aSetP2$[esp+56], eax
	mov	DWORD PTR _nSetP2$[esp+56], 1
; Line 55126
	mov	DWORD PTR _eDest$[esp+52], 7
$LN248@multiSelec@2:
; Line 55131
	mov	ecx, DWORD PTR [esi+28]
; Line 55132
	mov	al, BYTE PTR [esi+4]
	mov	DWORD PTR _pOrderBy$[esp+56], ecx
	movzx	ecx, al
	add	ecx, -106				; ffffff96H
	cmp	ecx, 3
	ja	$LN249@multiSelec@2
	jmp	DWORD PTR $LN264@multiSelec@2[ecx*4]
$LN56@multiSelec@2:
; Line 55134
	cmp	DWORD PTR _pOrderBy$[esp+56], 0
	jne	$LN250@multiSelec@2
; Line 55139
	mov	ecx, DWORD PTR _aff$[esp+52]
	mov	edx, DWORD PTR [esi+40]
	mov	edi, DWORD PTR tv1315[esp+56]
	mov	ebx, DWORD PTR _eDest$[esp+52]
	push	ecx
	push	0
	push	0
	mov	DWORD PTR [edi+40], edx
	mov	edx, DWORD PTR _iParm$[esp+64]
	mov	eax, DWORD PTR [esi+44]
	push	0
	push	edx
	push	ebx
	mov	DWORD PTR [edi+44], eax
	mov	eax, DWORD PTR _pParse$[esp+76]
	push	edi
	push	eax
	mov	DWORD PTR _addr$99079[esp+88], 0
	call	_sqlite3Select
; Line 55140
	xor	ecx, ecx
	add	esp, 32					; 00000020H
; Line 55142
	cmp	eax, ecx
	mov	DWORD PTR _rc$[esp+56], eax
	mov	DWORD PTR [esi+40], ecx
	mov	DWORD PTR [esi+44], ecx
	jne	$multi_select_end$99062
; Line 55145
	mov	DWORD PTR [esi+32], ecx
; Line 55146
	mov	ecx, DWORD PTR [edi+48]
	mov	DWORD PTR [esi+48], ecx
; Line 55147
	mov	edx, DWORD PTR [edi+52]
; Line 55148
	mov	eax, ecx
	test	eax, eax
	mov	DWORD PTR [esi+52], edx
	jl	SHORT $LN53@multiSelec@2
; Line 55149
	push	0
	push	eax
	push	119					; 00000077H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _addr$99079[esp+56], eax
$LN53@multiSelec@2:
; Line 55152
	mov	eax, DWORD PTR _aff$[esp+52]
	mov	ecx, DWORD PTR _iParm$[esp+52]
	mov	edx, DWORD PTR _pParse$[esp+52]
	push	eax
	push	0
	push	0
	push	0
	push	ecx
	push	ebx
	push	esi
	push	edx
	call	_sqlite3Select
	add	esp, 32					; 00000020H
; Line 55154
	test	eax, eax
	mov	DWORD PTR _rc$[esp+56], eax
	mov	DWORD PTR [esi+32], edi
	jne	$multi_select_end$99062
; Line 55157
	mov	eax, DWORD PTR _addr$99079[esp+56]
	test	eax, eax
	je	$LN249@multiSelec@2
; Line 55158
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
; Line 55160
	jmp	$LN249@multiSelec@2
$LN250@multiSelec@2:
; Line 55172
	sub	al, 107					; 0000006bH
	neg	al
	mov	DWORD PTR _op$99087[esp+56], 0
	sbb	eax, eax
	and	eax, -6					; fffffffaH
	add	eax, 7
; Line 55173
	cmp	DWORD PTR _eDest$[esp+52], eax
	mov	DWORD PTR _priorOp$99088[esp+56], eax
	jne	SHORT $LN259@multiSelec@2
	cmp	DWORD PTR _pOrderBy$[esp+56], 0
	jne	SHORT $LN259@multiSelec@2
	cmp	DWORD PTR [esi+40], 0
	jne	SHORT $LN259@multiSelec@2
	cmp	DWORD PTR [esi+44], 0
	jne	SHORT $LN259@multiSelec@2
; Line 55177
	mov	edi, DWORD PTR _iParm$[esp+52]
; Line 55178
	jmp	SHORT $LN48@multiSelec@2
$LN259@multiSelec@2:
; Line 55183
	cmp	DWORD PTR _pOrderBy$[esp+56], 0
	mov	edi, DWORD PTR [ebx+28]
	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR [ebx+28], eax
	je	SHORT $LN254@multiSelec@2
	mov	ecx, DWORD PTR _pOrderBy$[esp+56]
	push	1
	push	edi
	push	ecx
	push	esi
	push	ebx
	call	_matchOrderbyToColumn
	add	esp, 20					; 00000014H
	test	eax, eax
; Line 55185
	jne	$LN63@multiSelec@2
$LN254@multiSelec@2:
; Line 55187
	push	0
	push	edi
	push	121					; 00000079H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 55188
	cmp	DWORD PTR _priorOp$99088[esp+56], 7
	jne	SHORT $LN46@multiSelec@2
; Line 55190
	mov	ecx, DWORD PTR _nSetP2$[esp+56]
	mov	DWORD PTR _aSetP2$[esp+ecx*4+56], eax
	add	ecx, 1
	mov	DWORD PTR _nSetP2$[esp+56], ecx
; Line 55191
	jmp	SHORT $LN45@multiSelec@2
$LN46@multiSelec@2:
; Line 55194
	mov	edx, DWORD PTR [esi+36]
	mov	DWORD PTR [esi+56], eax
	mov	BYTE PTR [edx+8], 1
$LN45@multiSelec@2:
; Line 55196
	mov	ecx, DWORD PTR _pOrderBy$[esp+56]
	push	esi
	mov	eax, ebx
	call	_createSortingIndex
	add	esp, 4
$LN48@multiSelec@2:
; Line 55203
	mov	eax, DWORD PTR _aff$[esp+52]
	mov	ecx, DWORD PTR _priorOp$99088[esp+56]
	mov	edx, DWORD PTR tv1315[esp+56]
	push	eax
	push	0
	push	0
	push	0
	push	edi
	push	ecx
	push	edx
	push	ebx
	call	_sqlite3Select
	add	esp, 32					; 00000020H
; Line 55204
	test	eax, eax
	mov	DWORD PTR _rc$[esp+56], eax
	jne	$multi_select_end$99062
; Line 55210
	movzx	eax, BYTE PTR [esi+4]
	sub	eax, 106				; 0000006aH
	je	SHORT $LN40@multiSelec@2
	sub	eax, 1
	je	SHORT $LN39@multiSelec@2
	sub	eax, 1
	jne	SHORT $LN42@multiSelec@2
; Line 55211
	mov	DWORD PTR _op$99087[esp+56], 2
	jmp	SHORT $LN42@multiSelec@2
$LN39@multiSelec@2:
; Line 55213
	mov	DWORD PTR _op$99087[esp+56], 7
	jmp	SHORT $LN42@multiSelec@2
$LN40@multiSelec@2:
; Line 55212
	mov	DWORD PTR _op$99087[esp+56], 1
$LN42@multiSelec@2:
; Line 55218
	mov	edx, DWORD PTR [esi+40]
	xor	eax, eax
	cmp	DWORD PTR _pOrderBy$[esp+56], eax
	mov	DWORD PTR _pLimit$99089[esp+56], edx
; Line 55222
	mov	edx, DWORD PTR _aff$[esp+52]
	push	edx
	push	eax
	push	eax
	setne	cl
	push	eax
	mov	BYTE PTR [esi+9], cl
	mov	ecx, DWORD PTR [esi+44]
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+40], eax
	mov	DWORD PTR [esi+44], eax
	mov	eax, DWORD PTR _op$99087[esp+72]
	push	edi
	push	eax
	mov	DWORD PTR _pOffset$99090[esp+80], ecx
	mov	ecx, DWORD PTR _pParse$[esp+76]
	push	esi
	push	ecx
	call	_sqlite3Select
; Line 55225
	mov	ebx, DWORD PTR [esi+28]
	mov	DWORD PTR _rc$[esp+88], eax
	call	_sqlite3ExprListDelete
; Line 55228
	mov	ecx, DWORD PTR [esi+40]
	mov	edx, DWORD PTR tv1315[esp+88]
	mov	eax, DWORD PTR _pOrderBy$[esp+88]
	push	ecx
	mov	DWORD PTR [esi+32], edx
	mov	DWORD PTR [esi+28], eax
	call	_sqlite3ExprDelete
; Line 55230
	mov	eax, DWORD PTR _pOffset$99090[esp+92]
	mov	edx, DWORD PTR _pLimit$99089[esp+92]
	mov	DWORD PTR [esi+44], eax
; Line 55231
	or	eax, -1
	add	esp, 36					; 00000024H
; Line 55233
	cmp	DWORD PTR _rc$[esp+56], 0
	mov	DWORD PTR [esi+40], edx
	mov	DWORD PTR [esi+48], eax
	mov	DWORD PTR [esi+52], eax
	jne	$multi_select_end$99062
; Line 55241
	mov	eax, DWORD PTR _eDest$[esp+52]
	cmp	eax, DWORD PTR _priorOp$99088[esp+56]
	jne	SHORT $LN251@multiSelec@2
	cmp	edi, DWORD PTR _iParm$[esp+52]
	je	$LN249@multiSelec@2
$LN251@multiSelec@2:
; Line 55244
	cmp	eax, 4
	jne	SHORT $LN252@multiSelec@2
; Line 55246
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	mov	ecx, esi
	je	SHORT $LN33@multiSelec@2
$LL34@multiSelec@2:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+32]
	test	eax, eax
	jne	SHORT $LL34@multiSelec@2
$LN33@multiSelec@2:
; Line 55247
	mov	edx, DWORD PTR _pParse$[esp+52]
	mov	ecx, DWORD PTR [ecx]
	push	0
	push	edx
	call	_generateColumnNames
	add	esp, 8
$LN252@multiSelec@2:
; Line 55249
	mov	eax, ebp
	call	_sqlite3VdbeMakeLabel
	mov	ebx, eax
; Line 55250
	mov	eax, ebp
	call	_sqlite3VdbeMakeLabel
	mov	DWORD PTR _iCont$99112[esp+56], eax
; Line 55251
	mov	eax, DWORD PTR _pParse$[esp+52]
	push	ebx
	push	esi
	call	_computeLimitRegisters
; Line 55252
	push	ebx
	push	edi
	push	127					; 0000007fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 55256
	mov	ecx, DWORD PTR _iCont$99112[esp+76]
	mov	edx, DWORD PTR _iParm$[esp+72]
	mov	eax, DWORD PTR [ebp+12]
	push	0
	push	ebx
	push	ecx
	mov	ecx, DWORD PTR _eDest$[esp+84]
	push	edx
	mov	edx, DWORD PTR _pOrderBy$[esp+92]
	push	ecx
	mov	ecx, DWORD PTR _pParse$[esp+92]
	push	-1
	push	edx
	mov	DWORD PTR _iStart$99114[esp+104], eax
	mov	eax, DWORD PTR [esi]
	push	edi
	push	eax
	mov	eax, DWORD PTR [eax]
	push	esi
	push	ecx
	call	_selectInnerLoop
	add	esp, 64					; 00000040H
; Line 55257
	test	eax, eax
	mov	DWORD PTR _rc$[esp+56], eax
; Line 55259
	jne	$LN63@multiSelec@2
; Line 55261
	mov	edx, DWORD PTR _iCont$99112[esp+56]
	mov	ecx, ebp
	call	_sqlite3VdbeResolveLabel
; Line 55262
	mov	edx, DWORD PTR _iStart$99114[esp+56]
	push	edx
	push	edi
	push	110					; 0000006eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 55263
	mov	edx, ebx
	mov	ecx, ebp
	call	_sqlite3VdbeResolveLabel
; Line 55264
	push	0
	push	edi
	push	30					; 0000001eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 55266
	jmp	$LN249@multiSelec@2
$LN31@multiSelec@2:
; Line 55280
	cmp	DWORD PTR _pOrderBy$[esp+56], 0
	mov	edi, DWORD PTR [ebx+28]
	lea	eax, DWORD PTR [edi+2]
	mov	DWORD PTR [ebx+28], eax
	je	SHORT $LN30@multiSelec@2
	mov	ecx, DWORD PTR _pOrderBy$[esp+56]
	push	1
	push	edi
	push	ecx
	push	esi
	push	ebx
	call	_matchOrderbyToColumn
	add	esp, 20					; 00000014H
	test	eax, eax
; Line 55282
	jne	$LN63@multiSelec@2
$LN30@multiSelec@2:
; Line 55284
	mov	ecx, DWORD PTR _pOrderBy$[esp+56]
	push	esi
	mov	eax, ebx
	call	_createSortingIndex
; Line 55286
	push	0
	push	edi
	push	121					; 00000079H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 55294
	mov	ecx, DWORD PTR tv1315[esp+72]
	mov	edx, DWORD PTR [esi+36]
	mov	DWORD PTR [esi+56], eax
	mov	eax, DWORD PTR _aff$[esp+68]
	push	eax
	push	0
	push	0
	push	0
	push	edi
	push	1
	push	ecx
	push	ebx
	mov	BYTE PTR [edx+8], 1
	call	_sqlite3Select
	add	esp, 48					; 00000030H
; Line 55295
	test	eax, eax
	mov	DWORD PTR _rc$[esp+56], eax
	jne	$multi_select_end$99062
; Line 55301
	push	eax
	lea	eax, DWORD PTR [edi+1]
	push	eax
	push	121					; 00000079H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 55305
	mov	edx, DWORD PTR [esi+40]
; Line 55307
	mov	ecx, DWORD PTR [esi+44]
	mov	DWORD PTR _pLimit$99128[esp+68], edx
; Line 55309
	mov	edx, DWORD PTR _aff$[esp+64]
	push	edx
	mov	DWORD PTR [esi+60], eax
	xor	eax, eax
	push	eax
	push	eax
	push	eax
	mov	DWORD PTR [esi+32], eax
	mov	DWORD PTR [esi+40], eax
	mov	DWORD PTR [esi+44], eax
	lea	eax, DWORD PTR [edi+1]
	push	eax
	push	1
	push	esi
	push	ebx
	mov	DWORD PTR _pOffset$99129[esp+100], ecx
	call	_sqlite3Select
; Line 55311
	mov	ecx, DWORD PTR [esi+40]
	mov	DWORD PTR _rc$[esp+100], eax
	mov	eax, DWORD PTR tv1315[esp+100]
	push	ecx
	mov	DWORD PTR [esi+32], eax
	call	_sqlite3ExprDelete
; Line 55312
	mov	edx, DWORD PTR _pLimit$99128[esp+104]
; Line 55313
	mov	eax, DWORD PTR _pOffset$99129[esp+104]
	add	esp, 48					; 00000030H
; Line 55314
	cmp	DWORD PTR _rc$[esp+56], 0
	mov	DWORD PTR [esi+40], edx
	mov	DWORD PTR [esi+44], eax
	jne	$multi_select_end$99062
; Line 55322
	cmp	DWORD PTR _eDest$[esp+52], 4
	jne	SHORT $LN27@multiSelec@2
; Line 55324
	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	mov	ecx, esi
	je	SHORT $LN25@multiSelec@2
$LL26@multiSelec@2:
	mov	ecx, eax
	mov	eax, DWORD PTR [ecx+32]
	test	eax, eax
	jne	SHORT $LL26@multiSelec@2
$LN25@multiSelec@2:
; Line 55325
	mov	ecx, DWORD PTR [ecx]
	push	0
	push	ebx
	call	_generateColumnNames
	add	esp, 8
$LN27@multiSelec@2:
; Line 55327
	mov	eax, ebp
	call	_sqlite3VdbeMakeLabel
	mov	DWORD PTR _iBreak$99126[esp+56], eax
; Line 55328
	mov	eax, ebp
	call	_sqlite3VdbeMakeLabel
; Line 55329
	mov	ecx, DWORD PTR _iBreak$99126[esp+56]
	push	ecx
	mov	DWORD PTR _iCont$99125[esp+60], eax
	push	esi
	mov	eax, ebx
	call	_computeLimitRegisters
; Line 55330
	mov	edx, DWORD PTR _iBreak$99126[esp+64]
	push	edx
	push	edi
	push	127					; 0000007fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 55331
	push	0
	push	edi
	push	8
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	DWORD PTR _iStart$99127[esp+88], eax
; Line 55332
	mov	eax, DWORD PTR _iCont$99125[esp+88]
	push	eax
	lea	eax, DWORD PTR [edi+1]
	push	eax
	push	33					; 00000021H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 55335
	mov	ecx, DWORD PTR _iBreak$99126[esp+100]
	mov	edx, DWORD PTR _iCont$99125[esp+100]
	mov	eax, DWORD PTR [esi]
	push	0
	push	ecx
	mov	ecx, DWORD PTR _iParm$[esp+104]
	push	edx
	mov	edx, DWORD PTR _eDest$[esp+108]
	push	ecx
	mov	ecx, DWORD PTR _pOrderBy$[esp+116]
	push	edx
	push	-1
	push	ecx
	push	edi
	push	eax
	mov	eax, DWORD PTR [eax]
	push	esi
	push	ebx
	call	_selectInnerLoop
	add	esp, 88					; 00000058H
; Line 55336
	test	eax, eax
	mov	DWORD PTR _rc$[esp+56], eax
; Line 55338
	jne	$LN63@multiSelec@2
; Line 55340
	mov	edx, DWORD PTR _iCont$99125[esp+56]
	mov	ecx, ebp
	call	_sqlite3VdbeResolveLabel
; Line 55341
	mov	edx, DWORD PTR _iStart$99127[esp+56]
	push	edx
	push	edi
	push	110					; 0000006eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 55342
	mov	edx, DWORD PTR _iBreak$99126[esp+68]
	mov	ecx, ebp
	call	_sqlite3VdbeResolveLabel
; Line 55343
	push	0
	lea	eax, DWORD PTR [edi+1]
	push	eax
	push	30					; 0000001eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 55344
	push	0
	push	edi
	push	30					; 0000001eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 36					; 00000024H
$LN249@multiSelec@2:
; Line 55353
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR tv1315[esp+56]
	mov	edi, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	cmp	edi, DWORD PTR [edx]
	mov	DWORD PTR tv1407[esp+56], edi
	je	SHORT $LN23@multiSelec@2
; Line 55355
	movzx	eax, BYTE PTR [esi+4]
	call	_selectOpName
	mov	edi, DWORD PTR _pParse$[esp+52]
	push	eax
	push	OFFSET ??_C@_0FC@CMDCIIHA@SELECTs?5to?5the?5left?5and?5right?5of@
; Line 55357
	jmp	$LN263@multiSelec@2
$LN23@multiSelec@2:
; Line 55363
	mov	edx, DWORD PTR _nSetP2$[esp+56]
	test	edx, edx
	je	SHORT $LN255@multiSelec@2
	npad	7
$LL22@multiSelec@2:
; Line 55364
	mov	eax, DWORD PTR _aSetP2$[esp+edx*4+52]
	sub	edx, 1
	test	eax, eax
	jl	SHORT $LN219@multiSelec@2
	cmp	DWORD PTR [ebp+12], eax
	jle	SHORT $LN219@multiSelec@2
	mov	ecx, DWORD PTR [ebp+20]
	test	ecx, ecx
	je	SHORT $LN219@multiSelec@2
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edi
$LN219@multiSelec@2:
; Line 55363
	test	edx, edx
	jne	SHORT $LL22@multiSelec@2
$LN255@multiSelec@2:
; Line 55377
	mov	eax, DWORD PTR _pOrderBy$[esp+56]
	test	eax, eax
	jne	SHORT $LN247@multiSelec@2
	cmp	BYTE PTR [esi+8], al
	je	$multi_select_end$99062
$LN68@multiSelec@2:
; Line 55387
	mov	ecx, edi
	add	eax, ecx
	lea	edi, DWORD PTR [eax+eax*4+16]
	call	_sqlite3Malloc
	mov	ebx, eax
; Line 55388
	test	ebx, ebx
	mov	DWORD PTR _pKeyInfo$99153[esp+56], ebx
	jne	SHORT $LN18@multiSelec@2
	pop	edi
	pop	esi
; Line 55389
	mov	DWORD PTR _rc$[esp+48], 7
; Line 55466
	mov	eax, DWORD PTR _rc$[esp+48]
	pop	ebp
	pop	ebx
; Line 55467
	add	esp, 40					; 00000028H
	ret	0
$LN247@multiSelec@2:
; Line 55386
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN68@multiSelec@2
$LN18@multiSelec@2:
; Line 55393
	mov	edx, DWORD PTR _pParse$[esp+52]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	al, BYTE PTR [edx+121]
; Line 55394
	mov	ecx, DWORD PTR tv1407[esp+56]
	mov	BYTE PTR [ebx], al
; Line 55396
	xor	edi, edi
	test	ecx, ecx
	lea	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR [ebx+4], ecx
	mov	DWORD PTR _apColl$99156[esp+56], eax
	jle	SHORT $LN253@multiSelec@2
$LL17@multiSelec@2:
; Line 55397
	mov	ecx, DWORD PTR _pParse$[esp+52]
	push	edi
	push	esi
	push	ecx
	call	_multiSelectCollSeq
	mov	edx, DWORD PTR _apColl$99156[esp+68]
	add	esp, 12					; 0000000cH
; Line 55398
	test	eax, eax
	mov	DWORD PTR [edx], eax
	jne	SHORT $LN16@multiSelec@2
; Line 55399
	mov	eax, DWORD PTR _pParse$[esp+52]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _apColl$99156[esp+56]
	mov	DWORD PTR [eax], edx
$LN16@multiSelec@2:
	add	DWORD PTR _apColl$99156[esp+56], 4
	add	edi, 1
	cmp	edi, DWORD PTR tv1407[esp+56]
	jl	SHORT $LL17@multiSelec@2
$LN253@multiSelec@2:
; Line 55403
	mov	DWORD PTR _pLoop$99154[esp+56], esi
$LL13@multiSelec@2:
; Line 55404
	mov	edi, DWORD PTR _pLoop$99154[esp+56]
	mov	DWORD PTR _i$99152[esp+56], 0
	add	edi, 56					; 00000038H
$LL256@multiSelec@2:
; Line 55405
	mov	eax, DWORD PTR [edi]
; Line 55406
	test	eax, eax
	jl	SHORT $LN12@multiSelec@2
; Line 55412
	cmp	DWORD PTR [ebp+12], eax
	jle	SHORT $LN222@multiSelec@2
	mov	ecx, DWORD PTR [ebp+20]
	test	ecx, ecx
	je	SHORT $LN222@multiSelec@2
	mov	ebx, DWORD PTR tv1407[esp+56]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+edx*4+8], ebx
	mov	ebx, DWORD PTR _pKeyInfo$99153[esp+56]
$LN222@multiSelec@2:
; Line 55413
	push	ebx
	mov	edx, -6					; fffffffaH
	mov	ecx, ebp
	call	_sqlite3VdbeChangeP3
	mov	eax, DWORD PTR _i$99152[esp+60]
	add	eax, 1
; Line 55414
	mov	DWORD PTR [edi], -1
	add	esp, 4
	add	edi, 4
	cmp	eax, 2
	mov	DWORD PTR _i$99152[esp+56], eax
	jl	SHORT $LL256@multiSelec@2
$LN12@multiSelec@2:
; Line 55403
	mov	eax, DWORD PTR _pLoop$99154[esp+56]
	mov	eax, DWORD PTR [eax+32]
	test	eax, eax
	mov	DWORD PTR _pLoop$99154[esp+56], eax
	jne	SHORT $LL13@multiSelec@2
; Line 55418
	mov	eax, DWORD PTR _pOrderBy$[esp+56]
	test	eax, eax
	je	$LN6@multiSelec@2
; Line 55419
	mov	ecx, DWORD PTR [eax+12]
; Line 55420
	mov	edi, DWORD PTR [eax]
; Line 55438
	mov	eax, DWORD PTR tv1407[esp+56]
	add	eax, eax
	add	eax, eax
	mov	DWORD PTR _pOTerm$99176[esp+56], ecx
	lea	ecx, DWORD PTR [ebx+edi*4+12]
	lea	edx, DWORD PTR [eax+ecx]
; Line 55439
	push	eax
	lea	eax, DWORD PTR [ebx+12]
	push	eax
	push	ecx
	mov	DWORD PTR tv1498[esp+68], edx
	mov	DWORD PTR [ebx+8], edx
	call	_memmove
; Line 55441
	lea	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR _apColl$99156[esp+68], eax
	add	esp, 12					; 0000000cH
; Line 55442
	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN3@multiSelec@2
	npad	1
$LL257@multiSelec@2:
; Line 55443
	mov	edx, DWORD PTR _pOTerm$99176[esp+56]
	mov	ecx, DWORD PTR [edx]
; Line 55444
	test	WORD PTR [ecx+2], 256			; 00000100H
	je	SHORT $LN2@multiSelec@2
; Line 55446
	mov	ecx, DWORD PTR [ecx+4]
; Line 55447
	jmp	SHORT $LN261@multiSelec@2
$LN2@multiSelec@2:
; Line 55448
	mov	edx, DWORD PTR [ecx+40]
	lea	ecx, DWORD PTR [ebx+edi*4+12]
	mov	ecx, DWORD PTR [ecx+edx*4]
$LN261@multiSelec@2:
	mov	edx, DWORD PTR _apColl$99156[esp+56]
	add	DWORD PTR _apColl$99156[esp+56], 4
	mov	DWORD PTR [edx], ecx
; Line 55450
	mov	ecx, DWORD PTR _pOTerm$99176[esp+56]
	mov	dl, BYTE PTR [ecx+8]
	mov	ecx, DWORD PTR tv1498[esp+56]
	add	DWORD PTR _pOTerm$99176[esp+56], 12	; 0000000cH
	mov	BYTE PTR [ecx+eax], dl
	add	eax, 1
	cmp	eax, edi
	jl	SHORT $LL257@multiSelec@2
$LN3@multiSelec@2:
; Line 55454
	mov	eax, DWORD PTR [esi+64]
; Line 55455
	test	eax, eax
	mov	DWORD PTR _addr$99178[esp+56], eax
	jl	SHORT $LN225@multiSelec@2
	cmp	DWORD PTR [ebp+12], eax
	jle	SHORT $LN225@multiSelec@2
	mov	ecx, DWORD PTR [ebp+20]
	test	ecx, ecx
	je	SHORT $LN225@multiSelec@2
	mov	edx, DWORD PTR [esi+28]
	mov	edx, DWORD PTR [edx]
	lea	eax, DWORD PTR [eax+eax*4]
	add	edx, 2
	mov	DWORD PTR [ecx+eax*4+8], edx
	mov	eax, DWORD PTR _addr$99178[esp+56]
$LN225@multiSelec@2:
; Line 55457
	push	ebx
	mov	edx, -9					; fffffff7H
	mov	ecx, ebp
	mov	DWORD PTR [ebx+4], edi
	call	_sqlite3VdbeChangeP3
; Line 55459
	mov	ecx, DWORD PTR _iParm$[esp+56]
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR _eDest$[esp+56]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	mov	edx, DWORD PTR _pParse$[esp+64]
	push	ecx
	push	esi
	push	edx
	mov	esi, ebp
	call	_generateSortTail
; Line 55466
	mov	eax, DWORD PTR _rc$[esp+80]
	add	esp, 24					; 00000018H
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 55467
	add	esp, 40					; 00000028H
	ret	0
$LN6@multiSelec@2:
; Line 55462
	push	ebx
	call	_free
; Line 55466
	mov	eax, DWORD PTR _rc$[esp+60]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 55467
	add	esp, 40					; 00000028H
	ret	0
$LN264@multiSelec@2:
	DD	$LN250@multiSelec@2
	DD	$LN56@multiSelec@2
	DD	$LN250@multiSelec@2
	DD	$LN31@multiSelec@2
_multiSelect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DL@LDIIFJFH@aggregate?5functions?5are?5not?5allo@ ; `string'
PUBLIC	??_C@_05NAIABEH@GROUP?$AA@			; `string'
PUBLIC	??_C@_05BIEKMFNJ@ORDER?$AA@			; `string'
PUBLIC	??_C@_0CM@CFGBPLAG@a?5GROUP?5BY?5clause?5is?5required?5be@ ; `string'
;	COMDAT ??_C@_0DL@LDIIFJFH@aggregate?5functions?5are?5not?5allo@
CONST	SEGMENT
??_C@_0DL@LDIIFJFH@aggregate?5functions?5are?5not?5allo@ DB 'aggregate fu'
	DB	'nctions are not allowed in the GROUP BY clause', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAIABEH@GROUP?$AA@
CONST	SEGMENT
??_C@_05NAIABEH@GROUP?$AA@ DB 'GROUP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BIEKMFNJ@ORDER?$AA@
CONST	SEGMENT
??_C@_05BIEKMFNJ@ORDER?$AA@ DB 'ORDER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CFGBPLAG@a?5GROUP?5BY?5clause?5is?5required?5be@
CONST	SEGMENT
??_C@_0CM@CFGBPLAG@a?5GROUP?5BY?5clause?5is?5required?5be@ DB 'a GROUP BY'
	DB	' clause is required before HAVING', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3SelectResolve
_TEXT	SEGMENT
tv345 = -40						; size = 4
_sNC$ = -36						; size = 36
_pParse$ = 8						; size = 4
_p$ = 12						; size = 4
_pOuterNC$ = 16						; size = 4
_sqlite3SelectResolve PROC				; COMDAT
; Line 56015
	sub	esp, 40					; 00000028H
	push	edi
; Line 56022
	mov	edi, DWORD PTR _p$[esp+40]
	cmp	BYTE PTR [edi+6], 0
	je	SHORT $LN27@sqlite3Sel@4
; Line 56024
	xor	eax, eax
	pop	edi
; Line 56131
	add	esp, 40					; 00000028H
	ret	0
$LN27@sqlite3Sel@4:
	push	esi
; Line 56029
	mov	esi, DWORD PTR _pParse$[esp+44]
	mov	BYTE PTR [edi+6], 1
	cmp	DWORD PTR [esi+24], 0
; Line 56030
	jg	SHORT $LN43@sqlite3Sel@4
; Line 56036
	push	edi
	push	esi
	call	_prepSelectStmt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN25@sqlite3Sel@4
$LN43@sqlite3Sel@4:
	pop	esi
; Line 56037
	mov	eax, 1
	pop	edi
; Line 56131
	add	esp, 40					; 00000028H
	ret	0
$LN25@sqlite3Sel@4:
; Line 56043
	xor	eax, eax
	mov	DWORD PTR _sNC$[esp+48], eax
	push	ebx
; Line 56046
	mov	ebx, DWORD PTR [edi+40]
	mov	DWORD PTR _sNC$[esp+52], esi
	lea	esi, DWORD PTR _sNC$[esp+52]
	mov	DWORD PTR _sNC$[esp+56], eax
	mov	DWORD PTR _sNC$[esp+60], eax
	mov	DWORD PTR _sNC$[esp+64], eax
	mov	DWORD PTR _sNC$[esp+68], eax
	mov	DWORD PTR _sNC$[esp+72], eax
	mov	DWORD PTR _sNC$[esp+76], eax
	mov	DWORD PTR _sNC$[esp+80], eax
	mov	DWORD PTR _sNC$[esp+84], eax
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN23@sqlite3Sel@4
	mov	ebx, DWORD PTR [edi+44]
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN23@sqlite3Sel@4
; Line 56054
	mov	ecx, DWORD PTR [edi+12]
; Line 56055
	mov	edx, DWORD PTR _pOuterNC$[esp+48]
	push	ebp
; Line 56058
	mov	ebp, DWORD PTR [edi]
; Line 56059
	xor	edi, edi
	cmp	ebp, edi
	mov	eax, 1
	mov	BYTE PTR _sNC$[esp+76], al
	mov	DWORD PTR _sNC$[esp+60], ecx
	mov	DWORD PTR _sNC$[esp+88], edx
	je	$LN41@sqlite3Sel@4
; Line 56060
	cmp	DWORD PTR [ebp], edi
	jle	SHORT $LN19@sqlite3Sel@4
	mov	DWORD PTR tv345[esp+56], edi
	npad	6
$LL38@sqlite3Sel@4:
; Line 56061
	mov	eax, DWORD PTR [ebp+12]
; Line 56062
	mov	ecx, DWORD PTR tv345[esp+56]
	mov	ebx, DWORD PTR [ecx+eax]
	lea	esi, DWORD PTR _sNC$[esp+56]
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN12@sqlite3Sel@4
	add	DWORD PTR tv345[esp+56], 12		; 0000000cH
	add	edi, 1
	cmp	edi, DWORD PTR [ebp]
	jl	SHORT $LL38@sqlite3Sel@4
$LN19@sqlite3Sel@4:
; Line 56071
	mov	ebp, DWORD PTR _p$[esp+52]
	mov	edi, DWORD PTR [ebp+20]
; Line 56072
	test	edi, edi
	jne	SHORT $LN16@sqlite3Sel@4
	cmp	BYTE PTR _sNC$[esp+77], 0
	jne	SHORT $LN16@sqlite3Sel@4
; Line 56075
	mov	BYTE PTR _sNC$[esp+76], 0
	jmp	SHORT $LN15@sqlite3Sel@4
$LN16@sqlite3Sel@4:
; Line 56073
	mov	BYTE PTR [ebp+7], 1
$LN15@sqlite3Sel@4:
; Line 56080
	cmp	DWORD PTR [ebp+24], 0
	je	SHORT $LN14@sqlite3Sel@4
	test	edi, edi
	jne	SHORT $LN14@sqlite3Sel@4
; Line 56081
	push	OFFSET ??_C@_0CM@CFGBPLAG@a?5GROUP?5BY?5clause?5is?5required?5be@
; Line 56082
	jmp	$LN42@sqlite3Sel@4
$LN14@sqlite3Sel@4:
; Line 56093
	mov	edx, DWORD PTR [ebp]
; Line 56095
	mov	ebx, DWORD PTR [ebp+16]
	lea	esi, DWORD PTR _sNC$[esp+56]
	mov	DWORD PTR _sNC$[esp+64], edx
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN12@sqlite3Sel@4
	mov	ebx, DWORD PTR [ebp+24]
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN12@sqlite3Sel@4
; Line 56098
	cmp	DWORD PTR [ebp+32], eax
	jne	SHORT $LN10@sqlite3Sel@4
; Line 56100
	mov	eax, esi
	push	OFFSET ??_C@_05BIEKMFNJ@ORDER?$AA@
	push	eax
	mov	eax, DWORD PTR [ebp+28]
	call	_processOrderGroupBy
	add	esp, 8
	test	eax, eax
	jne	$LN12@sqlite3Sel@4
	mov	ecx, esi
	push	OFFSET ??_C@_05NAIABEH@GROUP?$AA@
	push	ecx
	mov	eax, edi
	call	_processOrderGroupBy
	add	esp, 8
	test	eax, eax
; Line 56101
	jne	SHORT $LN12@sqlite3Sel@4
$LN10@sqlite3Sel@4:
; Line 56105
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN8@sqlite3Sel@4
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN8@sqlite3Sel@4
; Line 56106
	mov	eax, 7
$LN41@sqlite3Sel@4:
	pop	ebp
	pop	ebx
	pop	esi
	pop	edi
; Line 56131
	add	esp, 40					; 00000028H
	ret	0
$LN8@sqlite3Sel@4:
; Line 56111
	test	edi, edi
	je	SHORT $LN4@sqlite3Sel@4
	mov	edx, DWORD PTR [edi]
; Line 56114
	mov	ecx, DWORD PTR [edi+12]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN4@sqlite3Sel@4
	mov	bl, 2
	npad	6
$LL6@sqlite3Sel@4:
; Line 56115
	mov	esi, DWORD PTR [ecx]
	test	BYTE PTR [esi+2], bl
	jne	SHORT $LN35@sqlite3Sel@4
	add	eax, 1
	add	ecx, 12					; 0000000cH
	cmp	eax, edx
	jl	SHORT $LL6@sqlite3Sel@4
$LN4@sqlite3Sel@4:
; Line 56126
	mov	eax, DWORD PTR [ebp+32]
	test	eax, eax
	je	SHORT $LN2@sqlite3Sel@4
; Line 56127
	mov	edx, DWORD PTR _pOuterNC$[esp+52]
	push	edx
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+60]
	push	eax
	call	_sqlite3SelectResolve
	add	esp, 12					; 0000000cH
	pop	ebp
	pop	ebx
	pop	esi
	pop	edi
; Line 56131
	add	esp, 40					; 00000028H
	ret	0
$LN35@sqlite3Sel@4:
; Line 56117
	push	OFFSET ??_C@_0DL@LDIIFJFH@aggregate?5functions?5are?5not?5allo@
$LN42@sqlite3Sel@4:
	mov	edi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ErrorMsg
	add	esp, 4
$LN12@sqlite3Sel@4:
	pop	ebp
	pop	ebx
	pop	esi
; Line 56118
	mov	eax, 1
	pop	edi
; Line 56131
	add	esp, 40					; 00000028H
	ret	0
$LN2@sqlite3Sel@4:
	pop	ebp
	pop	ebx
	pop	esi
; Line 56129
	xor	eax, eax
	pop	edi
; Line 56131
	add	esp, 40					; 00000028H
	ret	0
$LN23@sqlite3Sel@4:
	pop	ebx
	pop	esi
; Line 56047
	mov	eax, 1
	pop	edi
; Line 56131
	add	esp, 40					; 00000028H
	ret	0
_sqlite3SelectResolve ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@DHLFNDIF@too?5many?5terms?5in?5compound?5SELEC@ ; `string'
;	COMDAT ??_C@_0CC@DHLFNDIF@too?5many?5terms?5in?5compound?5SELEC@
CONST	SEGMENT
??_C@_0CC@DHLFNDIF@too?5many?5terms?5in?5compound?5SELEC@ DB 'too many te'
	DB	'rms in compound SELECT', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Select
_TEXT	SEGMENT
tv1498 = -164						; size = 4
$T140475 = -164						; size = 4
_j$ = -164						; size = 4
_distinct$ = -164					; size = 4
_pGroupBy$ = -160					; size = 4
tv1437 = -156						; size = 4
_addrInitializeLoop$99608 = -156			; size = 4
_i$ = -156						; size = 4
_pOrderBy$ = -152					; size = 4
tv1486 = -148						; size = 4
_addrTopOfLoop$99609 = -148				; size = 4
_pWhere$ = -148						; size = 4
_groupBySort$99605 = -144				; size = 4
_addrSetAbort$99607 = -144				; size = 4
_rc$ = -144						; size = 4
tv1402 = -140						; size = 4
_addrSortIndex$ = -140					; size = 4
_zSavedAuthContext$99573 = -140				; size = 4
tv1425 = -136						; size = 4
_addrEnd$99612 = -136					; size = 4
_addrOutputRow$99606 = -132				; size = 4
_needRestoreContext$99574 = -132			; size = 4
_isDistinct$ = -132					; size = 4
_pTabList$ = -128					; size = 4
_pWInfo$ = -124						; size = 4
_pHaving$ = -124					; size = 4
_pEList$ = -120						; size = 4
_isAgg$ = -116						; size = 4
tv1025 = -112						; size = 4
_addrProcessRow$99611 = -112				; size = 4
tv1514 = -108						; size = 4
_pKeyInfo$99624 = -108					; size = 4
tv1397 = -104						; size = 4
tv1106 = -100						; size = 4
_addrGroupByChange$99610 = -96				; size = 4
_sAggInfo$ = -92					; size = 44
_addrSortingIdx$99613 = -48				; size = 4
_addrReset$99614 = -44					; size = 4
_iEnd$ = -40						; size = 4
_sNC$99600 = -36					; size = 36
_pParse$ = 8						; size = 4
_p$ = 12						; size = 4
_eDest$ = 16						; size = 4
_iParm$ = 20						; size = 4
_pParent$ = 24						; size = 4
_parentTab$ = 28					; size = 4
_pParentAgg$ = 32					; size = 4
_aff$ = 36						; size = 4
_sqlite3Select PROC					; COMDAT
; Line 56295
	sub	esp, 164				; 000000a4H
	push	ebp
	push	esi
; Line 56313
	mov	esi, DWORD PTR _p$[esp+168]
	test	esi, esi
	mov	DWORD PTR _rc$[esp+172], 1
	je	SHORT $LN79@sqlite3Sel@5
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN78@sqlite3Sel@5
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN79@sqlite3Sel@5
$LN78@sqlite3Sel@5:
	mov	ebp, DWORD PTR _pParse$[esp+168]
	cmp	DWORD PTR [ebp+24], 0
	jne	SHORT $LN79@sqlite3Sel@5
; Line 56316
	push	0
	push	0
	push	0
	push	21					; 00000015H
	mov	eax, ebp
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN77@sqlite3Sel@5
$LN79@sqlite3Sel@5:
	pop	esi
	mov	eax, 1
	pop	ebp
; Line 56821
	add	esp, 164				; 000000a4H
	ret	0
$LN77@sqlite3Sel@5:
	push	edi
; Line 56317
	push	44					; 0000002cH
	lea	eax, DWORD PTR _sAggInfo$[esp+180]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 56322
	cmp	DWORD PTR [esi+32], 0
	je	SHORT $LN76@sqlite3Sel@5
; Line 56323
	cmp	DWORD PTR [esi+36], 0
	jne	SHORT $LN71@sqlite3Sel@5
; Line 56325
	xor	ecx, ecx
; Line 56326
	mov	eax, esi
$LL74@sqlite3Sel@5:
; Line 56327
	mov	DWORD PTR [eax+36], esi
	mov	eax, DWORD PTR [eax+32]
	add	ecx, 1
	test	eax, eax
	jne	SHORT $LL74@sqlite3Sel@5
; Line 56329
	cmp	ecx, 500				; 000001f4H
	jle	SHORT $LN71@sqlite3Sel@5
; Line 56330
	push	OFFSET ??_C@_0CC@DHLFNDIF@too?5many?5terms?5in?5compound?5SELEC@
	mov	edi, ebp
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	edi
	pop	esi
; Line 56331
	mov	eax, 1
	pop	ebp
; Line 56821
	add	esp, 164				; 000000a4H
	ret	0
$LN71@sqlite3Sel@5:
; Line 56334
	mov	ecx, DWORD PTR _aff$[esp+172]
	mov	edx, DWORD PTR _iParm$[esp+172]
	mov	eax, DWORD PTR _eDest$[esp+172]
	push	ecx
	push	edx
	push	eax
	push	ebp
	mov	eax, esi
	call	_multiSelect
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebp
; Line 56821
	add	esp, 164				; 000000a4H
	ret	0
$LN76@sqlite3Sel@5:
; Line 56339
	cmp	DWORD PTR _eDest$[esp+172], 3
	mov	ecx, DWORD PTR [esi+28]
	mov	DWORD PTR _pOrderBy$[esp+176], ecx
	jg	SHORT $LN70@sqlite3Sel@5
; Line 56340
	mov	DWORD PTR [esi+28], 0
$LN70@sqlite3Sel@5:
; Line 56342
	push	0
	push	esi
	push	ebp
	call	_sqlite3SelectResolve
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN1@sqlite3Sel@5
; Line 56345
	mov	edx, DWORD PTR _pOrderBy$[esp+176]
	mov	eax, esi
; Line 56349
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [eax+28], edx
; Line 56350
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _pTabList$[esp+176], ecx
; Line 56351
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pWhere$[esp+176], edx
; Line 56352
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR _pGroupBy$[esp+176], ecx
; Line 56353
	movzx	ecx, BYTE PTR [eax+7]
	mov	DWORD PTR _pHaving$[esp+176], edx
; Line 56354
	movzx	edx, BYTE PTR [eax+5]
; Line 56355
	mov	eax, DWORD PTR [eax]
; Line 56356
	test	eax, eax
	mov	DWORD PTR _isAgg$[esp+176], ecx
	mov	DWORD PTR _isDistinct$[esp+176], edx
	mov	DWORD PTR _pEList$[esp+176], eax
	je	$LN1@sqlite3Sel@5
; Line 56362
	cmp	DWORD PTR [ebp+24], 0
	jg	$LN1@sqlite3Sel@5
; Line 56368
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _eDest$[esp+172]
	push	ecx
	mov	edi, ebp
	call	_checkForMultiColumnSelectError
	add	esp, 4
	test	eax, eax
	jne	$LN1@sqlite3Sel@5
; Line 56375
	cmp	DWORD PTR _eDest$[esp+172], 3
	jg	SHORT $LN65@sqlite3Sel@5
; Line 56376
	mov	DWORD PTR _pOrderBy$[esp+176], eax
$LN65@sqlite3Sel@5:
	push	ebx
; Line 56381
	mov	esi, ebp
	call	_sqlite3GetVdbe
	mov	ebx, eax
; Line 56382
	test	ebx, ebx
	je	$LN171@sqlite3Sel@5
; Line 56387
	mov	edi, DWORD PTR _pTabList$[esp+180]
	mov	esi, DWORD PTR _p$[esp+176]
	xor	edx, edx
	cmp	WORD PTR [edi], dx
	mov	DWORD PTR _i$[esp+180], edx
	jle	$LN61@sqlite3Sel@5
	xor	eax, eax
	mov	DWORD PTR tv1425[esp+180], eax
	jmp	SHORT $LN63@sqlite3Sel@5
	npad	9
$LL167@sqlite3Sel@5:
	xor	edx, edx
$LN63@sqlite3Sel@5:
; Line 56392
	cmp	DWORD PTR [eax+edi+24], edx
	lea	ecx, DWORD PTR [eax+edi+24]
	mov	DWORD PTR _zSavedAuthContext$99573[esp+180], edx
	mov	DWORD PTR tv1025[esp+180], ecx
	je	$LN62@sqlite3Sel@5
	cmp	BYTE PTR [eax+edi+28], 0
	jne	$LN62@sqlite3Sel@5
; Line 56393
	mov	eax, DWORD PTR [eax+edi+12]
	cmp	eax, edx
	je	SHORT $LN58@sqlite3Sel@5
; Line 56394
	mov	edx, DWORD PTR [ebp+176]
	mov	DWORD PTR _zSavedAuthContext$99573[esp+180], edx
; Line 56395
	mov	DWORD PTR [ebp+176], eax
; Line 56396
	mov	DWORD PTR _needRestoreContext$99574[esp+180], 1
; Line 56397
	jmp	SHORT $LN57@sqlite3Sel@5
$LN58@sqlite3Sel@5:
; Line 56398
	mov	DWORD PTR _needRestoreContext$99574[esp+180], edx
$LN57@sqlite3Sel@5:
; Line 56408
	mov	ecx, esi
	call	_sqlite3SelectExprHeight
	add	DWORD PTR [ebp+196], eax
; Line 56411
	mov	ecx, DWORD PTR _i$[esp+180]
	mov	edx, DWORD PTR tv1425[esp+180]
	push	0
	lea	eax, DWORD PTR _isAgg$[esp+184]
	push	eax
	mov	eax, DWORD PTR [edx+edi+32]
	push	ecx
	mov	ecx, DWORD PTR tv1025[esp+192]
	mov	edx, DWORD PTR [ecx]
	push	esi
	push	eax
	push	8
	push	edx
	push	ebp
	call	_sqlite3Select
	add	esp, 32					; 00000020H
; Line 56413
	mov	ecx, esi
	call	_sqlite3SelectExprHeight
	sub	DWORD PTR [ebp+196], eax
; Line 56415
	cmp	DWORD PTR _needRestoreContext$99574[esp+180], 0
	je	SHORT $LN56@sqlite3Sel@5
; Line 56416
	mov	eax, DWORD PTR _zSavedAuthContext$99573[esp+180]
	mov	DWORD PTR [ebp+176], eax
$LN56@sqlite3Sel@5:
; Line 56420
	cmp	DWORD PTR _eDest$[esp+176], 3
	mov	ecx, DWORD PTR [esi+16]
	mov	edi, DWORD PTR [esi+12]
	mov	DWORD PTR _pWhere$[esp+180], ecx
	jle	SHORT $LN55@sqlite3Sel@5
; Line 56421
	mov	edx, DWORD PTR [esi+28]
	mov	DWORD PTR _pOrderBy$[esp+180], edx
$LN55@sqlite3Sel@5:
; Line 56423
	mov	eax, DWORD PTR [esi+20]
; Line 56425
	movzx	edx, BYTE PTR [esi+5]
	mov	ecx, DWORD PTR [esi+24]
	mov	DWORD PTR _pGroupBy$[esp+180], eax
	mov	eax, DWORD PTR tv1425[esp+180]
	mov	DWORD PTR _pHaving$[esp+180], ecx
	mov	DWORD PTR _isDistinct$[esp+180], edx
$LN62@sqlite3Sel@5:
	mov	ecx, DWORD PTR _i$[esp+180]
	movsx	edx, WORD PTR [edi]
	add	ecx, 1
	add	eax, 48					; 00000030H
	cmp	ecx, edx
	mov	DWORD PTR _i$[esp+180], ecx
	mov	DWORD PTR tv1425[esp+180], eax
	jl	$LL167@sqlite3Sel@5
; Line 56418
	mov	DWORD PTR _pTabList$[esp+180], edi
$LN61@sqlite3Sel@5:
; Line 56432
	mov	eax, DWORD PTR _iParm$[esp+176]
	mov	ecx, DWORD PTR _eDest$[esp+176]
	push	eax
	push	ecx
	push	esi
	push	ebp
	call	_simpleMinMaxQuery
	add	esp, 16					; 00000010H
	test	eax, eax
; Line 56434
	jne	$LN125@sqlite3Sel@5
; Line 56442
	mov	eax, DWORD PTR _pParent$[esp+176]
	test	eax, eax
	je	SHORT $LN53@sqlite3Sel@5
	mov	esi, DWORD PTR _pParentAgg$[esp+176]
	test	esi, esi
	je	SHORT $LN53@sqlite3Sel@5
	mov	edx, DWORD PTR _isAgg$[esp+180]
	mov	ecx, DWORD PTR [esi]
	push	edx
	mov	edx, DWORD PTR _parentTab$[esp+180]
	push	ecx
	push	edx
	push	eax
	call	_flattenSubquery
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN53@sqlite3Sel@5
; Line 56443
	cmp	DWORD PTR _isAgg$[esp+180], 0
	je	$LN171@sqlite3Sel@5
	mov	DWORD PTR [esi], 1
; Line 56444
	jmp	$LN171@sqlite3Sel@5
$LN53@sqlite3Sel@5:
; Line 56455
	cmp	DWORD PTR _pOrderBy$[esp+180], 0
	je	SHORT $LN51@sqlite3Sel@5
; Line 56457
	cmp	DWORD PTR [ebp+24], 0
	jne	$LN171@sqlite3Sel@5
; Line 56460
	mov	esi, DWORD PTR _pOrderBy$[esp+180]
	push	esi
	push	ebp
	call	_keyInfoFromExprList
; Line 56461
	mov	ecx, DWORD PTR [ebp+28]
	mov	DWORD PTR [esi+8], ecx
	add	DWORD PTR [ebp+28], 1
; Line 56463
	mov	ecx, DWORD PTR [esi+8]
	push	-9					; fffffff7H
	push	eax
	mov	eax, DWORD PTR [esi]
	add	eax, 2
	mov	edx, 121				; 00000079H
	mov	edi, ebx
	call	_sqlite3VdbeOp3
	mov	esi, DWORD PTR _p$[esp+192]
	add	esp, 16					; 00000010H
	mov	DWORD PTR _addrSortIndex$[esp+180], eax
	mov	DWORD PTR [esi+64], eax
; Line 56464
	jmp	SHORT $LN49@sqlite3Sel@5
$LN51@sqlite3Sel@5:
; Line 56465
	mov	esi, DWORD PTR _p$[esp+176]
	mov	DWORD PTR _addrSortIndex$[esp+180], -1
$LN49@sqlite3Sel@5:
; Line 56470
	cmp	DWORD PTR _eDest$[esp+176], 8
	jne	SHORT $LN48@sqlite3Sel@5
; Line 56471
	mov	edx, DWORD PTR _pEList$[esp+180]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _iParm$[esp+176]
	push	eax
	push	ecx
	push	121					; 00000079H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN48@sqlite3Sel@5:
; Line 56476
	mov	eax, ebx
	call	_sqlite3VdbeMakeLabel
; Line 56477
	push	eax
	mov	DWORD PTR _iEnd$[esp+184], eax
	push	esi
	mov	eax, ebp
	call	_computeLimitRegisters
	add	esp, 8
; Line 56481
	cmp	DWORD PTR _isDistinct$[esp+180], 0
	je	SHORT $LN47@sqlite3Sel@5
; Line 56483
	mov	edi, DWORD PTR [ebp+28]
	lea	edx, DWORD PTR [edi+1]
	mov	DWORD PTR [ebp+28], edx
; Line 56484
	mov	eax, DWORD PTR [esi]
	push	eax
	push	ebp
	mov	DWORD PTR _distinct$[esp+188], edi
	call	_keyInfoFromExprList
; Line 56486
	push	-9					; fffffff7H
	push	eax
	xor	eax, eax
	mov	ecx, edi
	lea	edx, DWORD PTR [eax+121]
	mov	edi, ebx
	call	_sqlite3VdbeOp3
	add	esp, 16					; 00000010H
; Line 56487
	jmp	SHORT $LN46@sqlite3Sel@5
$LN47@sqlite3Sel@5:
; Line 56488
	mov	DWORD PTR _distinct$[esp+180], -1
$LN46@sqlite3Sel@5:
; Line 56492
	cmp	DWORD PTR _isAgg$[esp+180], 0
	mov	esi, DWORD PTR _pGroupBy$[esp+180]
	jne	$LN45@sqlite3Sel@5
	test	esi, esi
	jne	$LN45@sqlite3Sel@5
; Line 56496
	mov	edx, DWORD PTR _pWhere$[esp+180]
	mov	eax, DWORD PTR _pTabList$[esp+180]
	lea	ecx, DWORD PTR _pOrderBy$[esp+180]
	push	ecx
	push	edx
	push	eax
	push	ebp
	call	_sqlite3WhereBegin
	mov	edi, eax
	add	esp, 16					; 00000010H
; Line 56497
	test	edi, edi
	je	$LN171@sqlite3Sel@5
; Line 56503
	mov	ecx, DWORD PTR _addrSortIndex$[esp+180]
	test	ecx, ecx
	mov	esi, DWORD PTR _pOrderBy$[esp+180]
	jl	SHORT $LN157@sqlite3Sel@5
	test	esi, esi
	jne	SHORT $LN157@sqlite3Sel@5
; Line 56504
	lea	edx, DWORD PTR [esi+1]
	mov	eax, ebx
	call	_sqlite3VdbeChangeToNoop
; Line 56505
	mov	ecx, DWORD PTR _p$[esp+176]
	mov	DWORD PTR [ecx+64], -1
$LN157@sqlite3Sel@5:
; Line 56511
	mov	edx, DWORD PTR _aff$[esp+176]
	mov	eax, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [edi+12]
	push	edx
	mov	edx, DWORD PTR _iParm$[esp+180]
	push	eax
	mov	eax, DWORD PTR _eDest$[esp+184]
	push	ecx
	mov	ecx, DWORD PTR _distinct$[esp+192]
	push	edx
	mov	edx, DWORD PTR _pEList$[esp+196]
	push	eax
	mov	eax, DWORD PTR _p$[esp+196]
	push	ecx
	push	esi
	push	0
	push	edx
	push	eax
	push	ebp
	xor	eax, eax
	call	_selectInnerLoop
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	$LN171@sqlite3Sel@5
; Line 56517
	push	edi
	call	_sqlite3WhereEnd
	add	esp, 4
; Line 56518
	jmp	$LN122@sqlite3Sel@5
$LN45@sqlite3Sel@5:
; Line 56542
	mov	eax, ebx
	call	_sqlite3VdbeMakeLabel
; Line 56550
	mov	ecx, DWORD PTR _pTabList$[esp+180]
	mov	DWORD PTR _addrEnd$99612[esp+180], eax
	xor	eax, eax
; Line 56552
	test	esi, esi
	lea	edx, DWORD PTR _sAggInfo$[esp+180]
	mov	DWORD PTR _sNC$99600[esp+180], eax
	mov	DWORD PTR _sNC$99600[esp+184], eax
	mov	DWORD PTR _sNC$99600[esp+208], eax
	mov	DWORD PTR _sNC$99600[esp+188], eax
	mov	DWORD PTR _sNC$99600[esp+192], eax
	mov	DWORD PTR _sNC$99600[esp+196], eax
	mov	DWORD PTR _sNC$99600[esp+200], eax
	mov	DWORD PTR _sNC$99600[esp+204], eax
	mov	DWORD PTR _sNC$99600[esp+212], eax
	mov	DWORD PTR _sNC$99600[esp+180], ebp
	mov	DWORD PTR _sNC$99600[esp+184], ecx
	mov	DWORD PTR _sNC$99600[esp+208], edx
	je	SHORT $LN83@sqlite3Sel@5
	mov	eax, DWORD PTR [esi]
	add	eax, 1
	mov	DWORD PTR _sAggInfo$[esp+192], eax
	jmp	SHORT $LN84@sqlite3Sel@5
$LN83@sqlite3Sel@5:
	mov	DWORD PTR _sAggInfo$[esp+192], 0
$LN84@sqlite3Sel@5:
; Line 56554
	mov	edx, DWORD PTR _pEList$[esp+180]
	mov	ecx, DWORD PTR _pGroupBy$[esp+180]
	push	edx
	lea	esi, DWORD PTR _sNC$99600[esp+184]
	mov	DWORD PTR _sAggInfo$[esp+192], ecx
	call	_sqlite3ExprAnalyzeAggList
	add	esp, 4
	test	eax, eax
	jne	$LN171@sqlite3Sel@5
; Line 56557
	mov	eax, DWORD PTR _pOrderBy$[esp+180]
	push	eax
	call	_sqlite3ExprAnalyzeAggList
	add	esp, 4
	test	eax, eax
	jne	$LN171@sqlite3Sel@5
; Line 56560
	mov	ecx, DWORD PTR _pHaving$[esp+180]
	test	ecx, ecx
	je	SHORT $LN38@sqlite3Sel@5
	call	_sqlite3ExprAnalyzeAggregates
	test	eax, eax
	jne	$LN171@sqlite3Sel@5
$LN38@sqlite3Sel@5:
; Line 56563
	mov	ecx, DWORD PTR _sAggInfo$[esp+200]
; Line 56564
	xor	edi, edi
	cmp	DWORD PTR _sAggInfo$[esp+216], edi
	mov	DWORD PTR _sAggInfo$[esp+208], ecx
	jle	SHORT $LN35@sqlite3Sel@5
; Line 56563
	mov	DWORD PTR tv1437[esp+180], edi
	npad	1
$LL168@sqlite3Sel@5:
; Line 56565
	mov	edx, DWORD PTR _sAggInfo$[esp+212]
	mov	eax, DWORD PTR tv1437[esp+180]
	mov	ecx, DWORD PTR [eax+edx]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	lea	esi, DWORD PTR _sNC$99600[esp+184]
	call	_sqlite3ExprAnalyzeAggList
	add	esp, 4
	test	eax, eax
	jne	$LN171@sqlite3Sel@5
	add	DWORD PTR tv1437[esp+180], 16		; 00000010H
	add	edi, 1
	cmp	edi, DWORD PTR _sAggInfo$[esp+216]
	jl	SHORT $LL168@sqlite3Sel@5
$LN35@sqlite3Sel@5:
; Line 56569
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN33@sqlite3Sel@5
	cmp	DWORD PTR _inMutex, 0
	jg	$LN171@sqlite3Sel@5
$LN33@sqlite3Sel@5:
; Line 56574
	cmp	DWORD PTR _pGroupBy$[esp+180], 0
	je	$LN32@sqlite3Sel@5
; Line 56580
	mov	eax, ebx
	call	_sqlite3VdbeMakeLabel
	mov	DWORD PTR _addrInitializeLoop$99608[esp+180], eax
; Line 56581
	mov	eax, ebx
	call	_sqlite3VdbeMakeLabel
	mov	DWORD PTR _addrGroupByChange$99610[esp+180], eax
; Line 56582
	mov	eax, ebx
	call	_sqlite3VdbeMakeLabel
; Line 56590
	mov	esi, DWORD PTR _pGroupBy$[esp+180]
	mov	DWORD PTR _addrProcessRow$99611[esp+180], eax
	mov	eax, DWORD PTR [ebp+28]
	mov	DWORD PTR _sAggInfo$[esp+184], eax
	add	eax, 1
	push	esi
	push	ebp
	mov	DWORD PTR [ebp+28], eax
	call	_keyInfoFromExprList
; Line 56594
	mov	ecx, DWORD PTR _sAggInfo$[esp+192]
	push	-9					; fffffff7H
	mov	DWORD PTR _pKeyInfo$99624[esp+192], eax
	push	eax
	mov	eax, DWORD PTR _sAggInfo$[esp+208]
	mov	edx, 121				; 00000079H
	mov	edi, ebx
	call	_sqlite3VdbeOp3
; Line 56598
	mov	edi, DWORD PTR [ebp+32]
	mov	DWORD PTR _addrSortingIdx$99613[esp+196], eax
	mov	DWORD PTR tv1106[esp+196], edi
	add	edi, 1
; Line 56599
	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR [ebp+32], eax
; Line 56601
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR tv1397[esp+196], eax
	add	eax, ecx
	mov	DWORD PTR [ebp+32], eax
; Line 56603
	mov	edx, DWORD PTR [esi]
; Line 56604
	push	edi
	add	edx, eax
	mov	DWORD PTR tv1402[esp+200], eax
	push	0
	push	48					; 00000030H
	mov	eax, ebx
	mov	DWORD PTR [ebp+32], edx
	call	_sqlite3VdbeAddOp
; Line 56606
	mov	esi, DWORD PTR tv1106[esp+208]
	push	esi
	push	0
	push	48					; 00000030H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56608
	mov	eax, DWORD PTR _addrInitializeLoop$99608[esp+220]
	push	eax
	push	0
	push	95					; 0000005fH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56617
	mov	ecx, DWORD PTR [ebx+12]
; Line 56618
	push	edi
	push	1
	push	48					; 00000030H
	mov	eax, ebx
	mov	DWORD PTR _addrSetAbort$99607[esp+244], ecx
	call	_sqlite3VdbeAddOp
	add	esp, 64					; 00000040H
; Line 56620
	push	0
	push	0
	push	22					; 00000016H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56621
	mov	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR _addrOutputRow$99606[esp+192], eax
; Line 56622
	add	eax, 2
	push	eax
	push	esi
	push	5
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56624
	push	0
	push	0
	push	22					; 00000016H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56625
	lea	edx, DWORD PTR _sAggInfo$[esp+216]
	push	edx
	mov	eax, ebp
	call	_finalizeAggFunctions
; Line 56626
	mov	eax, DWORD PTR _pHaving$[esp+220]
	add	esp, 40					; 00000028H
	test	eax, eax
	je	SHORT $LN162@sqlite3Sel@5
; Line 56627
	mov	ecx, DWORD PTR _addrOutputRow$99606[esp+180]
	push	1
	add	ecx, 1
	push	ecx
	push	eax
	push	ebp
	call	_sqlite3ExprIfFalse
	add	esp, 16					; 00000010H
$LN162@sqlite3Sel@5:
; Line 56631
	mov	edx, DWORD PTR _aff$[esp+176]
	mov	eax, DWORD PTR _addrSetAbort$99607[esp+180]
	mov	ecx, DWORD PTR _addrOutputRow$99606[esp+180]
	mov	edi, DWORD PTR _p$[esp+176]
	push	edx
	mov	edx, DWORD PTR _iParm$[esp+180]
	push	eax
	mov	eax, DWORD PTR _eDest$[esp+184]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _distinct$[esp+192]
	push	edx
	mov	edx, DWORD PTR _pOrderBy$[esp+196]
	push	eax
	mov	eax, DWORD PTR [edi]
	push	ecx
	push	edx
	push	0
	push	eax
	push	edi
	push	ebp
	xor	eax, eax
	call	_selectInnerLoop
	add	esp, 44					; 0000002cH
; Line 56632
	test	eax, eax
	mov	DWORD PTR _rc$[esp+180], eax
	jne	$LN171@sqlite3Sel@5
; Line 56635
	push	eax
	push	eax
	push	22					; 00000016H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56640
	mov	esi, DWORD PTR [ebx+12]
; Line 56641
	lea	ecx, DWORD PTR _sAggInfo$[esp+192]
	push	ecx
	push	ebp
	mov	DWORD PTR _addrReset$99614[esp+200], esi
	call	_resetAccumulator
; Line 56642
	push	0
	push	0
	push	22					; 00000016H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56649
	mov	edx, DWORD PTR _addrInitializeLoop$99608[esp+212]
	mov	ecx, ebx
	call	_sqlite3VdbeResolveLabel
; Line 56650
	push	esi
	push	0
	push	46					; 0000002eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56651
	mov	eax, DWORD PTR _pWhere$[esp+224]
	mov	ecx, DWORD PTR _pTabList$[esp+224]
	lea	edx, DWORD PTR _pGroupBy$[esp+224]
	push	edx
	push	eax
	push	ecx
	push	ebp
	call	_sqlite3WhereBegin
	add	esp, 60					; 0000003cH
; Line 56652
	test	eax, eax
	mov	DWORD PTR _pWInfo$[esp+180], eax
	je	$select_end$99564
; Line 56653
	mov	esi, DWORD PTR _pGroupBy$[esp+180]
	test	esi, esi
	jne	SHORT $LN28@sqlite3Sel@5
; Line 56658
	mov	esi, DWORD PTR [edi+20]
	mov	DWORD PTR _pGroupBy$[esp+180], esi
; Line 56659
	mov	DWORD PTR _groupBySort$99605[esp+180], 0
; Line 56660
	jmp	$LN27@sqlite3Sel@5
$LN28@sqlite3Sel@5:
; Line 56667
	push	ebp
	mov	eax, esi
	mov	DWORD PTR _groupBySort$99605[esp+184], 1
	call	_sqlite3ExprCodeExprList
; Line 56668
	mov	edx, DWORD PTR _sAggInfo$[esp+188]
	push	0
	push	edx
	push	6
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56669
	mov	eax, DWORD PTR [esi]
	add	eax, 1
	add	esp, 16					; 00000010H
; Line 56670
	cmp	DWORD PTR _sAggInfo$[esp+200], 0
	mov	DWORD PTR _j$[esp+180], eax
	mov	DWORD PTR _i$[esp+180], 0
	jle	SHORT $LN24@sqlite3Sel@5
	mov	edx, DWORD PTR _sAggInfo$[esp+196]
	mov	DWORD PTR tv1486[esp+180], 0
$LL165@sqlite3Sel@5:
; Line 56672
	mov	ecx, DWORD PTR tv1486[esp+180]
	cmp	DWORD PTR [ecx+edx+12], eax
	jl	SHORT $LN25@sqlite3Sel@5
; Line 56673
	mov	eax, DWORD PTR [ecx+edx+4]
	mov	esi, DWORD PTR [ecx+edx+8]
	mov	edi, DWORD PTR [ecx+edx]
	call	_sqlite3ExprCodeGetColumn
; Line 56674
	add	DWORD PTR _j$[esp+180], 1
	mov	edx, DWORD PTR _sAggInfo$[esp+196]
	mov	eax, DWORD PTR _j$[esp+180]
	mov	esi, DWORD PTR _pGroupBy$[esp+180]
$LN25@sqlite3Sel@5:
	mov	ecx, DWORD PTR _i$[esp+180]
	add	DWORD PTR tv1486[esp+180], 24		; 00000018H
	add	ecx, 1
	cmp	ecx, DWORD PTR _sAggInfo$[esp+200]
	mov	DWORD PTR _i$[esp+180], ecx
	jl	SHORT $LL165@sqlite3Sel@5
$LN24@sqlite3Sel@5:
; Line 56676
	push	0
	push	eax
	push	91					; 0000005bH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56677
	mov	edx, DWORD PTR _sAggInfo$[esp+196]
	push	0
	push	edx
	push	111					; 0000006fH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56678
	mov	eax, DWORD PTR _pWInfo$[esp+204]
	push	eax
	call	_sqlite3WhereEnd
; Line 56679
	mov	ecx, DWORD PTR _addrEnd$99612[esp+208]
	mov	edx, DWORD PTR _sAggInfo$[esp+212]
	push	ecx
	push	edx
	push	19					; 00000013H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 40					; 00000028H
; Line 56681
	mov	BYTE PTR _sAggInfo$[esp+181], 1
$LN27@sqlite3Sel@5:
; Line 56689
	mov	eax, DWORD PTR [ebx+12]
; Line 56690
	xor	edi, edi
	cmp	DWORD PTR [esi], edi
	mov	DWORD PTR _addrTopOfLoop$99609[esp+180], eax
	jle	SHORT $LN160@sqlite3Sel@5
; Line 56689
	mov	DWORD PTR tv1498[esp+180], edi
$LL164@sqlite3Sel@5:
; Line 56691
	cmp	DWORD PTR _groupBySort$99605[esp+180], 0
	je	SHORT $LN19@sqlite3Sel@5
; Line 56692
	mov	ecx, DWORD PTR _sAggInfo$[esp+184]
	push	edi
	push	ecx
	push	3
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 56693
	jmp	SHORT $LN18@sqlite3Sel@5
$LN19@sqlite3Sel@5:
; Line 56695
	mov	eax, DWORD PTR tv1498[esp+180]
	mov	BYTE PTR _sAggInfo$[esp+180], 1
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [edx+eax]
	push	ecx
	push	ebp
	call	_sqlite3ExprCode
	add	esp, 8
$LN18@sqlite3Sel@5:
; Line 56697
	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR tv1402[esp+180]
	xor	eax, eax
	sub	edx, 1
	cmp	edi, edx
	setl	al
	lea	edx, DWORD PTR [edi+ecx]
	push	eax
	push	edx
	push	124					; 0000007cH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	DWORD PTR tv1498[esp+192], 12		; 0000000cH
	add	edi, 1
	add	esp, 12					; 0000000cH
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LL164@sqlite3Sel@5
$LN160@sqlite3Sel@5:
; Line 56699
	mov	eax, DWORD PTR _pGroupBy$[esp+180]
	mov	esi, DWORD PTR [eax]
	sub	esi, 1
	js	$LN161@sqlite3Sel@5
$LL17@sqlite3Sel@5:
; Line 56700
	mov	ecx, DWORD PTR _pGroupBy$[esp+180]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	cmp	esi, edx
	jge	SHORT $LN166@sqlite3Sel@5
; Line 56701
	mov	eax, DWORD PTR tv1402[esp+180]
	lea	ecx, DWORD PTR [esi+eax]
	push	0
	push	ecx
	push	1
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN166@sqlite3Sel@5:
; Line 56703
	mov	edx, DWORD PTR tv1397[esp+180]
	lea	eax, DWORD PTR [esi+edx]
	push	0
	push	eax
	push	1
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 56704
	test	esi, esi
; Line 56705
	mov	eax, ebx
	jne	SHORT $LN13@sqlite3Sel@5
	mov	ecx, DWORD PTR _addrProcessRow$99611[esp+180]
	push	ecx
	push	512					; 00000200H
	push	68					; 00000044H
; Line 56706
	jmp	SHORT $LN172@sqlite3Sel@5
$LN13@sqlite3Sel@5:
; Line 56707
	mov	edx, DWORD PTR _addrGroupByChange$99610[esp+180]
	push	edx
	push	512					; 00000200H
	push	67					; 00000043H
$LN172@sqlite3Sel@5:
	call	_sqlite3VdbeAddOp
; Line 56709
	mov	eax, DWORD PTR _pKeyInfo$99624[esp+192]
	mov	edi, DWORD PTR [ebx+20]
	mov	ecx, DWORD PTR [eax+esi*4+12]
	add	esp, 12					; 0000000cH
	test	edi, edi
	mov	DWORD PTR $T140475[esp+180], ecx
	je	SHORT $LN154@sqlite3Sel@5
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN110@sqlite3Sel@5
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN154@sqlite3Sel@5
$LN110@sqlite3Sel@5:
	mov	eax, DWORD PTR [ebx+12]
	sub	eax, 1
	js	SHORT $LN16@sqlite3Sel@5
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edi+ecx*4+16]
	lea	edi, DWORD PTR [edi+ecx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	cmp	DWORD PTR $T140475[esp+180], 0
	mov	DWORD PTR [edi+12], 0
	jne	SHORT $LN155@sqlite3Sel@5
	xor	eax, eax
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	jmp	SHORT $LN16@sqlite3Sel@5
$LN155@sqlite3Sel@5:
	mov	edx, DWORD PTR $T140475[esp+180]
	mov	DWORD PTR [edi+12], edx
	mov	DWORD PTR [edi+16], -4			; fffffffcH
	jmp	SHORT $LN16@sqlite3Sel@5
$LN154@sqlite3Sel@5:
	mov	eax, -4					; fffffffcH
	call	_freeP3
$LN16@sqlite3Sel@5:
; Line 56699
	sub	esi, 1
	jns	$LL17@sqlite3Sel@5
$LN161@sqlite3Sel@5:
; Line 56721
	mov	edx, DWORD PTR _addrGroupByChange$99610[esp+180]
	mov	ecx, ebx
	call	_sqlite3VdbeResolveLabel
; Line 56722
	mov	eax, DWORD PTR _pGroupBy$[esp+180]
	xor	esi, esi
	cmp	DWORD PTR [eax], esi
	jle	SHORT $LN163@sqlite3Sel@5
	mov	edi, DWORD PTR tv1397[esp+180]
	mov	eax, DWORD PTR tv1402[esp+180]
	sub	eax, edi
	mov	DWORD PTR tv1514[esp+180], eax
$LL11@sqlite3Sel@5:
	mov	ecx, DWORD PTR tv1514[esp+180]
	add	ecx, edi
; Line 56723
	push	ecx
	push	edi
	push	132					; 00000084H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	mov	edx, DWORD PTR _pGroupBy$[esp+192]
	add	esi, 1
	add	esp, 12					; 0000000cH
	add	edi, 1
	cmp	esi, DWORD PTR [edx]
	jl	SHORT $LL11@sqlite3Sel@5
$LN163@sqlite3Sel@5:
; Line 56725
	mov	edi, DWORD PTR _addrOutputRow$99606[esp+180]
	push	edi
	push	0
	push	46					; 0000002eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56727
	mov	eax, DWORD PTR _addrEnd$99612[esp+192]
	mov	esi, DWORD PTR tv1106[esp+192]
	push	eax
	lea	eax, DWORD PTR [esi+1]
	push	eax
	push	5
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56729
	mov	ecx, DWORD PTR _addrReset$99614[esp+204]
	push	ecx
	push	0
	push	46					; 0000002eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 56735
	mov	eax, DWORD PTR [ebx+32]
	add	esp, 36					; 00000024H
	test	eax, eax
	je	SHORT $LN119@sqlite3Sel@5
	mov	edx, DWORD PTR _addrProcessRow$99611[esp+180]
	lea	ecx, DWORD PTR [edx*4+4]
	mov	edx, DWORD PTR [ebx+12]
	sub	eax, ecx
	mov	DWORD PTR [eax], edx
$LN119@sqlite3Sel@5:
; Line 56736
	lea	eax, DWORD PTR _sAggInfo$[esp+180]
	push	eax
	push	ebp
	call	_updateAccumulator
; Line 56737
	push	esi
	push	1
	push	48					; 00000030H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 20					; 00000014H
; Line 56742
	cmp	DWORD PTR _groupBySort$99605[esp+180], 0
	je	SHORT $LN8@sqlite3Sel@5
; Line 56743
	mov	ecx, DWORD PTR _addrTopOfLoop$99609[esp+180]
	mov	edx, DWORD PTR _sAggInfo$[esp+184]
	push	ecx
	push	edx
	push	110					; 0000006eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 56751
	push	edi
	push	0
	push	46					; 0000002eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 56755
	jmp	$LN6@sqlite3Sel@5
$LN8@sqlite3Sel@5:
; Line 56745
	mov	eax, DWORD PTR _pWInfo$[esp+180]
	push	eax
	call	_sqlite3WhereEnd
; Line 56746
	mov	ecx, DWORD PTR _addrSortingIdx$99613[esp+184]
	add	esp, 4
	mov	edx, 1
	mov	eax, ebx
	call	_sqlite3VdbeChangeToNoop
; Line 56751
	push	edi
	push	0
	push	46					; 0000002eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 56755
	jmp	$LN6@sqlite3Sel@5
$LN32@sqlite3Sel@5:
; Line 56760
	lea	ecx, DWORD PTR _sAggInfo$[esp+180]
	push	ecx
	push	ebp
	call	_resetAccumulator
; Line 56761
	mov	edx, DWORD PTR _pWhere$[esp+188]
	mov	eax, DWORD PTR _pTabList$[esp+188]
	push	0
	push	edx
	push	eax
	push	ebp
	call	_sqlite3WhereBegin
	mov	esi, eax
	add	esp, 24					; 00000018H
; Line 56762
	test	esi, esi
	je	$LN171@sqlite3Sel@5
; Line 56763
	lea	ecx, DWORD PTR _sAggInfo$[esp+180]
	push	ecx
	push	ebp
	call	_updateAccumulator
; Line 56764
	push	esi
	call	_sqlite3WhereEnd
; Line 56765
	lea	edx, DWORD PTR _sAggInfo$[esp+192]
	push	edx
	mov	eax, ebp
	call	_finalizeAggFunctions
; Line 56767
	mov	eax, DWORD PTR _pHaving$[esp+196]
; Line 56768
	mov	esi, DWORD PTR _addrEnd$99612[esp+196]
	add	esp, 16					; 00000010H
	test	eax, eax
	mov	DWORD PTR _pOrderBy$[esp+180], 0
	je	SHORT $LN4@sqlite3Sel@5
	push	1
	push	esi
	push	eax
	push	ebp
	call	_sqlite3ExprIfFalse
	add	esp, 16					; 00000010H
$LN4@sqlite3Sel@5:
; Line 56771
	mov	eax, DWORD PTR _aff$[esp+176]
	mov	ecx, DWORD PTR _iParm$[esp+176]
	mov	edx, DWORD PTR _eDest$[esp+176]
	push	eax
	mov	eax, DWORD PTR _p$[esp+180]
	push	esi
	push	esi
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	-1
	push	0
	push	0
	push	ecx
	push	eax
	push	ebp
	xor	eax, eax
	call	_selectInnerLoop
	add	esp, 44					; 0000002cH
$LN6@sqlite3Sel@5:
; Line 56773
	mov	eax, DWORD PTR [ebx+32]
	test	eax, eax
	je	SHORT $LN122@sqlite3Sel@5
	mov	edx, DWORD PTR _addrEnd$99612[esp+180]
	lea	ecx, DWORD PTR [edx*4+4]
	mov	edx, DWORD PTR [ebx+12]
	sub	eax, ecx
	mov	DWORD PTR [eax], edx
$LN122@sqlite3Sel@5:
; Line 56780
	cmp	DWORD PTR _pOrderBy$[esp+180], 0
	je	SHORT $LN3@sqlite3Sel@5
; Line 56781
	mov	eax, DWORD PTR _iParm$[esp+176]
	mov	ecx, DWORD PTR _eDest$[esp+176]
	mov	edx, DWORD PTR _pEList$[esp+180]
	push	eax
	mov	eax, DWORD PTR [edx]
	push	ecx
	mov	ecx, DWORD PTR _p$[esp+184]
	push	eax
	push	ecx
	push	ebp
	mov	esi, ebx
	call	_generateSortTail
	add	esp, 20					; 00000014H
$LN3@sqlite3Sel@5:
; Line 56790
	mov	eax, DWORD PTR _pParent$[esp+176]
	test	eax, eax
	je	SHORT $LN2@sqlite3Sel@5
; Line 56793
	mov	ecx, DWORD PTR _parentTab$[esp+176]
	mov	eax, DWORD PTR [eax+12]
	lea	edx, DWORD PTR [ecx+ecx*2]
	shl	edx, 4
	mov	BYTE PTR [edx+eax+28], 1
$LN2@sqlite3Sel@5:
; Line 56799
	mov	eax, DWORD PTR [ebx+32]
	test	eax, eax
	je	SHORT $LN125@sqlite3Sel@5
	mov	ecx, DWORD PTR _iEnd$[esp+180]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	ecx, DWORD PTR [ebx+12]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN125@sqlite3Sel@5:
; Line 56804
	mov	DWORD PTR _rc$[esp+180], 0
$select_end$99564:
; Line 56814
	cmp	DWORD PTR _eDest$[esp+176], 4
	jne	SHORT $LN171@sqlite3Sel@5
; Line 56815
	mov	edx, DWORD PTR _pTabList$[esp+180]
	mov	ecx, DWORD PTR _pEList$[esp+180]
	push	edx
	push	ebp
	call	_generateColumnNames
	add	esp, 8
$LN171@sqlite3Sel@5:
	pop	ebx
$LN1@sqlite3Sel@5:
; Line 56818
	mov	eax, DWORD PTR _sAggInfo$[esp+192]
	test	eax, eax
	je	SHORT $LN131@sqlite3Sel@5
	push	eax
	call	_free
	add	esp, 4
$LN131@sqlite3Sel@5:
; Line 56819
	mov	eax, DWORD PTR _sAggInfo$[esp+208]
	test	eax, eax
	je	SHORT $LN136@sqlite3Sel@5
	push	eax
	call	_free
	add	esp, 4
$LN136@sqlite3Sel@5:
; Line 56820
	mov	eax, DWORD PTR _rc$[esp+176]
	pop	edi
	pop	esi
	pop	ebp
; Line 56821
	add	esp, 164				; 000000a4H
	ret	0
_sqlite3Select ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@GJNALGCE@cannot?5create?5INSTEAD?5OF?5trigger@ ; `string'
PUBLIC	??_C@_0CF@CNPIEMED@cannot?5create?5?$CFs?5trigger?5on?5view@ ; `string'
PUBLIC	??_C@_05OHDJMCHE@AFTER?$AA@			; `string'
PUBLIC	??_C@_06BIGAHLBC@BEFORE?$AA@			; `string'
PUBLIC	??_C@_0CG@JAGCNIHD@cannot?5create?5trigger?5on?5system?5@ ; `string'
PUBLIC	??_C@_0BK@IACDKJFA@trigger?5?$CFT?5already?5exists?$AA@ ; `string'
PUBLIC	??_C@_0CJ@KLDCMPKB@cannot?5create?5triggers?5on?5virtua@ ; `string'
PUBLIC	??_C@_0CO@CGGBEMGD@temporary?5trigger?5may?5not?5have?5q@ ; `string'
;	COMDAT ??_C@_0CO@GJNALGCE@cannot?5create?5INSTEAD?5OF?5trigger@
CONST	SEGMENT
??_C@_0CO@GJNALGCE@cannot?5create?5INSTEAD?5OF?5trigger@ DB 'cannot creat'
	DB	'e INSTEAD OF trigger on table: %S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CNPIEMED@cannot?5create?5?$CFs?5trigger?5on?5view@
CONST	SEGMENT
??_C@_0CF@CNPIEMED@cannot?5create?5?$CFs?5trigger?5on?5view@ DB 'cannot c'
	DB	'reate %s trigger on view: %S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHDJMCHE@AFTER?$AA@
CONST	SEGMENT
??_C@_05OHDJMCHE@AFTER?$AA@ DB 'AFTER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIGAHLBC@BEFORE?$AA@
CONST	SEGMENT
??_C@_06BIGAHLBC@BEFORE?$AA@ DB 'BEFORE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JAGCNIHD@cannot?5create?5trigger?5on?5system?5@
CONST	SEGMENT
??_C@_0CG@JAGCNIHD@cannot?5create?5trigger?5on?5system?5@ DB 'cannot crea'
	DB	'te trigger on system table', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IACDKJFA@trigger?5?$CFT?5already?5exists?$AA@
CONST	SEGMENT
??_C@_0BK@IACDKJFA@trigger?5?$CFT?5already?5exists?$AA@ DB 'trigger %T al'
	DB	'ready exists', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KLDCMPKB@cannot?5create?5triggers?5on?5virtua@
CONST	SEGMENT
??_C@_0CJ@KLDCMPKB@cannot?5create?5triggers?5on?5virtua@ DB 'cannot creat'
	DB	'e triggers on virtual tables', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CGGBEMGD@temporary?5trigger?5may?5not?5have?5q@
CONST	SEGMENT
??_C@_0CO@CGGBEMGD@temporary?5trigger?5may?5not?5have?5q@ DB 'temporary t'
	DB	'rigger may not have qualified name', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3BeginTrigger
_TEXT	SEGMENT
_pName$ = -44						; size = 4
tv353 = -40						; size = 4
_zName$ = -36						; size = 4
_pTab$ = -32						; size = 4
tv409 = -28						; size = 4
_zDb$99825 = -24					; size = 4
tv389 = -20						; size = 4
_sFix$ = -16						; size = 16
_pParse$ = 8						; size = 4
_pName2$ = 12						; size = 4
_tr_tm$ = 16						; size = 4
_op$ = 20						; size = 4
_pColumns$ = 24						; size = 4
_pTableName$ = 28					; size = 4
_pWhen$ = 32						; size = 4
_isTemp$ = 36						; size = 4
_noErr$ = 40						; size = 4
_sqlite3BeginTrigger PROC				; COMDAT
; _pName1$ = eax
; Line 57171
	sub	esp, 44					; 0000002cH
	push	ebx
; Line 57175
	mov	ebx, DWORD PTR _pParse$[esp+44]
	push	ebp
	push	esi
	mov	esi, eax
	mov	eax, DWORD PTR [ebx]
	xor	ebp, ebp
; Line 57183
	cmp	DWORD PTR _isTemp$[esp+52], ebp
	push	edi
	mov	DWORD PTR tv353[esp+60], eax
	je	SHORT $LN26@sqlite3Beg@3
; Line 57185
	mov	eax, DWORD PTR _pName2$[esp+56]
	test	DWORD PTR [eax+4], -2			; fffffffeH
	jbe	SHORT $LN25@sqlite3Beg@3
; Line 57186
	push	OFFSET ??_C@_0CO@CGGBEMGD@temporary?5trigger?5may?5not?5have?5q@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
; Line 57187
	jmp	$LN64@sqlite3Beg@3
$LN25@sqlite3Beg@3:
; Line 57189
	mov	edi, 1
; Line 57190
	mov	DWORD PTR _pName$[esp+60], esi
; Line 57191
	jmp	SHORT $LN23@sqlite3Beg@3
$LN26@sqlite3Beg@3:
; Line 57193
	mov	ecx, DWORD PTR _pName2$[esp+56]
	test	ecx, ecx
	je	SHORT $LN37@sqlite3Beg@3
	test	DWORD PTR [ecx+4], -2			; fffffffeH
	jbe	SHORT $LN37@sqlite3Beg@3
	push	eax
	mov	eax, esi
	mov	DWORD PTR _pName$[esp+64], ecx
	call	_sqlite3FindDb
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN60@sqlite3Beg@3
	push	esi
	push	OFFSET ??_C@_0BE@DADMKDCE@unknown?5database?5?$CFT?$AA@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
	add	esp, 8
	add	DWORD PTR [ebx+24], 1
	jmp	$LN57@sqlite3Beg@3
$LN37@sqlite3Beg@3:
	mov	eax, DWORD PTR [eax+60]
	mov	DWORD PTR _pName$[esp+60], esi
$LN60@sqlite3Beg@3:
; Line 57194
	test	eax, eax
	mov	edi, eax
	jl	$LN57@sqlite3Beg@3
	mov	esi, DWORD PTR _pName$[esp+60]
$LN23@sqlite3Beg@3:
; Line 57204
	mov	eax, DWORD PTR _pTableName$[esp+56]
	test	eax, eax
	je	$LN57@sqlite3Beg@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN22@sqlite3Beg@3
	cmp	DWORD PTR _inMutex, ebp
	jg	$LN57@sqlite3Beg@3
$LN22@sqlite3Beg@3:
; Line 57207
	push	eax
	push	ebx
	call	_sqlite3SrcListLookup
; Line 57208
	mov	ecx, DWORD PTR _pName2$[esp+64]
	add	esp, 8
	test	DWORD PTR [ecx+4], -2			; fffffffeH
	jne	SHORT $LN61@sqlite3Beg@3
	test	eax, eax
	je	SHORT $LN61@sqlite3Beg@3
	mov	edx, DWORD PTR tv353[esp+60]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+76]
	cmp	edx, DWORD PTR [ecx+44]
	jne	SHORT $LN61@sqlite3Beg@3
; Line 57209
	mov	edi, 1
$LN61@sqlite3Beg@3:
; Line 57213
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN19@sqlite3Beg@3
	cmp	DWORD PTR _inMutex, ebp
	jg	$LN57@sqlite3Beg@3
$LN19@sqlite3Beg@3:
; Line 57216
	test	edi, edi
	jl	SHORT $LN18@sqlite3Beg@3
	cmp	edi, 1
	je	SHORT $LN18@sqlite3Beg@3
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR _sFix$[esp+60], ebx
	mov	edx, DWORD PTR [eax+4]
	lea	ecx, DWORD PTR [edi+edi*2]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR _pTableName$[esp+56]
	push	ecx
	lea	edx, DWORD PTR _sFix$[esp+64]
	push	edx
	mov	DWORD PTR _sFix$[esp+72], eax
	mov	DWORD PTR _sFix$[esp+76], OFFSET ??_C@_07DIDNFGDE@trigger?$AA@
	mov	DWORD PTR _sFix$[esp+80], esi
	call	_sqlite3FixSrcList
	add	esp, 8
	test	eax, eax
	jne	$LN57@sqlite3Beg@3
$LN18@sqlite3Beg@3:
; Line 57219
	mov	eax, DWORD PTR _pTableName$[esp+56]
	push	eax
	push	ebx
	call	_sqlite3SrcListLookup
	add	esp, 8
; Line 57220
	test	eax, eax
	mov	DWORD PTR _pTab$[esp+60], eax
	je	$LN57@sqlite3Beg@3
; Line 57224
	cmp	BYTE PTR [eax+57], 0
	je	SHORT $LN16@sqlite3Beg@3
; Line 57225
	push	OFFSET ??_C@_0CJ@KLDCMPKB@cannot?5create?5triggers?5on?5virtua@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
; Line 57226
	jmp	$LN64@sqlite3Beg@3
$LN16@sqlite3Beg@3:
; Line 57231
	mov	eax, esi
	call	_sqlite3NameFromToken
	mov	esi, eax
; Line 57232
	test	esi, esi
	mov	DWORD PTR _zName$[esp+60], esi
	je	$LN57@sqlite3Beg@3
	mov	eax, ebx
	call	_sqlite3CheckObjectName
	test	eax, eax
	jne	$trigger_cleanup$99799
; Line 57235
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL54@sqlite3Beg@3:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL54@sqlite3Beg@3
	mov	ebx, DWORD PTR _zName$[esp+60]
	lea	ecx, DWORD PTR [edi+edi*2]
	sub	eax, edx
	mov	edx, DWORD PTR tv353[esp+60]
	mov	edx, DWORD PTR [edx+4]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	mov	esi, DWORD PTR [edx+ecx+20]
	add	esi, 60					; 0000003cH
	mov	edi, eax
	mov	DWORD PTR tv389[esp+60], ecx
	call	_sqlite3HashFind
	test	eax, eax
	je	SHORT $LN13@sqlite3Beg@3
; Line 57236
	cmp	DWORD PTR _noErr$[esp+56], ebp
	jne	$LN55@sqlite3Beg@3
; Line 57237
	mov	eax, DWORD PTR _pName$[esp+60]
	mov	edi, DWORD PTR _pParse$[esp+56]
	push	eax
	push	OFFSET ??_C@_0BK@IACDKJFA@trigger?5?$CFT?5already?5exists?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 57239
	mov	ebx, edi
	jmp	$trigger_cleanup$99799
$LN13@sqlite3Beg@3:
; Line 57243
	mov	esi, DWORD PTR _pTab$[esp+60]
	mov	ecx, DWORD PTR [esi]
	mov	eax, 7
	mov	edx, OFFSET ??_C@_07IOGLMIPM@sqlite_?$AA@
	mov	DWORD PTR tv409[esp+60], ecx
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	SHORT $LN11@sqlite3Beg@3
; Line 57244
	mov	edi, DWORD PTR _pParse$[esp+56]
	push	OFFSET ??_C@_0CG@JAGCNIHD@cannot?5create?5trigger?5on?5system?5@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 57245
	add	DWORD PTR [edi+24], 1
; Line 57246
	mov	ebx, edi
	jmp	$trigger_cleanup$99799
$LN11@sqlite3Beg@3:
; Line 57252
	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	mov	ecx, DWORD PTR _tr_tm$[esp+56]
	je	SHORT $LN66@sqlite3Beg@3
	cmp	ecx, 41					; 00000029H
	je	SHORT $LN10@sqlite3Beg@3
; Line 57254
	cmp	ecx, 29					; 0000001dH
	mov	eax, OFFSET ??_C@_06BIGAHLBC@BEFORE?$AA@
	je	SHORT $LN30@sqlite3Beg@3
	mov	eax, OFFSET ??_C@_05OHDJMCHE@AFTER?$AA@
$LN30@sqlite3Beg@3:
	mov	ecx, DWORD PTR _pTableName$[esp+56]
	mov	edi, DWORD PTR _pParse$[esp+56]
	push	0
	push	ecx
	push	eax
	push	OFFSET ??_C@_0CF@CNPIEMED@cannot?5create?5?$CFs?5trigger?5on?5view@
	call	_sqlite3ErrorMsg
	add	esp, 16					; 00000010H
; Line 57255
	mov	ebx, edi
	jmp	$trigger_cleanup$99799
$LN10@sqlite3Beg@3:
; Line 57257
	test	eax, eax
	jne	SHORT $LN9@sqlite3Beg@3
$LN66@sqlite3Beg@3:
	cmp	ecx, 41					; 00000029H
	jne	SHORT $LN9@sqlite3Beg@3
; Line 57259
	mov	edx, DWORD PTR _pTableName$[esp+56]
	mov	edi, DWORD PTR _pParse$[esp+56]
	push	0
	push	edx
	push	OFFSET ??_C@_0CO@GJNALGCE@cannot?5create?5INSTEAD?5OF?5trigger@
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
; Line 57260
	mov	ebx, edi
	jmp	$trigger_cleanup$99799
$LN9@sqlite3Beg@3:
; Line 57262
	mov	ebx, DWORD PTR tv353[esp+60]
	mov	esi, DWORD PTR [esi+76]
	mov	ecx, ebx
	call	_sqlite3SchemaToIndex
; Line 57268
	mov	esi, DWORD PTR _isTemp$[esp+56]
	test	esi, esi
	mov	edi, eax
	mov	eax, DWORD PTR [ebx+4]
	lea	edx, DWORD PTR [edi+edi*2]
	mov	edx, DWORD PTR [eax+edx*8]
	mov	ecx, 7
	mov	DWORD PTR _zDb$99825[esp+60], edx
	je	SHORT $LN31@sqlite3Beg@3
	mov	eax, DWORD PTR [eax+24]
	jmp	SHORT $LN32@sqlite3Beg@3
$LN31@sqlite3Beg@3:
	mov	eax, edx
$LN32@sqlite3Beg@3:
; Line 57269
	cmp	edi, 1
	je	SHORT $LN7@sqlite3Beg@3
	test	esi, esi
	je	SHORT $LN8@sqlite3Beg@3
$LN7@sqlite3Beg@3:
	mov	ecx, 5
$LN8@sqlite3Beg@3:
; Line 57270
	mov	ebx, DWORD PTR _zName$[esp+60]
	mov	esi, DWORD PTR _pParse$[esp+56]
	push	eax
	mov	eax, DWORD PTR tv409[esp+64]
	push	eax
	push	ebx
	push	ecx
	mov	eax, esi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN55@sqlite3Beg@3
; Line 57273
	cmp	edi, 1
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN34@sqlite3Beg@3
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN34@sqlite3Beg@3:
	mov	ecx, DWORD PTR _zDb$99825[esp+60]
	push	ecx
	push	0
	push	eax
	push	18					; 00000012H
	mov	eax, esi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN55@sqlite3Beg@3
; Line 57284
	cmp	DWORD PTR _tr_tm$[esp+56], 41		; 00000029H
	jne	SHORT $LN4@sqlite3Beg@3
; Line 57285
	mov	DWORD PTR _tr_tm$[esp+56], 29		; 0000001dH
$LN4@sqlite3Beg@3:
; Line 57289
	mov	edi, 44					; 0000002cH
	call	_sqlite3Malloc
	mov	ebp, eax
; Line 57290
	test	ebp, ebp
	je	SHORT $LN55@sqlite3Beg@3
; Line 57293
	mov	edx, DWORD PTR _pTableName$[esp+56]
	mov	DWORD PTR [ebp], ebx
	mov	ebx, DWORD PTR [edx+12]
	call	_sqlite3StrDup
; Line 57294
	mov	edx, DWORD PTR tv389[esp+60]
; Line 57297
	cmp	DWORD PTR _tr_tm$[esp+56], 29		; 0000001dH
	mov	DWORD PTR [ebp+4], eax
	mov	eax, DWORD PTR tv353[esp+60]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+edx+20]
	mov	ecx, DWORD PTR _pTab$[esp+60]
	mov	DWORD PTR [ebp+28], eax
	mov	edx, DWORD PTR [ecx+76]
	mov	al, BYTE PTR _op$[esp+56]
	mov	DWORD PTR [ebp+32], edx
; Line 57298
	mov	edx, DWORD PTR _pWhen$[esp+56]
	setne	cl
	add	cl, 1
	push	edx
	mov	BYTE PTR [ebp+8], al
	mov	BYTE PTR [ebp+9], cl
	call	_sqlite3ExprDup
	mov	DWORD PTR [ebp+12], eax
; Line 57299
	mov	eax, DWORD PTR _pColumns$[esp+60]
	push	eax
	call	_sqlite3IdListDup
; Line 57300
	lea	ecx, DWORD PTR [ebp+20]
	mov	DWORD PTR [ebp+16], eax
	mov	eax, DWORD PTR _pName$[esp+68]
	push	ecx
	call	_sqlite3TokenCopy
	add	esp, 12					; 0000000cH
; Line 57302
	mov	DWORD PTR [esi+168], ebp
; Line 57305
	mov	ebx, esi
	jmp	SHORT $LN57@sqlite3Beg@3
$LN55@sqlite3Beg@3:
; Line 57260
	mov	ebx, DWORD PTR _pParse$[esp+56]
$trigger_cleanup$99799:
; Line 57305
	mov	edx, DWORD PTR _zName$[esp+60]
	push	edx
	call	_free
$LN64@sqlite3Beg@3:
	add	esp, 4
$LN57@sqlite3Beg@3:
; Line 57306
	mov	eax, DWORD PTR _pTableName$[esp+56]
	push	eax
	call	_sqlite3SrcListDelete
; Line 57307
	mov	edi, DWORD PTR _pColumns$[esp+60]
	call	_sqlite3IdListDelete
; Line 57308
	mov	ecx, DWORD PTR _pWhen$[esp+60]
	push	ecx
	call	_sqlite3ExprDelete
	add	esp, 8
; Line 57309
	cmp	DWORD PTR [ebx+168], 0
	jne	SHORT $LN2@sqlite3Beg@3
; Line 57310
	mov	esi, ebp
	call	_sqlite3DeleteTrigger
$LN2@sqlite3Beg@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 57314
	add	esp, 44					; 0000002cH
	ret	0
_sqlite3BeginTrigger ENDP
_TEXT	ENDS
PUBLIC	??_C@_07OLKPBLEA@_rowid_?$AA@			; `string'
;	COMDAT ??_C@_07OLKPBLEA@_rowid_?$AA@
CONST	SEGMENT
??_C@_07OLKPBLEA@_rowid_?$AA@ DB '_rowid_', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _updateVirtualTable
_TEXT	SEGMENT
tv1036 = -20						; size = 4
tv642 = -20						; size = 4
tv649 = -16						; size = 4
$T140648 = -16						; size = 4
_i$ = -16						; size = 4
_pSelect$ = -12						; size = 4
tv644 = -8						; size = 4
_dummy$140629 = -8					; size = 8
_dummy$140613 = -8					; size = 8
_pParse$ = 8						; size = 4
_pSrc$ = 12						; size = 4
$T140909 = 16						; size = 4
_pTab$ = 16						; size = 4
_pChanges$ = 20						; size = 4
_pRowid$ = 24						; size = 4
_aXRef$ = 28						; size = 4
_pWhere$ = 32						; size = 4
_updateVirtualTable PROC				; COMDAT
; Line 58511
	sub	esp, 20					; 00000014H
; Line 58512
	mov	eax, DWORD PTR _pParse$[esp+16]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax+12]
	push	edi
; Line 58523
	xor	ebx, ebx
	push	ebx
	push	23					; 00000017H
	lea	eax, DWORD PTR _dummy$140613[esp+44]
	xor	edi, edi
	mov	DWORD PTR _dummy$140613[esp+44], OFFSET ??_C@_07OLKPBLEA@_rowid_?$AA@
	mov	DWORD PTR _dummy$140613[esp+48], 14	; 0000000eH
	call	_sqlite3Expr
	push	ebx
	push	eax
	xor	eax, eax
	call	_sqlite3ExprListAppend
	mov	ebp, eax
; Line 58524
	mov	eax, DWORD PTR _pRowid$[esp+48]
	add	esp, 16					; 00000010H
	cmp	eax, ebx
	je	SHORT $LN11@updateVirt
; Line 58525
	push	ebx
	push	eax
	call	_sqlite3ExprDup
	add	esp, 4
	push	eax
	mov	eax, ebp
	call	_sqlite3ExprListAppend
	add	esp, 8
	mov	ebp, eax
$LN11@updateVirt:
; Line 58528
	mov	ecx, DWORD PTR _pTab$[esp+32]
	xor	edi, edi
	cmp	DWORD PTR [ecx+4], ebx
	mov	DWORD PTR _i$[esp+36], edi
	jle	$LN8@updateVirt
	mov	DWORD PTR tv1036[esp+36], ebx
$LL177@updateVirt:
; Line 58529
	mov	edx, DWORD PTR _aXRef$[esp+32]
	mov	eax, DWORD PTR [edx+edi*4]
	cmp	eax, ebx
	jl	SHORT $LN7@updateVirt
; Line 58530
	mov	ecx, DWORD PTR _pChanges$[esp+32]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edx+eax*4]
	push	eax
	call	_sqlite3ExprDup
	add	esp, 4
; Line 58531
	jmp	SHORT $LN6@updateVirt
$LN7@updateVirt:
; Line 58532
	mov	ecx, DWORD PTR _pTab$[esp+32]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR tv1036[esp+36]
	mov	eax, DWORD PTR [eax+edx]
	cmp	eax, ebx
	mov	DWORD PTR _dummy$140629[esp+36], eax
	je	SHORT $LN24@updateVirt
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL153@updateVirt:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	cmp	cl, bl
	jne	SHORT $LL153@updateVirt
	sub	eax, edx
	jmp	SHORT $LN25@updateVirt
$LN24@updateVirt:
	xor	eax, eax
$LN25@updateVirt:
	lea	ecx, DWORD PTR [eax+eax]
	push	ebx
	push	23					; 00000017H
	lea	eax, DWORD PTR _dummy$140629[esp+44]
	xor	edi, edi
	mov	DWORD PTR _dummy$140629[esp+48], ecx
	call	_sqlite3Expr
	mov	edi, DWORD PTR _i$[esp+44]
	add	esp, 8
$LN6@updateVirt:
; Line 58534
	push	ebx
	push	eax
	mov	eax, ebp
	call	_sqlite3ExprListAppend
	mov	edx, DWORD PTR _pTab$[esp+40]
	add	DWORD PTR tv1036[esp+44], 20		; 00000014H
	add	edi, 1
	add	esp, 8
	cmp	edi, DWORD PTR [edx+4]
	mov	ebp, eax
	mov	DWORD PTR _i$[esp+36], edi
	jl	$LL177@updateVirt
$LN8@updateVirt:
; Line 58536
	mov	eax, DWORD PTR _pWhere$[esp+32]
	mov	ecx, DWORD PTR _pSrc$[esp+32]
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	eax
	push	ecx
	mov	eax, ebp
	call	_sqlite3SelectNew
; Line 58543
	mov	ecx, DWORD PTR _pTab$[esp+64]
	mov	DWORD PTR _pSelect$[esp+68], eax
	mov	eax, DWORD PTR _pParse$[esp+64]
	mov	ebp, DWORD PTR [eax+28]
	lea	edx, DWORD PTR [ebp+1]
	mov	DWORD PTR [eax+28], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	edi, DWORD PTR [esi+12]
	xor	eax, eax
	add	esp, 32					; 00000020H
	cmp	DWORD PTR _pRowid$[esp+32], ebx
	mov	DWORD PTR tv642[esp+36], ebp
	setne	al
	cmp	DWORD PTR [esi+16], edi
	mov	DWORD PTR tv644[esp+36], eax
	lea	eax, DWORD PTR [eax+edx+1]
	mov	DWORD PTR $T140648[esp+36], eax
	jg	SHORT $LN26@updateVirt
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN160@updateVirt
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN161@updateVirt
$LN160@updateVirt:
	xor	ebx, ebx
$LN26@updateVirt:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR $T140648[esp+36]
	mov	BYTE PTR [eax], 121			; 00000079H
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN28@updateVirt
$LN161@updateVirt:
	xor	ebx, ebx
$LN28@updateVirt:
; Line 58547
	mov	edx, DWORD PTR _pSelect$[esp+36]
	mov	eax, DWORD PTR _pParse$[esp+32]
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebp
	push	7
	push	edx
	push	eax
	call	_sqlite3Select
; Line 58553
	mov	edi, DWORD PTR [esi+12]
	add	esp, 32					; 00000020H
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN32@updateVirt
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN163@updateVirt
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN164@updateVirt
$LN163@updateVirt:
	xor	ebx, ebx
$LN32@updateVirt:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 127			; 0000007fH
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN34@updateVirt
$LN164@updateVirt:
	xor	ebx, ebx
$LN34@updateVirt:
; Line 58554
	mov	edi, DWORD PTR [esi+12]
; Line 58555
	cmp	DWORD PTR [esi+16], edi
	mov	DWORD PTR tv649[esp+36], edi
	jg	SHORT $LN40@updateVirt
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN165@updateVirt
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN166@updateVirt
$LN165@updateVirt:
	xor	ebx, ebx
$LN40@updateVirt:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 3
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN42@updateVirt
$LN166@updateVirt:
	xor	ebx, ebx
$LN42@updateVirt:
; Line 58556
	cmp	DWORD PTR _pRowid$[esp+32], ebx
; Line 58557
	mov	edi, DWORD PTR [esi+12]
	je	SHORT $LN5@updateVirt
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN46@updateVirt
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN167@updateVirt
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN169@updateVirt
$LN167@updateVirt:
	xor	ebx, ebx
$LN46@updateVirt:
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, 1
	add	DWORD PTR [esi+12], ecx
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 3
	mov	DWORD PTR [eax+4], ebp
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
; Line 58558
	jmp	SHORT $LN54@updateVirt
$LN5@updateVirt:
; Line 58559
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN52@updateVirt
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN168@updateVirt
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN169@updateVirt
$LN168@updateVirt:
	xor	ebx, ebx
$LN52@updateVirt:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN54@updateVirt
$LN169@updateVirt:
	xor	ebx, ebx
$LN54@updateVirt:
; Line 58561
	mov	eax, DWORD PTR _pTab$[esp+32]
	xor	ebp, ebp
	cmp	DWORD PTR [eax+4], ebx
	jle	SHORT $LN1@updateVirt
	npad	6
$LL3@updateVirt:
; Line 58562
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN58@updateVirt
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN170@updateVirt
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN171@updateVirt
$LN170@updateVirt:
	xor	ebx, ebx
$LN58@updateVirt:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR tv642[esp+36]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR tv644[esp+36]
	mov	DWORD PTR [eax+4], edx
	lea	edx, DWORD PTR [ecx+ebp+1]
	mov	BYTE PTR [eax], 3
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN2@updateVirt
$LN171@updateVirt:
	xor	ebx, ebx
$LN2@updateVirt:
; Line 58561
	mov	eax, DWORD PTR _pTab$[esp+32]
	add	ebp, 1
	cmp	ebp, DWORD PTR [eax+4]
	jl	SHORT $LL3@updateVirt
$LN1@updateVirt:
; Line 58564
	mov	ecx, DWORD PTR _pParse$[esp+32]
	mov	DWORD PTR [ecx+192], eax
; Line 58566
	mov	ebp, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [eax+64]
	add	ebp, 2
	cmp	DWORD PTR [esi+16], edi
	mov	DWORD PTR $T140909[esp+32], edx
	jg	SHORT $LN66@updateVirt
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN172@updateVirt
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN172@updateVirt
	xor	edi, edi
	xor	ebx, ebx
	jmp	SHORT $LN68@updateVirt
$LN172@updateVirt:
	xor	ebx, ebx
$LN66@updateVirt:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 130			; 00000082H
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebp
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
$LN68@updateVirt:
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	mov	eax, edi
	je	SHORT $LN151@updateVirt
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN89@updateVirt
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN151@updateVirt
$LN89@updateVirt:
	cmp	edi, ebx
	jl	SHORT $LN85@updateVirt
	cmp	edi, DWORD PTR [esi+12]
	jl	SHORT $LN84@updateVirt
$LN85@updateVirt:
	mov	eax, DWORD PTR [esi+12]
	sub	eax, 1
	js	SHORT $LN87@updateVirt
$LN84@updateVirt:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	edi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [edi+12]
	call	_freeP3
	mov	eax, DWORD PTR $T140909[esp+32]
	cmp	eax, ebx
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN152@updateVirt
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN87@updateVirt
$LN152@updateVirt:
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], -10			; fffffff6H
	jmp	SHORT $LN87@updateVirt
$LN151@updateVirt:
	mov	ecx, DWORD PTR $T140909[esp+32]
	mov	eax, -10				; fffffff6H
	call	_freeP3
$LN87@updateVirt:
; Line 58567
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN120@updateVirt
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN173@updateVirt
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN174@updateVirt
$LN173@updateVirt:
	xor	ebx, ebx
$LN120@updateVirt:
	mov	ecx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	mov	edx, DWORD PTR tv642[esp+36]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR tv649[esp+36]
	mov	BYTE PTR [eax], 110			; 0000006eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN122@updateVirt
$LN174@updateVirt:
	xor	ebx, ebx
$LN122@updateVirt:
; Line 58568
	mov	eax, DWORD PTR tv649[esp+36]
	add	eax, -1
	cmp	eax, ebx
	jl	SHORT $LN178@updateVirt
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jle	SHORT $LN178@updateVirt
	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, ebx
	je	SHORT $LN178@updateVirt
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN178@updateVirt:
; Line 58569
	mov	edi, DWORD PTR [esi+12]
	cmp	DWORD PTR [esi+16], edi
	jg	SHORT $LN131@updateVirt
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, esi
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN175@updateVirt
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN176@updateVirt
$LN175@updateVirt:
	xor	ebx, ebx
$LN131@updateVirt:
	mov	edx, DWORD PTR [esi+20]
	add	DWORD PTR [esi+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR tv642[esp+36]
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [esi+564], bl
	jmp	SHORT $LN133@updateVirt
$LN176@updateVirt:
	xor	ebx, ebx
$LN133@updateVirt:
; Line 58572
	mov	edi, DWORD PTR _pSelect$[esp+36]
	cmp	edi, ebx
	je	SHORT $LN145@updateVirt
	mov	ebx, DWORD PTR [edi]
	call	_sqlite3ExprListDelete
	mov	edx, DWORD PTR [edi+12]
	push	edx
	call	_sqlite3SrcListDelete
	mov	eax, DWORD PTR [edi+16]
	push	eax
	call	_sqlite3ExprDelete
	mov	ebx, DWORD PTR [edi+20]
	call	_sqlite3ExprListDelete
	mov	ecx, DWORD PTR [edi+24]
	push	ecx
	call	_sqlite3ExprDelete
	mov	ebx, DWORD PTR [edi+28]
	call	_sqlite3ExprListDelete
	mov	esi, DWORD PTR [edi+32]
	call	_sqlite3SelectDelete
	mov	edx, DWORD PTR [edi+40]
	push	edx
	call	_sqlite3ExprDelete
	mov	eax, DWORD PTR [edi+44]
	push	eax
	call	_sqlite3ExprDelete
	push	edi
	call	_free
	add	esp, 24					; 00000018H
$LN145@updateVirt:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 58573
	add	esp, 20					; 00000014H
	ret	0
_updateVirtualTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@FJGAICJB@Cannot?5use?5virtual?5tables?5in?5sha@ ; `string'
;	COMDAT ??_C@_0CP@FJGAICJB@Cannot?5use?5virtual?5tables?5in?5sha@
CONST	SEGMENT
??_C@_0CP@FJGAICJB@Cannot?5use?5virtual?5tables?5in?5sha@ DB 'Cannot use '
	DB	'virtual tables in shared-cache mode', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3VtabBeginParse
_TEXT	SEGMENT
tv283 = -4						; size = 4
_pName1$ = 8						; size = 4
_pName2$ = 12						; size = 4
_pModuleName$ = 16					; size = 4
_sqlite3VtabBeginParse PROC				; COMDAT
; _pParse$ = eax
; Line 58969
	push	ecx
; Line 58974
	cmp	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, 0
	push	esi
	push	edi
	mov	edi, eax
	mov	esi, 1
	jne	SHORT $LN37@sqlite3Vta@12
	add	DWORD PTR _inMutex, esi
	call	DWORD PTR __imp__TlsAlloc@0
	sub	DWORD PTR _inMutex, esi
	cmp	eax, -1
	mov	DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9, eax
	je	SHORT $LN9@sqlite3Vta@12
	mov	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, esi
	jmp	SHORT $LN31@sqlite3Vta@12
$LN37@sqlite3Vta@12:
	mov	eax, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
$LN31@sqlite3Vta@12:
	push	eax
	call	DWORD PTR __imp__TlsGetValue@4
	test	eax, eax
	jne	SHORT $LN10@sqlite3Vta@12
$LN9@sqlite3Vta@12:
	mov	eax, OFFSET ?zeroData@?1??sqlite3ThreadDataReadOnly@@9@9
$LN10@sqlite3Vta@12:
	cmp	BYTE PTR [eax+4], 0
	je	SHORT $LN4@sqlite3Vta@12
; Line 58975
	push	OFFSET ??_C@_0CP@FJGAICJB@Cannot?5use?5virtual?5tables?5in?5sha@
	call	_sqlite3ErrorMsg
	add	esp, 4
	pop	edi
	pop	esi
; Line 59006
	pop	ecx
	ret	0
$LN4@sqlite3Vta@12:
; Line 58980
	mov	eax, DWORD PTR _pName2$[esp+8]
	mov	ecx, DWORD PTR _pName1$[esp+8]
	push	ebp
	push	0
	push	esi
	push	0
	push	0
	push	edi
	call	_sqlite3StartTable
; Line 58981
	mov	ebp, DWORD PTR [edi+164]
	add	esp, 20					; 00000014H
; Line 58982
	test	ebp, ebp
	je	$LN38@sqlite3Vta@12
	cmp	DWORD PTR [edi+24], 0
	jne	$LN38@sqlite3Vta@12
; Line 58985
	mov	esi, DWORD PTR [ebp+76]
	mov	ecx, DWORD PTR [edi]
	push	ebx
	call	_sqlite3SchemaToIndex
	mov	ebx, eax
; Line 58990
	mov	eax, DWORD PTR _pModuleName$[esp+16]
	mov	BYTE PTR [ebp+57], 1
	mov	DWORD PTR [ebp+68], 0
	call	_sqlite3NameFromToken
	push	eax
	mov	esi, ebp
	call	_addModuleArgument
; Line 58991
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [ebx+ebx*2]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	ebx, DWORD PTR [edx+eax]
	mov	DWORD PTR tv283[esp+24], eax
	call	_sqlite3StrDup
	push	eax
	call	_addModuleArgument
; Line 58992
	mov	ebx, DWORD PTR [ebp]
	call	_sqlite3StrDup
	push	eax
	call	_addModuleArgument
; Line 58993
	mov	eax, DWORD PTR _pModuleName$[esp+28]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pName1$[esp+28]
	shr	ecx, 1
	sub	ecx, DWORD PTR [edx]
	add	esp, 12					; 0000000cH
	add	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edi+144]
	and	eax, 1
	add	ecx, ecx
	xor	ecx, eax
	mov	DWORD PTR [edi+144], ecx
; Line 59001
	mov	eax, DWORD PTR [ebp+72]
	test	eax, eax
	pop	ebx
	je	SHORT $LN38@sqlite3Vta@12
; Line 59003
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR tv283[esp+16]
	mov	edx, DWORD PTR [edx+ecx]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ebp]
	push	edx
	push	eax
	push	ecx
	push	29					; 0000001dH
	mov	eax, edi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
$LN38@sqlite3Vta@12:
	pop	ebp
	pop	edi
	pop	esi
; Line 59006
	pop	ecx
	ret	0
_sqlite3VtabBeginParse ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3RollbackAll
_TEXT	SEGMENT
_sqlite3RollbackAll PROC				; COMDAT
; _db$ = esi
; Line 66270
	push	ebx
	push	ebp
; Line 66273
	xor	ebx, ebx
	xor	ebp, ebp
	cmp	DWORD PTR [esi], ebx
	jle	SHORT $LN6@sqlite3Rol@2
	push	edi
	xor	edi, edi
	npad	3
$LL21@sqlite3Rol@2:
; Line 66274
	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [edi+eax+4]
	test	eax, eax
	je	SHORT $LN7@sqlite3Rol@2
; Line 66275
	cmp	BYTE PTR [eax+8], 2
	jne	SHORT $LN4@sqlite3Rol@2
; Line 66276
	mov	ebp, 1
$LN4@sqlite3Rol@2:
; Line 66278
	push	eax
	call	_sqlite3BtreeRollback
; Line 66279
	mov	ecx, DWORD PTR [esi+4]
	add	esp, 4
	mov	BYTE PTR [edi+ecx+8], 0
$LN7@sqlite3Rol@2:
	add	ebx, 1
	add	edi, 24					; 00000018H
	cmp	ebx, DWORD PTR [esi]
	jl	SHORT $LL21@sqlite3Rol@2
	pop	edi
$LN6@sqlite3Rol@2:
; Line 66282
	push	68					; 00000044H
	mov	eax, esi
	call	_callFinaliser
	add	esp, 4
; Line 66283
	test	BYTE PTR [esi+8], 16			; 00000010H
	je	SHORT $LN20@sqlite3Rol@2
; Line 66284
	push	0
	mov	ebx, esi
	call	_sqlite3ResetInternalSchema
	add	esp, 4
$LN20@sqlite3Rol@2:
; Line 66288
	mov	eax, DWORD PTR [esi+116]
	test	eax, eax
	je	SHORT $LN2@sqlite3Rol@2
	test	ebp, ebp
	jne	SHORT $LN1@sqlite3Rol@2
	cmp	BYTE PTR [esi+20], 0
	jne	SHORT $LN2@sqlite3Rol@2
$LN1@sqlite3Rol@2:
; Line 66289
	mov	edx, DWORD PTR [esi+112]
	push	edx
	call	eax
	add	esp, 4
$LN2@sqlite3Rol@2:
	pop	ebp
	pop	ebx
; Line 66291
	ret	0
_sqlite3RollbackAll ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GHJNJNPO@main?$AA@			; `string'
PUBLIC	??_C@_06FHKGKAHE@NOCASE?$AA@			; `string'
;	COMDAT ??_C@_04GHJNJNPO@main?$AA@
CONST	SEGMENT
??_C@_04GHJNJNPO@main?$AA@ DB 'main', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHKGKAHE@NOCASE?$AA@
CONST	SEGMENT
??_C@_06FHKGKAHE@NOCASE?$AA@ DB 'NOCASE', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _openDatabase
_TEXT	SEGMENT
_db$ = -4						; size = 4
_zFilename$ = 8						; size = 4
_ppDb$ = 12						; size = 4
_openDatabase PROC					; COMDAT
; Line 66957
	push	ecx
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _zFilename$[esp+8]
	push	esi
; Line 66965
	xor	ebx, ebx
	xor	esi, esi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	push	edi
	mov	edi, DWORD PTR _inMutex
	je	SHORT $LN18@openDataba
	cmp	edi, ebx
	jg	SHORT $LN111@openDataba
$LN18@openDataba:
	push	344					; 00000158H
	call	_malloc
	mov	esi, eax
	add	esp, 4
	cmp	esi, ebx
	jne	SHORT $LN109@openDataba
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN28@openDataba
	cmp	edi, ebx
	jg	SHORT $LN111@openDataba
$LN28@openDataba:
	add	edi, 1
	mov	DWORD PTR _inMutex, edi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN111@openDataba
$LN109@openDataba:
	push	344					; 00000158H
	push	ebx
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
$LN111@openDataba:
; Line 66966
	cmp	esi, ebx
	mov	DWORD PTR _db$[esp+20], esi
	je	$LN88@openDataba
; Line 66980
	or	DWORD PTR [esi+8], 32832		; 00008040H
	mov	DWORD PTR [esi+16], 255			; 000000ffH
	mov	DWORD PTR [esi+40], ebx
	mov	DWORD PTR [esi+44], ebx
	mov	DWORD PTR [esi+48], -264537850		; f03b7906H
	mov	DWORD PTR [esi], 2
	mov	BYTE PTR [esi+20], 1
; Line 66995
	push	ebx
	push	OFFSET _binCollFunc
	lea	edi, DWORD PTR [esi+248]
	push	ebx
	lea	eax, DWORD PTR [esi+292]
	mov	DWORD PTR [esi+4], eax
	mov	BYTE PTR [esi+220], 3
	mov	BYTE PTR [esi+221], bl
	mov	DWORD PTR [esi+228], ebx
	mov	DWORD PTR [esi+224], ebx
	mov	DWORD PTR [esi+240], ebx
	mov	DWORD PTR [esi+244], ebx
	mov	ecx, OFFSET _sqlite3MallocX
	mov	DWORD PTR [esi+232], ecx
	mov	eax, OFFSET _sqlite3FreeX
	mov	DWORD PTR [esi+236], eax
	mov	BYTE PTR [edi], 3
	mov	BYTE PTR [edi+1], bl
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+20], ebx
	mov	DWORD PTR [edi+24], ebx
	mov	DWORD PTR [edi+12], ecx
	mov	DWORD PTR [edi+16], eax
	push	1
	push	OFFSET ??_C@_06FJHKNKMG@BINARY?$AA@
	push	esi
	mov	BYTE PTR [esi+180], 3
	mov	BYTE PTR [esi+181], bl
	mov	DWORD PTR [esi+188], ebx
	mov	DWORD PTR [esi+184], ebx
	mov	DWORD PTR [esi+200], ebx
	mov	DWORD PTR [esi+204], ebx
	mov	DWORD PTR [esi+192], ecx
	mov	DWORD PTR [esi+196], eax
	call	_createCollation
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	$LN6@openDataba
	push	ebx
	push	OFFSET _binCollFunc
	push	ebx
	push	3
	push	OFFSET ??_C@_06FJHKNKMG@BINARY?$AA@
	push	esi
	call	_createCollation
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	$LN6@openDataba
	push	ebx
	push	OFFSET _binCollFunc
	push	ebx
	push	2
	push	OFFSET ??_C@_06FJHKNKMG@BINARY?$AA@
	push	esi
	call	_createCollation
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	$LN6@openDataba
	cmp	edi, ebx
	je	SHORT $LN53@openDataba
	cmp	DWORD PTR [edi+24], ebx
	je	SHORT $LN53@openDataba
	cmp	BYTE PTR [edi], 3
	mov	eax, OFFSET _strHash
	je	SHORT $LN59@openDataba
	mov	eax, OFFSET _binHash
$LN59@openDataba:
	push	6
	push	OFFSET ??_C@_06FJHKNKMG@BINARY?$AA@
	call	eax
	mov	edx, DWORD PTR [edi+20]
	sub	edx, 1
	push	6
	and	edx, eax
	push	OFFSET ??_C@_06FJHKNKMG@BINARY?$AA@
	mov	ecx, edi
	call	_findElementGivenHash
	add	esp, 16					; 00000010H
	cmp	eax, ebx
	je	SHORT $LN53@openDataba
	mov	eax, DWORD PTR [eax+8]
	jmp	SHORT $LN55@openDataba
$LN53@openDataba:
	xor	eax, eax
$LN55@openDataba:
	cmp	eax, ebx
	mov	DWORD PTR [esi+28], eax
	je	$LN6@openDataba
; Line 67002
	push	ebx
	push	OFFSET _nocaseCollatingFunc
	push	ebx
	push	1
	push	OFFSET ??_C@_06FHKGKAHE@NOCASE?$AA@
	push	esi
	call	_createCollation
; Line 67005
	mov	ecx, DWORD PTR [esi+28]
	mov	BYTE PTR [ecx+5], 1
; Line 67006
	push	6
	push	1
	xor	edx, edx
	mov	eax, OFFSET ??_C@_06FHKGKAHE@NOCASE?$AA@
	mov	ecx, esi
	call	_sqlite3FindCollSeq
	add	esp, 32					; 00000020H
; Line 67007
	cmp	eax, ebx
	je	SHORT $LN5@openDataba
; Line 67008
	mov	BYTE PTR [eax+5], 2
$LN5@openDataba:
; Line 67013
	mov	edi, DWORD PTR [esi+4]
	add	edi, 4
	xor	eax, eax
	test	DWORD PTR [esi+8], 4096			; 00001000H
	mov	ecx, ebp
	je	SHORT $LN71@openDataba
	mov	eax, 2
$LN71@openDataba:
	cmp	ebp, ebx
	jne	SHORT $LN69@openDataba
	cmp	BYTE PTR [esi+21], 2
	jne	SHORT $LN69@openDataba
	mov	ecx, OFFSET ??_C@_08CADOGOJM@?3memory?3?$AA@
$LN69@openDataba:
	push	eax
	push	edi
	push	esi
	push	ecx
	call	_sqlite3BtreeOpen
	add	esp, 16					; 00000010H
	cmp	eax, ebx
	jne	$LN110@openDataba
	mov	edx, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edx+4]
	lea	eax, DWORD PTR [esi+276]
	mov	DWORD PTR [ecx+44], eax
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+108], eax
	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+68], 2000		; 000007d0H
; Line 67019
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [edx+4]
	call	_sqlite3SchemaGet
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+20], eax
; Line 67020
	xor	eax, eax
	call	_sqlite3SchemaGet
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+44], eax
; Line 67026
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [eax], OFFSET ??_C@_04GHJNJNPO@main?$AA@
; Line 67027
	mov	ecx, DWORD PTR [esi+4]
	mov	BYTE PTR [ecx+9], 3
; Line 67029
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [edx+24], OFFSET ??_C@_04FGEHGIFJ@temp?$AA@
; Line 67030
	mov	eax, DWORD PTR [esi+4]
	mov	BYTE PTR [eax+33], 1
; Line 67037
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN2@openDataba
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN3@openDataba
$LN2@openDataba:
; Line 67038
	push	ebx
	push	ebx
	mov	eax, esi
	call	_sqlite3Error
	add	esp, 8
; Line 67039
	call	_sqlite3RegisterBuiltinFunctions
$LN3@openDataba:
; Line 67046
	mov	ebx, esi
	mov	DWORD PTR [esi+48], -1607883113		; a029a697H
	call	_sqlite3AutoLoadExtensions
	xor	ebx, ebx
	jmp	SHORT $opendb_out$103074
$LN110@openDataba:
; Line 67015
	push	ebx
	push	eax
	mov	eax, esi
	call	_sqlite3Error
	add	esp, 8
$LN6@openDataba:
; Line 66997
	mov	DWORD PTR [esi+48], -1623446221		; 9f3c2d33H
$opendb_out$103074:
; Line 67080
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN89@openDataba
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN88@openDataba
$LN89@openDataba:
	mov	eax, DWORD PTR [esi+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN87@openDataba
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN87@openDataba
	cmp	eax, -264537850				; f03b7906H
	je	SHORT $LN87@openDataba
	mov	edi, 21					; 00000015H
	jmp	SHORT $LN112@openDataba
$LN87@openDataba:
	mov	edi, DWORD PTR [esi+12]
	and	edi, DWORD PTR [esi+16]
	cmp	edi, 7
	jne	SHORT $LN112@openDataba
$LN108@openDataba:
; Line 67081
	push	esi
	call	_sqlite3_close
	add	esp, 4
; Line 67082
	mov	DWORD PTR _db$[esp+20], ebx
$LN112@openDataba:
; Line 67084
	mov	ecx, DWORD PTR _ppDb$[esp+16]
	mov	edx, DWORD PTR _db$[esp+20]
	mov	DWORD PTR [ecx], edx
; Line 67085
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	mov	eax, edi
	je	SHORT $LN98@openDataba
	cmp	DWORD PTR _inMutex, ebx
	jle	SHORT $LN98@openDataba
	sub	DWORD PTR _inMutex, 1
	push	ebx
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, ebx
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN98@openDataba:
	pop	edi
	pop	esi
	pop	ebp
	and	eax, 255				; 000000ffH
	pop	ebx
; Line 67086
	pop	ecx
	ret	0
; Line 67080
$LN88@openDataba:
	mov	edi, 7
	jmp	SHORT $LN108@openDataba
_openDatabase ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_open
_TEXT	SEGMENT
_zFilename$ = 8						; size = 4
_ppDb$ = 12						; size = 4
_sqlite3_open PROC					; COMDAT
; Line 67095
	jmp	_openDatabase
_sqlite3_open ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeHalt
_TEXT	SEGMENT
_xFunc$ = -12						; size = 4
_isStatement$89313 = -8					; size = 4
_isSpecialError$ = -4					; size = 4
_sqlite3VdbeHalt PROC					; COMDAT
; _p$ = eax
; Line 31582
	sub	esp, 12					; 0000000cH
	push	ebp
	push	esi
; Line 31585
	xor	esi, esi
; Line 31616
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	push	edi
	mov	edi, eax
	mov	ebp, DWORD PTR [edi]
	mov	DWORD PTR _xFunc$[esp+24], esi
	je	SHORT $LN66@sqlite3Vdb@54
	cmp	DWORD PTR _inMutex, esi
	jle	SHORT $LN66@sqlite3Vdb@54
; Line 31617
	mov	DWORD PTR [edi+124], 7
$LN66@sqlite3Vdb@54:
; Line 31619
	cmp	DWORD PTR [edi+76], -1108210269		; bdf20da3H
	je	SHORT $LN44@sqlite3Vdb@54
; Line 31623
	call	_closeAllCursors
	pop	edi
	pop	esi
; Line 31625
	xor	eax, eax
	pop	ebp
; Line 31781
	add	esp, 12					; 0000000cH
	ret	0
$LN44@sqlite3Vdb@54:
	push	ebx
; Line 31627
	call	_closeAllCursors
; Line 31631
	cmp	DWORD PTR [edi+120], esi
	jl	$LN2@sqlite3Vdb@54
; Line 31634
	mov	eax, DWORD PTR [edi+124]
	and	eax, 255				; 000000ffH
; Line 31636
	cmp	eax, 7
	je	SHORT $LN48@sqlite3Vdb@54
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN48@sqlite3Vdb@54
	cmp	eax, 9
	je	SHORT $LN48@sqlite3Vdb@54
	mov	DWORD PTR _isSpecialError$[esp+28], esi
	jmp	$LN68@sqlite3Vdb@54
$LN48@sqlite3Vdb@54:
; Line 31654
	cmp	DWORD PTR [edi+12], esi
	mov	ebx, 1
	mov	DWORD PTR _isSpecialError$[esp+28], ebx
	mov	DWORD PTR _isStatement$89313[esp+28], esi
	jle	$LN68@sqlite3Vdb@54
	mov	edx, DWORD PTR [edi+20]
	mov	esi, DWORD PTR [edi+12]
	npad	7
$LL41@sqlite3Vdb@54:
; Line 31655
	mov	cl, BYTE PTR [edx]
	cmp	cl, 40					; 00000028H
	je	SHORT $LN33@sqlite3Vdb@54
	cmp	cl, 106					; 0000006aH
	jne	SHORT $LN40@sqlite3Vdb@54
; Line 31667
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN34@sqlite3Vdb@54
	cmp	eax, 9
	je	SHORT $LN40@sqlite3Vdb@54
$LN34@sqlite3Vdb@54:
; Line 31668
	xor	ebx, ebx
; Line 31670
	jmp	SHORT $LN40@sqlite3Vdb@54
$LN33@sqlite3Vdb@54:
; Line 31672
	mov	DWORD PTR _isStatement$89313[esp+28], 1
$LN40@sqlite3Vdb@54:
; Line 31654
	add	edx, 20					; 00000014H
	sub	esi, 1
	jne	SHORT $LL41@sqlite3Vdb@54
; Line 31680
	test	ebx, ebx
	jne	SHORT $LN68@sqlite3Vdb@54
; Line 31681
	mov	eax, DWORD PTR [edi+124]
	cmp	eax, 2826				; 00000b0aH
	jne	SHORT $LN67@sqlite3Vdb@54
	cmp	DWORD PTR _isStatement$89313[esp+28], ebx
	je	SHORT $LN67@sqlite3Vdb@54
; Line 31682
	mov	DWORD PTR _xFunc$[esp+28], OFFSET _sqlite3BtreeRollbackStmt
; Line 31683
	mov	DWORD PTR [edi+124], 5
	jmp	SHORT $LN68@sqlite3Vdb@54
$LN67@sqlite3Vdb@54:
; Line 31684
	cmp	eax, 7
	jne	SHORT $LN29@sqlite3Vdb@54
	cmp	DWORD PTR _isStatement$89313[esp+28], 0
	je	SHORT $LN29@sqlite3Vdb@54
; Line 31685
	mov	DWORD PTR _xFunc$[esp+28], OFFSET _sqlite3BtreeRollbackStmt
; Line 31686
	jmp	SHORT $LN68@sqlite3Vdb@54
$LN29@sqlite3Vdb@54:
; Line 31690
	mov	esi, edi
	mov	eax, ebp
	call	_sqlite3AbortOtherActiveVdbes
; Line 31691
	mov	esi, ebp
	call	_sqlite3RollbackAll
; Line 31692
	mov	BYTE PTR [ebp+20], 1
$LN68@sqlite3Vdb@54:
; Line 31703
	cmp	BYTE PTR [ebp+20], 0
	je	SHORT $LN27@sqlite3Vdb@54
	cmp	DWORD PTR [ebp+84], 1
	jne	SHORT $LN27@sqlite3Vdb@54
; Line 31704
	cmp	DWORD PTR [edi+124], 0
	je	SHORT $LN25@sqlite3Vdb@54
	cmp	DWORD PTR [edi+132], 3
	jne	SHORT $LN26@sqlite3Vdb@54
	cmp	DWORD PTR _isSpecialError$[esp+28], 0
	je	SHORT $LN25@sqlite3Vdb@54
$LN26@sqlite3Vdb@54:
; Line 31719
	mov	esi, ebp
	call	_sqlite3RollbackAll
	jmp	SHORT $LN63@sqlite3Vdb@54
$LN25@sqlite3Vdb@54:
; Line 31709
	push	ebp
	call	_vdbeCommit
	add	esp, 4
; Line 31710
	cmp	eax, 5
	jne	SHORT $LN24@sqlite3Vdb@54
	pop	ebx
	pop	edi
	pop	esi
	pop	ebp
; Line 31781
	add	esp, 12					; 0000000cH
	ret	0
$LN24@sqlite3Vdb@54:
; Line 31712
	test	eax, eax
	je	SHORT $LN22@sqlite3Vdb@54
; Line 31714
	mov	esi, ebp
	mov	DWORD PTR [edi+124], eax
	call	_sqlite3RollbackAll
; Line 31715
	jmp	SHORT $LN63@sqlite3Vdb@54
$LN22@sqlite3Vdb@54:
; Line 31716
	and	DWORD PTR [ebp+8], -17			; ffffffefH
; Line 31720
	jmp	SHORT $LN63@sqlite3Vdb@54
$LN27@sqlite3Vdb@54:
; Line 31721
	cmp	DWORD PTR _xFunc$[esp+28], 0
	jne	SHORT $LN63@sqlite3Vdb@54
; Line 31722
	cmp	DWORD PTR [edi+124], 0
	je	SHORT $LN16@sqlite3Vdb@54
	mov	eax, DWORD PTR [edi+132]
	cmp	eax, 3
	je	SHORT $LN16@sqlite3Vdb@54
; Line 31724
	cmp	eax, 2
	jne	SHORT $LN14@sqlite3Vdb@54
; Line 31725
	mov	DWORD PTR _xFunc$[esp+28], OFFSET _sqlite3BtreeRollbackStmt
; Line 31726
	jmp	SHORT $LN63@sqlite3Vdb@54
$LN14@sqlite3Vdb@54:
; Line 31727
	mov	esi, edi
	mov	eax, ebp
	call	_sqlite3AbortOtherActiveVdbes
; Line 31728
	mov	esi, ebp
	call	_sqlite3RollbackAll
; Line 31729
	mov	BYTE PTR [ebp+20], 1
	jmp	SHORT $LN63@sqlite3Vdb@54
$LN16@sqlite3Vdb@54:
; Line 31723
	mov	DWORD PTR _xFunc$[esp+28], OFFSET _sqlite3BtreeCommitStmt
$LN63@sqlite3Vdb@54:
; Line 31742
	mov	eax, DWORD PTR _xFunc$[esp+28]
	xor	ebx, ebx
	test	eax, eax
	je	SHORT $LN10@sqlite3Vdb@54
	xor	esi, esi
$LL12@sqlite3Vdb@54:
	cmp	ebx, DWORD PTR [ebp]
	jge	SHORT $LN65@sqlite3Vdb@54
; Line 31744
	mov	eax, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [eax+esi+4]
; Line 31745
	test	eax, eax
	je	SHORT $LN11@sqlite3Vdb@54
; Line 31746
	push	eax
	call	DWORD PTR _xFunc$[esp+32]
	add	esp, 4
; Line 31747
	test	eax, eax
	je	SHORT $LN11@sqlite3Vdb@54
	mov	ecx, DWORD PTR [edi+124]
	test	ecx, ecx
	je	SHORT $LN7@sqlite3Vdb@54
	cmp	ecx, 19					; 00000013H
	jne	SHORT $LN11@sqlite3Vdb@54
$LN7@sqlite3Vdb@54:
; Line 31749
	lea	ecx, DWORD PTR [edi+556]
	push	0
	push	ecx
	mov	DWORD PTR [edi+124], eax
	call	_sqlite3SetString
	add	esp, 8
$LN11@sqlite3Vdb@54:
	add	ebx, 1
	add	esi, 24					; 00000018H
	jmp	SHORT $LL12@sqlite3Vdb@54
$LN65@sqlite3Vdb@54:
; Line 31742
	mov	eax, DWORD PTR _xFunc$[esp+28]
$LN10@sqlite3Vdb@54:
; Line 31757
	cmp	BYTE PTR [edi+562], 0
	je	SHORT $LN70@sqlite3Vdb@54
	xor	ecx, ecx
	cmp	DWORD PTR [edi+120], ecx
	jl	SHORT $LN70@sqlite3Vdb@54
; Line 31758
	cmp	eax, ecx
	je	SHORT $LN4@sqlite3Vdb@54
	cmp	eax, OFFSET _sqlite3BtreeCommitStmt
	je	SHORT $LN4@sqlite3Vdb@54
; Line 31761
	mov	DWORD PTR [ebp+52], ecx
	jmp	SHORT $LN56@sqlite3Vdb@54
$LN4@sqlite3Vdb@54:
; Line 31759
	mov	eax, DWORD PTR [edi+568]
	add	DWORD PTR [ebp+56], eax
	mov	DWORD PTR [ebp+52], eax
; Line 31761
$LN56@sqlite3Vdb@54:
; Line 31763
	mov	DWORD PTR [edi+568], ecx
$LN70@sqlite3Vdb@54:
; Line 31767
	cmp	DWORD PTR [edi+124], 0
	je	SHORT $LN2@sqlite3Vdb@54
	test	BYTE PTR [ebp+8], 16			; 00000010H
	je	SHORT $LN2@sqlite3Vdb@54
; Line 31768
	push	0
	mov	ebx, ebp
	call	_sqlite3ResetInternalSchema
	add	esp, 4
; Line 31769
	or	DWORD PTR [ebp+8], 16			; 00000010H
$LN2@sqlite3Vdb@54:
; Line 31774
	cmp	DWORD PTR [edi+120], 0
	jl	SHORT $LN1@sqlite3Vdb@54
; Line 31775
	add	DWORD PTR [ebp+84], -1
$LN1@sqlite3Vdb@54:
	pop	ebx
; Line 31777
	mov	DWORD PTR [edi+76], 1369188723		; 519c2973H
	pop	edi
	pop	esi
; Line 31780
	xor	eax, eax
	pop	ebp
; Line 31781
	add	esp, 12					; 0000000cH
	ret	0
_sqlite3VdbeHalt ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeReset
_TEXT	SEGMENT
_sqlite3VdbeReset PROC					; COMDAT
; _p$ = edi
; Line 31802
	push	ebx
	push	esi
; Line 31804
	mov	esi, DWORD PTR [edi]
; Line 31810
	mov	eax, DWORD PTR [esi+48]
	cmp	eax, -1607883113			; a029a697H
	mov	ebx, -1254786768			; b5357930H
	jne	SHORT $LN13@sqlite3Vdb@55
	mov	DWORD PTR [esi+48], -264537850		; f03b7906H
	jmp	SHORT $LN11@sqlite3Vdb@55
$LN13@sqlite3Vdb@55:
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN11@sqlite3Vdb@55
	mov	DWORD PTR [esi+48], ebx
	mov	DWORD PTR [esi+152], 1
$LN11@sqlite3Vdb@55:
; Line 31811
	mov	eax, edi
	call	_sqlite3VdbeHalt
; Line 31812
	cmp	DWORD PTR [esi+48], -264537850		; f03b7906H
	jne	SHORT $LN17@sqlite3Vdb@55
	mov	DWORD PTR [esi+48], -1607883113		; a029a697H
	jmp	SHORT $LN16@sqlite3Vdb@55
$LN17@sqlite3Vdb@55:
	mov	DWORD PTR [esi+48], ebx
	mov	DWORD PTR [esi+152], 1
$LN16@sqlite3Vdb@55:
; Line 31819
	xor	ebx, ebx
	cmp	DWORD PTR [edi+120], ebx
	jl	SHORT $LN8@sqlite3Vdb@55
; Line 31820
	mov	ecx, DWORD PTR [edi+556]
	cmp	ecx, ebx
	je	SHORT $LN7@sqlite3Vdb@55
; Line 31821
	mov	eax, DWORD PTR [esi+140]
	cmp	eax, ebx
	je	SHORT $LN20@sqlite3Vdb@55
	push	OFFSET _sqlite3FreeX
	push	1
	push	-1
	push	ecx
	push	eax
	call	_sqlite3VdbeMemSetStr
	add	esp, 20					; 00000014H
$LN20@sqlite3Vdb@55:
; Line 31822
	mov	eax, DWORD PTR [edi+124]
	mov	DWORD PTR [esi+12], eax
; Line 31823
	mov	DWORD PTR [edi+556], ebx
	jmp	SHORT $LN2@sqlite3Vdb@55
$LN7@sqlite3Vdb@55:
; Line 31824
	mov	eax, DWORD PTR [edi+124]
	cmp	eax, ebx
; Line 31825
	push	ebx
; Line 31826
	jne	SHORT $LN23@sqlite3Vdb@55
; Line 31827
	push	ebx
; Line 31828
	jmp	SHORT $LN24@sqlite3Vdb@55
$LN8@sqlite3Vdb@55:
; Line 31829
	mov	eax, DWORD PTR [edi+124]
	cmp	eax, ebx
	je	SHORT $LN2@sqlite3Vdb@55
	cmp	BYTE PTR [edi+564], bl
	je	SHORT $LN2@sqlite3Vdb@55
; Line 31834
	push	ebx
$LN23@sqlite3Vdb@55:
	push	eax
$LN24@sqlite3Vdb@55:
	mov	eax, esi
	call	_sqlite3Error
	add	esp, 8
$LN2@sqlite3Vdb@55:
; Line 31839
	mov	eax, edi
	call	_Cleanup
; Line 31868
	cmp	DWORD PTR [edi+124], 17			; 00000011H
	mov	DWORD PTR [edi+76], 649915045		; 26bceaa5H
	mov	BYTE PTR [edi+563], bl
	jne	SHORT $LN1@sqlite3Vdb@55
; Line 31869
	push	ebx
	mov	ebx, esi
	call	_sqlite3ResetInternalSchema
	add	esp, 4
$LN1@sqlite3Vdb@55:
; Line 31871
	mov	eax, DWORD PTR [esi+16]
	and	eax, DWORD PTR [edi+124]
	pop	esi
	pop	ebx
; Line 31872
	ret	0
_sqlite3VdbeReset ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3VdbeFinalize
_TEXT	SEGMENT
_sqlite3VdbeFinalize PROC				; COMDAT
; _p$ = eax
; Line 31878
	push	ebx
	push	esi
	mov	esi, eax
; Line 31880
	mov	eax, DWORD PTR [esi+76]
	xor	ebx, ebx
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN3@sqlite3Vdb@56
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN3@sqlite3Vdb@56
; Line 31883
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN1@sqlite3Vdb@56
	pop	esi
; Line 31884
	lea	eax, DWORD PTR [ebx+21]
	pop	ebx
; Line 31888
	ret	0
$LN3@sqlite3Vdb@56:
	push	edi
; Line 31881
	mov	edi, esi
	call	_sqlite3VdbeReset
	mov	ebx, eax
	pop	edi
$LN1@sqlite3Vdb@56:
; Line 31886
	call	_sqlite3VdbeDelete
	pop	esi
; Line 31887
	mov	eax, ebx
	pop	ebx
; Line 31888
	ret	0
_sqlite3VdbeFinalize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _blobReadWrite
_TEXT	SEGMENT
_z$ = 8							; size = 4
_xCall$ = 12						; size = 4
_blobReadWrite PROC					; COMDAT
; _pBlob$ = edi
; _n$ = ecx
; _iOffset$ = eax
; Line 38827
	push	ebx
; Line 38830
	mov	ebx, DWORD PTR [edi+16]
; Line 38836
	test	ebx, ebx
	jne	SHORT $LN4@blobReadWr
	mov	eax, 4
	pop	ebx
; Line 38856
	ret	0
$LN4@blobReadWr:
; Line 38839
	lea	edx, DWORD PTR [ecx+eax]
	cmp	edx, DWORD PTR [edi+4]
	jle	SHORT $LN3@blobReadWr
; Line 38840
	mov	eax, 1
	pop	ebx
; Line 38856
	ret	0
$LN3@blobReadWr:
; Line 38847
	mov	edx, DWORD PTR _z$[esp]
	push	ebp
	push	esi
	mov	esi, DWORD PTR [ebx]
	push	edx
	mov	edx, DWORD PTR [edi+12]
	push	ecx
	mov	ecx, DWORD PTR [edi+8]
	add	ecx, eax
	push	ecx
	push	edx
	call	DWORD PTR _xCall$[esp+24]
	mov	ebp, eax
	add	esp, 16					; 00000010H
; Line 38848
	cmp	ebp, 4
	jne	SHORT $LN2@blobReadWr
; Line 38849
	mov	eax, ebx
	call	_sqlite3VdbeFinalize
; Line 38855
	mov	ecx, ebp
	mov	DWORD PTR [edi+16], 0
	call	_sqlite3ApiExit
	pop	esi
	pop	ebp
	pop	ebx
; Line 38856
	ret	0
$LN2@blobReadWr:
; Line 38855
	mov	ecx, ebp
	mov	DWORD PTR [ebx+124], ebp
	call	_sqlite3ApiExit
	pop	esi
	pop	ebp
	pop	ebx
; Line 38856
	ret	0
_blobReadWrite ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_blob_read
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_blob_read
_TEXT	SEGMENT
_pBlob$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_iOffset$ = 20						; size = 4
_sqlite3_blob_read PROC					; COMDAT
; Line 38862
	mov	eax, DWORD PTR _z$[esp-4]
	mov	ecx, DWORD PTR _n$[esp-4]
	push	edi
	mov	edi, DWORD PTR _pBlob$[esp]
	push	OFFSET _sqlite3BtreeData
	push	eax
	mov	eax, DWORD PTR _iOffset$[esp+8]
	call	_blobReadWrite
	add	esp, 8
	pop	edi
; Line 38863
	ret	0
_sqlite3_blob_read ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_blob_write
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_blob_write
_TEXT	SEGMENT
_pBlob$ = 8						; size = 4
_z$ = 12						; size = 4
_n$ = 16						; size = 4
_iOffset$ = 20						; size = 4
_sqlite3_blob_write PROC				; COMDAT
; Line 38869
	mov	eax, DWORD PTR _z$[esp-4]
	mov	ecx, DWORD PTR _n$[esp-4]
	push	edi
	mov	edi, DWORD PTR _pBlob$[esp]
	push	OFFSET _sqlite3BtreePutData
	push	eax
	mov	eax, DWORD PTR _iOffset$[esp+8]
	call	_blobReadWrite
	add	esp, 8
	pop	edi
; Line 38870
	ret	0
_sqlite3_blob_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DL@DAEIJKNC@there?5is?5already?5another?5table?5o@ ; `string'
PUBLIC	??_C@_0FM@GJOILOPP@UPDATE?5sqlite_temp_master?5SET?5sq@ ; `string'
PUBLIC	??_C@_0DI@HNJIGNMM@UPDATE?5?$CFQ?4sqlite_sequence?5set?5na@ ; `string'
PUBLIC	??_C@_0BHE@LBGFIECN@UPDATE?5?$CFQ?4?$CFs?5SET?5sql?5?$DN?5CASE?5WHEN@ ; `string'
PUBLIC	??_C@_0BM@IAHFHDLE@table?5?$CFs?5may?5not?5be?5altered?$AA@ ; `string'
PUBLIC	??_C@_0CC@HCCMFAJP@virtual?5tables?5may?5not?5be?5altere@ ; `string'
;	COMDAT ??_C@_0DL@DAEIJKNC@there?5is?5already?5another?5table?5o@
CONST	SEGMENT
??_C@_0DL@DAEIJKNC@there?5is?5already?5another?5table?5o@ DB 'there is al'
	DB	'ready another table or index with this name: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@GJOILOPP@UPDATE?5sqlite_temp_master?5SET?5sq@
CONST	SEGMENT
??_C@_0FM@GJOILOPP@UPDATE?5sqlite_temp_master?5SET?5sq@ DB 'UPDATE sqlite'
	DB	'_temp_master SET sql = sqlite_rename_trigger(sql, %Q), tbl_na'
	DB	'me = %Q WHERE %s;', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HNJIGNMM@UPDATE?5?$CFQ?4sqlite_sequence?5set?5na@
CONST	SEGMENT
??_C@_0DI@HNJIGNMM@UPDATE?5?$CFQ?4sqlite_sequence?5set?5na@ DB 'UPDATE %Q'
	DB	'.sqlite_sequence set name = %Q WHERE name = %Q', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BHE@LBGFIECN@UPDATE?5?$CFQ?4?$CFs?5SET?5sql?5?$DN?5CASE?5WHEN@
CONST	SEGMENT
??_C@_0BHE@LBGFIECN@UPDATE?5?$CFQ?4?$CFs?5SET?5sql?5?$DN?5CASE?5WHEN@ DB 'U'
	DB	'PDATE %Q.%s SET sql = CASE WHEN type = ''trigger'' THEN sqlit'
	DB	'e_rename_trigger(sql, %Q)ELSE sqlite_rename_table(sql, %Q) EN'
	DB	'D, tbl_name = %Q, name = CASE WHEN type=''table'' THEN %Q WHE'
	DB	'N name LIKE ''sqlite_autoindex%%'' AND type=''index'' THEN '''
	DB	'sqlite_autoindex_'' || %Q || substr(name,%d+18,10) ELSE name '
	DB	'END WHERE tbl_name=%Q AND (type=''table'' OR type=''index'' O'
	DB	'R type=''trigger'');', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IAHFHDLE@table?5?$CFs?5may?5not?5be?5altered?$AA@
CONST	SEGMENT
??_C@_0BM@IAHFHDLE@table?5?$CFs?5may?5not?5be?5altered?$AA@ DB 'table %s '
	DB	'may not be altered', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HCCMFAJP@virtual?5tables?5may?5not?5be?5altere@
CONST	SEGMENT
??_C@_0CC@HCCMFAJP@virtual?5tables?5may?5not?5be?5altere@ DB 'virtual tab'
	DB	'les may not be altered', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AlterRenameTable
_TEXT	SEGMENT
_pTab$ = -20						; size = 4
_db$ = -16						; size = 4
_zDb$ = -12						; size = 4
_v$ = -8						; size = 4
_iDb$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pSrc$ = 12						; size = 4
_pName$ = 16						; size = 4
_sqlite3AlterRenameTable PROC				; COMDAT
; Line 41730
	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	push	edi
; Line 41735
	mov	edi, DWORD PTR _pParse$[esp+28]
	mov	ebx, DWORD PTR [edi]
	xor	ebp, ebp
; Line 41743
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	mov	DWORD PTR _db$[esp+32], ebx
	je	SHORT $LN12@sqlite3Alt@3
	cmp	DWORD PTR _inMutex, ebp
	jg	$exit_rename_table$92982
$LN12@sqlite3Alt@3:
; Line 41746
	mov	eax, DWORD PTR _pSrc$[esp+28]
	push	esi
	mov	esi, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	ecx, edi
	call	_sqlite3LocateTable
; Line 41747
	test	eax, eax
	mov	DWORD PTR _pTab$[esp+36], eax
	je	$LN29@sqlite3Alt@3
; Line 41749
	cmp	BYTE PTR [eax+57], 0
	je	SHORT $LN10@sqlite3Alt@3
; Line 41750
	push	OFFSET ??_C@_0CC@HCCMFAJP@virtual?5tables?5may?5not?5be?5altere@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 41751
	jmp	$LN29@sqlite3Alt@3
$LN10@sqlite3Alt@3:
; Line 41754
	mov	esi, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR [edi]
	call	_sqlite3SchemaToIndex
; Line 41755
	mov	ecx, DWORD PTR [ebx+4]
	mov	edi, eax
	lea	eax, DWORD PTR [edi+edi*2]
	mov	esi, DWORD PTR [ecx+eax*8]
; Line 41758
	mov	eax, DWORD PTR _pName$[esp+32]
	mov	DWORD PTR _iDb$[esp+36], edi
	mov	DWORD PTR _zDb$[esp+36], esi
	call	_sqlite3NameFromToken
	mov	ebp, eax
; Line 41759
	test	ebp, ebp
	je	$LN29@sqlite3Alt@3
; Line 41764
	push	esi
	push	ebx
	mov	ebx, ebp
	call	_sqlite3FindTable
	add	esp, 8
	test	eax, eax
	jne	$LN7@sqlite3Alt@3
	mov	edx, DWORD PTR _db$[esp+36]
	push	esi
	push	edx
	call	_sqlite3FindIndex
	add	esp, 8
	test	eax, eax
	jne	$LN7@sqlite3Alt@3
; Line 41773
	mov	eax, DWORD PTR _pTab$[esp+36]
	mov	esi, DWORD PTR [eax]
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL24@sqlite3Alt@3:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL24@sqlite3Alt@3
	sub	eax, edx
	cmp	eax, 6
	jbe	SHORT $LN6@sqlite3Alt@3
	mov	eax, 7
	mov	edx, OFFSET ??_C@_07IOGLMIPM@sqlite_?$AA@
	mov	ecx, esi
	call	_sqlite3StrNICmp
	test	eax, eax
	jne	SHORT $LN6@sqlite3Alt@3
; Line 41774
	push	esi
	push	OFFSET ??_C@_0BM@IAHFHDLE@table?5?$CFs?5may?5not?5be?5altered?$AA@
; Line 41775
	jmp	$LN30@sqlite3Alt@3
$LN6@sqlite3Alt@3:
; Line 41777
	mov	ebx, DWORD PTR _pParse$[esp+32]
	mov	esi, ebp
	mov	eax, ebx
	call	_sqlite3CheckObjectName
	test	eax, eax
	jne	$LN29@sqlite3Alt@3
; Line 41783
	mov	ecx, DWORD PTR _pTab$[esp+36]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR _zDb$[esp+40]
	push	edx
	push	eax
	push	26					; 0000001aH
	mov	eax, ebx
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN29@sqlite3Alt@3
; Line 41792
	mov	esi, ebx
	call	_sqlite3GetVdbe
; Line 41793
	test	eax, eax
	mov	DWORD PTR _v$[esp+36], eax
	je	$LN29@sqlite3Alt@3
; Line 41796
	push	0
	mov	eax, edi
	mov	ecx, ebx
	call	_sqlite3BeginWriteOperation
; Line 41797
	mov	ecx, DWORD PTR _db$[esp+40]
	mov	esi, edi
	mov	edi, DWORD PTR _v$[esp+40]
	add	esp, 4
	call	_sqlite3ChangeCookie
; Line 41800
	mov	edi, DWORD PTR _pTab$[esp+36]
	mov	esi, DWORD PTR [edi]
; Line 41801
	or	edx, -1
	mov	ecx, esi
	call	_sqlite3Utf8CharLen
; Line 41826
	cmp	DWORD PTR _iDb$[esp+36], 1
	mov	ecx, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN16@sqlite3Alt@3
	mov	ecx, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN16@sqlite3Alt@3:
	push	esi
	mov	esi, DWORD PTR _zDb$[esp+40]
	push	eax
	push	ebp
	push	ebp
	push	ebp
	push	ebp
	push	ebp
	push	ecx
	push	esi
	push	OFFSET ??_C@_0BHE@LBGFIECN@UPDATE?5?$CFQ?4?$CFs?5SET?5sql?5?$DN?5CASE?5WHEN@
	call	_sqlite3NestedParse
; Line 41832
	mov	ecx, DWORD PTR _db$[esp+76]
	push	esi
	push	ecx
	mov	ebx, OFFSET ??_C@_0BA@KDDGKFDH@sqlite_sequence?$AA@
	call	_sqlite3FindTable
; Line 41835
	mov	ebx, DWORD PTR _pParse$[esp+80]
	add	esp, 48					; 00000030H
	test	eax, eax
	je	SHORT $LN2@sqlite3Alt@3
	mov	edx, DWORD PTR [edi]
	push	edx
	push	ebp
	push	esi
	push	OFFSET ??_C@_0DI@HNJIGNMM@UPDATE?5?$CFQ?4sqlite_sequence?5set?5na@
	call	_sqlite3NestedParse
	add	esp, 16					; 00000010H
$LN2@sqlite3Alt@3:
; Line 41844
	mov	eax, edi
	mov	ecx, ebx
	call	_whereTempTriggers
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN1@sqlite3Alt@3
; Line 41849
	push	esi
	push	ebp
	push	ebp
	push	OFFSET ??_C@_0FM@GJOILOPP@UPDATE?5sqlite_temp_master?5SET?5sq@
	call	_sqlite3NestedParse
; Line 41850
	push	esi
	call	_sqlite3FreeX
	add	esp, 20					; 00000014H
$LN1@sqlite3Alt@3:
; Line 41855
	push	ebp
	push	edi
	push	ebx
	call	_reloadTableSchema
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN29@sqlite3Alt@3
$LN7@sqlite3Alt@3:
; Line 41766
	push	ebp
	push	OFFSET ??_C@_0DL@DAEIJKNC@there?5is?5already?5another?5table?5o@
$LN30@sqlite3Alt@3:
	mov	edi, DWORD PTR _pParse$[esp+40]
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN29@sqlite3Alt@3:
	pop	esi
$exit_rename_table$92982:
; Line 41858
	mov	eax, DWORD PTR _pSrc$[esp+28]
	push	eax
	call	_sqlite3SrcListDelete
	add	esp, 4
; Line 41859
	test	ebp, ebp
	je	SHORT $LN22@sqlite3Alt@3
	push	ebp
	call	_free
	add	esp, 4
$LN22@sqlite3Alt@3:
	pop	edi
	pop	ebp
	pop	ebx
; Line 41860
	add	esp, 20					; 00000014H
	ret	0
_sqlite3AlterRenameTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@IKHDEECD@Cannot?5add?5a?5column?5to?5a?5view?$AA@ ; `string'
;	COMDAT ??_C@_0BO@IKHDEECD@Cannot?5add?5a?5column?5to?5a?5view?$AA@
CONST	SEGMENT
??_C@_0BO@IKHDEECD@Cannot?5add?5a?5column?5to?5a?5view?$AA@ DB 'Cannot ad'
	DB	'd a column to a view', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AlterBeginAddColumn
_TEXT	SEGMENT
tv368 = -12						; size = 4
_i$ = -8						; size = 4
_iDb$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pSrc$ = 12						; size = 4
_sqlite3AlterBeginAddColumn PROC			; COMDAT
; Line 41984
	sub	esp, 12					; 0000000cH
; Line 41994
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN11@sqlite3Alt@4
	cmp	DWORD PTR _inMutex, 0
	jg	$exit_begin_add_column$93055
$LN11@sqlite3Alt@4:
; Line 41995
	mov	eax, DWORD PTR _pSrc$[esp+8]
	push	ebx
	mov	ebx, DWORD PTR _pParse$[esp+12]
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	ecx, ebx
	call	_sqlite3LocateTable
	mov	ebp, eax
; Line 41996
	test	ebp, ebp
	je	$LN25@sqlite3Alt@4
; Line 41999
	cmp	BYTE PTR [ebp+57], 0
	push	edi
	je	SHORT $LN9@sqlite3Alt@4
; Line 42000
	push	OFFSET ??_C@_0CC@HCCMFAJP@virtual?5tables?5may?5not?5be?5altere@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
; Line 42049
	mov	edx, DWORD PTR _pSrc$[esp+28]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	push	edx
	call	_sqlite3SrcListDelete
; Line 42051
	add	esp, 16					; 00000010H
	ret	0
$LN9@sqlite3Alt@4:
; Line 42006
	cmp	DWORD PTR [ebp+24], 0
	je	SHORT $LN8@sqlite3Alt@4
; Line 42007
	push	OFFSET ??_C@_0BO@IKHDEECD@Cannot?5add?5a?5column?5to?5a?5view?$AA@
	mov	edi, ebx
	call	_sqlite3ErrorMsg
; Line 42049
	mov	edx, DWORD PTR _pSrc$[esp+28]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	push	edx
	call	_sqlite3SrcListDelete
; Line 42051
	add	esp, 16					; 00000010H
	ret	0
$LN8@sqlite3Alt@4:
; Line 42012
	mov	esi, DWORD PTR [ebp+76]
	mov	ecx, DWORD PTR [ebx]
	call	_sqlite3SchemaToIndex
; Line 42017
	mov	edi, 80					; 00000050H
	mov	DWORD PTR _iDb$[esp+28], eax
	call	_sqlite3Malloc
	mov	esi, eax
; Line 42018
	test	esi, esi
	je	$LN28@sqlite3Alt@4
; Line 42019
	mov	DWORD PTR [ebx+164], esi
; Line 42020
	mov	DWORD PTR [esi+28], 1
; Line 42021
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [esi+4], eax
; Line 42023
	add	eax, -1
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax*8+8]
; Line 42025
	lea	edi, DWORD PTR [eax+eax*4]
	add	edi, edi
	add	edi, edi
	call	_sqlite3Malloc
	mov	DWORD PTR [esi+8], eax
; Line 42026
	mov	ebx, DWORD PTR [ebp]
	call	_sqlite3StrDup
; Line 42027
	mov	ecx, DWORD PTR [esi+8]
	xor	edi, edi
	cmp	ecx, edi
	mov	DWORD PTR [esi], eax
	je	$LN28@sqlite3Alt@4
	cmp	eax, edi
	je	$LN28@sqlite3Alt@4
; Line 42030
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ebp+8]
	lea	eax, DWORD PTR [eax+eax*4]
	add	eax, eax
	add	eax, eax
	push	eax
	push	edx
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 42031
	cmp	DWORD PTR [esi+4], edi
	mov	DWORD PTR _i$[esp+28], edi
	jle	SHORT $LN2@sqlite3Alt@4
; Line 42030
	mov	DWORD PTR tv368[esp+28], edi
$LL22@sqlite3Alt@4:
; Line 42032
	mov	edi, DWORD PTR [esi+8]
	add	edi, DWORD PTR tv368[esp+28]
; Line 42033
	mov	ebx, DWORD PTR [edi]
	call	_sqlite3StrDup
	add	DWORD PTR tv368[esp+28], 20		; 00000014H
	mov	DWORD PTR [edi], eax
; Line 42034
	xor	eax, eax
	mov	DWORD PTR [edi+12], eax
; Line 42035
	mov	DWORD PTR [edi+8], eax
; Line 42036
	mov	DWORD PTR [edi+4], eax
	mov	eax, DWORD PTR _i$[esp+28]
	add	eax, 1
	cmp	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _i$[esp+28], eax
	jl	SHORT $LL22@sqlite3Alt@4
$LN2@sqlite3Alt@4:
; Line 42038
	mov	ebx, DWORD PTR _pParse$[esp+24]
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+4]
	mov	edi, DWORD PTR _iDb$[esp+28]
	lea	ecx, DWORD PTR [edi+edi*2]
	mov	eax, DWORD PTR [edx+ecx*8+20]
	mov	DWORD PTR [esi+76], eax
; Line 42039
	mov	ecx, DWORD PTR [ebp+48]
	mov	DWORD PTR [esi+48], ecx
; Line 42043
	push	0
	mov	eax, edi
	mov	ecx, ebx
	mov	DWORD PTR [esi+28], 1
	call	_sqlite3BeginWriteOperation
; Line 42044
	mov	eax, DWORD PTR [ebx+12]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN21@sqlite3Alt@4
	mov	edi, DWORD PTR [ebx]
	call	_sqlite3VdbeCreate
; Line 42045
	test	eax, eax
	mov	DWORD PTR [ebx+12], eax
	je	SHORT $LN28@sqlite3Alt@4
	mov	edi, DWORD PTR _iDb$[esp+28]
$LN21@sqlite3Alt@4:
; Line 42046
	mov	ecx, DWORD PTR [ebx]
	mov	esi, edi
	mov	edi, eax
	call	_sqlite3ChangeCookie
$LN28@sqlite3Alt@4:
	pop	edi
$LN25@sqlite3Alt@4:
	pop	esi
	pop	ebp
	pop	ebx
$exit_begin_add_column$93055:
; Line 42049
	mov	edx, DWORD PTR _pSrc$[esp+8]
	push	edx
	call	_sqlite3SrcListDelete
; Line 42051
	add	esp, 16					; 00000010H
	ret	0
_sqlite3AlterBeginAddColumn ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Analyze
_TEXT	SEGMENT
_pTableName$ = -4					; size = 4
_pName2$ = 8						; size = 4
_sqlite3Analyze PROC					; COMDAT
; _pParse$ = edi
; _pName1$ = eax
; Line 42335
	push	ecx
	push	ebx
; Line 42336
	mov	ebx, DWORD PTR [edi]
; Line 42345
	cmp	BYTE PTR [ebx+68], 0
	push	ebp
	mov	ebp, DWORD PTR _pName2$[esp+8]
	push	esi
	mov	esi, eax
	jne	SHORT $LN31@sqlite3Ana@2
	lea	eax, DWORD PTR [edi+8]
	push	eax
	mov	eax, ebx
	call	_sqlite3Init
	add	esp, 4
	test	eax, eax
	je	SHORT $LN31@sqlite3Ana@2
	add	DWORD PTR [edi+24], 1
	pop	esi
	pop	ebp
	mov	DWORD PTR [edi+4], eax
	pop	ebx
; Line 42383
	pop	ecx
	ret	0
$LN31@sqlite3Ana@2:
; Line 42349
	test	esi, esi
	jne	SHORT $LN15@sqlite3Ana@2
; Line 42351
	cmp	DWORD PTR [ebx], esi
	jle	$LN5@sqlite3Ana@2
	npad	4
$LL14@sqlite3Ana@2:
; Line 42352
	cmp	esi, 1
	je	SHORT $LN13@sqlite3Ana@2
; Line 42353
	push	esi
	mov	eax, edi
	call	_analyzeDatabase
	add	esp, 4
$LN13@sqlite3Ana@2:
	add	esi, 1
	cmp	esi, DWORD PTR [ebx]
	jl	SHORT $LL14@sqlite3Ana@2
	pop	esi
	pop	ebp
	pop	ebx
; Line 42383
	pop	ecx
	ret	0
$LN15@sqlite3Ana@2:
; Line 42355
	test	ebp, ebp
	je	SHORT $LN8@sqlite3Ana@2
	test	DWORD PTR [ebp+4], -2			; fffffffeH
	je	SHORT $LN8@sqlite3Ana@2
; Line 42370
	lea	edx, DWORD PTR _pTableName$[esp+16]
	mov	ecx, ebp
	mov	eax, edi
	call	_sqlite3TwoPartName
; Line 42371
	test	eax, eax
	jl	SHORT $LN5@sqlite3Ana@2
; Line 42372
	mov	edx, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [eax+eax*2]
; Line 42373
	mov	eax, DWORD PTR _pTableName$[esp+16]
	mov	esi, DWORD PTR [edx+ecx*8]
	call	_sqlite3NameFromToken
	mov	ebx, eax
; Line 42374
	test	ebx, ebx
	je	SHORT $LN5@sqlite3Ana@2
; Line 42375
	mov	ecx, edi
	call	_sqlite3LocateTable
; Line 42376
	push	ebx
	mov	esi, eax
	call	_sqlite3FreeX
; Line 42378
	jmp	SHORT $LN35@sqlite3Ana@2
$LN8@sqlite3Ana@2:
; Line 42357
	push	ebx
	mov	eax, esi
	call	_sqlite3FindDb
	add	esp, 4
; Line 42358
	test	eax, eax
	jl	SHORT $LN7@sqlite3Ana@2
	pop	esi
	pop	ebp
	pop	ebx
; Line 42383
	add	esp, 4
; Line 42359
	mov	DWORD PTR _pName2$[esp-4], eax
	mov	eax, edi
	jmp	_analyzeDatabase
$LN7@sqlite3Ana@2:
; Line 42361
	mov	eax, esi
	call	_sqlite3NameFromToken
; Line 42362
	xor	esi, esi
	mov	ecx, edi
	mov	ebx, eax
	call	_sqlite3LocateTable
; Line 42363
	test	ebx, ebx
	mov	esi, eax
	je	SHORT $LN26@sqlite3Ana@2
	push	ebx
	call	_free
$LN35@sqlite3Ana@2:
	add	esp, 4
$LN26@sqlite3Ana@2:
; Line 42364
	test	esi, esi
	je	SHORT $LN5@sqlite3Ana@2
; Line 42365
	push	esi
	mov	esi, edi
	call	_analyzeTable
	add	esp, 4
$LN5@sqlite3Ana@2:
	pop	esi
	pop	ebp
	pop	ebx
; Line 42383
	pop	ecx
	ret	0
_sqlite3Analyze ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@PBKJKLON@INSERT?5INTO?5?$CFQ?4?$CFs?5VALUES?$CI?8index?8@ ; `string'
PUBLIC	??_C@_0BE@NHCJMGDI@CREATE?$CFs?5INDEX?5?$CF?4?$CKs?$AA@ ; `string'
PUBLIC	??_C@_07OGDPOKCI@?5UNIQUE?$AA@			; `string'
PUBLIC	??_C@_0CK@BPKJMBLB@conflicting?5ON?5CONFLICT?5clauses?5@ ; `string'
PUBLIC	??_C@_0CA@MKEFOFFD@table?5?$CFs?5has?5no?5column?5named?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BC@FCCCAODM@sqlite_autoindex_?$AA@	; `string'
PUBLIC	??_C@_03HCMCBFLP@_?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BI@HPCDPJFN@index?5?$CFs?5already?5exists?$AA@ ; `string'
PUBLIC	??_C@_0CC@CKJEJGLG@there?5is?5already?5a?5table?5named?5?$CF@ ; `string'
PUBLIC	??_C@_0CC@FKDNLIPM@virtual?5tables?5may?5not?5be?5indexe@ ; `string'
PUBLIC	??_C@_0BJ@CFGNJLOC@views?5may?5not?5be?5indexed?$AA@ ; `string'
PUBLIC	??_C@_0BM@KIGEJLNH@table?5?$CFs?5may?5not?5be?5indexed?$AA@ ; `string'
PUBLIC	??_C@_05FKHKFDID@index?$AA@			; `string'
PUBLIC	_pEnd$GSCopy$
PUBLIC	_pTblName$GSCopy$
PUBLIC	_pParse$GSCopy$
PUBLIC	_pList$GSCopy$
PUBLIC	__$ArrayPad$
;	COMDAT ??_C@_0CP@PBKJKLON@INSERT?5INTO?5?$CFQ?4?$CFs?5VALUES?$CI?8index?8@
CONST	SEGMENT
??_C@_0CP@PBKJKLON@INSERT?5INTO?5?$CFQ?4?$CFs?5VALUES?$CI?8index?8@ DB 'I'
	DB	'NSERT INTO %Q.%s VALUES(''index'',%Q,%Q,#0,%Q);', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NHCJMGDI@CREATE?$CFs?5INDEX?5?$CF?4?$CKs?$AA@
CONST	SEGMENT
??_C@_0BE@NHCJMGDI@CREATE?$CFs?5INDEX?5?$CF?4?$CKs?$AA@ DB 'CREATE%s INDE'
	DB	'X %.*s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07OGDPOKCI@?5UNIQUE?$AA@
CONST	SEGMENT
??_C@_07OGDPOKCI@?5UNIQUE?$AA@ DB ' UNIQUE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BPKJMBLB@conflicting?5ON?5CONFLICT?5clauses?5@
CONST	SEGMENT
??_C@_0CK@BPKJMBLB@conflicting?5ON?5CONFLICT?5clauses?5@ DB 'conflicting '
	DB	'ON CONFLICT clauses specified', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MKEFOFFD@table?5?$CFs?5has?5no?5column?5named?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0CA@MKEFOFFD@table?5?$CFs?5has?5no?5column?5named?5?$CFs?$AA@ DB 't'
	DB	'able %s has no column named %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FCCCAODM@sqlite_autoindex_?$AA@
CONST	SEGMENT
??_C@_0BC@FCCCAODM@sqlite_autoindex_?$AA@ DB 'sqlite_autoindex_', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HCMCBFLP@_?$CFd?$AA@
CONST	SEGMENT
??_C@_03HCMCBFLP@_?$CFd?$AA@ DB '_%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HPCDPJFN@index?5?$CFs?5already?5exists?$AA@
CONST	SEGMENT
??_C@_0BI@HPCDPJFN@index?5?$CFs?5already?5exists?$AA@ DB 'index %s alread'
	DB	'y exists', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CKJEJGLG@there?5is?5already?5a?5table?5named?5?$CF@
CONST	SEGMENT
??_C@_0CC@CKJEJGLG@there?5is?5already?5a?5table?5named?5?$CF@ DB 'there i'
	DB	's already a table named %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FKDNLIPM@virtual?5tables?5may?5not?5be?5indexe@
CONST	SEGMENT
??_C@_0CC@FKDNLIPM@virtual?5tables?5may?5not?5be?5indexe@ DB 'virtual tab'
	DB	'les may not be indexed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CFGNJLOC@views?5may?5not?5be?5indexed?$AA@
CONST	SEGMENT
??_C@_0BJ@CFGNJLOC@views?5may?5not?5be?5indexed?$AA@ DB 'views may not be'
	DB	' indexed', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KIGEJLNH@table?5?$CFs?5may?5not?5be?5indexed?$AA@
CONST	SEGMENT
??_C@_0BM@KIGEJLNH@table?5?$CFs?5may?5not?5be?5indexed?$AA@ DB 'table %s '
	DB	'may not be indexed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKHKFDID@index?$AA@
CONST	SEGMENT
??_C@_05FKHKFDID@index?$AA@ DB 'index', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3CreateIndex
_TEXT	SEGMENT
_db$ = -116						; size = 4
_zName$ = -112						; size = 4
_pTab$ = -108						; size = 4
_pListItem$ = -104					; size = 4
_pDb$ = -104						; size = 4
_pParse$GSCopy$ = -100					; size = 4
_iDb$ = -96						; size = 4
_pList$GSCopy$ = -92					; size = 4
tv1441 = -88						; size = 4
tv1374 = -88						; size = 4
tv1063 = -88						; size = 4
_zColName$94634 = -88					; size = 4
_nullId$ = -88						; size = 8
tv1451 = -80						; size = 4
_pTabCol$94635 = -80					; size = 4
_pName$ = -76						; size = 4
tv1446 = -72						; size = 4
_zExtra$ = -72						; size = 4
_nExtra$ = -68						; size = 4
_pTblName$GSCopy$ = -64					; size = 4
tv811 = -60						; size = 4
_pEnd$GSCopy$ = -56					; size = 4
_sFix$ = -52						; size = 16
_zBuf$94594 = -36					; size = 30
__$ArrayPad$ = -4					; size = 4
_pName1$ = 8						; size = 4
_pName2$ = 12						; size = 4
_pTblName$ = 16						; size = 4
_pList$ = 20						; size = 4
_onError$ = 24						; size = 4
_pStart$ = 28						; size = 4
_sortOrder$ = 32					; size = 4
_ifNotExist$ = 36					; size = 4
_sqlite3CreateIndex PROC				; COMDAT
; _pParse$ = edx
; _pEnd$ = ecx
; Line 45464
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+116], eax
; Line 45476
	mov	eax, DWORD PTR _pList$[esp+112]
	push	ebx
	mov	ebx, DWORD PTR _pName2$[esp+116]
	push	ebp
	mov	ebp, DWORD PTR _pTblName$[esp+120]
	push	esi
	mov	esi, DWORD PTR _pName1$[esp+124]
	push	edi
	mov	edi, edx
	mov	edx, DWORD PTR [edi]
	mov	DWORD PTR _pList$GSCopy$[esp+132], eax
	xor	eax, eax
; Line 45482
	cmp	DWORD PTR [edi+24], eax
	mov	DWORD PTR _pParse$GSCopy$[esp+132], edi
	mov	DWORD PTR _pTblName$GSCopy$[esp+132], ebp
	mov	DWORD PTR _pEnd$GSCopy$[esp+132], ecx
	mov	DWORD PTR _zName$[esp+132], eax
	mov	DWORD PTR _db$[esp+132], edx
	mov	DWORD PTR _pName$[esp+132], eax
	mov	DWORD PTR _nExtra$[esp+132], eax
	jne	$LN108@sqlite3Cre@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN83@sqlite3Cre@4
	cmp	DWORD PTR _inMutex, eax
	jg	$LN108@sqlite3Cre@4
$LN83@sqlite3Cre@4:
	cmp	BYTE PTR [edi+188], al
	jne	$LN108@sqlite3Cre@4
; Line 45489
	cmp	ebp, eax
	je	$LN82@sqlite3Cre@4
; Line 45496
	lea	edx, DWORD PTR _pName$[esp+132]
	mov	ecx, ebx
	mov	eax, edi
	call	_sqlite3TwoPartName
	mov	esi, eax
; Line 45497
	test	esi, esi
	mov	DWORD PTR _iDb$[esp+132], esi
	jl	$LN108@sqlite3Cre@4
; Line 45503
	push	ebp
	push	edi
	call	_sqlite3SrcListLookup
	add	esp, 8
; Line 45504
	test	ebx, ebx
	je	SHORT $LN80@sqlite3Cre@4
	test	DWORD PTR [ebx+4], -2			; fffffffeH
	jne	SHORT $LN80@sqlite3Cre@4
	test	eax, eax
	je	SHORT $LN80@sqlite3Cre@4
	mov	ecx, DWORD PTR _db$[esp+132]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax+76]
	cmp	eax, DWORD PTR [edx+44]
	jne	SHORT $LN80@sqlite3Cre@4
; Line 45505
	mov	esi, 1
	mov	DWORD PTR _iDb$[esp+132], esi
$LN80@sqlite3Cre@4:
; Line 45511
	mov	ecx, DWORD PTR _pName$[esp+132]
	push	ecx
	mov	ecx, esi
	push	OFFSET ??_C@_05FKHKFDID@index?$AA@
	mov	esi, edi
	lea	eax, DWORD PTR _sFix$[esp+140]
	call	_sqlite3FixInit
	add	esp, 8
	test	eax, eax
	je	SHORT $LN79@sqlite3Cre@4
	lea	edx, DWORD PTR _sFix$[esp+132]
	push	ebp
	push	edx
	call	_sqlite3FixSrcList
	add	esp, 8
$LN79@sqlite3Cre@4:
; Line 45517
	mov	esi, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp+12]
	mov	ecx, edi
	call	_sqlite3LocateTable
	mov	ebp, eax
; Line 45518
	test	ebp, ebp
	mov	DWORD PTR _pTab$[esp+132], eax
	je	$LN108@sqlite3Cre@4
; Line 45520
	jmp	SHORT $LN77@sqlite3Cre@4
$LN82@sqlite3Cre@4:
; Line 45522
	mov	ebp, DWORD PTR [edi+164]
; Line 45523
	test	ebp, ebp
	mov	DWORD PTR _pTab$[esp+132], ebp
	je	$LN108@sqlite3Cre@4
; Line 45524
	mov	esi, DWORD PTR [ebp+76]
	mov	ecx, edx
	call	_sqlite3SchemaToIndex
	mov	DWORD PTR _iDb$[esp+132], eax
$LN77@sqlite3Cre@4:
; Line 45526
	mov	ebx, DWORD PTR _iDb$[esp+132]
	mov	ecx, DWORD PTR _db$[esp+132]
	mov	esi, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [ebx+ebx*2]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	add	esi, eax
; Line 45528
	cmp	DWORD PTR [edi+24], 0
	mov	DWORD PTR tv811[esp+132], eax
	mov	DWORD PTR _pDb$[esp+132], esi
	jne	$LN108@sqlite3Cre@4
; Line 45529
	cmp	BYTE PTR [ebp+52], 0
	je	SHORT $LN73@sqlite3Cre@4
; Line 45530
	mov	edx, DWORD PTR [ebp]
	push	edx
	push	OFFSET ??_C@_0BM@KIGEJLNH@table?5?$CFs?5may?5not?5be?5indexed?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 45531
	jmp	$LN108@sqlite3Cre@4
$LN73@sqlite3Cre@4:
; Line 45534
	cmp	DWORD PTR [ebp+24], 0
	je	SHORT $LN72@sqlite3Cre@4
; Line 45535
	push	OFFSET ??_C@_0BJ@CFGNJLOC@views?5may?5not?5be?5indexed?$AA@
	call	_sqlite3ErrorMsg
; Line 45536
	jmp	$LN155@sqlite3Cre@4
$LN72@sqlite3Cre@4:
; Line 45540
	cmp	BYTE PTR [ebp+57], 0
	je	SHORT $LN71@sqlite3Cre@4
; Line 45541
	push	OFFSET ??_C@_0CC@FKDNLIPM@virtual?5tables?5may?5not?5be?5indexe@
	call	_sqlite3ErrorMsg
; Line 45542
	jmp	$LN155@sqlite3Cre@4
$LN71@sqlite3Cre@4:
; Line 45559
	mov	eax, DWORD PTR _pName$[esp+132]
	test	eax, eax
	je	$LN70@sqlite3Cre@4
; Line 45560
	call	_sqlite3NameFromToken
; Line 45561
	mov	esi, edi
	mov	DWORD PTR _zName$[esp+132], eax
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$LN108@sqlite3Cre@4
; Line 45562
	mov	esi, DWORD PTR _zName$[esp+132]
	test	esi, esi
	je	$LN108@sqlite3Cre@4
; Line 45563
	mov	eax, edi
	call	_sqlite3CheckObjectName
	test	eax, eax
	jne	$LN108@sqlite3Cre@4
; Line 45566
	mov	eax, DWORD PTR _db$[esp+132]
	cmp	BYTE PTR [eax+68], 0
	jne	SHORT $LN64@sqlite3Cre@4
; Line 45567
	mov	esi, edi
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$LN108@sqlite3Cre@4
; Line 45568
	mov	ecx, DWORD PTR _db$[esp+132]
	mov	ebx, DWORD PTR _zName$[esp+132]
	push	eax
	push	ecx
	call	_sqlite3FindTable
	add	esp, 8
	test	eax, eax
	je	SHORT $LN64@sqlite3Cre@4
; Line 45569
	mov	edx, DWORD PTR _zName$[esp+132]
	push	edx
	push	OFFSET ??_C@_0CC@CKJEJGLG@there?5is?5already?5a?5table?5named?5?$CF@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 45570
	jmp	$LN108@sqlite3Cre@4
$LN64@sqlite3Cre@4:
; Line 45573
	mov	eax, DWORD PTR _pDb$[esp+132]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _db$[esp+132]
	mov	ebx, DWORD PTR _zName$[esp+132]
	push	ecx
	push	edx
	call	_sqlite3FindIndex
	add	esp, 8
	test	eax, eax
	je	$LN141@sqlite3Cre@4
; Line 45574
	cmp	DWORD PTR _ifNotExist$[esp+128], 0
	jne	$LN108@sqlite3Cre@4
; Line 45575
	mov	eax, DWORD PTR _zName$[esp+132]
	push	eax
	push	OFFSET ??_C@_0BI@HPCDPJFN@index?5?$CFs?5already?5exists?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 45577
	jmp	$LN108@sqlite3Cre@4
$LN70@sqlite3Cre@4:
; Line 45583
	mov	eax, DWORD PTR [ebp+16]
	test	eax, eax
	mov	ecx, 1
	je	SHORT $LN58@sqlite3Cre@4
$LL60@sqlite3Cre@4:
	mov	eax, DWORD PTR [eax+32]
	add	ecx, 1
	test	eax, eax
	jne	SHORT $LL60@sqlite3Cre@4
$LN58@sqlite3Cre@4:
; Line 45584
	push	ecx
	push	OFFSET ??_C@_03HCMCBFLP@_?$CFd?$AA@
	lea	ecx, DWORD PTR _zBuf$94594[esp+140]
	push	ecx
	push	30					; 0000001eH
	call	_sqlite3_snprintf
; Line 45586
	push	0
	lea	edx, DWORD PTR _zBuf$94594[esp+152]
	push	edx
	mov	DWORD PTR _zName$[esp+156], 0
	mov	eax, DWORD PTR [ebp]
	push	eax
	lea	ecx, DWORD PTR _zName$[esp+160]
	push	OFFSET ??_C@_0BC@FCCCAODM@sqlite_autoindex_?$AA@
	push	ecx
	call	_sqlite3SetString
	add	esp, 36					; 00000024H
; Line 45587
	cmp	DWORD PTR _zName$[esp+132], 0
	je	$LN108@sqlite3Cre@4
	jmp	SHORT $LN145@sqlite3Cre@4
$LN141@sqlite3Cre@4:
	mov	ebx, DWORD PTR _iDb$[esp+132]
	mov	esi, DWORD PTR _pDb$[esp+132]
$LN145@sqlite3Cre@4:
; Line 45595
	cmp	ebx, 1
	mov	esi, DWORD PTR [esi]
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN89@sqlite3Cre@4
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN89@sqlite3Cre@4:
	push	esi
	push	0
	push	eax
	push	18					; 00000012H
	mov	eax, edi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN108@sqlite3Cre@4
; Line 45598
	mov	eax, 1
; Line 45599
	cmp	ebx, eax
	jne	SHORT $LN55@sqlite3Cre@4
	mov	eax, 3
$LN55@sqlite3Cre@4:
; Line 45600
	mov	edx, DWORD PTR [ebp]
	mov	ecx, DWORD PTR _zName$[esp+132]
	push	esi
	push	edx
	push	ecx
	push	eax
	mov	eax, edi
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN108@sqlite3Cre@4
; Line 45610
	mov	eax, DWORD PTR _pList$GSCopy$[esp+132]
	test	eax, eax
	jne	SHORT $LN152@sqlite3Cre@4
; Line 45611
	mov	eax, DWORD PTR [ebp+4]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [eax+edx*4-20]
	mov	DWORD PTR _nullId$[esp+132], eax
; Line 45612
	lea	edx, DWORD PTR [eax+1]
$LL136@sqlite3Cre@4:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL136@sqlite3Cre@4
	sub	eax, edx
	mov	edx, DWORD PTR _nullId$[esp+136]
	lea	ecx, DWORD PTR [eax+eax]
; Line 45613
	lea	eax, DWORD PTR _nullId$[esp+132]
	and	edx, 1
	push	eax
	or	ecx, edx
	push	0
	xor	eax, eax
	mov	DWORD PTR _nullId$[esp+144], ecx
	call	_sqlite3ExprListAppend
	add	esp, 8
; Line 45614
	test	eax, eax
	mov	DWORD PTR _pList$GSCopy$[esp+132], eax
	je	$LN108@sqlite3Cre@4
; Line 45615
	mov	ecx, DWORD PTR [eax+12]
	mov	dl, BYTE PTR _sortOrder$[esp+128]
	mov	BYTE PTR [ecx+8], dl
$LN152@sqlite3Cre@4:
; Line 45621
	mov	esi, DWORD PTR [eax]
	test	esi, esi
	jle	SHORT $LN49@sqlite3Cre@4
	mov	edi, DWORD PTR [eax+12]
	mov	ebx, DWORD PTR _nExtra$[esp+132]
	mov	ebp, esi
	npad	6
$LL51@sqlite3Cre@4:
; Line 45622
	mov	eax, DWORD PTR [edi]
; Line 45623
	test	eax, eax
	je	SHORT $LN50@sqlite3Cre@4
; Line 45624
	mov	eax, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax]
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL137@sqlite3Cre@4:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL137@sqlite3Cre@4
	sub	eax, edx
	lea	ebx, DWORD PTR [ebx+eax+1]
$LN50@sqlite3Cre@4:
	add	edi, 12					; 0000000cH
	sub	ebp, 1
	jne	SHORT $LL51@sqlite3Cre@4
	mov	DWORD PTR _nExtra$[esp+132], ebx
$LN49@sqlite3Cre@4:
; Line 45631
	mov	ebx, DWORD PTR _zName$[esp+132]
	lea	ecx, DWORD PTR [ebx+1]
$LL138@sqlite3Cre@4:
	mov	al, BYTE PTR [ebx]
	add	ebx, 1
	test	al, al
	jne	SHORT $LL138@sqlite3Cre@4
; Line 45641
	mov	edx, DWORD PTR _nExtra$[esp+132]
	sub	ebx, ecx
	mov	ecx, esi
	imul	ecx, 13					; 0000000dH
	add	ecx, ebx
	lea	edi, DWORD PTR [ecx+edx+53]
	call	_sqlite3Malloc
; Line 45642
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ebp, eax
	je	SHORT $LN147@sqlite3Cre@4
	cmp	DWORD PTR _inMutex, 0
	jg	$exit_create_index$94561
$LN147@sqlite3Cre@4:
; Line 45643
	lea	eax, DWORD PTR [ebp+48]
	mov	DWORD PTR [ebp+44], eax
; Line 45644
	lea	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ebp+8], eax
; Line 45645
	lea	eax, DWORD PTR [eax+esi*4]
	mov	DWORD PTR [ebp+12], eax
; Line 45646
	lea	eax, DWORD PTR [eax+esi*4+4]
	mov	DWORD PTR [ebp+40], eax
; Line 45647
	add	eax, esi
; Line 45648
	lea	ecx, DWORD PTR [eax+ebx+1]
	mov	DWORD PTR [ebp], eax
; Line 45649
	mov	edx, DWORD PTR _zName$[esp+132]
	add	ebx, 1
	push	ebx
	push	edx
	push	eax
	mov	DWORD PTR _zExtra$[esp+144], ecx
	call	_memcpy
; Line 45650
	mov	eax, DWORD PTR _pTab$[esp+144]
; Line 45651
	mov	ecx, DWORD PTR _pList$GSCopy$[esp+144]
	mov	DWORD PTR [ebp+16], eax
	mov	edx, DWORD PTR [ecx]
; Line 45652
	mov	al, BYTE PTR _onError$[esp+140]
	add	esp, 12					; 0000000cH
; Line 45653
	cmp	DWORD PTR _pName$[esp+132], 0
	mov	DWORD PTR [ebp+4], edx
; Line 45654
	mov	edx, DWORD PTR _db$[esp+132]
	sete	cl
	mov	BYTE PTR [ebp+24], al
	mov	BYTE PTR [ebp+25], cl
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR tv811[esp+132]
	mov	edx, DWORD PTR [ecx+eax+20]
; Line 45658
	mov	eax, DWORD PTR _pDb$[esp+132]
	mov	DWORD PTR [ebp+36], edx
	mov	ecx, DWORD PTR [eax+20]
	cmp	BYTE PTR [ecx+120], 4
; Line 45668
	mov	eax, DWORD PTR _pList$GSCopy$[esp+132]
	mov	edx, DWORD PTR [eax+12]
	sbb	ebx, ebx
	neg	ebx
	xor	edi, edi
	sub	ebx, 1
	cmp	DWORD PTR [eax], edi
	mov	DWORD PTR _pListItem$[esp+132], edx
	jle	$LN143@sqlite3Cre@4
	mov	ecx, DWORD PTR _pTab$[esp+132]
$LL154@sqlite3Cre@4:
; Line 45669
	mov	eax, DWORD PTR _pListItem$[esp+132]
	mov	edx, DWORD PTR [eax+4]
; Line 45674
	mov	eax, DWORD PTR [ecx+8]
	xor	esi, esi
	cmp	DWORD PTR [ecx+4], esi
	mov	DWORD PTR _zColName$94634[esp+132], edx
	mov	DWORD PTR _pTabCol$94635[esp+132], eax
	jle	SHORT $LN122@sqlite3Cre@4
	npad	4
$LL41@sqlite3Cre@4:
; Line 45675
	mov	ecx, DWORD PTR _pTabCol$94635[esp+132]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _zColName$94634[esp+132]
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN149@sqlite3Cre@4
	mov	edx, DWORD PTR _pTab$[esp+132]
	add	DWORD PTR _pTabCol$94635[esp+132], 20	; 00000014H
	add	esi, 1
	cmp	esi, DWORD PTR [edx+4]
	jl	SHORT $LL41@sqlite3Cre@4
$LN149@sqlite3Cre@4:
; Line 45674
	mov	ecx, DWORD PTR _pTab$[esp+132]
$LN122@sqlite3Cre@4:
; Line 45677
	cmp	esi, DWORD PTR [ecx+4]
	jge	$LN123@sqlite3Cre@4
; Line 45688
	mov	eax, DWORD PTR [ebp+8]
; Line 45689
	mov	edx, DWORD PTR _pListItem$[esp+132]
	mov	DWORD PTR [eax+edi*4], esi
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	je	SHORT $LN36@sqlite3Cre@4
; Line 45692
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax]
	mov	esi, DWORD PTR _zExtra$[esp+132]
	mov	edx, DWORD PTR _nExtra$[esp+132]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	esi
	push	edx
	call	_sqlite3_snprintf
; Line 45693
	mov	ecx, esi
	mov	eax, ecx
	lea	edx, DWORD PTR [eax+1]
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv1374[esp+132], edx
	npad	7
$LL139@sqlite3Cre@4:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL139@sqlite3Cre@4
	sub	eax, DWORD PTR tv1374[esp+132]
	lea	eax, DWORD PTR [ecx+eax+1]
; Line 45694
	mov	ecx, DWORD PTR _pTab$[esp+132]
	mov	DWORD PTR _zExtra$[esp+132], eax
	jmp	SHORT $LN34@sqlite3Cre@4
$LN36@sqlite3Cre@4:
; Line 45695
	mov	eax, DWORD PTR [ecx+8]
	lea	edx, DWORD PTR [esi+esi*4]
	mov	esi, DWORD PTR [eax+edx*4+12]
; Line 45696
	test	esi, esi
	jne	SHORT $LN34@sqlite3Cre@4
; Line 45697
	mov	edx, DWORD PTR _db$[esp+132]
	mov	eax, DWORD PTR [edx+28]
	mov	esi, DWORD PTR [eax]
$LN34@sqlite3Cre@4:
; Line 45700
	mov	edx, DWORD PTR _db$[esp+132]
	cmp	BYTE PTR [edx+68], 0
	jne	SHORT $LN33@sqlite3Cre@4
	mov	eax, DWORD PTR _pParse$GSCopy$[esp+132]
	push	esi
	push	eax
	or	eax, -1
	call	_sqlite3LocateCollSeq
	add	esp, 8
	test	eax, eax
	je	$exit_create_index$94561
	mov	ecx, DWORD PTR _pTab$[esp+132]
$LN33@sqlite3Cre@4:
; Line 45703
	mov	edx, DWORD PTR [ebp+44]
	mov	DWORD PTR [edx+edi*4], esi
; Line 45704
	mov	esi, DWORD PTR _pListItem$[esp+132]
	mov	al, BYTE PTR [esi+8]
; Line 45705
	mov	edx, DWORD PTR [ebp+40]
	and	al, bl
	mov	BYTE PTR [edi+edx], al
	mov	eax, DWORD PTR _pList$GSCopy$[esp+132]
	add	edi, 1
	add	esi, 12					; 0000000cH
	cmp	edi, DWORD PTR [eax]
	mov	DWORD PTR _pListItem$[esp+132], esi
	jl	$LL154@sqlite3Cre@4
$LN143@sqlite3Cre@4:
; Line 45680
	mov	ebx, DWORD PTR _pParse$GSCopy$[esp+132]
; Line 45707
	mov	edx, ebp
	call	_sqlite3DefaultRowEst
; Line 45709
	mov	eax, DWORD PTR _pTab$[esp+132]
	cmp	eax, DWORD PTR [ebx+164]
	jne	$LN150@sqlite3Cre@4
; Line 45724
	mov	esi, DWORD PTR [eax+16]
	test	esi, esi
	je	$LN150@sqlite3Cre@4
	npad	6
$LL148@sqlite3Cre@4:
; Line 45730
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, DWORD PTR [ebp+4]
	jne	$LN30@sqlite3Cre@4
; Line 45731
	xor	edi, edi
	test	eax, eax
	jle	$LN146@sqlite3Cre@4
	mov	ebx, DWORD PTR [ebp+44]
	mov	eax, DWORD PTR [esi+44]
	mov	edx, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [ebp+8]
	sub	eax, ebx
	sub	edx, ebx
	sub	ecx, ebx
	mov	DWORD PTR tv1441[esp+132], eax
	mov	DWORD PTR tv1446[esp+132], edx
	mov	DWORD PTR tv1451[esp+132], ecx
	jmp	$LN27@sqlite3Cre@4
$LN123@sqlite3Cre@4:
; Line 45679
	mov	ecx, DWORD PTR _zColName$94634[esp+132]
	mov	edx, DWORD PTR _pTab$[esp+132]
	mov	eax, DWORD PTR [edx]
	mov	edi, DWORD PTR _pParse$GSCopy$[esp+132]
	push	ecx
	push	eax
	push	OFFSET ??_C@_0CA@MKEFOFFD@table?5?$CFs?5has?5no?5column?5named?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
$exit_create_index$94561:
; Line 45869
	test	ebp, ebp
	je	SHORT $LN108@sqlite3Cre@4
; Line 45870
	mov	eax, DWORD PTR [ebp+28]
	test	eax, eax
	je	SHORT $LN103@sqlite3Cre@4
	push	eax
	call	_free
	add	esp, 4
$LN103@sqlite3Cre@4:
	push	ebp
	call	_free
$LN155@sqlite3Cre@4:
	add	esp, 4
$LN108@sqlite3Cre@4:
; Line 45872
	mov	ebx, DWORD PTR _pList$GSCopy$[esp+132]
	call	_sqlite3ExprListDelete
; Line 45873
	mov	eax, DWORD PTR _pTblName$GSCopy$[esp+132]
	push	eax
	call	_sqlite3SrcListDelete
; Line 45874
	mov	eax, DWORD PTR _zName$[esp+136]
	add	esp, 4
	test	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	je	SHORT $LN113@sqlite3Cre@4
	push	eax
	call	_free
	add	esp, 4
$LN113@sqlite3Cre@4:
; Line 45876
	mov	ecx, DWORD PTR __$ArrayPad$[esp+116]
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 116				; 00000074H
	ret	0
	npad	3
$LL153@sqlite3Cre@4:
; Line 45731
	mov	eax, DWORD PTR tv1441[esp+132]
	mov	edx, DWORD PTR tv1446[esp+132]
$LN27@sqlite3Cre@4:
; Line 45732
	mov	ecx, DWORD PTR [eax+ebx]
; Line 45734
	mov	edx, DWORD PTR [edx+ebx]
	mov	eax, DWORD PTR tv1451[esp+132]
	cmp	edx, DWORD PTR [eax+ebx]
	jne	SHORT $LN146@sqlite3Cre@4
; Line 45735
	mov	edx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [ebp+40]
	mov	dl, BYTE PTR [edi+edx]
	cmp	dl, BYTE PTR [edi+eax]
	jne	SHORT $LN146@sqlite3Cre@4
; Line 45736
	mov	edx, DWORD PTR [ebx]
	cmp	ecx, edx
	je	SHORT $LN26@sqlite3Cre@4
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN146@sqlite3Cre@4
$LN26@sqlite3Cre@4:
; Line 45731
	add	edi, 1
	add	ebx, 4
	cmp	edi, DWORD PTR [esi+4]
	jl	SHORT $LL153@sqlite3Cre@4
$LN146@sqlite3Cre@4:
; Line 45738
	cmp	edi, DWORD PTR [esi+4]
	je	SHORT $LN128@sqlite3Cre@4
$LN30@sqlite3Cre@4:
; Line 45724
	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	jne	$LL148@sqlite3Cre@4
; Line 45738
	mov	ebx, DWORD PTR _pParse$GSCopy$[esp+132]
$LN150@sqlite3Cre@4:
; Line 45763
	mov	edi, DWORD PTR _db$[esp+132]
	cmp	BYTE PTR [edi+68], 0
	je	$LN17@sqlite3Cre@4
; Line 45766
	mov	edx, DWORD PTR [ebp]
	mov	eax, edx
	lea	esi, DWORD PTR [eax+1]
	npad	7
$LL140@sqlite3Cre@4:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL140@sqlite3Cre@4
	sub	eax, esi
	add	eax, 1
	push	ebp
	push	eax
	mov	eax, DWORD PTR [ebp+36]
	push	edx
	add	eax, 32					; 00000020H
	call	_sqlite3HashInsert
	add	esp, 12					; 0000000cH
; Line 45767
	test	eax, eax
	jne	$exit_create_index$94561
; Line 45771
	or	DWORD PTR [edi+8], 16			; 00000010H
; Line 45772
	cmp	DWORD PTR _pTblName$GSCopy$[esp+132], eax
	je	$LN142@sqlite3Cre@4
; Line 45773
	mov	ecx, edi
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [ebp+20], edx
; Line 45774
	jmp	$LN142@sqlite3Cre@4
$LN128@sqlite3Cre@4:
; Line 45739
	mov	al, BYTE PTR [esi+24]
	mov	cl, BYTE PTR [ebp+24]
	cmp	al, cl
	je	$exit_create_index$94561
; Line 45747
	cmp	al, 99					; 00000063H
	je	SHORT $LN19@sqlite3Cre@4
	cmp	cl, 99					; 00000063H
	je	SHORT $LN19@sqlite3Cre@4
; Line 45749
	mov	edi, DWORD PTR _pParse$GSCopy$[esp+132]
	push	0
	push	OFFSET ??_C@_0CK@BPKJMBLB@conflicting?5ON?5CONFLICT?5clauses?5@
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN19@sqlite3Cre@4:
; Line 45751
	cmp	BYTE PTR [esi+24], 99			; 00000063H
	jne	$exit_create_index$94561
; Line 45752
	mov	al, BYTE PTR [ebp+24]
	mov	BYTE PTR [esi+24], al
; Line 45755
	jmp	$exit_create_index$94561
$LN17@sqlite3Cre@4:
; Line 45795
	mov	eax, DWORD PTR [ebx+32]
	mov	DWORD PTR tv1063[esp+132], eax
	add	eax, 1
; Line 45797
	mov	esi, ebx
	mov	DWORD PTR [ebx+32], eax
	call	_sqlite3GetVdbe
	mov	edi, eax
; Line 45798
	test	edi, edi
	je	$exit_create_index$94561
; Line 45803
	mov	esi, DWORD PTR _iDb$[esp+132]
	push	1
	mov	eax, esi
	mov	ecx, ebx
	call	_sqlite3BeginWriteOperation
; Line 45804
	push	0
	push	esi
	push	31					; 0000001fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45805
	mov	eax, DWORD PTR tv1063[esp+148]
	push	0
	push	eax
	push	124					; 0000007cH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 28					; 0000001cH
; Line 45810
	cmp	DWORD PTR _pStart$[esp+128], 0
	je	SHORT $LN11@sqlite3Cre@4
	mov	edx, DWORD PTR _pEnd$GSCopy$[esp+132]
	test	edx, edx
	je	SHORT $LN11@sqlite3Cre@4
; Line 45815
	cmp	DWORD PTR _onError$[esp+128], 0
	mov	ecx, OFFSET ??_C@_00CNPNBAHC@?$AA@
	je	SHORT $LN91@sqlite3Cre@4
	mov	ecx, OFFSET ??_C@_07OGDPOKCI@?5UNIQUE?$AA@
$LN91@sqlite3Cre@4:
	mov	eax, DWORD PTR _pName$[esp+132]
	mov	esi, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	sub	edx, esi
	push	esi
	add	edx, 1
	push	edx
	push	ecx
	push	OFFSET ??_C@_0BE@NHCJMGDI@CREATE?$CFs?5INDEX?5?$CF?4?$CKs?$AA@
	call	_sqlite3MPrintf
	add	esp, 16					; 00000010H
	mov	esi, eax
; Line 45816
	jmp	SHORT $LN10@sqlite3Cre@4
$LN11@sqlite3Cre@4:
; Line 45819
	xor	esi, esi
$LN10@sqlite3Cre@4:
; Line 45830
	cmp	DWORD PTR _iDb$[esp+132], 1
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN93@sqlite3Cre@4
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN93@sqlite3Cre@4:
	mov	ecx, DWORD PTR _pTab$[esp+132]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ebp]
	mov	ebx, DWORD PTR _pParse$GSCopy$[esp+132]
	push	esi
	push	edx
	mov	edx, DWORD PTR _db$[esp+140]
	push	ecx
	mov	ecx, DWORD PTR tv811[esp+144]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	push	OFFSET ??_C@_0CP@PBKJKLON@INSERT?5INTO?5?$CFQ?4?$CFs?5VALUES?$CI?8index?8@
	call	_sqlite3NestedParse
; Line 45831
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 45832
	push	esi
	call	_sqlite3FreeX
	add	esp, 40					; 00000028H
; Line 45837
	cmp	DWORD PTR _pTblName$GSCopy$[esp+132], 0
	je	SHORT $LN142@sqlite3Cre@4
; Line 45838
	mov	eax, DWORD PTR tv1063[esp+132]
	push	eax
	push	ebp
	mov	eax, ebx
	call	_sqlite3RefillIndex
; Line 45839
	mov	esi, DWORD PTR _iDb$[esp+140]
	mov	ecx, DWORD PTR _db$[esp+140]
	add	esp, 8
	call	_sqlite3ChangeCookie
; Line 45841
	mov	ecx, DWORD PTR [ebp]
	push	-1
	push	ecx
	push	OFFSET ??_C@_09NJDMOIOM@name?$DN?8?$CFq?8?$AA@
	call	_sqlite3MPrintf
	add	esp, 8
	push	eax
	xor	eax, eax
	mov	ecx, esi
	lea	edx, DWORD PTR [eax+28]
	call	_sqlite3VdbeOp3
; Line 45842
	push	0
	push	0
	push	15					; 0000000fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 20					; 00000014H
$LN142@sqlite3Cre@4:
; Line 45851
	mov	edx, DWORD PTR _db$[esp+132]
	cmp	BYTE PTR [edx+68], 0
	jne	SHORT $LN7@sqlite3Cre@4
	cmp	DWORD PTR _pTblName$GSCopy$[esp+132], 0
	jne	$exit_create_index$94561
$LN7@sqlite3Cre@4:
; Line 45853
	mov	ecx, DWORD PTR _pTab$[esp+132]
	mov	edx, 5
	cmp	DWORD PTR _onError$[esp+128], edx
	jne	SHORT $LN5@sqlite3Cre@4
	mov	eax, DWORD PTR [ecx+16]
	test	eax, eax
	je	SHORT $LN5@sqlite3Cre@4
	cmp	BYTE PTR [eax+24], dl
	je	SHORT $LN5@sqlite3Cre@4
; Line 45858
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@sqlite3Cre@4
$LL3@sqlite3Cre@4:
	mov	ecx, DWORD PTR [eax+32]
	cmp	BYTE PTR [ecx+24], dl
	je	SHORT $LN2@sqlite3Cre@4
; Line 45859
	mov	eax, ecx
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LL3@sqlite3Cre@4
$LN2@sqlite3Cre@4:
; Line 45861
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [ebp+32], ecx
; Line 45862
	mov	DWORD PTR [eax+32], ebp
	jmp	$LN108@sqlite3Cre@4
$LN5@sqlite3Cre@4:
; Line 45854
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [ebp+32], edx
; Line 45855
	mov	DWORD PTR [ecx+16], ebp
; Line 45869
	jmp	$LN108@sqlite3Cre@4
_sqlite3CreateIndex ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KLPAANK@?$CFz?3?$CFd?$AA@		; `string'
PUBLIC	??_C@_02OAOPDKLG@?$CFT?$AA@			; `string'
;	COMDAT ??_C@_05KLPAANK@?$CFz?3?$CFd?$AA@
CONST	SEGMENT
??_C@_05KLPAANK@?$CFz?3?$CFd?$AA@ DB '%z:%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAOPDKLG@?$CFT?$AA@
CONST	SEGMENT
??_C@_02OAOPDKLG@?$CFT?$AA@ DB '%T', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3ResultSetOfSelect
_TEXT	SEGMENT
_i$ = -64						; size = 4
tv644 = -60						; size = 4
tv650 = -56						; size = 4
_p$141722 = -52						; size = 4
_pEList$ = -48						; size = 4
_aCol$ = -44						; size = 4
_p$98825 = -40						; size = 4
_sNC$98832 = -36					; size = 36
_pParse$ = 8						; size = 4
_zTabName$ = 12						; size = 4
_pSelect$ = 16						; size = 4
_sqlite3ResultSetOfSelect PROC				; COMDAT
; Line 54509
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
; Line 54515
	mov	edi, DWORD PTR _pSelect$[esp+68]
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN20@sqlite3Res@2
$LL21@sqlite3Res@2:
	mov	DWORD PTR _pSelect$[esp+68], eax
	mov	eax, DWORD PTR [eax+32]
	test	eax, eax
	jne	SHORT $LL21@sqlite3Res@2
	mov	edi, DWORD PTR _pSelect$[esp+68]
$LN20@sqlite3Res@2:
; Line 54516
	mov	esi, DWORD PTR _pParse$[esp+68]
	push	edi
	push	esi
	call	_prepSelectStmt
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@sqlite3Res@2
$LN140@sqlite3Res@2:
	pop	edi
; Line 54517
	xor	eax, eax
	pop	esi
; Line 54595
	add	esp, 64					; 00000040H
	ret	0
$LN19@sqlite3Res@2:
; Line 54519
	push	0
	push	edi
	push	esi
	call	_sqlite3SelectResolve
	add	esp, 12					; 0000000cH
	test	eax, eax
; Line 54520
	jne	SHORT $LN140@sqlite3Res@2
; Line 54522
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	mov	esi, DWORD PTR _inMutex
	push	ebp
	je	SHORT $LN33@sqlite3Res@2
	test	esi, esi
	jg	SHORT $LN122@sqlite3Res@2
$LN33@sqlite3Res@2:
	push	80					; 00000050H
	call	_malloc
	mov	ebp, eax
	add	esp, 4
	test	ebp, ebp
	mov	DWORD PTR _p$141722[esp+76], ebp
	jne	SHORT $LN123@sqlite3Res@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN43@sqlite3Res@2
	test	esi, esi
	jg	SHORT $LN130@sqlite3Res@2
$LN43@sqlite3Res@2:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN130@sqlite3Res@2
$LN123@sqlite3Res@2:
	push	80					; 00000050H
	push	0
	push	ebp
	call	_memset
	add	esp, 12					; 0000000cH
$LN130@sqlite3Res@2:
; Line 54523
	test	ebp, ebp
	jne	SHORT $LN17@sqlite3Res@2
$LN122@sqlite3Res@2:
	pop	ebp
	pop	edi
; Line 54524
	xor	eax, eax
	pop	esi
; Line 54595
	add	esp, 64					; 00000040H
	ret	0
$LN17@sqlite3Res@2:
	push	ebx
; Line 54527
	mov	ebx, DWORD PTR _zTabName$[esp+76]
	test	ebx, ebx
	mov	DWORD PTR [ebp+28], 1
	je	SHORT $LN24@sqlite3Res@2
	call	_sqlite3StrDup
	jmp	SHORT $LN25@sqlite3Res@2
$LN24@sqlite3Res@2:
	xor	eax, eax
$LN25@sqlite3Res@2:
	mov	DWORD PTR [ebp], eax
; Line 54528
	mov	esi, DWORD PTR [edi]
; Line 54529
	mov	eax, DWORD PTR [esi]
; Line 54531
	lea	edi, DWORD PTR [eax+eax*4]
	add	edi, edi
	add	edi, edi
	mov	DWORD PTR _pEList$[esp+80], esi
	mov	DWORD PTR [ebp+4], eax
	call	_sqlite3Malloc
; Line 54532
	xor	ecx, ecx
	cmp	DWORD PTR [ebp+4], ecx
	mov	DWORD PTR _aCol$[esp+80], eax
	mov	DWORD PTR [ebp+8], eax
	mov	DWORD PTR _i$[esp+80], ecx
	jle	$LN14@sqlite3Res@2
	add	eax, 18					; 00000012H
	mov	DWORD PTR tv644[esp+80], eax
	mov	DWORD PTR tv650[esp+80], ecx
	jmp	SHORT $LN16@sqlite3Res@2
$LL131@sqlite3Res@2:
; Line 54527
	mov	esi, DWORD PTR _pEList$[esp+80]
$LN16@sqlite3Res@2:
; Line 54543
	mov	ecx, DWORD PTR tv650[esp+80]
	mov	eax, DWORD PTR [esi+12]
	add	eax, ecx
	mov	ecx, DWORD PTR [eax]
; Line 54545
	mov	eax, DWORD PTR [eax+4]
	test	eax, eax
	mov	DWORD PTR _p$98825[esp+80], ecx
	je	SHORT $LN13@sqlite3Res@2
; Line 54547
	mov	ebx, eax
	call	_sqlite3StrDup
; Line 54548
	jmp	SHORT $LN138@sqlite3Res@2
$LN13@sqlite3Res@2:
; Line 54549
	cmp	BYTE PTR [ecx], 112			; 00000070H
	jne	SHORT $LN11@sqlite3Res@2
	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	je	SHORT $LN11@sqlite3Res@2
	mov	edx, DWORD PTR [eax+20]
	add	eax, 20					; 00000014H
	test	edx, edx
	je	SHORT $LN11@sqlite3Res@2
	cmp	BYTE PTR [edx], 0
	je	SHORT $LN11@sqlite3Res@2
; Line 54551
	push	eax
	push	OFFSET ??_C@_02OAOPDKLG@?$CFT?$AA@
	jmp	SHORT $LN139@sqlite3Res@2
$LN11@sqlite3Res@2:
; Line 54552
	lea	eax, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN9@sqlite3Res@2
	cmp	BYTE PTR [ecx], 0
	je	SHORT $LN9@sqlite3Res@2
; Line 54554
	push	eax
	push	OFFSET ??_C@_02OAOPDKLG@?$CFT?$AA@
; Line 54555
	jmp	SHORT $LN139@sqlite3Res@2
$LN9@sqlite3Res@2:
; Line 54557
	mov	edx, DWORD PTR _i$[esp+80]
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_08OHGGEHKA@column?$CFd?$AA@
$LN139@sqlite3Res@2:
	call	_sqlite3MPrintf
	add	esp, 8
$LN138@sqlite3Res@2:
	mov	esi, eax
; Line 54559
	call	_sqlite3Dequote
; Line 54560
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN7@sqlite3Res@2
	cmp	DWORD PTR _inMutex, 0
	jg	$LN118@sqlite3Res@2
$LN7@sqlite3Res@2:
; Line 54569
	mov	eax, esi
	lea	edx, DWORD PTR [eax+1]
$LL126@sqlite3Res@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL126@sqlite3Res@2
	sub	eax, edx
; Line 54570
	xor	edi, edi
	xor	ebx, ebx
	cmp	DWORD PTR _i$[esp+80], edi
	mov	ebp, eax
	jle	SHORT $LN129@sqlite3Res@2
	npad	5
$LL6@sqlite3Res@2:
; Line 54571
	mov	ecx, DWORD PTR _aCol$[esp+80]
	lea	eax, DWORD PTR [edi+edi*4]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN5@sqlite3Res@2
; Line 54573
	add	ebx, 1
	push	ebx
	push	esi
	push	OFFSET ??_C@_05KLPAANK@?$CFz?3?$CFd?$AA@
	mov	BYTE PTR [esi+ebp], al
	call	_sqlite3MPrintf
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 54574
	or	edi, -1
; Line 54575
	test	esi, esi
	je	SHORT $LN129@sqlite3Res@2
$LN5@sqlite3Res@2:
; Line 54570
	add	edi, 1
	cmp	edi, DWORD PTR _i$[esp+80]
	jl	SHORT $LL6@sqlite3Res@2
$LN129@sqlite3Res@2:
; Line 54578
	mov	edx, DWORD PTR tv644[esp+80]
; Line 54585
	mov	ebp, DWORD PTR _p$98825[esp+80]
	xor	eax, eax
	push	0
	push	0
	mov	DWORD PTR _sNC$98832[esp+92], eax
	mov	DWORD PTR [edx-18], esi
	mov	DWORD PTR _sNC$98832[esp+88], eax
	mov	DWORD PTR _sNC$98832[esp+96], eax
	mov	DWORD PTR _sNC$98832[esp+100], eax
	mov	DWORD PTR _sNC$98832[esp+104], eax
	mov	DWORD PTR _sNC$98832[esp+108], eax
	mov	DWORD PTR _sNC$98832[esp+112], eax
	mov	DWORD PTR _sNC$98832[esp+116], eax
	mov	DWORD PTR _sNC$98832[esp+120], eax
	mov	eax, DWORD PTR _pSelect$[esp+84]
	mov	ecx, DWORD PTR [eax+12]
	push	0
	lea	edx, DWORD PTR _sNC$98832[esp+92]
	push	ebp
	push	edx
	mov	DWORD PTR _sNC$98832[esp+104], ecx
	call	_columnType
	mov	ebx, eax
	add	esp, 20					; 00000014H
	test	ebx, ebx
	jne	SHORT $LN59@sqlite3Res@2
	xor	edi, edi
	jmp	SHORT $LN133@sqlite3Res@2
$LN59@sqlite3Res@2:
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL127@sqlite3Res@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL127@sqlite3Res@2
	sub	eax, edx
	lea	esi, DWORD PTR [eax+1]
	xor	edi, edi
	test	esi, esi
	jle	SHORT $LN133@sqlite3Res@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN66@sqlite3Res@2
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN133@sqlite3Res@2
$LN66@sqlite3Res@2:
	push	esi
	call	_malloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN124@sqlite3Res@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN134@sqlite3Res@2
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN133@sqlite3Res@2
$LN134@sqlite3Res@2:
	mov	eax, 1
	add	DWORD PTR _inMutex, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, eax
	jmp	SHORT $LN133@sqlite3Res@2
$LN124@sqlite3Res@2:
	push	esi
	push	ebx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN133@sqlite3Res@2:
; Line 54586
	mov	esi, DWORD PTR tv644[esp+80]
	mov	DWORD PTR [esi-10], edi
; Line 54587
	movzx	eax, BYTE PTR [ebp]
	cmp	eax, 110				; 0000006eH
	jne	SHORT $LN85@sqlite3Res@2
	mov	eax, DWORD PTR [ebp+56]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	call	_sqlite3ExprAffinity
	jmp	SHORT $LN86@sqlite3Res@2
$LN85@sqlite3Res@2:
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN84@sqlite3Res@2
	lea	edx, DWORD PTR [ebp+20]
	call	_sqlite3AffinityType
	jmp	SHORT $LN86@sqlite3Res@2
$LN84@sqlite3Res@2:
	mov	al, BYTE PTR [ebp+1]
$LN86@sqlite3Res@2:
	mov	BYTE PTR [esi], al
; Line 54588
	mov	eax, DWORD PTR _pParse$[esp+76]
	push	eax
	mov	ecx, ebp
	call	_sqlite3ExprCollSeq
	add	esp, 4
; Line 54589
	test	eax, eax
	je	SHORT $LN15@sqlite3Res@2
; Line 54590
	mov	ebp, DWORD PTR [eax]
	test	ebp, ebp
	jne	SHORT $LN89@sqlite3Res@2
	xor	edi, edi
	jmp	SHORT $LN90@sqlite3Res@2
$LN89@sqlite3Res@2:
	mov	eax, ebp
	lea	edx, DWORD PTR [eax+1]
$LL128@sqlite3Res@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL128@sqlite3Res@2
	sub	eax, edx
	lea	esi, DWORD PTR [eax+1]
	xor	edi, edi
	test	esi, esi
	jle	SHORT $LN135@sqlite3Res@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	mov	ebx, DWORD PTR _inMutex
	je	SHORT $LN96@sqlite3Res@2
	test	ebx, ebx
	jg	SHORT $LN135@sqlite3Res@2
$LN96@sqlite3Res@2:
	push	esi
	call	_malloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN125@sqlite3Res@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN106@sqlite3Res@2
	test	ebx, ebx
	jg	SHORT $LN135@sqlite3Res@2
$LN106@sqlite3Res@2:
	add	ebx, 1
	mov	DWORD PTR _inMutex, ebx
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN135@sqlite3Res@2
$LN125@sqlite3Res@2:
	push	esi
	push	ebp
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN135@sqlite3Res@2:
	mov	esi, DWORD PTR tv644[esp+80]
$LN90@sqlite3Res@2:
	mov	DWORD PTR [esi-6], edi
$LN15@sqlite3Res@2:
; Line 54532
	mov	eax, DWORD PTR _i$[esp+80]
	mov	ecx, DWORD PTR _p$141722[esp+80]
	add	DWORD PTR tv650[esp+80], 12		; 0000000cH
	add	eax, 1
	add	esi, 20					; 00000014H
	cmp	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _i$[esp+80], eax
	mov	DWORD PTR tv644[esp+80], esi
; Line 54560
	mov	ebp, ecx
	jl	$LL131@sqlite3Res@2
$LN14@sqlite3Res@2:
	pop	ebx
; Line 54593
	mov	DWORD PTR [ebp+12], -1
; Line 54594
	mov	eax, ebp
	pop	ebp
	pop	edi
	pop	esi
; Line 54595
	add	esp, 64					; 00000040H
	ret	0
$LN118@sqlite3Res@2:
; Line 54561
	test	esi, esi
	je	SHORT $LN56@sqlite3Res@2
	push	esi
	call	_free
	add	esp, 4
$LN56@sqlite3Res@2:
; Line 54562
	push	ebp
	call	_sqlite3DeleteTable
	add	esp, 4
	pop	ebx
	pop	ebp
	pop	edi
; Line 54563
	xor	eax, eax
	pop	esi
; Line 54595
	add	esp, 64					; 00000040H
	ret	0
_sqlite3ResultSetOfSelect ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_finalize
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_sqlite3_finalize PROC					; COMDAT
; Line 67141
	push	esi
; Line 67143
	mov	esi, DWORD PTR _pStmt$[esp]
	test	esi, esi
	jne	SHORT $LN2@sqlite3_fi
; Line 67144
	xor	eax, eax
	pop	esi
; Line 67149
	ret	0
$LN2@sqlite3_fi:
; Line 67146
	mov	eax, DWORD PTR [esi+76]
	push	edi
	xor	edi, edi
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN7@sqlite3_fi
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN7@sqlite3_fi
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN5@sqlite3_fi
	lea	eax, DWORD PTR [edi+21]
	pop	edi
	pop	esi
; Line 67149
	ret	0
; Line 67146
$LN7@sqlite3_fi:
	mov	edi, esi
	call	_sqlite3VdbeReset
	mov	edi, eax
$LN5@sqlite3_fi:
	call	_sqlite3VdbeDelete
; Line 67148
	mov	eax, edi
	pop	edi
	pop	esi
; Line 67149
	ret	0
_sqlite3_finalize ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_reset
_TEXT	SEGMENT
_pStmt$ = 8						; size = 4
_sqlite3_reset PROC					; COMDAT
; Line 67159
	push	edi
; Line 67161
	mov	edi, DWORD PTR _pStmt$[esp]
	test	edi, edi
	jne	SHORT $LN2@sqlite3_re@5
; Line 67162
	xor	eax, eax
	pop	edi
; Line 67169
	ret	0
$LN2@sqlite3_re@5:
	push	esi
; Line 67164
	call	_sqlite3VdbeReset
; Line 67165
	push	0
	push	0
	mov	esi, eax
	push	0
	push	-1
	mov	eax, edi
	call	_sqlite3VdbeMakeReady
	add	esp, 16					; 00000010H
; Line 67168
	mov	eax, esi
	pop	esi
	pop	edi
; Line 67169
	ret	0
_sqlite3_reset ENDP
_TEXT	ENDS
PUBLIC	_sqlite3_blob_close
; Function compile flags: /Ogtpy
;	COMDAT _sqlite3_blob_close
_TEXT	SEGMENT
_pBlob$ = 8						; size = 4
_sqlite3_blob_close PROC				; COMDAT
; Line 38815
	mov	eax, DWORD PTR _pBlob$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+16]
; Line 38816
	push	eax
	call	_free
	add	esp, 4
; Line 38817
	test	esi, esi
	jne	SHORT $LN9@sqlite3_bl
	xor	eax, eax
	pop	esi
; Line 38818
	ret	0
; Line 38817
$LN9@sqlite3_bl:
	mov	eax, DWORD PTR [esi+76]
	push	edi
	xor	edi, edi
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN14@sqlite3_bl
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN14@sqlite3_bl
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN12@sqlite3_bl
	lea	eax, DWORD PTR [edi+21]
	pop	edi
	pop	esi
; Line 38818
	ret	0
; Line 38817
$LN14@sqlite3_bl:
	mov	edi, esi
	call	_sqlite3VdbeReset
	mov	edi, eax
$LN12@sqlite3_bl:
	call	_sqlite3VdbeDelete
	mov	eax, edi
	pop	edi
	pop	esi
; Line 38818
	ret	0
_sqlite3_blob_close ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DI@IAIBDBA@AUTOINCREMENT?5is?5only?5allowed?5on@ ; `string'
PUBLIC	??_C@_0CJ@LEOOFHMA@table?5?$CC?$CFs?$CC?5has?5more?5than?5one?5pri@ ; `string'
;	COMDAT ??_C@_0DI@IAIBDBA@AUTOINCREMENT?5is?5only?5allowed?5on@
CONST	SEGMENT
??_C@_0DI@IAIBDBA@AUTOINCREMENT?5is?5only?5allowed?5on@ DB 'AUTOINCREMENT'
	DB	' is only allowed on an INTEGER PRIMARY KEY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LEOOFHMA@table?5?$CC?$CFs?$CC?5has?5more?5than?5one?5pri@
CONST	SEGMENT
??_C@_0CJ@LEOOFHMA@table?5?$CC?$CFs?$CC?5has?5more?5than?5one?5pri@ DB 't'
	DB	'able "%s" has more than one primary key', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3AddPrimaryKey
_TEXT	SEGMENT
tv339 = -8						; size = 4
_i$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pList$ = 12						; size = 4
_onError$ = 16						; size = 4
_autoInc$ = 20						; size = 4
_sortOrder$ = 24					; size = 4
_sqlite3AddPrimaryKey PROC				; COMDAT
; Line 44321
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 44322
	mov	edi, DWORD PTR _pParse$[esp+20]
	mov	ebp, DWORD PTR [edi+164]
; Line 44325
	xor	eax, eax
	or	esi, -1
	cmp	ebp, eax
	je	$LN29@sqlite3Add@7
	cmp	BYTE PTR [edi+188], al
	jne	$LN29@sqlite3Add@7
; Line 44326
	cmp	BYTE PTR [ebp+54], al
	je	SHORT $LN17@sqlite3Add@7
; Line 44328
	mov	eax, DWORD PTR [ebp]
	push	eax
	push	OFFSET ??_C@_0CJ@LEOOFHMA@table?5?$CC?$CFs?$CC?5has?5more?5than?5one?5pri@
	call	_sqlite3ErrorMsg
; Line 44329
	mov	ebx, DWORD PTR _pList$[esp+28]
	add	esp, 8
; Line 44367
	call	_sqlite3ExprListDelete
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44369
	add	esp, 8
	ret	0
$LN17@sqlite3Add@7:
; Line 44332
	mov	ebx, DWORD PTR _pList$[esp+20]
	cmp	ebx, eax
	mov	BYTE PTR [ebp+54], 1
	jne	SHORT $LN16@sqlite3Add@7
; Line 44333
	mov	esi, DWORD PTR [ebp+4]
; Line 44334
	mov	edx, DWORD PTR [ebp+8]
	sub	esi, 1
	lea	ecx, DWORD PTR [esi+esi*4]
	mov	BYTE PTR [edx+ecx*4+17], 1
; Line 44335
	jmp	SHORT $LN6@sqlite3Add@7
$LN16@sqlite3Add@7:
; Line 44336
	cmp	DWORD PTR [ebx], eax
	mov	DWORD PTR _i$[esp+24], eax
	jle	SHORT $LN12@sqlite3Add@7
	mov	DWORD PTR tv339[esp+24], eax
	npad	4
$LL32@sqlite3Add@7:
; Line 44337
	xor	esi, esi
	cmp	DWORD PTR [ebp+4], esi
	jle	SHORT $LN24@sqlite3Add@7
	mov	eax, DWORD PTR [ebx+12]
	mov	ecx, DWORD PTR tv339[esp+24]
	mov	ebx, DWORD PTR [eax+ecx+4]
	mov	edi, DWORD PTR [ebp+8]
$LL11@sqlite3Add@7:
; Line 44338
	mov	edx, DWORD PTR [edi]
	mov	ecx, ebx
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN27@sqlite3Add@7
	add	esi, 1
	add	edi, 20					; 00000014H
	cmp	esi, DWORD PTR [ebp+4]
	jl	SHORT $LL11@sqlite3Add@7
$LN27@sqlite3Add@7:
; Line 44337
	mov	edi, DWORD PTR _pParse$[esp+20]
	mov	ebx, DWORD PTR _pList$[esp+20]
$LN24@sqlite3Add@7:
; Line 44342
	cmp	esi, DWORD PTR [ebp+4]
	jge	SHORT $LN13@sqlite3Add@7
; Line 44343
	mov	eax, DWORD PTR [ebp+8]
	lea	edx, DWORD PTR [esi+esi*4]
	mov	BYTE PTR [eax+edx*4+17], 1
$LN13@sqlite3Add@7:
	mov	eax, DWORD PTR _i$[esp+24]
	add	DWORD PTR tv339[esp+24], 12		; 0000000cH
	add	eax, 1
	cmp	eax, DWORD PTR [ebx]
	mov	DWORD PTR _i$[esp+24], eax
	jl	SHORT $LL32@sqlite3Add@7
$LN12@sqlite3Add@7:
; Line 44346
	cmp	DWORD PTR [ebx], 1
; Line 44348
	jg	SHORT $LN30@sqlite3Add@7
$LN6@sqlite3Add@7:
	test	esi, esi
	jl	SHORT $LN30@sqlite3Add@7
	cmp	esi, DWORD PTR [ebp+4]
	jge	SHORT $LN30@sqlite3Add@7
; Line 44349
	mov	edx, DWORD PTR [ebp+8]
	lea	ecx, DWORD PTR [esi+esi*4]
	mov	ecx, DWORD PTR [edx+ecx*4+8]
; Line 44352
	test	ecx, ecx
	je	SHORT $LN30@sqlite3Add@7
	mov	edx, OFFSET ??_C@_07EHCIHKNF@INTEGER?$AA@
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN30@sqlite3Add@7
	cmp	DWORD PTR _sortOrder$[esp+20], eax
	jne	SHORT $LN30@sqlite3Add@7
; Line 44354
	mov	al, BYTE PTR _onError$[esp+20]
; Line 44355
	mov	cl, BYTE PTR _autoInc$[esp+20]
	mov	DWORD PTR [ebp+12], esi
	mov	BYTE PTR [ebp+55], al
	mov	BYTE PTR [ebp+56], cl
; Line 44367
	call	_sqlite3ExprListDelete
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44369
	add	esp, 8
	ret	0
$LN30@sqlite3Add@7:
; Line 44356
	cmp	DWORD PTR _autoInc$[esp+20], 0
	je	SHORT $LN2@sqlite3Add@7
; Line 44359
	push	OFFSET ??_C@_0DI@IAIBDBA@AUTOINCREMENT?5is?5only?5allowed?5on@
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 44367
	call	_sqlite3ExprListDelete
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44369
	add	esp, 8
	ret	0
$LN2@sqlite3Add@7:
; Line 44362
	mov	edx, DWORD PTR _sortOrder$[esp+20]
	mov	eax, DWORD PTR _onError$[esp+20]
	push	0
	push	edx
	push	0
	push	eax
	push	ebx
	push	0
	push	0
	push	0
	xor	ecx, ecx
	mov	edx, edi
	call	_sqlite3CreateIndex
	add	esp, 32					; 00000020H
; Line 44363
	mov	DWORD PTR _pList$[esp+20], 0
$LN29@sqlite3Add@7:
	mov	ebx, DWORD PTR _pList$[esp+20]
$primary_key_exit$94048:
; Line 44367
	call	_sqlite3ExprListDelete
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44369
	add	esp, 8
	ret	0
_sqlite3AddPrimaryKey ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@LAHPKCHN@tbl_name?$DN?8?$CFq?8?$AA@	; `string'
PUBLIC	??_C@_0CK@BLJIJAMD@CREATE?5TABLE?5?$CFQ?4sqlite_sequence?$CI@ ; `string'
PUBLIC	??_C@_0FF@EMOBCNNL@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8?$CFs?8?0?5name@ ; `string'
PUBLIC	??_C@_0P@BPBAOJCC@CREATE?5?$CFs?5?$CF?4?$CKs?$AA@ ; `string'
PUBLIC	??_C@_04OLDJKBIG@VIEW?$AA@			; `string'
PUBLIC	??_C@_04CHADEDPO@view?$AA@			; `string'
PUBLIC	??_C@_05HJCCDKBG@TABLE?$AA@			; `string'
PUBLIC	??_C@_05LCLENNFI@table?$AA@			; `string'
;	COMDAT ??_C@_0O@LAHPKCHN@tbl_name?$DN?8?$CFq?8?$AA@
CONST	SEGMENT
??_C@_0O@LAHPKCHN@tbl_name?$DN?8?$CFq?8?$AA@ DB 'tbl_name=''%q''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BLJIJAMD@CREATE?5TABLE?5?$CFQ?4sqlite_sequence?$CI@
CONST	SEGMENT
??_C@_0CK@BLJIJAMD@CREATE?5TABLE?5?$CFQ?4sqlite_sequence?$CI@ DB 'CREATE '
	DB	'TABLE %Q.sqlite_sequence(name,seq)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@EMOBCNNL@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8?$CFs?8?0?5name@
CONST	SEGMENT
??_C@_0FF@EMOBCNNL@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8?$CFs?8?0?5name@ DB 'U'
	DB	'PDATE %Q.%s SET type=''%s'', name=%Q, tbl_name=%Q, rootpage=#'
	DB	'0, sql=%Q WHERE rowid=#1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BPBAOJCC@CREATE?5?$CFs?5?$CF?4?$CKs?$AA@
CONST	SEGMENT
??_C@_0P@BPBAOJCC@CREATE?5?$CFs?5?$CF?4?$CKs?$AA@ DB 'CREATE %s %.*s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04OLDJKBIG@VIEW?$AA@
CONST	SEGMENT
??_C@_04OLDJKBIG@VIEW?$AA@ DB 'VIEW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CHADEDPO@view?$AA@
CONST	SEGMENT
??_C@_04CHADEDPO@view?$AA@ DB 'view', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HJCCDKBG@TABLE?$AA@
CONST	SEGMENT
??_C@_05HJCCDKBG@TABLE?$AA@ DB 'TABLE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCLENNFI@table?$AA@
CONST	SEGMENT
??_C@_05LCLENNFI@table?$AA@ DB 'table', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3EndTable
_TEXT	SEGMENT
_db$ = -120						; size = 4
_v$142012 = -116					; size = 4
_zStmt$94209 = -112					; size = 4
_iDb$ = -108						; size = 4
_zType$94207 = -104					; size = 4
tv455 = -100						; size = 4
_p$ = -96						; size = 4
_sNC$94201 = -92					; size = 36
_sSrc$94200 = -56					; size = 56
_pParse$ = 8						; size = 4
_pCons$ = 12						; size = 4
_pEnd$ = 16						; size = 4
_pSelect$ = 20						; size = 4
_sqlite3EndTable PROC					; COMDAT
; Line 44595
	sub	esp, 120				; 00000078H
; Line 44600
	cmp	DWORD PTR _pEnd$[esp+116], 0
	push	edi
	mov	edi, DWORD PTR _pParse$[esp+120]
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR _db$[esp+124], ecx
	jne	SHORT $LN41@sqlite3End
	cmp	DWORD PTR _pSelect$[esp+120], 0
	je	$LN24@sqlite3End
$LN41@sqlite3End:
	cmp	DWORD PTR [edi+24], 0
	jne	$LN24@sqlite3End
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN25@sqlite3End
	cmp	DWORD PTR _inMutex, 0
	jg	$LN24@sqlite3End
$LN25@sqlite3End:
	push	ebp
; Line 44603
	mov	ebp, DWORD PTR [edi+164]
; Line 44604
	test	ebp, ebp
	mov	DWORD PTR _p$[esp+128], ebp
	je	$LN42@sqlite3End
	push	ebx
	push	esi
; Line 44608
	mov	esi, DWORD PTR [ebp+76]
	call	_sqlite3SchemaToIndex
; Line 44613
	mov	ebx, DWORD PTR [ebp+44]
	test	ebx, ebx
	mov	esi, eax
	mov	DWORD PTR _iDb$[esp+136], esi
	je	SHORT $LN20@sqlite3End
; Line 44617
	xor	eax, eax
; Line 44618
	push	56					; 00000038H
	push	eax
	mov	DWORD PTR _sNC$94201[esp+144], eax
	mov	DWORD PTR _sNC$94201[esp+148], eax
	mov	DWORD PTR _sNC$94201[esp+152], eax
	mov	DWORD PTR _sNC$94201[esp+156], eax
	mov	DWORD PTR _sNC$94201[esp+160], eax
	mov	DWORD PTR _sNC$94201[esp+164], eax
	mov	DWORD PTR _sNC$94201[esp+168], eax
	mov	DWORD PTR _sNC$94201[esp+172], eax
	mov	DWORD PTR _sNC$94201[esp+176], eax
	lea	eax, DWORD PTR _sSrc$94200[esp+144]
	push	eax
	call	_memset
; Line 44620
	mov	ecx, DWORD PTR [ebp]
	mov	eax, 1
; Line 44624
	lea	edx, DWORD PTR _sSrc$94200[esp+148]
	add	esp, 12					; 0000000cH
; Line 44626
	lea	esi, DWORD PTR _sNC$94201[esp+136]
	mov	WORD PTR _sSrc$94200[esp+136], ax
	mov	DWORD PTR _sSrc$94200[esp+148], ecx
	mov	DWORD PTR _sSrc$94200[esp+156], ebp
	mov	DWORD PTR _sSrc$94200[esp+168], -1
	mov	DWORD PTR _sNC$94201[esp+136], edi
	mov	DWORD PTR _sNC$94201[esp+140], edx
	mov	BYTE PTR _sNC$94201[esp+158], al
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN43@sqlite3End
	mov	esi, DWORD PTR _iDb$[esp+136]
$LN20@sqlite3End:
; Line 44638
	mov	eax, DWORD PTR _db$[esp+136]
	cmp	BYTE PTR [eax+68], 0
	je	SHORT $LN46@sqlite3End
; Line 44639
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [ebp+20], ecx
; Line 44649
	cmp	BYTE PTR [eax+68], 0
	jne	$LN48@sqlite3End
$LN46@sqlite3End:
; Line 44656
	mov	ebx, DWORD PTR [edi+12]
	test	ebx, ebx
	mov	DWORD PTR _v$142012[esp+136], ebx
	jne	SHORT $LN37@sqlite3End
	mov	edi, DWORD PTR [edi]
	call	_sqlite3VdbeCreate
; Line 44657
	test	eax, eax
	mov	edx, DWORD PTR _pParse$[esp+132]
	mov	DWORD PTR [edx+12], eax
	mov	DWORD PTR _v$142012[esp+136], eax
	je	$LN43@sqlite3End
	mov	esi, DWORD PTR _iDb$[esp+136]
	mov	edi, edx
	mov	ebx, eax
$LN37@sqlite3End:
; Line 44659
	push	0
	push	0
	push	30					; 0000001eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 44665
	cmp	DWORD PTR [ebp+24], 0
	jne	SHORT $LN16@sqlite3End
; Line 44667
	mov	DWORD PTR _zType$94207[esp+136], OFFSET ??_C@_05LCLENNFI@table?$AA@
; Line 44668
	mov	edx, OFFSET ??_C@_05HJCCDKBG@TABLE?$AA@
; Line 44670
	jmp	SHORT $LN15@sqlite3End
$LN16@sqlite3End:
; Line 44672
	mov	DWORD PTR _zType$94207[esp+136], OFFSET ??_C@_04CHADEDPO@view?$AA@
; Line 44673
	mov	edx, OFFSET ??_C@_04OLDJKBIG@VIEW?$AA@
$LN15@sqlite3End:
; Line 44690
	cmp	DWORD PTR _pSelect$[esp+132], 0
	je	$LN11@sqlite3End
; Line 44692
	push	0
	push	0
	push	94					; 0000005eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 44693
	push	0
	push	esi
	push	47					; 0000002fH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 44694
	push	0
	push	1
	push	9
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 44696
	mov	eax, DWORD PTR _pSelect$[esp+168]
	push	0
	push	0
	push	0
	push	0
	push	1
	push	7
	push	eax
	push	edi
	mov	DWORD PTR [edi+28], 2
	call	_sqlite3Select
	add	esp, 68					; 00000044H
; Line 44697
	push	0
	push	1
	push	30					; 0000001eH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 44698
	xor	ebx, ebx
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edi+24], ebx
	jne	SHORT $LN13@sqlite3End
; Line 44699
	mov	ecx, DWORD PTR _pSelect$[esp+132]
	push	ecx
	push	ebx
	push	edi
	call	_sqlite3ResultSetOfSelect
	add	esp, 12					; 0000000cH
; Line 44700
	cmp	eax, ebx
	je	$LN43@sqlite3End
; Line 44702
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ebp+4], edx
; Line 44703
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ebp+8], ecx
; Line 44706
	push	eax
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	call	_sqlite3DeleteTable
	add	esp, 4
$LN13@sqlite3End:
; Line 44712
	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ebp+76]
	xor	edx, edx
	cmp	ecx, DWORD PTR [eax+44]
	sete	dl
	push	edx
	push	ebp
	call	_createTableStmt
	add	esp, 8
; Line 44713
	jmp	SHORT $LN49@sqlite3End
$LN11@sqlite3End:
; Line 44714
	mov	ecx, DWORD PTR [edi+140]
	mov	eax, DWORD PTR _pEnd$[esp+132]
	mov	eax, DWORD PTR [eax]
	sub	eax, ecx
; Line 44715
	push	ecx
	add	eax, 1
	push	eax
	push	edx
	push	OFFSET ??_C@_0P@BPBAOJCC@CREATE?5?$CFs?5?$CF?4?$CKs?$AA@
	call	_sqlite3MPrintf
	add	esp, 16					; 00000010H
$LN49@sqlite3End:
; Line 44733
	cmp	esi, 1
	mov	DWORD PTR _zStmt$94209[esp+136], eax
	mov	edx, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN29@sqlite3End
	mov	edx, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN29@sqlite3End:
	mov	ecx, DWORD PTR [ebp]
	mov	ebx, DWORD PTR _zStmt$94209[esp+136]
	push	ebx
	push	ecx
	push	ecx
	mov	ecx, DWORD PTR _zType$94207[esp+148]
	push	ecx
	push	edx
	mov	edx, DWORD PTR _db$[esp+156]
	mov	ecx, DWORD PTR [edx+4]
	lea	eax, DWORD PTR [esi+esi*2]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	push	OFFSET ??_C@_0FF@EMOBCNNL@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8?$CFs?8?0?5name@
	mov	ebx, edi
	mov	DWORD PTR tv455[esp+164], eax
	call	_sqlite3NestedParse
; Line 44734
	mov	eax, DWORD PTR _zStmt$94209[esp+164]
	push	eax
	call	_sqlite3FreeX
; Line 44735
	mov	ebx, DWORD PTR _db$[esp+168]
	mov	edi, DWORD PTR _v$142012[esp+168]
	add	esp, 32					; 00000020H
	mov	ecx, ebx
	call	_sqlite3ChangeCookie
; Line 44741
	cmp	BYTE PTR [ebp+56], 0
	je	SHORT $LN8@sqlite3End
; Line 44742
	mov	eax, DWORD PTR [ebx+4]
	add	eax, DWORD PTR tv455[esp+136]
; Line 44743
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+116], 0
	jne	SHORT $LN8@sqlite3End
; Line 44747
	mov	edx, DWORD PTR [eax]
	mov	ebx, DWORD PTR _pParse$[esp+132]
	push	edx
	push	OFFSET ??_C@_0CK@BLJIJAMD@CREATE?5TABLE?5?$CFQ?4sqlite_sequence?$CI@
	call	_sqlite3NestedParse
	add	esp, 8
$LN8@sqlite3End:
; Line 44754
	mov	eax, DWORD PTR [ebp]
	push	-1
	push	eax
	push	OFFSET ??_C@_0O@LAHPKCHN@tbl_name?$DN?8?$CFq?8?$AA@
	call	_sqlite3MPrintf
	mov	ecx, DWORD PTR _iDb$[esp+148]
	mov	edi, DWORD PTR _v$142012[esp+148]
	add	esp, 8
	push	eax
	xor	eax, eax
	lea	edx, DWORD PTR [eax+28]
	call	_sqlite3VdbeOp3
	mov	eax, DWORD PTR _db$[esp+144]
	mov	edi, DWORD PTR _pParse$[esp+140]
	add	esp, 8
; Line 44760
	cmp	BYTE PTR [eax+68], 0
	je	$LN43@sqlite3End
$LN48@sqlite3End:
	cmp	DWORD PTR [edi+24], 0
	jne	$LN43@sqlite3End
; Line 44764
	mov	ecx, DWORD PTR [ebp]
	mov	esi, DWORD PTR [ebp+76]
	mov	eax, ecx
	lea	edi, DWORD PTR [eax+1]
	npad	2
$LL38@sqlite3End:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL38@sqlite3End
	sub	eax, edi
	add	eax, 1
	push	ebp
	push	eax
	push	ecx
	lea	eax, DWORD PTR [esi+4]
	call	_sqlite3HashInsert
	add	esp, 12					; 0000000cH
; Line 44765
	test	eax, eax
	jne	$LN43@sqlite3End
; Line 44770
	mov	ebp, DWORD PTR [ebp+36]
	test	ebp, ebp
	je	SHORT $LN3@sqlite3End
	add	esi, 88					; 00000058H
	npad	2
$LL40@sqlite3End:
; Line 44771
	mov	ebx, DWORD PTR [ebp+8]
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL39@sqlite3End:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL39@sqlite3End
	sub	eax, edx
	lea	edi, DWORD PTR [eax+1]
; Line 44772
	call	_sqlite3HashFind
; Line 44773
	mov	ecx, DWORD PTR [ebp+8]
	push	ebp
	mov	DWORD PTR [ebp+12], eax
	push	edi
	push	ecx
	mov	eax, esi
	call	_sqlite3HashInsert
	mov	ebp, DWORD PTR [ebp+4]
	add	esp, 12					; 0000000cH
	test	ebp, ebp
	jne	SHORT $LL40@sqlite3End
$LN3@sqlite3End:
; Line 44776
	mov	ecx, DWORD PTR _pParse$[esp+132]
; Line 44777
	mov	eax, DWORD PTR _db$[esp+136]
; Line 44781
	mov	esi, DWORD PTR _p$[esp+136]
	mov	DWORD PTR [ecx+164], 0
	add	DWORD PTR [eax+24], 1
	or	DWORD PTR [eax+8], 16			; 00000010H
	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN43@sqlite3End
; Line 44785
	mov	edx, DWORD PTR _pCons$[esp+132]
	cmp	DWORD PTR [edx], 0
	mov	ecx, DWORD PTR [ecx+140]
	jne	SHORT $LN1@sqlite3End
; Line 44786
	mov	eax, DWORD PTR _pEnd$[esp+132]
	mov	DWORD PTR _pCons$[esp+132], eax
$LN1@sqlite3End:
; Line 44788
	mov	edx, DWORD PTR _pCons$[esp+132]
	mov	edx, DWORD PTR [edx]
	sub	edx, ecx
; Line 44789
	call	_sqlite3Utf8CharLen
	add	eax, 13					; 0000000dH
	mov	DWORD PTR [esi+48], eax
$LN43@sqlite3End:
	pop	esi
	pop	ebx
$LN42@sqlite3End:
	pop	ebp
$LN24@sqlite3End:
	pop	edi
; Line 44793
	add	esp, 120				; 00000078H
	ret	0
_sqlite3EndTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@BLAOKNKN@view?5?$CFs?5is?5circularly?5defined?$AA@ ; `string'
;	COMDAT ??_C@_0BO@BLAOKNKN@view?5?$CFs?5is?5circularly?5defined?$AA@
CONST	SEGMENT
??_C@_0BO@BLAOKNKN@view?5?$CFs?5is?5circularly?5defined?$AA@ DB 'view %s '
	DB	'is circularly defined', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3ViewGetColumnNames
_TEXT	SEGMENT
_nErr$ = -4						; size = 4
_pParse$ = 8						; size = 4
_pTable$ = 12						; size = 4
_sqlite3ViewGetColumnNames PROC				; COMDAT
; Line 44876
	push	ecx
	push	ebx
	push	ebp
; Line 44885
	mov	ebp, DWORD PTR _pTable$[esp+8]
	push	esi
	mov	esi, DWORD PTR _pParse$[esp+12]
	mov	eax, ebp
	mov	ebx, esi
	mov	DWORD PTR _nErr$[esp+16], 0
	call	_sqlite3VtabCallConnect
	test	eax, eax
	je	SHORT $LN8@sqlite3Vie
	pop	esi
	pop	ebp
; Line 44886
	mov	eax, 1
	pop	ebx
; Line 44946
	pop	ecx
	ret	0
$LN8@sqlite3Vie:
; Line 44888
	cmp	BYTE PTR [ebp+57], 0
	je	SHORT $LN7@sqlite3Vie
$LN12@sqlite3Vie:
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 44946
	pop	ecx
	ret	0
$LN7@sqlite3Vie:
; Line 44895
	mov	eax, DWORD PTR [ebp+4]
	test	eax, eax
	jg	SHORT $LN12@sqlite3Vie
	push	edi
; Line 44907
	jge	SHORT $LN5@sqlite3Vie
; Line 44908
	mov	eax, DWORD PTR [ebp]
	push	eax
	push	OFFSET ??_C@_0BO@BLAOKNKN@view?5?$CFs?5is?5circularly?5defined?$AA@
	mov	edi, esi
	call	_sqlite3ErrorMsg
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebp
; Line 44909
	mov	eax, 1
	pop	ebx
; Line 44946
	pop	ecx
	ret	0
$LN5@sqlite3Vie:
; Line 44921
	mov	ecx, DWORD PTR [ebp+24]
	push	ecx
	call	_sqlite3SelectDup
	mov	ebx, eax
	add	esp, 4
; Line 44922
	test	ebx, ebx
	je	SHORT $LN4@sqlite3Vie
; Line 44924
	mov	edx, DWORD PTR [ebx+12]
	mov	edi, DWORD PTR [esi+28]
	push	edx
	push	esi
	call	_sqlite3SrcListAssignCursors
; Line 44926
	push	ebx
	push	0
	push	esi
	mov	DWORD PTR [ebp+4], -1
	call	_sqlite3ResultSetOfSelect
; Line 44928
	xor	ecx, ecx
	add	esp, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR [esi+28], edi
	je	SHORT $LN3@sqlite3Vie
; Line 44930
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ebp+4], edx
; Line 44931
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ebp+8], edx
; Line 44934
	push	eax
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	call	_sqlite3DeleteTable
; Line 44935
	mov	ebp, DWORD PTR [ebp+76]
	or	WORD PTR [ebp+122], 2
	add	esp, 4
; Line 44940
	mov	esi, ebx
	call	_sqlite3SelectDelete
; Line 44945
	mov	eax, DWORD PTR _nErr$[esp+20]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44946
	pop	ecx
	ret	0
$LN3@sqlite3Vie:
; Line 44940
	mov	esi, ebx
	mov	DWORD PTR [ebp+4], ecx
	mov	DWORD PTR _nErr$[esp+20], 1
	call	_sqlite3SelectDelete
; Line 44945
	mov	eax, DWORD PTR _nErr$[esp+20]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44946
	pop	ecx
	ret	0
$LN4@sqlite3Vie:
	pop	edi
	pop	esi
; Line 44942
	mov	DWORD PTR _nErr$[esp+12], 1
; Line 44945
	mov	eax, DWORD PTR _nErr$[esp+12]
	pop	ebp
	pop	ebx
; Line 44946
	pop	ecx
	ret	0
_sqlite3ViewGetColumnNames ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JEGMLIGC@table?5?$CFs?5may?5not?5be?5dropped?$AA@ ; `string'
PUBLIC	??_C@_0DI@FOLLFOLB@DELETE?5FROM?5?$CFQ?4?$CFs?5WHERE?5tbl_name@ ; `string'
PUBLIC	??_C@_0CN@DIEJHGCJ@DELETE?5FROM?5?$CFs?4sqlite_sequence?5W@ ; `string'
PUBLIC	??_C@_0CA@FJIHAAAA@use?5DROP?5VIEW?5to?5delete?5view?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CC@HNNEDPB@use?5DROP?5TABLE?5to?5delete?5table?5?$CF@ ; `string'
;	COMDAT ??_C@_0BM@JEGMLIGC@table?5?$CFs?5may?5not?5be?5dropped?$AA@
CONST	SEGMENT
??_C@_0BM@JEGMLIGC@table?5?$CFs?5may?5not?5be?5dropped?$AA@ DB 'table %s '
	DB	'may not be dropped', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FOLLFOLB@DELETE?5FROM?5?$CFQ?4?$CFs?5WHERE?5tbl_name@
CONST	SEGMENT
??_C@_0DI@FOLLFOLB@DELETE?5FROM?5?$CFQ?4?$CFs?5WHERE?5tbl_name@ DB 'DELET'
	DB	'E FROM %Q.%s WHERE tbl_name=%Q and type!=''trigger''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DIEJHGCJ@DELETE?5FROM?5?$CFs?4sqlite_sequence?5W@
CONST	SEGMENT
??_C@_0CN@DIEJHGCJ@DELETE?5FROM?5?$CFs?4sqlite_sequence?5W@ DB 'DELETE FR'
	DB	'OM %s.sqlite_sequence WHERE name=%Q', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FJIHAAAA@use?5DROP?5VIEW?5to?5delete?5view?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0CA@FJIHAAAA@use?5DROP?5VIEW?5to?5delete?5view?5?$CFs?$AA@ DB 'use '
	DB	'DROP VIEW to delete view %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HNNEDPB@use?5DROP?5TABLE?5to?5delete?5table?5?$CF@
CONST	SEGMENT
??_C@_0CC@HNNEDPB@use?5DROP?5TABLE?5to?5delete?5table?5?$CF@ DB 'use DROP'
	DB	' TABLE to delete table %s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3DropTable
_TEXT	SEGMENT
_db$ = -16						; size = 4
_iDb$ = -12						; size = 4
_pDb$94417 = -8						; size = 4
_zArg2$94395 = -8					; size = 4
_v$ = -4						; size = 4
_zDb$94394 = -4						; size = 4
_pName$ = 8						; size = 4
_isView$ = 12						; size = 4
_noErr$ = 16						; size = 4
_sqlite3DropTable PROC					; COMDAT
; _pParse$ = eax
; Line 45094
	sub	esp, 16					; 00000010H
	push	ebx
	mov	ebx, eax
; Line 45100
	cmp	DWORD PTR [ebx+24], 0
	push	edi
	mov	edi, DWORD PTR [ebx]
	mov	DWORD PTR _db$[esp+24], edi
	jne	$exit_drop_table$94387
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN28@sqlite3Dro@4
	cmp	DWORD PTR _inMutex, 0
	jg	$exit_drop_table$94387
$LN28@sqlite3Dro@4:
; Line 45104
	mov	eax, DWORD PTR _pName$[esp+20]
	push	ebp
	push	esi
	mov	esi, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	ecx, ebx
	call	_sqlite3LocateTable
	mov	ebp, eax
; Line 45106
	xor	esi, esi
	cmp	ebp, esi
	jne	SHORT $LN26@sqlite3Dro@4
; Line 45107
	cmp	DWORD PTR _noErr$[esp+28], esi
	je	$LN51@sqlite3Dro@4
; Line 45108
	mov	eax, DWORD PTR [ebx+8]
	cmp	eax, esi
	je	SHORT $LN42@sqlite3Dro@4
	push	eax
	call	_free
	add	esp, 4
$LN42@sqlite3Dro@4:
; Line 45241
	mov	edx, DWORD PTR _pName$[esp+28]
	mov	DWORD PTR [ebx+8], esi
	mov	DWORD PTR [ebx+24], esi
	pop	esi
	pop	ebp
	push	edx
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	edi
	pop	ebx
; Line 45242
	add	esp, 16					; 00000010H
	ret	0
$LN26@sqlite3Dro@4:
; Line 45112
	mov	esi, DWORD PTR [ebp+76]
	mov	ecx, edi
	call	_sqlite3SchemaToIndex
	mov	esi, eax
; Line 45117
	cmp	esi, 1
	mov	DWORD PTR _iDb$[esp+32], esi
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN32@sqlite3Dro@4
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN32@sqlite3Dro@4:
; Line 45118
	mov	ecx, DWORD PTR _db$[esp+32]
	mov	edx, DWORD PTR [ecx+4]
	lea	edi, DWORD PTR [esi+esi*2]
	add	edi, edi
	add	edi, edi
	add	edi, edi
	mov	ecx, DWORD PTR [edi+edx]
; Line 45120
	push	ecx
	push	0
	push	eax
	push	9
	mov	eax, ebx
	mov	DWORD PTR _zDb$94394[esp+48], ecx
	mov	DWORD PTR _zArg2$94395[esp+48], 0
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN51@sqlite3Dro@4
; Line 45123
	cmp	DWORD PTR _isView$[esp+28], eax
	je	SHORT $LN23@sqlite3Dro@4
; Line 45124
	cmp	esi, 1
	setne	al
	lea	eax, DWORD PTR [eax+eax+15]
; Line 45128
	jmp	SHORT $LN16@sqlite3Dro@4
$LN23@sqlite3Dro@4:
; Line 45130
	cmp	BYTE PTR [ebp+57], 0
	je	SHORT $LN19@sqlite3Dro@4
; Line 45131
	push	ebp
	push	ebx
	call	_sqlite3ViewGetColumnNames
	add	esp, 8
	test	eax, eax
	jne	$LN51@sqlite3Dro@4
; Line 45135
	mov	ecx, DWORD PTR [ebp+60]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 30					; 0000001eH
	mov	DWORD PTR _zArg2$94395[esp+32], edx
; Line 45137
	jmp	SHORT $LN16@sqlite3Dro@4
$LN19@sqlite3Dro@4:
; Line 45138
	xor	eax, eax
	cmp	esi, 1
	sete	al
	lea	eax, DWORD PTR [eax+eax+11]
$LN16@sqlite3Dro@4:
; Line 45144
	mov	esi, DWORD PTR _zDb$94394[esp+32]
	mov	ecx, DWORD PTR _zArg2$94395[esp+32]
	mov	edx, DWORD PTR [ebp]
	push	esi
	push	ecx
	push	edx
	push	eax
	mov	eax, ebx
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN51@sqlite3Dro@4
; Line 45147
	push	esi
	push	eax
	mov	eax, DWORD PTR [ebp]
	push	eax
	push	9
	mov	eax, ebx
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN51@sqlite3Dro@4
; Line 45152
	cmp	BYTE PTR [ebp+52], al
	jne	$LN11@sqlite3Dro@4
	mov	ecx, DWORD PTR _db$[esp+32]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edi+edx+20]
	cmp	ebp, DWORD PTR [eax+116]
	je	$LN11@sqlite3Dro@4
; Line 45161
	cmp	DWORD PTR _isView$[esp+28], 0
	je	SHORT $LN46@sqlite3Dro@4
	cmp	DWORD PTR [ebp+24], 0
	jne	SHORT $LN9@sqlite3Dro@4
; Line 45162
	mov	ecx, DWORD PTR [ebp]
	push	ecx
	push	OFFSET ??_C@_0CC@HNNEDPB@use?5DROP?5TABLE?5to?5delete?5table?5?$CF@
; Line 45163
	jmp	$LN53@sqlite3Dro@4
$LN46@sqlite3Dro@4:
; Line 45165
	cmp	DWORD PTR [ebp+24], 0
	je	SHORT $LN9@sqlite3Dro@4
; Line 45166
	mov	edx, DWORD PTR [ebp]
	push	edx
	push	OFFSET ??_C@_0CA@FJIHAAAA@use?5DROP?5VIEW?5to?5delete?5view?5?$CFs?$AA@
; Line 45167
	jmp	$LN53@sqlite3Dro@4
$LN9@sqlite3Dro@4:
; Line 45174
	mov	esi, ebx
	call	_sqlite3GetVdbe
; Line 45175
	test	eax, eax
	mov	DWORD PTR _v$[esp+32], eax
	je	$LN8@sqlite3Dro@4
; Line 45177
	mov	eax, DWORD PTR _db$[esp+32]
	mov	eax, DWORD PTR [eax+4]
	add	eax, edi
; Line 45178
	mov	edi, DWORD PTR _iDb$[esp+32]
	mov	DWORD PTR _pDb$94417[esp+32], eax
	push	0
	mov	eax, edi
	mov	ecx, ebx
	call	_sqlite3BeginWriteOperation
	add	esp, 4
; Line 45181
	cmp	BYTE PTR [ebp+57], 0
	je	SHORT $LN6@sqlite3Dro@4
; Line 45182
	call	_sqlite3GetVdbe
; Line 45183
	test	eax, eax
	je	SHORT $LN6@sqlite3Dro@4
; Line 45184
	push	0
	push	0
	push	129					; 00000081H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN6@sqlite3Dro@4:
; Line 45193
	mov	esi, DWORD PTR [ebp+32]
; Line 45194
	test	esi, esi
	je	SHORT $LN4@sqlite3Dro@4
	npad	6
$LL5@sqlite3Dro@4:
; Line 45197
	push	esi
	mov	eax, ebx
	call	_sqlite3DropTriggerPtr
; Line 45198
	mov	esi, DWORD PTR [esi+40]
	add	esp, 4
	test	esi, esi
	jne	SHORT $LL5@sqlite3Dro@4
$LN4@sqlite3Dro@4:
; Line 45207
	cmp	BYTE PTR [ebp+56], 0
	je	SHORT $LN48@sqlite3Dro@4
; Line 45211
	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR _pDb$94417[esp+32]
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	eax
	push	OFFSET ??_C@_0CN@DIEJHGCJ@DELETE?5FROM?5?$CFs?4sqlite_sequence?5W@
	call	_sqlite3NestedParse
	add	esp, 12					; 0000000cH
$LN48@sqlite3Dro@4:
; Line 45224
	cmp	edi, 1
	mov	eax, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN34@sqlite3Dro@4
	mov	eax, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN34@sqlite3Dro@4:
	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR _pDb$94417[esp+32]
	push	ecx
	push	eax
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET ??_C@_0DI@FOLLFOLB@DELETE?5FROM?5?$CFQ?4?$CFs?5WHERE?5tbl_name@
	call	_sqlite3NestedParse
	add	esp, 16					; 00000010H
; Line 45225
	cmp	DWORD PTR _isView$[esp+28], 0
	jne	SHORT $LN2@sqlite3Dro@4
	cmp	BYTE PTR [ebp+57], 0
	jne	SHORT $LN55@sqlite3Dro@4
; Line 45226
	push	ebp
	push	ebx
	call	_destroyTable
	add	esp, 8
$LN2@sqlite3Dro@4:
; Line 45232
	cmp	BYTE PTR [ebp+57], 0
	je	SHORT $LN49@sqlite3Dro@4
$LN55@sqlite3Dro@4:
; Line 45233
	mov	ecx, DWORD PTR [ebp]
	mov	ebx, DWORD PTR _v$[esp+32]
	push	0
	push	ecx
	xor	eax, eax
	mov	ecx, edi
	lea	edx, DWORD PTR [eax+108]
	mov	edi, ebx
	call	_sqlite3VdbeOp3
	mov	edi, DWORD PTR _iDb$[esp+40]
	add	esp, 8
	jmp	SHORT $LN1@sqlite3Dro@4
$LN49@sqlite3Dro@4:
	mov	ebx, DWORD PTR _v$[esp+32]
$LN1@sqlite3Dro@4:
; Line 45235
	mov	edx, DWORD PTR [ebp]
	push	0
	xor	eax, eax
	push	edx
	mov	ecx, edi
	lea	edx, DWORD PTR [eax+90]
	mov	edi, ebx
	call	_sqlite3VdbeOp3
; Line 45236
	mov	esi, DWORD PTR _iDb$[esp+40]
	mov	ecx, DWORD PTR _db$[esp+40]
	add	esp, 8
	call	_sqlite3ChangeCookie
$LN8@sqlite3Dro@4:
; Line 45238
	mov	eax, DWORD PTR _db$[esp+32]
	push	eax
	mov	eax, DWORD PTR _iDb$[esp+36]
	call	_sqliteViewResetAll
; Line 45241
	mov	edx, DWORD PTR _pName$[esp+32]
	add	esp, 4
	pop	esi
	pop	ebp
	push	edx
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	edi
	pop	ebx
; Line 45242
	add	esp, 16					; 00000010H
	ret	0
$LN11@sqlite3Dro@4:
; Line 45153
	mov	ecx, DWORD PTR [ebp]
	push	ecx
	push	OFFSET ??_C@_0BM@JEGMLIGC@table?5?$CFs?5may?5not?5be?5dropped?$AA@
$LN53@sqlite3Dro@4:
	mov	edi, ebx
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN51@sqlite3Dro@4:
	pop	esi
	pop	ebp
$exit_drop_table$94387:
; Line 45241
	mov	edx, DWORD PTR _pName$[esp+20]
	push	edx
	call	_sqlite3SrcListDelete
	add	esp, 4
	pop	edi
	pop	ebx
; Line 45242
	add	esp, 16					; 00000010H
	ret	0
_sqlite3DropTable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DAGIBCDP@rows?5deleted?$AA@		; `string'
;	COMDAT ??_C@_0N@DAGIBCDP@rows?5deleted?$AA@
CONST	SEGMENT
??_C@_0N@DAGIBCDP@rows?5deleted?$AA@ DB 'rows deleted', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3DeleteFrom
_TEXT	SEGMENT
tv895 = -80						; size = 4
_isView$ = -76						; size = 4
_triggers_exist$ = -72					; size = 4
_oldIdx$ = -68						; size = 4
$T142347 = -64						; size = 4
_iDb$ = -64						; size = 4
_addr$ = -60						; size = 4
_db$ = -56						; size = 4
_memCnt$ = -52						; size = 4
_end$ = -48						; size = 4
_pWInfo$ = -48						; size = 4
_endOfLoop$95386 = -48					; size = 4
_sContext$ = -44					; size = 8
_sNC$ = -36						; size = 36
_pTab$ = 8						; size = 4
_pParse$ = 8						; size = 4
_pTabList$ = 12						; size = 4
_pWhere$ = 16						; size = 4
_sqlite3DeleteFrom PROC					; COMDAT
; Line 47318
	sub	esp, 80					; 00000050H
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+80]
	push	esi
; Line 47322
	xor	esi, esi
; Line 47340
	cmp	DWORD PTR [ebp+24], esi
	mov	DWORD PTR _addr$[esp+88], esi
	mov	DWORD PTR _oldIdx$[esp+88], -1
	mov	DWORD PTR _memCnt$[esp+88], esi
	mov	DWORD PTR _sContext$[esp+92], esi
	jne	$LN272@sqlite3Del@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN42@sqlite3Del@4
	cmp	DWORD PTR _inMutex, esi
	jg	$LN272@sqlite3Del@4
$LN42@sqlite3Del@4:
; Line 47351
	mov	ecx, DWORD PTR _pTabList$[esp+84]
	mov	eax, DWORD PTR [ebp]
	push	ecx
	push	ebp
	mov	DWORD PTR _db$[esp+96], eax
	call	_sqlite3SrcListLookup
	add	esp, 8
; Line 47352
	cmp	eax, esi
	mov	DWORD PTR _pTab$[esp+84], eax
	je	$LN272@sqlite3Del@4
	push	ebx
; Line 47358
	push	99					; 00000063H
	xor	ebx, ebx
	mov	esi, eax
	call	_sqlite3TriggersExist
; Line 47359
	xor	edx, edx
	cmp	DWORD PTR [esi+24], edx
	mov	DWORD PTR _triggers_exist$[esp+96], eax
	setne	dl
; Line 47369
	push	eax
	mov	eax, esi
	mov	ecx, ebp
	mov	DWORD PTR _isView$[esp+100], edx
	call	_sqlite3IsReadOnly
	add	esp, 8
	test	eax, eax
	jne	$LN296@sqlite3Del@4
	push	edi
; Line 47372
	mov	edi, DWORD PTR _db$[esp+96]
	mov	ebx, esi
	mov	esi, DWORD PTR [ebx+76]
	mov	ecx, edi
	call	_sqlite3SchemaToIndex
; Line 47374
	mov	ecx, DWORD PTR [edi+4]
; Line 47375
	mov	edx, DWORD PTR [ebx]
	mov	DWORD PTR _iDb$[esp+96], eax
	lea	eax, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [ecx+eax*8]
	push	eax
	push	0
	push	edx
	push	9
	mov	eax, ebp
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN297@sqlite3Del@4
; Line 47381
	mov	eax, ebx
	push	eax
	push	ebp
	call	_sqlite3ViewGetColumnNames
	add	esp, 8
	test	eax, eax
	jne	$LN297@sqlite3Del@4
; Line 47387
	cmp	DWORD PTR _triggers_exist$[esp+96], eax
	je	SHORT $LN36@sqlite3Del@4
; Line 47388
	mov	eax, DWORD PTR [ebp+28]
	mov	DWORD PTR _oldIdx$[esp+96], eax
	add	eax, 1
	mov	DWORD PTR [ebp+28], eax
$LN36@sqlite3Del@4:
; Line 47394
	mov	eax, DWORD PTR [ebp+28]
	mov	ecx, DWORD PTR _pTabList$[esp+92]
; Line 47398
	mov	ebx, DWORD PTR _pWhere$[esp+92]
	mov	DWORD PTR [ecx+32], eax
	add	DWORD PTR [ebp+28], 1
	mov	DWORD PTR tv895[esp+96], eax
	xor	eax, eax
	mov	DWORD PTR _sNC$[esp+96], eax
	mov	DWORD PTR _sNC$[esp+100], eax
	lea	esi, DWORD PTR _sNC$[esp+96]
	mov	DWORD PTR _sNC$[esp+104], eax
	mov	DWORD PTR _sNC$[esp+108], eax
	mov	DWORD PTR _sNC$[esp+112], eax
	mov	DWORD PTR _sNC$[esp+116], eax
	mov	DWORD PTR _sNC$[esp+120], eax
	mov	DWORD PTR _sNC$[esp+124], eax
	mov	DWORD PTR _sNC$[esp+128], eax
	mov	DWORD PTR _sNC$[esp+96], ebp
	mov	DWORD PTR _sNC$[esp+100], ecx
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN297@sqlite3Del@4
; Line 47404
	cmp	DWORD PTR _isView$[esp+96], eax
	je	SHORT $LN34@sqlite3Del@4
; Line 47405
	mov	ecx, DWORD PTR _pTab$[esp+92]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	ecx, DWORD PTR _sContext$[esp+100]
	mov	eax, ebp
	call	_sqlite3AuthContextPush
	add	esp, 4
$LN34@sqlite3Del@4:
; Line 47410
	mov	esi, ebp
	call	_sqlite3GetVdbe
	mov	edi, eax
; Line 47411
	test	edi, edi
	je	$delete_from_cleanup$95368
; Line 47414
	cmp	BYTE PTR [ebp+19], 0
	jne	SHORT $LN285@sqlite3Del@4
	mov	BYTE PTR [edi+562], 1
$LN285@sqlite3Del@4:
; Line 47415
	mov	eax, DWORD PTR _triggers_exist$[esp+96]
	push	eax
	mov	eax, DWORD PTR _iDb$[esp+100]
	mov	ecx, ebp
	call	_sqlite3BeginWriteOperation
	add	esp, 4
; Line 47420
	cmp	DWORD PTR _isView$[esp+96], 0
	je	SHORT $LN287@sqlite3Del@4
; Line 47421
	mov	ecx, DWORD PTR _pTab$[esp+92]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_sqlite3SelectDup
; Line 47422
	mov	ebx, DWORD PTR tv895[esp+100]
	push	0
	push	0
	push	0
	push	0
	push	ebx
	mov	esi, eax
	push	8
	push	esi
	push	ebp
	call	_sqlite3Select
	add	esp, 36					; 00000024H
; Line 47423
	call	_sqlite3SelectDelete
	jmp	SHORT $LN31@sqlite3Del@4
$LN287@sqlite3Del@4:
	mov	ebx, DWORD PTR tv895[esp+96]
$LN31@sqlite3Del@4:
; Line 47429
	mov	eax, DWORD PTR _db$[esp+96]
	test	BYTE PTR [eax+8], -128			; ffffff80H
	je	SHORT $LN288@sqlite3Del@4
; Line 47430
	mov	esi, DWORD PTR [ebp+32]
; Line 47431
	push	esi
	lea	ecx, DWORD PTR [esi+1]
	push	0
	push	48					; 00000030H
	mov	eax, edi
	mov	DWORD PTR _memCnt$[esp+108], esi
	mov	DWORD PTR [ebp+32], ecx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN30@sqlite3Del@4
$LN288@sqlite3Del@4:
	mov	esi, DWORD PTR _memCnt$[esp+96]
$LN30@sqlite3Del@4:
; Line 47438
	mov	eax, DWORD PTR _pWhere$[esp+92]
	test	eax, eax
	jne	$LN29@sqlite3Del@4
	cmp	DWORD PTR _triggers_exist$[esp+96], eax
	jne	$LN29@sqlite3Del@4
	mov	edx, DWORD PTR _pTab$[esp+92]
	cmp	BYTE PTR [edx+57], al
	jne	$LN29@sqlite3Del@4
; Line 47439
	mov	eax, DWORD PTR _db$[esp+96]
	test	BYTE PTR [eax+8], -128			; ffffff80H
	je	SHORT $LN28@sqlite3Del@4
; Line 47442
	mov	eax, edi
	call	_sqlite3VdbeMakeLabel
; Line 47444
	cmp	DWORD PTR _isView$[esp+96], 0
	mov	DWORD PTR _endOfLoop$95386[esp+96], eax
	jne	SHORT $LN27@sqlite3Del@4
; Line 47445
	mov	ecx, DWORD PTR _iDb$[esp+96]
	mov	esi, DWORD PTR _pTab$[esp+92]
	push	14					; 0000000eH
	push	ecx
	push	ebx
	mov	eax, ebp
	call	_sqlite3OpenTable
	mov	esi, DWORD PTR _memCnt$[esp+108]
	add	esp, 12					; 0000000cH
$LN27@sqlite3Del@4:
; Line 47447
	mov	edx, DWORD PTR [edi+12]
	add	edx, 2
	push	edx
	push	ebx
	push	127					; 0000007fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47448
	push	esi
	push	1
	push	45					; 0000002dH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47449
	push	eax
	push	ebx
	push	110					; 0000006eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47450
	mov	edx, DWORD PTR _endOfLoop$95386[esp+132]
	mov	ecx, edi
	call	_sqlite3VdbeResolveLabel
; Line 47451
	push	0
	push	ebx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 48					; 00000030H
$LN28@sqlite3Del@4:
; Line 47453
	cmp	DWORD PTR _isView$[esp+96], 0
	jne	$LN5@sqlite3Del@4
; Line 47454
	mov	eax, DWORD PTR _iDb$[esp+96]
	mov	ecx, DWORD PTR _pTab$[esp+92]
	mov	edx, DWORD PTR [ecx+20]
	push	eax
	push	edx
	push	98					; 00000062H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 47455
	cmp	BYTE PTR [ebp+19], 0
	jne	SHORT $LN292@sqlite3Del@4
; Line 47456
	mov	esi, DWORD PTR [edi+20]
	test	esi, esi
	mov	eax, DWORD PTR _pTab$[esp+92]
	mov	ebx, DWORD PTR [eax]
	je	SHORT $LN281@sqlite3Del@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN68@sqlite3Del@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN281@sqlite3Del@4
$LN68@sqlite3Del@4:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, 1
	js	SHORT $LN292@sqlite3Del@4
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [esi+ecx*4+16]
	lea	esi, DWORD PTR [esi+ecx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	xor	eax, eax
	cmp	ebx, eax
	mov	DWORD PTR [esi+12], eax
	jne	SHORT $LN282@sqlite3Del@4
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	jmp	SHORT $LN292@sqlite3Del@4
$LN282@sqlite3Del@4:
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], -2			; fffffffeH
	jmp	SHORT $LN292@sqlite3Del@4
$LN281@sqlite3Del@4:
	mov	ecx, ebx
	mov	eax, -2					; fffffffeH
	call	_freeP3
$LN292@sqlite3Del@4:
; Line 47458
	mov	edx, DWORD PTR _pTab$[esp+92]
	mov	esi, DWORD PTR [edx+16]
	test	esi, esi
	je	$LN5@sqlite3Del@4
	mov	ebx, DWORD PTR _iDb$[esp+96]
	npad	2
$LL24@sqlite3Del@4:
; Line 47460
	mov	eax, DWORD PTR [esi+20]
	push	ebx
	push	eax
	push	98					; 00000062H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR [esi+32]
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LL24@sqlite3Del@4
; Line 47467
	jmp	$LN5@sqlite3Del@4
$LN29@sqlite3Del@4:
; Line 47470
	mov	ecx, DWORD PTR _pTabList$[esp+92]
	push	0
	push	eax
	push	ecx
	push	ebp
	call	_sqlite3WhereBegin
	add	esp, 16					; 00000010H
; Line 47471
	test	eax, eax
	mov	DWORD PTR _pWInfo$[esp+96], eax
	je	$delete_from_cleanup$95368
; Line 47475
	mov	ebx, DWORD PTR _pTab$[esp+92]
	mov	dl, BYTE PTR [ebx+57]
	mov	esi, DWORD PTR tv895[esp+96]
	neg	dl
	push	0
	push	esi
	mov	eax, edi
	sbb	edx, edx
	and	edx, -25				; ffffffe7H
	add	edx, 37					; 00000025H
	push	edx
	call	_sqlite3VdbeAddOp
; Line 47476
	push	0
	push	0
	push	57					; 00000039H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47477
	mov	eax, DWORD PTR _db$[esp+120]
	add	esp, 24					; 00000018H
	test	BYTE PTR [eax+8], -128			; ffffff80H
	je	SHORT $LN291@sqlite3Del@4
; Line 47478
	mov	ecx, DWORD PTR _memCnt$[esp+96]
	push	ecx
	push	1
	push	45					; 0000002dH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN291@sqlite3Del@4:
; Line 47483
	mov	edx, DWORD PTR _pWInfo$[esp+96]
	push	edx
	call	_sqlite3WhereEnd
	add	esp, 4
; Line 47487
	cmp	DWORD PTR _triggers_exist$[esp+96], 0
	je	SHORT $LN289@sqlite3Del@4
; Line 47488
	mov	eax, DWORD PTR _oldIdx$[esp+96]
	push	0
	push	eax
	push	120					; 00000078H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47489
	mov	ecx, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR _oldIdx$[esp+108]
	push	ecx
	push	edx
	push	104					; 00000068H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
$LN289@sqlite3Del@4:
; Line 47496
	mov	eax, edi
	call	_sqlite3VdbeMakeLabel
; Line 47501
	cmp	DWORD PTR _triggers_exist$[esp+96], 0
	mov	DWORD PTR _end$[esp+96], eax
	je	$LN290@sqlite3Del@4
; Line 47502
	push	eax
	push	0
	push	97					; 00000061H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 47503
	cmp	DWORD PTR _isView$[esp+96], 0
	mov	DWORD PTR _addr$[esp+96], eax
	jne	SHORT $LN16@sqlite3Del@4
; Line 47504
	push	0
	push	0
	push	94					; 0000005eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47505
	mov	ecx, DWORD PTR _iDb$[esp+108]
	push	14					; 0000000eH
	mov	edx, esi
	push	ecx
	push	edx
	mov	esi, ebx
	mov	eax, ebp
	call	_sqlite3OpenTable
	mov	esi, DWORD PTR tv895[esp+120]
	add	esp, 24					; 00000018H
$LN16@sqlite3Del@4:
; Line 47507
	push	0
	push	esi
	push	128					; 00000080H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47508
	push	0
	push	esi
	push	37					; 00000025H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47509
	push	0
	push	esi
	push	41					; 00000029H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47510
	mov	eax, DWORD PTR _oldIdx$[esp+132]
	push	0
	push	eax
	push	113					; 00000071H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 48					; 00000030H
; Line 47511
	cmp	DWORD PTR _isView$[esp+96], 0
	jne	SHORT $LN15@sqlite3Del@4
; Line 47512
	push	0
	push	esi
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN15@sqlite3Del@4:
; Line 47517
	mov	eax, DWORD PTR [ebp+172]
	test	eax, eax
	je	SHORT $LN45@sqlite3Del@4
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN46@sqlite3Del@4
$LN45@sqlite3Del@4:
	mov	eax, 99					; 00000063H
$LN46@sqlite3Del@4:
	mov	ecx, DWORD PTR _addr$[esp+96]
	mov	edx, DWORD PTR _oldIdx$[esp+96]
	push	ecx
	push	eax
	push	edx
	push	-1
	push	ebx
	push	1
	push	0
	push	99					; 00000063H
	push	ebp
	call	_sqlite3CodeRowTrigger
	add	esp, 36					; 00000024H
$LN290@sqlite3Del@4:
; Line 47520
	cmp	DWORD PTR _isView$[esp+96], 0
	jne	$LN294@sqlite3Del@4
; Line 47527
	push	9
	push	esi
	push	ebp
	mov	eax, ebx
	call	_sqlite3OpenTableAndIndices
	add	esp, 12					; 0000000cH
; Line 47531
	cmp	DWORD PTR _triggers_exist$[esp+96], 0
	jne	SHORT $LN293@sqlite3Del@4
; Line 47532
	mov	eax, DWORD PTR _end$[esp+96]
	push	eax
	push	0
	push	97					; 00000061H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _addr$[esp+96], eax
$LN293@sqlite3Del@4:
; Line 47537
	cmp	BYTE PTR [ebx+57], 0
	je	$LN12@sqlite3Del@4
; Line 47539
	push	1
	mov	DWORD PTR [ebp+192], ebx
	mov	esi, DWORD PTR [ebx+64]
	push	0
	push	130					; 00000082H
	mov	eax, edi
	mov	DWORD PTR $T142347[esp+108], esi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [edi+20]
	add	esp, 12					; 0000000cH
	test	ecx, ecx
	je	SHORT $LN283@sqlite3Del@4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN161@sqlite3Del@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN283@sqlite3Del@4
$LN161@sqlite3Del@4:
	test	eax, eax
	jl	SHORT $LN157@sqlite3Del@4
	cmp	eax, DWORD PTR [edi+12]
	jl	SHORT $LN156@sqlite3Del@4
$LN157@sqlite3Del@4:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, 1
	js	SHORT $LN294@sqlite3Del@4
$LN156@sqlite3Del@4:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	cmp	DWORD PTR $T142347[esp+96], 0
	mov	DWORD PTR [esi+12], 0
	jne	SHORT $LN284@sqlite3Del@4
	xor	eax, eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	jmp	SHORT $LN294@sqlite3Del@4
$LN284@sqlite3Del@4:
	mov	eax, DWORD PTR $T142347[esp+96]
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -10			; fffffff6H
	jmp	SHORT $LN294@sqlite3Del@4
$LN283@sqlite3Del@4:
	mov	ecx, esi
	mov	eax, -10				; fffffff6H
	call	_freeP3
; Line 47540
	jmp	SHORT $LN294@sqlite3Del@4
$LN12@sqlite3Del@4:
; Line 47543
	mov	ecx, DWORD PTR _pTab$[esp+92]
	mov	eax, DWORD PTR tv895[esp+96]
	xor	ebx, ebx
	cmp	BYTE PTR [ebp+19], bl
	push	ecx
	sete	bl
	mov	ecx, edi
	call	_sqlite3GenerateRowDelete
	mov	ebx, DWORD PTR _pTab$[esp+96]
	add	esp, 4
$LN294@sqlite3Del@4:
; Line 47550
	cmp	DWORD PTR _triggers_exist$[esp+96], 0
	je	SHORT $LN10@sqlite3Del@4
; Line 47551
	cmp	DWORD PTR _isView$[esp+96], 0
	jne	SHORT $LN9@sqlite3Del@4
; Line 47552
	mov	esi, DWORD PTR [ebx+16]
	test	esi, esi
	je	SHORT $LN6@sqlite3Del@4
	mov	ebx, DWORD PTR tv895[esp+96]
	add	ebx, 1
$LL8@sqlite3Del@4:
; Line 47553
	mov	edx, DWORD PTR [esi+20]
	push	edx
	push	ebx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR [esi+32]
	add	esp, 12					; 0000000cH
	add	ebx, 1
	test	esi, esi
	jne	SHORT $LL8@sqlite3Del@4
$LN6@sqlite3Del@4:
; Line 47555
	mov	eax, DWORD PTR tv895[esp+96]
	push	0
	push	eax
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	ebx, DWORD PTR _pTab$[esp+104]
	add	esp, 12					; 0000000cH
$LN9@sqlite3Del@4:
; Line 47559
	mov	eax, DWORD PTR [ebp+172]
	test	eax, eax
	je	SHORT $LN47@sqlite3Del@4
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN48@sqlite3Del@4
$LN47@sqlite3Del@4:
	mov	eax, 99					; 00000063H
$LN48@sqlite3Del@4:
	mov	ecx, DWORD PTR _addr$[esp+96]
	mov	edx, DWORD PTR _oldIdx$[esp+96]
	push	ecx
	push	eax
	push	edx
	push	-1
	push	ebx
	push	2
	push	0
	push	99					; 00000063H
	push	ebp
	call	_sqlite3CodeRowTrigger
	add	esp, 36					; 00000024H
$LN10@sqlite3Del@4:
; Line 47563
	mov	eax, DWORD PTR _addr$[esp+96]
	push	eax
	push	0
	push	95					; 0000005fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47564
	mov	edx, DWORD PTR _end$[esp+108]
	add	esp, 12					; 0000000cH
	mov	ecx, edi
	call	_sqlite3VdbeResolveLabel
; Line 47567
	cmp	DWORD PTR _triggers_exist$[esp+96], 0
	jne	SHORT $LN5@sqlite3Del@4
	cmp	BYTE PTR [ebx+57], 0
	jne	SHORT $LN5@sqlite3Del@4
; Line 47568
	mov	esi, DWORD PTR [ebx+16]
	test	esi, esi
	je	SHORT $LN2@sqlite3Del@4
	mov	ebx, DWORD PTR tv895[esp+96]
	add	ebx, 1
$LL4@sqlite3Del@4:
; Line 47569
	mov	ecx, DWORD PTR [esi+20]
	push	ecx
	push	ebx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR [esi+32]
	add	esp, 12					; 0000000cH
	add	ebx, 1
	test	esi, esi
	jne	SHORT $LL4@sqlite3Del@4
$LN2@sqlite3Del@4:
; Line 47571
	mov	edx, DWORD PTR tv895[esp+96]
	push	0
	push	edx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN5@sqlite3Del@4:
; Line 47580
	mov	eax, DWORD PTR _db$[esp+96]
	test	BYTE PTR [eax+8], -128			; ffffff80H
	je	SHORT $delete_from_cleanup$95368
	cmp	BYTE PTR [ebp+19], 0
	jne	SHORT $delete_from_cleanup$95368
	cmp	DWORD PTR [ebp+172], 0
	jne	SHORT $delete_from_cleanup$95368
; Line 47581
	mov	ecx, DWORD PTR _memCnt$[esp+96]
	push	0
	push	ecx
	push	1
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47582
	push	0
	push	1
	push	58					; 0000003aH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 47583
	push	1
	mov	ebx, edi
	call	_sqlite3VdbeSetNumCols
	add	esp, 28					; 0000001cH
; Line 47584
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN235@sqlite3Del@4
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $delete_from_cleanup$95368
$LN235@sqlite3Del@4:
	mov	edi, DWORD PTR [edi+48]
	push	edi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [edi+16], OFFSET ??_C@_0N@DAGIBCDP@rows?5deleted?$AA@
	mov	BYTE PTR [edi+27], 1
	mov	BYTE PTR [edi+26], 3
	mov	DWORD PTR [edi+20], 12			; 0000000cH
	mov	WORD PTR [edi+24], 162			; 000000a2H
$delete_from_cleanup$95368:
; Line 47588
	mov	eax, DWORD PTR _sContext$[esp+100]
	test	eax, eax
	je	SHORT $LN297@sqlite3Del@4
	mov	edx, DWORD PTR _sContext$[esp+96]
	mov	DWORD PTR [eax+176], edx
$LN297@sqlite3Del@4:
	pop	edi
$LN296@sqlite3Del@4:
	pop	ebx
$LN272@sqlite3Del@4:
; Line 47589
	mov	eax, DWORD PTR _pTabList$[esp+84]
	push	eax
	call	_sqlite3SrcListDelete
; Line 47590
	mov	ecx, DWORD PTR _pWhere$[esp+88]
	push	ecx
	call	_sqlite3ExprDelete
	add	esp, 8
	pop	esi
	pop	ebp
; Line 47592
	add	esp, 80					; 00000050H
	ret	0
_sqlite3DeleteFrom ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@MPKCHLKL@user_version?$AA@		; `string'
PUBLIC	??_C@_0P@JGMMHBPP@schema_version?$AA@		; `string'
PUBLIC	??_C@_0BJ@GJBMJNNI@unsupported?5encoding?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??_C@_0BI@FOLPKNAK@?$CK?$CK?$CK?5in?5database?5?$CFs?5?$CK?$CK?$CK?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@EDNFHOBJ@integrity_check?$AA@		; `string'
PUBLIC	??_C@_0BE@LKBHCIHN@case_sensitive_like?$AA@	; `string'
PUBLIC	??_C@_02LBCDJBAJ@to?$AA@			; `string'
PUBLIC	??_C@_04HNEBHLOP@from?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	??_C@_0BB@KJMCGNAI@foreign_key_list?$AA@	; `string'
PUBLIC	??_C@_0P@KOJNIGCH@collation_list?$AA@		; `string'
PUBLIC	??_C@_0O@EBMNDACF@database_list?$AA@		; `string'
PUBLIC	??_C@_06ODCMFGLL@unique?$AA@			; `string'
PUBLIC	??_C@_03NPAJGOON@seq?$AA@			; `string'
PUBLIC	??_C@_0L@MMBMMAEK@index_list?$AA@		; `string'
PUBLIC	??_C@_05OBPGIPLF@seqno?$AA@			; `string'
PUBLIC	??_C@_0L@CKPANNIC@index_info?$AA@		; `string'
PUBLIC	??_C@_02NCEGPMNB@pk?$AA@			; `string'
PUBLIC	??_C@_0L@KNDFGGNJ@dflt_value?$AA@		; `string'
PUBLIC	??_C@_07EAJHGOKJ@notnull?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_03LBLPCGAC@cid?$AA@			; `string'
PUBLIC	??_C@_0L@NEMFJAGM@table_info?$AA@		; `string'
PUBLIC	??_C@_0DF@GMDBDCKL@Safety?5level?5may?5not?5be?5changed?5@ ; `string'
PUBLIC	??_C@_0M@GKGFOGDE@synchronous?$AA@		; `string'
PUBLIC	??_C@_0BJ@INLPNACB@not?5a?5writable?5directory?$AA@ ; `string'
PUBLIC	??_C@_0BF@OPALIJKE@temp_store_directory?$AA@	; `string'
PUBLIC	??_C@_0L@JEPCDDIC@temp_store?$AA@		; `string'
PUBLIC	??_C@_0BD@IEMDKFHA@incremental_vacuum?$AA@	; `string'
PUBLIC	??_C@_0M@ENMLGDH@auto_vacuum?$AA@		; `string'
PUBLIC	??_C@_0N@NOOMDJH@locking_mode?$AA@		; `string'
PUBLIC	??_C@_0P@FMLMLOHD@max_page_count?$AA@		; `string'
PUBLIC	??_C@_09OGOMKHMG@page_size?$AA@			; `string'
PUBLIC	??_C@_0L@JIGNFOJJ@cache_size?$AA@		; `string'
PUBLIC	??_C@_0BD@EMJOENCP@default_cache_size?$AA@	; `string'
PUBLIC	??_C@_03GMLCELFL@?9?$CFT?$AA@			; `string'
;	COMDAT ??_C@_0N@MPKCHLKL@user_version?$AA@
CONST	SEGMENT
??_C@_0N@MPKCHLKL@user_version?$AA@ DB 'user_version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JGMMHBPP@schema_version?$AA@
CONST	SEGMENT
??_C@_0P@JGMMHBPP@schema_version?$AA@ DB 'schema_version', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GJBMJNNI@unsupported?5encoding?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BJ@GJBMJNNI@unsupported?5encoding?3?5?$CFs?$AA@ DB 'unsupported en'
	DB	'coding: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FOLPKNAK@?$CK?$CK?$CK?5in?5database?5?$CFs?5?$CK?$CK?$CK?6?$AA@
CONST	SEGMENT
??_C@_0BI@FOLPKNAK@?$CK?$CK?$CK?5in?5database?5?$CFs?5?$CK?$CK?$CK?6?$AA@ DB '*'
	DB	'** in database %s ***', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EDNFHOBJ@integrity_check?$AA@
CONST	SEGMENT
??_C@_0BA@EDNFHOBJ@integrity_check?$AA@ DB 'integrity_check', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKBHCIHN@case_sensitive_like?$AA@
CONST	SEGMENT
??_C@_0BE@LKBHCIHN@case_sensitive_like?$AA@ DB 'case_sensitive_like', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02LBCDJBAJ@to?$AA@
CONST	SEGMENT
??_C@_02LBCDJBAJ@to?$AA@ DB 'to', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HNEBHLOP@from?$AA@
CONST	SEGMENT
??_C@_04HNEBHLOP@from?$AA@ DB 'from', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KJMCGNAI@foreign_key_list?$AA@
CONST	SEGMENT
??_C@_0BB@KJMCGNAI@foreign_key_list?$AA@ DB 'foreign_key_list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KOJNIGCH@collation_list?$AA@
CONST	SEGMENT
??_C@_0P@KOJNIGCH@collation_list?$AA@ DB 'collation_list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EBMNDACF@database_list?$AA@
CONST	SEGMENT
??_C@_0O@EBMNDACF@database_list?$AA@ DB 'database_list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODCMFGLL@unique?$AA@
CONST	SEGMENT
??_C@_06ODCMFGLL@unique?$AA@ DB 'unique', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NPAJGOON@seq?$AA@
CONST	SEGMENT
??_C@_03NPAJGOON@seq?$AA@ DB 'seq', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MMBMMAEK@index_list?$AA@
CONST	SEGMENT
??_C@_0L@MMBMMAEK@index_list?$AA@ DB 'index_list', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OBPGIPLF@seqno?$AA@
CONST	SEGMENT
??_C@_05OBPGIPLF@seqno?$AA@ DB 'seqno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CKPANNIC@index_info?$AA@
CONST	SEGMENT
??_C@_0L@CKPANNIC@index_info?$AA@ DB 'index_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NCEGPMNB@pk?$AA@
CONST	SEGMENT
??_C@_02NCEGPMNB@pk?$AA@ DB 'pk', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KNDFGGNJ@dflt_value?$AA@
CONST	SEGMENT
??_C@_0L@KNDFGGNJ@dflt_value?$AA@ DB 'dflt_value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EAJHGOKJ@notnull?$AA@
CONST	SEGMENT
??_C@_07EAJHGOKJ@notnull?$AA@ DB 'notnull', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LBLPCGAC@cid?$AA@
CONST	SEGMENT
??_C@_03LBLPCGAC@cid?$AA@ DB 'cid', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NEMFJAGM@table_info?$AA@
CONST	SEGMENT
??_C@_0L@NEMFJAGM@table_info?$AA@ DB 'table_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GMDBDCKL@Safety?5level?5may?5not?5be?5changed?5@
CONST	SEGMENT
??_C@_0DF@GMDBDCKL@Safety?5level?5may?5not?5be?5changed?5@ DB 'Safety lev'
	DB	'el may not be changed inside a transaction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKGFOGDE@synchronous?$AA@
CONST	SEGMENT
??_C@_0M@GKGFOGDE@synchronous?$AA@ DB 'synchronous', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@INLPNACB@not?5a?5writable?5directory?$AA@
CONST	SEGMENT
??_C@_0BJ@INLPNACB@not?5a?5writable?5directory?$AA@ DB 'not a writable di'
	DB	'rectory', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OPALIJKE@temp_store_directory?$AA@
CONST	SEGMENT
??_C@_0BF@OPALIJKE@temp_store_directory?$AA@ DB 'temp_store_directory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JEPCDDIC@temp_store?$AA@
CONST	SEGMENT
??_C@_0L@JEPCDDIC@temp_store?$AA@ DB 'temp_store', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IEMDKFHA@incremental_vacuum?$AA@
CONST	SEGMENT
??_C@_0BD@IEMDKFHA@incremental_vacuum?$AA@ DB 'incremental_vacuum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ENMLGDH@auto_vacuum?$AA@
CONST	SEGMENT
??_C@_0M@ENMLGDH@auto_vacuum?$AA@ DB 'auto_vacuum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NOOMDJH@locking_mode?$AA@
CONST	SEGMENT
??_C@_0N@NOOMDJH@locking_mode?$AA@ DB 'locking_mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FMLMLOHD@max_page_count?$AA@
CONST	SEGMENT
??_C@_0P@FMLMLOHD@max_page_count?$AA@ DB 'max_page_count', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OGOMKHMG@page_size?$AA@
CONST	SEGMENT
??_C@_09OGOMKHMG@page_size?$AA@ DB 'page_size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JIGNFOJJ@cache_size?$AA@
CONST	SEGMENT
??_C@_0L@JIGNFOJJ@cache_size?$AA@ DB 'cache_size', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EMJOENCP@default_cache_size?$AA@
CONST	SEGMENT
??_C@_0BD@EMJOENCP@default_cache_size?$AA@ DB 'default_cache_size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GMLCELFL@?9?$CFT?$AA@
CONST	SEGMENT
??_C@_03GMLCELFL@?9?$CFT?$AA@ DB '-%T', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Pragma
_TEXT	SEGMENT
tv4161 = -44						; size = 4
_zRight$ = -40						; size = 4
_pDb$ = -36						; size = 4
_x$97903 = -32						; size = 4
_zDb$ = -32						; size = 4
_v$ = -28						; size = 4
tv6066 = -24						; size = 4
_loopTop$97922 = -24					; size = 4
_i$97890 = -20						; size = 4
tv6071 = -16						; size = 4
_zCol$97882 = -16					; size = 4
_pIdx$97818 = -16					; size = 4
_i$97800 = -16						; size = 4
_zLeft$ = -12						; size = 4
_mxErr$97893 = -8					; size = 4
_pTab$97867 = -8					; size = 4
_pTab$97819 = -8					; size = 4
_pTab$97797 = -8					; size = 4
_iLimit$97753 = -8					; size = 4
_pTab$97920 = -4					; size = 4
_i$97871 = 8						; size = 4
_i$97846 = 8						; size = 4
_i$97837 = 8						; size = 4
_i$97822 = 8						; size = 4
_pCol$97801 = 8						; size = 4
_zRet$97728 = 8						; size = 4
_pParse$ = 8						; size = 4
_pId1$ = 12						; size = 4
_pId2$ = 16						; size = 4
_pValue$ = 20						; size = 4
_minusFlag$ = 24					; size = 4
_sqlite3Pragma PROC					; COMDAT
; Line 51858
	sub	esp, 44					; 0000002cH
	push	ebx
	mov	ebx, DWORD PTR _pId2$[esp+44]
	push	ebp
	push	esi
	mov	esi, DWORD PTR _pParse$[esp+52]
; Line 51866
	mov	ebp, DWORD PTR [esi+12]
	test	ebp, ebp
	push	edi
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR tv4161[esp+60], edi
	jne	SHORT $LN184@sqlite3Pra
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [esi+12], eax
	mov	ebp, eax
$LN184@sqlite3Pra:
; Line 51867
	test	ebp, ebp
	mov	DWORD PTR _v$[esp+60], ebp
	je	$LN917@sqlite3Pra
; Line 51871
	test	ebx, ebx
	mov	eax, DWORD PTR [esi]
	je	SHORT $LN189@sqlite3Pra
	test	DWORD PTR [ebx+4], -2			; fffffffeH
	jbe	SHORT $LN189@sqlite3Pra
	push	eax
	mov	eax, DWORD PTR _pId1$[esp+60]
	call	_sqlite3FindDb
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jge	SHORT $LN964@sqlite3Pra
	mov	eax, DWORD PTR _pId1$[esp+56]
	push	eax
	push	OFFSET ??_C@_0BE@DADMKDCE@unknown?5database?5?$CFT?$AA@
	mov	edi, esi
	call	_sqlite3ErrorMsg
	add	esp, 8
	add	DWORD PTR [esi+24], 1
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 52748
	add	esp, 44					; 0000002cH
	ret	0
; Line 51871
$LN189@sqlite3Pra:
	mov	edi, DWORD PTR [eax+60]
; Line 51872
	test	edi, edi
	mov	ebx, DWORD PTR _pId1$[esp+56]
	jl	$LN917@sqlite3Pra
$LN964@sqlite3Pra:
; Line 51878
	cmp	edi, 1
	mov	edx, DWORD PTR tv4161[esp+60]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _pDb$[esp+60], ecx
	jne	SHORT $LN169@sqlite3Pra
	push	esi
	call	_sqlite3OpenTempDatabase
	add	esp, 4
	test	eax, eax
	jne	$LN917@sqlite3Pra
$LN169@sqlite3Pra:
; Line 51882
	mov	eax, ebx
	call	_sqlite3NameFromToken
	mov	esi, eax
; Line 51883
	test	esi, esi
	mov	DWORD PTR _zLeft$[esp+60], esi
	je	$LN917@sqlite3Pra
; Line 51884
	cmp	DWORD PTR _minusFlag$[esp+56], 0
	je	SHORT $LN167@sqlite3Pra
; Line 51885
	mov	edx, DWORD PTR _pValue$[esp+56]
	push	edx
	push	OFFSET ??_C@_03GMLCELFL@?9?$CFT?$AA@
	call	_sqlite3MPrintf
	mov	ebx, eax
	add	esp, 8
	mov	DWORD PTR _zRight$[esp+60], ebx
; Line 51886
	jmp	SHORT $LN166@sqlite3Pra
$LN167@sqlite3Pra:
; Line 51887
	mov	eax, DWORD PTR _pValue$[esp+56]
	call	_sqlite3NameFromToken
	mov	ebx, eax
	mov	DWORD PTR _zRight$[esp+60], eax
$LN166@sqlite3Pra:
; Line 51890
	test	edi, edi
	jle	SHORT $LN174@sqlite3Pra
	mov	eax, DWORD PTR _pDb$[esp+60]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN991@sqlite3Pra
$LN174@sqlite3Pra:
	xor	eax, eax
$LN991@sqlite3Pra:
; Line 51891
	push	eax
	push	ebx
	mov	DWORD PTR _zDb$[esp+68], eax
	mov	eax, DWORD PTR _pParse$[esp+64]
	push	esi
	push	19					; 00000013H
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$pragma_out$97699
; Line 51912
	mov	edx, OFFSET ??_C@_0BD@EMJOENCP@default_cache_size?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN164@sqlite3Pra
; Line 51923
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 51924
	test	ebx, ebx
	jne	SHORT $LN162@sqlite3Pra
; Line 51925
	push	1
	mov	ebx, ebp
	call	_sqlite3VdbeSetNumCols
	add	esp, 4
; Line 51926
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN196@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN201@sqlite3Pra
$LN196@sqlite3Pra:
	mov	esi, DWORD PTR [ebp+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_0L@JIGNFOJJ@cache_size?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 10			; 0000000aH
	mov	WORD PTR [esi+24], 162			; 000000a2H
$LN201@sqlite3Pra:
; Line 51927
	push	OFFSET ?getCacheSize@?6??sqlite3Pragma@@9@9
	push	7
	push	ebp
	call	_sqlite3VdbeAddOpList
	mov	esi, eax
	add	esp, 12					; 0000000cH
; Line 51928
	mov	edx, edi
	mov	ecx, esi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP1
; Line 51929
	lea	ecx, DWORD PTR [esi+5]
	mov	edx, 2000				; 000007d0H
	mov	eax, ebp
	call	_sqlite3VdbeChangeP1
; Line 51930
	jmp	$LN979@sqlite3Pra
$LN162@sqlite3Pra:
; Line 51931
	push	ebx
	call	_atoi
	mov	esi, eax
	add	esp, 4
; Line 51932
	test	esi, esi
	jge	SHORT $LN160@sqlite3Pra
	neg	esi
$LN160@sqlite3Pra:
; Line 51933
	mov	ecx, DWORD PTR _pParse$[esp+56]
	push	0
	mov	eax, edi
	call	_sqlite3BeginWriteOperation
; Line 51934
	push	0
	push	esi
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 51935
	push	2
	push	edi
	push	115					; 00000073H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 51936
	push	0
	push	0
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 51937
	add	eax, 3
	push	eax
	push	0
	push	72					; 00000048H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 51938
	push	0
	push	0
	push	85					; 00000055H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 64					; 00000040H
; Line 51939
	push	2
	push	edi
	push	4
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 51940
	mov	eax, DWORD PTR _pDb$[esp+72]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+124], esi
; Line 51941
	mov	edx, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [edx+124]
	mov	eax, DWORD PTR [eax+4]
	add	esp, 12					; 0000000cH
	call	_sqlite3BtreeSetCacheSize
; Line 51943
	jmp	$LN979@sqlite3Pra
$LN164@sqlite3Pra:
; Line 51954
	mov	edx, OFFSET ??_C@_09OGOMKHMG@page_size?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN158@sqlite3Pra
; Line 51956
	test	ebx, ebx
	mov	eax, DWORD PTR _pDb$[esp+60]
	mov	esi, DWORD PTR [eax+4]
	jne	SHORT $LN157@sqlite3Pra
; Line 51957
	test	esi, esi
	je	SHORT $LN176@sqlite3Pra
	mov	ecx, DWORD PTR [esi+4]
	movzx	eax, WORD PTR [ecx+24]
	jmp	SHORT $LN177@sqlite3Pra
$LN176@sqlite3Pra:
	xor	eax, eax
$LN177@sqlite3Pra:
; Line 51958
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+60]
	push	OFFSET ??_C@_09OGOMKHMG@page_size?$AA@
	call	_returnSingleInt
	add	esp, 8
; Line 51959
	jmp	$LN979@sqlite3Pra
$LN157@sqlite3Pra:
; Line 51960
	push	ebx
	call	_atoi
	mov	edx, eax
	add	esp, 4
	or	ecx, -1
	mov	eax, esi
	call	_sqlite3BtreeSetPageSize
; Line 51962
	jmp	$LN979@sqlite3Pra
$LN158@sqlite3Pra:
; Line 51973
	mov	edx, OFFSET ??_C@_0P@FMLMLOHD@max_page_count?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN154@sqlite3Pra
; Line 51976
	test	ebx, ebx
	mov	edx, DWORD PTR _pDb$[esp+60]
	mov	esi, DWORD PTR [edx+4]
	je	SHORT $LN153@sqlite3Pra
; Line 51977
	push	ebx
	call	_atoi
	add	esp, 4
$LN153@sqlite3Pra:
; Line 51979
	test	esi, esi
	je	SHORT $LN987@sqlite3Pra
; Line 51980
	test	eax, eax
	mov	ecx, DWORD PTR [esi+4]
	mov	esi, DWORD PTR [ecx]
	jle	SHORT $LN237@sqlite3Pra
	mov	DWORD PTR [esi+72], eax
$LN237@sqlite3Pra:
	call	_sqlite3PagerPagecount
	mov	eax, DWORD PTR [esi+72]
$LN987@sqlite3Pra:
; Line 51982
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+60]
	push	OFFSET ??_C@_0P@FMLMLOHD@max_page_count?$AA@
	call	_returnSingleInt
	add	esp, 8
; Line 51983
	jmp	$LN979@sqlite3Pra
$LN154@sqlite3Pra:
; Line 51989
	mov	edx, OFFSET ??_C@_0N@NOOMDJH@locking_mode?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN150@sqlite3Pra
; Line 51991
	mov	esi, ebx
	mov	DWORD PTR _zRet$97728[esp+56], OFFSET ??_C@_06IKLLLDHL@normal?$AA@
	call	_getLockingMode
; Line 51993
	mov	edx, DWORD PTR _pId2$[esp+56]
	mov	ecx, DWORD PTR [edx+4]
	shr	ecx, 1
	jne	SHORT $LN149@sqlite3Pra
	cmp	eax, -1
	jne	SHORT $LN149@sqlite3Pra
; Line 51998
	mov	eax, DWORD PTR tv4161[esp+60]
	movzx	eax, BYTE PTR [eax+340]
; Line 51999
	jmp	SHORT $LN148@sqlite3Pra
$LN149@sqlite3Pra:
; Line 52001
	test	ecx, ecx
	jne	SHORT $LN983@sqlite3Pra
; Line 52012
	mov	ecx, DWORD PTR tv4161[esp+60]
	mov	edi, 2
	cmp	DWORD PTR [ecx], edi
	jle	SHORT $LN982@sqlite3Pra
	mov	esi, 48					; 00000030H
	npad	4
$LL146@sqlite3Pra:
; Line 52014
	test	eax, eax
	mov	edx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [esi+edx+4]
	mov	edx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx]
	jl	SHORT $LN145@sqlite3Pra
	cmp	BYTE PTR [edx+11], 0
	jne	SHORT $LN145@sqlite3Pra
	mov	BYTE PTR [edx+19], al
$LN145@sqlite3Pra:
; Line 52012
	add	edi, 1
	add	esi, 24					; 00000018H
	cmp	edi, DWORD PTR [ecx]
	jl	SHORT $LL146@sqlite3Pra
$LN982@sqlite3Pra:
; Line 52016
	mov	BYTE PTR [ecx+340], al
$LN983@sqlite3Pra:
; Line 52019
	test	eax, eax
	mov	ecx, DWORD PTR _pDb$[esp+60]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	jl	SHORT $LN247@sqlite3Pra
	cmp	BYTE PTR [ecx+11], 0
	jne	SHORT $LN247@sqlite3Pra
	mov	BYTE PTR [ecx+19], al
$LN247@sqlite3Pra:
	movzx	eax, BYTE PTR [ecx+19]
$LN148@sqlite3Pra:
; Line 52023
	cmp	eax, 1
	jne	SHORT $LN143@sqlite3Pra
; Line 52024
	mov	DWORD PTR _zRet$97728[esp+56], OFFSET ??_C@_09JJPHINFN@exclusive?$AA@
$LN143@sqlite3Pra:
; Line 52026
	push	1
	mov	ebx, ebp
	call	_sqlite3VdbeSetNumCols
; Line 52027
	xor	ebx, ebx
	add	esp, 4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN254@sqlite3Pra
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN970@sqlite3Pra
$LN254@sqlite3Pra:
	mov	esi, DWORD PTR [ebp+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_0N@NOOMDJH@locking_mode?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 12			; 0000000cH
	mov	WORD PTR [esi+24], 162			; 000000a2H
$LN970@sqlite3Pra:
; Line 52028
	push	ebx
	push	ebx
	push	88					; 00000058H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [ebp+20]
	add	esp, 12					; 0000000cH
	cmp	ecx, ebx
	je	$LN953@sqlite3Pra
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN310@sqlite3Pra
	cmp	DWORD PTR _inMutex, ebx
	jg	$LN953@sqlite3Pra
$LN310@sqlite3Pra:
	cmp	eax, ebx
	jl	SHORT $LN306@sqlite3Pra
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN989@sqlite3Pra
$LN306@sqlite3Pra:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN308@sqlite3Pra
$LN989@sqlite3Pra:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	mov	edx, DWORD PTR _zRet$97728[esp+56]
	cmp	edx, ebx
	mov	DWORD PTR [esi+12], ebx
	jne	SHORT $LN954@sqlite3Pra
; Line 52029
	push	ebx
	push	1
	push	58					; 0000003aH
	mov	eax, ebp
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 52030
	jmp	$LN979@sqlite3Pra
$LN954@sqlite3Pra:
; Line 52028
	mov	eax, edx
	lea	edi, DWORD PTR [eax+1]
$LL965@sqlite3Pra:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	cmp	cl, bl
	jne	SHORT $LL965@sqlite3Pra
	sub	eax, edi
	mov	edi, eax
	mov	ebx, edx
	call	_sqlite3StrNDup
	xor	ebx, ebx
; Line 52029
	push	ebx
	mov	DWORD PTR [esi+12], eax
	push	1
	push	58					; 0000003aH
	mov	eax, ebp
	mov	DWORD PTR [esi+16], -1
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 52030
	jmp	$LN979@sqlite3Pra
$LN953@sqlite3Pra:
; Line 52028
	mov	ecx, DWORD PTR _zRet$97728[esp+56]
	xor	eax, eax
	call	_freeP3
$LN308@sqlite3Pra:
; Line 52029
	push	ebx
	push	1
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 52030
	jmp	$LN979@sqlite3Pra
$LN150@sqlite3Pra:
; Line 52040
	mov	edx, OFFSET ??_C@_0M@ENMLGDH@auto_vacuum?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN141@sqlite3Pra
; Line 52042
	test	ebx, ebx
	mov	eax, DWORD PTR _pDb$[esp+60]
	mov	edi, DWORD PTR [eax+4]
	jne	SHORT $LN140@sqlite3Pra
; Line 52044
	test	edi, edi
	je	SHORT $LN178@sqlite3Pra
	mov	eax, edi
	call	_sqlite3BtreeGetAutoVacuum
	jmp	SHORT $LN179@sqlite3Pra
$LN178@sqlite3Pra:
	xor	eax, eax
$LN179@sqlite3Pra:
; Line 52045
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+60]
	push	OFFSET ??_C@_0M@ENMLGDH@auto_vacuum?$AA@
	call	_returnSingleInt
	add	esp, 8
; Line 52046
	jmp	$LN979@sqlite3Pra
$LN140@sqlite3Pra:
; Line 52047
	mov	esi, ebx
	call	_getAutoVacuum
; Line 52048
	test	eax, eax
	jl	$LN979@sqlite3Pra
; Line 52049
	mov	ecx, eax
	mov	eax, edi
	call	_sqlite3BtreeSetAutoVacuum
; Line 52052
	jmp	$LN979@sqlite3Pra
$LN141@sqlite3Pra:
; Line 52061
	mov	edx, OFFSET ??_C@_0BD@IEMDKFHA@incremental_vacuum?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN136@sqlite3Pra
; Line 52063
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52066
	test	ebx, ebx
	je	SHORT $LN133@sqlite3Pra
	lea	ecx, DWORD PTR _iLimit$97753[esp+60]
	push	ecx
	mov	esi, ebx
	call	_sqlite3GetInt32
	add	esp, 4
	test	eax, eax
	je	SHORT $LN133@sqlite3Pra
	mov	esi, DWORD PTR _iLimit$97753[esp+60]
	test	esi, esi
	jg	SHORT $LN134@sqlite3Pra
$LN133@sqlite3Pra:
; Line 52067
	mov	esi, 2147483647				; 7fffffffH
$LN134@sqlite3Pra:
; Line 52069
	mov	ecx, DWORD PTR _pParse$[esp+56]
	push	0
	mov	eax, edi
	call	_sqlite3BeginWriteOperation
; Line 52070
	push	0
	push	esi
	push	48					; 00000030H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52071
	push	0
	push	edi
	push	53					; 00000035H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52072
	push	0
	mov	esi, eax
	push	0
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52073
	push	0
	push	-1
	push	45					; 0000002dH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52074
	push	esi
	push	0
	push	5
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 64					; 00000040H
; Line 52075
	mov	eax, esi
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
; Line 52076
	jmp	$LN979@sqlite3Pra
$LN136@sqlite3Pra:
; Line 52094
	mov	edx, OFFSET ??_C@_0L@JIGNFOJJ@cache_size?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN131@sqlite3Pra
; Line 52095
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52096
	test	ebx, ebx
	jne	SHORT $LN129@sqlite3Pra
; Line 52097
	mov	edx, DWORD PTR _pDb$[esp+60]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	push	OFFSET ??_C@_0L@JIGNFOJJ@cache_size?$AA@
	mov	eax, esi
	call	_returnSingleInt
	add	esp, 8
; Line 52098
	jmp	$LN979@sqlite3Pra
$LN129@sqlite3Pra:
; Line 52099
	push	ebx
	call	_atoi
	add	esp, 4
; Line 52100
	test	eax, eax
	jge	SHORT $LN127@sqlite3Pra
	neg	eax
$LN127@sqlite3Pra:
; Line 52101
	mov	edx, DWORD PTR _pDb$[esp+60]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+124], eax
; Line 52102
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR [edx+4]
	call	_sqlite3BtreeSetCacheSize
; Line 52104
	jmp	$LN979@sqlite3Pra
$LN131@sqlite3Pra:
; Line 52117
	mov	edx, OFFSET ??_C@_0L@JEPCDDIC@temp_store?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN125@sqlite3Pra
; Line 52118
	test	ebx, ebx
	jne	SHORT $LN124@sqlite3Pra
; Line 52119
	mov	ecx, DWORD PTR tv4161[esp+60]
	movzx	edx, BYTE PTR [ecx+21]
	mov	eax, DWORD PTR _pParse$[esp+56]
	push	edx
	push	OFFSET ??_C@_0L@JEPCDDIC@temp_store?$AA@
	call	_returnSingleInt
	add	esp, 8
; Line 52120
	jmp	$LN979@sqlite3Pra
$LN124@sqlite3Pra:
; Line 52121
	mov	edi, DWORD PTR _pParse$[esp+56]
	mov	eax, ebx
	call	_changeTempStorage
; Line 52123
	jmp	$LN979@sqlite3Pra
$LN125@sqlite3Pra:
; Line 52135
	mov	edx, OFFSET ??_C@_0BF@OPALIJKE@temp_store_directory?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN121@sqlite3Pra
; Line 52136
	xor	esi, esi
	cmp	ebx, esi
	jne	$LN120@sqlite3Pra
; Line 52137
	cmp	DWORD PTR _sqlite3_temp_directory, esi
	je	$LN979@sqlite3Pra
; Line 52138
	push	1
	mov	ebx, ebp
	call	_sqlite3VdbeSetNumCols
; Line 52140
	xor	edi, edi
	add	esp, 4
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN319@sqlite3Pra
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN971@sqlite3Pra
$LN319@sqlite3Pra:
	mov	esi, DWORD PTR [ebp+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_0BF@OPALIJKE@temp_store_directory?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 20			; 00000014H
	mov	WORD PTR [esi+24], 162			; 000000a2H
$LN971@sqlite3Pra:
; Line 52141
	mov	ebx, DWORD PTR _sqlite3_temp_directory
	push	edi
	push	edi
	push	88					; 00000058H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR [ebp+20]
	add	esp, 12					; 0000000cH
	cmp	esi, edi
	je	$LN955@sqlite3Pra
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN375@sqlite3Pra
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN955@sqlite3Pra
$LN375@sqlite3Pra:
	cmp	eax, edi
	jl	SHORT $LN371@sqlite3Pra
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN988@sqlite3Pra
$LN371@sqlite3Pra:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN373@sqlite3Pra
$LN988@sqlite3Pra:
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [esi+eax*4+12]
	lea	esi, DWORD PTR [esi+eax*4]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	cmp	ebx, edi
	mov	DWORD PTR [esi+12], edi
	jne	SHORT $LN956@sqlite3Pra
; Line 52142
	push	edi
	push	1
	push	58					; 0000003aH
	mov	eax, ebp
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 52144
	jmp	$LN979@sqlite3Pra
$LN956@sqlite3Pra:
; Line 52141
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL966@sqlite3Pra:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL966@sqlite3Pra
	sub	eax, edx
	mov	edi, eax
	call	_sqlite3StrNDup
	xor	edi, edi
; Line 52142
	push	edi
	mov	DWORD PTR [esi+12], eax
	push	1
	push	58					; 0000003aH
	mov	eax, ebp
	mov	DWORD PTR [esi+16], -1
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 52144
	jmp	$LN979@sqlite3Pra
$LN955@sqlite3Pra:
; Line 52141
	mov	ecx, ebx
	xor	eax, eax
	call	_freeP3
$LN373@sqlite3Pra:
; Line 52142
	push	edi
	push	1
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 52144
	jmp	$LN979@sqlite3Pra
$LN120@sqlite3Pra:
; Line 52145
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN117@sqlite3Pra
	mov	eax, ebx
	call	_sqlite3WinIsDirWritable
	test	eax, eax
	jne	SHORT $LN117@sqlite3Pra
; Line 52146
	mov	edi, DWORD PTR _pParse$[esp+56]
	push	OFFSET ??_C@_0BJ@INLPNACB@not?5a?5writable?5directory?$AA@
	call	_sqlite3ErrorMsg
; Line 52147
	jmp	$LN992@sqlite3Pra
$LN117@sqlite3Pra:
; Line 52152
	mov	ecx, DWORD PTR tv4161[esp+60]
	cmp	BYTE PTR [ecx+21], 1
	ja	SHORT $LN116@sqlite3Pra
; Line 52153
	mov	eax, DWORD PTR _pParse$[esp+56]
	call	_invalidateTempStorage
$LN116@sqlite3Pra:
; Line 52155
	mov	edx, DWORD PTR _sqlite3_temp_directory
	push	edx
	call	_sqlite3FreeX
	add	esp, 4
; Line 52156
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN113@sqlite3Pra
; Line 52157
	mov	DWORD PTR _sqlite3_temp_directory, ebx
; Line 52158
	mov	DWORD PTR _zRight$[esp+60], esi
; Line 52159
	jmp	$LN979@sqlite3Pra
$LN113@sqlite3Pra:
; Line 52160
	mov	DWORD PTR _sqlite3_temp_directory, esi
; Line 52163
	jmp	$LN979@sqlite3Pra
$LN121@sqlite3Pra:
; Line 52174
	mov	edx, OFFSET ??_C@_0M@GKGFOGDE@synchronous?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN110@sqlite3Pra
; Line 52175
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52176
	test	ebx, ebx
	jne	SHORT $LN108@sqlite3Pra
; Line 52177
	mov	eax, DWORD PTR _pDb$[esp+60]
	movzx	ecx, BYTE PTR [eax+9]
	sub	ecx, 1
	push	ecx
	push	OFFSET ??_C@_0M@GKGFOGDE@synchronous?$AA@
	mov	eax, esi
	call	_returnSingleInt
	add	esp, 8
; Line 52178
	jmp	$LN979@sqlite3Pra
$LN108@sqlite3Pra:
; Line 52179
	mov	edx, DWORD PTR tv4161[esp+60]
	cmp	BYTE PTR [edx+20], 0
	jne	SHORT $LN106@sqlite3Pra
; Line 52181
	push	OFFSET ??_C@_0DF@GMDBDCKL@Safety?5level?5may?5not?5be?5changed?5@
	mov	edi, esi
	call	_sqlite3ErrorMsg
	add	esp, 4
; Line 52182
	jmp	$LN979@sqlite3Pra
$LN106@sqlite3Pra:
; Line 52183
	mov	ebx, DWORD PTR _zRight$[esp+60]
	call	_getSafetyLevel
	mov	ecx, DWORD PTR _pDb$[esp+60]
	add	al, 1
	mov	BYTE PTR [ecx+9], al
; Line 52186
	jmp	$LN979@sqlite3Pra
$LN110@sqlite3Pra:
; Line 52190
	mov	edx, DWORD PTR _pParse$[esp+56]
	push	ebx
	push	esi
	push	edx
	call	_flagPragma
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN979@sqlite3Pra
; Line 52209
	mov	esi, DWORD PTR _zLeft$[esp+60]
	mov	edx, OFFSET ??_C@_0L@NEMFJAGM@table_info?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	mov	ebx, DWORD PTR _zRight$[esp+60]
	jne	$LN101@sqlite3Pra
	test	ebx, ebx
	je	$LN101@sqlite3Pra
; Line 52211
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52212
	mov	eax, DWORD PTR _zDb$[esp+60]
	mov	ecx, DWORD PTR tv4161[esp+60]
	push	eax
	push	ecx
	call	_sqlite3FindTable
	add	esp, 8
; Line 52213
	test	eax, eax
	mov	DWORD PTR _pTab$97797[esp+60], eax
	je	$LN979@sqlite3Pra
; Line 52216
	push	6
	mov	ebx, ebp
	call	_sqlite3VdbeSetNumCols
	add	esp, 4
; Line 52217
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ebx, 162				; 000000a2H
	je	SHORT $LN384@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN972@sqlite3Pra
$LN384@sqlite3Pra:
	mov	esi, DWORD PTR [ebp+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_03LBLPCGAC@cid?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 3
	mov	WORD PTR [esi+24], bx
$LN972@sqlite3Pra:
; Line 52218
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, 4
	je	SHORT $LN425@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN430@sqlite3Pra
$LN425@sqlite3Pra:
	mov	edi, DWORD PTR [ebp+48]
	add	edi, 64					; 00000040H
	push	edi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [edi+16], OFFSET ??_C@_04MEMAJGDJ@name?$AA@
	mov	BYTE PTR [edi+27], 1
	mov	BYTE PTR [edi+26], 3
	mov	DWORD PTR [edi+20], esi
	mov	WORD PTR [edi+24], bx
$LN430@sqlite3Pra:
; Line 52219
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN466@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN471@sqlite3Pra
$LN466@sqlite3Pra:
	mov	edi, DWORD PTR [ebp+48]
	add	edi, 128				; 00000080H
	push	edi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [edi+16], OFFSET ??_C@_04GPMDFGEJ@type?$AA@
	mov	BYTE PTR [edi+27], 1
	mov	BYTE PTR [edi+26], 3
	mov	DWORD PTR [edi+20], esi
	mov	WORD PTR [edi+24], bx
$LN471@sqlite3Pra:
; Line 52220
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN507@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN512@sqlite3Pra
$LN507@sqlite3Pra:
	mov	esi, DWORD PTR [ebp+48]
	add	esi, 192				; 000000c0H
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_07EAJHGOKJ@notnull?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 7
	mov	WORD PTR [esi+24], bx
$LN512@sqlite3Pra:
; Line 52221
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN548@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN553@sqlite3Pra
$LN548@sqlite3Pra:
	mov	esi, DWORD PTR [ebp+48]
	add	esi, 256				; 00000100H
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_0L@KNDFGGNJ@dflt_value?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 10			; 0000000aH
	mov	WORD PTR [esi+24], bx
$LN553@sqlite3Pra:
; Line 52222
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN589@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN594@sqlite3Pra
$LN589@sqlite3Pra:
	mov	esi, DWORD PTR [ebp+48]
	add	esi, 320				; 00000140H
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_02NCEGPMNB@pk?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 2
	mov	WORD PTR [esi+24], bx
$LN594@sqlite3Pra:
; Line 52223
	mov	edi, DWORD PTR _pTab$97797[esp+60]
	mov	edx, DWORD PTR _pParse$[esp+56]
	push	edi
	push	edx
	call	_sqlite3ViewGetColumnNames
; Line 52224
	mov	esi, DWORD PTR [edi+8]
	add	esp, 8
	cmp	DWORD PTR [edi+4], 0
	mov	DWORD PTR _i$97800[esp+60], 0
	mov	DWORD PTR _pCol$97801[esp+56], esi
	jle	$LN979@sqlite3Pra
$LL986@sqlite3Pra:
; Line 52226
	mov	eax, DWORD PTR _i$97800[esp+60]
	xor	edi, edi
	push	edi
	push	eax
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52227
	mov	ebx, DWORD PTR [esi]
	push	edi
	push	edi
	push	88					; 00000058H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [ebp+20]
	add	esp, 24					; 00000018H
	cmp	ecx, edi
	je	SHORT $LN957@sqlite3Pra
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN645@sqlite3Pra
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN957@sqlite3Pra
$LN645@sqlite3Pra:
	cmp	eax, edi
	jl	SHORT $LN641@sqlite3Pra
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN973@sqlite3Pra
$LN641@sqlite3Pra:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN643@sqlite3Pra
$LN973@sqlite3Pra:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	cmp	ebx, edi
	mov	DWORD PTR [esi+12], edi
	jne	SHORT $LN958@sqlite3Pra
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
	mov	esi, DWORD PTR _pCol$97801[esp+56]
	jmp	SHORT $LN643@sqlite3Pra
$LN958@sqlite3Pra:
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL967@sqlite3Pra:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL967@sqlite3Pra
	sub	eax, edx
	mov	edi, eax
	call	_sqlite3StrNDup
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -1
	mov	esi, DWORD PTR _pCol$97801[esp+56]
	xor	edi, edi
	jmp	SHORT $LN643@sqlite3Pra
$LN957@sqlite3Pra:
	mov	ecx, ebx
	xor	eax, eax
	call	_freeP3
$LN643@sqlite3Pra:
; Line 52229
	mov	ebx, DWORD PTR [esi+8]
	cmp	ebx, edi
	jne	SHORT $LN181@sqlite3Pra
	mov	ebx, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN181@sqlite3Pra:
	push	edi
	push	edi
	push	88					; 00000058H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [ebp+20]
	add	esp, 12					; 0000000cH
	cmp	ecx, edi
	je	SHORT $LN959@sqlite3Pra
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN669@sqlite3Pra
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN959@sqlite3Pra
$LN669@sqlite3Pra:
	cmp	eax, edi
	jl	SHORT $LN665@sqlite3Pra
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN664@sqlite3Pra
$LN665@sqlite3Pra:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN667@sqlite3Pra
$LN664@sqlite3Pra:
	lea	eax, DWORD PTR [eax+eax*4]
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+16]
	call	_freeP3
	cmp	ebx, edi
	mov	DWORD PTR [esi+12], edi
	jne	SHORT $LN960@sqlite3Pra
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
	mov	esi, DWORD PTR _pCol$97801[esp+56]
	jmp	SHORT $LN667@sqlite3Pra
$LN960@sqlite3Pra:
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL968@sqlite3Pra:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL968@sqlite3Pra
	sub	eax, edx
	mov	edi, eax
	call	_sqlite3StrNDup
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -1
	mov	esi, DWORD PTR _pCol$97801[esp+56]
	xor	edi, edi
	jmp	SHORT $LN667@sqlite3Pra
$LN959@sqlite3Pra:
	mov	ecx, ebx
	xor	eax, eax
	call	_freeP3
$LN667@sqlite3Pra:
; Line 52230
	movzx	ecx, BYTE PTR [esi+16]
	push	edi
	push	ecx
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52231
	mov	eax, DWORD PTR [esi+4]
	add	esp, 12					; 0000000cH
	cmp	eax, edi
	je	SHORT $LN95@sqlite3Pra
	mov	ecx, DWORD PTR [eax+28]
	cmp	ecx, edi
	je	SHORT $LN95@sqlite3Pra
; Line 52232
	mov	edx, DWORD PTR [eax+32]
	shr	edx, 1
	push	edx
	xor	eax, eax
	push	ecx
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+88]
	mov	edi, ebp
	call	_sqlite3VdbeOp3
	add	esp, 8
; Line 52233
	jmp	SHORT $LN94@sqlite3Pra
$LN95@sqlite3Pra:
; Line 52234
	push	edi
	push	edi
	push	122					; 0000007aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN94@sqlite3Pra:
; Line 52236
	movzx	eax, BYTE PTR [esi+17]
	push	0
	push	eax
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52237
	push	0
	push	6
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	eax, DWORD PTR _i$97800[esp+84]
	mov	ecx, DWORD PTR _pTab$97797[esp+84]
	add	eax, 1
	add	esi, 20					; 00000014H
	add	esp, 24					; 00000018H
	cmp	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _i$97800[esp+60], eax
	mov	DWORD PTR _pCol$97801[esp+56], esi
	jl	$LL986@sqlite3Pra
; Line 52240
	jmp	$LN979@sqlite3Pra
$LN101@sqlite3Pra:
; Line 52242
	mov	edx, OFFSET ??_C@_0L@CKPANNIC@index_info?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN92@sqlite3Pra
	test	ebx, ebx
	je	$LN92@sqlite3Pra
; Line 52245
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52246
	mov	edx, DWORD PTR _zDb$[esp+60]
	mov	eax, DWORD PTR tv4161[esp+60]
	mov	ebx, DWORD PTR _zRight$[esp+60]
	push	edx
	push	eax
	call	_sqlite3FindIndex
	add	esp, 8
; Line 52247
	test	eax, eax
	mov	DWORD PTR _pIdx$97818[esp+60], eax
	je	$LN979@sqlite3Pra
; Line 52249
	mov	ecx, DWORD PTR [eax+16]
; Line 52250
	push	3
	mov	ebx, ebp
	mov	DWORD PTR _pTab$97819[esp+64], ecx
	call	_sqlite3VdbeSetNumCols
	add	esp, 4
; Line 52251
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ebx, 162				; 000000a2H
	je	SHORT $LN678@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN974@sqlite3Pra
$LN678@sqlite3Pra:
	mov	esi, DWORD PTR [ebp+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_05OBPGIPLF@seqno?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 5
	mov	WORD PTR [esi+24], bx
$LN974@sqlite3Pra:
; Line 52252
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN719@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN724@sqlite3Pra
$LN719@sqlite3Pra:
	mov	edi, DWORD PTR [ebp+48]
	add	edi, 64					; 00000040H
	push	edi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [edi+16], OFFSET ??_C@_03LBLPCGAC@cid?$AA@
	mov	BYTE PTR [edi+27], 1
	mov	BYTE PTR [edi+26], 3
	mov	DWORD PTR [edi+20], 3
	mov	WORD PTR [edi+24], bx
$LN724@sqlite3Pra:
; Line 52253
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN760@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN765@sqlite3Pra
$LN760@sqlite3Pra:
	mov	esi, DWORD PTR [ebp+48]
	add	esi, 128				; 00000080H
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_04MEMAJGDJ@name?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], 4
	mov	WORD PTR [esi+24], bx
$LN765@sqlite3Pra:
; Line 52254
	mov	edx, DWORD PTR _pIdx$97818[esp+60]
	xor	esi, esi
	cmp	DWORD PTR [edx+4], esi
	mov	DWORD PTR _i$97822[esp+56], esi
	jle	$LN979@sqlite3Pra
$LL89@sqlite3Pra:
; Line 52255
	mov	eax, DWORD PTR _pIdx$97818[esp+60]
	mov	ecx, DWORD PTR [eax+8]
	mov	edi, DWORD PTR [ecx+esi*4]
; Line 52256
	push	0
	push	esi
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52257
	push	0
	push	edi
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52259
	mov	eax, DWORD PTR _pTab$97819[esp+84]
	mov	ecx, DWORD PTR [eax+8]
	push	0
	lea	edx, DWORD PTR [edi+edi*4]
	mov	ebx, DWORD PTR [ecx+edx*4]
	push	0
	push	88					; 00000058H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [ebp+20]
	add	esp, 36					; 00000024H
	test	ecx, ecx
	je	SHORT $LN984@sqlite3Pra
	xor	edi, edi
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN816@sqlite3Pra
	cmp	DWORD PTR _inMutex, edi
	jg	SHORT $LN984@sqlite3Pra
$LN816@sqlite3Pra:
	cmp	eax, edi
	jl	SHORT $LN812@sqlite3Pra
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN975@sqlite3Pra
$LN812@sqlite3Pra:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN985@sqlite3Pra
$LN975@sqlite3Pra:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	cmp	ebx, edi
	mov	DWORD PTR [esi+12], edi
	jne	SHORT $LN962@sqlite3Pra
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
	mov	esi, DWORD PTR _i$97822[esp+56]
	jmp	SHORT $LN985@sqlite3Pra
$LN962@sqlite3Pra:
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
$LL969@sqlite3Pra:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL969@sqlite3Pra
	sub	eax, edx
	mov	edi, eax
	call	_sqlite3StrNDup
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], -1
	mov	esi, DWORD PTR _i$97822[esp+56]
	jmp	SHORT $LN985@sqlite3Pra
$LN984@sqlite3Pra:
	mov	ecx, ebx
	xor	eax, eax
	call	_freeP3
$LN985@sqlite3Pra:
; Line 52260
	push	0
	push	3
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	eax, DWORD PTR _pIdx$97818[esp+72]
	add	esi, 1
	add	esp, 12					; 0000000cH
	cmp	esi, DWORD PTR [eax+4]
	mov	DWORD PTR _i$97822[esp+56], esi
	jl	$LL89@sqlite3Pra
; Line 52263
	jmp	$LN979@sqlite3Pra
$LN92@sqlite3Pra:
; Line 52265
	mov	edx, OFFSET ??_C@_0L@MMBMMAEK@index_list?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN85@sqlite3Pra
	test	ebx, ebx
	je	$LN85@sqlite3Pra
; Line 52268
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52269
	mov	ecx, DWORD PTR _zDb$[esp+60]
	mov	edx, DWORD PTR tv4161[esp+60]
	mov	ebx, DWORD PTR _zRight$[esp+60]
	push	ecx
	push	edx
	call	_sqlite3FindTable
	mov	edi, eax
	add	esp, 8
; Line 52270
	test	edi, edi
	je	$LN979@sqlite3Pra
; Line 52271
	call	_sqlite3GetVdbe
; Line 52272
	mov	esi, DWORD PTR [edi+16]
; Line 52273
	test	esi, esi
	mov	ebp, eax
	mov	DWORD PTR _v$[esp+60], ebp
	je	$LN979@sqlite3Pra
; Line 52275
	push	3
	mov	ebx, ebp
	mov	DWORD PTR _i$97837[esp+60], 0
	call	_sqlite3VdbeSetNumCols
	add	esp, 4
; Line 52276
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	ebx, 162				; 000000a2H
	je	SHORT $LN825@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN976@sqlite3Pra
$LN825@sqlite3Pra:
	mov	edi, DWORD PTR [ebp+48]
	push	edi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [edi+16], OFFSET ??_C@_03NPAJGOON@seq?$AA@
	mov	BYTE PTR [edi+27], 1
	mov	BYTE PTR [edi+26], 3
	mov	DWORD PTR [edi+20], 3
	mov	WORD PTR [edi+24], bx
$LN976@sqlite3Pra:
; Line 52277
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN866@sqlite3Pra
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN871@sqlite3Pra
$LN866@sqlite3Pra:
	mov	edi, DWORD PTR [ebp+48]
	add	edi, 64					; 00000040H
	push	edi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [edi+16], OFFSET ??_C@_04MEMAJGDJ@name?$AA@
	mov	BYTE PTR [edi+27], 1
	mov	BYTE PTR [edi+26], 3
	mov	DWORD PTR [edi+20], 4
	mov	WORD PTR [edi+24], bx
$LN871@sqlite3Pra:
; Line 52278
	mov	ebp, DWORD PTR _v$[esp+60]
	push	0
	push	2
	mov	ebx, -2					; fffffffeH
	mov	edi, OFFSET ??_C@_06ODCMFGLL@unique?$AA@
	mov	eax, ebp
	call	_sqlite3VdbeSetColName
	add	esp, 8
$LL81@sqlite3Pra:
; Line 52280
	mov	ebx, DWORD PTR _i$97837[esp+56]
	push	0
	push	ebx
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52281
	mov	eax, DWORD PTR [esi]
	push	0
	push	eax
	xor	eax, eax
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+88]
	mov	edi, ebp
	call	_sqlite3VdbeOp3
; Line 52282
	xor	ecx, ecx
	cmp	BYTE PTR [esi+24], cl
	push	0
	setne	cl
	mov	eax, ebp
	push	ecx
	push	47					; 0000002fH
	call	_sqlite3VdbeAddOp
; Line 52283
	push	0
	push	3
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52285
	mov	esi, DWORD PTR [esi+32]
	add	ebx, 1
	add	esp, 44					; 0000002cH
	test	esi, esi
	mov	DWORD PTR _i$97837[esp+56], ebx
	jne	SHORT $LL81@sqlite3Pra
; Line 52289
	jmp	$LN979@sqlite3Pra
$LN85@sqlite3Pra:
; Line 52291
	mov	edx, OFFSET ??_C@_0O@EBMNDACF@database_list?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN78@sqlite3Pra
; Line 52293
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52294
	push	3
	mov	ebx, ebp
	call	_sqlite3VdbeSetNumCols
; Line 52295
	push	0
	push	0
	mov	ebx, -2					; fffffffeH
	mov	edi, OFFSET ??_C@_03NPAJGOON@seq?$AA@
	mov	eax, ebp
	call	_sqlite3VdbeSetColName
; Line 52296
	push	0
	push	1
	mov	edi, OFFSET ??_C@_04MEMAJGDJ@name?$AA@
	mov	eax, ebp
	call	_sqlite3VdbeSetColName
; Line 52297
	push	0
	push	2
	mov	edi, OFFSET ??_C@_04DAMGJPCA@file?$AA@
	mov	eax, ebp
	call	_sqlite3VdbeSetColName
; Line 52298
	mov	edx, DWORD PTR tv4161[esp+88]
	add	esp, 28					; 0000001cH
	cmp	DWORD PTR [edx], 0
	mov	DWORD PTR _i$97846[esp+56], 0
	jle	$LN979@sqlite3Pra
	xor	esi, esi
	mov	ebx, edx
	npad	1
$LL990@sqlite3Pra:
; Line 52299
	mov	eax, DWORD PTR [ebx+4]
	cmp	DWORD PTR [esi+eax+4], 0
	je	SHORT $LN75@sqlite3Pra
; Line 52301
	mov	ecx, DWORD PTR _i$97846[esp+56]
	push	0
	push	ecx
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52302
	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [esi+edx]
	push	0
	push	eax
	xor	eax, eax
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+88]
	mov	edi, ebp
	call	_sqlite3VdbeOp3
; Line 52304
	mov	ecx, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [esi+ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	push	0
	xor	eax, eax
	push	edx
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+88]
	call	_sqlite3VdbeOp3
; Line 52305
	push	0
	push	3
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 40					; 00000028H
$LN75@sqlite3Pra:
	mov	eax, DWORD PTR _i$97846[esp+56]
	add	eax, 1
	add	esi, 24					; 00000018H
	cmp	eax, DWORD PTR [ebx]
	mov	DWORD PTR _i$97846[esp+56], eax
	jl	SHORT $LL990@sqlite3Pra
; Line 52307
	jmp	$LN979@sqlite3Pra
$LN78@sqlite3Pra:
; Line 52309
	mov	edx, OFFSET ??_C@_0P@KOJNIGCH@collation_list?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN71@sqlite3Pra
; Line 52312
	push	2
	mov	ebx, ebp
	xor	esi, esi
	call	_sqlite3VdbeSetNumCols
; Line 52313
	push	esi
	push	esi
	lea	ebx, DWORD PTR [esi-2]
	mov	edi, OFFSET ??_C@_03NPAJGOON@seq?$AA@
	mov	eax, ebp
	call	_sqlite3VdbeSetColName
; Line 52314
	push	esi
	push	1
	mov	edi, OFFSET ??_C@_04MEMAJGDJ@name?$AA@
	mov	eax, ebp
	call	_sqlite3VdbeSetColName
; Line 52315
	mov	eax, DWORD PTR tv4161[esp+80]
	mov	ebx, DWORD PTR [eax+256]
	add	esp, 20					; 00000014H
	test	ebx, ebx
	je	$LN979@sqlite3Pra
	npad	6
$LL70@sqlite3Pra:
; Line 52316
	mov	edi, DWORD PTR [ebx+8]
; Line 52317
	push	0
	push	esi
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52318
	mov	ecx, DWORD PTR [edi]
	push	0
	xor	eax, eax
	push	ecx
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+88]
	mov	edi, ebp
	add	esi, 1
	call	_sqlite3VdbeOp3
; Line 52319
	push	0
	push	2
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	ebx, DWORD PTR [ebx]
	add	esp, 32					; 00000020H
	test	ebx, ebx
	jne	SHORT $LL70@sqlite3Pra
; Line 52321
	jmp	$LN979@sqlite3Pra
$LN71@sqlite3Pra:
; Line 52325
	mov	edx, OFFSET ??_C@_0BB@KJMCGNAI@foreign_key_list?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN66@sqlite3Pra
	test	ebx, ebx
	je	$LN66@sqlite3Pra
; Line 52328
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52329
	mov	edx, DWORD PTR _zDb$[esp+60]
	mov	eax, DWORD PTR tv4161[esp+60]
	mov	ebx, DWORD PTR _zRight$[esp+60]
	push	edx
	push	eax
	call	_sqlite3FindTable
	mov	edi, eax
	add	esp, 8
; Line 52330
	test	edi, edi
	mov	DWORD PTR _pTab$97867[esp+60], edi
	je	$LN979@sqlite3Pra
; Line 52331
	call	_sqlite3GetVdbe
; Line 52332
	mov	ebp, DWORD PTR [edi+36]
; Line 52333
	test	ebp, ebp
	mov	DWORD PTR _v$[esp+60], eax
	je	$LN979@sqlite3Pra
; Line 52335
	mov	esi, eax
	push	5
	mov	ebx, esi
	mov	DWORD PTR _i$97871[esp+60], 0
	call	_sqlite3VdbeSetNumCols
; Line 52336
	push	0
	push	0
	mov	ebx, -2					; fffffffeH
	mov	edi, OFFSET ??_C@_02EGCJHIOB@id?$AA@
	mov	eax, esi
	call	_sqlite3VdbeSetColName
; Line 52337
	push	0
	push	1
	mov	edi, OFFSET ??_C@_03NPAJGOON@seq?$AA@
	mov	eax, esi
	call	_sqlite3VdbeSetColName
; Line 52338
	push	0
	push	2
	mov	edi, OFFSET ??_C@_05LCLENNFI@table?$AA@
	mov	eax, esi
	call	_sqlite3VdbeSetColName
; Line 52339
	push	0
	push	3
	mov	edi, OFFSET ??_C@_04HNEBHLOP@from?$AA@
	mov	eax, esi
	call	_sqlite3VdbeSetColName
; Line 52340
	push	0
	push	4
	mov	edi, OFFSET ??_C@_02LBCDJBAJ@to?$AA@
	mov	eax, esi
	call	_sqlite3VdbeSetColName
	add	esp, 44					; 0000002cH
	mov	edi, esi
$LL62@sqlite3Pra:
; Line 52343
	xor	esi, esi
	cmp	DWORD PTR [ebp+16], esi
	jle	$LN58@sqlite3Pra
	npad	3
$LL981@sqlite3Pra:
; Line 52345
	mov	eax, DWORD PTR _i$97871[esp+56]
	mov	ecx, DWORD PTR [ebp+20]
	mov	edx, DWORD PTR [ecx+esi*8+4]
	push	0
	push	eax
	push	47					; 0000002fH
	mov	eax, edi
	mov	DWORD PTR _zCol$97882[esp+72], edx
	call	_sqlite3VdbeAddOp
; Line 52346
	push	0
	push	esi
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 52347
	mov	ecx, DWORD PTR [ebp+8]
	push	0
	xor	eax, eax
	push	ecx
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+88]
	call	_sqlite3VdbeOp3
; Line 52349
	mov	edx, DWORD PTR [ebp+20]
	mov	eax, DWORD PTR [edx+esi*8]
	mov	ecx, DWORD PTR _pTab$97867[esp+92]
	mov	edx, DWORD PTR [ecx+8]
	lea	eax, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edx+eax*4]
	push	0
	push	eax
	xor	eax, eax
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+88]
	call	_sqlite3VdbeOp3
; Line 52350
	mov	edx, DWORD PTR _zCol$97882[esp+100]
	push	0
	push	edx
	neg	edx
	sbb	edx, edx
	and	edx, -34				; ffffffdeH
	add	edx, 122				; 0000007aH
	xor	eax, eax
	xor	ecx, ecx
	call	_sqlite3VdbeOp3
; Line 52351
	push	0
	push	5
	push	58					; 0000003aH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esi, 1
	add	esp, 60					; 0000003cH
	cmp	esi, DWORD PTR [ebp+16]
	jl	$LL981@sqlite3Pra
$LN58@sqlite3Pra:
; Line 52354
	mov	ebp, DWORD PTR [ebp+4]
	add	DWORD PTR _i$97871[esp+56], 1
	test	ebp, ebp
	jne	$LL62@sqlite3Pra
; Line 52358
	jmp	$LN979@sqlite3Pra
$LN66@sqlite3Pra:
; Line 52376
	mov	edx, OFFSET ??_C@_0BE@LKBHCIHN@case_sensitive_like?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN56@sqlite3Pra
; Line 52377
	test	ebx, ebx
	je	$LN979@sqlite3Pra
; Line 52378
	mov	ebx, DWORD PTR _zRight$[esp+60]
	call	_getSafetyLevel
	mov	esi, DWORD PTR tv4161[esp+60]
	and	eax, 1
	push	eax
	call	_sqlite3RegisterLikeFunctions
	add	esp, 4
; Line 52380
	jmp	$LN979@sqlite3Pra
$LN56@sqlite3Pra:
; Line 52387
	mov	edx, OFFSET ??_C@_0BA@EDNFHOBJ@integrity_check?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN53@sqlite3Pra
; Line 52403
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52404
	push	1
	mov	ebx, ebp
	call	_sqlite3VdbeSetNumCols
; Line 52405
	push	0
	push	0
	mov	ebx, -2					; fffffffeH
	mov	edi, OFFSET ??_C@_0BA@EDNFHOBJ@integrity_check?$AA@
	mov	eax, ebp
	call	_sqlite3VdbeSetColName
; Line 52409
	mov	ecx, DWORD PTR _zRight$[esp+72]
	xor	esi, esi
	add	esp, 12					; 0000000cH
	cmp	ecx, esi
	mov	eax, 100				; 00000064H
	mov	DWORD PTR _mxErr$97893[esp+60], eax
	je	SHORT $LN50@sqlite3Pra
; Line 52410
	push	ecx
	call	_atoi
	add	esp, 4
; Line 52411
	cmp	eax, esi
	mov	DWORD PTR _mxErr$97893[esp+60], eax
	jg	SHORT $LN50@sqlite3Pra
; Line 52412
	mov	eax, 100				; 00000064H
	mov	DWORD PTR _mxErr$97893[esp+60], eax
$LN50@sqlite3Pra:
; Line 52415
	push	esi
	push	eax
	push	48					; 00000030H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52418
	mov	ecx, DWORD PTR tv4161[esp+72]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [ecx], esi
	mov	DWORD PTR _i$97890[esp+60], esi
	jle	$LN47@sqlite3Pra
	mov	DWORD PTR tv6071[esp+60], esi
	mov	ebx, esi
$LL977@sqlite3Pra:
; Line 52425
	mov	esi, DWORD PTR _pParse$[esp+56]
	xor	edi, edi
	call	_sqlite3CodeVerifySchema
; Line 52426
	push	edi
	push	edi
	push	5
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52427
	push	edi
	mov	esi, eax
	push	edi
	push	36					; 00000024H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 52428
	mov	eax, esi
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
; Line 52432
	mov	edx, DWORD PTR tv4161[esp+60]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR tv6071[esp+60]
	mov	ebx, DWORD PTR [ecx+eax+20]
; Line 52433
	mov	eax, DWORD PTR [ebx+12]
	add	ebx, 4
	test	eax, eax
	mov	DWORD PTR _x$97903[esp+60], eax
	je	$LN48@sqlite3Pra
$LL45@sqlite3Pra:
; Line 52434
	mov	edx, DWORD PTR _x$97903[esp+60]
	mov	esi, DWORD PTR [edx+8]
; Line 52436
	mov	eax, DWORD PTR [esi+20]
	push	0
	push	eax
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52438
	mov	esi, DWORD PTR [esi+16]
	add	esp, 12					; 0000000cH
	add	edi, 1
	test	esi, esi
	je	SHORT $LN44@sqlite3Pra
$LL42@sqlite3Pra:
; Line 52439
	mov	ecx, DWORD PTR [esi+20]
	push	0
	push	ecx
	push	47					; 0000002fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR [esi+32]
	add	esp, 12					; 0000000cH
; Line 52440
	add	edi, 1
	test	esi, esi
	jne	SHORT $LL42@sqlite3Pra
$LN44@sqlite3Pra:
; Line 52433
	mov	edx, DWORD PTR _x$97903[esp+60]
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	mov	DWORD PTR _x$97903[esp+60], eax
	jne	SHORT $LL45@sqlite3Pra
; Line 52443
	test	edi, edi
	je	$LN48@sqlite3Pra
; Line 52444
	mov	eax, DWORD PTR _i$97890[esp+60]
	push	eax
	push	0
	push	18					; 00000012H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52445
	push	0
	push	-1
	push	65					; 00000041H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52448
	mov	ecx, DWORD PTR tv4161[esp+84]
	mov	edx, DWORD PTR [ecx+4]
	add	esp, 24					; 00000018H
	mov	esi, eax
	mov	eax, DWORD PTR tv6071[esp+60]
	mov	ecx, DWORD PTR [eax+edx]
	push	-1
	push	ecx
	push	OFFSET ??_C@_0BI@FOLPKNAK@?$CK?$CK?$CK?5in?5database?5?$CFs?5?$CK?$CK?$CK?6?$AA@
	call	_sqlite3MPrintf
	add	esp, 8
	push	eax
	xor	eax, eax
	xor	ecx, ecx
	lea	edx, DWORD PTR [eax+88]
	mov	edi, ebp
	call	_sqlite3VdbeOp3
; Line 52449
	push	0
	push	1
	push	103					; 00000067H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52450
	push	0
	push	0
	push	83					; 00000053H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52451
	push	0
	push	1
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 44					; 0000002cH
; Line 52452
	mov	eax, esi
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
; Line 52456
	mov	ebx, DWORD PTR [ebx+8]
	test	ebx, ebx
	mov	DWORD PTR _x$97903[esp+60], ebx
	je	$LN48@sqlite3Pra
	npad	7
$LL38@sqlite3Pra:
; Line 52457
	mov	edx, DWORD PTR _x$97903[esp+60]
	mov	edi, DWORD PTR [edx+8]
; Line 52461
	cmp	DWORD PTR [edi+16], 0
	mov	DWORD PTR _pTab$97920[esp+60], edi
	je	$LN37@sqlite3Pra
; Line 52462
	push	0
	push	0
	push	5
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52463
	push	0
	mov	esi, eax
	push	0
	push	36					; 00000024H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52464
	mov	eax, esi
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
; Line 52465
	mov	eax, DWORD PTR _pParse$[esp+80]
	push	14					; 0000000eH
	push	1
	push	eax
	mov	eax, edi
	call	_sqlite3OpenTableAndIndices
; Line 52466
	push	1
	push	0
	push	48					; 00000030H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52467
	push	0
	push	1
	push	127					; 0000007fH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52468
	push	1
	mov	DWORD PTR _loopTop$97922[esp+124], eax
	push	1
	push	45					; 0000002dH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52469
	mov	edi, DWORD PTR [edi+16]
	add	esp, 72					; 00000048H
	test	edi, edi
	je	SHORT $LN32@sqlite3Pra
; Line 52462
	mov	ebx, 2
$LL34@sqlite3Pra:
; Line 52480
	push	1
	push	edi
	mov	esi, ebp
	call	_sqlite3GenerateIndexKey
; Line 52481
	push	0
	push	ebx
	push	134					; 00000086H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52482
	push	OFFSET ?idxErr@?EP@??sqlite3Pragma@@9@9
	push	7
	push	ebp
	mov	esi, eax
	call	_sqlite3VdbeAddOpList
; Line 52483
	mov	ecx, DWORD PTR [edi]
	push	ecx
	add	eax, 4
	mov	edx, -2					; fffffffeH
	mov	ecx, ebp
	call	_sqlite3VdbeChangeP3
	add	esp, 36					; 00000024H
; Line 52484
	mov	eax, esi
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
	mov	edi, DWORD PTR [edi+32]
	add	ebx, 1
	test	edi, edi
	jne	SHORT $LL34@sqlite3Pra
$LN32@sqlite3Pra:
; Line 52486
	mov	esi, DWORD PTR _loopTop$97922[esp+60]
	lea	edx, DWORD PTR [esi+1]
	push	edx
	push	1
	push	110					; 0000006eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 52487
	mov	eax, esi
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
; Line 52488
	mov	eax, DWORD PTR _pTab$97920[esp+60]
	mov	ebx, DWORD PTR [eax+16]
	test	ebx, ebx
	je	$LN37@sqlite3Pra
; Line 52486
	mov	DWORD PTR tv6066[esp+60], 2
	npad	6
$LL31@sqlite3Pra:
; Line 52503
	cmp	DWORD PTR [ebx+20], 0
	je	$LN30@sqlite3Pra
; Line 52504
	push	0
	push	0
	push	5
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52505
	push	0
	mov	esi, eax
	push	0
	push	36					; 00000024H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 52506
	mov	eax, esi
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
; Line 52507
	push	OFFSET ?cntIdx@?FA@??sqlite3Pragma@@9@9
	push	12					; 0000000cH
	push	ebp
	call	_sqlite3VdbeAddOpList
; Line 52508
	mov	edx, DWORD PTR tv6066[esp+96]
	mov	esi, eax
	lea	edi, DWORD PTR [esi+1]
	mov	ecx, edi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP1
; Line 52509
	lea	edx, DWORD PTR [esi+4]
	mov	ecx, edi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP2
; Line 52510
	mov	edx, DWORD PTR tv6066[esp+96]
	lea	edi, DWORD PTR [esi+3]
	mov	ecx, edi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP1
; Line 52511
	lea	edx, DWORD PTR [esi+2]
	mov	ecx, edi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP2
; Line 52512
	lea	eax, DWORD PTR [esi+6]
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
; Line 52513
	mov	ecx, DWORD PTR [ebx]
	push	ecx
	lea	eax, DWORD PTR [esi+9]
	mov	edx, -2					; fffffffeH
	mov	ecx, ebp
	call	_sqlite3VdbeChangeP3
	add	esp, 40					; 00000028H
$LN30@sqlite3Pra:
	mov	ebx, DWORD PTR [ebx+32]
	add	DWORD PTR tv6066[esp+60], 1
	test	ebx, ebx
	jne	$LL31@sqlite3Pra
$LN37@sqlite3Pra:
; Line 52456
	mov	edx, DWORD PTR _x$97903[esp+60]
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	mov	DWORD PTR _x$97903[esp+60], eax
	jne	$LL38@sqlite3Pra
$LN48@sqlite3Pra:
; Line 52418
	mov	ebx, DWORD PTR _i$97890[esp+60]
	mov	eax, DWORD PTR tv4161[esp+60]
	add	DWORD PTR tv6071[esp+60], 24		; 00000018H
	add	ebx, 1
	cmp	ebx, DWORD PTR [eax]
	mov	DWORD PTR _i$97890[esp+60], ebx
	jl	$LL977@sqlite3Pra
$LN47@sqlite3Pra:
; Line 52517
	push	OFFSET ?endCode@?EI@??sqlite3Pragma@@9@9
	push	5
	push	ebp
	call	_sqlite3VdbeAddOpList
; Line 52518
	mov	edx, DWORD PTR _mxErr$97893[esp+72]
	mov	esi, eax
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [esi+1]
	mov	eax, ebp
	call	_sqlite3VdbeChangeP1
; Line 52519
	lea	eax, DWORD PTR [esi+2]
	mov	ecx, ebp
	call	_sqlite3VdbeJumpHere
; Line 52520
	jmp	$LN979@sqlite3Pra
$LN53@sqlite3Pra:
; Line 52546
	mov	edx, OFFSET ??_C@_08MLPGAEIK@encoding?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN26@sqlite3Pra
; Line 52562
	test	ebx, ebx
	jne	$LN25@sqlite3Pra
; Line 52563
	mov	esi, DWORD PTR _pParse$[esp+56]
	call	_sqlite3ReadSchema
	test	eax, eax
	jne	$pragma_out$97699
; Line 52564
	push	1
	mov	ebx, ebp
	call	_sqlite3VdbeSetNumCols
; Line 52565
	push	0
	push	0
	mov	ebx, -2					; fffffffeH
	mov	edi, OFFSET ??_C@_08MLPGAEIK@encoding?$AA@
	mov	eax, ebp
	call	_sqlite3VdbeSetColName
; Line 52566
	push	0
	push	0
	push	88					; 00000058H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
; Line 52567
	cmp	DWORD PTR ?encnames@?FB@??sqlite3Pragma@@9@9, 0
	mov	eax, OFFSET ?encnames@?FB@??sqlite3Pragma@@9@9
	je	SHORT $LN21@sqlite3Pra
	mov	ecx, esi
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	cl, BYTE PTR [edx+121]
$LL23@sqlite3Pra:
; Line 52568
	cmp	BYTE PTR [eax+4], cl
	je	SHORT $LN935@sqlite3Pra
	add	eax, 8
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LL23@sqlite3Pra
; Line 52585
	jmp	SHORT $LN21@sqlite3Pra
$LN935@sqlite3Pra:
; Line 52569
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	edx, ebx
	or	eax, -1
	mov	ecx, ebp
	call	_sqlite3VdbeChangeP3
	add	esp, 4
$LN21@sqlite3Pra:
; Line 52573
	push	0
	push	1
	push	58					; 0000003aH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 52574
	jmp	$LN979@sqlite3Pra
$LN25@sqlite3Pra:
; Line 52583
	mov	ecx, DWORD PTR tv4161[esp+60]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+20]
	movzx	eax, WORD PTR [eax+122]
	test	al, 1
	je	SHORT $LN17@sqlite3Pra
	test	al, 4
	je	$LN979@sqlite3Pra
	mov	ebx, DWORD PTR _zRight$[esp+60]
$LN17@sqlite3Pra:
; Line 52584
	mov	edx, DWORD PTR ?encnames@?FB@??sqlite3Pragma@@9@9
	test	edx, edx
	mov	esi, OFFSET ?encnames@?FB@??sqlite3Pragma@@9@9
	je	SHORT $LN963@sqlite3Pra
	npad	5
$LL16@sqlite3Pra:
; Line 52585
	mov	ecx, ebx
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN936@sqlite3Pra
	mov	edx, DWORD PTR [esi+8]
	add	esi, 8
	test	edx, edx
	jne	SHORT $LL16@sqlite3Pra
	jmp	SHORT $LN963@sqlite3Pra
$LN936@sqlite3Pra:
; Line 52586
	mov	al, BYTE PTR [esi+4]
	test	al, al
	movzx	eax, al
	jne	SHORT $LN183@sqlite3Pra
	mov	eax, 2
$LN183@sqlite3Pra:
	mov	ecx, DWORD PTR _pParse$[esp+56]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	BYTE PTR [edx+121], al
; Line 52590
	cmp	DWORD PTR [esi], 0
	jne	$LN979@sqlite3Pra
	mov	ebx, DWORD PTR _zRight$[esp+60]
$LN963@sqlite3Pra:
; Line 52591
	mov	edi, DWORD PTR _pParse$[esp+56]
	push	ebx
	push	OFFSET ??_C@_0BJ@GJBMJNNI@unsupported?5encoding?3?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 52595
	jmp	$LN979@sqlite3Pra
$LN26@sqlite3Pra:
; Line 52625
	mov	edx, OFFSET ??_C@_0P@JGMMHBPP@schema_version?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN9@sqlite3Pra
	mov	edx, OFFSET ??_C@_0N@MPKCHLKL@user_version?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN979@sqlite3Pra
	mov	esi, DWORD PTR _zLeft$[esp+60]
$LN9@sqlite3Pra:
; Line 52628
	mov	al, BYTE PTR [esi]
	cmp	al, 115					; 00000073H
	je	SHORT $LN7@sqlite3Pra
	cmp	al, 83					; 00000053H
	je	SHORT $LN7@sqlite3Pra
; Line 52631
	mov	ebx, 5
	jmp	SHORT $LN6@sqlite3Pra
$LN7@sqlite3Pra:
; Line 52629
	xor	ebx, ebx
$LN6@sqlite3Pra:
; Line 52634
	cmp	DWORD PTR _zRight$[esp+60], 0
	je	SHORT $LN5@sqlite3Pra
; Line 52641
	push	OFFSET ?setCookie@?FN@??sqlite3Pragma@@9@9
	push	3
	push	ebp
	call	_sqlite3VdbeAddOpList
	mov	esi, eax
; Line 52642
	mov	edx, edi
	mov	ecx, esi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP1
; Line 52643
	mov	eax, DWORD PTR _zRight$[esp+72]
	push	eax
	call	_atoi
	mov	edx, eax
	add	esp, 16					; 00000010H
	lea	ecx, DWORD PTR [esi+1]
	mov	eax, ebp
	call	_sqlite3VdbeChangeP1
; Line 52644
	add	esi, 2
	mov	edx, edi
	mov	ecx, esi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP1
; Line 52645
	mov	edx, ebx
	mov	ecx, esi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP2
; Line 52646
	jmp	SHORT $LN979@sqlite3Pra
$LN5@sqlite3Pra:
; Line 52652
	push	OFFSET ?readCookie@?FO@??sqlite3Pragma@@9@9
	push	2
	push	ebp
	call	_sqlite3VdbeAddOpList
	mov	esi, eax
; Line 52653
	mov	edx, edi
	mov	ecx, esi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP1
; Line 52654
	mov	edx, ebx
	mov	ecx, esi
	mov	eax, ebp
	call	_sqlite3VdbeChangeP2
; Line 52655
	push	1
	mov	ebx, ebp
	call	_sqlite3VdbeSetNumCols
; Line 52656
	mov	edi, DWORD PTR _zLeft$[esp+76]
	push	0
	push	0
	mov	ebx, -9					; fffffff7H
	mov	eax, ebp
	call	_sqlite3VdbeSetColName
	add	esp, 24					; 00000018H
$LN979@sqlite3Pra:
; Line 52727
	mov	eax, DWORD PTR _v$[esp+60]
	test	eax, eax
	je	SHORT $pragma_out$97699
; Line 52732
	push	0
	push	1
	push	15					; 0000000fH
	call	_sqlite3VdbeAddOp
; Line 52739
	mov	ecx, DWORD PTR tv4161[esp+72]
	add	esp, 12					; 0000000cH
	cmp	BYTE PTR [ecx+20], 0
	je	SHORT $pragma_out$97699
; Line 52741
	mov	edx, ecx
	movzx	eax, BYTE PTR [edx+10]
	and	eax, 1
	push	eax
	mov	eax, DWORD PTR _pDb$[esp+64]
	movzx	ecx, BYTE PTR [eax+9]
	mov	eax, DWORD PTR [eax+4]
	call	_sqlite3BtreeSetSafetyLevel
$LN992@sqlite3Pra:
	add	esp, 4
$pragma_out$97699:
; Line 52746
	mov	ecx, DWORD PTR _zLeft$[esp+60]
	push	ecx
	call	_free
; Line 52747
	mov	eax, DWORD PTR _zRight$[esp+64]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN917@sqlite3Pra
	push	eax
	call	_free
	add	esp, 4
$LN917@sqlite3Pra:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 52748
	add	esp, 44					; 0000002cH
	ret	0
_sqlite3Pragma ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@KMEMLEEO@rows?5updated?$AA@		; `string'
;	COMDAT ??_C@_0N@KMEMLEEO@rows?5updated?$AA@
CONST	SEGMENT
??_C@_0N@KMEMLEEO@rows?5updated?$AA@ DB 'rows updated', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Update
_TEXT	SEGMENT
_pTab$ = -128						; size = 4
_iCur$ = -124						; size = 4
_addr$ = -120						; size = 4
tv3871 = -116						; size = 4
_pIdx$ = -116						; size = 4
tv3970 = -112						; size = 4
_nIdx$ = -112						; size = 4
_i$ = -112						; size = 4
_chngRowid$ = -108					; size = 4
_aXRef$ = -104						; size = 4
_newIdx$ = -100						; size = 4
_oldIdx$ = -96						; size = 4
_iDb$ = -92						; size = 4
_isView$ = -88						; size = 4
_openAll$ = -84						; size = 4
_aIdxUsed$ = -80					; size = 4
_pRowidExpr$ = -76					; size = 4
_triggers_exist$ = -72					; size = 4
_db$ = -68						; size = 4
_apIdx$ = -64						; size = 4
_memCnt$ = -60						; size = 4
tv3882 = -56						; size = 4
_i$145049 = -56						; size = 4
_pKey$100286 = -56					; size = 4
tv2036 = -52						; size = 4
tv3874 = -48						; size = 4
$T144355 = -48						; size = 4
_sContext$ = -44					; size = 8
_sNC$ = -36						; size = 36
_pParse$ = 8						; size = 4
_pTabList$ = 12						; size = 4
_pChanges$ = 16						; size = 4
_pWhere$ = 20						; size = 4
_onError$ = 24						; size = 4
_sqlite3Update PROC					; COMDAT
; Line 58032
	sub	esp, 128				; 00000080H
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _pParse$[esp+132]
	push	esi
; Line 58035
	xor	esi, esi
; Line 58061
	or	eax, -1
; Line 58065
	cmp	DWORD PTR [ebp+24], esi
	push	edi
	mov	DWORD PTR _addr$[esp+144], esi
	mov	DWORD PTR _apIdx$[esp+144], esi
	mov	DWORD PTR _aIdxUsed$[esp+144], esi
	mov	DWORD PTR _pRowidExpr$[esp+144], esi
	mov	DWORD PTR _openAll$[esp+144], esi
	mov	DWORD PTR _memCnt$[esp+144], esi
	mov	DWORD PTR _newIdx$[esp+144], eax
	mov	DWORD PTR _oldIdx$[esp+144], eax
	mov	DWORD PTR _sContext$[esp+148], esi
	jne	$LN700@sqlite3Upd
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN111@sqlite3Upd
	cmp	DWORD PTR _inMutex, esi
	jg	$LN700@sqlite3Upd
$LN111@sqlite3Upd:
; Line 58073
	mov	ecx, DWORD PTR _pTabList$[esp+140]
	mov	eax, DWORD PTR [ebp]
	push	ecx
	push	ebp
	mov	DWORD PTR _db$[esp+152], eax
	call	_sqlite3SrcListLookup
	mov	edi, eax
	add	esp, 8
; Line 58074
	cmp	edi, esi
	mov	DWORD PTR _pTab$[esp+144], edi
	je	$LN700@sqlite3Upd
; Line 58075
	mov	esi, DWORD PTR [edi+76]
	mov	ecx, DWORD PTR [ebp]
	call	_sqlite3SchemaToIndex
; Line 58081
	mov	ebx, DWORD PTR _pChanges$[esp+140]
	mov	DWORD PTR _iDb$[esp+144], eax
	push	100					; 00000064H
	mov	eax, edi
	call	_sqlite3TriggersExist
; Line 58082
	xor	edx, edx
	cmp	DWORD PTR [edi+24], edx
	mov	esi, eax
	setne	dl
; Line 58092
	push	esi
	mov	eax, edi
	mov	ecx, ebp
	mov	DWORD PTR _triggers_exist$[esp+152], esi
	mov	DWORD PTR _isView$[esp+152], edx
	call	_sqlite3IsReadOnly
	add	esp, 8
	test	eax, eax
	jne	$LN700@sqlite3Upd
; Line 58095
	push	edi
	push	ebp
	call	_sqlite3ViewGetColumnNames
	add	esp, 8
	test	eax, eax
	jne	$LN700@sqlite3Upd
; Line 58098
	mov	ecx, DWORD PTR [edi+4]
	add	ecx, ecx
	add	ecx, ecx
	call	_sqlite3MallocRaw
	mov	ecx, eax
; Line 58099
	test	ecx, ecx
	mov	DWORD PTR _aXRef$[esp+144], ecx
	je	$LN700@sqlite3Upd
; Line 58100
	xor	ebx, ebx
	xor	eax, eax
	cmp	DWORD PTR [edi+4], ebx
	jle	SHORT $LN103@sqlite3Upd
	npad	8
$LL105@sqlite3Upd:
	mov	DWORD PTR [ecx+eax*4], -1
	add	eax, 1
	cmp	eax, DWORD PTR [edi+4]
	jl	SHORT $LL105@sqlite3Upd
$LN103@sqlite3Upd:
; Line 58105
	cmp	esi, ebx
	je	SHORT $LN102@sqlite3Upd
; Line 58106
	mov	eax, DWORD PTR [ebp+28]
	mov	DWORD PTR _newIdx$[esp+144], eax
	add	eax, 1
	mov	DWORD PTR _oldIdx$[esp+144], eax
; Line 58107
	add	eax, 1
	mov	DWORD PTR [ebp+28], eax
$LN102@sqlite3Upd:
; Line 58115
	mov	eax, DWORD PTR [ebp+28]
	mov	edx, DWORD PTR _pTabList$[esp+140]
	mov	DWORD PTR [edx+32], eax
	add	DWORD PTR [ebp+28], 1
	mov	ecx, DWORD PTR [ebp+28]
	mov	DWORD PTR _iCur$[esp+144], eax
; Line 58116
	mov	eax, DWORD PTR [edi+16]
	cmp	eax, ebx
	je	SHORT $LN99@sqlite3Upd
$LL101@sqlite3Upd:
; Line 58117
	add	ecx, 1
	mov	DWORD PTR [ebp+28], ecx
	mov	eax, DWORD PTR [eax+32]
	cmp	eax, ebx
	jne	SHORT $LL101@sqlite3Upd
$LN99@sqlite3Upd:
; Line 58121
	xor	eax, eax
	mov	DWORD PTR _sNC$[esp+144], eax
	mov	DWORD PTR _sNC$[esp+148], eax
	mov	DWORD PTR _sNC$[esp+152], eax
	mov	DWORD PTR _sNC$[esp+156], eax
	mov	DWORD PTR _sNC$[esp+160], eax
	mov	DWORD PTR _sNC$[esp+164], eax
	mov	DWORD PTR _sNC$[esp+168], eax
	mov	DWORD PTR _sNC$[esp+172], eax
	mov	DWORD PTR _sNC$[esp+176], eax
; Line 58132
	mov	eax, DWORD PTR _pChanges$[esp+140]
	cmp	DWORD PTR [eax], ebx
	mov	DWORD PTR _sNC$[esp+144], ebp
	mov	DWORD PTR _sNC$[esp+148], edx
	mov	DWORD PTR _chngRowid$[esp+144], ebx
	mov	DWORD PTR _i$[esp+144], ebx
	jle	$LN96@sqlite3Upd
; Line 58121
	mov	DWORD PTR tv3871[esp+144], ebx
	npad	8
$LL98@sqlite3Upd:
; Line 58133
	mov	ecx, DWORD PTR _pChanges$[esp+140]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR tv3871[esp+144]
	mov	ebx, DWORD PTR [eax+edx]
	lea	esi, DWORD PTR _sNC$[esp+144]
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN699@sqlite3Upd
; Line 58136
	mov	ecx, DWORD PTR _pTab$[esp+144]
	mov	eax, DWORD PTR [ecx+4]
	xor	edi, edi
	test	eax, eax
	mov	DWORD PTR tv2036[esp+144], eax
	jle	$LN624@sqlite3Upd
	mov	edx, DWORD PTR _pChanges$[esp+140]
	mov	eax, DWORD PTR [edx+12]
; Line 58142
	mov	edx, DWORD PTR tv3871[esp+144]
	mov	esi, DWORD PTR [ecx+8]
	add	eax, edx
	mov	DWORD PTR tv3874[esp+144], eax
; Line 58187
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR tv3882[esp+144], eax
$LL759@sqlite3Upd:
	mov	ecx, DWORD PTR [esi]
	mov	al, BYTE PTR [ecx]
	test	al, al
	mov	edx, DWORD PTR tv3882[esp+144]
	je	SHORT $LN749@sqlite3Upd
; Line 58137
$LL117@sqlite3Upd:
	movzx	ebx, BYTE PTR [edx]
	movzx	eax, al
	mov	al, BYTE PTR _sqlite3UpperToLower[eax]
	cmp	al, BYTE PTR _sqlite3UpperToLower[ebx]
	jne	SHORT $LN749@sqlite3Upd
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL117@sqlite3Upd
$LN749@sqlite3Upd:
	movzx	edx, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[edx]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[ecx]
	sub	edx, eax
	je	SHORT $LN592@sqlite3Upd
	add	edi, 1
	add	esi, 20					; 00000014H
	cmp	edi, DWORD PTR tv2036[esp+144]
	jl	SHORT $LL759@sqlite3Upd
; Line 58346
	mov	ecx, DWORD PTR _pTab$[esp+144]
	jmp	SHORT $LN624@sqlite3Upd
$LN592@sqlite3Upd:
; Line 58138
	mov	ecx, DWORD PTR _pTab$[esp+144]
	cmp	edi, DWORD PTR [ecx+12]
	jne	SHORT $LN623@sqlite3Upd
; Line 58140
	mov	eax, DWORD PTR tv3874[esp+144]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _chngRowid$[esp+144], 1
	mov	DWORD PTR _pRowidExpr$[esp+144], edx
$LN623@sqlite3Upd:
; Line 58142
	mov	eax, DWORD PTR _aXRef$[esp+144]
	mov	edx, DWORD PTR _i$[esp+144]
	mov	DWORD PTR [eax+edi*4], edx
$LN624@sqlite3Upd:
; Line 58146
	cmp	edi, DWORD PTR [ecx+4]
	jl	$LN761@sqlite3Upd
; Line 58147
	mov	eax, DWORD PTR _pChanges$[esp+140]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR tv3871[esp+144]
	mov	esi, DWORD PTR [edx+ecx+4]
	lea	ebp, DWORD PTR [edx+ecx]
	mov	cl, BYTE PTR [esi]
	test	cl, cl
	mov	eax, esi
	mov	edx, OFFSET ??_C@_07HKAAOBDA@_ROWID_?$AA@
	je	SHORT $LN747@sqlite3Upd
	npad	3
$LL126@sqlite3Upd:
	movzx	ebx, BYTE PTR [edx]
	movzx	ecx, cl
	mov	cl, BYTE PTR _sqlite3UpperToLower[ecx]
	cmp	cl, BYTE PTR _sqlite3UpperToLower[ebx]
	jne	SHORT $LN747@sqlite3Upd
	mov	cl, BYTE PTR [eax+1]
	add	eax, 1
	add	edx, 1
	test	cl, cl
	jne	SHORT $LL126@sqlite3Upd
$LN747@sqlite3Upd:
	movzx	edx, BYTE PTR [edx]
	movzx	ecx, BYTE PTR _sqlite3UpperToLower[edx]
	movzx	edx, BYTE PTR [eax]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[edx]
	sub	eax, ecx
	je	SHORT $LN615@sqlite3Upd
	mov	edx, OFFSET ??_C@_05GIFMDDGN@ROWID?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN615@sqlite3Upd
	mov	edx, OFFSET ??_C@_03PGJCFEMG@OID?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	$LN88@sqlite3Upd
$LN615@sqlite3Upd:
; Line 58149
	mov	ecx, DWORD PTR [ebp]
	mov	ebp, DWORD PTR _pParse$[esp+140]
	mov	DWORD PTR _chngRowid$[esp+144], 1
	mov	DWORD PTR _pRowidExpr$[esp+144], ecx
$LN761@sqlite3Upd:
; Line 58159
	mov	eax, DWORD PTR _iDb$[esp+144]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _db$[esp+144]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx*8]
	mov	eax, DWORD PTR _pTab$[esp+144]
	push	edx
	mov	edx, DWORD PTR [eax+8]
	lea	ecx, DWORD PTR [edi+edi*4]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	edx
	push	23					; 00000017H
	mov	eax, ebp
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
; Line 58160
	cmp	eax, 1
	je	$LN699@sqlite3Upd
; Line 58162
	cmp	eax, 2
	jne	SHORT $LN97@sqlite3Upd
; Line 58163
	mov	eax, DWORD PTR _aXRef$[esp+144]
	mov	DWORD PTR [eax+edi*4], -1
$LN97@sqlite3Upd:
	mov	eax, DWORD PTR _i$[esp+144]
	mov	ecx, DWORD PTR _pChanges$[esp+140]
	add	DWORD PTR tv3871[esp+144], 12		; 0000000cH
	add	eax, 1
	cmp	eax, DWORD PTR [ecx]
	mov	DWORD PTR _i$[esp+144], eax
	jl	$LL98@sqlite3Upd
; Line 58152
	xor	ebx, ebx
$LN96@sqlite3Upd:
; Line 58174
	mov	eax, DWORD PTR _pTab$[esp+144]
	mov	edx, DWORD PTR [eax+16]
	xor	edi, edi
	mov	DWORD PTR _nIdx$[esp+144], ebx
	cmp	edx, ebx
	mov	ebx, DWORD PTR _aXRef$[esp+144]
	je	$LN73@sqlite3Upd
$LL83@sqlite3Upd:
; Line 58176
	xor	eax, eax
	cmp	DWORD PTR _chngRowid$[esp+144], eax
; Line 58177
	jne	SHORT $LN754@sqlite3Upd
; Line 58178
	mov	esi, DWORD PTR [edx+4]
	test	esi, esi
	jle	SHORT $LN754@sqlite3Upd
	mov	ecx, DWORD PTR [edx+8]
$LL78@sqlite3Upd:
; Line 58179
	mov	ebp, DWORD PTR [ecx]
	cmp	DWORD PTR [ebx+ebp*4], 0
	jge	SHORT $LN754@sqlite3Upd
	add	eax, 1
	add	ecx, 4
	cmp	eax, esi
	jl	SHORT $LL78@sqlite3Upd
$LN754@sqlite3Upd:
; Line 58182
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN82@sqlite3Upd
	add	DWORD PTR _nIdx$[esp+144], 1
$LN82@sqlite3Upd:
; Line 58174
	mov	edx, DWORD PTR [edx+32]
	add	edi, 1
	test	edx, edx
	jne	SHORT $LL83@sqlite3Upd
; Line 58184
	test	edi, edi
	jle	SHORT $LN73@sqlite3Upd
; Line 58185
	mov	ebx, DWORD PTR _nIdx$[esp+144]
	lea	ecx, DWORD PTR [edi+ebx*4]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN757@sqlite3Upd
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN133@sqlite3Upd
	test	esi, esi
	jg	SHORT $LN757@sqlite3Upd
$LN133@sqlite3Upd:
	push	ecx
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN757@sqlite3Upd
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN143@sqlite3Upd
	test	esi, esi
	jg	SHORT $LN757@sqlite3Upd
$LN143@sqlite3Upd:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
$LN757@sqlite3Upd:
; Line 58186
	test	eax, eax
	mov	DWORD PTR _apIdx$[esp+144], eax
	je	$LN699@sqlite3Upd
; Line 58187
	lea	ecx, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR _aXRef$[esp+144]
	mov	DWORD PTR _aIdxUsed$[esp+144], ecx
$LN73@sqlite3Upd:
; Line 58189
	mov	edx, DWORD PTR _pTab$[esp+144]
	mov	edx, DWORD PTR [edx+16]
	test	edx, edx
	je	$LN69@sqlite3Upd
	mov	eax, DWORD PTR _apIdx$[esp+144]
	mov	edi, DWORD PTR _aIdxUsed$[esp+144]
	mov	DWORD PTR tv3970[esp+144], eax
	npad	2
$LL71@sqlite3Upd:
; Line 58191
	xor	eax, eax
	cmp	DWORD PTR _chngRowid$[esp+144], eax
; Line 58192
	jne	SHORT $LN752@sqlite3Upd
; Line 58193
	mov	esi, DWORD PTR [edx+4]
	test	esi, esi
	jle	SHORT $LN752@sqlite3Upd
	mov	ecx, DWORD PTR [edx+8]
$LL66@sqlite3Upd:
; Line 58194
	mov	ebp, DWORD PTR [ecx]
	cmp	DWORD PTR [ebx+ebp*4], 0
	jge	SHORT $LN752@sqlite3Upd
	add	eax, 1
	add	ecx, 4
	cmp	eax, esi
	jl	SHORT $LL66@sqlite3Upd
$LN752@sqlite3Upd:
; Line 58197
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $LN62@sqlite3Upd
; Line 58198
	mov	eax, DWORD PTR tv3970[esp+144]
	mov	DWORD PTR [eax], edx
	add	eax, 4
	mov	DWORD PTR tv3970[esp+144], eax
; Line 58199
	mov	BYTE PTR [edi], 1
; Line 58200
	jmp	SHORT $LN70@sqlite3Upd
$LN88@sqlite3Upd:
; Line 58151
	mov	eax, DWORD PTR _i$[esp+144]
	mov	edi, DWORD PTR _pParse$[esp+140]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _pChanges$[esp+140]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+edx*4+4]
	push	edx
	push	OFFSET ??_C@_0BD@IEIMFPKF@no?5such?5column?3?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
; Line 58152
	jmp	$LN699@sqlite3Upd
$LN62@sqlite3Upd:
; Line 58201
	mov	BYTE PTR [edi], 0
$LN70@sqlite3Upd:
; Line 58189
	mov	edx, DWORD PTR [edx+32]
	add	edi, 1
	test	edx, edx
	jne	SHORT $LL71@sqlite3Upd
$LN69@sqlite3Upd:
; Line 58207
	mov	esi, DWORD PTR _pParse$[esp+140]
	mov	ebp, DWORD PTR [esi+12]
	xor	ebx, ebx
	cmp	ebp, ebx
	jne	SHORT $LN619@sqlite3Upd
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	ebp, eax
; Line 58208
	cmp	ebp, ebx
	mov	DWORD PTR [esi+12], eax
	je	$LN698@sqlite3Upd
$LN619@sqlite3Upd:
; Line 58209
	cmp	BYTE PTR [esi+19], 0
	jne	SHORT $LN154@sqlite3Upd
	mov	BYTE PTR [ebp+562], 1
$LN154@sqlite3Upd:
; Line 58210
	mov	eax, DWORD PTR _iDb$[esp+144]
	push	1
	mov	ecx, esi
	call	_sqlite3BeginWriteOperation
; Line 58214
	mov	eax, DWORD PTR _pTab$[esp+148]
	add	esp, 4
	cmp	BYTE PTR [eax+57], 0
	je	SHORT $LN58@sqlite3Upd
; Line 58216
	mov	ecx, DWORD PTR _pWhere$[esp+140]
	mov	edx, DWORD PTR _aXRef$[esp+144]
	push	ecx
	mov	ecx, DWORD PTR _pRowidExpr$[esp+148]
	push	edx
	mov	edx, DWORD PTR _pChanges$[esp+148]
	push	ecx
	push	edx
	push	eax
	mov	eax, DWORD PTR _pTabList$[esp+160]
	push	eax
	push	esi
	call	_updateVirtualTable
	add	esp, 28					; 0000001cH
; Line 58217
	mov	DWORD PTR _pWhere$[esp+140], ebx
; Line 58218
	mov	DWORD PTR _pTabList$[esp+140], ebx
; Line 58219
	jmp	$LN698@sqlite3Upd
$LN58@sqlite3Upd:
; Line 58226
	mov	ebx, DWORD PTR _pWhere$[esp+140]
	lea	esi, DWORD PTR _sNC$[esp+144]
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN698@sqlite3Upd
; Line 58233
	mov	esi, DWORD PTR _pParse$[esp+140]
	xor	ebx, ebx
	cmp	DWORD PTR _isView$[esp+144], ebx
	je	SHORT $LN746@sqlite3Upd
	mov	eax, DWORD PTR _pTab$[esp+144]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+176]
	mov	DWORD PTR [esi+176], edx
; Line 58241
	mov	eax, DWORD PTR [eax+24]
	push	eax
	mov	DWORD PTR _sContext$[esp+152], esi
	mov	DWORD PTR _sContext$[esp+148], ecx
	call	_sqlite3SelectDup
; Line 58242
	mov	ecx, DWORD PTR _iCur$[esp+148]
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ecx
	mov	edi, eax
	push	8
	push	edi
	push	esi
	call	_sqlite3Select
	add	esp, 36					; 00000024H
; Line 58243
	cmp	edi, ebx
	je	SHORT $LN746@sqlite3Upd
	push	edi
	call	_clearSelect
	push	edi
	call	_free
	add	esp, 8
$LN746@sqlite3Upd:
; Line 58248
	mov	edx, DWORD PTR _pWhere$[esp+140]
	mov	eax, DWORD PTR _pTabList$[esp+140]
	push	ebx
	push	edx
	push	eax
	push	esi
	call	_sqlite3WhereBegin
	mov	esi, eax
	add	esp, 16					; 00000010H
; Line 58249
	cmp	esi, ebx
	je	$update_cleanup$100196
; Line 58253
	mov	ecx, DWORD PTR _pTab$[esp+144]
	mov	cl, BYTE PTR [ecx+57]
	mov	edi, DWORD PTR [ebp+12]
	neg	cl
	sbb	ecx, ecx
	and	ecx, -25				; ffffffe7H
	add	ecx, 37					; 00000025H
	cmp	DWORD PTR [ebp+16], edi
	mov	DWORD PTR $T144355[esp+144], ecx
	jg	SHORT $LN167@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN626@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN627@sqlite3Upd
$LN626@sqlite3Upd:
	mov	ecx, DWORD PTR $T144355[esp+144]
	xor	ebx, ebx
$LN167@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _iCur$[esp+144]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN169@sqlite3Upd
$LN627@sqlite3Upd:
	xor	ebx, ebx
$LN169@sqlite3Upd:
; Line 58254
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN706@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN628@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN629@sqlite3Upd
$LN628@sqlite3Upd:
	xor	ebx, ebx
$LN706@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 57			; 00000039H
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN175@sqlite3Upd
$LN629@sqlite3Upd:
	xor	ebx, ebx
$LN175@sqlite3Upd:
; Line 58258
	push	esi
	call	_sqlite3WhereEnd
; Line 58262
	mov	ecx, DWORD PTR _db$[esp+148]
	add	esp, 4
	test	BYTE PTR [ecx+8], -128			; ffffff80H
	je	SHORT $LN740@sqlite3Upd
	mov	ecx, DWORD PTR _pParse$[esp+140]
	cmp	DWORD PTR [ecx+172], ebx
	jne	SHORT $LN740@sqlite3Upd
; Line 58263
	mov	eax, DWORD PTR [ecx+32]
; Line 58264
	push	eax
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR _memCnt$[esp+148], eax
	push	ebx
	push	48					; 00000030H
	mov	eax, ebp
	mov	DWORD PTR [ecx+32], edx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN740@sqlite3Upd:
; Line 58267
	cmp	DWORD PTR _triggers_exist$[esp+144], ebx
	je	$LN660@sqlite3Upd
; Line 58270
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN707@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN630@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN631@sqlite3Upd
$LN630@sqlite3Upd:
	xor	ebx, ebx
$LN707@sqlite3Upd:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _oldIdx$[esp+144]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 120			; 00000078H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN181@sqlite3Upd
$LN631@sqlite3Upd:
	xor	ebx, ebx
$LN181@sqlite3Upd:
; Line 58271
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	mov	eax, DWORD PTR _pTab$[esp+144]
	mov	esi, DWORD PTR [eax+4]
	jg	SHORT $LN708@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN632@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN633@sqlite3Upd
$LN632@sqlite3Upd:
	xor	ebx, ebx
$LN708@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _oldIdx$[esp+144]
	mov	BYTE PTR [eax], 104			; 00000068H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN187@sqlite3Upd
$LN633@sqlite3Upd:
	xor	ebx, ebx
$LN187@sqlite3Upd:
; Line 58272
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN709@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN634@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN635@sqlite3Upd
$LN634@sqlite3Upd:
	xor	ebx, ebx
$LN709@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _newIdx$[esp+144]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 120			; 00000078H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN193@sqlite3Upd
$LN635@sqlite3Upd:
	xor	ebx, ebx
$LN193@sqlite3Upd:
; Line 58273
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	mov	edx, DWORD PTR _pTab$[esp+144]
	mov	esi, DWORD PTR [edx+4]
	jg	SHORT $LN710@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN636@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN637@sqlite3Upd
$LN636@sqlite3Upd:
	xor	ebx, ebx
$LN710@sqlite3Upd:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _newIdx$[esp+144]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 104			; 00000068H
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN199@sqlite3Upd
$LN637@sqlite3Upd:
	xor	ebx, ebx
$LN199@sqlite3Upd:
; Line 58277
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN711@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN638@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN638@sqlite3Upd
	mov	DWORD PTR _addr$[esp+144], 0
	xor	ebx, ebx
	jmp	SHORT $LN205@sqlite3Upd
$LN638@sqlite3Upd:
	xor	ebx, ebx
$LN711@sqlite3Upd:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 97			; 00000061H
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	mov	DWORD PTR _addr$[esp+144], edi
$LN205@sqlite3Upd:
; Line 58279
	cmp	DWORD PTR _isView$[esp+144], ebx
	jne	$LN639@sqlite3Upd
; Line 58280
	push	ebx
	push	ebx
	push	94					; 0000005eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 58281
	push	ebx
	push	ebx
	push	94					; 0000005eH
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
; Line 58285
	mov	edx, DWORD PTR _pTab$[esp+168]
	add	esp, 24					; 00000018H
	cmp	BYTE PTR [edx+57], bl
	jne	SHORT $LN639@sqlite3Upd
	mov	eax, DWORD PTR _pParse$[esp+140]
	mov	edi, DWORD PTR [eax+12]
	cmp	edi, ebx
	jne	SHORT $LN212@sqlite3Upd
	mov	esi, eax
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [esi+12], eax
	mov	edi, eax
$LN212@sqlite3Upd:
	mov	eax, DWORD PTR _pTab$[esp+144]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+20]
	mov	esi, DWORD PTR _iDb$[esp+144]
	mov	eax, DWORD PTR _pParse$[esp+140]
	push	ecx
	push	ebx
	push	edx
	push	esi
	push	eax
	call	_sqlite3TableLock
	push	ebx
	push	esi
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR _pTab$[esp+176]
	mov	edx, DWORD PTR [ecx+20]
	mov	esi, DWORD PTR _iCur$[esp+176]
	push	edx
	push	esi
	push	14					; 0000000eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	eax, DWORD PTR _pTab$[esp+188]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	esi
	push	104					; 00000068H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
$LN639@sqlite3Upd:
; Line 58287
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN712@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN641@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN642@sqlite3Upd
$LN641@sqlite3Upd:
	xor	ebx, ebx
$LN712@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	esi, DWORD PTR _iCur$[esp+144]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 128			; 00000080H
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN217@sqlite3Upd
$LN642@sqlite3Upd:
	mov	esi, DWORD PTR _iCur$[esp+144]
	xor	ebx, ebx
$LN217@sqlite3Upd:
; Line 58291
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN713@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN643@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN644@sqlite3Upd
$LN643@sqlite3Upd:
	xor	ebx, ebx
$LN713@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 37			; 00000025H
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN223@sqlite3Upd
$LN644@sqlite3Upd:
	xor	ebx, ebx
$LN223@sqlite3Upd:
; Line 58292
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN714@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN645@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN646@sqlite3Upd
$LN645@sqlite3Upd:
	xor	ebx, ebx
$LN714@sqlite3Upd:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 41			; 00000029H
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN229@sqlite3Upd
$LN646@sqlite3Upd:
	xor	ebx, ebx
$LN229@sqlite3Upd:
; Line 58293
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN715@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN647@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN648@sqlite3Upd
$LN647@sqlite3Upd:
	xor	ebx, ebx
$LN715@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _oldIdx$[esp+144]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 113			; 00000071H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN235@sqlite3Upd
$LN648@sqlite3Upd:
	xor	ebx, ebx
$LN235@sqlite3Upd:
; Line 58297
	cmp	DWORD PTR _chngRowid$[esp+144], ebx
	je	SHORT $LN50@sqlite3Upd
; Line 58298
	mov	edx, DWORD PTR _pRowidExpr$[esp+144]
	mov	ebx, DWORD PTR _pParse$[esp+140]
	push	edx
	call	_sqlite3ExprCodeAndCache
	add	esp, 4
; Line 58299
	xor	ebx, ebx
	jmp	SHORT $LN49@sqlite3Upd
$LN50@sqlite3Upd:
; Line 58300
	push	ebx
	push	esi
	push	37					; 00000025H
	mov	eax, ebp
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN49@sqlite3Upd:
; Line 58302
	mov	eax, DWORD PTR _pTab$[esp+144]
	xor	esi, esi
	cmp	DWORD PTR [eax+4], ebx
	jle	$LN703@sqlite3Upd
	npad	3
$LL48@sqlite3Upd:
; Line 58303
	mov	ecx, DWORD PTR _pTab$[esp+144]
	cmp	esi, DWORD PTR [ecx+12]
	jne	SHORT $LN45@sqlite3Upd
; Line 58304
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN716@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN649@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	$LN652@sqlite3Upd
$LN649@sqlite3Upd:
	xor	ebx, ebx
$LN716@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 122			; 0000007aH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
; Line 58305
	jmp	$LN47@sqlite3Upd
$LN45@sqlite3Upd:
; Line 58307
	mov	ecx, DWORD PTR _aXRef$[esp+144]
	mov	eax, DWORD PTR [ecx+esi*4]
; Line 58308
	cmp	eax, ebx
	jge	SHORT $LN44@sqlite3Upd
; Line 58309
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN717@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN650@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN651@sqlite3Upd
$LN650@sqlite3Upd:
	xor	ebx, ebx
$LN717@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _iCur$[esp+144]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+4], ecx
	mov	BYTE PTR [eax], 3
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
; Line 58310
	mov	eax, DWORD PTR _pTab$[esp+144]
	mov	ecx, esi
	mov	edx, ebp
	mov	BYTE PTR [ebp+564], bl
	call	_sqlite3ColumnDefault
; Line 58311
	jmp	SHORT $LN47@sqlite3Upd
$LN651@sqlite3Upd:
; Line 58310
	mov	eax, DWORD PTR _pTab$[esp+144]
	mov	ecx, esi
	mov	edx, ebp
	xor	ebx, ebx
	call	_sqlite3ColumnDefault
; Line 58311
	jmp	SHORT $LN47@sqlite3Upd
$LN44@sqlite3Upd:
; Line 58312
	mov	ebx, DWORD PTR _pParse$[esp+140]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _pChanges$[esp+140]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+edx*4]
	push	edx
	call	_sqlite3ExprCodeAndCache
	add	esp, 4
$LN652@sqlite3Upd:
	xor	ebx, ebx
$LN47@sqlite3Upd:
; Line 58302
	mov	eax, DWORD PTR _pTab$[esp+144]
	add	esi, 1
	cmp	esi, DWORD PTR [eax+4]
	jl	$LL48@sqlite3Upd
$LN703@sqlite3Upd:
; Line 58315
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	ecx, DWORD PTR _pTab$[esp+144]
	mov	edi, DWORD PTR [ecx+4]
	jg	SHORT $LN718@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN653@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN654@sqlite3Upd
$LN653@sqlite3Upd:
	xor	ebx, ebx
$LN718@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 91			; 0000005bH
	mov	DWORD PTR [eax+4], edi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN253@sqlite3Upd
$LN654@sqlite3Upd:
	xor	ebx, ebx
$LN253@sqlite3Upd:
; Line 58316
	cmp	DWORD PTR _isView$[esp+144], ebx
	jne	SHORT $LN741@sqlite3Upd
; Line 58317
	mov	eax, DWORD PTR _pTab$[esp+144]
	push	ebp
	call	_sqlite3TableAffinityStr
	add	esp, 4
$LN741@sqlite3Upd:
; Line 58319
	mov	ecx, DWORD PTR _pParse$[esp+140]
	cmp	DWORD PTR [ecx+24], ebx
	mov	esi, DWORD PTR _pTab$[esp+144]
	jne	$update_cleanup$100196
; Line 58320
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN719@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN655@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN656@sqlite3Upd
$LN655@sqlite3Upd:
	xor	ebx, ebx
$LN719@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _newIdx$[esp+144]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 113			; 00000071H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN259@sqlite3Upd
$LN656@sqlite3Upd:
	xor	ebx, ebx
$LN259@sqlite3Upd:
; Line 58321
	cmp	DWORD PTR _isView$[esp+144], ebx
	jne	SHORT $LN265@sqlite3Upd
; Line 58322
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN720@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN657@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN659@sqlite3Upd
$LN657@sqlite3Upd:
	xor	ebx, ebx
$LN720@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _iCur$[esp+144]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN265@sqlite3Upd
$LN659@sqlite3Upd:
	xor	ebx, ebx
$LN265@sqlite3Upd:
; Line 58328
	mov	edx, DWORD PTR _addr$[esp+144]
	mov	eax, DWORD PTR _onError$[esp+140]
	mov	ecx, DWORD PTR _oldIdx$[esp+144]
	push	edx
	mov	edx, DWORD PTR _newIdx$[esp+148]
	push	eax
	mov	eax, DWORD PTR _pChanges$[esp+148]
	push	ecx
	mov	ecx, DWORD PTR _pParse$[esp+152]
	push	edx
	push	esi
	push	1
	push	eax
	push	100					; 00000064H
	push	ecx
	call	_sqlite3CodeRowTrigger
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$update_cleanup$100196
	jmp	SHORT $LN721@sqlite3Upd
$LN660@sqlite3Upd:
	mov	esi, DWORD PTR _pTab$[esp+144]
$LN721@sqlite3Upd:
; Line 58333
	cmp	DWORD PTR _isView$[esp+144], ebx
	jne	$LN705@sqlite3Upd
	cmp	BYTE PTR [esi+57], bl
	jne	$LN705@sqlite3Upd
; Line 58340
	mov	edx, DWORD PTR _pParse$[esp+140]
	mov	edi, DWORD PTR [edx+12]
	cmp	edi, ebx
	jne	SHORT $LN354@sqlite3Upd
	mov	esi, edx
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	DWORD PTR [esi+12], eax
	mov	esi, DWORD PTR _pTab$[esp+144]
	mov	edi, eax
$LN354@sqlite3Upd:
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+20]
	mov	edx, DWORD PTR _iDb$[esp+144]
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+144]
	push	1
	push	ecx
	push	edx
	push	eax
	call	_sqlite3TableLock
	mov	ecx, DWORD PTR _iDb$[esp+164]
	push	ebx
	push	ecx
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	edx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR _iCur$[esp+176]
	push	edx
	push	eax
	push	9
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR _iCur$[esp+188]
	push	ecx
	push	edx
	push	104					; 00000068H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 58341
	mov	ecx, 5
	add	esp, 56					; 00000038H
	cmp	DWORD PTR _onError$[esp+140], ecx
; Line 58343
	je	SHORT $LN597@sqlite3Upd
; Line 58345
	mov	eax, DWORD PTR [esi+16]
	cmp	eax, ebx
	mov	DWORD PTR _openAll$[esp+144], ebx
	je	SHORT $LN33@sqlite3Upd
$LL35@sqlite3Upd:
; Line 58346
	cmp	BYTE PTR [eax+24], cl
	je	SHORT $LN597@sqlite3Upd
	mov	eax, DWORD PTR [eax+32]
	cmp	eax, ebx
	jne	SHORT $LL35@sqlite3Upd
	jmp	SHORT $LN33@sqlite3Upd
$LN597@sqlite3Upd:
; Line 58347
	mov	DWORD PTR _openAll$[esp+144], 1
$LN33@sqlite3Upd:
; Line 58352
	mov	esi, DWORD PTR [esi+16]
	cmp	esi, ebx
	mov	DWORD PTR _i$[esp+144], ebx
	mov	DWORD PTR _pIdx$[esp+144], esi
	je	$LN704@sqlite3Upd
	npad	5
$LL31@sqlite3Upd:
; Line 58353
	cmp	DWORD PTR _openAll$[esp+144], ebx
	jne	SHORT $LN27@sqlite3Upd
	mov	eax, DWORD PTR _i$[esp+144]
	mov	ecx, DWORD PTR _aIdxUsed$[esp+144]
	cmp	BYTE PTR [eax+ecx], bl
	je	$LN30@sqlite3Upd
$LN27@sqlite3Upd:
; Line 58354
	mov	edx, DWORD PTR _pIdx$[esp+144]
	mov	eax, DWORD PTR _pParse$[esp+140]
	push	edx
	push	eax
	call	_sqlite3IndexKeyinfo
; Line 58355
	mov	edi, DWORD PTR [ebp+12]
	add	esp, 8
	cmp	DWORD PTR [ebp+16], edi
	mov	DWORD PTR _pKey$100286[esp+144], eax
	jg	SHORT $LN357@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN662@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN663@sqlite3Upd
$LN662@sqlite3Upd:
	xor	ebx, ebx
$LN357@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iDb$[esp+144]
	mov	BYTE PTR [eax], 47			; 0000002fH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN359@sqlite3Upd
$LN663@sqlite3Upd:
	xor	ebx, ebx
$LN359@sqlite3Upd:
; Line 58357
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	mov	edx, DWORD PTR _pIdx$[esp+144]
	mov	esi, DWORD PTR [edx+20]
	jg	SHORT $LN722@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN664@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN664@sqlite3Upd
	xor	eax, eax
	xor	ebx, ebx
	jmp	SHORT $LN367@sqlite3Upd
$LN664@sqlite3Upd:
	xor	ebx, ebx
$LN722@sqlite3Upd:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _iCur$[esp+144]
	lea	eax, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _i$[esp+144]
	lea	edx, DWORD PTR [edx+ecx+1]
	mov	BYTE PTR [eax], 9
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	mov	eax, edi
$LN367@sqlite3Upd:
	mov	edi, DWORD PTR [ebp+20]
	cmp	edi, ebx
	je	SHORT $LN616@sqlite3Upd
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN388@sqlite3Upd
	cmp	DWORD PTR _inMutex, ebx
	jg	SHORT $LN616@sqlite3Upd
$LN388@sqlite3Upd:
	cmp	eax, ebx
	jl	SHORT $LN384@sqlite3Upd
	cmp	eax, DWORD PTR [ebp+12]
	jl	SHORT $LN383@sqlite3Upd
$LN384@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+12]
	sub	eax, 1
	js	SHORT $LN30@sqlite3Upd
$LN383@sqlite3Upd:
	lea	eax, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [edi+eax*4+12]
	lea	edi, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [edi+16]
	call	_freeP3
	mov	eax, DWORD PTR _pKey$100286[esp+144]
	cmp	eax, ebx
	mov	DWORD PTR [edi+12], ebx
	jne	SHORT $LN617@sqlite3Upd
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	jmp	SHORT $LN30@sqlite3Upd
$LN617@sqlite3Upd:
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], -6			; fffffffaH
	jmp	SHORT $LN30@sqlite3Upd
$LN616@sqlite3Upd:
	mov	ecx, DWORD PTR _pKey$100286[esp+144]
	mov	eax, -9					; fffffff7H
	call	_freeP3
$LN30@sqlite3Upd:
	mov	ecx, DWORD PTR _pIdx$[esp+144]
	mov	eax, DWORD PTR [ecx+32]
	add	DWORD PTR _i$[esp+144], 1
	cmp	eax, ebx
	mov	DWORD PTR _pIdx$[esp+144], eax
	jne	$LL31@sqlite3Upd
$LN704@sqlite3Upd:
; Line 58368
	cmp	DWORD PTR _triggers_exist$[esp+144], ebx
	jne	$LN401@sqlite3Upd
; Line 58369
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN723@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN665@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN665@sqlite3Upd
	mov	DWORD PTR _addr$[esp+144], 0
	xor	ebx, ebx
	jmp	SHORT $LN395@sqlite3Upd
$LN665@sqlite3Upd:
	xor	ebx, ebx
$LN723@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 97			; 00000061H
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	mov	DWORD PTR _addr$[esp+144], edi
$LN395@sqlite3Upd:
; Line 58370
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN724@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN666@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN667@sqlite3Upd
$LN666@sqlite3Upd:
	xor	ebx, ebx
$LN724@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 94			; 0000005eH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN401@sqlite3Upd
$LN667@sqlite3Upd:
	xor	ebx, ebx
$LN401@sqlite3Upd:
; Line 58372
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN725@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN668@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN669@sqlite3Upd
$LN668@sqlite3Upd:
	xor	ebx, ebx
$LN725@sqlite3Upd:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _iCur$[esp+144]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _addr$[esp+144]
	mov	BYTE PTR [eax], 44			; 0000002cH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN407@sqlite3Upd
$LN669@sqlite3Upd:
	xor	ebx, ebx
$LN407@sqlite3Upd:
; Line 58378
	cmp	DWORD PTR _chngRowid$[esp+144], ebx
	je	SHORT $LN413@sqlite3Upd
; Line 58379
	mov	edx, DWORD PTR _pRowidExpr$[esp+144]
	mov	eax, DWORD PTR _pParse$[esp+140]
	push	edx
	push	eax
	call	_sqlite3ExprCode
; Line 58380
	mov	esi, DWORD PTR [ebp+12]
	add	esp, 8
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN726@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN670@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN671@sqlite3Upd
$LN670@sqlite3Upd:
	xor	ebx, ebx
$LN726@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 35			; 00000023H
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN413@sqlite3Upd
$LN671@sqlite3Upd:
	xor	ebx, ebx
$LN413@sqlite3Upd:
; Line 58385
	mov	eax, DWORD PTR _pTab$[esp+144]
	xor	esi, esi
	cmp	DWORD PTR [eax+4], ebx
	jle	$LN22@sqlite3Upd
	npad	6
$LL24@sqlite3Upd:
; Line 58386
	mov	ecx, DWORD PTR _pTab$[esp+144]
	cmp	esi, DWORD PTR [ecx+12]
	jne	SHORT $LN21@sqlite3Upd
; Line 58387
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN727@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN672@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	$LN675@sqlite3Upd
$LN672@sqlite3Upd:
	xor	ebx, ebx
$LN727@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 122			; 0000007aH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
; Line 58388
	jmp	$LN23@sqlite3Upd
$LN21@sqlite3Upd:
; Line 58390
	mov	ecx, DWORD PTR _aXRef$[esp+144]
	mov	eax, DWORD PTR [ecx+esi*4]
; Line 58391
	cmp	eax, ebx
	jge	SHORT $LN20@sqlite3Upd
; Line 58392
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN728@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN673@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN674@sqlite3Upd
$LN673@sqlite3Upd:
	xor	ebx, ebx
$LN728@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _iCur$[esp+144]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+4], ecx
	mov	BYTE PTR [eax], 3
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
; Line 58393
	mov	eax, DWORD PTR _pTab$[esp+144]
	mov	ecx, esi
	mov	edx, ebp
	mov	BYTE PTR [ebp+564], bl
	call	_sqlite3ColumnDefault
; Line 58394
	jmp	SHORT $LN23@sqlite3Upd
$LN674@sqlite3Upd:
; Line 58393
	mov	eax, DWORD PTR _pTab$[esp+144]
	mov	ecx, esi
	mov	edx, ebp
	xor	ebx, ebx
	call	_sqlite3ColumnDefault
; Line 58394
	jmp	SHORT $LN23@sqlite3Upd
$LN20@sqlite3Upd:
; Line 58395
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _pChanges$[esp+140]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	eax, DWORD PTR _pParse$[esp+140]
	push	edx
	push	eax
	call	_sqlite3ExprCode
	add	esp, 8
	jmp	SHORT $LN23@sqlite3Upd
$LN675@sqlite3Upd:
	xor	ebx, ebx
$LN23@sqlite3Upd:
; Line 58385
	mov	ecx, DWORD PTR _pTab$[esp+144]
	add	esi, 1
	cmp	esi, DWORD PTR [ecx+4]
	jl	$LL24@sqlite3Upd
$LN22@sqlite3Upd:
; Line 58402
	mov	edx, DWORD PTR _addr$[esp+144]
	mov	eax, DWORD PTR _onError$[esp+140]
	mov	ecx, DWORD PTR _chngRowid$[esp+144]
	mov	edi, DWORD PTR _aIdxUsed$[esp+144]
	mov	esi, DWORD PTR _iCur$[esp+144]
	push	edx
	mov	edx, DWORD PTR _pTab$[esp+148]
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+148]
	push	1
	push	ecx
	push	edi
	push	esi
	push	edx
	push	eax
	call	_sqlite3GenerateConstraintChecks
; Line 58406
	mov	eax, DWORD PTR _pTab$[esp+176]
	push	edi
	push	esi
	mov	ecx, ebp
	call	_sqlite3GenerateRowIndexDelete
	add	esp, 40					; 00000028H
; Line 58410
	cmp	DWORD PTR _chngRowid$[esp+144], ebx
	je	SHORT $LN431@sqlite3Upd
; Line 58411
	mov	eax, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], eax
	mov	DWORD PTR _i$145049[esp+144], eax
	jg	SHORT $LN729@sqlite3Upd
	add	eax, 1
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN676@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN677@sqlite3Upd
$LN676@sqlite3Upd:
	mov	eax, DWORD PTR _i$145049[esp+144]
	xor	ebx, ebx
$LN729@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	BYTE PTR [eax], 92			; 0000005cH
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN431@sqlite3Upd
$LN677@sqlite3Upd:
	xor	ebx, ebx
$LN431@sqlite3Upd:
; Line 58416
	mov	eax, DWORD PTR _chngRowid$[esp+144]
	mov	ecx, DWORD PTR _pTab$[esp+144]
	mov	edx, DWORD PTR _pParse$[esp+140]
	push	ebx
	push	-1
	push	1
	push	eax
	push	edi
	push	esi
	push	ecx
	push	edx
	call	_sqlite3CompleteInsertion
	add	esp, 32					; 00000020H
$LN705@sqlite3Upd:
; Line 58421
	mov	eax, DWORD PTR _db$[esp+144]
	test	BYTE PTR [eax+8], -128			; ffffff80H
	je	SHORT $LN742@sqlite3Upd
	mov	ecx, DWORD PTR _pParse$[esp+140]
	cmp	DWORD PTR [ecx+172], ebx
	jne	SHORT $LN742@sqlite3Upd
; Line 58422
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN730@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN678@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN679@sqlite3Upd
$LN678@sqlite3Upd:
	xor	ebx, ebx
$LN730@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	mov	ecx, 1
	add	DWORD PTR [ebp+12], ecx
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _memCnt$[esp+144]
	mov	BYTE PTR [eax], 45			; 0000002dH
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN742@sqlite3Upd
$LN679@sqlite3Upd:
	xor	ebx, ebx
$LN742@sqlite3Upd:
; Line 58428
	cmp	DWORD PTR _triggers_exist$[esp+144], ebx
	je	$LN744@sqlite3Upd
; Line 58429
	cmp	DWORD PTR _isView$[esp+144], ebx
	jne	$LN449@sqlite3Upd
; Line 58430
	mov	edx, DWORD PTR _pTab$[esp+144]
	mov	eax, DWORD PTR [edx+16]
	xor	esi, esi
	cmp	eax, ebx
	mov	DWORD PTR _pIdx$[esp+144], eax
	je	SHORT $LN12@sqlite3Upd
$LL14@sqlite3Upd:
; Line 58431
	cmp	DWORD PTR _openAll$[esp+144], ebx
	jne	SHORT $LN10@sqlite3Upd
	mov	eax, DWORD PTR _aIdxUsed$[esp+144]
	cmp	BYTE PTR [esi+eax], bl
	je	SHORT $LN13@sqlite3Upd
$LN10@sqlite3Upd:
; Line 58432
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN731@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN680@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN681@sqlite3Upd
$LN680@sqlite3Upd:
	xor	ebx, ebx
$LN731@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iCur$[esp+144]
	lea	edx, DWORD PTR [ecx+esi+1]
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN13@sqlite3Upd
$LN681@sqlite3Upd:
	xor	ebx, ebx
$LN13@sqlite3Upd:
; Line 58430
	mov	eax, DWORD PTR _pIdx$[esp+144]
	mov	eax, DWORD PTR [eax+32]
	add	esi, 1
	cmp	eax, ebx
	mov	DWORD PTR _pIdx$[esp+144], eax
	jne	SHORT $LL14@sqlite3Upd
$LN12@sqlite3Upd:
; Line 58434
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN732@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN682@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN683@sqlite3Upd
$LN682@sqlite3Upd:
	xor	ebx, ebx
$LN732@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iCur$[esp+144]
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN449@sqlite3Upd
$LN683@sqlite3Upd:
	xor	ebx, ebx
$LN449@sqlite3Upd:
; Line 58437
	mov	edx, DWORD PTR _addr$[esp+144]
	mov	eax, DWORD PTR _onError$[esp+140]
	mov	ecx, DWORD PTR _oldIdx$[esp+144]
	push	edx
	mov	edx, DWORD PTR _newIdx$[esp+148]
	push	eax
	mov	eax, DWORD PTR _pTab$[esp+152]
	push	ecx
	mov	ecx, DWORD PTR _pChanges$[esp+152]
	push	edx
	mov	edx, DWORD PTR _pParse$[esp+156]
	push	eax
	push	2
	push	ecx
	push	100					; 00000064H
	push	edx
	call	_sqlite3CodeRowTrigger
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$update_cleanup$100196
$LN744@sqlite3Upd:
; Line 58445
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	mov	edi, DWORD PTR _addr$[esp+144]
	jg	SHORT $LN733@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN684@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN685@sqlite3Upd
$LN684@sqlite3Upd:
	xor	ebx, ebx
$LN733@sqlite3Upd:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 95			; 0000005fH
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN455@sqlite3Upd
$LN685@sqlite3Upd:
	xor	ebx, ebx
$LN455@sqlite3Upd:
; Line 58446
	cmp	edi, ebx
	jl	SHORT $LN461@sqlite3Upd
	mov	ecx, DWORD PTR [ebp+12]
	cmp	ecx, edi
	jle	SHORT $LN461@sqlite3Upd
	mov	eax, DWORD PTR [ebp+20]
	cmp	eax, ebx
	je	SHORT $LN461@sqlite3Upd
	lea	edx, DWORD PTR [edi+edi*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
$LN461@sqlite3Upd:
; Line 58449
	cmp	DWORD PTR _triggers_exist$[esp+144], ebx
	jne	$LN8@sqlite3Upd
; Line 58450
	mov	eax, DWORD PTR _pTab$[esp+144]
	mov	eax, DWORD PTR [eax+16]
	xor	esi, esi
	cmp	eax, ebx
	mov	DWORD PTR _pIdx$[esp+144], eax
	je	SHORT $LN5@sqlite3Upd
	npad	4
$LL7@sqlite3Upd:
; Line 58451
	cmp	DWORD PTR _openAll$[esp+144], ebx
	jne	SHORT $LN3@sqlite3Upd
	mov	ecx, DWORD PTR _aIdxUsed$[esp+144]
	cmp	BYTE PTR [esi+ecx], bl
	je	SHORT $LN6@sqlite3Upd
$LN3@sqlite3Upd:
; Line 58452
	mov	edi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], edi
	jg	SHORT $LN734@sqlite3Upd
	lea	eax, DWORD PTR [edi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN686@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN687@sqlite3Upd
$LN686@sqlite3Upd:
	xor	ebx, ebx
$LN734@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _iCur$[esp+144]
	lea	edx, DWORD PTR [edi+edi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	lea	edx, DWORD PTR [ecx+esi+1]
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN6@sqlite3Upd
$LN687@sqlite3Upd:
	xor	ebx, ebx
$LN6@sqlite3Upd:
; Line 58450
	mov	eax, DWORD PTR _pIdx$[esp+144]
	mov	eax, DWORD PTR [eax+32]
	add	esi, 1
	cmp	eax, ebx
	mov	DWORD PTR _pIdx$[esp+144], eax
	jne	SHORT $LL7@sqlite3Upd
$LN5@sqlite3Upd:
; Line 58455
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN735@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN688@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	$LN692@sqlite3Upd
$LN688@sqlite3Upd:
	xor	ebx, ebx
$LN735@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	lea	ecx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _iCur$[esp+144]
$LN763@sqlite3Upd:
	add	DWORD PTR [ebp+12], 1
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
; Line 58456
	jmp	$LN484@sqlite3Upd
$LN8@sqlite3Upd:
; Line 58457
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN736@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN689@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN690@sqlite3Upd
$LN689@sqlite3Upd:
	xor	ebx, ebx
$LN736@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	ecx, DWORD PTR _newIdx$[esp+144]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	BYTE PTR [eax], 30			; 0000001eH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN478@sqlite3Upd
$LN690@sqlite3Upd:
	xor	ebx, ebx
$LN478@sqlite3Upd:
; Line 58458
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN737@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN691@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN692@sqlite3Upd
$LN691@sqlite3Upd:
	xor	ebx, ebx
$LN737@sqlite3Upd:
	mov	eax, DWORD PTR [ebp+20]
	mov	ecx, DWORD PTR _oldIdx$[esp+144]
	lea	edx, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [eax+edx*4]
	jmp	$LN763@sqlite3Upd
$LN692@sqlite3Upd:
	xor	ebx, ebx
$LN484@sqlite3Upd:
; Line 58466
	mov	edx, DWORD PTR _db$[esp+144]
	test	BYTE PTR [edx+8], -128			; ffffff80H
	je	$update_cleanup$100196
	mov	eax, DWORD PTR _pParse$[esp+140]
	cmp	DWORD PTR [eax+172], ebx
	jne	$update_cleanup$100196
	cmp	BYTE PTR [eax+19], bl
	jne	$update_cleanup$100196
; Line 58467
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN738@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN693@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN694@sqlite3Upd
$LN693@sqlite3Upd:
	xor	ebx, ebx
$LN738@sqlite3Upd:
	mov	ecx, DWORD PTR [ebp+20]
	add	DWORD PTR [ebp+12], 1
	mov	edx, DWORD PTR _memCnt$[esp+144]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	BYTE PTR [eax], 1
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
	jmp	SHORT $LN490@sqlite3Upd
$LN694@sqlite3Upd:
	xor	ebx, ebx
$LN490@sqlite3Upd:
; Line 58468
	mov	esi, DWORD PTR [ebp+12]
	cmp	DWORD PTR [ebp+16], esi
	jg	SHORT $LN739@sqlite3Upd
	lea	eax, DWORD PTR [esi+1]
	mov	ebx, ebp
	call	_resizeOpArray
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN695@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN696@sqlite3Upd
$LN695@sqlite3Upd:
	xor	ebx, ebx
$LN739@sqlite3Upd:
	mov	edx, DWORD PTR [ebp+20]
	mov	ecx, 1
	add	DWORD PTR [ebp+12], ecx
	lea	eax, DWORD PTR [esi+esi*4]
	lea	eax, DWORD PTR [edx+eax*4]
	mov	BYTE PTR [eax], 58			; 0000003aH
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	DWORD PTR [eax+12], ebx
	mov	DWORD PTR [eax+16], ebx
	mov	BYTE PTR [ebp+564], bl
$LN696@sqlite3Upd:
; Line 58469
	push	1
	mov	ebx, ebp
	call	_sqlite3VdbeSetNumCols
	add	esp, 4
; Line 58470
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN504@sqlite3Upd
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN697@sqlite3Upd
$LN504@sqlite3Upd:
	mov	ebp, DWORD PTR [ebp+48]
	push	ebp
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [ebp+16], OFFSET ??_C@_0N@KMEMLEEO@rows?5updated?$AA@
	mov	BYTE PTR [ebp+27], 1
	mov	BYTE PTR [ebp+26], 3
	mov	DWORD PTR [ebp+20], 12			; 0000000cH
	mov	WORD PTR [ebp+24], 162			; 000000a2H
$LN697@sqlite3Upd:
	xor	ebx, ebx
$update_cleanup$100196:
; Line 58474
	mov	eax, DWORD PTR _sContext$[esp+148]
	cmp	eax, ebx
	je	SHORT $LN698@sqlite3Upd
	mov	ecx, DWORD PTR _sContext$[esp+144]
	mov	DWORD PTR [eax+176], ecx
$LN698@sqlite3Upd:
; Line 58475
	cmp	DWORD PTR _apIdx$[esp+144], 0
	je	SHORT $LN699@sqlite3Upd
	mov	edx, DWORD PTR _apIdx$[esp+144]
	push	edx
	call	_free
	add	esp, 4
$LN699@sqlite3Upd:
; Line 58476
	mov	eax, DWORD PTR _aXRef$[esp+144]
	push	eax
	call	_free
	add	esp, 4
$LN700@sqlite3Upd:
; Line 58477
	mov	ecx, DWORD PTR _pTabList$[esp+140]
	push	ecx
	call	_sqlite3SrcListDelete
	add	esp, 4
; Line 58478
	cmp	DWORD PTR _pChanges$[esp+140], 0
	je	SHORT $LN573@sqlite3Upd
	mov	edi, DWORD PTR _pChanges$[esp+140]
	mov	esi, DWORD PTR [edi+12]
	xor	ebx, ebx
	cmp	DWORD PTR [edi], ebx
	jle	SHORT $LN554@sqlite3Upd
	npad	1
$LL556@sqlite3Upd:
	mov	edx, DWORD PTR [esi]
	push	edx
	call	_sqlite3ExprDelete
	mov	eax, DWORD PTR [esi+4]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN555@sqlite3Upd
	push	eax
	call	_free
	add	esp, 4
$LN555@sqlite3Upd:
	add	ebx, 1
	add	esi, 12					; 0000000cH
	cmp	ebx, DWORD PTR [edi]
	jl	SHORT $LL556@sqlite3Upd
$LN554@sqlite3Upd:
	mov	eax, DWORD PTR [edi+12]
	test	eax, eax
	je	SHORT $LN568@sqlite3Upd
	push	eax
	call	_free
	add	esp, 4
$LN568@sqlite3Upd:
	push	edi
	call	_free
	add	esp, 4
$LN573@sqlite3Upd:
; Line 58479
	mov	eax, DWORD PTR _pWhere$[esp+140]
	push	eax
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 58481
	add	esp, 128				; 00000080H
	ret	0
_sqlite3Update ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@HIMMFEMD@parameters?5are?5not?5allowed?5in?5vi@ ; `string'
;	COMDAT ??_C@_0CE@HIMMFEMD@parameters?5are?5not?5allowed?5in?5vi@
CONST	SEGMENT
??_C@_0CE@HIMMFEMD@parameters?5are?5not?5allowed?5in?5vi@ DB 'parameters '
	DB	'are not allowed in views', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3CreateView
_TEXT	SEGMENT
_db$145646 = -148					; size = 4
_zType$145660 = -144					; size = 4
_pName$ = -144						; size = 4
_p$145645 = -140					; size = 4
_v$145642 = -136					; size = 4
$T145661 = -132						; size = 4
_iDb$145647 = -128					; size = 4
_sEnd$ = -124						; size = 8
_zStmt$145609 = -116					; size = 4
tv576 = -112						; size = 4
_sNC$145654 = -108					; size = 36
_sFix$ = -72						; size = 16
_sSrc$145653 = -56					; size = 56
_pParse$ = 8						; size = 4
_pBegin$ = 12						; size = 4
_pSelect$ = 16						; size = 4
_isTemp$ = 20						; size = 4
_noErr$ = 24						; size = 4
_sqlite3CreateView PROC					; COMDAT
; _pName1$ = ecx
; _pName2$ = eax
; Line 44807
	sub	esp, 148				; 00000094H
	push	ebx
	push	ebp
; Line 44816
	mov	ebp, DWORD PTR _pParse$[esp+152]
	cmp	DWORD PTR [ebp+112], 0
	push	esi
	push	edi
	mov	ebx, eax
	mov	esi, ecx
	jle	SHORT $LN10@sqlite3Cre@5
; Line 44817
	push	OFFSET ??_C@_0CE@HIMMFEMD@parameters?5are?5not?5allowed?5in?5vi@
	mov	edi, ebp
	call	_sqlite3ErrorMsg
	add	esp, 4
$LN8@sqlite3Cre@5:
; Line 44824
	mov	esi, DWORD PTR _pSelect$[esp+160]
	test	esi, esi
	je	SHORT $LN27@sqlite3Cre@5
	push	esi
	call	_clearSelect
	push	esi
	call	_free
	add	esp, 8
$LN27@sqlite3Cre@5:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44867
	add	esp, 148				; 00000094H
	ret	0
$LN10@sqlite3Cre@5:
; Line 44821
	mov	eax, DWORD PTR _noErr$[esp+160]
	mov	ecx, DWORD PTR _isTemp$[esp+160]
	push	eax
	push	0
	push	1
	push	ecx
	push	ebp
	mov	eax, ebx
	mov	ecx, esi
	call	_sqlite3StartTable
; Line 44822
	mov	edi, DWORD PTR [ebp+164]
	add	esp, 20					; 00000014H
; Line 44823
	test	edi, edi
	je	SHORT $LN8@sqlite3Cre@5
	cmp	DWORD PTR [ebp+24], 0
	jne	SHORT $LN8@sqlite3Cre@5
; Line 44827
	lea	edx, DWORD PTR _pName$[esp+164]
	mov	ecx, ebx
	mov	eax, ebp
	call	_sqlite3TwoPartName
; Line 44828
	mov	ebx, DWORD PTR [ebp]
	mov	esi, DWORD PTR [edi+76]
	mov	ecx, ebx
	call	_sqlite3SchemaToIndex
; Line 44831
	test	eax, eax
	jl	SHORT $LN87@sqlite3Cre@5
	cmp	eax, 1
	je	SHORT $LN87@sqlite3Cre@5
	mov	esi, DWORD PTR _pSelect$[esp+160]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	DWORD PTR _sFix$[esp+164], ebp
	mov	eax, DWORD PTR [ebx+4]
	mov	ecx, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR _pName$[esp+164]
	lea	eax, DWORD PTR _sFix$[esp+164]
	push	esi
	push	eax
	mov	DWORD PTR _sFix$[esp+176], ecx
	mov	DWORD PTR _sFix$[esp+180], OFFSET ??_C@_04CHADEDPO@view?$AA@
	mov	DWORD PTR _sFix$[esp+184], edx
	call	_sqlite3FixSelect
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@sqlite3Cre@5
; Line 44832
	call	_sqlite3SelectDelete
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 44867
	add	esp, 148				; 00000094H
	ret	0
$LN87@sqlite3Cre@5:
; Line 44831
	mov	esi, DWORD PTR _pSelect$[esp+160]
$LN7@sqlite3Cre@5:
; Line 44841
	push	esi
	call	_sqlite3SelectDup
	add	esp, 4
; Line 44842
	test	esi, esi
	mov	DWORD PTR [edi+24], eax
	je	SHORT $LN39@sqlite3Cre@5
	push	esi
	call	_clearSelect
	push	esi
	call	_free
	add	esp, 8
$LN39@sqlite3Cre@5:
; Line 44843
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN6@sqlite3Cre@5
	cmp	DWORD PTR _inMutex, 0
	jg	$LN27@sqlite3Cre@5
$LN6@sqlite3Cre@5:
; Line 44846
	mov	ecx, DWORD PTR [ebp]
	cmp	BYTE PTR [ecx+68], 0
	jne	SHORT $LN5@sqlite3Cre@5
; Line 44847
	push	edi
	push	ebp
	call	_sqlite3ViewGetColumnNames
	add	esp, 8
$LN5@sqlite3Cre@5:
; Line 44853
	mov	esi, DWORD PTR [ebp+148]
; Line 44854
	mov	al, BYTE PTR [esi]
	test	al, al
	mov	edi, DWORD PTR [ebp+152]
	je	SHORT $LN4@sqlite3Cre@5
	cmp	al, 59					; 0000003bH
	je	SHORT $LN4@sqlite3Cre@5
; Line 44855
	mov	edx, edi
	shr	edx, 1
	add	esi, edx
$LN4@sqlite3Cre@5:
; Line 44858
	mov	eax, DWORD PTR _pBegin$[esp+160]
	mov	ebx, DWORD PTR [eax]
	sub	esi, ebx
	and	edi, 1
; Line 44860
	test	esi, esi
	jle	SHORT $LN88@sqlite3Cre@5
	npad	6
$LL3@sqlite3Cre@5:
	mov	al, BYTE PTR [ebx+esi-1]
	cmp	al, 59					; 0000003bH
	je	SHORT $LN1@sqlite3Cre@5
	movzx	ecx, al
	push	ecx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN88@sqlite3Cre@5
$LN1@sqlite3Cre@5:
	sub	esi, 1
	test	esi, esi
	jg	SHORT $LL3@sqlite3Cre@5
$LN88@sqlite3Cre@5:
; Line 44865
	mov	ecx, DWORD PTR [ebp]
	and	edi, 1
	or	edi, 2
	cmp	DWORD PTR [ebp+24], 0
	lea	ebx, DWORD PTR [ebx+esi-1]
	mov	DWORD PTR _sEnd$[esp+164], ebx
	mov	DWORD PTR _sEnd$[esp+168], edi
	mov	DWORD PTR $T145661[esp+164], 0
	mov	DWORD PTR _db$145646[esp+164], ecx
	jne	$LN27@sqlite3Cre@5
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN67@sqlite3Cre@5
	cmp	DWORD PTR _inMutex, 0
	jg	$LN27@sqlite3Cre@5
$LN67@sqlite3Cre@5:
	mov	edi, DWORD PTR [ebp+164]
	test	edi, edi
	mov	DWORD PTR _p$145645[esp+164], edi
	je	$LN27@sqlite3Cre@5
	mov	esi, DWORD PTR [edi+76]
	call	_sqlite3SchemaToIndex
	mov	esi, eax
	mov	eax, DWORD PTR [edi+44]
	test	eax, eax
	mov	DWORD PTR _iDb$145647[esp+164], esi
	je	$LN62@sqlite3Cre@5
	xor	eax, eax
	push	56					; 00000038H
	push	eax
	lea	edx, DWORD PTR _sSrc$145653[esp+172]
	push	edx
	mov	DWORD PTR _sNC$145654[esp+176], eax
	mov	DWORD PTR _sNC$145654[esp+180], eax
	mov	DWORD PTR _sNC$145654[esp+184], eax
	mov	DWORD PTR _sNC$145654[esp+188], eax
	mov	DWORD PTR _sNC$145654[esp+192], eax
	mov	DWORD PTR _sNC$145654[esp+196], eax
	mov	DWORD PTR _sNC$145654[esp+200], eax
	mov	DWORD PTR _sNC$145654[esp+204], eax
	mov	DWORD PTR _sNC$145654[esp+208], eax
	call	_memset
	mov	eax, DWORD PTR [edi]
	mov	ebx, DWORD PTR [edi+44]
	lea	ecx, DWORD PTR _sSrc$145653[esp+176]
	add	esp, 12					; 0000000cH
	lea	esi, DWORD PTR _sNC$145654[esp+164]
	mov	WORD PTR _sSrc$145653[esp+164], 1
	mov	DWORD PTR _sSrc$145653[esp+176], eax
	mov	DWORD PTR _sSrc$145653[esp+184], edi
	mov	DWORD PTR _sSrc$145653[esp+196], -1
	mov	DWORD PTR _sNC$145654[esp+164], ebp
	mov	DWORD PTR _sNC$145654[esp+168], ecx
	mov	BYTE PTR _sNC$145654[esp+186], 1
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN27@sqlite3Cre@5
	mov	esi, DWORD PTR _iDb$145647[esp+164]
	mov	ebx, DWORD PTR _sEnd$[esp+164]
$LN62@sqlite3Cre@5:
	mov	eax, DWORD PTR _db$145646[esp+164]
	cmp	BYTE PTR [eax+68], 0
	je	SHORT $LN91@sqlite3Cre@5
	mov	edx, DWORD PTR [eax+64]
	mov	DWORD PTR [edi+20], edx
	cmp	BYTE PTR [eax+68], 0
	jne	$LN93@sqlite3Cre@5
$LN91@sqlite3Cre@5:
	mov	eax, DWORD PTR [ebp+12]
	test	eax, eax
	mov	DWORD PTR _v$145642[esp+164], eax
	jne	SHORT $LN82@sqlite3Cre@5
	mov	edi, DWORD PTR [ebp]
	call	_sqlite3VdbeCreate
	test	eax, eax
	mov	DWORD PTR [ebp+12], eax
	mov	DWORD PTR _v$145642[esp+164], eax
	je	$LN27@sqlite3Cre@5
	mov	edi, DWORD PTR _p$145645[esp+164]
	mov	esi, DWORD PTR _iDb$145647[esp+164]
	mov	ebx, DWORD PTR _sEnd$[esp+164]
$LN82@sqlite3Cre@5:
	push	0
	push	0
	push	30					; 0000001eH
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [edi+24], 0
	jne	SHORT $LN58@sqlite3Cre@5
	mov	DWORD PTR _zType$145660[esp+164], OFFSET ??_C@_05LCLENNFI@table?$AA@
	mov	ecx, OFFSET ??_C@_05HJCCDKBG@TABLE?$AA@
	jmp	SHORT $LN57@sqlite3Cre@5
$LN58@sqlite3Cre@5:
	mov	DWORD PTR _zType$145660[esp+164], OFFSET ??_C@_04CHADEDPO@view?$AA@
	mov	ecx, OFFSET ??_C@_04OLDJKBIG@VIEW?$AA@
$LN57@sqlite3Cre@5:
	mov	eax, DWORD PTR [ebp+140]
	sub	ebx, eax
	push	eax
	add	ebx, 1
	push	ebx
	push	ecx
	push	OFFSET ??_C@_0P@BPBAOJCC@CREATE?5?$CFs?5?$CF?4?$CKs?$AA@
	call	_sqlite3MPrintf
	add	esp, 16					; 00000010H
	cmp	esi, 1
	mov	ecx, eax
	mov	DWORD PTR _zStmt$145609[esp+164], ecx
	mov	edx, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN71@sqlite3Cre@5
	mov	edx, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN71@sqlite3Cre@5:
	mov	edi, DWORD PTR [edi]
	push	ecx
	mov	ecx, DWORD PTR _zType$145660[esp+168]
	push	edi
	push	edi
	push	ecx
	push	edx
	mov	edx, DWORD PTR _db$145646[esp+184]
	mov	ecx, DWORD PTR [edx+4]
	lea	eax, DWORD PTR [esi+esi*2]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	mov	edx, DWORD PTR [eax+ecx]
	push	edx
	push	OFFSET ??_C@_0FF@EMOBCNNL@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8?$CFs?8?0?5name@
	mov	ebx, ebp
	mov	DWORD PTR tv576[esp+192], eax
	call	_sqlite3NestedParse
	mov	eax, DWORD PTR _zStmt$145609[esp+192]
	push	eax
	call	_sqlite3FreeX
	mov	ebx, DWORD PTR _db$145646[esp+196]
	mov	edi, DWORD PTR _v$145642[esp+196]
	add	esp, 32					; 00000020H
	mov	ecx, ebx
	call	_sqlite3ChangeCookie
	mov	esi, DWORD PTR _p$145645[esp+164]
	cmp	BYTE PTR [esi+56], 0
	je	SHORT $LN50@sqlite3Cre@5
	mov	eax, DWORD PTR [ebx+4]
	add	eax, DWORD PTR tv576[esp+164]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+116], 0
	jne	SHORT $LN50@sqlite3Cre@5
	mov	edx, DWORD PTR [eax]
	push	edx
	push	OFFSET ??_C@_0CK@BLJIJAMD@CREATE?5TABLE?5?$CFQ?4sqlite_sequence?$CI@
	mov	ebx, ebp
	call	_sqlite3NestedParse
	add	esp, 8
$LN50@sqlite3Cre@5:
	mov	eax, DWORD PTR [esi]
	push	-1
	push	eax
	push	OFFSET ??_C@_0O@LAHPKCHN@tbl_name?$DN?8?$CFq?8?$AA@
	call	_sqlite3MPrintf
	mov	ecx, DWORD PTR _iDb$145647[esp+176]
	mov	edi, DWORD PTR _v$145642[esp+176]
	add	esp, 8
	push	eax
	xor	eax, eax
	lea	edx, DWORD PTR [eax+28]
	call	_sqlite3VdbeOp3
	mov	eax, DWORD PTR _db$145646[esp+172]
	add	esp, 8
	cmp	BYTE PTR [eax+68], 0
	mov	edi, esi
	je	$LN27@sqlite3Cre@5
$LN93@sqlite3Cre@5:
	cmp	DWORD PTR [ebp+24], 0
	jne	$LN27@sqlite3Cre@5
	mov	ecx, DWORD PTR [edi]
	mov	esi, DWORD PTR [edi+76]
	mov	eax, ecx
	lea	ebx, DWORD PTR [eax+1]
$LL83@sqlite3Cre@5:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL83@sqlite3Cre@5
	sub	eax, ebx
	add	eax, 1
	push	edi
	push	eax
	push	ecx
	lea	eax, DWORD PTR [esi+4]
	call	_sqlite3HashInsert
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN27@sqlite3Cre@5
	mov	ebp, DWORD PTR [edi+36]
	test	ebp, ebp
	je	SHORT $LN45@sqlite3Cre@5
	add	esi, 88					; 00000058H
$LL86@sqlite3Cre@5:
	mov	ebx, DWORD PTR [ebp+8]
	mov	eax, ebx
	lea	edx, DWORD PTR [eax+1]
	npad	2
$LL84@sqlite3Cre@5:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL84@sqlite3Cre@5
	sub	eax, edx
	lea	edi, DWORD PTR [eax+1]
	call	_sqlite3HashFind
	mov	ecx, DWORD PTR [ebp+8]
	push	ebp
	mov	DWORD PTR [ebp+12], eax
	push	edi
	push	ecx
	mov	eax, esi
	call	_sqlite3HashInsert
	mov	ebp, DWORD PTR [ebp+4]
	add	esp, 12					; 0000000cH
	test	ebp, ebp
	jne	SHORT $LL86@sqlite3Cre@5
$LN45@sqlite3Cre@5:
	mov	ecx, DWORD PTR _pParse$[esp+160]
	mov	eax, DWORD PTR _db$145646[esp+164]
	mov	esi, DWORD PTR _p$145645[esp+164]
	mov	DWORD PTR [ecx+164], 0
	add	DWORD PTR [eax+24], 1
	or	DWORD PTR [eax+8], 16			; 00000010H
	cmp	DWORD PTR [esi+24], 0
	jne	$LN27@sqlite3Cre@5
	mov	edx, DWORD PTR $T145661[esp+164]
	cmp	DWORD PTR [edx], edx
	mov	ecx, DWORD PTR [ecx+140]
	jne	SHORT $LN43@sqlite3Cre@5
	lea	eax, DWORD PTR _sEnd$[esp+164]
	mov	DWORD PTR $T145661[esp+164], eax
$LN43@sqlite3Cre@5:
	mov	edx, DWORD PTR $T145661[esp+164]
	mov	edx, DWORD PTR [edx]
	sub	edx, ecx
	call	_sqlite3Utf8CharLen
	pop	edi
	add	eax, 13					; 0000000dH
	mov	DWORD PTR [esi+48], eax
	pop	esi
	pop	ebp
	pop	ebx
; Line 44867
	add	esp, 148				; 00000094H
	ret	0
_sqlite3CreateView ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _codeTriggerProgram
_TEXT	SEGMENT
_pSrc$100082 = -4					; size = 4
_pSrc$100080 = -4					; size = 4
_orconfin$ = 8						; size = 4
_codeTriggerProgram PROC				; COMDAT
; _pParse$ = edi
; _pStepList$ = eax
; Line 57780
	push	ecx
	push	ebx
; Line 57783
	mov	ebx, DWORD PTR [edi+12]
	push	esi
; Line 57787
	push	0
	mov	esi, eax
	push	0
	push	59					; 0000003bH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 57789
	test	esi, esi
	je	$LN9@codeTrigge
	push	ebp
$LL10@codeTrigge:
; Line 57790
	mov	ebp, DWORD PTR _orconfin$[esp+12]
	cmp	ebp, 99					; 00000063H
	jne	SHORT $LN13@codeTrigge
	mov	ebp, DWORD PTR [esi+4]
$LN13@codeTrigge:
; Line 57791
	mov	eax, DWORD PTR [edi+172]
	mov	DWORD PTR [eax+12], ebp
; Line 57792
	mov	eax, DWORD PTR [esi]
	add	eax, -99				; ffffff9dH
	cmp	eax, 11					; 0000000bH
	ja	$LN26@codeTrigge
	movzx	ecx, BYTE PTR $LN25@codeTrigge[eax]
	jmp	DWORD PTR $LN27@codeTrigge[ecx*4]
$LN6@codeTrigge:
; Line 57794
	mov	edx, DWORD PTR [esi+12]
	push	edx
	call	_sqlite3SelectDup
	mov	ebp, eax
	add	esp, 4
; Line 57795
	test	ebp, ebp
	je	$LN26@codeTrigge
; Line 57796
	push	0
	push	ebp
	push	edi
	call	_sqlite3SelectResolve
; Line 57797
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	ebp
	push	edi
	call	_sqlite3Select
; Line 57798
	push	ebp
	call	_clearSelect
	push	ebp
	call	_free
	add	esp, 52					; 00000034H
; Line 57800
	jmp	$LN26@codeTrigge
$LN4@codeTrigge:
; Line 57804
	mov	eax, esi
	mov	ecx, edi
	call	_targetSrcList
; Line 57805
	push	0
	mov	DWORD PTR _pSrc$100080[esp+20], eax
	push	0
	push	56					; 00000038H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 57808
	mov	eax, DWORD PTR [esi+24]
	add	esp, 12					; 0000000cH
	push	ebp
	push	eax
	call	_sqlite3ExprDup
	mov	ecx, DWORD PTR [esi+28]
	add	esp, 4
	push	eax
	push	ecx
	call	_sqlite3ExprListDup
	mov	edx, DWORD PTR _pSrc$100080[esp+28]
	add	esp, 4
	push	eax
	push	edx
	push	edi
	call	_sqlite3Update
; Line 57809
	push	0
	push	1
	push	56					; 00000038H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 32					; 00000020H
; Line 57810
	jmp	$LN26@codeTrigge
$LN3@codeTrigge:
; Line 57814
	mov	eax, esi
	mov	ecx, edi
	call	_targetSrcList
; Line 57815
	push	0
	mov	DWORD PTR _pSrc$100082[esp+20], eax
	push	0
	push	56					; 00000038H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 57819
	mov	eax, DWORD PTR [esi+32]
	add	esp, 12					; 0000000cH
	push	ebp
	push	eax
	call	_sqlite3IdListDup
	mov	ecx, DWORD PTR [esi+12]
	add	esp, 4
	push	eax
	push	ecx
	call	_sqlite3SelectDup
	mov	edx, DWORD PTR [esi+28]
	add	esp, 4
	push	eax
	push	edx
	call	_sqlite3ExprListDup
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _pSrc$100082[esp+32]
	push	eax
	push	edi
	call	_sqlite3Insert
; Line 57820
	push	0
	push	1
	push	56					; 00000038H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 36					; 00000024H
; Line 57821
	jmp	SHORT $LN26@codeTrigge
$LN2@codeTrigge:
; Line 57825
	push	0
	push	0
	push	56					; 00000038H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
; Line 57826
	mov	eax, esi
	mov	ecx, edi
	call	_targetSrcList
; Line 57827
	mov	ecx, DWORD PTR [esi+24]
	push	ecx
	mov	ebp, eax
	call	_sqlite3ExprDup
	push	eax
	push	ebp
	push	edi
	call	_sqlite3DeleteFrom
; Line 57828
	push	0
	push	1
	push	56					; 00000038H
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 40					; 00000028H
$LN26@codeTrigge:
; Line 57834
	mov	esi, DWORD PTR [esi+36]
	test	esi, esi
	jne	$LL10@codeTrigge
	pop	ebp
$LN9@codeTrigge:
; Line 57836
	push	0
	push	0
	push	109					; 0000006dH
	mov	eax, ebx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	pop	esi
; Line 57839
	xor	eax, eax
	pop	ebx
; Line 57840
	pop	ecx
	ret	0
	npad	3
$LN27@codeTrigge:
	DD	$LN2@codeTrigge
	DD	$LN4@codeTrigge
	DD	$LN3@codeTrigge
	DD	$LN6@codeTrigge
	DD	$LN26@codeTrigge
$LN25@codeTrigge:
	DB	0
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_codeTriggerProgram ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3CodeRowTrigger
_TEXT	SEGMENT
_p$ = -84						; size = 4
_pNew$145837 = -80					; size = 4
_endTrigger$100124 = -80				; size = 4
$T145804 = -76						; size = 4
_sContext$100126 = -72					; size = 8
_trigStackEntry$ = -64					; size = 28
_sNC$100127 = -36					; size = 36
_pParse$ = 8						; size = 4
_op$ = 12						; size = 4
_pChanges$ = 16						; size = 4
_tr_tm$ = 20						; size = 4
_pTab$ = 24						; size = 4
_newIdx$ = 28						; size = 4
_oldIdx$ = 32						; size = 4
_orconf$ = 36						; size = 4
_ignoreJump$ = 40					; size = 4
_sqlite3CodeRowTrigger PROC				; COMDAT
; Line 57872
	sub	esp, 84					; 00000054H
; Line 57881
	mov	eax, DWORD PTR _pTab$[esp+80]
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR [eax+32]
	test	edi, edi
	mov	DWORD PTR _p$[esp+100], edi
	je	$LN10@sqlite3Cod@3
	mov	ebp, DWORD PTR _pParse$[esp+96]
	jmp	SHORT $LN12@sqlite3Cod@3
$LL66@sqlite3Cod@3:
	mov	edi, DWORD PTR _p$[esp+100]
$LN12@sqlite3Cod@3:
; Line 57890
	movzx	edx, BYTE PTR [edi+8]
	mov	ecx, DWORD PTR _op$[esp+96]
	cmp	edx, ecx
	jne	$LN11@sqlite3Cod@3
	movzx	eax, BYTE PTR [edi+9]
	cmp	eax, DWORD PTR _tr_tm$[esp+96]
	jne	$LN11@sqlite3Cod@3
	mov	eax, DWORD PTR [edi+28]
	cmp	eax, DWORD PTR [edi+32]
	je	SHORT $LN8@sqlite3Cod@3
	mov	edx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [edx+44]
	jne	$LN11@sqlite3Cod@3
$LN8@sqlite3Cod@3:
	cmp	ecx, 100				; 00000064H
	jne	SHORT $LN7@sqlite3Cod@3
	mov	eax, DWORD PTR [edi+16]
	test	eax, eax
	je	SHORT $LN7@sqlite3Cod@3
	push	eax
	mov	eax, DWORD PTR _pChanges$[esp+100]
	call	_checkColumnOverLap
	add	esp, 4
	test	eax, eax
	je	$LN11@sqlite3Cod@3
$LN7@sqlite3Cod@3:
; Line 57892
	mov	ecx, DWORD PTR [ebp+172]
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN63@sqlite3Cod@3
$LL6@sqlite3Cod@3:
	cmp	edi, DWORD PTR [eax+20]
	je	$LN11@sqlite3Cod@3
	mov	eax, DWORD PTR [eax+24]
	test	eax, eax
	jne	SHORT $LL6@sqlite3Cod@3
$LN63@sqlite3Cod@3:
; Line 57917
	mov	edx, DWORD PTR _oldIdx$[esp+96]
; Line 57925
	mov	esi, DWORD PTR [ebp+12]
	xor	eax, eax
	mov	DWORD PTR _sNC$100127[esp+100], eax
	mov	DWORD PTR _sNC$100127[esp+104], eax
	mov	DWORD PTR _sNC$100127[esp+108], eax
	mov	DWORD PTR _sNC$100127[esp+112], eax
	mov	DWORD PTR _sNC$100127[esp+116], eax
	mov	DWORD PTR _sNC$100127[esp+120], eax
	mov	DWORD PTR _sNC$100127[esp+124], eax
	mov	DWORD PTR _sNC$100127[esp+128], eax
	mov	DWORD PTR _sNC$100127[esp+132], eax
	mov	eax, DWORD PTR _newIdx$[esp+96]
	mov	DWORD PTR _trigStackEntry$[esp+104], eax
	mov	eax, DWORD PTR _pTab$[esp+96]
	mov	DWORD PTR _trigStackEntry$[esp+108], edx
	mov	DWORD PTR _trigStackEntry$[esp+124], ecx
	mov	ecx, DWORD PTR _ignoreJump$[esp+96]
	mov	DWORD PTR _trigStackEntry$[esp+100], eax
	mov	eax, DWORD PTR [ebp+176]
	mov	DWORD PTR _trigStackEntry$[esp+120], edi
	mov	DWORD PTR _trigStackEntry$[esp+116], ecx
	lea	edx, DWORD PTR _trigStackEntry$[esp+100]
	mov	DWORD PTR [ebp+172], edx
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR _sNC$100127[esp+100], ebp
	mov	DWORD PTR [ebp+176], ecx
	mov	ebx, DWORD PTR [esi+24]
	mov	DWORD PTR _sContext$100126[esp+100], eax
	mov	eax, DWORD PTR [esi+28]
	cmp	ebx, eax
	lea	edx, DWORD PTR [ebx+1]
	mov	DWORD PTR [esi+24], edx
	jl	$LN68@sqlite3Cod@3
	lea	eax, DWORD PTR [eax+eax+10]
	mov	DWORD PTR [esi+28], eax
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	lea	ecx, DWORD PTR [eax*4]
	mov	eax, DWORD PTR [esi+32]
	mov	DWORD PTR $T145804[esp+100], eax
	je	SHORT $LN32@sqlite3Cod@3
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN32@sqlite3Cod@3
	mov	DWORD PTR _pNew$145837[esp+100], 0
	jmp	SHORT $LN65@sqlite3Cod@3
$LN32@sqlite3Cod@3:
	test	eax, eax
	jne	SHORT $LN31@sqlite3Cod@3
	mov	edi, ecx
	call	_sqlite3Malloc
	mov	edi, DWORD PTR _p$[esp+100]
	jmp	SHORT $LN67@sqlite3Cod@3
$LN31@sqlite3Cod@3:
	push	ecx
	push	eax
	call	_realloc
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN67@sqlite3Cod@3
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN71@sqlite3Cod@3
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN67@sqlite3Cod@3
$LN71@sqlite3Cod@3:
	mov	ecx, 1
	add	DWORD PTR _inMutex, ecx
	mov	DWORD PTR _sqlite3_mallocHasFailed, ecx
$LN67@sqlite3Cod@3:
	test	eax, eax
	mov	DWORD PTR _pNew$145837[esp+100], eax
	jne	SHORT $LN72@sqlite3Cod@3
	mov	eax, DWORD PTR $T145804[esp+100]
$LN65@sqlite3Cod@3:
	test	eax, eax
	je	SHORT $LN72@sqlite3Cod@3
	push	eax
	call	_free
	add	esp, 4
$LN72@sqlite3Cod@3:
	mov	eax, DWORD PTR _pNew$145837[esp+100]
	mov	DWORD PTR [esi+32], eax
$LN68@sqlite3Cod@3:
	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	je	SHORT $LN69@sqlite3Cod@3
	mov	DWORD PTR [esi+ebx*4], -1
$LN69@sqlite3Cod@3:
; Line 57926
	mov	ecx, DWORD PTR [edi+12]
	or	eax, -1
	sub	eax, ebx
	push	ecx
	mov	DWORD PTR _endTrigger$100124[esp+104], eax
	call	_sqlite3ExprDup
	add	esp, 4
	mov	ebx, eax
; Line 57927
	lea	esi, DWORD PTR _sNC$100127[esp+100]
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	SHORT $LN60@sqlite3Cod@3
; Line 57932
	mov	edx, DWORD PTR _endTrigger$100124[esp+100]
	push	1
	push	edx
	push	ebx
	push	ebp
	call	_sqlite3ExprIfFalse
; Line 57933
	push	ebx
	call	_sqlite3ExprDelete
; Line 57935
	mov	eax, DWORD PTR _orconf$[esp+116]
	push	eax
	mov	eax, DWORD PTR [edi+36]
	mov	edi, ebp
	call	_codeTriggerProgram
; Line 57938
	mov	ecx, DWORD PTR _trigStackEntry$[esp+148]
; Line 57939
	mov	edx, DWORD PTR _sContext$100126[esp+124]
; Line 57941
	mov	edi, DWORD PTR _p$[esp+124]
	mov	DWORD PTR [ebp+172], ecx
	mov	DWORD PTR [ebp+176], edx
	mov	ecx, DWORD PTR [ebp+12]
	mov	eax, DWORD PTR [ecx+32]
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN11@sqlite3Cod@3
	mov	edx, DWORD PTR _endTrigger$100124[esp+100]
	mov	ecx, DWORD PTR [ecx+12]
	lea	edx, DWORD PTR [edx*4+4]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN11@sqlite3Cod@3:
	mov	edi, DWORD PTR [edi+40]
	test	edi, edi
	mov	DWORD PTR _p$[esp+100], edi
	jne	$LL66@sqlite3Cod@3
$LN10@sqlite3Cod@3:
	pop	edi
	pop	esi
	pop	ebp
; Line 57944
	xor	eax, eax
	pop	ebx
; Line 57945
	add	esp, 84					; 00000054H
	ret	0
$LN60@sqlite3Cod@3:
; Line 57928
	mov	edx, DWORD PTR _trigStackEntry$[esp+124]
; Line 57929
	push	ebx
	mov	DWORD PTR [ebp+172], edx
	call	_sqlite3ExprDelete
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
; Line 57930
	mov	eax, 1
	pop	ebx
; Line 57945
	add	esp, 84					; 00000054H
	ret	0
_sqlite3CodeRowTrigger ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@OMFDFDMH@rows?5inserted?$AA@		; `string'
PUBLIC	??_C@_0CA@HKGLKLIP@table?5?$CFS?5has?5no?5column?5named?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BJ@IABIHKKK@?$CFd?5values?5for?5?$CFd?5columns?$AA@ ; `string'
PUBLIC	??_C@_0DE@HLHNLKJ@table?5?$CFS?5has?5?$CFd?5columns?5but?5?$CFd?5v@ ; `string'
;	COMDAT ??_C@_0O@OMFDFDMH@rows?5inserted?$AA@
CONST	SEGMENT
??_C@_0O@OMFDFDMH@rows?5inserted?$AA@ DB 'rows inserted', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HKGLKLIP@table?5?$CFS?5has?5no?5column?5named?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0CA@HKGLKLIP@table?5?$CFS?5has?5no?5column?5named?5?$CFs?$AA@ DB 't'
	DB	'able %S has no column named %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IABIHKKK@?$CFd?5values?5for?5?$CFd?5columns?$AA@
CONST	SEGMENT
??_C@_0BJ@IABIHKKK@?$CFd?5values?5for?5?$CFd?5columns?$AA@ DB '%d values '
	DB	'for %d columns', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HLHNLKJ@table?5?$CFS?5has?5?$CFd?5columns?5but?5?$CFd?5v@
CONST	SEGMENT
??_C@_0DE@HLHNLKJ@table?5?$CFS?5has?5?$CFd?5columns?5but?5?$CFd?5v@ DB 't'
	DB	'able %S has %d columns but %d values were supplied', 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Insert
_TEXT	SEGMENT
_pTab$ = -124						; size = 4
_nColumn$ = -120					; size = 4
_triggers_exist$ = -116					; size = 4
_base$ = -112						; size = 4
_endOfLoop$ = -108					; size = 4
_i$ = -108						; size = 4
_useTempTable$ = -104					; size = 4
_srcTab$ = -100						; size = 4
_keyColumn$ = -96					; size = 4
_newIdx$ = -92						; size = 4
_counterMem$ = -88					; size = 4
tv1666 = -84						; size = 4
tv1287 = -84						; size = 4
_iInitCode$96496 = -84					; size = 4
_iSelectLoop$ = -80					; size = 4
_iInsertBlock$ = -76					; size = 4
_appendFlag$ = -72					; size = 4
_isView$ = -68						; size = 4
_iCleanup$ = -64					; size = 4
_iDb$ = -60						; size = 4
_db$ = -56						; size = 4
_iCntMem$ = -52						; size = 4
_iCont$ = -48						; size = 4
_iBreak$ = -44						; size = 4
tv1274 = -40						; size = 4
_sNC$96505 = -36					; size = 36
_pParse$ = 8						; size = 4
_pTabList$ = 12						; size = 4
_pList$ = 16						; size = 4
_pSelect$ = 20						; size = 4
_pColumn$ = 24						; size = 4
_onError$ = 28						; size = 4
_sqlite3Insert PROC					; COMDAT
; Line 49502
	sub	esp, 124				; 0000007cH
	push	ebx
	push	ebp
; Line 49532
	mov	ebp, DWORD PTR _pParse$[esp+128]
	push	esi
	xor	esi, esi
	or	eax, -1
	cmp	DWORD PTR [ebp+24], esi
	push	edi
	mov	DWORD PTR _base$[esp+140], esi
	mov	DWORD PTR _iCont$[esp+140], esi
	mov	DWORD PTR _iBreak$[esp+140], esi
	mov	DWORD PTR _keyColumn$[esp+140], eax
	mov	DWORD PTR _useTempTable$[esp+140], esi
	mov	DWORD PTR _srcTab$[esp+140], esi
	mov	DWORD PTR _iSelectLoop$[esp+140], esi
	mov	DWORD PTR _iCleanup$[esp+140], esi
	mov	DWORD PTR _iInsertBlock$[esp+140], esi
	mov	DWORD PTR _iCntMem$[esp+140], esi
	mov	DWORD PTR _newIdx$[esp+140], eax
	mov	DWORD PTR _appendFlag$[esp+140], esi
	jne	$insert_cleanup$96479
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN114@sqlite3Ins
	cmp	DWORD PTR _inMutex, esi
	jg	$insert_cleanup$96479
$LN114@sqlite3Ins:
; Line 49541
	mov	eax, DWORD PTR _pTabList$[esp+136]
	cmp	DWORD PTR [eax+12], esi
	mov	edi, DWORD PTR [ebp]
	mov	DWORD PTR _db$[esp+140], edi
	je	$insert_cleanup$96479
; Line 49542
	mov	ecx, eax
	push	ecx
	push	ebp
	call	_sqlite3SrcListLookup
	add	esp, 8
; Line 49543
	cmp	eax, esi
	mov	DWORD PTR _pTab$[esp+140], eax
	je	$insert_cleanup$96479
; Line 49546
	mov	ebx, eax
	mov	esi, DWORD PTR [ebx+76]
	mov	ecx, edi
	call	_sqlite3SchemaToIndex
; Line 49550
	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR _iDb$[esp+140], eax
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [eax+edx*8]
	push	eax
	push	0
	push	ecx
	push	18					; 00000012H
	mov	eax, ebp
	call	_sqlite3AuthCheck
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$insert_cleanup$96479
; Line 49558
	mov	esi, DWORD PTR _pTab$[esp+140]
	push	101					; 00000065H
	xor	ebx, ebx
	mov	eax, esi
	call	_sqlite3TriggersExist
; Line 49559
	xor	edx, edx
	cmp	DWORD PTR [esi+24], edx
	mov	DWORD PTR _triggers_exist$[esp+144], eax
	setne	dl
; Line 49573
	push	eax
	mov	eax, esi
	mov	ecx, ebp
	mov	DWORD PTR _isView$[esp+148], edx
	call	_sqlite3IsReadOnly
	add	esp, 8
	test	eax, eax
	jne	$insert_cleanup$96479
; Line 49582
	mov	eax, esi
	push	eax
	push	ebp
	call	_sqlite3ViewGetColumnNames
	add	esp, 8
	test	eax, eax
	jne	$insert_cleanup$96479
; Line 49588
	mov	esi, ebp
	call	_sqlite3GetVdbe
	mov	edi, eax
; Line 49589
	test	edi, edi
	je	$insert_cleanup$96479
; Line 49590
	cmp	BYTE PTR [ebp+19], bl
	jne	SHORT $LN285@sqlite3Ins
	mov	BYTE PTR [edi+562], 1
$LN285@sqlite3Ins:
; Line 49591
	mov	ebx, DWORD PTR _pSelect$[esp+136]
	test	ebx, ebx
	jne	SHORT $LN117@sqlite3Ins
	cmp	DWORD PTR _triggers_exist$[esp+140], ebx
	jne	SHORT $LN117@sqlite3Ins
	xor	eax, eax
	jmp	SHORT $LN118@sqlite3Ins
$LN117@sqlite3Ins:
	mov	eax, 1
$LN118@sqlite3Ins:
	mov	esi, DWORD PTR _iDb$[esp+140]
	push	eax
	mov	eax, esi
	mov	ecx, ebp
	call	_sqlite3BeginWriteOperation
	add	esp, 4
; Line 49594
	cmp	DWORD PTR _triggers_exist$[esp+140], 0
	je	SHORT $LN105@sqlite3Ins
; Line 49595
	mov	eax, DWORD PTR [ebp+28]
	mov	DWORD PTR _newIdx$[esp+140], eax
	add	eax, 1
	mov	DWORD PTR [ebp+28], eax
$LN105@sqlite3Ins:
; Line 49606
	cmp	DWORD PTR _pColumn$[esp+136], 0
	jne	SHORT $LN104@sqlite3Ins
	mov	ecx, DWORD PTR _onError$[esp+136]
	mov	edx, DWORD PTR _pTab$[esp+140]
	push	esi
	push	ecx
	push	edx
	push	ebp
	mov	eax, ebx
	call	_xferOptimization
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$insert_cleanup$96479
$LN104@sqlite3Ins:
; Line 49618
	mov	eax, DWORD PTR _pTab$[esp+140]
	push	eax
	push	esi
	mov	eax, ebp
	call	_autoIncBegin
	add	esp, 8
; Line 49628
	test	ebx, ebx
	mov	DWORD PTR _counterMem$[esp+140], eax
	je	$LN103@sqlite3Ins
; Line 49632
	push	0
	push	0
	push	95					; 0000005fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49633
	mov	ecx, DWORD PTR [edi+12]
	mov	esi, eax
; Line 49634
	mov	eax, edi
	mov	DWORD PTR _iInitCode$96496[esp+152], esi
	mov	DWORD PTR _iSelectLoop$[esp+152], ecx
	call	_sqlite3VdbeMakeLabel
; Line 49637
	push	0
	push	0
	push	0
	push	0
	push	eax
	push	9
	push	ebx
	push	ebp
	mov	DWORD PTR _iInsertBlock$[esp+184], eax
	call	_sqlite3Select
	add	esp, 44					; 0000002cH
; Line 49638
	test	eax, eax
	jne	$insert_cleanup$96479
	cmp	DWORD PTR [ebp+24], eax
	jne	$insert_cleanup$96479
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN102@sqlite3Ins
	cmp	DWORD PTR _inMutex, eax
	jg	$insert_cleanup$96479
$LN102@sqlite3Ins:
; Line 49642
	mov	eax, edi
	call	_sqlite3VdbeMakeLabel
; Line 49643
	push	eax
	mov	DWORD PTR _iCleanup$[esp+144], eax
	push	0
	push	95					; 0000005fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49645
	mov	eax, DWORD PTR _pSelect$[esp+148]
	mov	edx, DWORD PTR [eax]
	mov	ebx, DWORD PTR [edx]
	add	esp, 12					; 0000000cH
; Line 49655
	cmp	DWORD PTR _triggers_exist$[esp+140], 0
	mov	DWORD PTR _nColumn$[esp+140], ebx
	jne	SHORT $LN99@sqlite3Ins
	mov	ecx, DWORD PTR _pTab$[esp+140]
	mov	edx, DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR [ecx+76]
	push	edx
	push	ecx
	push	eax
	call	_selectReadsTable
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN98@sqlite3Ins
$LN99@sqlite3Ins:
; Line 49663
	mov	esi, DWORD PTR [ebp+28]
	lea	edx, DWORD PTR [esi+1]
	mov	DWORD PTR [ebp+28], edx
; Line 49664
	mov	edx, DWORD PTR _iInsertBlock$[esp+140]
	mov	ecx, edi
	mov	DWORD PTR _useTempTable$[esp+140], 1
	mov	DWORD PTR _srcTab$[esp+140], esi
	call	_sqlite3VdbeResolveLabel
; Line 49665
	push	0
	push	ebx
	push	91					; 0000005bH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49666
	push	0
	push	esi
	push	23					; 00000017H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49667
	push	0
	push	1
	push	103					; 00000067H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49668
	push	8
	push	esi
	push	113					; 00000071H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49669
	push	0
	push	0
	push	22					; 00000016H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49675
	mov	eax, DWORD PTR _iInitCode$96496[esp+200]
	mov	ecx, edi
	call	_sqlite3VdbeJumpHere
; Line 49676
	push	0
	push	esi
	push	121					; 00000079H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 72					; 00000048H
; Line 49677
	push	ebx
	push	esi
	push	104					; 00000068H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49678
	mov	eax, DWORD PTR _iSelectLoop$[esp+152]
	push	eax
	push	0
	push	95					; 0000005fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49679
	mov	edx, DWORD PTR _iCleanup$[esp+164]
	add	esp, 24					; 00000018H
	mov	ecx, edi
	call	_sqlite3VdbeResolveLabel
; Line 49680
	mov	eax, ebx
	jmp	$LN287@sqlite3Ins
$LN98@sqlite3Ins:
; Line 49681
	mov	eax, esi
	mov	ecx, edi
	call	_sqlite3VdbeJumpHere
; Line 49683
	mov	eax, ebx
	jmp	$LN287@sqlite3Ins
$LN103@sqlite3Ins:
; Line 49692
	mov	ecx, DWORD PTR _pList$[esp+136]
	xor	eax, eax
	cmp	ecx, eax
	mov	DWORD PTR _sNC$96505[esp+140], eax
	mov	DWORD PTR _sNC$96505[esp+144], eax
	mov	DWORD PTR _sNC$96505[esp+148], eax
	mov	DWORD PTR _sNC$96505[esp+152], eax
	mov	DWORD PTR _sNC$96505[esp+156], eax
	mov	DWORD PTR _sNC$96505[esp+160], eax
	mov	DWORD PTR _sNC$96505[esp+164], eax
	mov	DWORD PTR _sNC$96505[esp+168], eax
	mov	DWORD PTR _sNC$96505[esp+172], eax
	mov	DWORD PTR _sNC$96505[esp+140], ebp
	mov	DWORD PTR _srcTab$[esp+140], -1
	mov	DWORD PTR _useTempTable$[esp+140], eax
	je	SHORT $LN119@sqlite3Ins
	mov	ecx, DWORD PTR [ecx]
	jmp	SHORT $LN315@sqlite3Ins
$LN119@sqlite3Ins:
	xor	ecx, ecx
$LN315@sqlite3Ins:
; Line 49693
	cmp	ecx, eax
	mov	DWORD PTR _nColumn$[esp+140], ecx
	mov	DWORD PTR _i$[esp+140], eax
	jle	SHORT $LN286@sqlite3Ins
	mov	DWORD PTR tv1666[esp+140], eax
$LL95@sqlite3Ins:
; Line 49694
	mov	ecx, DWORD PTR _pList$[esp+136]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR tv1666[esp+140]
	mov	ebx, DWORD PTR [edx+eax]
	lea	esi, DWORD PTR _sNC$96505[esp+140]
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$insert_cleanup$96479
	mov	ecx, DWORD PTR _i$[esp+140]
	mov	eax, DWORD PTR _nColumn$[esp+140]
	add	DWORD PTR tv1666[esp+140], 12		; 0000000cH
	add	ecx, 1
	cmp	ecx, eax
	mov	DWORD PTR _i$[esp+140], ecx
	jl	SHORT $LL95@sqlite3Ins
; Line 49693
	jmp	SHORT $LN287@sqlite3Ins
$LN286@sqlite3Ins:
	mov	eax, DWORD PTR _nColumn$[esp+140]
$LN287@sqlite3Ins:
; Line 49703
	mov	ecx, DWORD PTR _pColumn$[esp+136]
	test	ecx, ecx
	jne	SHORT $LN277@sqlite3Ins
	test	eax, eax
	je	$LN301@sqlite3Ins
	mov	ecx, DWORD PTR _pTab$[esp+140]
	mov	ecx, DWORD PTR [ecx+4]
	cmp	eax, ecx
	je	$LN300@sqlite3Ins
; Line 49706
	mov	edx, DWORD PTR _pTabList$[esp+136]
	push	eax
	push	ecx
	push	0
	push	edx
	push	OFFSET ??_C@_0DE@HLHNLKJ@table?5?$CFS?5has?5?$CFd?5columns?5but?5?$CFd?5v@
	mov	edi, ebp
	call	_sqlite3ErrorMsg
	add	esp, 20					; 00000014H
; Line 49707
	jmp	$insert_cleanup$96479
$LN277@sqlite3Ins:
; Line 49709
	mov	edx, DWORD PTR [ecx+4]
	cmp	eax, edx
	je	SHORT $LN90@sqlite3Ins
; Line 49710
	push	edx
	push	eax
	push	OFFSET ??_C@_0BJ@IABIHKKK@?$CFd?5values?5for?5?$CFd?5columns?$AA@
	mov	edi, ebp
	call	_sqlite3ErrorMsg
	add	esp, 12					; 0000000cH
; Line 49711
	jmp	$insert_cleanup$96479
$LN90@sqlite3Ins:
; Line 49726
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN86@sqlite3Ins
	or	edx, -1
	npad	7
$LL88@sqlite3Ins:
; Line 49727
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [esi+eax*8+4], edx
	add	eax, 1
	cmp	eax, DWORD PTR [ecx+4]
	jl	SHORT $LL88@sqlite3Ins
$LN86@sqlite3Ins:
; Line 49729
	cmp	DWORD PTR [ecx+4], 0
	mov	DWORD PTR _i$[esp+140], 0
	jle	$LN301@sqlite3Ins
$LL85@sqlite3Ins:
; Line 49730
	mov	eax, DWORD PTR _pTab$[esp+140]
	mov	ebp, DWORD PTR [eax+4]
	xor	esi, esi
	test	ebp, ebp
	jle	SHORT $LN290@sqlite3Ins
	mov	ecx, DWORD PTR _pColumn$[esp+136]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _i$[esp+140]
	mov	ecx, DWORD PTR [edx+eax*8]
	lea	eax, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _pTab$[esp+140]
	mov	ebx, DWORD PTR [edx+8]
	mov	DWORD PTR tv1274[esp+140], eax
	mov	DWORD PTR tv1287[esp+140], ecx
	npad	1
$LL82@sqlite3Ins:
; Line 49731
	mov	edx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR tv1287[esp+140]
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN262@sqlite3Ins
	add	esi, 1
	add	ebx, 20					; 00000014H
	cmp	esi, ebp
	jl	SHORT $LL82@sqlite3Ins
; Line 49923
	jmp	SHORT $LN290@sqlite3Ins
$LN262@sqlite3Ins:
; Line 49732
	mov	eax, DWORD PTR tv1274[esp+140]
; Line 49733
	mov	ecx, DWORD PTR _pTab$[esp+140]
	mov	DWORD PTR [eax+4], esi
	cmp	esi, DWORD PTR [ecx+12]
	jne	SHORT $LN290@sqlite3Ins
; Line 49734
	mov	edx, DWORD PTR _i$[esp+140]
	mov	DWORD PTR _keyColumn$[esp+140], edx
$LN290@sqlite3Ins:
; Line 49739
	mov	eax, DWORD PTR _pTab$[esp+140]
	cmp	esi, DWORD PTR [eax+4]
; Line 49740
	mov	ebp, DWORD PTR _pColumn$[esp+136]
	mov	ebx, DWORD PTR _i$[esp+140]
	jl	SHORT $LN84@sqlite3Ins
	mov	ecx, DWORD PTR [ebp]
	mov	esi, DWORD PTR [ecx+ebx*8]
	mov	edx, OFFSET ??_C@_07HKAAOBDA@_ROWID_?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN279@sqlite3Ins
	mov	edx, OFFSET ??_C@_05GIFMDDGN@ROWID?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	je	SHORT $LN279@sqlite3Ins
	mov	edx, OFFSET ??_C@_03PGJCFEMG@OID?$AA@
	mov	ecx, esi
	call	_sqlite3StrICmp
	test	eax, eax
	jne	SHORT $LN76@sqlite3Ins
$LN279@sqlite3Ins:
; Line 49741
	mov	DWORD PTR _keyColumn$[esp+140], ebx
$LN84@sqlite3Ins:
; Line 49729
	add	ebx, 1
	cmp	ebx, DWORD PTR [ebp+4]
	mov	DWORD PTR _i$[esp+140], ebx
	jl	$LL85@sqlite3Ins
	jmp	SHORT $LN301@sqlite3Ins
$LN76@sqlite3Ins:
; Line 49744
	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [edx+ebx*8]
	mov	ecx, DWORD PTR _pTabList$[esp+136]
	mov	edi, DWORD PTR _pParse$[esp+136]
	push	eax
	push	0
	push	ecx
	push	OFFSET ??_C@_0CA@HKGLKLIP@table?5?$CFS?5has?5no?5column?5named?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 16					; 00000010H
; Line 49745
	add	DWORD PTR [edi+24], 1
; Line 49746
	jmp	$insert_cleanup$96479
$LN300@sqlite3Ins:
; Line 49756
	test	eax, eax
	jle	SHORT $LN301@sqlite3Ins
; Line 49757
	mov	edx, DWORD PTR _pTab$[esp+140]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _keyColumn$[esp+140], eax
$LN301@sqlite3Ins:
; Line 49762
	cmp	DWORD PTR _triggers_exist$[esp+140], 0
	je	SHORT $LN293@sqlite3Ins
; Line 49763
	mov	esi, DWORD PTR _newIdx$[esp+140]
	push	0
	push	esi
	push	120					; 00000078H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49764
	mov	ebx, DWORD PTR _pTab$[esp+152]
	mov	ecx, DWORD PTR [ebx+4]
	push	ecx
	push	esi
	push	104					; 00000068H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 24					; 00000018H
	jmp	SHORT $LN73@sqlite3Ins
$LN293@sqlite3Ins:
	mov	ebx, DWORD PTR _pTab$[esp+140]
$LN73@sqlite3Ins:
; Line 49769
	mov	edx, DWORD PTR _db$[esp+140]
	test	BYTE PTR [edx+8], -128			; ffffff80H
; Line 49770
	mov	esi, DWORD PTR _pParse$[esp+136]
	je	SHORT $LN72@sqlite3Ins
	mov	eax, DWORD PTR [esi+32]
; Line 49771
	push	eax
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR _iCntMem$[esp+144], eax
	push	0
	push	48					; 00000030H
	mov	eax, edi
	mov	DWORD PTR [esi+32], ecx
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN72@sqlite3Ins:
; Line 49775
	cmp	DWORD PTR _triggers_exist$[esp+140], 0
	jne	SHORT $LN295@sqlite3Ins
; Line 49776
	mov	eax, DWORD PTR [esi+28]
; Line 49777
	push	9
	push	eax
	mov	DWORD PTR _base$[esp+148], eax
	push	esi
	mov	eax, ebx
	call	_sqlite3OpenTableAndIndices
	add	esp, 12					; 0000000cH
$LN295@sqlite3Ins:
; Line 49785
	cmp	DWORD PTR _useTempTable$[esp+140], 0
	je	SHORT $LN70@sqlite3Ins
; Line 49786
	mov	eax, edi
	call	_sqlite3VdbeMakeLabel
; Line 49787
	mov	edx, DWORD PTR _srcTab$[esp+140]
	push	eax
	push	edx
	mov	DWORD PTR _iBreak$[esp+148], eax
	push	127					; 0000007fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49788
	mov	eax, DWORD PTR [edi+12]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iCont$[esp+140], eax
	jmp	SHORT $LN296@sqlite3Ins
$LN70@sqlite3Ins:
; Line 49789
	cmp	DWORD PTR _pSelect$[esp+136], 0
	je	SHORT $LN296@sqlite3Ins
; Line 49790
	mov	ecx, DWORD PTR _iSelectLoop$[esp+140]
	push	ecx
	push	0
	push	95					; 0000005fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49791
	mov	edx, DWORD PTR _iInsertBlock$[esp+152]
	add	esp, 12					; 0000000cH
	mov	ecx, edi
	call	_sqlite3VdbeResolveLabel
$LN296@sqlite3Ins:
; Line 49796
	mov	eax, edi
	call	_sqlite3VdbeMakeLabel
; Line 49797
	test	BYTE PTR _triggers_exist$[esp+140], 1
; Line 49805
	mov	ebp, DWORD PTR _keyColumn$[esp+140]
	mov	DWORD PTR _endOfLoop$[esp+140], eax
	je	$LN288@sqlite3Ins
	test	ebp, ebp
	jge	SHORT $LN66@sqlite3Ins
; Line 49806
	push	0
	push	-1
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN63@sqlite3Ins
$LN66@sqlite3Ins:
; Line 49807
	cmp	DWORD PTR _useTempTable$[esp+140], 0
	je	SHORT $LN64@sqlite3Ins
; Line 49808
	mov	edx, DWORD PTR _srcTab$[esp+140]
	push	ebp
	push	edx
	push	3
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 49809
	jmp	SHORT $LN63@sqlite3Ins
$LN64@sqlite3Ins:
; Line 49811
	mov	ecx, DWORD PTR _pList$[esp+136]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [ebp+ebp*2]
	mov	eax, DWORD PTR [edx+eax*4]
	push	eax
	push	esi
	call	_sqlite3ExprCode
; Line 49812
	mov	ecx, DWORD PTR [edi+12]
	add	ecx, 3
	push	ecx
	push	-1
	push	66					; 00000042H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49813
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49814
	push	0
	push	-1
	push	47					; 0000002fH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49815
	push	0
	push	0
	push	35					; 00000023H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 56					; 00000038H
$LN63@sqlite3Ins:
; Line 49820
	xor	esi, esi
	cmp	DWORD PTR [ebx+4], esi
	jle	$LN297@sqlite3Ins
	xor	ebp, ebp
	npad	4
$LL307@sqlite3Ins:
	mov	ecx, DWORD PTR _pColumn$[esp+136]
; Line 49821
	test	ecx, ecx
	jne	SHORT $LN59@sqlite3Ins
; Line 49822
	mov	eax, esi
$LN314@sqlite3Ins:
; Line 49830
	cmp	DWORD PTR _useTempTable$[esp+140], 0
	je	SHORT $LN51@sqlite3Ins
; Line 49831
	mov	edx, DWORD PTR _srcTab$[esp+140]
	push	eax
	push	edx
	push	3
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 49832
	jmp	SHORT $LN61@sqlite3Ins
$LN59@sqlite3Ins:
; Line 49824
	mov	edx, DWORD PTR [ecx+4]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN308@sqlite3Ins
	mov	ecx, DWORD PTR _pColumn$[esp+136]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 4
	npad	3
$LL57@sqlite3Ins:
; Line 49825
	cmp	DWORD PTR [ecx], esi
	je	SHORT $LN308@sqlite3Ins
	add	eax, 1
	add	ecx, 8
	cmp	eax, edx
	jl	SHORT $LL57@sqlite3Ins
$LN308@sqlite3Ins:
; Line 49828
	cmp	eax, edx
	jl	SHORT $LN314@sqlite3Ins
; Line 49829
	mov	edx, DWORD PTR [ebx+8]
	mov	eax, DWORD PTR [edx+ebp+4]
	mov	ecx, DWORD PTR _pParse$[esp+136]
	push	eax
	push	ecx
	call	_sqlite3ExprCode
	add	esp, 8
	jmp	SHORT $LN61@sqlite3Ins
$LN51@sqlite3Ins:
; Line 49834
	mov	ecx, DWORD PTR _pList$[esp+136]
	mov	edx, DWORD PTR [ecx+12]
	mov	ebx, DWORD PTR _pParse$[esp+136]
	lea	eax, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edx+eax*4]
	push	eax
	call	_sqlite3ExprCodeAndCache
	mov	ebx, DWORD PTR _pTab$[esp+144]
	add	esp, 4
$LN61@sqlite3Ins:
	add	esi, 1
	add	ebp, 20					; 00000014H
	cmp	esi, DWORD PTR [ebx+4]
	jl	$LL307@sqlite3Ins
; Line 49820
	mov	ebp, DWORD PTR _keyColumn$[esp+140]
$LN297@sqlite3Ins:
; Line 49837
	mov	ecx, DWORD PTR [ebx+4]
	push	0
	push	ecx
	push	91					; 0000005bH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49844
	mov	esi, DWORD PTR _isView$[esp+152]
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LN49@sqlite3Ins
; Line 49845
	push	edi
	mov	eax, ebx
	call	_sqlite3TableAffinityStr
	add	esp, 4
$LN49@sqlite3Ins:
; Line 49847
	mov	edx, DWORD PTR _newIdx$[esp+140]
	push	0
	push	edx
	push	113					; 00000071H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49851
	mov	eax, DWORD PTR _endOfLoop$[esp+152]
	mov	ecx, DWORD PTR _onError$[esp+148]
	mov	edx, DWORD PTR _newIdx$[esp+152]
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+152]
	push	ecx
	push	-1
	push	edx
	push	ebx
	push	1
	push	0
	push	101					; 00000065H
	push	eax
	call	_sqlite3CodeRowTrigger
	add	esp, 48					; 00000030H
	test	eax, eax
	jne	$insert_cleanup$96479
	jmp	SHORT $LN289@sqlite3Ins
$LN288@sqlite3Ins:
	mov	esi, DWORD PTR _isView$[esp+140]
$LN289@sqlite3Ins:
; Line 49859
	cmp	DWORD PTR _triggers_exist$[esp+140], 0
	je	SHORT $LN47@sqlite3Ins
	test	esi, esi
	jne	$LN291@sqlite3Ins
; Line 49860
	mov	esi, DWORD PTR _pParse$[esp+136]
	mov	eax, DWORD PTR [esi+28]
; Line 49861
	push	9
	push	eax
	mov	DWORD PTR _base$[esp+148], eax
	push	esi
	mov	eax, ebx
	call	_sqlite3OpenTableAndIndices
	add	esp, 12					; 0000000cH
; Line 49869
	jmp	SHORT $LN280@sqlite3Ins
$LN47@sqlite3Ins:
	test	esi, esi
	jne	$LN291@sqlite3Ins
	mov	esi, DWORD PTR _pParse$[esp+136]
$LN280@sqlite3Ins:
; Line 49870
	cmp	BYTE PTR [ebx+57], 0
	je	SHORT $LN312@sqlite3Ins
; Line 49872
	push	0
	push	0
	push	122					; 0000007aH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN312@sqlite3Ins:
; Line 49874
	test	ebp, ebp
	jl	$LN44@sqlite3Ins
; Line 49875
	cmp	DWORD PTR _useTempTable$[esp+140], 0
	je	SHORT $LN43@sqlite3Ins
; Line 49876
	mov	ecx, DWORD PTR _srcTab$[esp+140]
	push	ebp
	push	ecx
	push	3
$LN318@sqlite3Ins:
; Line 49878
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN298@sqlite3Ins:
; Line 49894
	mov	edx, DWORD PTR [edi+12]
	add	edx, 3
	push	edx
	push	-1
	push	66					; 00000042H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49895
	push	0
	push	1
	push	11					; 0000000bH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49896
	mov	esi, DWORD PTR _counterMem$[esp+164]
	mov	eax, DWORD PTR _base$[esp+164]
	push	esi
	push	eax
	push	23					; 00000017H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49897
	push	0
	push	0
	push	35					; 00000023H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 48					; 00000030H
; Line 49898
	jmp	$LN35@sqlite3Ins
$LN43@sqlite3Ins:
; Line 49877
	cmp	DWORD PTR _pSelect$[esp+136], 0
	je	SHORT $LN41@sqlite3Ins
; Line 49878
	mov	edx, DWORD PTR _nColumn$[esp+140]
	sub	edx, ebp
	push	1
	sub	edx, 1
	push	edx
	push	94					; 0000005eH
; Line 49879
	jmp	SHORT $LN318@sqlite3Ins
$LN41@sqlite3Ins:
; Line 49881
	mov	ecx, DWORD PTR _pList$[esp+136]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [ebp+ebp*2]
	mov	eax, DWORD PTR [edx+eax*4]
	push	eax
	push	esi
	call	_sqlite3ExprCode
; Line 49882
	mov	eax, DWORD PTR [edi+12]
	add	esp, 8
	sub	eax, 1
	mov	ecx, edi
	call	_sqlite3VdbeGetOp
; Line 49883
	test	eax, eax
	je	$LN298@sqlite3Ins
	cmp	BYTE PTR [eax], 122			; 0000007aH
	jne	$LN298@sqlite3Ins
; Line 49886
	mov	ecx, DWORD PTR _base$[esp+140]
; Line 49887
	mov	esi, DWORD PTR _counterMem$[esp+140]
	mov	BYTE PTR [eax], 23			; 00000017H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], esi
; Line 49893
	jmp	SHORT $LN317@sqlite3Ins
$LN44@sqlite3Ins:
; Line 49899
	cmp	BYTE PTR [ebx+57], 0
; Line 49900
	mov	eax, edi
	je	SHORT $LN36@sqlite3Ins
	push	0
	push	0
	push	122					; 0000007aH
	call	_sqlite3VdbeAddOp
; Line 49901
	mov	esi, DWORD PTR _counterMem$[esp+152]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN35@sqlite3Ins
$LN36@sqlite3Ins:
; Line 49902
	mov	esi, DWORD PTR _counterMem$[esp+140]
	mov	ecx, DWORD PTR _base$[esp+140]
	push	esi
	push	ecx
	push	23					; 00000017H
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN317@sqlite3Ins:
; Line 49903
	mov	DWORD PTR _appendFlag$[esp+140], 1
$LN35@sqlite3Ins:
; Line 49905
	test	esi, esi
	jle	SHORT $LN144@sqlite3Ins
	mov	edx, DWORD PTR _pParse$[esp+136]
	mov	eax, DWORD PTR [edx+12]
	push	0
	push	esi
	push	42					; 0000002aH
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN144@sqlite3Ins:
; Line 49910
	xor	esi, esi
	cmp	DWORD PTR [ebx+4], esi
	jle	$LN32@sqlite3Ins
	xor	ebp, ebp
$LL309@sqlite3Ins:
; Line 49911
	cmp	esi, DWORD PTR [ebx+12]
	jne	SHORT $LN31@sqlite3Ins
; Line 49916
	push	0
	push	0
	push	122					; 0000007aH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 49917
	jmp	$LN33@sqlite3Ins
$LN31@sqlite3Ins:
; Line 49919
	mov	ecx, DWORD PTR _pColumn$[esp+136]
	test	ecx, ecx
	jne	SHORT $LN30@sqlite3Ins
; Line 49920
	mov	eax, esi
; Line 49921
	jmp	SHORT $LN313@sqlite3Ins
$LN30@sqlite3Ins:
; Line 49922
	mov	edx, DWORD PTR [ecx+4]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN313@sqlite3Ins
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 4
$LL28@sqlite3Ins:
; Line 49923
	cmp	DWORD PTR [ecx], esi
	je	SHORT $LN310@sqlite3Ins
	add	eax, 1
	add	ecx, 8
	cmp	eax, edx
	jl	SHORT $LL28@sqlite3Ins
$LN310@sqlite3Ins:
; Line 49922
	mov	ecx, DWORD PTR _pColumn$[esp+136]
$LN313@sqlite3Ins:
; Line 49926
	cmp	DWORD PTR _nColumn$[esp+140], 0
	je	SHORT $LN23@sqlite3Ins
	test	ecx, ecx
	je	SHORT $LN24@sqlite3Ins
	cmp	eax, DWORD PTR [ecx+4]
	jge	SHORT $LN23@sqlite3Ins
$LN24@sqlite3Ins:
; Line 49928
	cmp	DWORD PTR _useTempTable$[esp+140], 0
	je	SHORT $LN21@sqlite3Ins
; Line 49929
	mov	edx, DWORD PTR _srcTab$[esp+140]
	push	eax
	push	edx
	push	3
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN33@sqlite3Ins
$LN21@sqlite3Ins:
; Line 49930
	cmp	DWORD PTR _pSelect$[esp+136], 0
	je	SHORT $LN19@sqlite3Ins
; Line 49931
	movzx	ecx, BYTE PTR [ebx+57]
	sub	ecx, eax
	add	ecx, esi
	add	ecx, DWORD PTR _nColumn$[esp+140]
	push	1
	push	ecx
	push	94					; 0000005eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 49932
	jmp	SHORT $LN33@sqlite3Ins
$LN19@sqlite3Ins:
; Line 49933
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _pList$[esp+136]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+edx*4]
	jmp	SHORT $LN319@sqlite3Ins
$LN23@sqlite3Ins:
; Line 49927
	mov	ecx, DWORD PTR [ebx+8]
	mov	edx, DWORD PTR [ecx+ebp+4]
$LN319@sqlite3Ins:
	mov	eax, DWORD PTR _pParse$[esp+136]
	push	edx
	push	eax
	call	_sqlite3ExprCode
	add	esp, 8
$LN33@sqlite3Ins:
	add	esi, 1
	add	ebp, 20					; 00000014H
	cmp	esi, DWORD PTR [ebx+4]
	jl	$LL309@sqlite3Ins
$LN32@sqlite3Ins:
; Line 49941
	cmp	BYTE PTR [ebx+57], 0
	je	$LN17@sqlite3Ins
; Line 49942
	mov	ebp, DWORD PTR _pTab$[esp+140]
	mov	ecx, DWORD PTR _pParse$[esp+136]
	mov	DWORD PTR [ecx+192], ebp
; Line 49944
	mov	eax, DWORD PTR [ebp+4]
	mov	ebx, DWORD PTR [ebp+64]
	add	eax, 2
	push	eax
	push	1
	push	130					; 00000082H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR [edi+20]
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN282@sqlite3Ins
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN166@sqlite3Ins
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN282@sqlite3Ins
$LN166@sqlite3Ins:
	test	eax, eax
	jl	SHORT $LN162@sqlite3Ins
	cmp	eax, DWORD PTR [edi+12]
	jl	SHORT $LN161@sqlite3Ins
$LN162@sqlite3Ins:
	mov	eax, DWORD PTR [edi+12]
	sub	eax, 1
	js	$LN302@sqlite3Ins
$LN161@sqlite3Ins:
	lea	edx, DWORD PTR [eax+eax*4]
	mov	ecx, DWORD PTR [esi+edx*4+12]
	mov	eax, DWORD PTR [esi+edx*4+16]
	lea	esi, DWORD PTR [esi+edx*4]
	call	_freeP3
	test	ebx, ebx
	mov	DWORD PTR [esi+12], 0
	jne	SHORT $LN283@sqlite3Ins
	xor	eax, eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	jmp	SHORT $LN302@sqlite3Ins
$LN283@sqlite3Ins:
	mov	DWORD PTR [esi+12], ebx
	mov	DWORD PTR [esi+16], -10			; fffffff6H
	jmp	SHORT $LN302@sqlite3Ins
$LN282@sqlite3Ins:
	mov	ecx, ebx
	mov	eax, -10				; fffffff6H
	call	_freeP3
; Line 49945
	jmp	SHORT $LN302@sqlite3Ins
$LN17@sqlite3Ins:
; Line 49949
	mov	eax, DWORD PTR _endOfLoop$[esp+140]
	mov	ecx, DWORD PTR _onError$[esp+136]
	mov	esi, DWORD PTR _base$[esp+140]
	mov	ebp, DWORD PTR _pParse$[esp+136]
	xor	edx, edx
	cmp	DWORD PTR _keyColumn$[esp+140], edx
	push	eax
	push	ecx
	setge	dl
	push	0
	push	edx
	push	0
	push	esi
	push	ebx
	push	ebp
	call	_sqlite3GenerateConstraintChecks
	add	esp, 32					; 00000020H
; Line 49952
	test	BYTE PTR _triggers_exist$[esp+140], 2
	je	SHORT $LN121@sqlite3Ins
	mov	eax, DWORD PTR _newIdx$[esp+140]
	jmp	SHORT $LN122@sqlite3Ins
$LN121@sqlite3Ins:
	or	eax, -1
$LN122@sqlite3Ins:
	mov	ecx, DWORD PTR _appendFlag$[esp+140]
	push	ecx
	push	eax
	push	0
	push	0
	push	0
	push	esi
	push	ebx
	push	ebp
	call	_sqlite3CompleteInsertion
	add	esp, 32					; 00000020H
$LN291@sqlite3Ins:
	mov	ebp, DWORD PTR _pTab$[esp+140]
$LN302@sqlite3Ins:
; Line 49958
	mov	edx, DWORD PTR _db$[esp+140]
	test	BYTE PTR [edx+8], -128			; ffffff80H
	je	SHORT $LN303@sqlite3Ins
; Line 49959
	mov	eax, DWORD PTR _iCntMem$[esp+140]
	push	eax
	push	1
	push	45					; 0000002dH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
$LN303@sqlite3Ins:
; Line 49962
	cmp	DWORD PTR _triggers_exist$[esp+140], 0
	je	SHORT $LN305@sqlite3Ins
; Line 49964
	cmp	DWORD PTR _isView$[esp+140], 0
	jne	SHORT $LN304@sqlite3Ins
; Line 49965
	mov	ecx, DWORD PTR _base$[esp+140]
	push	0
	push	ecx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49966
	mov	esi, DWORD PTR [ebp+16]
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN304@sqlite3Ins
	mov	ebx, DWORD PTR _base$[esp+140]
	add	ebx, 1
$LL12@sqlite3Ins:
; Line 49967
	push	0
	push	ebx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR [esi+32]
	add	esp, 12					; 0000000cH
	add	ebx, 1
	test	esi, esi
	jne	SHORT $LL12@sqlite3Ins
$LN304@sqlite3Ins:
; Line 49973
	mov	edx, DWORD PTR _endOfLoop$[esp+140]
	mov	eax, DWORD PTR _onError$[esp+136]
	mov	ecx, DWORD PTR _newIdx$[esp+140]
	push	edx
	mov	edx, DWORD PTR _pParse$[esp+140]
	push	eax
	push	-1
	push	ecx
	push	ebp
	push	2
	push	0
	push	101					; 00000065H
	push	edx
	call	_sqlite3CodeRowTrigger
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$insert_cleanup$96479
$LN305@sqlite3Ins:
; Line 49980
	mov	eax, DWORD PTR [edi+32]
	test	eax, eax
	je	SHORT $LN171@sqlite3Ins
	mov	ecx, DWORD PTR _endOfLoop$[esp+140]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	ecx, DWORD PTR [edi+12]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN171@sqlite3Ins:
; Line 49981
	cmp	DWORD PTR _useTempTable$[esp+140], 0
	je	SHORT $LN8@sqlite3Ins
; Line 49982
	mov	edx, DWORD PTR _iCont$[esp+140]
	mov	esi, DWORD PTR _srcTab$[esp+140]
	push	edx
	push	esi
	push	110					; 0000006eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49983
	mov	eax, DWORD PTR [edi+32]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN174@sqlite3Ins
	mov	ecx, DWORD PTR _iBreak$[esp+140]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	ecx, DWORD PTR [edi+12]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN174@sqlite3Ins:
; Line 49984
	push	0
	push	esi
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN306@sqlite3Ins
$LN8@sqlite3Ins:
; Line 49985
	cmp	DWORD PTR _pSelect$[esp+136], 0
	je	SHORT $LN306@sqlite3Ins
; Line 49986
	mov	edx, DWORD PTR _nColumn$[esp+140]
	push	0
	push	edx
	push	11					; 0000000bH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49987
	push	0
	push	0
	push	22					; 00000016H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49988
	mov	eax, DWORD PTR [edi+32]
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN306@sqlite3Ins
	mov	ecx, DWORD PTR _iCleanup$[esp+140]
	lea	edx, DWORD PTR [ecx*4+4]
	mov	ecx, DWORD PTR [edi+12]
	sub	eax, edx
	mov	DWORD PTR [eax], ecx
$LN306@sqlite3Ins:
; Line 49991
	cmp	DWORD PTR _triggers_exist$[esp+140], 0
	jne	SHORT $LN2@sqlite3Ins
	cmp	BYTE PTR [ebp+57], 0
	jne	SHORT $LN2@sqlite3Ins
; Line 49993
	mov	edx, DWORD PTR _base$[esp+140]
	push	0
	push	edx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 49994
	mov	esi, DWORD PTR [ebp+16]
	add	esp, 12					; 0000000cH
	test	esi, esi
	je	SHORT $LN2@sqlite3Ins
	mov	ebx, DWORD PTR _base$[esp+140]
	add	ebx, 1
$LL4@sqlite3Ins:
; Line 49995
	push	0
	push	ebx
	push	30					; 0000001eH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	mov	esi, DWORD PTR [esi+32]
	add	esp, 12					; 0000000cH
	add	ebx, 1
	test	esi, esi
	jne	SHORT $LL4@sqlite3Ins
$LN2@sqlite3Ins:
; Line 50003
	mov	eax, DWORD PTR _counterMem$[esp+140]
	mov	ecx, DWORD PTR _iDb$[esp+140]
	mov	esi, DWORD PTR _pParse$[esp+136]
	push	eax
	push	ebp
	push	ecx
	push	esi
	call	_autoIncEnd
; Line 50010
	mov	edx, DWORD PTR _db$[esp+156]
	add	esp, 16					; 00000010H
	test	BYTE PTR [edx+8], -128			; ffffff80H
	je	SHORT $insert_cleanup$96479
	cmp	BYTE PTR [esi+19], 0
	jne	SHORT $insert_cleanup$96479
	cmp	DWORD PTR [esi+172], 0
	jne	SHORT $insert_cleanup$96479
; Line 50011
	mov	eax, DWORD PTR _iCntMem$[esp+140]
	push	0
	push	eax
	push	1
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50012
	push	0
	push	1
	push	58					; 0000003aH
	mov	eax, edi
	call	_sqlite3VdbeAddOp
; Line 50013
	push	1
	mov	ebx, edi
	call	_sqlite3VdbeSetNumCols
	add	esp, 28					; 0000001cH
; Line 50014
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN184@sqlite3Ins
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $insert_cleanup$96479
$LN184@sqlite3Ins:
	mov	edi, DWORD PTR [edi+48]
	push	edi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [edi+16], OFFSET ??_C@_0O@OMFDFDMH@rows?5inserted?$AA@
	mov	BYTE PTR [edi+27], 1
	mov	BYTE PTR [edi+26], 3
	mov	DWORD PTR [edi+20], 13			; 0000000dH
	mov	WORD PTR [edi+24], 162			; 000000a2H
$insert_cleanup$96479:
; Line 50018
	mov	ecx, DWORD PTR _pTabList$[esp+136]
	push	ecx
	call	_sqlite3SrcListDelete
; Line 50019
	mov	ebx, DWORD PTR _pList$[esp+140]
	add	esp, 4
	call	_sqlite3ExprListDelete
; Line 50020
	mov	esi, DWORD PTR _pSelect$[esp+136]
	test	esi, esi
	je	SHORT $LN227@sqlite3Ins
	push	esi
	call	_clearSelect
	push	esi
	call	_free
	add	esp, 8
$LN227@sqlite3Ins:
; Line 50021
	mov	edi, DWORD PTR _pColumn$[esp+136]
	test	edi, edi
	je	SHORT $LN248@sqlite3Ins
	xor	esi, esi
	cmp	DWORD PTR [edi+4], esi
	jle	SHORT $LN229@sqlite3Ins
	npad	5
$LL231@sqlite3Ins:
	mov	edx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edx+esi*8]
	test	eax, eax
	je	SHORT $LN230@sqlite3Ins
	push	eax
	call	_free
	add	esp, 4
$LN230@sqlite3Ins:
	add	esi, 1
	cmp	esi, DWORD PTR [edi+4]
	jl	SHORT $LL231@sqlite3Ins
$LN229@sqlite3Ins:
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN243@sqlite3Ins
	push	eax
	call	_free
	add	esp, 4
$LN243@sqlite3Ins:
	push	edi
	call	_free
	add	esp, 4
$LN248@sqlite3Ins:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 50022
	add	esp, 124				; 0000007cH
	ret	0
_sqlite3Insert ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@BHLMPGNH@too?5many?5arguments?5on?5function?5?$CF@ ; `string'
PUBLIC	??_C@_08FAFAADKO@set?5list?$AA@			; `string'
;	COMDAT ??_C@_0CC@BHLMPGNH@too?5many?5arguments?5on?5function?5?$CF@
CONST	SEGMENT
??_C@_0CC@BHLMPGNH@too?5many?5arguments?5on?5function?5?$CF@ DB 'too many'
	DB	' arguments on function %T', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FAFAADKO@set?5list?$AA@
CONST	SEGMENT
??_C@_08FAFAADKO@set?5list?$AA@ DB 'set list', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _yy_reduce
_TEXT	SEGMENT
_yygotominor$ = -136					; size = 12
_pParse$ = -124						; size = 4
_v$146283 = -120					; size = 4
_pFKey$146266 = -120					; size = 4
_pSrc$102164 = -120					; size = 4
_p$146287 = -116					; size = 4
_db$146288 = -112					; size = 4
_iDb$146289 = -108					; size = 4
$T146303 = -104						; size = 4
_all$102201 = -104					; size = 8
tv2349 = -96						; size = 4
_sNC$146296 = -92					; size = 36
_sSrc$146295 = -56					; size = 56
_yypParser$ = 8						; size = 4
_yyruleno$ = 12						; size = 4
_yy_reduce PROC						; COMDAT
; Line 64161
	sub	esp, 136				; 00000088H
; Line 64194
	mov	ecx, DWORD PTR _yyruleno$[esp+132]
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _yypParser$[esp+140]
	mov	eax, DWORD PTR [ebp]
	push	esi
	lea	eax, DWORD PTR [eax+eax*4]
	push	edi
	mov	edi, DWORD PTR [ebp+8]
	lea	ebp, DWORD PTR [ebp+eax*4+12]
	xor	eax, eax
	add	ecx, -3					; fffffffdH
	xor	ebx, ebx
	cmp	ecx, 307				; 00000133H
	mov	DWORD PTR _pParse$[esp+152], edi
	mov	DWORD PTR _yygotominor$[esp+152], eax
	mov	DWORD PTR _yygotominor$[esp+156], eax
	mov	DWORD PTR _yygotominor$[esp+160], eax
	ja	$LN354@yy_reduce
	movzx	ecx, BYTE PTR $LN350@yy_reduce[ecx]
	jmp	DWORD PTR $LN380@yy_reduce[ecx*4]
$LN230@yy_reduce:
; Line 64242
	mov	esi, edi
	call	_sqlite3FinishCoding
; Line 64243
	jmp	$LN354@yy_reduce
$LN229@yy_reduce:
; Line 64245
	mov	BYTE PTR [edi+128], al
	mov	DWORD PTR [edi+112], ebx
; Line 64246
	jmp	$LN354@yy_reduce
$LN228@yy_reduce:
; Line 64248
	mov	BYTE PTR [edi+128], 1
	mov	DWORD PTR [edi+112], ebx
; Line 64249
	jmp	$LN354@yy_reduce
$LN227@yy_reduce:
; Line 64251
	mov	BYTE PTR [edi+128], 2
	mov	DWORD PTR [edi+112], ebx
; Line 64252
	jmp	$LN354@yy_reduce
$LN226@yy_reduce:
; Line 64254
	mov	edx, DWORD PTR [ebp-12]
	push	edx
	mov	eax, edi
	call	_sqlite3BeginTransaction
	add	esp, 4
; Line 64255
	jmp	$LN354@yy_reduce
$LN225@yy_reduce:
; Line 64257
	mov	DWORD PTR _yygotominor$[esp+152], 7
; Line 64258
	jmp	$LN354@yy_reduce
$LN224@yy_reduce:
; Line 64264
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64265
	jmp	$LN354@yy_reduce
$LN223@yy_reduce:
; Line 64268
	mov	eax, edi
	call	_sqlite3CommitTransaction
; Line 64269
	jmp	$LN354@yy_reduce
$LN222@yy_reduce:
; Line 64271
	mov	eax, edi
	call	_sqlite3RollbackTransaction
; Line 64272
	jmp	$LN354@yy_reduce
$LN221@yy_reduce:
; Line 64275
	mov	ecx, DWORD PTR [ebp-32]
	mov	edx, DWORD PTR [ebp-72]
	push	ecx
	push	ebx
	push	ebx
	push	edx
	lea	eax, DWORD PTR [ebp+8]
	lea	ecx, DWORD PTR [ebp-12]
	push	edi
	call	_sqlite3StartTable
	add	esp, 20					; 00000014H
; Line 64277
	jmp	$LN354@yy_reduce
$LN219@yy_reduce:
; Line 64299
	mov	DWORD PTR _yygotominor$[esp+152], 1
; Line 64300
	jmp	$LN354@yy_reduce
$LN218@yy_reduce:
; Line 64303
	lea	ecx, DWORD PTR [ebp-12]
	lea	eax, DWORD PTR [ebp+8]
	cmp	eax, ebx
	mov	DWORD PTR $T146303[esp+152], ecx
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR _db$146288[esp+152], ecx
	je	$LN354@yy_reduce
	cmp	DWORD PTR [edi+24], ebx
	jne	$LN354@yy_reduce
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebx
	je	SHORT $LN272@yy_reduce
	cmp	DWORD PTR _inMutex, ebx
	jg	$LN354@yy_reduce
$LN272@yy_reduce:
	mov	ebx, DWORD PTR [edi+164]
	test	ebx, ebx
	mov	DWORD PTR _p$146287[esp+152], ebx
	je	$LN354@yy_reduce
	mov	esi, DWORD PTR [ebx+76]
	call	_sqlite3SchemaToIndex
	mov	esi, DWORD PTR [ebx+44]
	test	esi, esi
	mov	DWORD PTR _iDb$146289[esp+152], eax
	je	SHORT $LN267@yy_reduce
	xor	eax, eax
	push	56					; 00000038H
	push	eax
	lea	edx, DWORD PTR _sSrc$146295[esp+160]
	push	edx
	mov	DWORD PTR _sNC$146296[esp+164], eax
	mov	DWORD PTR _sNC$146296[esp+168], eax
	mov	DWORD PTR _sNC$146296[esp+172], eax
	mov	DWORD PTR _sNC$146296[esp+176], eax
	mov	DWORD PTR _sNC$146296[esp+180], eax
	mov	DWORD PTR _sNC$146296[esp+184], eax
	mov	DWORD PTR _sNC$146296[esp+188], eax
	mov	DWORD PTR _sNC$146296[esp+192], eax
	mov	DWORD PTR _sNC$146296[esp+196], eax
	call	_memset
	mov	eax, ebx
	mov	edx, DWORD PTR [eax]
	mov	ecx, 1
	mov	DWORD PTR _sSrc$146295[esp+184], eax
	lea	eax, DWORD PTR _sSrc$146295[esp+164]
	mov	ebx, esi
	add	esp, 12					; 0000000cH
	lea	esi, DWORD PTR _sNC$146296[esp+152]
	mov	WORD PTR _sSrc$146295[esp+152], cx
	mov	DWORD PTR _sSrc$146295[esp+164], edx
	mov	DWORD PTR _sSrc$146295[esp+184], -1
	mov	DWORD PTR _sNC$146296[esp+152], edi
	mov	DWORD PTR _sNC$146296[esp+156], eax
	mov	BYTE PTR _sNC$146296[esp+174], cl
	call	_sqlite3ExprResolveNames
	test	eax, eax
	jne	$LN354@yy_reduce
$LN267@yy_reduce:
	mov	eax, DWORD PTR _db$146288[esp+152]
	cmp	BYTE PTR [eax+68], 0
	mov	ebx, DWORD PTR _p$146287[esp+152]
	je	SHORT $LN372@yy_reduce
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [ebx+20], ecx
	cmp	BYTE PTR [eax+68], 0
	jne	$LN360@yy_reduce
$LN372@yy_reduce:
	mov	eax, DWORD PTR [edi+12]
	test	eax, eax
	mov	DWORD PTR _v$146283[esp+152], eax
	jne	SHORT $LN356@yy_reduce
	mov	esi, edi
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	test	eax, eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR _v$146283[esp+152], eax
	je	$LN354@yy_reduce
	mov	ebx, DWORD PTR _p$146287[esp+152]
	mov	edi, esi
$LN356@yy_reduce:
	push	0
	push	0
	push	30					; 0000001eH
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [ebx+24], 0
	jne	SHORT $LN263@yy_reduce
	mov	ebx, OFFSET ??_C@_05LCLENNFI@table?$AA@
	mov	ecx, OFFSET ??_C@_05HJCCDKBG@TABLE?$AA@
	jmp	SHORT $LN262@yy_reduce
$LN263@yy_reduce:
	mov	ebx, OFFSET ??_C@_04CHADEDPO@view?$AA@
	mov	ecx, OFFSET ??_C@_04OLDJKBIG@VIEW?$AA@
$LN262@yy_reduce:
	mov	edi, DWORD PTR [edi+140]
	mov	eax, DWORD PTR [ebp+8]
	sub	eax, edi
	push	edi
	add	eax, 1
	push	eax
	push	ecx
	push	OFFSET ??_C@_0P@BPBAOJCC@CREATE?5?$CFs?5?$CF?4?$CKs?$AA@
	call	_sqlite3MPrintf
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _iDb$146289[esp+152], 1
	mov	edi, eax
	mov	edx, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN276@yy_reduce
	mov	edx, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN276@yy_reduce:
	mov	eax, DWORD PTR _p$146287[esp+152]
	mov	eax, DWORD PTR [eax]
	mov	esi, DWORD PTR _iDb$146289[esp+152]
	push	edi
	push	eax
	push	eax
	push	ebx
	mov	ebx, DWORD PTR _pParse$[esp+168]
	lea	ecx, DWORD PTR [esi+esi*2]
	add	ecx, ecx
	push	edx
	mov	edx, DWORD PTR _db$146288[esp+172]
	mov	eax, DWORD PTR [edx+4]
	add	ecx, ecx
	add	ecx, ecx
	mov	DWORD PTR tv2349[esp+172], ecx
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	push	OFFSET ??_C@_0FF@EMOBCNNL@UPDATE?5?$CFQ?4?$CFs?5SET?5type?$DN?8?$CFs?8?0?5name@
	call	_sqlite3NestedParse
	push	edi
	call	_sqlite3FreeX
	mov	edi, DWORD PTR _v$146283[esp+184]
	mov	ecx, DWORD PTR _db$146288[esp+184]
	add	esp, 32					; 00000020H
	call	_sqlite3ChangeCookie
	mov	edx, DWORD PTR _p$146287[esp+152]
	cmp	BYTE PTR [edx+56], 0
	je	SHORT $LN255@yy_reduce
	mov	eax, DWORD PTR _db$146288[esp+152]
	mov	eax, DWORD PTR [eax+4]
	add	eax, DWORD PTR tv2349[esp+152]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+116], 0
	jne	SHORT $LN255@yy_reduce
	mov	edx, DWORD PTR [eax]
	push	edx
	push	OFFSET ??_C@_0CK@BLJIJAMD@CREATE?5TABLE?5?$CFQ?4sqlite_sequence?$CI@
	call	_sqlite3NestedParse
	add	esp, 8
$LN255@yy_reduce:
	mov	eax, DWORD PTR _p$146287[esp+152]
	mov	ecx, DWORD PTR [eax]
	push	-1
	push	ecx
	push	OFFSET ??_C@_0O@LAHPKCHN@tbl_name?$DN?8?$CFq?8?$AA@
	call	_sqlite3MPrintf
	mov	edi, DWORD PTR _v$146283[esp+164]
	add	esp, 8
	push	eax
	xor	eax, eax
	mov	ecx, esi
	lea	edx, DWORD PTR [eax+28]
	call	_sqlite3VdbeOp3
	mov	eax, DWORD PTR _db$146288[esp+160]
	mov	edi, DWORD PTR _pParse$[esp+160]
	mov	ebx, DWORD PTR _p$146287[esp+160]
	add	esp, 8
	cmp	BYTE PTR [eax+68], 0
	je	$LN354@yy_reduce
$LN360@yy_reduce:
	cmp	DWORD PTR [edi+24], 0
	jne	$LN354@yy_reduce
	mov	edi, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+76]
	mov	eax, edi
	lea	edx, DWORD PTR [eax+1]
$LL351@yy_reduce:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL351@yy_reduce
	sub	eax, edx
	add	eax, 1
	push	ebx
	push	eax
	push	edi
	lea	eax, DWORD PTR [esi+4]
	call	_sqlite3HashInsert
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN354@yy_reduce
	mov	ebx, DWORD PTR [ebx+36]
	test	ebx, ebx
	mov	DWORD PTR _pFKey$146266[esp+152], ebx
	je	SHORT $LN250@yy_reduce
	add	esi, 88					; 00000058H
$LL353@yy_reduce:
	mov	edx, DWORD PTR _pFKey$146266[esp+152]
	mov	ecx, DWORD PTR [edx+8]
	mov	eax, ecx
	lea	edi, DWORD PTR [eax+1]
$LL352@yy_reduce:
	mov	dl, BYTE PTR [eax]
	add	eax, 1
	test	dl, dl
	jne	SHORT $LL352@yy_reduce
	sub	eax, edi
	lea	edi, DWORD PTR [eax+1]
	mov	ebx, ecx
	call	_sqlite3HashFind
	mov	ebx, DWORD PTR _pFKey$146266[esp+152]
	mov	DWORD PTR [ebx+12], eax
	mov	eax, DWORD PTR [ebx+8]
	push	ebx
	push	edi
	push	eax
	mov	eax, esi
	call	_sqlite3HashInsert
	mov	ebx, DWORD PTR [ebx+4]
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	mov	DWORD PTR _pFKey$146266[esp+152], ebx
	jne	SHORT $LL353@yy_reduce
$LN250@yy_reduce:
	mov	ecx, DWORD PTR _pParse$[esp+152]
	mov	eax, DWORD PTR _db$146288[esp+152]
	mov	edx, DWORD PTR _p$146287[esp+152]
	mov	DWORD PTR [ecx+164], 0
	add	DWORD PTR [eax+24], 1
	or	DWORD PTR [eax+8], 16			; 00000010H
	cmp	DWORD PTR [edx+24], 0
	jne	$LN354@yy_reduce
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+140]
	mov	eax, DWORD PTR $T146303[esp+152]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN248@yy_reduce
	lea	eax, DWORD PTR [ebp+8]
$LN248@yy_reduce:
	mov	edx, DWORD PTR [eax]
	sub	edx, ecx
	call	_sqlite3Utf8CharLen
	mov	ecx, DWORD PTR _p$146287[esp+152]
	add	eax, 13					; 0000000dH
	mov	DWORD PTR [ecx+48], eax
; Line 64305
	jmp	$LN354@yy_reduce
$LN217@yy_reduce:
; Line 64308
	mov	edx, DWORD PTR [ebp+8]
	push	edx
	push	ebx
	push	ebx
	push	edi
	call	_sqlite3EndTable
; Line 64309
	mov	esi, DWORD PTR [ebp+8]
	add	esp, 16					; 00000010H
	call	_sqlite3SelectDelete
; Line 64311
	jmp	$LN354@yy_reduce
$LN216@yy_reduce:
; Line 64314
	mov	ecx, DWORD PTR [ebp-32]
; Line 64315
	mov	edx, DWORD PTR [edi+148]
	sub	edx, ecx
	mov	DWORD PTR _yygotominor$[esp+152], ecx
	mov	ecx, DWORD PTR [edi+152]
	and	ecx, -2					; fffffffeH
	lea	edx, DWORD PTR [ecx+edx*2]
	and	eax, 1
	xor	edx, eax
	mov	DWORD PTR _yygotominor$[esp+156], edx
; Line 64317
	jmp	$LN354@yy_reduce
$LN215@yy_reduce:
; Line 64320
	lea	esi, DWORD PTR [ebp+8]
	push	esi
	push	edi
	call	_sqlite3AddColumn
; Line 64321
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
	mov	DWORD PTR _yygotominor$[esp+156], ecx
; Line 64323
	jmp	$LN354@yy_reduce
$LN214@yy_reduce:
; Line 64330
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp+12]
	mov	DWORD PTR _yygotominor$[esp+152], edx
	mov	DWORD PTR _yygotominor$[esp+156], eax
; Line 64331
	jmp	$LN354@yy_reduce
$LN213@yy_reduce:
; Line 64333
	mov	eax, DWORD PTR _pParse$[esp+152]
	lea	edi, DWORD PTR [ebp+8]
	call	_sqlite3AddColumnType
; Line 64334
	jmp	$LN354@yy_reduce
$LN212@yy_reduce:
; Line 64346
	mov	ecx, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp+12]
	mov	DWORD PTR _yygotominor$[esp+152], ecx
	mov	DWORD PTR _yygotominor$[esp+156], edx
; Line 64347
	jmp	$LN354@yy_reduce
$LN211@yy_reduce:
; Line 64351
	mov	edx, DWORD PTR [ebp+12]
	mov	ecx, DWORD PTR [ebp-52]
	shr	edx, 1
	sub	edx, ecx
	add	edx, DWORD PTR [ebp+8]
	and	eax, 1
	add	edx, edx
	xor	edx, eax
	mov	DWORD PTR _yygotominor$[esp+152], ecx
	mov	DWORD PTR _yygotominor$[esp+156], edx
; Line 64353
	jmp	$LN354@yy_reduce
$LN210@yy_reduce:
; Line 64357
	mov	edx, DWORD PTR [ebp+12]
	mov	ecx, DWORD PTR [ebp-92]
	shr	edx, 1
	sub	edx, ecx
	add	edx, DWORD PTR [ebp+8]
	and	eax, 1
	add	edx, edx
	xor	edx, eax
	mov	DWORD PTR _yygotominor$[esp+152], ecx
	mov	DWORD PTR _yygotominor$[esp+156], edx
; Line 64359
	jmp	$LN354@yy_reduce
$LN209@yy_reduce:
; Line 64361
	mov	ecx, DWORD PTR [ebp-12]
	mov	edx, DWORD PTR [ebp+8]
	sub	edx, ecx
	mov	DWORD PTR _yygotominor$[esp+152], ecx
	mov	ecx, DWORD PTR [ebp+12]
	and	ecx, -2					; fffffffeH
	lea	edx, DWORD PTR [ecx+edx*2]
	and	eax, 1
	xor	edx, eax
	mov	DWORD PTR _yygotominor$[esp+156], edx
; Line 64362
	jmp	$LN354@yy_reduce
$LN208@yy_reduce:
; Line 64365
	mov	ebx, DWORD PTR [ebp+8]
	mov	eax, edi
	call	_sqlite3AddDefaultValue
; Line 64366
	jmp	$LN354@yy_reduce
$LN207@yy_reduce:
; Line 64368
	mov	ebx, DWORD PTR [ebp-12]
	mov	eax, edi
	call	_sqlite3AddDefaultValue
; Line 64369
	jmp	$LN354@yy_reduce
$LN206@yy_reduce:
; Line 64372
	mov	eax, DWORD PTR [ebp+8]
	push	eax
	push	85					; 00000055H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
; Line 64373
	mov	ebx, eax
	mov	eax, DWORD PTR _pParse$[esp+160]
	add	esp, 8
	call	_sqlite3AddDefaultValue
; Line 64375
	jmp	$LN354@yy_reduce
$LN205@yy_reduce:
; Line 64378
	push	ebx
	lea	eax, DWORD PTR [ebp+8]
	push	88					; 00000058H
	xor	edi, edi
	call	_sqlite3Expr
; Line 64379
	mov	ebx, eax
	mov	eax, DWORD PTR _pParse$[esp+160]
	add	esp, 8
	call	_sqlite3AddDefaultValue
; Line 64381
	jmp	$LN354@yy_reduce
$LN204@yy_reduce:
; Line 64383
	mov	edi, DWORD PTR [edi+164]
	cmp	edi, ebx
	je	$LN354@yy_reduce
	mov	eax, DWORD PTR [edi+4]
	sub	eax, 1
	js	$LN354@yy_reduce
	mov	edx, DWORD PTR [edi+8]
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	al, BYTE PTR [ebp+8]
	mov	BYTE PTR [edx+ecx*4+16], al
; Line 64384
	jmp	$LN354@yy_reduce
$LN203@yy_reduce:
; Line 64386
	mov	ecx, DWORD PTR [ebp-32]
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp-12]
	push	ecx
	push	edx
	push	eax
	push	ebx
	push	edi
	call	_sqlite3AddPrimaryKey
	add	esp, 20					; 00000014H
; Line 64387
	jmp	$LN354@yy_reduce
$LN202@yy_reduce:
; Line 64389
	mov	ecx, DWORD PTR [ebp+8]
	push	ebx
	push	ebx
	push	ebx
	push	ecx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	xor	ecx, ecx
	mov	edx, edi
	call	_sqlite3CreateIndex
	add	esp, 32					; 00000020H
; Line 64390
	jmp	$LN354@yy_reduce
$LN201@yy_reduce:
; Line 64392
	mov	ebx, DWORD PTR [ebp-12]
	mov	eax, edi
	call	_sqlite3AddCheckConstraint
; Line 64393
	jmp	$LN354@yy_reduce
$LN200@yy_reduce:
; Line 64395
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp-12]
	push	edx
	push	eax
	lea	ecx, DWORD PTR [ebp-32]
	push	ecx
	push	ebx
	push	edi
	call	_sqlite3CreateForeignKey
	add	esp, 20					; 00000014H
; Line 64396
	jmp	$LN354@yy_reduce
$LN199@yy_reduce:
; Line 64398
	mov	edx, DWORD PTR [ebp+8]
	push	edx
	mov	eax, edi
	call	_sqlite3DeferForeignKey
	add	esp, 4
; Line 64399
	jmp	$LN354@yy_reduce
$LN198@yy_reduce:
; Line 64401
	mov	eax, DWORD PTR [ebp+12]
	mov	ecx, DWORD PTR [ebp+8]
	shr	eax, 1
	push	eax
	push	ecx
	mov	eax, edi
	call	_sqlite3AddCollateType
	add	esp, 8
; Line 64402
	jmp	$LN354@yy_reduce
$LN197@yy_reduce:
; Line 64404
	mov	DWORD PTR _yygotominor$[esp+152], 394758 ; 00060606H
; Line 64405
	jmp	$LN354@yy_reduce
$LN196@yy_reduce:
; Line 64407
	mov	eax, DWORD PTR [ebp-12]
	and	eax, DWORD PTR [ebp+12]
	or	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64408
	jmp	$LN354@yy_reduce
$LN195@yy_reduce:
; Line 64410
	mov	DWORD PTR _yygotominor$[esp+152], ebx
	mov	DWORD PTR _yygotominor$[esp+156], ebx
; Line 64411
	jmp	$LN354@yy_reduce
$LN194@yy_reduce:
; Line 64413
	mov	edx, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], edx
	mov	DWORD PTR _yygotominor$[esp+156], 255	; 000000ffH
; Line 64414
	jmp	$LN354@yy_reduce
$LN193@yy_reduce:
; Line 64416
	mov	eax, DWORD PTR [ebp+8]
	shl	eax, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
	mov	DWORD PTR _yygotominor$[esp+156], 65280	; 0000ff00H
; Line 64417
	jmp	$LN354@yy_reduce
$LN192@yy_reduce:
; Line 64419
	mov	eax, DWORD PTR [ebp+8]
	shl	eax, 16					; 00000010H
	mov	DWORD PTR _yygotominor$[esp+152], eax
	mov	DWORD PTR _yygotominor$[esp+156], 16711680 ; 00ff0000H
; Line 64420
	jmp	$LN354@yy_reduce
$LN190@yy_reduce:
; Line 64425
	mov	DWORD PTR _yygotominor$[esp+152], 8
; Line 64426
	jmp	$LN354@yy_reduce
$LN189@yy_reduce:
; Line 64428
	mov	DWORD PTR _yygotominor$[esp+152], 9
; Line 64429
	jmp	$LN354@yy_reduce
$LN188@yy_reduce:
; Line 64431
	mov	DWORD PTR _yygotominor$[esp+152], 6
; Line 64432
	jmp	$LN354@yy_reduce
$LN187@yy_reduce:
; Line 64440
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64441
	jmp	$LN354@yy_reduce
$LN186@yy_reduce:
; Line 64443
	and	eax, 1
	mov	DWORD PTR _yygotominor$[esp+156], eax
$LN220@yy_reduce:
	mov	DWORD PTR _yygotominor$[esp+152], ebx
; Line 64444
	jmp	$LN354@yy_reduce
$LN185@yy_reduce:
; Line 64446
	mov	ecx, DWORD PTR [ebp-12]
	mov	edx, DWORD PTR [ebp-8]
	mov	DWORD PTR _yygotominor$[esp+152], ecx
	mov	DWORD PTR _yygotominor$[esp+156], edx
; Line 64447
	jmp	$LN354@yy_reduce
$LN184@yy_reduce:
; Line 64449
	mov	eax, DWORD PTR [ebp-32]
	mov	ecx, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp-52]
	push	ebx
	push	eax
	push	ecx
	push	edx
	push	edi
	call	_sqlite3AddPrimaryKey
	add	esp, 20					; 00000014H
; Line 64450
	jmp	$LN354@yy_reduce
$LN183@yy_reduce:
; Line 64452
	mov	eax, DWORD PTR [ebp+8]
	mov	ecx, DWORD PTR [ebp-32]
	push	ebx
	push	ebx
	push	ebx
	push	eax
	push	ecx
	push	ebx
	push	ebx
	push	ebx
	xor	ecx, ecx
	mov	edx, edi
	call	_sqlite3CreateIndex
	add	esp, 32					; 00000020H
; Line 64453
	jmp	$LN354@yy_reduce
$LN182@yy_reduce:
; Line 64455
	mov	ebx, DWORD PTR [ebp-32]
	mov	eax, edi
	call	_sqlite3AddCheckConstraint
; Line 64456
	jmp	$LN354@yy_reduce
$LN181@yy_reduce:
; Line 64459
	mov	edx, DWORD PTR [ebp-12]
	mov	eax, DWORD PTR [ebp-32]
	push	edx
	mov	edx, DWORD PTR [ebp-112]
	push	eax
	lea	ecx, DWORD PTR [ebp-52]
	push	ecx
	push	edx
	push	edi
	call	_sqlite3CreateForeignKey
; Line 64460
	mov	eax, DWORD PTR [ebp+8]
	push	eax
	mov	eax, edi
	call	_sqlite3DeferForeignKey
	add	esp, 24					; 00000018H
; Line 64462
	jmp	$LN354@yy_reduce
$LN180@yy_reduce:
; Line 64465
	mov	DWORD PTR _yygotominor$[esp+152], 99	; 00000063H
; Line 64466
	jmp	$LN354@yy_reduce
$LN179@yy_reduce:
; Line 64468
	mov	DWORD PTR _yygotominor$[esp+152], 4
; Line 64469
	jmp	$LN354@yy_reduce
$LN178@yy_reduce:
; Line 64472
	mov	DWORD PTR _yygotominor$[esp+152], 5
; Line 64473
	jmp	$LN354@yy_reduce
$LN177@yy_reduce:
; Line 64476
	mov	ecx, DWORD PTR [ebp-12]
	mov	edx, DWORD PTR [ebp+8]
	push	ecx
	push	ebx
	push	edx
	mov	eax, edi
	call	_sqlite3DropTable
	add	esp, 12					; 0000000cH
; Line 64478
	jmp	$LN354@yy_reduce
$LN176@yy_reduce:
; Line 64481
	mov	eax, DWORD PTR [ebp-72]
	mov	ecx, DWORD PTR [ebp-112]
	mov	edx, DWORD PTR [ebp+8]
	push	eax
	push	ecx
	push	edx
	lea	edx, DWORD PTR [ebp-132]
	push	edx
	lea	eax, DWORD PTR [ebp-32]
	lea	ecx, DWORD PTR [ebp-52]
	push	edi
	call	_sqlite3CreateView
	add	esp, 20					; 00000014H
; Line 64483
	jmp	$LN354@yy_reduce
$LN175@yy_reduce:
; Line 64486
	mov	eax, DWORD PTR [ebp-12]
	mov	ecx, DWORD PTR [ebp+8]
	push	eax
	push	1
	push	ecx
	mov	eax, edi
	call	_sqlite3DropTable
	add	esp, 12					; 0000000cH
; Line 64488
	jmp	$LN354@yy_reduce
$LN174@yy_reduce:
; Line 64491
	mov	edx, DWORD PTR [ebp+8]
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	4
	push	edx
	push	edi
	call	_sqlite3Select
; Line 64492
	mov	esi, DWORD PTR [ebp+8]
	add	esp, 32					; 00000020H
	call	_sqlite3SelectDelete
; Line 64494
	jmp	$LN354@yy_reduce
$LN172@yy_reduce:
; Line 64501
	mov	eax, DWORD PTR [ebp+8]
	cmp	eax, ebx
	je	SHORT $LN171@yy_reduce
; Line 64502
	mov	cl, BYTE PTR [ebp-12]
	mov	BYTE PTR [eax+4], cl
; Line 64503
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp-32]
	mov	DWORD PTR [edx+32], eax
; Line 64507
	mov	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], ecx
; Line 64509
	jmp	$LN354@yy_reduce
$LN171@yy_reduce:
; Line 64505
	mov	esi, DWORD PTR [ebp-32]
	call	_sqlite3SelectDelete
; Line 64507
	mov	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], ecx
; Line 64509
	jmp	$LN354@yy_reduce
$LN169@yy_reduce:
; Line 64511
	mov	DWORD PTR _yygotominor$[esp+152], 107	; 0000006bH
; Line 64512
	jmp	$LN354@yy_reduce
$LN168@yy_reduce:
; Line 64515
	mov	edx, DWORD PTR [ebp+12]
	mov	eax, DWORD PTR [ebp+8]
	mov	ecx, DWORD PTR [ebp-132]
	push	edx
	mov	edx, DWORD PTR [ebp-12]
	push	eax
	mov	eax, DWORD PTR [ebp-32]
	push	ecx
	mov	ecx, DWORD PTR [ebp-52]
	push	edx
	mov	edx, DWORD PTR [ebp-72]
	push	eax
	mov	eax, DWORD PTR [ebp-92]
	push	ecx
	push	edx
	push	eax
	mov	eax, DWORD PTR [ebp-112]
	call	_sqlite3SelectNew
	add	esp, 32					; 00000020H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64517
	jmp	$LN354@yy_reduce
$LN167@yy_reduce:
; Line 64520
	mov	ecx, DWORD PTR [ebp-12]
	mov	DWORD PTR _yygotominor$[esp+152], ecx
; Line 64521
	jmp	$LN354@yy_reduce
$LN165@yy_reduce:
; Line 64530
	test	DWORD PTR [ebp+12], -2			; fffffffeH
	je	SHORT $LN236@yy_reduce
	lea	eax, DWORD PTR [ebp+8]
	jmp	SHORT $LN237@yy_reduce
$LN236@yy_reduce:
	xor	eax, eax
$LN237@yy_reduce:
	mov	edx, DWORD PTR [ebp-12]
	push	eax
	mov	eax, DWORD PTR [ebp-32]
	push	edx
	call	_sqlite3ExprListAppend
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64532
	jmp	$LN354@yy_reduce
$LN164@yy_reduce:
; Line 64535
	push	ebx
	push	ebx
	push	107					; 0000006bH
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR [ebp-12]
	call	_sqlite3ExprListAppend
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64537
	jmp	$LN354@yy_reduce
$LN163@yy_reduce:
; Line 64540
	push	ebx
	push	107					; 0000006bH
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	mov	esi, eax
; Line 64541
	push	ebx
	lea	eax, DWORD PTR [ebp-32]
	push	23					; 00000017H
	call	_sqlite3Expr
	add	esp, 16					; 00000010H
; Line 64542
	push	ebx
	push	eax
	push	112					; 00000070H
	xor	eax, eax
	mov	edi, esi
	call	_sqlite3Expr
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR [ebp-52]
	call	_sqlite3ExprListAppend
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64544
	jmp	$LN354@yy_reduce
$LN161@yy_reduce:
; Line 64549
	mov	edi, 56					; 00000038H
	call	_sqlite3Malloc
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64550
	jmp	$LN354@yy_reduce
$LN160@yy_reduce:
; Line 64553
	mov	esi, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], esi
; Line 64554
	call	_sqlite3SrcListShiftJoinType
; Line 64556
	jmp	$LN354@yy_reduce
$LN159@yy_reduce:
; Line 64559
	mov	eax, DWORD PTR [ebp-12]
; Line 64560
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	$LN354@yy_reduce
	movzx	ecx, WORD PTR [eax]
	cmp	cx, bx
	jle	$LN354@yy_reduce
	mov	dl, BYTE PTR [ebp+8]
	movsx	ecx, cx
	lea	ecx, DWORD PTR [ecx+ecx*2]
	shl	ecx, 4
	mov	BYTE PTR [ecx+eax-19], dl
; Line 64562
	jmp	$LN354@yy_reduce
$LN156@yy_reduce:
; Line 64568
	mov	eax, DWORD PTR [ebp+8]
	mov	ecx, DWORD PTR [ebp-12]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR [ebp-92]
	lea	eax, DWORD PTR [ebp-52]
	push	ebx
	push	eax
	lea	edx, DWORD PTR [ebp-32]
	lea	eax, DWORD PTR [ebp-72]
	call	_sqlite3SrcListAppendFromTerm
	add	esp, 16					; 00000010H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64570
	jmp	$LN354@yy_reduce
$LN155@yy_reduce:
; Line 64573
	mov	ecx, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp-12]
	mov	eax, DWORD PTR [ebp-72]
	push	ecx
	mov	ecx, DWORD PTR [ebp-112]
	push	edx
	push	eax
	lea	edx, DWORD PTR [ebp-32]
	push	ebx
	xor	eax, eax
	call	_sqlite3SrcListAppendFromTerm
	add	esp, 16					; 00000010H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64575
	jmp	$LN354@yy_reduce
$LN154@yy_reduce:
; Line 64578
	mov	esi, DWORD PTR [ebp+8]
	call	_sqlite3SrcListShiftJoinType
; Line 64579
	mov	ecx, DWORD PTR [ebp+8]
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ecx
	xor	eax, eax
	call	_sqlite3SelectNew
	add	esp, 32					; 00000020H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64581
	jmp	$LN354@yy_reduce
$LN153@yy_reduce:
; Line 64583
	mov	DWORD PTR _yygotominor$[esp+152], ebx
$LN162@yy_reduce:
	and	eax, 1
	mov	DWORD PTR _yygotominor$[esp+156], eax
; Line 64584
	jmp	$LN354@yy_reduce
$LN152@yy_reduce:
; Line 64586
	lea	edx, DWORD PTR [ebp-12]
	lea	eax, DWORD PTR [ebp+8]
	push	edx
	xor	ecx, ecx
	call	_sqlite3SrcListAppend
	add	esp, 4
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64587
	jmp	$LN354@yy_reduce
$LN150@yy_reduce:
; Line 64592
	push	ebx
	push	ebx
	lea	eax, DWORD PTR [ebp-12]
	push	eax
	push	edi
	call	_sqlite3JoinType
	add	esp, 16					; 00000010H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64593
	jmp	$LN354@yy_reduce
$LN149@yy_reduce:
; Line 64595
	push	ebx
	lea	ecx, DWORD PTR [ebp-12]
	push	ecx
	lea	edx, DWORD PTR [ebp-32]
	push	edx
	push	edi
	call	_sqlite3JoinType
	add	esp, 16					; 00000010H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64596
	jmp	$LN354@yy_reduce
$LN148@yy_reduce:
; Line 64598
	lea	eax, DWORD PTR [ebp-12]
	push	eax
	lea	ecx, DWORD PTR [ebp-32]
	push	ecx
	lea	edx, DWORD PTR [ebp-52]
	push	edx
	push	edi
	call	_sqlite3JoinType
	add	esp, 16					; 00000010H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64599
	jmp	$LN354@yy_reduce
$LN143@yy_reduce:
; Line 64630
	mov	edx, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], edx
; Line 64631
	jmp	$LN354@yy_reduce
$LN142@yy_reduce:
; Line 64634
	mov	eax, DWORD PTR [ebp-12]
	push	ebx
	push	eax
	mov	eax, DWORD PTR [ebp-52]
	call	_sqlite3ExprListAppend
	add	esp, 8
; Line 64635
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	$LN354@yy_reduce
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+12]
	mov	al, BYTE PTR [ebp+8]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	mov	BYTE PTR [edx+ecx*4-4], al
; Line 64637
	jmp	$LN354@yy_reduce
$LN140@yy_reduce:
; Line 64640
	mov	ecx, DWORD PTR [ebp-12]
	push	ebx
	push	ecx
	xor	eax, eax
	call	_sqlite3ExprListAppend
	add	esp, 8
; Line 64641
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	$LN354@yy_reduce
	mov	eax, DWORD PTR [eax+12]
	cmp	eax, ebx
	je	$LN354@yy_reduce
	mov	dl, BYTE PTR [ebp+8]
	mov	BYTE PTR [eax+8], dl
; Line 64643
	jmp	$LN354@yy_reduce
$LN135@yy_reduce:
; Line 64655
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], eax
	mov	DWORD PTR _yygotominor$[esp+156], ebx
; Line 64656
	jmp	$LN354@yy_reduce
$LN134@yy_reduce:
; Line 64658
	mov	ecx, DWORD PTR [ebp-32]
	mov	edx, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], ecx
	mov	DWORD PTR _yygotominor$[esp+156], edx
; Line 64659
	jmp	$LN354@yy_reduce
$LN133@yy_reduce:
; Line 64661
	mov	eax, DWORD PTR [ebp-32]
	mov	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+156], eax
	mov	DWORD PTR _yygotominor$[esp+152], ecx
; Line 64662
	jmp	$LN354@yy_reduce
$LN132@yy_reduce:
; Line 64664
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp-12]
	push	edx
	push	eax
	push	edi
	call	_sqlite3DeleteFrom
	add	esp, 12					; 0000000cH
; Line 64665
	jmp	$LN354@yy_reduce
$LN131@yy_reduce:
; Line 64668
	mov	eax, DWORD PTR [ebp-12]
	cmp	eax, ebx
	je	SHORT $LN286@yy_reduce
	cmp	DWORD PTR [eax], 2000			; 000007d0H
	jle	SHORT $LN286@yy_reduce
	push	OFFSET ??_C@_08FAFAADKO@set?5list?$AA@
	push	OFFSET ??_C@_0BH@HJGFDJPB@too?5many?5columns?5in?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN286@yy_reduce:
; Line 64669
	mov	ecx, DWORD PTR [ebp-72]
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp-12]
	push	ecx
	mov	ecx, DWORD PTR [ebp-52]
	push	edx
	push	eax
	push	ecx
	push	edi
	call	_sqlite3Update
	add	esp, 20					; 00000014H
; Line 64671
	jmp	$LN354@yy_reduce
$LN130@yy_reduce:
; Line 64673
	mov	eax, DWORD PTR [ebp+8]
	lea	edx, DWORD PTR [ebp-32]
	push	edx
	push	eax
	mov	eax, DWORD PTR [ebp-72]
	call	_sqlite3ExprListAppend
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64674
	jmp	$LN354@yy_reduce
$LN129@yy_reduce:
; Line 64676
	mov	edx, DWORD PTR [ebp+8]
	lea	ecx, DWORD PTR [ebp-32]
	push	ecx
	push	edx
	xor	eax, eax
	call	_sqlite3ExprListAppend
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64677
	jmp	$LN354@yy_reduce
$LN128@yy_reduce:
; Line 64679
	mov	eax, DWORD PTR [ebp-132]
	mov	ecx, DWORD PTR [ebp-72]
	mov	edx, DWORD PTR [ebp-12]
	push	eax
	mov	eax, DWORD PTR [ebp-92]
	push	ecx
	push	ebx
	push	edx
	push	eax
	push	edi
	call	_sqlite3Insert
	add	esp, 24					; 00000018H
; Line 64680
	jmp	$LN354@yy_reduce
$LN127@yy_reduce:
; Line 64682
	mov	ecx, DWORD PTR [ebp-72]
	mov	edx, DWORD PTR [ebp-12]
	mov	eax, DWORD PTR [ebp+8]
	push	ecx
	mov	ecx, DWORD PTR [ebp-32]
	push	edx
	push	eax
	push	ebx
	push	ecx
	push	edi
	call	_sqlite3Insert
	add	esp, 24					; 00000018H
; Line 64683
	jmp	$LN354@yy_reduce
$LN126@yy_reduce:
; Line 64685
	mov	edx, DWORD PTR [ebp-92]
	mov	eax, DWORD PTR [ebp-32]
	mov	ecx, DWORD PTR [ebp-52]
	push	edx
	push	eax
	push	ebx
	push	ebx
	push	ecx
	push	edi
	call	_sqlite3Insert
	add	esp, 24					; 00000018H
; Line 64686
	jmp	$LN354@yy_reduce
$LN125@yy_reduce:
; Line 64689
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp-32]
	push	ebx
	push	edx
	call	_sqlite3ExprListAppend
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64690
	jmp	$LN354@yy_reduce
$LN124@yy_reduce:
; Line 64693
	mov	eax, DWORD PTR [ebp+8]
	push	ebx
	push	eax
	xor	eax, eax
	call	_sqlite3ExprListAppend
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64694
	jmp	$LN354@yy_reduce
$LN123@yy_reduce:
; Line 64696
	mov	eax, DWORD PTR [ebp-32]
	lea	ecx, DWORD PTR [ebp+8]
	push	ecx
	call	_sqlite3IdListAppend
	add	esp, 4
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64697
	jmp	$LN354@yy_reduce
$LN122@yy_reduce:
; Line 64699
	lea	edx, DWORD PTR [ebp+8]
	push	edx
	xor	eax, eax
	call	_sqlite3IdListAppend
	add	esp, 4
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64700
	jmp	$LN354@yy_reduce
$LN121@yy_reduce:
; Line 64702
	mov	eax, DWORD PTR [ebp-12]
	lea	ecx, DWORD PTR [ebp+8]
	lea	esi, DWORD PTR [ebp-32]
	mov	DWORD PTR _yygotominor$[esp+152], eax
	call	_sqlite3ExprSpan
; Line 64703
	jmp	$LN354@yy_reduce
$LN120@yy_reduce:
; Line 64707
	mov	ecx, DWORD PTR [ebp+4]
	push	ebx
	lea	eax, DWORD PTR [ebp+8]
	push	ecx
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64708
	jmp	$LN354@yy_reduce
$LN119@yy_reduce:
; Line 64711
	push	ebx
	lea	eax, DWORD PTR [ebp+8]
	push	23					; 00000017H
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64712
	jmp	$LN354@yy_reduce
$LN118@yy_reduce:
; Line 64715
	push	ebx
	lea	eax, DWORD PTR [ebp-32]
	push	23					; 00000017H
	xor	edi, edi
	call	_sqlite3Expr
	mov	esi, eax
; Line 64716
	push	ebx
	lea	eax, DWORD PTR [ebp+8]
	push	23					; 00000017H
	call	_sqlite3Expr
	mov	edi, eax
; Line 64717
	push	esi
	push	112					; 00000070H
	xor	eax, eax
	call	_sqlite3Expr
	add	esp, 24					; 00000018H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64719
	jmp	$LN354@yy_reduce
$LN117@yy_reduce:
; Line 64722
	push	ebx
	lea	eax, DWORD PTR [ebp-72]
	push	23					; 00000017H
	xor	edi, edi
	call	_sqlite3Expr
	mov	esi, eax
; Line 64723
	push	ebx
	lea	eax, DWORD PTR [ebp-32]
	push	23					; 00000017H
	call	_sqlite3Expr
	mov	ebx, eax
; Line 64724
	push	edi
	lea	eax, DWORD PTR [ebp+8]
	push	23					; 00000017H
	call	_sqlite3Expr
	mov	edi, eax
; Line 64725
	push	ebx
	push	112					; 00000070H
	xor	eax, eax
	call	_sqlite3Expr
	mov	edi, eax
; Line 64726
	push	esi
	push	112					; 00000070H
	xor	eax, eax
	call	_sqlite3Expr
	add	esp, 40					; 00000028H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64728
	jmp	$LN354@yy_reduce
$LN116@yy_reduce:
; Line 64730
	lea	eax, DWORD PTR [ebp+8]
	mov	ecx, edi
	call	_sqlite3RegisterExpr
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64731
	jmp	$LN354@yy_reduce
$LN115@yy_reduce:
; Line 64735
	push	ebx
	lea	eax, DWORD PTR [ebp+8]
	push	128					; 00000080H
	xor	edi, edi
	call	_sqlite3Expr
	mov	DWORD PTR _yygotominor$[esp+160], eax
; Line 64736
	push	eax
	mov	eax, DWORD PTR _pParse$[esp+164]
	call	_sqlite3ExprAssignVarNumber
	add	esp, 12					; 0000000cH
; Line 64738
	jmp	$LN354@yy_reduce
$LN114@yy_reduce:
; Line 64741
	mov	esi, DWORD PTR [ebp-32]
	cmp	esi, ebx
	jne	SHORT $LN290@yy_reduce
	xor	esi, esi
	mov	DWORD PTR _yygotominor$[esp+152], esi
; Line 64743
	jmp	$LN354@yy_reduce
; Line 64741
$LN290@yy_reduce:
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp+12]
	push	edx
	shr	eax, 1
	push	edi
	call	_sqlite3LocateCollSeq
	add	esp, 8
	cmp	eax, ebx
	je	SHORT $LN289@yy_reduce
	or	WORD PTR [esi+2], 256			; 00000100H
	mov	DWORD PTR [esi+4], eax
$LN289@yy_reduce:
	mov	DWORD PTR _yygotominor$[esp+152], esi
; Line 64743
	jmp	$LN354@yy_reduce
$LN113@yy_reduce:
; Line 64746
	mov	ecx, DWORD PTR [ebp-52]
	push	ecx
	lea	eax, DWORD PTR [ebp-12]
	push	31					; 0000001fH
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
; Line 64747
	lea	ecx, DWORD PTR [ebp+8]
	lea	esi, DWORD PTR [ebp-92]
	mov	DWORD PTR _yygotominor$[esp+152], eax
	call	_sqlite3ExprSpan
; Line 64749
	jmp	$LN354@yy_reduce
$LN112@yy_reduce:
; Line 64752
	mov	eax, DWORD PTR [ebp-12]
	cmp	eax, ebx
	je	SHORT $LN111@yy_reduce
	cmp	DWORD PTR [eax], 100			; 00000064H
	jle	SHORT $LN111@yy_reduce
; Line 64753
	lea	edx, DWORD PTR [ebp-72]
	push	edx
	push	OFFSET ??_C@_0CC@BHLMPGNH@too?5many?5arguments?5on?5function?5?$CF@
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN111@yy_reduce:
; Line 64755
	mov	eax, DWORD PTR [ebp-12]
	lea	esi, DWORD PTR [ebp-72]
	mov	edi, esi
	call	_sqlite3ExprFunction
; Line 64756
	lea	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], eax
	call	_sqlite3ExprSpan
; Line 64757
	cmp	DWORD PTR [ebp-32], ebx
	je	$LN354@yy_reduce
	cmp	eax, ebx
	je	$LN354@yy_reduce
; Line 64758
	or	WORD PTR [eax+2], 16			; 00000010H
; Line 64761
	jmp	$LN354@yy_reduce
$LN109@yy_reduce:
; Line 64764
	lea	esi, DWORD PTR [ebp-52]
	mov	edi, esi
	xor	eax, eax
	call	_sqlite3ExprFunction
; Line 64765
	lea	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], eax
	call	_sqlite3ExprSpan
; Line 64767
	jmp	$LN354@yy_reduce
$LN108@yy_reduce:
; Line 64772
	lea	edi, DWORD PTR [ebp+8]
	xor	eax, eax
	call	_sqlite3ExprFunction
; Line 64773
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	$LN354@yy_reduce
; Line 64774
	mov	BYTE PTR [eax], 152			; 00000098H
; Line 64775
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [eax+32], edx
; Line 64778
	jmp	$LN354@yy_reduce
$LN106@yy_reduce:
; Line 64787
	mov	eax, DWORD PTR [ebp-32]
	mov	ecx, DWORD PTR [ebp-16]
	mov	edi, DWORD PTR [ebp+8]
	push	eax
	push	ecx
	xor	eax, eax
	call	_sqlite3Expr
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64788
	jmp	$LN354@yy_reduce
$LN105@yy_reduce:
; Line 64791
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp+12]
	mov	DWORD PTR _yygotominor$[esp+152], edx
	mov	DWORD PTR _yygotominor$[esp+156], eax
	mov	DWORD PTR _yygotominor$[esp+160], ebx
; Line 64792
	jmp	$LN354@yy_reduce
$LN104@yy_reduce:
; Line 64795
	mov	ecx, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp+12]
	mov	DWORD PTR _yygotominor$[esp+152], ecx
	mov	DWORD PTR _yygotominor$[esp+156], edx
	mov	DWORD PTR _yygotominor$[esp+160], 1
; Line 64796
	jmp	$LN354@yy_reduce
$LN103@yy_reduce:
; Line 64800
	mov	eax, DWORD PTR [ebp-12]
	push	ebx
	push	eax
	xor	eax, eax
	call	_sqlite3ExprListAppend
; Line 64801
	mov	ecx, DWORD PTR [ebp-52]
	push	ebx
	push	ecx
	call	_sqlite3ExprListAppend
; Line 64802
	mov	ecx, DWORD PTR [ebp+8]
	add	esp, 16					; 00000010H
	cmp	ecx, ebx
	je	SHORT $LN102@yy_reduce
; Line 64803
	push	ebx
	push	ecx
	call	_sqlite3ExprListAppend
	add	esp, 8
$LN102@yy_reduce:
; Line 64805
	lea	edi, DWORD PTR [ebp-32]
	call	_sqlite3ExprFunction
; Line 64806
	cmp	DWORD PTR [ebp-24], ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	SHORT $LN101@yy_reduce
	push	eax
	push	16					; 00000010H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
$LN101@yy_reduce:
; Line 64807
	mov	ecx, DWORD PTR [ebp-12]
	mov	esi, DWORD PTR [ebp-52]
	add	ecx, 28					; 0000001cH
	add	esi, 28					; 0000001cH
	call	_sqlite3ExprSpan
; Line 64808
	cmp	eax, ebx
	je	$LN354@yy_reduce
	mov	eax, DWORD PTR _yygotominor$[esp+152]
	or	WORD PTR [eax+2], 128			; 00000080H
; Line 64810
	jmp	$LN354@yy_reduce
$LN99@yy_reduce:
; Line 64813
	mov	edx, DWORD PTR [ebp-12]
	mov	eax, DWORD PTR [ebp+4]
	push	edx
	push	eax
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
; Line 64814
	mov	esi, DWORD PTR [ebp-12]
	add	esp, 8
	lea	ecx, DWORD PTR [ebp+8]
	add	esi, 28					; 0000001cH
	mov	DWORD PTR _yygotominor$[esp+152], eax
	call	_sqlite3ExprSpan
; Line 64816
	jmp	$LN354@yy_reduce
$LN98@yy_reduce:
; Line 64819
	mov	ecx, DWORD PTR [ebp-32]
	push	ecx
	push	65					; 00000041H
$LN361@yy_reduce:
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
; Line 64820
	mov	esi, DWORD PTR [ebp-32]
$LN374@yy_reduce:
	add	esp, 8
	lea	ecx, DWORD PTR [ebp+8]
	add	esi, 28					; 0000001cH
	mov	DWORD PTR _yygotominor$[esp+152], eax
	call	_sqlite3ExprSpan
; Line 64822
	jmp	$LN354@yy_reduce
$LN97@yy_reduce:
; Line 64825
	mov	edx, DWORD PTR [ebp-32]
	push	edx
	push	66					; 00000042H
; Line 64828
	jmp	SHORT $LN361@yy_reduce
$LN96@yy_reduce:
; Line 64831
	mov	eax, DWORD PTR [ebp-52]
	push	eax
	push	66					; 00000042H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
; Line 64832
	mov	esi, DWORD PTR [ebp-52]
; Line 64834
	jmp	SHORT $LN374@yy_reduce
$LN95@yy_reduce:
; Line 64837
	mov	ecx, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp-16]
	push	ecx
	push	edx
$LN373@yy_reduce:
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
; Line 64838
	mov	ecx, DWORD PTR [ebp+8]
	add	esp, 8
	add	ecx, 28					; 0000001cH
	lea	esi, DWORD PTR [ebp-12]
	mov	DWORD PTR _yygotominor$[esp+152], eax
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN94@yy_reduce:
; Line 64843
	mov	eax, DWORD PTR [ebp+8]
	push	eax
	push	85					; 00000055H
; Line 64846
	jmp	SHORT $LN373@yy_reduce
$LN93@yy_reduce:
; Line 64849
	mov	ecx, DWORD PTR [ebp+8]
	push	ecx
	push	86					; 00000056H
; Line 64852
	jmp	SHORT $LN373@yy_reduce
$LN92@yy_reduce:
; Line 64855
	mov	edx, DWORD PTR [ebp-32]
	push	ebx
	push	edx
	xor	eax, eax
	call	_sqlite3ExprListAppend
; Line 64856
	mov	ecx, DWORD PTR [ebp+8]
	push	ebx
	push	ecx
	call	_sqlite3ExprListAppend
; Line 64857
	mov	edx, DWORD PTR [ebp-72]
	push	edx
	mov	ebx, eax
	push	63					; 0000003fH
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	mov	esi, eax
	add	esp, 24					; 00000018H
; Line 64858
	test	esi, esi
	mov	DWORD PTR _yygotominor$[esp+152], esi
	je	SHORT $LN91@yy_reduce
; Line 64859
	mov	DWORD PTR [esi+16], ebx
; Line 64860
	jmp	SHORT $LN90@yy_reduce
$LN91@yy_reduce:
; Line 64861
	call	_sqlite3ExprListDelete
$LN90@yy_reduce:
; Line 64863
	cmp	DWORD PTR [ebp-52], edi
	je	SHORT $LN89@yy_reduce
	push	esi
	push	16					; 00000010H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
$LN89@yy_reduce:
; Line 64864
	mov	ecx, DWORD PTR [ebp+8]
	mov	esi, DWORD PTR [ebp-72]
	mov	eax, DWORD PTR _yygotominor$[esp+152]
	add	ecx, 28					; 0000001cH
	add	esi, 28					; 0000001cH
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN88@yy_reduce:
; Line 64869
	mov	eax, DWORD PTR [ebp-72]
	push	eax
	push	64					; 00000040H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	mov	esi, eax
	add	esp, 8
; Line 64870
	cmp	esi, ebx
	mov	DWORD PTR _yygotominor$[esp+152], esi
	je	SHORT $LN87@yy_reduce
; Line 64871
	mov	ecx, DWORD PTR [ebp-12]
; Line 64872
	mov	ebx, esi
	mov	DWORD PTR [esi+16], ecx
	call	_sqlite3ExprSetHeight
; Line 64873
	jmp	SHORT $LN86@yy_reduce
$LN87@yy_reduce:
; Line 64874
	mov	ebx, DWORD PTR [ebp-12]
	call	_sqlite3ExprListDelete
$LN86@yy_reduce:
; Line 64876
	cmp	DWORD PTR [ebp-52], edi
	je	SHORT $LN85@yy_reduce
	push	esi
	push	16					; 00000010H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
$LN85@yy_reduce:
; Line 64877
	mov	esi, DWORD PTR [ebp-72]
	mov	eax, DWORD PTR _yygotominor$[esp+152]
	lea	ecx, DWORD PTR [ebp+8]
	add	esi, 28					; 0000001cH
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN84@yy_reduce:
; Line 64882
	push	ebx
	push	110					; 0000006eH
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
; Line 64883
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	SHORT $LN83@yy_reduce
; Line 64884
	mov	edx, DWORD PTR [ebp-12]
; Line 64885
	mov	ebx, eax
	mov	DWORD PTR [eax+56], edx
	call	_sqlite3ExprSetHeight
; Line 64889
	lea	ecx, DWORD PTR [ebp+8]
	lea	esi, DWORD PTR [ebp-32]
	mov	eax, ebx
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN83@yy_reduce:
; Line 64887
	mov	esi, DWORD PTR [ebp-12]
	call	_sqlite3SelectDelete
; Line 64889
	mov	eax, DWORD PTR _yygotominor$[esp+152]
	lea	ecx, DWORD PTR [ebp+8]
	lea	esi, DWORD PTR [ebp-32]
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN81@yy_reduce:
; Line 64894
	mov	eax, DWORD PTR [ebp-72]
	push	eax
	push	64					; 00000040H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	mov	ebx, eax
	add	esp, 8
; Line 64895
	test	ebx, ebx
	mov	DWORD PTR _yygotominor$[esp+152], ebx
	je	SHORT $LN80@yy_reduce
; Line 64896
	mov	ecx, DWORD PTR [ebp-12]
	mov	DWORD PTR [ebx+56], ecx
; Line 64897
	call	_sqlite3ExprSetHeight
; Line 64898
	jmp	SHORT $LN79@yy_reduce
$LN80@yy_reduce:
; Line 64899
	mov	esi, DWORD PTR [ebp-12]
	call	_sqlite3SelectDelete
	mov	ebx, DWORD PTR _yygotominor$[esp+152]
$LN79@yy_reduce:
; Line 64901
	cmp	DWORD PTR [ebp-52], edi
	je	$LN85@yy_reduce
	push	ebx
	push	16					; 00000010H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
; Line 64902
	mov	esi, DWORD PTR [ebp-72]
	add	esp, 8
	lea	ecx, DWORD PTR [ebp+8]
	add	esi, 28					; 0000001cH
	mov	DWORD PTR _yygotominor$[esp+152], eax
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN77@yy_reduce:
; Line 64907
	lea	eax, DWORD PTR [ebp-12]
	lea	esi, DWORD PTR [ebp+8]
	push	eax
	mov	eax, esi
	xor	ecx, ecx
	call	_sqlite3SrcListAppend
; Line 64908
	mov	edx, DWORD PTR [ebp-52]
	push	edx
	mov	DWORD PTR _pSrc$102164[esp+160], eax
	push	64					; 00000040H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	mov	ebx, eax
	add	esp, 12					; 0000000cH
; Line 64909
	test	ebx, ebx
	mov	DWORD PTR _yygotominor$[esp+152], ebx
	je	SHORT $LN76@yy_reduce
; Line 64910
	mov	eax, DWORD PTR _pSrc$102164[esp+152]
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	eax
	xor	eax, eax
	call	_sqlite3SelectNew
	add	esp, 32					; 00000020H
	mov	DWORD PTR [ebx+56], eax
; Line 64911
	call	_sqlite3ExprSetHeight
; Line 64912
	jmp	SHORT $LN75@yy_reduce
$LN76@yy_reduce:
; Line 64913
	mov	ecx, DWORD PTR _pSrc$102164[esp+152]
	push	ecx
	call	_sqlite3SrcListDelete
	add	esp, 4
$LN75@yy_reduce:
; Line 64915
	cmp	DWORD PTR [ebp-32], edi
	je	SHORT $LN74@yy_reduce
	push	ebx
	push	16					; 00000010H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
	mov	DWORD PTR _yygotominor$[esp+152], eax
$LN74@yy_reduce:
; Line 64916
	cmp	DWORD PTR [esi], 0
	mov	ecx, esi
	jne	SHORT $LN239@yy_reduce
	lea	ecx, DWORD PTR [ebp-12]
$LN239@yy_reduce:
	mov	esi, DWORD PTR [ebp-52]
	mov	eax, DWORD PTR _yygotominor$[esp+152]
	add	esi, 28					; 0000001cH
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN73@yy_reduce:
; Line 64921
	push	ebx
	push	17					; 00000011H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
; Line 64922
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	SHORT $LN72@yy_reduce
; Line 64923
	mov	edx, DWORD PTR [ebp-12]
; Line 64924
	lea	ecx, DWORD PTR [ebp+8]
	lea	esi, DWORD PTR [ebp-52]
	mov	DWORD PTR [eax+56], edx
	call	_sqlite3ExprSpan
; Line 64925
	mov	ebx, eax
	call	_sqlite3ExprSetHeight
; Line 64926
	jmp	$LN354@yy_reduce
$LN72@yy_reduce:
; Line 64927
	mov	esi, DWORD PTR [ebp-12]
	call	_sqlite3SelectDelete
; Line 64930
	jmp	$LN354@yy_reduce
$LN70@yy_reduce:
; Line 64933
	mov	eax, DWORD PTR [ebp-52]
	mov	edi, DWORD PTR [ebp-12]
	push	eax
	push	129					; 00000081H
	xor	eax, eax
	call	_sqlite3Expr
	add	esp, 8
; Line 64934
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	SHORT $LN69@yy_reduce
; Line 64935
	mov	ecx, DWORD PTR [ebp-32]
; Line 64936
	mov	ebx, eax
	mov	DWORD PTR [eax+16], ecx
	call	_sqlite3ExprSetHeight
; Line 64940
	lea	ecx, DWORD PTR [ebp+8]
	lea	esi, DWORD PTR [ebp-72]
	mov	eax, ebx
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN69@yy_reduce:
; Line 64938
	mov	ebx, DWORD PTR [ebp-32]
	call	_sqlite3ExprListDelete
; Line 64940
	mov	eax, DWORD PTR _yygotominor$[esp+152]
	lea	ecx, DWORD PTR [ebp+8]
	lea	esi, DWORD PTR [ebp-72]
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN67@yy_reduce:
; Line 64945
	mov	eax, DWORD PTR [ebp-72]
$LN377@yy_reduce:
	mov	edx, DWORD PTR [ebp-32]
	push	ebx
	push	edx
	call	_sqlite3ExprListAppend
; Line 64946
	mov	ecx, DWORD PTR [ebp+8]
	push	ebx
	push	ecx
	call	_sqlite3ExprListAppend
	add	esp, 16					; 00000010H
	mov	DWORD PTR _yygotominor$[esp+152], eax
; Line 64948
	jmp	$LN354@yy_reduce
$LN66@yy_reduce:
; Line 64951
	xor	eax, eax
; Line 64954
	jmp	SHORT $LN377@yy_reduce
$LN65@yy_reduce:
; Line 64958
	mov	edx, DWORD PTR [ebp-132]
	mov	ecx, DWORD PTR [ebp-172]
	push	edx
	mov	edx, DWORD PTR [ebp-12]
	push	ebx
	lea	eax, DWORD PTR [ebp-192]
	push	eax
	push	ecx
	push	edx
	lea	eax, DWORD PTR [ebp-52]
	push	eax
	xor	eax, eax
	xor	ecx, ecx
	lea	esi, DWORD PTR [ebp+8]
	call	_sqlite3SrcListAppend
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR [ebp-92]
	push	ecx
	lea	edx, DWORD PTR [ebp-112]
	push	edx
	mov	ecx, esi
	mov	edx, edi
	call	_sqlite3CreateIndex
	add	esp, 32					; 00000020H
; Line 64960
	jmp	$LN354@yy_reduce
$LN64@yy_reduce:
; Line 64963
	mov	DWORD PTR _yygotominor$[esp+152], 2
; Line 64964
	jmp	$LN354@yy_reduce
$LN62@yy_reduce:
; Line 64970
	xor	esi, esi
; Line 64971
	test	DWORD PTR [ebp-8], -2			; fffffffeH
	jbe	SHORT $LN60@yy_reduce
; Line 64972
	push	ebx
	push	149					; 00000095H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	mov	esi, eax
	add	esp, 8
; Line 64973
	cmp	esi, ebx
	je	SHORT $LN60@yy_reduce
	mov	ecx, DWORD PTR [ebp-12]
	mov	eax, DWORD PTR [ebp-8]
	mov	edx, DWORD PTR _pParse$[esp+152]
	push	ecx
	shr	eax, 1
	push	edx
	call	_sqlite3LocateCollSeq
	add	esp, 8
	mov	DWORD PTR [esi+4], eax
$LN60@yy_reduce:
; Line 64975
	lea	eax, DWORD PTR [ebp-32]
	push	eax
	mov	eax, DWORD PTR [ebp-72]
$LN378@yy_reduce:
	push	esi
	call	_sqlite3ExprListAppend
	add	esp, 8
; Line 64976
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	$LN354@yy_reduce
	mov	esi, eax
	cmp	DWORD PTR [esi], 2000			; 000007d0H
	jle	SHORT $LN293@yy_reduce
	mov	edi, DWORD PTR _pParse$[esp+152]
	push	OFFSET ??_C@_05FKHKFDID@index?$AA@
	push	OFFSET ??_C@_0BH@HJGFDJPB@too?5many?5columns?5in?5?$CFs?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
$LN293@yy_reduce:
; Line 64977
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [esi+12]
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	al, BYTE PTR [ebp+8]
	mov	BYTE PTR [edx+ecx*4-4], al
; Line 64979
	jmp	$LN354@yy_reduce
$LN58@yy_reduce:
; Line 64982
	xor	esi, esi
; Line 64983
	test	DWORD PTR [ebp-8], -2			; fffffffeH
	jbe	SHORT $LN56@yy_reduce
; Line 64984
	push	ebx
	push	149					; 00000095H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	mov	esi, eax
	add	esp, 8
; Line 64985
	cmp	esi, ebx
	je	SHORT $LN56@yy_reduce
	mov	ecx, DWORD PTR [ebp-12]
	mov	eax, DWORD PTR [ebp-8]
	mov	edx, DWORD PTR _pParse$[esp+152]
	push	ecx
	shr	eax, 1
	push	edx
	call	_sqlite3LocateCollSeq
	add	esp, 8
	mov	DWORD PTR [esi+4], eax
$LN56@yy_reduce:
; Line 64987
	lea	eax, DWORD PTR [ebp-32]
	push	eax
	xor	eax, eax
; Line 64991
	jmp	$LN378@yy_reduce
$LN53@yy_reduce:
; Line 64996
	mov	ecx, DWORD PTR [ebp-12]
	mov	edx, DWORD PTR [ebp+8]
	push	ecx
	push	edx
	push	edi
	call	_sqlite3DropIndex
	add	esp, 12					; 0000000cH
; Line 64997
	jmp	$LN354@yy_reduce
$LN52@yy_reduce:
; Line 65000
	mov	edi, DWORD PTR [edi+12]
	cmp	edi, ebx
	jne	SHORT $LN349@yy_reduce
	mov	esi, DWORD PTR _pParse$[esp+152]
	mov	edi, DWORD PTR [esi]
	call	_sqlite3VdbeCreate
	mov	edi, eax
	cmp	edi, ebx
	mov	DWORD PTR [esi+12], eax
	je	$LN354@yy_reduce
$LN349@yy_reduce:
	push	ebx
	push	ebx
	push	84					; 00000054H
	mov	eax, edi
	call	_sqlite3VdbeAddOp
	add	esp, 12					; 0000000cH
; Line 65001
	jmp	$LN354@yy_reduce
$LN51@yy_reduce:
; Line 65003
	push	ebx
$LN368@yy_reduce:
	lea	eax, DWORD PTR [ebp+8]
	push	eax
	lea	ecx, DWORD PTR [ebp-32]
	push	ecx
	lea	edx, DWORD PTR [ebp-52]
	push	edx
	push	edi
	call	_sqlite3Pragma
	add	esp, 20					; 00000014H
; Line 65004
	jmp	$LN354@yy_reduce
$LN49@yy_reduce:
; Line 65010
	push	1
; Line 65012
	jmp	SHORT $LN368@yy_reduce
$LN48@yy_reduce:
; Line 65014
	push	ebx
	lea	eax, DWORD PTR [ebp-12]
	push	eax
	lea	ecx, DWORD PTR [ebp-52]
	push	ecx
	lea	edx, DWORD PTR [ebp-72]
	push	edx
	push	edi
	call	_sqlite3Pragma
	add	esp, 20					; 00000014H
	jmp	$LN354@yy_reduce
$LN47@yy_reduce:
; Line 65017
	push	ebx
	push	ebx
	lea	eax, DWORD PTR [ebp+8]
	push	eax
	lea	ecx, DWORD PTR [ebp-12]
	push	ecx
	push	edi
	call	_sqlite3Pragma
	add	esp, 20					; 00000014H
	jmp	$LN354@yy_reduce
$LN46@yy_reduce:
; Line 65022
	mov	eax, DWORD PTR [ebp-52]
; Line 65023
	mov	edx, DWORD PTR [ebp+8]
	sub	edx, eax
	mov	DWORD PTR _all$102201[esp+152], eax
	mov	eax, DWORD PTR [ebp+12]
	and	eax, -2					; fffffffeH
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	edx, DWORD PTR _all$102201[esp+156]
	and	edx, 1
	xor	ecx, edx
; Line 65024
	lea	eax, DWORD PTR _all$102201[esp+152]
	mov	DWORD PTR _all$102201[esp+156], ecx
	mov	ecx, DWORD PTR [ebp-12]
	push	eax
	push	ecx
	mov	eax, edi
	call	_sqlite3FinishTrigger
	add	esp, 8
; Line 65026
	jmp	$LN354@yy_reduce
$LN45@yy_reduce:
; Line 65029
	mov	edx, DWORD PTR [ebp-152]
	mov	eax, DWORD PTR [ebp-192]
	mov	ecx, DWORD PTR [ebp+8]
	push	edx
	mov	edx, DWORD PTR [ebp-32]
	push	eax
	mov	eax, DWORD PTR [ebp-68]
	push	ecx
	mov	ecx, DWORD PTR [ebp-72]
	push	edx
	mov	edx, DWORD PTR [ebp-92]
	push	eax
	push	ecx
	push	edx
	lea	esi, DWORD PTR [ebp-112]
	lea	ebx, DWORD PTR [ebp-132]
	push	esi
	push	edi
	mov	eax, ebx
	call	_sqlite3BeginTrigger
	add	esp, 36					; 00000024H
; Line 65030
	test	DWORD PTR [ebp-108], -2			; fffffffeH
	jne	SHORT $LN240@yy_reduce
	mov	eax, DWORD PTR [ebx]
	mov	esi, DWORD PTR [ebx+4]
	mov	DWORD PTR _yygotominor$[esp+152], eax
	mov	DWORD PTR _yygotominor$[esp+156], esi
; Line 65032
	jmp	$LN354@yy_reduce
$LN240@yy_reduce:
; Line 65030
	mov	eax, DWORD PTR [esi]
	mov	esi, DWORD PTR [esi+4]
	mov	DWORD PTR _yygotominor$[esp+152], eax
	mov	DWORD PTR _yygotominor$[esp+156], esi
; Line 65032
	jmp	$LN354@yy_reduce
$LN44@yy_reduce:
; Line 65035
	mov	DWORD PTR _yygotominor$[esp+152], 29	; 0000001dH
; Line 65036
	jmp	$LN354@yy_reduce
$LN43@yy_reduce:
; Line 65038
	mov	DWORD PTR _yygotominor$[esp+152], 25	; 00000019H
; Line 65039
	jmp	$LN354@yy_reduce
$LN42@yy_reduce:
; Line 65041
	mov	DWORD PTR _yygotominor$[esp+152], 41	; 00000029H
; Line 65042
	jmp	$LN354@yy_reduce
$LN41@yy_reduce:
; Line 65045
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR _yygotominor$[esp+152], eax
	mov	DWORD PTR _yygotominor$[esp+156], ebx
; Line 65046
	jmp	$LN354@yy_reduce
$LN40@yy_reduce:
; Line 65048
	mov	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR _yygotominor$[esp+152], 100	; 00000064H
	mov	DWORD PTR _yygotominor$[esp+156], ecx
; Line 65049
	jmp	$LN354@yy_reduce
$LN37@yy_reduce:
; Line 65058
	mov	eax, DWORD PTR [ebp-32]
	cmp	eax, ebx
	je	SHORT $LN36@yy_reduce
; Line 65059
	mov	eax, DWORD PTR [eax+40]
	mov	ecx, DWORD PTR [ebp-12]
	mov	DWORD PTR [eax+36], ecx
; Line 65063
	mov	eax, DWORD PTR [ebp-32]
	mov	ecx, DWORD PTR [ebp-12]
	mov	DWORD PTR [eax+40], ecx
; Line 65064
	mov	edx, DWORD PTR [ebp-32]
	mov	DWORD PTR _yygotominor$[esp+152], edx
; Line 65066
	jmp	$LN354@yy_reduce
$LN36@yy_reduce:
; Line 65061
	mov	edx, DWORD PTR [ebp-12]
; Line 65063
	mov	eax, edx
	mov	ecx, edx
	mov	DWORD PTR [ebp-32], edx
	mov	DWORD PTR [eax+40], ecx
; Line 65064
	mov	edx, DWORD PTR [ebp-32]
	mov	DWORD PTR _yygotominor$[esp+152], edx
; Line 65066
	jmp	$LN354@yy_reduce
$LN33@yy_reduce:
; Line 65071
	mov	eax, DWORD PTR [ebp-72]
	mov	ecx, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp-12]
	push	eax
	push	ecx
	push	edx
	lea	eax, DWORD PTR [ebp-52]
	call	_sqlite3TriggerUpdateStep
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _yygotominor$[esp+152], eax
	jmp	$LN354@yy_reduce
$LN32@yy_reduce:
; Line 65074
	mov	eax, DWORD PTR [ebp-132]
	mov	ecx, DWORD PTR [ebp-12]
	mov	edx, DWORD PTR [ebp-72]
	push	eax
	push	ebx
	push	ecx
	push	edx
	lea	eax, DWORD PTR [ebp-92]
	call	_sqlite3TriggerInsertStep
	add	esp, 16					; 00000010H
	mov	DWORD PTR _yygotominor$[esp+152], eax
	jmp	$LN354@yy_reduce
$LN31@yy_reduce:
; Line 65077
	mov	eax, DWORD PTR [ebp-72]
	mov	ecx, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp-12]
	push	eax
	push	ecx
	push	ebx
	push	edx
	lea	eax, DWORD PTR [ebp-32]
	call	_sqlite3TriggerInsertStep
	add	esp, 16					; 00000010H
	mov	DWORD PTR _yygotominor$[esp+152], eax
	jmp	$LN354@yy_reduce
$LN30@yy_reduce:
; Line 65080
	mov	eax, DWORD PTR [ebp+8]
	push	eax
	lea	ebx, DWORD PTR [ebp-12]
	call	_sqlite3TriggerDeleteStep
	add	esp, 4
	mov	DWORD PTR _yygotominor$[esp+152], eax
	jmp	$LN354@yy_reduce
$LN29@yy_reduce:
; Line 65083
	mov	ebx, DWORD PTR [ebp+8]
	call	_sqlite3TriggerSelectStep
	mov	DWORD PTR _yygotominor$[esp+152], eax
	jmp	$LN354@yy_reduce
$LN28@yy_reduce:
; Line 65087
	push	ebx
	push	48					; 00000030H
	xor	eax, eax
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
; Line 65088
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	$LN354@yy_reduce
; Line 65090
	lea	ecx, DWORD PTR [ebp+8]
	lea	esi, DWORD PTR [ebp-52]
	mov	DWORD PTR [eax+40], 4
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN26@yy_reduce:
; Line 65096
	push	ebx
	lea	eax, DWORD PTR [ebp-12]
	push	48					; 00000030H
	xor	edi, edi
	call	_sqlite3Expr
	add	esp, 8
; Line 65097
	cmp	eax, ebx
	mov	DWORD PTR _yygotominor$[esp+152], eax
	je	$LN354@yy_reduce
; Line 65098
	mov	ecx, DWORD PTR [ebp-52]
	mov	DWORD PTR [eax+40], ecx
; Line 65099
	lea	ecx, DWORD PTR [ebp+8]
	lea	esi, DWORD PTR [ebp-92]
	call	_sqlite3ExprSpan
	jmp	$LN354@yy_reduce
$LN23@yy_reduce:
; Line 65107
	mov	DWORD PTR _yygotominor$[esp+152], 3
; Line 65108
	jmp	$LN354@yy_reduce
$LN22@yy_reduce:
; Line 65111
	mov	edx, DWORD PTR [ebp-12]
	mov	eax, DWORD PTR [ebp+8]
	push	edx
	push	eax
	push	edi
	call	_sqlite3DropTrigger
	add	esp, 12					; 0000000cH
; Line 65113
	jmp	$LN354@yy_reduce
$LN21@yy_reduce:
; Line 65116
	mov	ecx, DWORD PTR [ebp+8]
	mov	edx, DWORD PTR [ebp-12]
	mov	eax, DWORD PTR [ebp-52]
	push	ecx
	push	edx
	push	eax
	push	3
	push	OFFSET ??_C@_0O@GJLGHGMJ@sqlite_attach?$AA@
	push	24					; 00000018H
	mov	ecx, edi
	call	_codeAttach
	add	esp, 24					; 00000018H
; Line 65118
	jmp	$LN354@yy_reduce
$LN20@yy_reduce:
; Line 65121
	mov	eax, DWORD PTR [ebp+8]
	push	eax
	push	ebx
	push	ebx
	push	1
	push	OFFSET ??_C@_0O@PDAEIIFA@sqlite_detach?$AA@
	push	25					; 00000019H
	mov	ecx, edi
	call	_codeAttach
	add	esp, 24					; 00000018H
; Line 65123
	jmp	$LN354@yy_reduce
$LN17@yy_reduce:
; Line 65131
	mov	eax, DWORD PTR [edi]
	cmp	BYTE PTR [eax+68], bl
	jne	SHORT $LN347@yy_reduce
	lea	ecx, DWORD PTR [edi+8]
	push	ecx
	call	_sqlite3Init
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN347@yy_reduce
	add	DWORD PTR [edi+24], 1
	mov	DWORD PTR [edi+4], eax
	jmp	$LN354@yy_reduce
$LN347@yy_reduce:
	push	ebx
	mov	eax, edi
	call	_reindexDatabases
	add	esp, 4
; Line 65132
	jmp	$LN354@yy_reduce
$LN16@yy_reduce:
; Line 65134
	lea	edx, DWORD PTR [ebp+8]
	push	edx
	lea	eax, DWORD PTR [ebp-12]
	push	edi
	call	_sqlite3Reindex
	add	esp, 8
; Line 65135
	jmp	$LN354@yy_reduce
$LN15@yy_reduce:
; Line 65137
	push	ebx
	xor	eax, eax
	call	_sqlite3Analyze
	add	esp, 4
; Line 65138
	jmp	$LN354@yy_reduce
$LN14@yy_reduce:
; Line 65140
	lea	eax, DWORD PTR [ebp+8]
	push	eax
	lea	eax, DWORD PTR [ebp-12]
	call	_sqlite3Analyze
	add	esp, 4
; Line 65141
	jmp	$LN354@yy_reduce
$LN13@yy_reduce:
; Line 65144
	mov	edx, DWORD PTR [ebp-52]
	lea	ecx, DWORD PTR [ebp+8]
	push	ecx
	push	edx
	push	edi
	call	_sqlite3AlterRenameTable
	add	esp, 12					; 0000000cH
; Line 65146
	jmp	$LN354@yy_reduce
$LN12@yy_reduce:
; Line 65149
	lea	eax, DWORD PTR [ebp+8]
	push	eax
	push	edi
	call	_sqlite3AlterFinishAddColumn
	add	esp, 8
; Line 65151
	jmp	SHORT $LN354@yy_reduce
$LN11@yy_reduce:
; Line 65154
	mov	ecx, DWORD PTR [ebp+8]
	push	ecx
	push	edi
	call	_sqlite3AlterBeginAddColumn
	add	esp, 8
; Line 65156
	jmp	SHORT $LN354@yy_reduce
$LN10@yy_reduce:
; Line 65158
	push	ebx
	push	edi
	call	_sqlite3VtabFinishParse
	add	esp, 8
; Line 65159
	jmp	SHORT $LN354@yy_reduce
$LN9@yy_reduce:
; Line 65161
	lea	edx, DWORD PTR [ebp+8]
	push	edx
	push	edi
	call	_sqlite3VtabFinishParse
	add	esp, 8
; Line 65162
	jmp	SHORT $LN354@yy_reduce
$LN8@yy_reduce:
; Line 65165
	lea	eax, DWORD PTR [ebp+8]
	push	eax
	lea	ecx, DWORD PTR [ebp-32]
	push	ecx
	lea	edx, DWORD PTR [ebp-52]
	push	edx
	mov	eax, edi
	call	_sqlite3VtabBeginParse
	add	esp, 12					; 0000000cH
; Line 65167
	jmp	SHORT $LN354@yy_reduce
$LN7@yy_reduce:
; Line 65169
	mov	ebx, edi
	call	_addArgumentToVtab
	and	DWORD PTR [edi+184], 1
	mov	DWORD PTR [edi+180], 0
; Line 65170
	jmp	SHORT $LN354@yy_reduce
$LN6@yy_reduce:
; Line 65175
	lea	ecx, DWORD PTR [ebp+8]
	mov	eax, edi
	call	_sqlite3VtabArgExtend
$LN354@yy_reduce:
; Line 65178
	mov	eax, DWORD PTR _yyruleno$[esp+148]
	movzx	ecx, BYTE PTR _yyRuleInfo[eax*2]
; Line 65179
	movzx	eax, BYTE PTR _yyRuleInfo[eax*2+1]
; Line 65180
	mov	esi, DWORD PTR _yypParser$[esp+148]
	sub	DWORD PTR [esi], eax
; Line 65181
	lea	edx, DWORD PTR [eax+eax*4]
	add	edx, edx
	add	edx, edx
	sub	ebp, edx
	mov	edx, DWORD PTR [ebp]
	cmp	edx, 288				; 00000120H
	jg	SHORT $LN338@yy_reduce
	movsx	edi, WORD PTR _yy_reduce_ofst[edx*2]
	cmp	edi, -165				; ffffff5bH
	je	SHORT $LN338@yy_reduce
	cmp	cl, 248					; 000000f8H
	je	$LN1@yy_reduce
	movzx	ebx, cl
	add	edi, ebx
	cmp	edi, 1348				; 00000544H
	ja	SHORT $LN338@yy_reduce
	cmp	BYTE PTR _yy_lookahead[edi], cl
	jne	SHORT $LN338@yy_reduce
	movzx	edx, WORD PTR _yy_action[edi*2]
	jmp	SHORT $LN334@yy_reduce
$LN338@yy_reduce:
	movzx	edx, WORD PTR _yy_default[edx*2]
$LN334@yy_reduce:
; Line 65182
	cmp	edx, 586				; 0000024aH
	jge	$LN5@yy_reduce
; Line 65188
	test	eax, eax
; Line 65189
	mov	eax, DWORD PTR [esi]
	je	SHORT $LN4@yy_reduce
	add	eax, 1
	mov	DWORD PTR [esi], eax
; Line 65193
	mov	eax, DWORD PTR _yygotominor$[esp+152]
	mov	DWORD PTR [ebp+24], ecx
	mov	ecx, DWORD PTR _yygotominor$[esp+156]
	pop	edi
	mov	DWORD PTR [ebp+20], edx
	mov	edx, DWORD PTR _yygotominor$[esp+156]
	mov	DWORD PTR [ebp+28], eax
	mov	DWORD PTR [ebp+32], ecx
	pop	esi
	mov	DWORD PTR [ebp+36], edx
	pop	ebp
	pop	ebx
; Line 65202
	add	esp, 136				; 00000088H
	ret	0
$LN4@yy_reduce:
; Line 65197
	add	eax, 1
	cmp	eax, 100				; 00000064H
	mov	DWORD PTR [esi], eax
	jl	SHORT $LN342@yy_reduce
	call	_yyStackOverflow
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65202
	add	esp, 136				; 00000088H
	ret	0
; Line 65197
$LN342@yy_reduce:
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [esi+eax*4+12]
	pop	edi
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _yygotominor$[esp+148]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _yygotominor$[esp+156]
	pop	esi
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _yygotominor$[esp+148]
	pop	ebp
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], ecx
	pop	ebx
; Line 65202
	add	esp, 136				; 00000088H
	ret	0
$LN5@yy_reduce:
; Line 65199
	cmp	edx, 898				; 00000382H
	jne	SHORT $LN1@yy_reduce
; Line 65200
	call	_yy_accept
$LN1@yy_reduce:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65202
	add	esp, 136				; 00000088H
	ret	0
	npad	3
$LN380@yy_reduce:
	DD	$LN230@yy_reduce
	DD	$LN229@yy_reduce
	DD	$LN228@yy_reduce
	DD	$LN227@yy_reduce
	DD	$LN226@yy_reduce
	DD	$LN225@yy_reduce
	DD	$LN224@yy_reduce
	DD	$LN223@yy_reduce
	DD	$LN222@yy_reduce
	DD	$LN221@yy_reduce
	DD	$LN220@yy_reduce
	DD	$LN219@yy_reduce
	DD	$LN218@yy_reduce
	DD	$LN217@yy_reduce
	DD	$LN216@yy_reduce
	DD	$LN215@yy_reduce
	DD	$LN214@yy_reduce
	DD	$LN213@yy_reduce
	DD	$LN212@yy_reduce
	DD	$LN211@yy_reduce
	DD	$LN210@yy_reduce
	DD	$LN209@yy_reduce
	DD	$LN208@yy_reduce
	DD	$LN207@yy_reduce
	DD	$LN206@yy_reduce
	DD	$LN205@yy_reduce
	DD	$LN204@yy_reduce
	DD	$LN203@yy_reduce
	DD	$LN202@yy_reduce
	DD	$LN201@yy_reduce
	DD	$LN200@yy_reduce
	DD	$LN199@yy_reduce
	DD	$LN198@yy_reduce
	DD	$LN197@yy_reduce
	DD	$LN196@yy_reduce
	DD	$LN195@yy_reduce
	DD	$LN194@yy_reduce
	DD	$LN193@yy_reduce
	DD	$LN192@yy_reduce
	DD	$LN190@yy_reduce
	DD	$LN189@yy_reduce
	DD	$LN188@yy_reduce
	DD	$LN187@yy_reduce
	DD	$LN186@yy_reduce
	DD	$LN185@yy_reduce
	DD	$LN184@yy_reduce
	DD	$LN183@yy_reduce
	DD	$LN182@yy_reduce
	DD	$LN181@yy_reduce
	DD	$LN180@yy_reduce
	DD	$LN179@yy_reduce
	DD	$LN178@yy_reduce
	DD	$LN177@yy_reduce
	DD	$LN176@yy_reduce
	DD	$LN175@yy_reduce
	DD	$LN174@yy_reduce
	DD	$LN172@yy_reduce
	DD	$LN169@yy_reduce
	DD	$LN168@yy_reduce
	DD	$LN167@yy_reduce
	DD	$LN165@yy_reduce
	DD	$LN164@yy_reduce
	DD	$LN163@yy_reduce
	DD	$LN162@yy_reduce
	DD	$LN161@yy_reduce
	DD	$LN160@yy_reduce
	DD	$LN159@yy_reduce
	DD	$LN156@yy_reduce
	DD	$LN155@yy_reduce
	DD	$LN154@yy_reduce
	DD	$LN153@yy_reduce
	DD	$LN152@yy_reduce
	DD	$LN150@yy_reduce
	DD	$LN149@yy_reduce
	DD	$LN148@yy_reduce
	DD	$LN143@yy_reduce
	DD	$LN142@yy_reduce
	DD	$LN140@yy_reduce
	DD	$LN135@yy_reduce
	DD	$LN134@yy_reduce
	DD	$LN133@yy_reduce
	DD	$LN132@yy_reduce
	DD	$LN131@yy_reduce
	DD	$LN130@yy_reduce
	DD	$LN129@yy_reduce
	DD	$LN128@yy_reduce
	DD	$LN127@yy_reduce
	DD	$LN126@yy_reduce
	DD	$LN125@yy_reduce
	DD	$LN124@yy_reduce
	DD	$LN123@yy_reduce
	DD	$LN122@yy_reduce
	DD	$LN121@yy_reduce
	DD	$LN120@yy_reduce
	DD	$LN119@yy_reduce
	DD	$LN118@yy_reduce
	DD	$LN117@yy_reduce
	DD	$LN116@yy_reduce
	DD	$LN115@yy_reduce
	DD	$LN114@yy_reduce
	DD	$LN113@yy_reduce
	DD	$LN112@yy_reduce
	DD	$LN109@yy_reduce
	DD	$LN108@yy_reduce
	DD	$LN106@yy_reduce
	DD	$LN105@yy_reduce
	DD	$LN104@yy_reduce
	DD	$LN103@yy_reduce
	DD	$LN99@yy_reduce
	DD	$LN98@yy_reduce
	DD	$LN97@yy_reduce
	DD	$LN96@yy_reduce
	DD	$LN95@yy_reduce
	DD	$LN94@yy_reduce
	DD	$LN93@yy_reduce
	DD	$LN92@yy_reduce
	DD	$LN88@yy_reduce
	DD	$LN84@yy_reduce
	DD	$LN81@yy_reduce
	DD	$LN77@yy_reduce
	DD	$LN73@yy_reduce
	DD	$LN70@yy_reduce
	DD	$LN67@yy_reduce
	DD	$LN66@yy_reduce
	DD	$LN65@yy_reduce
	DD	$LN64@yy_reduce
	DD	$LN62@yy_reduce
	DD	$LN58@yy_reduce
	DD	$LN53@yy_reduce
	DD	$LN52@yy_reduce
	DD	$LN51@yy_reduce
	DD	$LN49@yy_reduce
	DD	$LN48@yy_reduce
	DD	$LN47@yy_reduce
	DD	$LN46@yy_reduce
	DD	$LN45@yy_reduce
	DD	$LN44@yy_reduce
	DD	$LN43@yy_reduce
	DD	$LN42@yy_reduce
	DD	$LN41@yy_reduce
	DD	$LN40@yy_reduce
	DD	$LN37@yy_reduce
	DD	$LN33@yy_reduce
	DD	$LN32@yy_reduce
	DD	$LN31@yy_reduce
	DD	$LN30@yy_reduce
	DD	$LN29@yy_reduce
	DD	$LN28@yy_reduce
	DD	$LN26@yy_reduce
	DD	$LN23@yy_reduce
	DD	$LN22@yy_reduce
	DD	$LN21@yy_reduce
	DD	$LN20@yy_reduce
	DD	$LN17@yy_reduce
	DD	$LN16@yy_reduce
	DD	$LN15@yy_reduce
	DD	$LN14@yy_reduce
	DD	$LN13@yy_reduce
	DD	$LN12@yy_reduce
	DD	$LN11@yy_reduce
	DD	$LN10@yy_reduce
	DD	$LN9@yy_reduce
	DD	$LN8@yy_reduce
	DD	$LN7@yy_reduce
	DD	$LN6@yy_reduce
	DD	$LN354@yy_reduce
$LN350@yy_reduce:
	DB	0
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	1
	DB	2
	DB	3
	DB	4
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	5
	DB	6
	DB	6
	DB	6
	DB	7
	DB	7
	DB	8
	DB	-91					; ffffffa5H
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	-91					; ffffffa5H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	18					; 00000012H
	DB	21					; 00000015H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	22					; 00000016H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	-91					; ffffffa5H
	DB	26					; 0000001aH
	DB	27					; 0000001bH
	DB	28					; 0000001cH
	DB	29					; 0000001dH
	DB	30					; 0000001eH
	DB	31					; 0000001fH
	DB	32					; 00000020H
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	33					; 00000021H
	DB	34					; 00000022H
	DB	35					; 00000023H
	DB	36					; 00000024H
	DB	37					; 00000025H
	DB	38					; 00000026H
	DB	5
	DB	39					; 00000027H
	DB	40					; 00000028H
	DB	41					; 00000029H
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	43					; 0000002bH
	DB	44					; 0000002cH
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	45					; 0000002dH
	DB	46					; 0000002eH
	DB	47					; 0000002fH
	DB	48					; 00000030H
	DB	10					; 0000000aH
	DB	42					; 0000002aH
	DB	49					; 00000031H
	DB	42					; 0000002aH
	DB	49					; 00000031H
	DB	42					; 0000002aH
	DB	42					; 0000002aH
	DB	50					; 00000032H
	DB	51					; 00000033H
	DB	52					; 00000034H
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	53					; 00000035H
	DB	54					; 00000036H
	DB	55					; 00000037H
	DB	42					; 0000002aH
	DB	56					; 00000038H
	DB	6
	DB	57					; 00000039H
	DB	6
	DB	58					; 0000003aH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	59					; 0000003bH
	DB	10					; 0000000aH
	DB	60					; 0000003cH
	DB	61					; 0000003dH
	DB	62					; 0000003eH
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	63					; 0000003fH
	DB	64					; 00000040H
	DB	65					; 00000041H
	DB	66					; 00000042H
	DB	10					; 0000000aH
	DB	67					; 00000043H
	DB	68					; 00000044H
	DB	42					; 0000002aH
	DB	69					; 00000045H
	DB	70					; 00000046H
	DB	18					; 00000012H
	DB	71					; 00000047H
	DB	11					; 0000000bH
	DB	72					; 00000048H
	DB	73					; 00000049H
	DB	74					; 0000004aH
	DB	42					; 0000002aH
	DB	10					; 0000000aH
	DB	59					; 0000003bH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	75					; 0000004bH
	DB	76					; 0000004cH
	DB	77					; 0000004dH
	DB	42					; 0000002aH
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	75					; 0000004bH
	DB	10					; 0000000aH
	DB	42					; 0000002aH
	DB	35					; 00000023H
	DB	78					; 0000004eH
	DB	79					; 0000004fH
	DB	80					; 00000050H
	DB	81					; 00000051H
	DB	10					; 0000000aH
	DB	42					; 0000002aH
	DB	82					; 00000052H
	DB	83					; 00000053H
	DB	84					; 00000054H
	DB	85					; 00000055H
	DB	86					; 00000056H
	DB	87					; 00000057H
	DB	42					; 0000002aH
	DB	51					; 00000033H
	DB	88					; 00000058H
	DB	89					; 00000059H
	DB	10					; 0000000aH
	DB	59					; 0000003bH
	DB	90					; 0000005aH
	DB	91					; 0000005bH
	DB	42					; 0000002aH
	DB	92					; 0000005cH
	DB	93					; 0000005dH
	DB	94					; 0000005eH
	DB	94					; 0000005eH
	DB	95					; 0000005fH
	DB	96					; 00000060H
	DB	93					; 0000005dH
	DB	93					; 0000005dH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	106					; 0000006aH
	DB	105					; 00000069H
	DB	106					; 0000006aH
	DB	42					; 0000002aH
	DB	10					; 0000000aH
	DB	107					; 0000006bH
	DB	108					; 0000006cH
	DB	109					; 0000006dH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	113					; 00000071H
	DB	114					; 00000072H
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	115					; 00000073H
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	118					; 00000076H
	DB	119					; 00000077H
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	122					; 0000007aH
	DB	123					; 0000007bH
	DB	42					; 0000002aH
	DB	10					; 0000000aH
	DB	42					; 0000002aH
	DB	10					; 0000000aH
	DB	88					; 00000058H
	DB	89					; 00000059H
	DB	42					; 0000002aH
	DB	10					; 0000000aH
	DB	124					; 0000007cH
	DB	125					; 0000007dH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	59					; 0000003bH
	DB	126					; 0000007eH
	DB	127					; 0000007fH
	DB	18					; 00000012H
	DB	70					; 00000046H
	DB	18					; 00000012H
	DB	-128					; ffffff80H
	DB	-127					; ffffff81H
	DB	-127					; ffffff81H
	DB	-126					; ffffff82H
	DB	-126					; ffffff82H
	DB	-125					; ffffff83H
	DB	-124					; ffffff84H
	DB	-123					; ffffff85H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	18					; 00000012H
	DB	16					; 00000010H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-122					; ffffff86H
	DB	-121					; ffffff87H
	DB	-120					; ffffff88H
	DB	-119					; ffffff89H
	DB	-118					; ffffff8aH
	DB	-120					; ffffff88H
	DB	-117					; ffffff8bH
	DB	-117					; ffffff8bH
	DB	-116					; ffffff8cH
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	10					; 0000000aH
	DB	75					; 0000004bH
	DB	-115					; ffffff8dH
	DB	10					; 0000000aH
	DB	-114					; ffffff8eH
	DB	-113					; ffffff8fH
	DB	-112					; ffffff90H
	DB	-111					; ffffff91H
	DB	-110					; ffffff92H
	DB	-109					; ffffff93H
	DB	-108					; ffffff94H
	DB	11					; 0000000bH
	DB	125					; 0000007dH
	DB	-107					; ffffff95H
	DB	-106					; ffffff96H
	DB	-105					; ffffff97H
	DB	-104					; ffffff98H
	DB	10					; 0000000aH
	DB	42					; 0000002aH
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-103					; ffffff99H
	DB	-102					; ffffff9aH
	DB	-101					; ffffff9bH
	DB	-100					; ffffff9cH
	DB	-99					; ffffff9dH
	DB	-98					; ffffff9eH
	DB	-97					; ffffff9fH
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-96					; ffffffa0H
	DB	-95					; ffffffa1H
	DB	-94					; ffffffa2H
	DB	-91					; ffffffa5H
	DB	-91					; ffffffa5H
	DB	-93					; ffffffa3H
	DB	-91					; ffffffa5H
	DB	-92					; ffffffa4H
	DB	-92					; ffffffa4H
	DB	-92					; ffffffa4H
	DB	-91					; ffffffa5H
	DB	-92					; ffffffa4H
_yy_reduce ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Parser
_TEXT	SEGMENT
_yyendofinput$ = -40					; size = 4
_yyminorunion$ = -36					; size = 12
$T146484 = -24						; size = 12
_u2$102314 = -12					; size = 12
_yyminor$ = 8						; size = 8
_sqlite3Parser PROC					; COMDAT
; _yyp$ = ecx
; _yymajor$ = eax
; _pParse$ = edx
; Line 65286
	sub	esp, 40					; 00000028H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
; Line 65290
	xor	ebp, ebp
; Line 65295
	cmp	DWORD PTR [esi], ebp
	push	edi
	mov	ebx, eax
	jge	SHORT $LN48@sqlite3Par@3
; Line 65303
	mov	DWORD PTR [esi], ebp
; Line 65304
	mov	DWORD PTR [esi+4], -1
; Line 65305
	mov	DWORD PTR [esi+12], ebp
; Line 65306
	mov	DWORD PTR [esi+16], ebp
$LN48@sqlite3Par@3:
; Line 65308
	mov	edi, DWORD PTR _yyminor$[esp+52]
	mov	eax, DWORD PTR _yyminor$[esp+56]
; Line 65309
	xor	ecx, ecx
	cmp	ebx, ebp
	sete	cl
	mov	DWORD PTR _yyminorunion$[esp+56], edi
	mov	DWORD PTR _yyminorunion$[esp+60], eax
; Line 65310
	mov	DWORD PTR [esi+8], edx
	mov	DWORD PTR _yyendofinput$[esp+56], ecx
	npad	2
$LL22@sqlite3Par@3:
; Line 65319
	mov	cl, bl
	mov	edx, esi
	call	_yy_find_shift_action
; Line 65320
	cmp	eax, 586				; 0000024aH
	jge	SHORT $LN19@sqlite3Par@3
; Line 65321
	add	DWORD PTR [esi], 1
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, 100				; 00000064H
	jl	SHORT $LN26@sqlite3Par@3
	call	_yyStackOverflow
	jmp	SHORT $LN27@sqlite3Par@3
$LN26@sqlite3Par@3:
	mov	edx, DWORD PTR _yyminorunion$[esp+60]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [esi+ecx*4+12]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _yyminorunion$[esp+64]
	mov	DWORD PTR [ecx+8], edi
	mov	DWORD PTR [ecx+12], edx
	mov	DWORD PTR [ecx+4], ebx
	mov	DWORD PTR [ecx+16], eax
$LN27@sqlite3Par@3:
; Line 65322
	add	DWORD PTR [esi+4], -1
; Line 65323
	cmp	DWORD PTR _yyendofinput$[esp+56], 0
	je	$LN1@sqlite3Par@3
	cmp	DWORD PTR [esi], 0
	jl	$LN1@sqlite3Par@3
; Line 65324
	xor	ebx, ebx
; Line 65325
	jmp	$LN47@sqlite3Par@3
$LN19@sqlite3Par@3:
; Line 65328
	cmp	eax, 897				; 00000381H
	jge	SHORT $LN51@sqlite3Par@3
; Line 65329
	add	eax, -586				; fffffdb6H
	push	eax
	push	esi
	call	_yy_reduce
	add	esp, 8
	jmp	$LN21@sqlite3Par@3
$LN51@sqlite3Par@3:
; Line 65330
	jne	$LN13@sqlite3Par@3
; Line 65357
	cmp	DWORD PTR [esi+4], 0
	jge	SHORT $LN32@sqlite3Par@3
; Line 65358
	mov	ecx, DWORD PTR _yyminorunion$[esp+60]
	mov	edx, DWORD PTR _yyminorunion$[esp+64]
	mov	DWORD PTR $T146484[esp+56], edi
	mov	edi, DWORD PTR [esi+8]
	mov	DWORD PTR $T146484[esp+60], ecx
	mov	DWORD PTR $T146484[esp+64], edx
	cmp	BYTE PTR [edi+20], 0
	jne	SHORT $LN31@sqlite3Par@3
	mov	eax, DWORD PTR _yyminor$[esp+52]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN30@sqlite3Par@3
	lea	ecx, DWORD PTR $T146484[esp+56]
	push	ecx
	push	OFFSET ??_C@_0BI@CBJKLAIG@near?5?$CC?$CFT?$CC?3?5syntax?5error?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 8
	jmp	SHORT $LN29@sqlite3Par@3
$LN30@sqlite3Par@3:
	push	OFFSET ??_C@_0BJ@CFIKCMLG@incomplete?5SQL?5statement?$AA@
	call	_sqlite3ErrorMsg
	add	esp, 4
$LN29@sqlite3Par@3:
	mov	BYTE PTR [edi+20], 1
$LN31@sqlite3Par@3:
	mov	DWORD PTR [esi+8], edi
$LN32@sqlite3Par@3:
; Line 65360
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR [eax+eax*4]
; Line 65361
	cmp	DWORD PTR [esi+edx*4+16], 138		; 0000008aH
	je	$LN10@sqlite3Par@3
	test	ebp, ebp
	jne	$LN10@sqlite3Par@3
; Line 65377
	test	eax, eax
	jl	$LN50@sqlite3Par@3
$LL8@sqlite3Par@3:
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+edx*4]
	mov	ecx, DWORD PTR [esi+eax*4+12]
	cmp	ecx, 288				; 00000120H
	lea	edi, DWORD PTR [esi+eax*4+12]
	jg	SHORT $LN38@sqlite3Par@3
	movsx	eax, WORD PTR _yy_reduce_ofst[ecx*2]
	cmp	eax, -165				; ffffff5bH
	je	SHORT $LN38@sqlite3Par@3
	add	eax, 138				; 0000008aH
	cmp	eax, 1348				; 00000544H
	ja	SHORT $LN38@sqlite3Par@3
	cmp	BYTE PTR _yy_lookahead[eax], 138	; 0000008aH
	jne	SHORT $LN38@sqlite3Par@3
	movzx	ebp, WORD PTR _yy_action[eax*2]
	jmp	SHORT $LN34@sqlite3Par@3
$LN38@sqlite3Par@3:
	movzx	ebp, WORD PTR _yy_default[ecx*2]
$LN34@sqlite3Par@3:
	cmp	ebp, 586				; 0000024aH
	jl	SHORT $LN7@sqlite3Par@3
; Line 65378
	test	edx, edx
	jl	SHORT $LN43@sqlite3Par@3
	mov	al, BYTE PTR [edi+4]
	lea	ecx, DWORD PTR [edi+8]
	call	_yy_destructor
	add	DWORD PTR [esi], -1
$LN43@sqlite3Par@3:
; Line 65377
	cmp	DWORD PTR [esi], 0
	jge	SHORT $LL8@sqlite3Par@3
$LN7@sqlite3Par@3:
; Line 65380
	cmp	DWORD PTR [esi], 0
	jl	SHORT $LN50@sqlite3Par@3
	test	ebx, ebx
	je	SHORT $LN50@sqlite3Par@3
; Line 65387
	push	138					; 0000008aH
	push	ebp
	lea	ecx, DWORD PTR _u2$102314[esp+64]
	mov	eax, esi
	mov	DWORD PTR _u2$102314[esp+64], 0
	call	_yy_shift
	add	esp, 8
	jmp	SHORT $LN3@sqlite3Par@3
$LN50@sqlite3Par@3:
; Line 65381
	lea	ecx, DWORD PTR _yyminorunion$[esp+56]
	mov	al, bl
	call	_yy_destructor
; Line 65382
	call	_yy_parse_failed
; Line 65383
	jmp	SHORT $LN52@sqlite3Par@3
$LN10@sqlite3Par@3:
; Line 65368
	lea	ecx, DWORD PTR _yyminorunion$[esp+56]
	mov	al, bl
	call	_yy_destructor
$LN52@sqlite3Par@3:
; Line 65369
	mov	ebx, 248				; 000000f8H
$LN3@sqlite3Par@3:
; Line 65391
	mov	edi, DWORD PTR _yyminorunion$[esp+56]
	mov	DWORD PTR [esi+4], 3
	mov	ebp, 1
$LN21@sqlite3Par@3:
; Line 65416
	cmp	ebx, 248				; 000000f8H
	je	SHORT $LN1@sqlite3Par@3
$LN47@sqlite3Par@3:
	cmp	DWORD PTR [esi], 0
	jge	$LL22@sqlite3Par@3
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65418
	add	esp, 40					; 00000028H
	ret	0
$LN13@sqlite3Par@3:
; Line 65413
	call	_yy_accept
$LN1@sqlite3Par@3:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 65418
	add	esp, 40					; 00000028H
	ret	0
_sqlite3Parser ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@EMNEDDKJ@unrecognized?5token?3?5?$CC?$CFT?$CC?$AA@ ; `string'
PUBLIC	??_C@_09NCAJIFEE@interrupt?$AA@			; `string'
;	COMDAT ??_C@_0BJ@EMNEDDKJ@unrecognized?5token?3?5?$CC?$CFT?$CC?$AA@
CONST	SEGMENT
??_C@_0BJ@EMNEDDKJ@unrecognized?5token?3?5?$CC?$CFT?$CC?$AA@ DB 'unrecogn'
	DB	'ized token: "%T"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09NCAJIFEE@interrupt?$AA@
CONST	SEGMENT
??_C@_09NCAJIFEE@interrupt?$AA@ DB 'interrupt', 00H	; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3RunParser
_TEXT	SEGMENT
_nErr$ = -16						; size = 4
_lastTokenParsed$ = -12					; size = 4
_tokenType$ = -8					; size = 4
_db$ = -4						; size = 4
_pParser$146521 = 8					; size = 4
_pParse$ = 8						; size = 4
_zSql$ = 12						; size = 4
_pzErrMsg$ = 16						; size = 4
_sqlite3RunParser PROC					; COMDAT
; Line 65923
	sub	esp, 16					; 00000010H
	push	ebp
; Line 65929
	mov	ebp, DWORD PTR _pParse$[esp+16]
	mov	eax, DWORD PTR [ebp]
	push	esi
	xor	esi, esi
; Line 65934
	cmp	DWORD PTR [eax+84], esi
	push	edi
	mov	DWORD PTR _nErr$[esp+28], esi
	mov	DWORD PTR _lastTokenParsed$[esp+28], -1
	mov	DWORD PTR _db$[esp+28], eax
	jne	SHORT $LN28@sqlite3Run
; Line 65935
	mov	DWORD PTR [eax+152], esi
$LN28@sqlite3Run:
; Line 65939
	mov	edi, 2012				; 000007dcH
	mov	DWORD PTR [ebp+4], esi
	call	_sqlite3Malloc
	cmp	eax, esi
	mov	DWORD PTR _pParser$146521[esp+24], eax
	je	$LN64@sqlite3Run
	push	ebx
; Line 65950
	mov	ebx, DWORD PTR _zSql$[esp+28]
	mov	DWORD PTR [eax], -1
	mov	DWORD PTR [ebp+156], ebx
	mov	DWORD PTR [ebp+160], ebx
	npad	6
$LL26@sqlite3Run:
; Line 65951
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN24@sqlite3Run
	cmp	DWORD PTR _inMutex, 0
	jg	$abort_parse$102549
$LN24@sqlite3Run:
	cmp	BYTE PTR [esi+ebx], 0
	lea	eax, DWORD PTR [esi+ebx]
	je	$abort_parse$102549
; Line 65955
	lea	ecx, DWORD PTR _tokenType$[esp+32]
	push	ecx
	mov	DWORD PTR [ebp+148], eax
	call	_getToken
	mov	ecx, DWORD PTR [ebp+152]
	and	ecx, 1
	lea	edx, DWORD PTR [eax+eax]
	or	ecx, edx
	mov	DWORD PTR [ebp+152], ecx
; Line 65956
	shr	ecx, 1
	add	esi, ecx
	add	esp, 4
; Line 65957
	cmp	esi, 1000000				; 000f4240H
	jg	$LN61@sqlite3Run
; Line 65961
	mov	edi, DWORD PTR _tokenType$[esp+32]
	lea	eax, DWORD PTR [edi-1]
	cmp	eax, 146				; 00000092H
	ja	SHORT $LN15@sqlite3Run
	movzx	eax, BYTE PTR $LN65@sqlite3Run[eax]
	jmp	DWORD PTR $LN73@sqlite3Run[eax*4]
$LN64@sqlite3Run:
	pop	edi
	pop	esi
; Line 65941
	mov	eax, 7
	pop	ebp
; Line 66044
	add	esp, 16					; 00000010H
	ret	0
$LN20@sqlite3Run:
; Line 65964
	mov	ecx, DWORD PTR _db$[esp+32]
	cmp	DWORD PTR [ecx+152], 0
	je	$LL26@sqlite3Run
; Line 65966
	mov	edx, DWORD PTR _pzErrMsg$[esp+28]
	push	0
	push	OFFSET ??_C@_09NCAJIFEE@interrupt?$AA@
	push	edx
	mov	DWORD PTR [ebp+4], 9
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
; Line 65967
	jmp	SHORT $abort_parse$102549
$LN16@sqlite3Run:
; Line 65981
	lea	edx, DWORD PTR [esi+ebx]
	mov	DWORD PTR [ebp+160], edx
$LN15@sqlite3Run:
; Line 65985
	mov	eax, DWORD PTR [ebp+152]
	mov	ecx, DWORD PTR [ebp+148]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _pParser$146521[esp+36]
	mov	edx, ebp
	mov	eax, edi
	call	_sqlite3Parser
	add	esp, 8
; Line 65987
	cmp	DWORD PTR [ebp+4], 0
	mov	DWORD PTR _lastTokenParsed$[esp+32], edi
	je	$LL26@sqlite3Run
; Line 65993
	jmp	SHORT $abort_parse$102549
$LN61@sqlite3Run:
; Line 65958
	mov	DWORD PTR [ebp+4], 18			; 00000012H
; Line 65959
	jmp	SHORT $abort_parse$102549
$LN18@sqlite3Run:
; Line 65972
	mov	edi, DWORD PTR _pzErrMsg$[esp+28]
	test	edi, edi
	je	SHORT $LN17@sqlite3Run
; Line 65973
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN41@sqlite3Run
	push	eax
	call	_free
	add	esp, 4
$LN41@sqlite3Run:
; Line 65975
	lea	eax, DWORD PTR [ebp+148]
	push	eax
	push	OFFSET ??_C@_0BJ@EMNEDDKJ@unrecognized?5token?3?5?$CC?$CFT?$CC?$AA@
	call	_sqlite3MPrintf
	add	esp, 8
	mov	DWORD PTR [edi], eax
$LN17@sqlite3Run:
; Line 65977
	mov	DWORD PTR _nErr$[esp+32], 1
$abort_parse$102549:
; Line 65995
	add	esi, ebx
	cmp	BYTE PTR [esi], 0
	pop	ebx
	jne	SHORT $LN70@sqlite3Run
	xor	edi, edi
	cmp	DWORD PTR _nErr$[esp+28], edi
	jne	SHORT $LN71@sqlite3Run
	cmp	DWORD PTR [ebp+4], edi
	jne	SHORT $LN71@sqlite3Run
; Line 65996
	cmp	DWORD PTR _lastTokenParsed$[esp+28], 1
	je	SHORT $LN69@sqlite3Run
; Line 65997
	mov	ecx, DWORD PTR [ebp+152]
	mov	edx, DWORD PTR [ebp+148]
	push	ecx
	mov	ecx, DWORD PTR _pParser$146521[esp+28]
	push	edx
	mov	edx, ebp
	lea	eax, DWORD PTR [edi+1]
	call	_sqlite3Parser
	add	esp, 8
; Line 65998
	mov	DWORD PTR [ebp+160], esi
$LN69@sqlite3Run:
; Line 66000
	mov	eax, DWORD PTR [ebp+152]
	mov	ecx, DWORD PTR [ebp+148]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _pParser$146521[esp+32]
	mov	edx, ebp
	xor	eax, eax
	call	_sqlite3Parser
	add	esp, 8
	jmp	SHORT $LN71@sqlite3Run
$LN70@sqlite3Run:
	xor	edi, edi
$LN71@sqlite3Run:
; Line 66002
	mov	esi, DWORD PTR _pParser$146521[esp+24]
	push	OFFSET _sqlite3FreeX
	call	_sqlite3ParserFree
	add	esp, 4
; Line 66003
	cmp	DWORD PTR _sqlite3_mallocHasFailed, edi
	je	SHORT $LN11@sqlite3Run
	cmp	DWORD PTR _inMutex, edi
	jle	SHORT $LN11@sqlite3Run
; Line 66004
	mov	DWORD PTR [ebp+4], 7
$LN11@sqlite3Run:
; Line 66006
	mov	eax, DWORD PTR [ebp+4]
	cmp	eax, edi
	je	SHORT $LN10@sqlite3Run
	cmp	eax, 101				; 00000065H
	je	SHORT $LN10@sqlite3Run
	cmp	DWORD PTR [ebp+8], edi
	lea	ecx, DWORD PTR [ebp+8]
	jne	SHORT $LN10@sqlite3Run
; Line 66007
	push	edi
	call	_sqlite3ErrStr
	push	eax
	push	ecx
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
$LN10@sqlite3Run:
; Line 66009
	mov	eax, DWORD PTR [ebp+8]
	cmp	eax, edi
	je	SHORT $LN68@sqlite3Run
; Line 66010
	mov	ecx, DWORD PTR _pzErrMsg$[esp+24]
	cmp	ecx, edi
	je	SHORT $LN8@sqlite3Run
	cmp	DWORD PTR [ecx], edi
	jne	SHORT $LN8@sqlite3Run
; Line 66011
	mov	DWORD PTR [ecx], eax
; Line 66012
	jmp	SHORT $LN48@sqlite3Run
$LN8@sqlite3Run:
; Line 66013
	push	eax
	call	_free
	add	esp, 4
$LN48@sqlite3Run:
; Line 66016
	cmp	DWORD PTR _nErr$[esp+28], edi
	mov	DWORD PTR [ebp+8], edi
	jne	SHORT $LN68@sqlite3Run
	mov	DWORD PTR _nErr$[esp+28], 1
$LN68@sqlite3Run:
; Line 66018
	mov	esi, DWORD PTR [ebp+12]
	cmp	esi, edi
	je	SHORT $LN5@sqlite3Run
	cmp	DWORD PTR [ebp+24], edi
	jle	SHORT $LN5@sqlite3Run
	cmp	BYTE PTR [ebp+19], 0
	jne	SHORT $LN4@sqlite3Run
; Line 66019
	call	_sqlite3VdbeDelete
; Line 66020
	mov	DWORD PTR [ebp+12], edi
$LN5@sqlite3Run:
; Line 66023
	cmp	BYTE PTR [ebp+19], 0
	jne	SHORT $LN4@sqlite3Run
; Line 66024
	mov	eax, DWORD PTR [ebp+108]
	cmp	eax, edi
	je	SHORT $LN53@sqlite3Run
	push	eax
	call	_free
	add	esp, 4
$LN53@sqlite3Run:
; Line 66025
	mov	DWORD PTR [ebp+108], edi
; Line 66026
	mov	DWORD PTR [ebp+104], edi
$LN4@sqlite3Run:
; Line 66030
	cmp	BYTE PTR [ebp+188], 0
	jne	SHORT $LN3@sqlite3Run
; Line 66035
	mov	edx, DWORD PTR [ebp+164]
	push	edx
	call	_sqlite3DeleteTable
	add	esp, 4
$LN3@sqlite3Run:
; Line 66038
	mov	esi, DWORD PTR [ebp+168]
	call	_sqlite3DeleteTrigger
; Line 66039
	mov	eax, DWORD PTR [ebp+124]
	cmp	eax, edi
	je	SHORT $LN58@sqlite3Run
	push	eax
	call	_free
	add	esp, 4
$LN58@sqlite3Run:
; Line 66040
	mov	ecx, DWORD PTR _nErr$[esp+28]
	cmp	ecx, edi
	jle	SHORT $LN2@sqlite3Run
	mov	eax, DWORD PTR [ebp+4]
	cmp	eax, edi
	je	SHORT $LN1@sqlite3Run
	cmp	eax, 101				; 00000065H
	jne	SHORT $LN2@sqlite3Run
$LN1@sqlite3Run:
; Line 66041
	mov	DWORD PTR [ebp+4], 1
$LN2@sqlite3Run:
	pop	edi
	pop	esi
; Line 66043
	mov	eax, ecx
	pop	ebp
; Line 66044
	add	esp, 16					; 00000010H
	ret	0
	npad	2
$LN73@sqlite3Run:
	DD	$LN16@sqlite3Run
	DD	$LN18@sqlite3Run
	DD	$LN20@sqlite3Run
	DD	$LN15@sqlite3Run
$LN65@sqlite3Run:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	2
	DB	3
	DB	2
_sqlite3RunParser ENDP
_TEXT	ENDS
PUBLIC	??_C@_02KACECLIN@p3?$AA@			; `string'
PUBLIC	??_C@_02LJDPBKMM@p2?$AA@			; `string'
PUBLIC	??_C@_02JCBCEJAP@p1?$AA@			; `string'
PUBLIC	??_C@_06POMMAHJK@opcode?$AA@			; `string'
PUBLIC	??_C@_04HLBMEOMD@addr?$AA@			; `string'
PUBLIC	??_C@_06EENFNEPD@detail?$AA@			; `string'
PUBLIC	??_C@_05NDNMCCJH@order?$AA@			; `string'
PUBLIC	??_C@_0BO@EBFEALBC@database?5schema?5is?5locked?3?5?$CFs?$AA@ ; `string'
;	COMDAT ??_C@_02KACECLIN@p3?$AA@
CONST	SEGMENT
??_C@_02KACECLIN@p3?$AA@ DB 'p3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LJDPBKMM@p2?$AA@
CONST	SEGMENT
??_C@_02LJDPBKMM@p2?$AA@ DB 'p2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JCBCEJAP@p1?$AA@
CONST	SEGMENT
??_C@_02JCBCEJAP@p1?$AA@ DB 'p1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06POMMAHJK@opcode?$AA@
CONST	SEGMENT
??_C@_06POMMAHJK@opcode?$AA@ DB 'opcode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HLBMEOMD@addr?$AA@
CONST	SEGMENT
??_C@_04HLBMEOMD@addr?$AA@ DB 'addr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EENFNEPD@detail?$AA@
CONST	SEGMENT
??_C@_06EENFNEPD@detail?$AA@ DB 'detail', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NDNMCCJH@order?$AA@
CONST	SEGMENT
??_C@_05NDNMCCJH@order?$AA@ DB 'order', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EBFEALBC@database?5schema?5is?5locked?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BO@EBFEALBC@database?5schema?5is?5locked?3?5?$CFs?$AA@ DB 'databas'
	DB	'e schema is locked: %s', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Prepare
_TEXT	SEGMENT
tv2450 = -208						; size = 4
_rc$ = -208						; size = 4
_zErrMsg$ = -204					; size = 4
_sParse$ = -200						; size = 200
_db$ = 8						; size = 4
_zSql$ = 12						; size = 4
_nBytes$ = 16						; size = 4
_saveSqlFlag$ = 20					; size = 4
_ppStmt$ = 24						; size = 4
_pzTail$ = 28						; size = 4
_sqlite3Prepare PROC					; COMDAT
; Line 53212
	sub	esp, 208				; 000000d0H
; Line 53222
	mov	eax, DWORD PTR _ppStmt$[esp+204]
	push	ebx
	xor	ebx, ebx
	push	ebp
	mov	ebp, DWORD PTR _db$[esp+212]
	mov	DWORD PTR [eax], ebx
; Line 53223
	mov	eax, DWORD PTR [ebp+48]
	cmp	eax, -1607883113			; a029a697H
	mov	DWORD PTR _zErrMsg$[esp+216], ebx
	jne	SHORT $LN30@sqlite3Pre
; Line 53230
	cmp	DWORD PTR [ebp], ebx
	push	esi
	mov	DWORD PTR [ebp+48], -264537850		; f03b7906H
	push	edi
	jle	$LN469@sqlite3Pre
	mov	DWORD PTR tv2450[esp+224], ebx
	npad	2
$LL24@sqlite3Pre:
; Line 53231
	mov	ecx, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR tv2450[esp+224]
	mov	esi, DWORD PTR [edx+ecx+4]
; Line 53232
	test	esi, esi
	je	$LN23@sqlite3Pre
	cmp	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, 0
	mov	edi, DWORD PTR [esi+4]
	jne	SHORT $LN476@sqlite3Pre
	add	DWORD PTR _inMutex, 1
	call	DWORD PTR __imp__TlsAlloc@0
	cmp	eax, -1
	mov	DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9, eax
	jne	SHORT $LN54@sqlite3Pre
	sub	DWORD PTR _inMutex, 1
	jmp	SHORT $LN468@sqlite3Pre
; Line 53223
$LN30@sqlite3Pre:
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN28@sqlite3Pre
	mov	DWORD PTR [ebp+48], -1254786768		; b5357930H
	mov	DWORD PTR [ebp+152], 1
$LN28@sqlite3Pre:
	pop	ebp
; Line 53224
	mov	eax, 21					; 00000015H
	pop	ebx
; Line 53318
	add	esp, 208				; 000000d0H
	ret	0
; Line 53232
$LN54@sqlite3Pre:
	mov	ecx, 1
	sub	DWORD PTR _inMutex, ecx
	mov	DWORD PTR ?keyInit@?1??sqlite3WinThreadSpecificData@@9@9, ecx
	jmp	SHORT $LN69@sqlite3Pre
$LN476@sqlite3Pre:
	mov	eax, DWORD PTR ?key@?1??sqlite3WinThreadSpecificData@@9@9
$LN69@sqlite3Pre:
	push	eax
	call	DWORD PTR __imp__TlsGetValue@4
	test	eax, eax
	jne	SHORT $LN48@sqlite3Pre
$LN468@sqlite3Pre:
	mov	eax, OFFSET ?zeroData@?1??sqlite3ThreadDataReadOnly@@9@9
$LN48@sqlite3Pre:
	cmp	BYTE PTR [eax+4], 0
	je	SHORT $LN23@sqlite3Pre
	mov	eax, DWORD PTR [edi+68]
	test	eax, eax
	je	SHORT $LN23@sqlite3Pre
	npad	6
$LL39@sqlite3Pre:
	cmp	DWORD PTR [eax], esi
	je	SHORT $LN38@sqlite3Pre
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN38@sqlite3Pre
	cmp	BYTE PTR [eax+8], 1
	jne	SHORT $LN461@sqlite3Pre
$LN38@sqlite3Pre:
	mov	eax, DWORD PTR [eax+12]
	test	eax, eax
	jne	SHORT $LL39@sqlite3Pre
$LN23@sqlite3Pre:
; Line 53230
	add	DWORD PTR tv2450[esp+224], 24		; 00000018H
	add	ebx, 1
	cmp	ebx, DWORD PTR [ebp]
	jl	$LL24@sqlite3Pre
$LN469@sqlite3Pre:
; Line 53240
	push	200					; 000000c8H
	lea	eax, DWORD PTR _sParse$[esp+228]
	push	0
	push	eax
	call	_memset
; Line 53242
	mov	ebx, DWORD PTR _nBytes$[esp+232]
	mov	eax, DWORD PTR _zSql$[esp+232]
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	mov	DWORD PTR _sParse$[esp+224], ebp
	jl	$LN20@sqlite3Pre
	cmp	BYTE PTR [eax+ebx], 0
	lea	edi, DWORD PTR [eax+ebx]
	je	$LN20@sqlite3Pre
; Line 53244
	cmp	ebx, 1000000				; 000f4240H
	jle	SHORT $LN19@sqlite3Pre
	pop	edi
	pop	esi
	pop	ebp
; Line 53245
	mov	eax, 18					; 00000012H
	pop	ebx
; Line 53318
	add	esp, 208				; 000000d0H
	ret	0
$LN461@sqlite3Pre:
; Line 53234
	mov	ecx, DWORD PTR [ebp+4]
	lea	eax, DWORD PTR [ebx+ebx*2]
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edx
	push	OFFSET ??_C@_0BO@EBFEALBC@database?5schema?5is?5locked?3?5?$CFs?$AA@
	push	6
	mov	eax, ebp
	call	_sqlite3Error
	add	esp, 12					; 0000000cH
; Line 53235
	cmp	DWORD PTR [ebp+48], -264537850		; f03b7906H
	jne	SHORT $LN76@sqlite3Pre
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp+48], -1607883113		; a029a697H
	pop	ebp
; Line 53236
	mov	eax, 6
	pop	ebx
; Line 53318
	add	esp, 208				; 000000d0H
	ret	0
; Line 53235
$LN76@sqlite3Pre:
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp+48], -1254786768		; b5357930H
	mov	DWORD PTR [ebp+152], 1
	pop	ebp
; Line 53236
	mov	eax, 6
	pop	ebx
; Line 53318
	add	esp, 208				; 000000d0H
	ret	0
$LN19@sqlite3Pre:
; Line 53247
	test	eax, eax
	je	SHORT $LN471@sqlite3Pre
	lea	ecx, DWORD PTR [ebx+1]
	call	_sqlite3MallocRaw
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN471@sqlite3Pre
	mov	ecx, DWORD PTR _zSql$[esp+220]
	push	ebx
	push	ecx
	push	esi
	call	_memcpy
; Line 53249
	lea	edx, DWORD PTR _zErrMsg$[esp+236]
	push	edx
	lea	eax, DWORD PTR _sParse$[esp+240]
	push	esi
	push	eax
	mov	BYTE PTR [esi+ebx], 0
	call	_sqlite3RunParser
; Line 53250
	push	esi
	call	_free
	add	esp, 28					; 0000001cH
$LN471@sqlite3Pre:
; Line 53252
	mov	DWORD PTR _sParse$[esp+384], edi
; Line 53253
	jmp	SHORT $LN17@sqlite3Pre
$LN20@sqlite3Pre:
; Line 53254
	lea	ecx, DWORD PTR _zErrMsg$[esp+224]
	push	ecx
	push	eax
	lea	edx, DWORD PTR _sParse$[esp+232]
	push	edx
	call	_sqlite3RunParser
	add	esp, 12					; 0000000cH
$LN17@sqlite3Pre:
; Line 53257
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN16@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN16@sqlite3Pre
; Line 53258
	mov	eax, 7
; Line 53260
	jmp	SHORT $LN487@sqlite3Pre
$LN16@sqlite3Pre:
	mov	eax, DWORD PTR _sParse$[esp+228]
	cmp	eax, 101				; 00000065H
	jne	SHORT $LN15@sqlite3Pre
	xor	eax, eax
$LN487@sqlite3Pre:
	mov	DWORD PTR _sParse$[esp+228], eax
$LN15@sqlite3Pre:
; Line 53261
	cmp	BYTE PTR _sParse$[esp+242], 0
	je	SHORT $LN14@sqlite3Pre
	push	ebp
	call	_schemaIsValid
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN472@sqlite3Pre
; Line 53262
	mov	DWORD PTR _sParse$[esp+228], 17		; 00000011H
; Line 53264
	jmp	SHORT $LN465@sqlite3Pre
$LN472@sqlite3Pre:
	mov	eax, DWORD PTR _sParse$[esp+228]
$LN14@sqlite3Pre:
	cmp	eax, 17					; 00000011H
	jne	SHORT $LN13@sqlite3Pre
$LN465@sqlite3Pre:
; Line 53265
	push	0
	mov	ebx, ebp
	call	_sqlite3ResetInternalSchema
	mov	eax, DWORD PTR _sParse$[esp+232]
	add	esp, 4
$LN13@sqlite3Pre:
; Line 53267
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN12@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN12@sqlite3Pre
; Line 53268
	mov	eax, 7
	mov	DWORD PTR _sParse$[esp+228], eax
$LN12@sqlite3Pre:
; Line 53270
	mov	ecx, DWORD PTR _pzTail$[esp+220]
	test	ecx, ecx
	je	SHORT $LN11@sqlite3Pre
; Line 53271
	mov	edx, DWORD PTR _sParse$[esp+384]
	mov	DWORD PTR [ecx], edx
$LN11@sqlite3Pre:
; Line 53276
	test	eax, eax
	mov	ebx, DWORD PTR _sParse$[esp+236]
	mov	ebp, eax
	mov	DWORD PTR _rc$[esp+224], ebp
	jne	$LN481@sqlite3Pre
	test	ebx, ebx
	je	$LN481@sqlite3Pre
	mov	al, BYTE PTR _sParse$[esp+352]
	test	al, al
	je	$LN481@sqlite3Pre
; Line 53277
	cmp	al, 2
	jne	$LN9@sqlite3Pre
; Line 53278
	push	3
	call	_sqlite3VdbeSetNumCols
	add	esp, 4
; Line 53279
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	mov	edi, 162				; 000000a2H
	je	SHORT $LN96@sqlite3Pre
	cmp	DWORD PTR _inMutex, ebp
	jg	SHORT $LN478@sqlite3Pre
$LN96@sqlite3Pre:
	mov	eax, DWORD PTR _sParse$[esp+236]
	mov	esi, DWORD PTR [eax+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	bl, 3
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_05NDNMCCJH@order?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], bl
	mov	DWORD PTR [esi+20], 5
	mov	WORD PTR [esi+24], di
	jmp	SHORT $LN101@sqlite3Pre
$LN478@sqlite3Pre:
	mov	bl, 3
$LN101@sqlite3Pre:
; Line 53280
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN137@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN142@sqlite3Pre
$LN137@sqlite3Pre:
	mov	ecx, DWORD PTR _sParse$[esp+236]
	mov	esi, DWORD PTR [ecx+48]
	add	esi, 64					; 00000040H
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_04HNEBHLOP@from?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], bl
	mov	DWORD PTR [esi+20], 4
	mov	WORD PTR [esi+24], di
$LN142@sqlite3Pre:
; Line 53281
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN178@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jg	$LN475@sqlite3Pre
$LN178@sqlite3Pre:
	mov	edx, DWORD PTR _sParse$[esp+236]
	mov	esi, DWORD PTR [edx+48]
	add	esi, 128				; 00000080H
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_06EENFNEPD@detail?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], bl
	mov	DWORD PTR [esi+20], 6
	mov	WORD PTR [esi+24], di
; Line 53282
	jmp	$LN475@sqlite3Pre
$LN9@sqlite3Pre:
; Line 53283
	push	5
	call	_sqlite3VdbeSetNumCols
	add	esp, 4
; Line 53284
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	edi, 162				; 000000a2H
	je	SHORT $LN219@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN479@sqlite3Pre
$LN219@sqlite3Pre:
	mov	eax, DWORD PTR _sParse$[esp+236]
	mov	esi, DWORD PTR [eax+48]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	bl, 3
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_04HLBMEOMD@addr?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], bl
	mov	DWORD PTR [esi+20], 4
	mov	WORD PTR [esi+24], di
	jmp	SHORT $LN224@sqlite3Pre
$LN479@sqlite3Pre:
	mov	bl, 3
$LN224@sqlite3Pre:
; Line 53285
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN260@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN265@sqlite3Pre
$LN260@sqlite3Pre:
	mov	ecx, DWORD PTR _sParse$[esp+236]
	mov	esi, DWORD PTR [ecx+48]
	add	esi, 64					; 00000040H
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_06POMMAHJK@opcode?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], bl
	mov	DWORD PTR [esi+20], 6
	mov	WORD PTR [esi+24], di
$LN265@sqlite3Pre:
; Line 53286
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN301@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN480@sqlite3Pre
$LN301@sqlite3Pre:
	mov	edx, DWORD PTR _sParse$[esp+236]
	mov	esi, DWORD PTR [edx+48]
	add	esi, 128				; 00000080H
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	ebp, 2
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_02JCBCEJAP@p1?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], bl
	mov	DWORD PTR [esi+20], ebp
	mov	WORD PTR [esi+24], di
	jmp	SHORT $LN306@sqlite3Pre
$LN480@sqlite3Pre:
	mov	ebp, 2
$LN306@sqlite3Pre:
; Line 53287
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN342@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN347@sqlite3Pre
$LN342@sqlite3Pre:
	mov	eax, DWORD PTR _sParse$[esp+236]
	mov	esi, DWORD PTR [eax+48]
	add	esi, 192				; 000000c0H
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_02LJDPBKMM@p2?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], bl
	mov	DWORD PTR [esi+20], ebp
	mov	WORD PTR [esi+24], di
$LN347@sqlite3Pre:
; Line 53288
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN383@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN473@sqlite3Pre
$LN383@sqlite3Pre:
	mov	ecx, DWORD PTR _sParse$[esp+236]
	mov	esi, DWORD PTR [ecx+48]
	add	esi, 256				; 00000100H
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
	mov	DWORD PTR [esi+16], OFFSET ??_C@_02KACECLIN@p3?$AA@
	mov	BYTE PTR [esi+27], 1
	mov	BYTE PTR [esi+26], bl
	mov	DWORD PTR [esi+20], ebp
	mov	WORD PTR [esi+24], di
$LN473@sqlite3Pre:
	mov	ebp, DWORD PTR _rc$[esp+224]
$LN475@sqlite3Pre:
; Line 53282
	mov	ebx, DWORD PTR _sParse$[esp+236]
$LN481@sqlite3Pre:
; Line 53293
	mov	ecx, DWORD PTR _db$[esp+220]
	cmp	DWORD PTR [ecx+48], -264537850		; f03b7906H
	jne	SHORT $LN421@sqlite3Pre
	mov	DWORD PTR [ecx+48], -1607883113		; a029a697H
	jmp	SHORT $LN7@sqlite3Pre
$LN421@sqlite3Pre:
	mov	DWORD PTR [ecx+48], -1254786768		; b5357930H
	mov	DWORD PTR [ecx+152], 1
; Line 53294
	mov	ebp, 21					; 00000015H
$LN7@sqlite3Pre:
; Line 53297
	cmp	DWORD PTR _saveSqlFlag$[esp+220], 0
	je	SHORT $LN425@sqlite3Pre
; Line 53298
	mov	eax, DWORD PTR _zSql$[esp+220]
	mov	edi, DWORD PTR _sParse$[esp+384]
	sub	edi, eax
	test	ebx, ebx
	je	SHORT $LN425@sqlite3Pre
	test	eax, eax
	jne	SHORT $LN428@sqlite3Pre
	xor	esi, esi
	jmp	SHORT $LN427@sqlite3Pre
$LN428@sqlite3Pre:
	lea	ecx, DWORD PTR [edi+1]
	call	_sqlite3MallocRaw
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN427@sqlite3Pre
	mov	edx, DWORD PTR _zSql$[esp+220]
	push	edi
	push	edx
	push	esi
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	BYTE PTR [esi+edi], 0
$LN427@sqlite3Pre:
	mov	ecx, DWORD PTR _db$[esp+220]
	mov	DWORD PTR [ebx+588], esi
	mov	ebx, DWORD PTR _sParse$[esp+236]
$LN425@sqlite3Pre:
; Line 53300
	test	ebp, ebp
	jne	SHORT $LN4@sqlite3Pre
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN5@sqlite3Pre
	cmp	DWORD PTR _inMutex, ebp
	jg	SHORT $LN4@sqlite3Pre
$LN5@sqlite3Pre:
; Line 53304
	mov	eax, DWORD PTR _ppStmt$[esp+220]
	mov	DWORD PTR [eax], ebx
	jmp	SHORT $LN441@sqlite3Pre
$LN4@sqlite3Pre:
; Line 53301
	test	ebx, ebx
	je	SHORT $LN441@sqlite3Pre
	mov	eax, DWORD PTR [ebx+76]
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN439@sqlite3Pre
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN439@sqlite3Pre
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN437@sqlite3Pre
	jmp	SHORT $LN441@sqlite3Pre
$LN439@sqlite3Pre:
	mov	edi, ebx
	call	_sqlite3VdbeReset
$LN437@sqlite3Pre:
	mov	esi, ebx
	call	_sqlite3VdbeDelete
	mov	ecx, DWORD PTR _db$[esp+220]
$LN441@sqlite3Pre:
; Line 53307
	mov	eax, DWORD PTR _zErrMsg$[esp+224]
	test	eax, eax
	je	SHORT $LN2@sqlite3Pre
; Line 53308
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	ebp
	mov	eax, ecx
	call	_sqlite3Error
; Line 53309
	mov	eax, DWORD PTR _zErrMsg$[esp+236]
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@sqlite3Pre
	push	eax
	call	_free
	add	esp, 4
; Line 53310
	jmp	SHORT $LN1@sqlite3Pre
$LN2@sqlite3Pre:
; Line 53311
	push	0
	push	ebp
	mov	eax, ecx
	call	_sqlite3Error
	add	esp, 8
$LN1@sqlite3Pre:
; Line 53314
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, ebp
	je	SHORT $LN482@sqlite3Pre
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN482@sqlite3Pre
	mov	eax, DWORD PTR _db$[esp+220]
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	esi, 7
$LN482@sqlite3Pre:
	mov	ecx, DWORD PTR _db$[esp+220]
	mov	edi, DWORD PTR [ecx+16]
; Line 53315
	or	eax, -1
	call	_sqlite3WinThreadSpecificData
	mov	eax, esi
	and	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 53318
	add	esp, 208				; 000000d0H
	ret	0
_sqlite3Prepare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Reprepare
_TEXT	SEGMENT
_pNew$ = -4						; size = 4
_sqlite3Reprepare PROC					; COMDAT
; _p$ = esi
; Line 53325
	push	ecx
; Line 53331
	mov	eax, DWORD PTR [esi+588]
; Line 53332
	test	eax, eax
	jne	SHORT $LN3@sqlite3Rep
$LN12@sqlite3Rep:
; Line 53333
	xor	eax, eax
; Line 53348
	pop	ecx
	ret	0
$LN3@sqlite3Rep:
; Line 53335
	mov	ecx, DWORD PTR [esi]
; Line 53336
	push	0
	lea	edx, DWORD PTR _pNew$[esp+8]
	push	edx
	push	0
	push	-1
	push	eax
	push	ecx
	call	_sqlite3Prepare
	add	esp, 24					; 00000018H
; Line 53337
	test	eax, eax
; Line 53339
	jne	SHORT $LN12@sqlite3Rep
	push	edi
; Line 53343
	mov	edi, DWORD PTR _pNew$[esp+8]
	mov	eax, esi
	mov	edx, edi
	call	_sqlite3VdbeSwap
; Line 53344
	push	esi
	push	edi
	call	_sqlite3_transfer_bindings
	add	esp, 8
; Line 53346
	mov	eax, edi
	mov	DWORD PTR [edi+124], 0
	call	_sqlite3VdbeFinalize
; Line 53347
	mov	eax, 1
	pop	edi
; Line 53348
	pop	ecx
	ret	0
_sqlite3Reprepare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_prepare
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zSql$ = 12						; size = 4
_nBytes$ = 16						; size = 4
_ppStmt$ = 20						; size = 4
_pzTail$ = 24						; size = 4
_sqlite3_prepare PROC					; COMDAT
; Line 53366
	mov	eax, DWORD PTR _pzTail$[esp-4]
	mov	ecx, DWORD PTR _ppStmt$[esp-4]
	mov	edx, DWORD PTR _nBytes$[esp-4]
	push	eax
	mov	eax, DWORD PTR _zSql$[esp]
	push	ecx
	mov	ecx, DWORD PTR _db$[esp+4]
	push	0
	push	edx
	push	eax
	push	ecx
	call	_sqlite3Prepare
	add	esp, 24					; 00000018H
; Line 53367
	ret	0
_sqlite3_prepare ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_prepare_v2
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zSql$ = 12						; size = 4
_nBytes$ = 16						; size = 4
_ppStmt$ = 20						; size = 4
_pzTail$ = 24						; size = 4
_sqlite3_prepare_v2 PROC				; COMDAT
; Line 53375
	mov	eax, DWORD PTR _pzTail$[esp-4]
	mov	ecx, DWORD PTR _ppStmt$[esp-4]
	mov	edx, DWORD PTR _nBytes$[esp-4]
	push	eax
	mov	eax, DWORD PTR _zSql$[esp]
	push	ecx
	mov	ecx, DWORD PTR _db$[esp+4]
	push	1
	push	edx
	push	eax
	push	ecx
	call	_sqlite3Prepare
	add	esp, 24					; 00000018H
; Line 53376
	ret	0
_sqlite3_prepare_v2 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3Prepare16
_TEXT	SEGMENT
_zTail8$ = -8						; size = 4
_rc$ = -4						; size = 4
_nBytes$ = 8						; size = 4
_saveSqlFlag$ = 12					; size = 4
_ppStmt$ = 16						; size = 4
_pzTail$ = 20						; size = 4
_sqlite3Prepare16 PROC					; COMDAT
; _db$ = ecx
; _zSql$ = eax
; Line 53390
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
; Line 53396
	xor	edi, edi
	mov	esi, ecx
; Line 53399
	cmp	esi, edi
	mov	ebx, eax
	mov	DWORD PTR _zTail8$[esp+20], edi
	je	SHORT $LN15@sqlite3Pre@2
	mov	eax, DWORD PTR [esi+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN3@sqlite3Pre@2
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN3@sqlite3Pre@2
	cmp	eax, -264537850				; f03b7906H
	je	SHORT $LN3@sqlite3Pre@2
$LN15@sqlite3Pre@2:
	pop	edi
	pop	esi
; Line 53400
	mov	eax, 21					; 00000015H
	pop	ebx
; Line 53418
	add	esp, 8
	ret	0
$LN3@sqlite3Pre@2:
; Line 53402
	mov	eax, DWORD PTR _nBytes$[esp+16]
	push	ebp
	push	eax
	mov	ecx, ebx
	call	_sqlite3Utf16to8
	mov	ebp, eax
	add	esp, 4
; Line 53403
	cmp	ebp, edi
	je	SHORT $LN13@sqlite3Pre@2
; Line 53404
	mov	edx, DWORD PTR _ppStmt$[esp+20]
	mov	eax, DWORD PTR _saveSqlFlag$[esp+20]
	lea	ecx, DWORD PTR _zTail8$[esp+24]
	push	ecx
	push	edx
	push	eax
	push	-1
	push	ebp
	push	esi
	call	_sqlite3Prepare
; Line 53407
	mov	edx, DWORD PTR _zTail8$[esp+48]
	add	esp, 24					; 00000018H
	cmp	edx, edi
	mov	DWORD PTR _rc$[esp+24], eax
	je	SHORT $LN1@sqlite3Pre@2
	cmp	DWORD PTR _pzTail$[esp+20], edi
	je	SHORT $LN1@sqlite3Pre@2
; Line 53413
	sub	edx, ebp
	mov	ecx, ebp
	call	_sqlite3Utf8CharLen
; Line 53414
	mov	edi, eax
	call	_sqlite3Utf16ByteLen
	mov	ecx, DWORD PTR _pzTail$[esp+20]
	add	eax, ebx
	mov	DWORD PTR [ecx], eax
$LN1@sqlite3Pre@2:
; Line 53416
	push	ebp
	call	_free
	mov	edi, DWORD PTR _rc$[esp+28]
	add	esp, 4
$LN13@sqlite3Pre@2:
; Line 53417
	mov	ecx, edi
	call	_sqlite3ApiExit
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
; Line 53418
	add	esp, 8
	ret	0
_sqlite3Prepare16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_prepare16
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zSql$ = 12						; size = 4
_nBytes$ = 16						; size = 4
_ppStmt$ = 20						; size = 4
_pzTail$ = 24						; size = 4
_sqlite3_prepare16 PROC					; COMDAT
; Line 53435
	mov	eax, DWORD PTR _pzTail$[esp-4]
	mov	ecx, DWORD PTR _ppStmt$[esp-4]
	mov	edx, DWORD PTR _nBytes$[esp-4]
	push	eax
	mov	eax, DWORD PTR _zSql$[esp]
	push	ecx
	mov	ecx, DWORD PTR _db$[esp+4]
	push	0
	push	edx
	call	_sqlite3Prepare16
	add	esp, 16					; 00000010H
; Line 53436
	ret	0
_sqlite3_prepare16 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_prepare16_v2
_TEXT	SEGMENT
_db$ = 8						; size = 4
_zSql$ = 12						; size = 4
_nBytes$ = 16						; size = 4
_ppStmt$ = 20						; size = 4
_pzTail$ = 24						; size = 4
_sqlite3_prepare16_v2 PROC				; COMDAT
; Line 53444
	mov	eax, DWORD PTR _pzTail$[esp-4]
	mov	ecx, DWORD PTR _ppStmt$[esp-4]
	mov	edx, DWORD PTR _nBytes$[esp-4]
	push	eax
	mov	eax, DWORD PTR _zSql$[esp]
	push	ecx
	mov	ecx, DWORD PTR _db$[esp+4]
	push	1
	push	edx
	call	_sqlite3Prepare16
	add	esp, 16					; 00000010H
; Line 53445
	ret	0
_sqlite3_prepare16_v2 ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _execSql
_TEXT	SEGMENT
_pStmt$ = -4						; size = 4
_execSql PROC						; COMDAT
; _db$ = eax
; _zSql$ = ecx
; Line 58601
	push	ecx
	push	esi
; Line 58603
	push	0
	mov	esi, eax
	lea	eax, DWORD PTR _pStmt$[esp+12]
	push	eax
	push	0
	push	-1
	push	ecx
	push	esi
	call	_sqlite3Prepare
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN90@execSql
; Line 58604
	push	esi
	call	_sqlite3_errcode
	add	esp, 4
	pop	esi
; Line 58608
	pop	ecx
	ret	0
$LN90@execSql:
; Line 58604
	mov	esi, DWORD PTR _pStmt$[esp+8]
	npad	3
$LL2@execSql:
; Line 58606
	push	esi
	call	_sqlite3_step
	add	esp, 4
	cmp	eax, 100				; 00000064H
	je	SHORT $LL2@execSql
; Line 58607
	test	esi, esi
	jne	SHORT $LN80@execSql
	xor	eax, eax
	pop	esi
; Line 58608
	pop	ecx
	ret	0
; Line 58607
$LN80@execSql:
	mov	eax, DWORD PTR [esi+76]
	push	edi
	xor	edi, edi
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN85@execSql
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN85@execSql
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN83@execSql
	lea	eax, DWORD PTR [edi+21]
	pop	edi
	pop	esi
; Line 58608
	pop	ecx
	ret	0
; Line 58607
$LN85@execSql:
	mov	edi, esi
	call	_sqlite3VdbeReset
	mov	edi, eax
$LN83@execSql:
	call	_sqlite3VdbeDelete
	mov	eax, edi
	pop	edi
	pop	esi
; Line 58608
	pop	ecx
	ret	0
_execSql ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _execExecSql
_TEXT	SEGMENT
_pStmt$ = -4						; size = 4
_db$ = 8						; size = 4
_execExecSql PROC					; COMDAT
; _zSql$ = ecx
; Line 58614
	push	ecx
	push	ebp
	mov	ebp, DWORD PTR _db$[esp+4]
; Line 58618
	push	0
	lea	eax, DWORD PTR _pStmt$[esp+12]
	push	eax
	push	0
	push	-1
	push	ecx
	push	ebp
	call	_sqlite3Prepare
	add	esp, 24					; 00000018H
; Line 58619
	test	eax, eax
	jne	$LN5@execExecSq
	push	esi
; Line 58621
	mov	esi, DWORD PTR _pStmt$[esp+12]
	push	edi
	push	esi
	call	_sqlite3_step
	add	esp, 4
	cmp	eax, 100				; 00000064H
	jne	$LN2@execExecSq
	npad	5
$LL3@execExecSq:
; Line 58622
	test	esi, esi
	je	SHORT $LN36@execExecSq
	cmp	BYTE PTR [esi+560], 0
	je	SHORT $LN36@execExecSq
	mov	eax, DWORD PTR [esi+544]
	test	eax, eax
	jle	SHORT $LN36@execExecSq
	mov	ecx, DWORD PTR [esi+40]
	shl	eax, 6
	sub	ecx, eax
	add	ecx, 64					; 00000040H
	jmp	SHORT $LN38@execExecSq
$LN36@execExecSq:
	mov	eax, DWORD PTR [esi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	mov	ecx, OFFSET ?nullMem@?2??columnMem@@9@9
$LN38@execExecSq:
	mov	al, 1
	call	_sqlite3ValueText
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	edi, eax
	mov	eax, DWORD PTR [esi+124]
	je	SHORT $LN48@execExecSq
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN48@execExecSq
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN48@execExecSq:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR [esi+124], eax
	mov	ecx, edi
	mov	eax, ebp
	call	_execSql
	mov	edi, eax
; Line 58623
	test	edi, edi
	push	esi
	jne	SHORT $LN58@execExecSq
	call	_sqlite3_step
	add	esp, 4
	cmp	eax, 100				; 00000064H
	je	$LL3@execExecSq
$LN2@execExecSq:
; Line 58629
	push	esi
	call	_sqlite3_finalize
	add	esp, 4
	pop	edi
	pop	esi
$LN5@execExecSq:
	pop	ebp
; Line 58630
	pop	ecx
	ret	0
$LN58@execExecSq:
; Line 58624
	call	_sqlite3_finalize
; Line 58629
	add	esp, 4
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
; Line 58630
	pop	ecx
	ret	0
_execExecSql ENDP
_TEXT	ENDS
PUBLIC	??_C@_0LD@KNCLPPMC@INSERT?5INTO?5vacuum_db?4sqlite_mas@ ; `string'
PUBLIC	??_C@_0JG@FGPGEBNJ@SELECT?5?8INSERT?5INTO?5vacuum_db?4?8?5@ ; `string'
PUBLIC	??_C@_0HB@CJENIKHO@SELECT?5?8DELETE?5FROM?5vacuum_db?4?8?5@ ; `string'
PUBLIC	??_C@_0KO@HAGDHKLJ@SELECT?5?8INSERT?5INTO?5vacuum_db?4?8?5@ ; `string'
PUBLIC	??_C@_0IA@EDANDKKM@SELECT?5?8CREATE?5UNIQUE?5INDEX?5vacu@ ; `string'
PUBLIC	??_C@_0HC@JFOFPJAP@SELECT?5?8CREATE?5INDEX?5vacuum_db?4?8@ ; `string'
PUBLIC	??_C@_0JC@LELIDDPI@SELECT?5?8CREATE?5TABLE?5vacuum_db?4?8@ ; `string'
PUBLIC	??_C@_0BB@JEGCAHMF@BEGIN?5EXCLUSIVE?$DL?$AA@	; `string'
PUBLIC	??_C@_0CB@NBNOHMDI@PRAGMA?5vacuum_db?4synchronous?$DNOFF@ ; `string'
PUBLIC	??_C@_0BI@OOHLJPLG@ATTACH?5?8?8?5AS?5vacuum_db?$DL?$AA@ ; `string'
PUBLIC	??_C@_0CI@CPMJIPOI@cannot?5VACUUM?5from?5within?5a?5tran@ ; `string'
;	COMDAT ??_C@_0LD@KNCLPPMC@INSERT?5INTO?5vacuum_db?4sqlite_mas@
CONST	SEGMENT
??_C@_0LD@KNCLPPMC@INSERT?5INTO?5vacuum_db?4sqlite_mas@ DB 'INSERT INTO v'
	DB	'acuum_db.sqlite_master   SELECT type, name, tbl_name, rootpag'
	DB	'e, sql    FROM sqlite_master   WHERE type=''view'' OR type='''
	DB	'trigger''      OR (type=''table'' AND rootpage=0)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JG@FGPGEBNJ@SELECT?5?8INSERT?5INTO?5vacuum_db?4?8?5@
CONST	SEGMENT
??_C@_0JG@FGPGEBNJ@SELECT?5?8INSERT?5INTO?5vacuum_db?4?8?5@ DB 'SELECT '''
	DB	'INSERT INTO vacuum_db.'' || quote(name) || '' SELECT * FROM '''
	DB	' || quote(name) || '';'' FROM vacuum_db.sqlite_master WHERE n'
	DB	'ame==''sqlite_sequence'';', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@CJENIKHO@SELECT?5?8DELETE?5FROM?5vacuum_db?4?8?5@
CONST	SEGMENT
??_C@_0HB@CJENIKHO@SELECT?5?8DELETE?5FROM?5vacuum_db?4?8?5@ DB 'SELECT '''
	DB	'DELETE FROM vacuum_db.'' || quote(name) || '';'' FROM vacuum_'
	DB	'db.sqlite_master WHERE name=''sqlite_sequence'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0KO@HAGDHKLJ@SELECT?5?8INSERT?5INTO?5vacuum_db?4?8?5@
CONST	SEGMENT
??_C@_0KO@HAGDHKLJ@SELECT?5?8INSERT?5INTO?5vacuum_db?4?8?5@ DB 'SELECT '''
	DB	'INSERT INTO vacuum_db.'' || quote(name) || '' SELECT * FROM '''
	DB	' || quote(name) || '';''FROM sqlite_master WHERE type = ''tab'
	DB	'le'' AND name!=''sqlite_sequence''   AND rootpage>0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IA@EDANDKKM@SELECT?5?8CREATE?5UNIQUE?5INDEX?5vacu@
CONST	SEGMENT
??_C@_0IA@EDANDKKM@SELECT?5?8CREATE?5UNIQUE?5INDEX?5vacu@ DB 'SELECT ''CR'
	DB	'EATE UNIQUE INDEX vacuum_db.'' || substr(sql,21,100000000)   '
	DB	'FROM sqlite_master WHERE sql LIKE ''CREATE UNIQUE INDEX %''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HC@JFOFPJAP@SELECT?5?8CREATE?5INDEX?5vacuum_db?4?8@
CONST	SEGMENT
??_C@_0HC@JFOFPJAP@SELECT?5?8CREATE?5INDEX?5vacuum_db?4?8@ DB 'SELECT ''C'
	DB	'REATE INDEX vacuum_db.'' || substr(sql,14,100000000)  FROM sq'
	DB	'lite_master WHERE sql LIKE ''CREATE INDEX %'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JC@LELIDDPI@SELECT?5?8CREATE?5TABLE?5vacuum_db?4?8@
CONST	SEGMENT
??_C@_0JC@LELIDDPI@SELECT?5?8CREATE?5TABLE?5vacuum_db?4?8@ DB 'SELECT ''C'
	DB	'REATE TABLE vacuum_db.'' || substr(sql,14,100000000)   FROM s'
	DB	'qlite_master WHERE type=''table'' AND name!=''sqlite_sequence'
	DB	'''   AND rootpage>0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JEGCAHMF@BEGIN?5EXCLUSIVE?$DL?$AA@
CONST	SEGMENT
??_C@_0BB@JEGCAHMF@BEGIN?5EXCLUSIVE?$DL?$AA@ DB 'BEGIN EXCLUSIVE;', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NBNOHMDI@PRAGMA?5vacuum_db?4synchronous?$DNOFF@
CONST	SEGMENT
??_C@_0CB@NBNOHMDI@PRAGMA?5vacuum_db?4synchronous?$DNOFF@ DB 'PRAGMA vacu'
	DB	'um_db.synchronous=OFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OOHLJPLG@ATTACH?5?8?8?5AS?5vacuum_db?$DL?$AA@
CONST	SEGMENT
??_C@_0BI@OOHLJPLG@ATTACH?5?8?8?5AS?5vacuum_db?$DL?$AA@ DB 'ATTACH '''' A'
	DB	'S vacuum_db;', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CPMJIPOI@cannot?5VACUUM?5from?5within?5a?5tran@
CONST	SEGMENT
??_C@_0CI@CPMJIPOI@cannot?5VACUUM?5from?5within?5a?5tran@ DB 'cannot VACU'
	DB	'UM from within a transaction', 00H		; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3RunVacuum
_TEXT	SEGMENT
_pMain$ = -20						; size = 4
_pTemp$ = -16						; size = 4
_pDb$ = -12						; size = 4
_meta$100422 = -8					; size = 4
tv258 = -4						; size = 4
_pzErrMsg$ = 8						; size = 4
_i$100423 = 12						; size = 4
_db$ = 12						; size = 4
_sqlite3RunVacuum PROC					; COMDAT
; Line 58653
	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _db$[esp+24]
; Line 58662
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR tv258[esp+28], eax
; Line 58663
	or	eax, 10240				; 00002800H
; Line 58665
	cmp	BYTE PTR [ebp+20], 0
	push	esi
	push	edi
	mov	DWORD PTR _pDb$[esp+36], 0
	mov	DWORD PTR [ebp+8], eax
	jne	SHORT $LN21@sqlite3Run@2
; Line 58667
	mov	eax, DWORD PTR _pzErrMsg$[esp+32]
	push	0
	push	OFFSET ??_C@_0CI@CPMJIPOI@cannot?5VACUUM?5from?5within?5a?5tran@
	push	eax
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
; Line 58668
	mov	esi, 1
; Line 58669
	jmp	$end_of_vacuum$100397
$LN21@sqlite3Run@2:
; Line 58671
	mov	ecx, DWORD PTR [ebp+4]
	mov	ebx, DWORD PTR [ecx+4]
; Line 58682
	mov	ecx, OFFSET ??_C@_0BI@OOHLJPLG@ATTACH?5?8?8?5AS?5vacuum_db?$DL?$AA@
	mov	eax, ebp
	mov	DWORD PTR _pMain$[esp+36], ebx
	call	_execSql
	mov	esi, eax
; Line 58683
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58684
	mov	eax, DWORD PTR [ebp]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [ebp+4]
; Line 58686
	mov	edi, DWORD PTR [eax+edx*8-20]
	lea	eax, DWORD PTR [eax+edx*8]
	lea	ecx, DWORD PTR [eax-24]
; Line 58688
	mov	eax, DWORD PTR [ebx+4]
	movzx	edx, WORD PTR [eax+24]
	movzx	eax, WORD PTR [eax+26]
	mov	DWORD PTR _pDb$[esp+36], ecx
	mov	ecx, edx
	sub	ecx, eax
	mov	eax, edi
	mov	DWORD PTR _pTemp$[esp+36], edi
	call	_sqlite3BtreeSetPageSize
; Line 58689
	cmp	DWORD PTR _sqlite3_mallocHasFailed, esi
	je	SHORT $LN19@sqlite3Run@2
	cmp	DWORD PTR _inMutex, esi
	jle	SHORT $LN19@sqlite3Run@2
; Line 58690
	mov	esi, 7
; Line 58691
	jmp	$end_of_vacuum$100397
$LN19@sqlite3Run@2:
; Line 58694
	mov	ecx, OFFSET ??_C@_0CB@NBNOHMDI@PRAGMA?5vacuum_db?4synchronous?$DNOFF@
	mov	eax, ebp
	call	_execSql
	mov	esi, eax
; Line 58695
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58700
	mov	eax, DWORD PTR [ebx+4]
	xor	ecx, ecx
	cmp	BYTE PTR [eax+18], cl
	je	SHORT $LN33@sqlite3Run@2
	cmp	BYTE PTR [eax+19], cl
	setne	cl
	add	ecx, 1
$LN33@sqlite3Run@2:
	mov	eax, edi
	call	_sqlite3BtreeSetAutoVacuum
; Line 58704
	mov	ecx, OFFSET ??_C@_0BB@JEGCAHMF@BEGIN?5EXCLUSIVE?$DL?$AA@
	mov	eax, ebp
	call	_execSql
	mov	esi, eax
; Line 58705
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58714
	push	ebp
	mov	ecx, OFFSET ??_C@_0JC@LELIDDPI@SELECT?5?8CREATE?5TABLE?5vacuum_db?4?8@
	call	_execExecSql
	mov	esi, eax
	add	esp, 4
; Line 58715
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58718
	push	ebp
	mov	ecx, OFFSET ??_C@_0HC@JFOFPJAP@SELECT?5?8CREATE?5INDEX?5vacuum_db?4?8@
	call	_execExecSql
	mov	esi, eax
	add	esp, 4
; Line 58719
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58722
	push	ebp
	mov	ecx, OFFSET ??_C@_0IA@EDANDKKM@SELECT?5?8CREATE?5UNIQUE?5INDEX?5vacu@
	call	_execExecSql
	mov	esi, eax
	add	esp, 4
; Line 58723
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58736
	push	ebp
	mov	ecx, OFFSET ??_C@_0KO@HAGDHKLJ@SELECT?5?8INSERT?5INTO?5vacuum_db?4?8?5@
	call	_execExecSql
	mov	esi, eax
	add	esp, 4
; Line 58737
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58744
	push	ebp
	mov	ecx, OFFSET ??_C@_0HB@CJENIKHO@SELECT?5?8DELETE?5FROM?5vacuum_db?4?8?5@
	call	_execExecSql
	mov	esi, eax
	add	esp, 4
; Line 58745
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58750
	push	ebp
	mov	ecx, OFFSET ??_C@_0JG@FGPGEBNJ@SELECT?5?8INSERT?5INTO?5vacuum_db?4?8?5@
	call	_execExecSql
	mov	esi, eax
	add	esp, 4
; Line 58751
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58765
	mov	ecx, OFFSET ??_C@_0LD@KNCLPPMC@INSERT?5INTO?5vacuum_db?4sqlite_mas@
	mov	eax, ebp
	call	_execSql
	mov	esi, eax
; Line 58766
	test	esi, esi
	jne	$end_of_vacuum$100397
; Line 58797
	xor	edi, edi
	mov	DWORD PTR _i$100423[esp+32], edi
	jmp	SHORT $LN8@sqlite3Run@2
	npad	11
$LL39@sqlite3Run@2:
	mov	edi, DWORD PTR _i$100423[esp+32]
$LN8@sqlite3Run@2:
; Line 58798
	movzx	edx, BYTE PTR ?aCopy@?5??sqlite3RunVacuum@@9@9[edi]
	lea	ecx, DWORD PTR _meta$100422[esp+36]
	push	ecx
	push	edx
	mov	eax, ebx
	call	_sqlite3BtreeGetMeta
	mov	esi, eax
	add	esp, 8
; Line 58799
	test	esi, esi
	jne	SHORT $end_of_vacuum$100397
; Line 58800
	movzx	ebx, BYTE PTR ?aCopy@?5??sqlite3RunVacuum@@9@9[edi+1]
	movzx	edi, BYTE PTR ?aCopy@?5??sqlite3RunVacuum@@9@9[edi]
	add	ebx, DWORD PTR _meta$100422[esp+36]
	mov	ecx, DWORD PTR _pTemp$[esp+36]
	call	_sqlite3BtreeUpdateMeta
	mov	esi, eax
; Line 58801
	test	esi, esi
	jne	SHORT $end_of_vacuum$100397
	mov	eax, DWORD PTR _i$100423[esp+32]
; Line 58804
	mov	ebx, DWORD PTR _pMain$[esp+36]
	add	eax, 2
	cmp	eax, 8
	mov	DWORD PTR _i$100423[esp+32], eax
	jb	SHORT $LL39@sqlite3Run@2
	mov	edi, DWORD PTR _pTemp$[esp+36]
	push	ebx
	mov	ecx, edi
	call	_sqlite3BtreeCopyFile
	mov	esi, eax
	add	esp, 4
; Line 58805
	test	esi, esi
	jne	SHORT $end_of_vacuum$100397
; Line 58806
	call	_sqlite3BtreeCommit
	mov	esi, eax
; Line 58807
	test	esi, esi
	jne	SHORT $end_of_vacuum$100397
; Line 58808
	mov	edi, ebx
	call	_sqlite3BtreeCommit
	mov	esi, eax
$end_of_vacuum$100397:
; Line 58824
	mov	edi, DWORD PTR _pDb$[esp+36]
	mov	eax, DWORD PTR tv258[esp+36]
	xor	ebx, ebx
	cmp	edi, ebx
	mov	DWORD PTR [ebp+8], eax
	mov	BYTE PTR [ebp+20], 1
	je	SHORT $LN1@sqlite3Run@2
; Line 58826
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	call	_sqlite3BtreeClose
	add	esp, 4
; Line 58828
	mov	DWORD PTR [edi+4], ebx
; Line 58829
	mov	DWORD PTR [edi+20], ebx
$LN1@sqlite3Run@2:
; Line 58832
	push	ebx
	mov	ebx, ebp
	call	_sqlite3ResetInternalSchema
	add	esp, 4
	pop	edi
; Line 58834
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
; Line 58835
	add	esp, 20					; 00000014H
	ret	0
_sqlite3RunVacuum ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_declare_vtab
_TEXT	SEGMENT
_zErr$ = -208						; size = 4
_rc$ = -204						; size = 4
_sParse$ = -200						; size = 200
_db$ = 8						; size = 4
_zCreateTable$ = 12					; size = 4
_sqlite3_declare_vtab PROC				; COMDAT
; Line 59291
	sub	esp, 208				; 000000d0H
	push	ebx
	push	ebp
; Line 59295
	mov	ebp, DWORD PTR _db$[esp+212]
	xor	ebx, ebx
	push	esi
	mov	esi, DWORD PTR [ebp+208]
; Line 59298
	cmp	esi, ebx
	mov	DWORD PTR _rc$[esp+220], ebx
	mov	DWORD PTR _zErr$[esp+220], ebx
	jne	SHORT $LN3@sqlite3_de
; Line 59299
	push	ebx
	push	21					; 00000015H
	mov	eax, ebp
	call	_sqlite3Error
	add	esp, 8
	pop	esi
	pop	ebp
; Line 59300
	lea	eax, DWORD PTR [ebx+21]
	pop	ebx
; Line 59332
	add	esp, 208				; 000000d0H
	ret	0
$LN3@sqlite3_de:
; Line 59304
	push	200					; 000000c8H
	lea	eax, DWORD PTR _sParse$[esp+224]
	push	ebx
	push	eax
	call	_memset
; Line 59313
	mov	edx, DWORD PTR _zCreateTable$[esp+228]
	lea	ecx, DWORD PTR _zErr$[esp+232]
	push	ecx
	push	edx
	lea	eax, DWORD PTR _sParse$[esp+240]
	push	eax
	mov	BYTE PTR _sParse$[esp+432], 1
	mov	DWORD PTR _sParse$[esp+244], ebp
	call	_sqlite3RunParser
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN2@sqlite3_de
	mov	eax, DWORD PTR _sParse$[esp+384]
	cmp	eax, ebx
	je	SHORT $LN2@sqlite3_de
	cmp	DWORD PTR [eax+24], ebx
	jne	SHORT $LN2@sqlite3_de
	cmp	BYTE PTR [eax+57], bl
	jne	SHORT $LN2@sqlite3_de
; Line 59314
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [esi+8], ecx
; Line 59315
	mov	edx, DWORD PTR _sParse$[esp+384]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax
; Line 59316
	mov	ecx, DWORD PTR _sParse$[esp+384]
	mov	DWORD PTR [ecx+4], ebx
; Line 59317
	mov	edx, DWORD PTR _sParse$[esp+384]
	mov	DWORD PTR [edx+8], ebx
; Line 59318
	mov	DWORD PTR [ebp+208], ebx
; Line 59319
	jmp	SHORT $LN1@sqlite3_de
$LN2@sqlite3_de:
; Line 59320
	mov	eax, DWORD PTR _zErr$[esp+220]
	push	eax
	push	1
	mov	eax, ebp
	call	_sqlite3Error
; Line 59321
	mov	eax, DWORD PTR _zErr$[esp+228]
	add	esp, 8
	cmp	eax, ebx
	je	SHORT $LN9@sqlite3_de
	push	eax
	call	_free
	add	esp, 4
$LN9@sqlite3_de:
; Line 59322
	mov	DWORD PTR _rc$[esp+220], 1
$LN1@sqlite3_de:
	push	edi
; Line 59326
	mov	edi, DWORD PTR _sParse$[esp+236]
	cmp	edi, ebx
	mov	BYTE PTR _sParse$[esp+412], bl
	mov	esi, edi
	je	SHORT $LN19@sqlite3_de
	mov	eax, DWORD PTR [edi+76]
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN17@sqlite3_de
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN17@sqlite3_de
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN15@sqlite3_de
	jmp	SHORT $LN19@sqlite3_de
$LN17@sqlite3_de:
	call	_sqlite3VdbeReset
$LN15@sqlite3_de:
	call	_sqlite3VdbeDelete
$LN19@sqlite3_de:
; Line 59327
	mov	ecx, DWORD PTR _sParse$[esp+388]
	push	ecx
	call	_sqlite3DeleteTable
; Line 59331
	mov	ecx, DWORD PTR _rc$[esp+228]
	add	esp, 4
	mov	esi, ebp
	mov	DWORD PTR _sParse$[esp+388], ebx
	call	_sqlite3ApiExit
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 59332
	add	esp, 208				; 000000d0H
	ret	0
_sqlite3_declare_vtab ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@FFEDMJJH@read?9only?5table?$AA@	; `string'
PUBLIC	??_C@_0CE@EIECKKFD@Unsupported?5module?5operation?3?5xN@ ; `string'
PUBLIC	??_C@_0CG@PBHEAGPI@Unsupported?5module?5operation?3?5xC@ ; `string'
PUBLIC	??_C@_0CF@IBICBGHD@Unsupported?5module?5operation?3?5xR@ ; `string'
PUBLIC	??_C@_0BL@JCFDMLHP@database?5table?5is?5locked?3?5?$AA@ ; `string'
PUBLIC	??_C@_0DB@OFNJNGCG@SELECT?5name?0?5rootpage?0?5sql?5FROM?5@ ; `string'
PUBLIC	??_C@_0CJ@LALCBGBP@cannot?5commit?5?9?5no?5transaction?5i@ ; `string'
PUBLIC	??_C@_0CL@DIEDEFLK@cannot?5rollback?5?9?5no?5transaction@ ; `string'
PUBLIC	??_C@_0DA@CKKHGBEC@cannot?5start?5a?5transaction?5withi@ ; `string'
PUBLIC	??_C@_07FILNGEOC@cannot?5?$AA@			; `string'
PUBLIC	??_C@_0CK@OGHLELOO@?5transaction?5?9?5SQL?5statements?5in@ ; `string'
PUBLIC	??_C@_06IFNEBLAJ@commit?$AA@			; `string'
PUBLIC	??_C@_08FBLICIPL@rollback?$AA@			; `string'
PUBLIC	??_C@_0BH@BEFJIDGM@string?5or?5blob?5too?5big?$AA@ ; `string'
PUBLIC	_p$GSCopy$
PUBLIC	__$ArrayPad$
EXTRN	__allshr:PROC
EXTRN	__allrem:PROC
;	COMDAT ??_C@_0BA@FFEDMJJH@read?9only?5table?$AA@
CONST	SEGMENT
??_C@_0BA@FFEDMJJH@read?9only?5table?$AA@ DB 'read-only table', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EIECKKFD@Unsupported?5module?5operation?3?5xN@
CONST	SEGMENT
??_C@_0CE@EIECKKFD@Unsupported?5module?5operation?3?5xN@ DB 'Unsupported '
	DB	'module operation: xNext', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PBHEAGPI@Unsupported?5module?5operation?3?5xC@
CONST	SEGMENT
??_C@_0CG@PBHEAGPI@Unsupported?5module?5operation?3?5xC@ DB 'Unsupported '
	DB	'module operation: xColumn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IBICBGHD@Unsupported?5module?5operation?3?5xR@
CONST	SEGMENT
??_C@_0CF@IBICBGHD@Unsupported?5module?5operation?3?5xR@ DB 'Unsupported '
	DB	'module operation: xRowid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JCFDMLHP@database?5table?5is?5locked?3?5?$AA@
CONST	SEGMENT
??_C@_0BL@JCFDMLHP@database?5table?5is?5locked?3?5?$AA@ DB 'database tabl'
	DB	'e is locked: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@OFNJNGCG@SELECT?5name?0?5rootpage?0?5sql?5FROM?5@
CONST	SEGMENT
??_C@_0DB@OFNJNGCG@SELECT?5name?0?5rootpage?0?5sql?5FROM?5@ DB 'SELECT na'
	DB	'me, rootpage, sql FROM ''%q''.%s WHERE %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LALCBGBP@cannot?5commit?5?9?5no?5transaction?5i@
CONST	SEGMENT
??_C@_0CJ@LALCBGBP@cannot?5commit?5?9?5no?5transaction?5i@ DB 'cannot com'
	DB	'mit - no transaction is active', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DIEDEFLK@cannot?5rollback?5?9?5no?5transaction@
CONST	SEGMENT
??_C@_0CL@DIEDEFLK@cannot?5rollback?5?9?5no?5transaction@ DB 'cannot roll'
	DB	'back - no transaction is active', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CKKHGBEC@cannot?5start?5a?5transaction?5withi@
CONST	SEGMENT
??_C@_0DA@CKKHGBEC@cannot?5start?5a?5transaction?5withi@ DB 'cannot start'
	DB	' a transaction within a transaction', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FILNGEOC@cannot?5?$AA@
CONST	SEGMENT
??_C@_07FILNGEOC@cannot?5?$AA@ DB 'cannot ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OGHLELOO@?5transaction?5?9?5SQL?5statements?5in@
CONST	SEGMENT
??_C@_0CK@OGHLELOO@?5transaction?5?9?5SQL?5statements?5in@ DB ' transacti'
	DB	'on - SQL statements in progress', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFNEBLAJ@commit?$AA@
CONST	SEGMENT
??_C@_06IFNEBLAJ@commit?$AA@ DB 'commit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBLICIPL@rollback?$AA@
CONST	SEGMENT
??_C@_08FBLICIPL@rollback?$AA@ DB 'rollback', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BEFJIDGM@string?5or?5blob?5too?5big?$AA@
CONST	SEGMENT
??_C@_0BH@BEFJIDGM@string?5or?5blob?5too?5big?$AA@ DB 'string or blob too'
	DB	' big', 00H					; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3VdbeExec
_TEXT	SEGMENT
_pC$91025 = -656					; size = 4
_pTos$ = -656						; size = 4
tv8852 = -652						; size = 4
_rc$ = -652						; size = 4
_encoding$ = -645					; size = 1
_db$ = -644						; size = 4
tv9002 = -640						; size = 4
tv8982 = -640						; size = 4
tv6190 = -640						; size = 4
tv5005 = -640						; size = 4
tv4918 = -640						; size = 4
_zBuf$148570 = -640					; size = 4
_apArg$91526 = -640					; size = 4
_pCur$91505 = -640					; size = 4
_apArg$91473 = -640					; size = 4
_pVtab$91454 = -640					; size = 4
_n$91399 = -640						; size = 4
_pC$91254 = -640					; size = 4
_pC$91190 = -640					; size = 4
_pCx$90977 = -640					; size = 4
_wrFlag$90865 = -640					; size = 4
_zAffinity$90755 = -640					; size = 4
_zEndHdr$90694 = -640					; size = 4
_flags$90425 = -640					; size = 4
_n$90419 = -640						; size = 4
tv4894 = -636						; size = 4
_rc$148502 = -636					; size = 4
_nArg$91519 = -636					; size = 4
_res$91504 = -636					; size = 4
_pModule$91466 = -636					; size = 4
tv3092 = -636						; size = 4
_rx$91031 = -636					; size = 4
_pCrsr$90978 = -636					; size = 4
_file_format$90756 = -636				; size = 4
_p2$90659 = -636					; size = 4
_apVal$90478 = -636					; size = 4
_i$90402 = -636						; size = 4
_i$90370 = -636						; size = 4
tv5001 = -632						; size = 4
_pCx$90903 = -632					; size = 4
_containsNull$90749 = -632				; size = 4
_offset$90695 = -632					; size = 4
_res$90568 = -632					; size = 4
_pc$ = -628						; size = 4
_p$GSCopy$ = -624					; size = 4
tv8618 = -620						; size = 4
_nArg$91465 = -620					; size = 4
_aRoot$91316 = -620					; size = 4
_pC$91077 = -620					; size = 4
_pData0$90750 = -620					; size = 4
_aType$90663 = -620					; size = 4
_n$90479 = -620						; size = 4
_zNew$90399 = -620					; size = 4
_nHdr$90744 = -616					; size = 4
_pOp$ = -616						; size = 4
_pBt$148332 = -612					; size = 4
_nRoot$91315 = -612					; size = 4
_nZero$90746 = -612					; size = 4
_zRec$90661 = -612					; size = 4
_pMem$90388 = -612					; size = 4
_pVtabCursor$91453 = -608				; size = 4
_cnt$91032 = -608					; size = 4
_addRowid$90754 = -608					; size = 4
_nField$90665 = -608					; size = 4
_j$90403 = -608						; size = 4
_pFrom$90369 = -608					; size = 4
_i$90802 = -601						; size = 1
_affinity$90569 = -601					; size = 1
_p$148525 = -600					; size = 4
_p$148353 = -600					; size = 4
$T148227 = -600						; size = 4
_pVtab$91515 = -600					; size = 4
_pCur$91493 = -600					; size = 4
_pnErr$91320 = -600					; size = 4
_pCrsr$91214 = -600					; size = 4
_i$90975 = -600						; size = 4
_pC$90958 = -600					; size = 4
_pC$90925 = -600					; size = 4
_p2$90864 = -600					; size = 4
_jumpIfNull$90753 = -600				; size = 4
_b$90450 = -600						; size = 8
_a$90449 = -600						; size = 8
_zNewRecord$90740 = -588				; size = 4
_len$90763 = -588					; size = 4
_pCrsr$90662 = -588					; size = 4
_v$91024 = -584						; size = 8
tv4581 = -572						; size = 4
_pModule$91503 = -572					; size = 4
_pCur$91467 = -572					; size = 4
_pModule$91456 = -572					; size = 4
tv2865 = -572						; size = 4
_szHdrSz$90696 = -572					; size = 4
tv5670 = -568						; size = 4
$T148553 = -568						; size = 4
$T148391 = -568						; size = 4
_pModule$91517 = -568					; size = 4
_pModule$91492 = -568					; size = 4
_pC$91213 = -568					; size = 4
_iDb$90867 = -568					; size = 4
_nField$90752 = -568					; size = 4
_res$91471 = -564					; size = 4
_pRowid$90742 = -564					; size = 4
_aOffset$90664 = -564					; size = 4
_res$90930 = -560					; size = 4
_payloadSize$90657 = -556				; size = 4
_a$90504 = -552						; size = 8
tv5461 = -544						; size = 4
_pX$90866 = -544					; size = 4
_nVarint$90747 = -544					; size = 4
_res$90985 = -540					; size = 4
$T148389 = -536						; size = 4
_i$90863 = -536						; size = 4
_leaveOnStack$90751 = -536				; size = 4
_res$91259 = -532					; size = 4
_v$90522 = -528						; size = 8
_res$91192 = -520					; size = 4
_nProgressOps$ = -516					; size = 4
_nData$90743 = -512					; size = 8
_res$91030 = -500					; size = 4
_nByte$90400 = -496					; size = 8
tv8909 = -484						; size = 4
tv8866 = -484						; size = 4
_iMeta$90852 = -480					; size = 4
_avail$90697 = -476					; size = 4
_isWriteLock$91440 = -472				; size = 1
_pFirstColumn$90389 = -472				; size = 4
_res$91205 = -468					; size = 4
_iKey$91083 = -464					; size = 8
_v$91160 = -456						; size = 8
_nByte$90745 = -448					; size = 8
_n$91129 = -440						; size = 4
_pgno$90909 = -436					; size = 4
_iKey$91112 = -432					; size = 8
tv5505 = -424						; size = 8
_nErr$91318 = -412					; size = 4
_res$91011 = -408					; size = 4
_iMoved$91271 = -404					; size = 4
_res$91184 = -400					; size = 4
_iMeta$90834 = -396					; size = 4
_res$91235 = -392					; size = 4
_pgno$91284 = -388					; size = 4
tv5500 = -384						; size = 8
_res$90963 = -372					; size = 4
_R$90979 = -368						; size = 8
_v$90986 = -360						; size = 8
_rowid$91525 = -352					; size = 8
_v$91341 = -344						; size = 8
_iRow$91488 = -336					; size = 8
_rowid$91246 = -328					; size = 8
tv8123 = -320						; size = 8
_n64$91142 = -312					; size = 8
_initData$91297 = -304					; size = 16
_payloadSize64$90681 = -288				; size = 8
_ctx$91403 = -280					; size = 88
_sMem$90669 = -280					; size = 64
_ctx$90477 = -280					; size = 88
_sContext$91498 = -192					; size = 88
_ts$90371 = -104					; size = 64
_zTemp$90758 = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_sqlite3VdbeExec PROC					; COMDAT
; _p$ = ecx
; Line 33840
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 660				; 00000294H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+660], eax
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
; Line 33844
	mov	edi, DWORD PTR [esi]
; Line 33845
	mov	eax, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [edx+121]
	xor	ecx, ecx
; Line 33858
	cmp	DWORD PTR [esi+76], -1108210269		; bdf20da3H
; Line 38552
	mov	DWORD PTR _p$GSCopy$[esp+672], esi
	mov	DWORD PTR _rc$[esp+672], ecx
	mov	DWORD PTR _db$[esp+672], edi
	mov	BYTE PTR _encoding$[esp+672], al
	mov	DWORD PTR _nProgressOps$[esp+672], ecx
	je	SHORT $LN652@sqlite3Vdb@57
; Line 33858
	lea	eax, DWORD PTR [ecx+21]
; Line 38570
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+660]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN652@sqlite3Vdb@57:
; Line 33861
	cmp	DWORD PTR [esi+124], 7
	mov	ebx, DWORD PTR [esi+40]
	mov	DWORD PTR _pTos$[esp+672], ebx
	je	$no_mem$90290
; Line 33869
	mov	eax, DWORD PTR [esi+552]
	cmp	eax, ecx
	mov	DWORD PTR [esi+124], ecx
	je	SHORT $LN650@sqlite3Vdb@57
; Line 33870
	lea	ecx, DWORD PTR _pTos$[esp+672]
	push	ecx
	call	_popStack
; Line 33871
	mov	ebx, DWORD PTR _pTos$[esp+676]
	add	esp, 4
	mov	DWORD PTR [esi+552], 0
	xor	ecx, ecx
$LN650@sqlite3Vdb@57:
; Line 33873
	mov	BYTE PTR [esi+560], 0
; Line 33875
	cmp	DWORD PTR [edi+152], ecx
	mov	DWORD PTR [edi+284], ecx
	jne	$abort_due_to_interrupt$90295
; Line 33892
	mov	edx, DWORD PTR [esi+120]
	mov	DWORD PTR _pc$[esp+672], edx
	mov	eax, edi
	jmp	SHORT $LN648@sqlite3Vdb@57
$LL1371@sqlite3Vdb@57:
	mov	eax, DWORD PTR _db$[esp+672]
$LN648@sqlite3Vdb@57:
; Line 33895
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN645@sqlite3Vdb@57
	cmp	DWORD PTR _inMutex, 0
	jg	$no_mem$90290
$LN645@sqlite3Vdb@57:
; Line 33937
	cmp	DWORD PTR [eax+168], 0
	mov	ecx, DWORD PTR _pc$[esp+672]
	mov	edx, DWORD PTR [esi+20]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	edi, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _pOp$[esp+672], edi
	je	SHORT $LN644@sqlite3Vdb@57
; Line 33938
	mov	ecx, DWORD PTR _nProgressOps$[esp+672]
	cmp	DWORD PTR [eax+176], ecx
	jne	SHORT $LN643@sqlite3Vdb@57
; Line 33940
	call	_sqlite3SafetyOff
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 33941
	mov	eax, DWORD PTR _db$[esp+672]
	mov	edx, DWORD PTR [eax+172]
	mov	eax, DWORD PTR [eax+168]
	push	edx
	call	eax
	mov	edx, eax
; Line 33942
	mov	eax, DWORD PTR _db$[esp+676]
	add	esp, 4
	call	_sqlite3SafetyOn
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 33943
	test	edx, edx
	jne	$LN1120@sqlite3Vdb@57
; Line 33947
	mov	DWORD PTR _nProgressOps$[esp+672], edx
$LN643@sqlite3Vdb@57:
; Line 33949
	add	DWORD PTR _nProgressOps$[esp+672], 1
$LN644@sqlite3Vdb@57:
; Line 33970
	mov	al, BYTE PTR [edi]
	movzx	ecx, al
	mov	DWORD PTR tv4894[esp+672], ecx
	add	ecx, -1
	cmp	ecx, 141				; 0000008dH
	ja	$LN647@sqlite3Vdb@57
	jmp	DWORD PTR $LN1454@sqlite3Vdb@57[ecx*4]
$LN637@sqlite3Vdb@57:
; Line 34015
	mov	ecx, DWORD PTR _db$[esp+672]
	cmp	DWORD PTR [ecx+152], 0
	jne	$abort_due_to_interrupt$90295
; Line 34016
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 34017
	jmp	$LN647@sqlite3Vdb@57
$LN635@sqlite3Vdb@57:
; Line 34032
	mov	edx, DWORD PTR _pc$[esp+672]
	mov	eax, DWORD PTR [esi+540]
	add	edx, 1
	mov	DWORD PTR [esi+eax*4+140], edx
	add	DWORD PTR [esi+540], 1
; Line 34033
	mov	ecx, DWORD PTR [edi+8]
	sub	ecx, 1
	mov	DWORD PTR _pc$[esp+672], ecx
; Line 34034
	jmp	$LN647@sqlite3Vdb@57
$LN634@sqlite3Vdb@57:
; Line 34045
	add	DWORD PTR [esi+540], -1
	mov	eax, DWORD PTR [esi+540]
; Line 34046
	mov	esi, DWORD PTR [esi+eax*4+140]
	sub	esi, 1
	mov	DWORD PTR _pc$[esp+672], esi
; Line 34047
	jmp	$LN647@sqlite3Vdb@57
$LN630@sqlite3Vdb@57:
; Line 34091
	add	ebx, 64					; 00000040H
; Line 34092
	mov	WORD PTR [ebx+24], 4
; Line 34093
	mov	eax, DWORD PTR [edi+4]
	cdq
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR _pTos$[esp+672], ebx
	mov	DWORD PTR [ebx+4], edx
; Line 34094
	jmp	$LN647@sqlite3Vdb@57
$LN629@sqlite3Vdb@57:
; Line 34103
	add	ebx, 64					; 00000040H
; Line 34105
	mov	WORD PTR [ebx+24], 162			; 000000a2H
; Line 34106
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR _pTos$[esp+672], ebx
	mov	DWORD PTR [ebx+16], eax
; Line 34107
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL1276@sqlite3Vdb@57:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL1276@sqlite3Vdb@57
	sub	eax, edx
	mov	DWORD PTR [ebx+20], eax
; Line 34109
	mov	esi, ebx
	mov	BYTE PTR [ebx+27], 1
	call	_sqlite3VdbeIntValue
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], edx
; Line 34110
	or	WORD PTR [ebx+24], 4
; Line 34111
	jmp	$LN647@sqlite3Vdb@57
$LN628@sqlite3Vdb@57:
; Line 34119
	add	ebx, 64					; 00000040H
; Line 34120
	mov	WORD PTR [ebx+24], 162			; 000000a2H
; Line 34121
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR _pTos$[esp+672], ebx
	mov	DWORD PTR [ebx+16], eax
; Line 34122
	lea	esi, DWORD PTR [eax+1]
	npad	2
$LL1277@sqlite3Vdb@57:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL1277@sqlite3Vdb@57
	sub	eax, esi
	mov	DWORD PTR [ebx+20], eax
; Line 34124
	mov	esi, ebx
	mov	BYTE PTR [ebx+27], 1
	call	_sqlite3VdbeRealValue
	fstp	QWORD PTR [ebx+8]
; Line 34126
	movzx	ecx, BYTE PTR _encoding$[esp+672]
	or	WORD PTR [ebx+24], 8
	mov	eax, ebx
	call	_sqlite3VdbeChangeEncoding
; Line 34127
	jmp	$LN647@sqlite3Vdb@57
$LN627@sqlite3Vdb@57:
; Line 34138
	mov	edx, DWORD PTR [edi+12]
	mov	eax, edx
	mov	BYTE PTR [edi], 26			; 0000001aH
	lea	esi, DWORD PTR [eax+1]
	npad	3
$LL1278@sqlite3Vdb@57:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL1278@sqlite3Vdb@57
	sub	eax, esi
; Line 34143
	cmp	BYTE PTR _encoding$[esp+672], 1
	mov	DWORD PTR [edi+4], eax
	je	SHORT $LN626@sqlite3Vdb@57
; Line 34145
	push	0
	push	1
	or	esi, -1
	push	esi
	add	ebx, 64					; 00000040H
	push	edx
	push	ebx
	mov	DWORD PTR _pTos$[esp+692], ebx
	call	_sqlite3VdbeMemSetStr
; Line 34146
	movzx	ecx, BYTE PTR _encoding$[esp+692]
	add	esp, 20					; 00000014H
	mov	eax, ebx
	call	_sqlite3VdbeChangeEncoding
	test	eax, eax
	jne	$no_mem$90290
; Line 34147
	mov	eax, ebx
	call	_sqlite3VdbeMemDynamicify
	test	eax, eax
	jne	$no_mem$90290
; Line 34148
	mov	dx, WORD PTR [ebx+24]
	and	dx, 65471				; 0000ffbfH
; Line 34149
	or	dx, 128					; 00000080H
	mov	WORD PTR [ebx+24], dx
; Line 34150
	cmp	DWORD PTR [edi+16], esi
	jne	SHORT $LN623@sqlite3Vdb@57
; Line 34151
	mov	eax, DWORD PTR [edi+12]
	push	eax
	call	_sqlite3FreeX
	add	esp, 4
$LN623@sqlite3Vdb@57:
; Line 34153
	mov	DWORD PTR [edi+16], esi
; Line 34154
	mov	ecx, DWORD PTR [ebx+16]
	mov	DWORD PTR [edi+12], ecx
; Line 34155
	mov	edx, DWORD PTR [ebx+20]
	mov	DWORD PTR [edi+4], edx
; Line 34157
	jmp	$LN647@sqlite3Vdb@57
$LN626@sqlite3Vdb@57:
; Line 34174
	mov	dl, BYTE PTR _encoding$[esp+672]
	add	ebx, 64					; 00000040H
	mov	WORD PTR [ebx+24], 162			; 000000a2H
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR [ebx+16], eax
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx+20], ecx
	mov	DWORD PTR _pTos$[esp+672], ebx
	mov	BYTE PTR [ebx+27], dl
; Line 34175
	jmp	$LN647@sqlite3Vdb@57
$LN621@sqlite3Vdb@57:
; Line 34183
	add	ebx, 64					; 00000040H
; Line 34184
	mov	WORD PTR [ebx+24], 1
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 34185
	mov	DWORD PTR [ebx+20], 0
; Line 34186
	jmp	$LN647@sqlite3Vdb@57
$LN620@sqlite3Vdb@57:
; Line 34201
	mov	edx, DWORD PTR [edi+12]
	mov	eax, edx
	mov	BYTE PTR [edi], 123			; 0000007bH
	lea	esi, DWORD PTR [eax+1]
$LL1279@sqlite3Vdb@57:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL1279@sqlite3Vdb@57
	sub	eax, esi
	shr	eax, 1
	mov	DWORD PTR [edi+4], eax
; Line 34204
	je	SHORT $LN619@sqlite3Vdb@57
; Line 34205
	push	edx
	call	_sqlite3HexToBlob
	mov	esi, eax
	add	esp, 4
; Line 34206
	test	esi, esi
	je	$no_mem$90290
; Line 34207
	cmp	DWORD PTR [edi+16], -1
	jne	SHORT $LN617@sqlite3Vdb@57
; Line 34208
	mov	eax, DWORD PTR [edi+12]
	push	eax
	call	_sqlite3FreeX
	add	esp, 4
$LN617@sqlite3Vdb@57:
; Line 34210
	mov	DWORD PTR [edi+12], esi
; Line 34211
	mov	DWORD PTR [edi+16], -1
; Line 34212
	jmp	SHORT $LN616@sqlite3Vdb@57
$LN619@sqlite3Vdb@57:
; Line 34213
	cmp	DWORD PTR [edi+16], -1
	jne	SHORT $LN615@sqlite3Vdb@57
; Line 34214
	push	edx
	call	_sqlite3FreeX
	add	esp, 4
$LN615@sqlite3Vdb@57:
; Line 34216
	mov	DWORD PTR [edi+16], -2			; fffffffeH
; Line 34217
	mov	DWORD PTR [edi+12], OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN616@sqlite3Vdb@57:
; Line 34235
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [edi+12]
	push	0
	push	0
	push	ecx
	add	ebx, 64					; 00000040H
	push	edx
	push	ebx
	mov	DWORD PTR _pTos$[esp+692], ebx
	call	_sqlite3VdbeMemSetStr
; Line 34236
	mov	al, BYTE PTR _encoding$[esp+692]
	add	esp, 20					; 00000014H
	mov	BYTE PTR [ebx+27], al
; Line 34237
	jmp	$LN647@sqlite3Vdb@57
$LN613@sqlite3Vdb@57:
; Line 34251
	mov	edi, DWORD PTR [edi+4]
; Line 34255
	mov	ecx, DWORD PTR [esi+64]
	sub	edi, 1
	shl	edi, 6
	lea	esi, DWORD PTR [ecx+edi]
; Line 34256
	mov	ecx, esi
	call	_sqlite3VdbeMemTooBig
	test	eax, eax
	jne	$too_big$90359
; Line 34259
	add	ebx, 64					; 00000040H
; Line 34260
	push	128					; 00000080H
	mov	eax, esi
	mov	edx, ebx
	mov	DWORD PTR _pTos$[esp+676], ebx
	call	_sqlite3VdbeMemShallowCopy
	add	esp, 4
; Line 34261
	jmp	$LN647@sqlite3Vdb@57
$LN611@sqlite3Vdb@57:
; Line 34270
	mov	eax, DWORD PTR [edi+4]
	lea	edx, DWORD PTR _pTos$[esp+672]
	push	edx
; Line 34272
	jmp	$LN1451@sqlite3Vdb@57
$LN610@sqlite3Vdb@57:
; Line 34291
	mov	eax, DWORD PTR [edi+4]
	shl	eax, 6
	mov	ecx, eax
	mov	eax, ebx
; Line 34293
	add	ebx, 64					; 00000040H
	sub	eax, ecx
; Line 34294
	push	256					; 00000100H
	mov	edx, ebx
	mov	DWORD PTR _pTos$[esp+676], ebx
	call	_sqlite3VdbeMemShallowCopy
	add	esp, 4
; Line 34295
	cmp	DWORD PTR [edi+8], 0
	je	$LN647@sqlite3Vdb@57
; Line 34296
	test	WORD PTR [ebx+24], 256			; 00000100H
	je	$LN647@sqlite3Vdb@57
	mov	eax, ebx
	call	_sqlite3VdbeMemMakeWriteable
	test	eax, eax
	jne	$no_mem$90290
; Line 34298
	jmp	$LN647@sqlite3Vdb@57
$LN607@sqlite3Vdb@57:
; Line 34312
	mov	edx, DWORD PTR _pOp$[esp+672]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 6
	mov	esi, ebx
	sub	esi, eax
; Line 34317
	test	WORD PTR [ebx+24], 256			; 00000100H
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR _ts$90371[esp+672]
	mov	DWORD PTR _pFrom$90369[esp+672], esi
	rep movsd
	je	SHORT $LN606@sqlite3Vdb@57
	mov	eax, ebx
	call	_sqlite3VdbeMemMakeWriteable
	test	eax, eax
	jne	$no_mem$90290
$LN606@sqlite3Vdb@57:
; Line 34318
	mov	ecx, DWORD PTR _pOp$[esp+672]
	cmp	DWORD PTR [ecx+4], 0
	mov	DWORD PTR _i$90370[esp+672], 0
	jle	SHORT $LN603@sqlite3Vdb@57
	mov	edx, DWORD PTR _pFrom$90369[esp+672]
	add	edx, 64					; 00000040H
	mov	DWORD PTR tv8618[esp+672], edx
$LL605@sqlite3Vdb@57:
; Line 34319
	mov	eax, DWORD PTR tv8618[esp+672]
	test	WORD PTR [eax+24], 256			; 00000100H
	je	SHORT $LN602@sqlite3Vdb@57
	call	_sqlite3VdbeMemMakeWriteable
	test	eax, eax
	jne	$no_mem$90290
$LN602@sqlite3Vdb@57:
; Line 34321
	mov	eax, DWORD PTR tv8618[esp+672]
	mov	edi, DWORD PTR _pFrom$90369[esp+672]
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	rep movsd
; Line 34322
	test	WORD PTR [eax-40], 512			; 00000200H
	je	SHORT $LN604@sqlite3Vdb@57
	lea	ecx, DWORD PTR [eax-32]
; Line 34325
	mov	DWORD PTR [eax-48], ecx
$LN604@sqlite3Vdb@57:
	mov	ecx, DWORD PTR _i$90370[esp+672]
	mov	edx, DWORD PTR _pOp$[esp+672]
	add	DWORD PTR _pFrom$90369[esp+672], 64	; 00000040H
	add	ecx, 1
	add	eax, 64					; 00000040H
	cmp	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _i$90370[esp+672], ecx
	mov	DWORD PTR tv8618[esp+672], eax
	jl	SHORT $LL605@sqlite3Vdb@57
$LN603@sqlite3Vdb@57:
; Line 34328
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _ts$90371[esp+672]
	mov	edi, ebx
	rep movsd
; Line 34329
	test	WORD PTR [ebx+24], 512			; 00000200H
	je	$LN647@sqlite3Vdb@57
; Line 34332
	lea	eax, DWORD PTR [ebx+32]
	mov	DWORD PTR [ebx+16], eax
; Line 34334
	jmp	$LN647@sqlite3Vdb@57
$LN599@sqlite3Vdb@57:
; Line 34344
	mov	ecx, DWORD PTR [edi+4]
	shl	ecx, 6
; Line 34347
	push	ebx
	sub	ebx, ecx
	call	_sqlite3VdbeMemMove
	add	esp, 4
; Line 34348
	sub	DWORD PTR _pTos$[esp+672], 64		; 00000040H
; Line 34349
	jmp	$LN1344@sqlite3Vdb@57
$LN590@sqlite3Vdb@57:
; Line 34419
	mov	edi, DWORD PTR [edi+4]
	add	edi, 2
; Line 34420
	mov	edx, edi
	shl	edx, 6
	mov	eax, ebx
	sub	eax, edx
	lea	esi, DWORD PTR [eax+64]
; Line 34421
	xor	eax, eax
; Line 34422
	cmp	edi, eax
	mov	DWORD PTR tv5005[esp+672], esi
	mov	DWORD PTR _nByte$90400[esp+672], eax
	mov	DWORD PTR _nByte$90400[esp+676], eax
	mov	DWORD PTR _i$90402[esp+672], eax
	jle	$LN584@sqlite3Vdb@57
	npad	3
$LL589@sqlite3Vdb@57:
; Line 34424
	movzx	eax, WORD PTR [esi+24]
	test	al, 1
	jne	SHORT $LN1280@sqlite3Vdb@57
; Line 34428
	test	eax, 2048				; 00000800H
	je	SHORT $LN655@sqlite3Vdb@57
	call	_sqlite3VdbeMemExpandBlob
$LN655@sqlite3Vdb@57:
; Line 34429
	test	BYTE PTR [esi+24], 18			; 00000012H
	jne	SHORT $LN585@sqlite3Vdb@57
	movzx	ebx, BYTE PTR _encoding$[esp+672]
	call	_sqlite3VdbeMemStringify
	test	eax, eax
	jne	$LN1352@sqlite3Vdb@57
	mov	ebx, DWORD PTR _pTos$[esp+672]
$LN585@sqlite3Vdb@57:
; Line 34430
	mov	eax, DWORD PTR [esi+20]
	mov	ecx, DWORD PTR _i$90402[esp+672]
	cdq
	add	DWORD PTR _nByte$90400[esp+672], eax
	mov	eax, DWORD PTR _nByte$90400[esp+676]
	adc	eax, edx
	add	ecx, 1
	add	esi, 64					; 00000040H
	cmp	ecx, edi
	mov	DWORD PTR _nByte$90400[esp+676], eax
	mov	DWORD PTR _i$90402[esp+672], ecx
	jl	SHORT $LL589@sqlite3Vdb@57
; Line 34433
	test	eax, eax
	jg	SHORT $LN584@sqlite3Vdb@57
	jl	SHORT $LN1280@sqlite3Vdb@57
	cmp	DWORD PTR _nByte$90400[esp+672], 0
	jae	SHORT $LN584@sqlite3Vdb@57
$LN1280@sqlite3Vdb@57:
; Line 34438
	mov	ecx, DWORD PTR _pOp$[esp+672]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN583@sqlite3Vdb@57
; Line 34439
	lea	edx, DWORD PTR _pTos$[esp+672]
	push	edx
	mov	eax, edi
	call	_popStack
	mov	ebx, DWORD PTR _pTos$[esp+676]
	add	esp, 4
$LN583@sqlite3Vdb@57:
; Line 34441
	add	ebx, 64					; 00000040H
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 34442
	mov	WORD PTR [ebx+24], 1
; Line 34443
	jmp	$LN647@sqlite3Vdb@57
$LN584@sqlite3Vdb@57:
; Line 34447
	mov	ecx, DWORD PTR _nByte$90400[esp+672]
	add	ecx, 2
	adc	eax, 0
	test	eax, eax
	jg	$too_big$90359
	jl	SHORT $LN1281@sqlite3Vdb@57
	cmp	ecx, 1000000000				; 3b9aca00H
	ja	$too_big$90359
$LN1281@sqlite3Vdb@57:
; Line 34450
	mov	ecx, DWORD PTR _nByte$90400[esp+672]
	add	ecx, 2
	call	_sqlite3MallocRaw
; Line 34451
	test	eax, eax
	mov	DWORD PTR _zNew$90399[esp+672], eax
	je	$no_mem$90290
; Line 34454
	test	edi, edi
	mov	DWORD PTR _j$90403[esp+672], 0
	jle	SHORT $LN577@sqlite3Vdb@57
	mov	esi, DWORD PTR tv5005[esp+672]
	add	esi, 16					; 00000010H
	mov	DWORD PTR tv3092[esp+672], edi
$LL579@sqlite3Vdb@57:
; Line 34455
	mov	eax, DWORD PTR [esi+4]
; Line 34457
	mov	edx, DWORD PTR _zNew$90399[esp+672]
	mov	ecx, DWORD PTR _j$90403[esp+672]
	push	eax
	mov	DWORD PTR _n$90419[esp+676], eax
	mov	eax, DWORD PTR [esi]
	push	eax
	add	ecx, edx
	push	ecx
	call	_memcpy
; Line 34458
	mov	eax, DWORD PTR _n$90419[esp+684]
	add	DWORD PTR _j$90403[esp+684], eax
	add	esp, 12					; 0000000cH
	add	esi, 64					; 00000040H
	sub	DWORD PTR tv3092[esp+672], 1
	jne	SHORT $LL579@sqlite3Vdb@57
$LN577@sqlite3Vdb@57:
; Line 34460
	mov	esi, DWORD PTR _j$90403[esp+672]
	mov	eax, DWORD PTR _zNew$90399[esp+672]
; Line 34464
	mov	ecx, DWORD PTR _pOp$[esp+672]
	mov	BYTE PTR [esi+eax], 0
	mov	BYTE PTR [esi+eax+1], 0
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN576@sqlite3Vdb@57
; Line 34465
	lea	edx, DWORD PTR _pTos$[esp+672]
	push	edx
	mov	eax, edi
	call	_popStack
	mov	ebx, DWORD PTR _pTos$[esp+676]
	mov	eax, DWORD PTR _zNew$90399[esp+676]
	add	esp, 4
$LN576@sqlite3Vdb@57:
; Line 34471
	mov	cl, BYTE PTR _encoding$[esp+672]
	add	ebx, 64					; 00000040H
	mov	DWORD PTR [ebx+20], esi
	mov	WORD PTR [ebx+24], 98			; 00000062H
	mov	DWORD PTR [ebx+28], 0
	mov	BYTE PTR [ebx+27], cl
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 34472
	mov	DWORD PTR [ebx+16], eax
; Line 34474
	jmp	$LN647@sqlite3Vdb@57
$LN575@sqlite3Vdb@57:
; Line 34531
	movzx	eax, WORD PTR [ebx-40]
	movzx	edx, WORD PTR [ebx+24]
	lea	esi, DWORD PTR [ebx-64]
	movzx	ecx, ax
	movzx	edx, dx
	or	ecx, edx
; Line 34532
	test	cl, 1
	mov	DWORD PTR tv5001[esp+672], esi
	mov	DWORD PTR _flags$90425[esp+672], ecx
	je	SHORT $LN574@sqlite3Vdb@57
; Line 34533
	movzx	eax, WORD PTR [ebx+24]
	test	al, 64					; 00000040H
	je	SHORT $LN573@sqlite3Vdb@57
$LN1446@sqlite3Vdb@57:
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN544@sqlite3Vdb@57:
	mov	esi, DWORD PTR tv5001[esp+672]
$LN573@sqlite3Vdb@57:
; Line 34535
	test	BYTE PTR [esi+24], 64			; 00000040H
	mov	DWORD PTR _pTos$[esp+672], esi
	je	SHORT $LN572@sqlite3Vdb@57
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN572@sqlite3Vdb@57:
; Line 34536
	mov	WORD PTR [esi+24], 1
	jmp	$LN1344@sqlite3Vdb@57
$LN574@sqlite3Vdb@57:
; Line 34537
	movzx	ecx, WORD PTR [ebx+24]
	and	al, cl
	test	al, 4
	je	$LN570@sqlite3Vdb@57
; Line 34541
	mov	edx, DWORD PTR tv4894[esp+672]
	mov	edi, DWORD PTR [esi]
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebx+4]
	mov	esi, DWORD PTR [esi+4]
	add	edx, -78				; ffffffb2H
	cmp	edx, 3
	ja	SHORT $LN562@sqlite3Vdb@57
	jmp	DWORD PTR $LN1455@sqlite3Vdb@57[edx*4]
$LN567@sqlite3Vdb@57:
; Line 34542
	add	edi, eax
	adc	esi, ecx
	jmp	SHORT $LN568@sqlite3Vdb@57
$LN566@sqlite3Vdb@57:
; Line 34543
	sub	edi, eax
	sbb	esi, ecx
	jmp	SHORT $LN568@sqlite3Vdb@57
$LN565@sqlite3Vdb@57:
; Line 34544
	push	ecx
	push	eax
	push	esi
	push	edi
	call	__allmul
	jmp	SHORT $LN1429@sqlite3Vdb@57
$LN564@sqlite3Vdb@57:
; Line 34546
	mov	edx, eax
	or	edx, ecx
	je	$divide_by_zero$90443
; Line 34547
	push	ecx
	push	eax
	push	esi
	push	edi
	call	__alldiv
; Line 34548
	jmp	SHORT $LN1429@sqlite3Vdb@57
$LN562@sqlite3Vdb@57:
; Line 34551
	mov	edx, eax
	or	edx, ecx
	je	$divide_by_zero$90443
; Line 34552
	push	ecx
	push	eax
	push	esi
	push	edi
	call	__allrem
$LN1429@sqlite3Vdb@57:
	mov	edi, eax
	mov	esi, edx
$LN568@sqlite3Vdb@57:
; Line 34556
	movzx	eax, WORD PTR [ebx+24]
	test	al, 64					; 00000040H
	je	SHORT $LN560@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN560@sqlite3Vdb@57:
; Line 34557
	mov	ebx, DWORD PTR tv5001[esp+672]
; Line 34558
	test	BYTE PTR [ebx+24], 64			; 00000040H
	mov	DWORD PTR _pTos$[esp+672], ebx
	je	SHORT $LN559@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN559@sqlite3Vdb@57:
; Line 34559
	mov	DWORD PTR [ebx], edi
	mov	DWORD PTR [ebx+4], esi
; Line 34560
	mov	WORD PTR [ebx+24], 4
; Line 34561
	jmp	$LN1344@sqlite3Vdb@57
$LN570@sqlite3Vdb@57:
; Line 34563
	mov	esi, ebx
	call	_sqlite3VdbeRealValue
	fstp	QWORD PTR _a$90449[esp+672]
; Line 34564
	mov	esi, DWORD PTR tv5001[esp+672]
	call	_sqlite3VdbeRealValue
; Line 34565
	movzx	eax, BYTE PTR [edi]
	add	eax, -78				; ffffffb2H
	cmp	eax, 3
	ja	SHORT $LN550@sqlite3Vdb@57
	jmp	DWORD PTR $LN1456@sqlite3Vdb@57[eax*4]
$LN555@sqlite3Vdb@57:
; Line 34566
	fadd	QWORD PTR _a$90449[esp+672]
	jmp	SHORT $LN1430@sqlite3Vdb@57
$LN554@sqlite3Vdb@57:
; Line 34567
	fsub	QWORD PTR _a$90449[esp+672]
	jmp	SHORT $LN1430@sqlite3Vdb@57
$LN553@sqlite3Vdb@57:
; Line 34568
	fmul	QWORD PTR _a$90449[esp+672]
	jmp	SHORT $LN1430@sqlite3Vdb@57
$LN552@sqlite3Vdb@57:
; Line 34570
	fldz
	fld	QWORD PTR _a$90449[esp+672]
	fucom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 68					; 00000044H
	jnp	$LN1424@sqlite3Vdb@57
; Line 34571
	fdivp	ST(1), ST(0)
; Line 34572
	jmp	SHORT $LN1430@sqlite3Vdb@57
$LN550@sqlite3Vdb@57:
; Line 34575
	fld	QWORD PTR _a$90449[esp+672]
	call	__ftol2
	mov	edi, edx
	mov	esi, eax
; Line 34577
	or	eax, edi
	je	$LN1431@sqlite3Vdb@57
; Line 34578
	call	__ftol2
	push	edi
	push	esi
	push	edx
	push	eax
	call	__allrem
	mov	DWORD PTR tv8123[esp+672], eax
	mov	DWORD PTR tv8123[esp+676], edx
	fild	QWORD PTR tv8123[esp+672]
$LN1430@sqlite3Vdb@57:
	fst	QWORD PTR _b$90450[esp+672]
; Line 34582
	fld	ST(0)
	fucomp	ST(1)
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1431@sqlite3Vdb@57
; Line 34585
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN547@sqlite3Vdb@57
	push	ebx
	fstp	ST(0)
	call	_sqlite3VdbeMemRelease
	fld	QWORD PTR _b$90450[esp+676]
	add	esp, 4
$LN547@sqlite3Vdb@57:
; Line 34586
	mov	esi, DWORD PTR tv5001[esp+672]
; Line 34587
	test	BYTE PTR [esi+24], 64			; 00000040H
	mov	DWORD PTR _pTos$[esp+672], esi
	je	SHORT $LN546@sqlite3Vdb@57
	push	esi
	fstp	ST(0)
	call	_sqlite3VdbeMemRelease
	fld	QWORD PTR _b$90450[esp+676]
	add	esp, 4
$LN546@sqlite3Vdb@57:
; Line 34589
	mov	eax, 8
	fstp	QWORD PTR [esi+8]
; Line 34590
	test	BYTE PTR _flags$90425[esp+672], al
	mov	WORD PTR [esi+24], ax
	jne	$LN1344@sqlite3Vdb@57
; Line 34591
	call	_sqlite3VdbeIntegerAffinity
; Line 34594
	jmp	$LN1344@sqlite3Vdb@57
$LN1424@sqlite3Vdb@57:
; Line 34570
	fstp	ST(0)
$LN1431@sqlite3Vdb@57:
	fstp	ST(0)
$divide_by_zero$90443:
; Line 34597
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	$LN544@sqlite3Vdb@57
; Line 34601
	jmp	$LN1446@sqlite3Vdb@57
$LN541@sqlite3Vdb@57:
; Line 34640
	mov	eax, DWORD PTR [edi+8]
; Line 34642
	mov	ecx, DWORD PTR [esi+44]
	mov	DWORD PTR _apVal$90478[esp+672], ecx
; Line 34645
	mov	edx, eax
	shl	edx, 6
	mov	ecx, ebx
	sub	ecx, edx
	add	ecx, 64					; 00000040H
; Line 34646
	xor	edx, edx
	test	eax, eax
	mov	DWORD PTR _n$90479[esp+672], eax
	jle	SHORT $LN538@sqlite3Vdb@57
	npad	1
$LL540@sqlite3Vdb@57:
; Line 34647
	mov	eax, DWORD PTR _apVal$90478[esp+672]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 34648
	call	__storeTypeInfo
	add	edx, 1
	add	ecx, 64					; 00000040H
	cmp	edx, DWORD PTR _n$90479[esp+672]
	jl	SHORT $LL540@sqlite3Vdb@57
$LN538@sqlite3Vdb@57:
; Line 34652
	cmp	DWORD PTR [edi+16], -5			; fffffffbH
	jne	SHORT $LN537@sqlite3Vdb@57
; Line 34653
	mov	ecx, DWORD PTR [edi+12]
; Line 34654
	xor	eax, eax
	mov	DWORD PTR _ctx$90477[esp+676], eax
; Line 34655
	jmp	SHORT $LN1432@sqlite3Vdb@57
$LN537@sqlite3Vdb@57:
; Line 34656
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR _ctx$90477[esp+676], eax
; Line 34657
	mov	ecx, DWORD PTR [eax]
	xor	eax, eax
$LN1432@sqlite3Vdb@57:
	mov	DWORD PTR _ctx$90477[esp+672], ecx
; Line 34660
	mov	WORD PTR _ctx$90477[esp+704], 1
; Line 34661
	mov	DWORD PTR _ctx$90477[esp+696], eax
; Line 34662
	mov	DWORD PTR _ctx$90477[esp+708], eax
; Line 34663
	mov	BYTE PTR _ctx$90477[esp+748], 0
; Line 34664
	cmp	BYTE PTR [ecx+3], 0
	je	SHORT $LN535@sqlite3Vdb@57
; Line 34668
	mov	edx, DWORD PTR [edi-8]
	mov	DWORD PTR _ctx$90477[esp+752], edx
$LN535@sqlite3Vdb@57:
; Line 34670
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3SafetyOff
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 34671
	mov	eax, DWORD PTR _apVal$90478[esp+672]
	mov	edx, DWORD PTR _n$90479[esp+672]
	mov	ecx, DWORD PTR [ecx+16]
	push	eax
	push	edx
	lea	eax, DWORD PTR _ctx$90477[esp+680]
	push	eax
	call	ecx
; Line 34672
	mov	eax, DWORD PTR _db$[esp+684]
	add	esp, 12					; 0000000cH
	call	_sqlite3SafetyOn
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 34673
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN532@sqlite3Vdb@57
	cmp	DWORD PTR _inMutex, eax
	jg	$no_mem$90290
$LN532@sqlite3Vdb@57:
; Line 34674
	mov	eax, DWORD PTR _n$90479[esp+672]
	lea	edx, DWORD PTR _pTos$[esp+672]
	push	edx
	call	_popStack
; Line 34679
	mov	ebx, DWORD PTR _ctx$90477[esp+680]
	add	esp, 4
	test	ebx, ebx
	je	SHORT $LN531@sqlite3Vdb@57
; Line 34680
	mov	eax, DWORD PTR [edi+4]
	push	eax
	call	_sqlite3VdbeDeleteAuxData
; Line 34681
	mov	eax, DWORD PTR _pOp$[esp+676]
	mov	ecx, DWORD PTR _ctx$90477[esp+680]
; Line 34682
	mov	esi, DWORD PTR _p$GSCopy$[esp+676]
	add	esp, 4
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], -7			; fffffff9H
$LN531@sqlite3Vdb@57:
; Line 34686
	cmp	BYTE PTR _ctx$90477[esp+748], 0
	je	SHORT $LN530@sqlite3Vdb@57
; Line 34687
	push	0
	mov	al, 1
	lea	ecx, DWORD PTR _ctx$90477[esp+684]
	call	_sqlite3ValueText
	push	eax
	add	esi, 556				; 0000022cH
	push	esi
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
; Line 34688
	mov	DWORD PTR _rc$[esp+672], 1
$LN530@sqlite3Vdb@57:
; Line 34692
	movzx	ecx, BYTE PTR _encoding$[esp+672]
	lea	eax, DWORD PTR _ctx$90477[esp+680]
	call	_sqlite3VdbeChangeEncoding
; Line 34693
	mov	ebx, DWORD PTR _pTos$[esp+672]
	add	ebx, 64					; 00000040H
; Line 34695
	lea	edx, DWORD PTR _ctx$90477[esp+680]
	push	edx
	mov	DWORD PTR _pTos$[esp+676], ebx
	mov	WORD PTR [ebx+24], 0
	call	_sqlite3VdbeMemMove
	add	esp, 4
; Line 34696
	mov	ecx, ebx
	call	_sqlite3VdbeMemTooBig
	test	eax, eax
	je	$LN1344@sqlite3Vdb@57
$LN1353@sqlite3Vdb@57:
; Line 38539
	mov	ebx, DWORD PTR _pTos$[esp+672]
$too_big$90359:
; Line 38530
	mov	esi, DWORD PTR _p$GSCopy$[esp+672]
	push	0
	lea	ecx, DWORD PTR [esi+556]
	push	OFFSET ??_C@_0BH@BEFJIDGM@string?5or?5blob?5too?5big?$AA@
	push	ecx
	call	_sqlite3SetString
; Line 38531
	mov	DWORD PTR _rc$[esp+684], 18		; 00000012H
	mov	edx, DWORD PTR _rc$[esp+684]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+124], edx
	mov	edi, 1
	jmp	$LN5@sqlite3Vdb@57
$LN528@sqlite3Vdb@57:
; Line 34734
	lea	eax, DWORD PTR [ebx-64]
	mov	DWORD PTR tv5001[esp+672], eax
; Line 34738
	mov	al, BYTE PTR [eax+24]
	or	al, BYTE PTR [ebx+24]
	test	al, 1
	je	SHORT $LN527@sqlite3Vdb@57
; Line 34739
	mov	esi, 2
$LL707@sqlite3Vdb@57:
	sub	esi, 1
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN705@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN705@sqlite3Vdb@57:
	sub	ebx, 64					; 00000040H
	test	esi, esi
	jg	SHORT $LL707@sqlite3Vdb@57
$LN484@sqlite3Vdb@57:
; Line 34740
	lea	eax, DWORD PTR [ebx+64]
	mov	DWORD PTR _pTos$[esp+672], eax
; Line 34741
	mov	WORD PTR [eax+24], 1
; Line 34742
	jmp	$LN1344@sqlite3Vdb@57
$LN527@sqlite3Vdb@57:
; Line 34744
	mov	esi, DWORD PTR tv5001[esp+672]
	call	_sqlite3VdbeIntValue
; Line 34745
	mov	esi, ebx
	mov	DWORD PTR _a$90504[esp+672], eax
	mov	DWORD PTR _a$90504[esp+676], edx
	call	_sqlite3VdbeIntValue
	mov	ecx, eax
; Line 34746
	movzx	eax, BYTE PTR [edi]
	add	eax, -74				; ffffffb6H
	cmp	eax, 3
	ja	SHORT $LN1372@sqlite3Vdb@57
	jmp	DWORD PTR $LN1457@sqlite3Vdb@57[eax*4]
$LN524@sqlite3Vdb@57:
; Line 34747
	mov	edi, DWORD PTR _a$90504[esp+672]
	and	edi, ecx
	and	DWORD PTR _a$90504[esp+676], edx
	jmp	SHORT $LN520@sqlite3Vdb@57
$LN523@sqlite3Vdb@57:
; Line 34748
	mov	edi, DWORD PTR _a$90504[esp+672]
	or	edi, ecx
	or	DWORD PTR _a$90504[esp+676], edx
	jmp	SHORT $LN520@sqlite3Vdb@57
$LN522@sqlite3Vdb@57:
; Line 34749
	mov	eax, DWORD PTR _a$90504[esp+672]
	mov	edx, DWORD PTR _a$90504[esp+676]
	call	__allshl
	mov	edi, eax
	mov	DWORD PTR _a$90504[esp+676], edx
	jmp	SHORT $LN520@sqlite3Vdb@57
$LN521@sqlite3Vdb@57:
; Line 34750
	mov	eax, DWORD PTR _a$90504[esp+672]
	mov	edx, DWORD PTR _a$90504[esp+676]
	call	__allshr
	mov	edi, eax
	mov	DWORD PTR _a$90504[esp+676], edx
	jmp	SHORT $LN520@sqlite3Vdb@57
$LN1372@sqlite3Vdb@57:
	mov	edi, DWORD PTR _a$90504[esp+672]
$LN520@sqlite3Vdb@57:
; Line 34753
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN519@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN519@sqlite3Vdb@57:
; Line 34754
	mov	esi, DWORD PTR tv5001[esp+672]
; Line 34755
	test	BYTE PTR [esi+24], 64			; 00000040H
	mov	DWORD PTR _pTos$[esp+672], esi
	je	SHORT $LN518@sqlite3Vdb@57
	push	esi
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN518@sqlite3Vdb@57:
; Line 34756
	mov	ecx, DWORD PTR _a$90504[esp+676]
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], ecx
; Line 34757
	mov	WORD PTR [esi+24], 4
; Line 34758
	jmp	$LN1344@sqlite3Vdb@57
$LN517@sqlite3Vdb@57:
; Line 34770
	mov	eax, ebx
	call	_sqlite3VdbeMemIntegerify
; Line 34771
	mov	eax, DWORD PTR [edi+4]
	cdq
	add	DWORD PTR [ebx], eax
	adc	DWORD PTR [ebx+4], edx
; Line 34772
	jmp	$LN647@sqlite3Vdb@57
$LN516@sqlite3Vdb@57:
; Line 34788
	mov	eax, ebx
	call	_applyNumericAffinity
	movzx	eax, WORD PTR [ebx+24]
	test	al, 8
	mov	DWORD PTR tv9002[esp+672], eax
	je	SHORT $LN717@sqlite3Vdb@57
	fld	QWORD PTR [ebx+8]
	call	__ftol2
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], edx
	fild	QWORD PTR [ebx]
	fcomp	QWORD PTR [ebx+8]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN717@sqlite3Vdb@57
	mov	eax, DWORD PTR tv9002[esp+672]
	or	eax, 4
	mov	WORD PTR [ebx+24], ax
$LN717@sqlite3Vdb@57:
; Line 34789
	movzx	eax, WORD PTR [ebx+24]
	test	al, 12					; 0000000cH
	jne	SHORT $LN515@sqlite3Vdb@57
; Line 34790
	test	al, 64					; 00000040H
	je	SHORT $LN514@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN514@sqlite3Vdb@57:
; Line 34791
	sub	ebx, 64					; 00000040H
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 34829
$LN733@sqlite3Vdb@57:
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
	jmp	$LN647@sqlite3Vdb@57
$LN515@sqlite3Vdb@57:
; Line 34795
	test	al, 4
	je	SHORT $LN513@sqlite3Vdb@57
; Line 34796
	cmp	DWORD PTR [edi+4], 0
	je	SHORT $LN657@sqlite3Vdb@57
	mov	esi, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	mov	eax, 1
	xor	ecx, ecx
	add	esi, eax
	adc	edi, ecx
; Line 34797
	jmp	$LN510@sqlite3Vdb@57
$LN657@sqlite3Vdb@57:
; Line 34796
	mov	esi, DWORD PTR [ebx]
	mov	edi, DWORD PTR [ebx+4]
	xor	eax, eax
	xor	ecx, ecx
	add	esi, eax
	adc	edi, ecx
; Line 34797
	jmp	SHORT $LN510@sqlite3Vdb@57
$LN513@sqlite3Vdb@57:
; Line 34799
	mov	eax, ebx
	call	_sqlite3VdbeMemRealify
; Line 34800
	fld	QWORD PTR [ebx+8]
	call	__ftol2_sse
	cdq
	mov	esi, eax
	mov	DWORD PTR _v$90522[esp+672], esi
	mov	DWORD PTR _v$90522[esp+676], edx
; Line 34801
	fild	QWORD PTR _v$90522[esp+672]
	fcomp	QWORD PTR [ebx+8]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN511@sqlite3Vdb@57
	add	esi, 1
	adc	DWORD PTR _v$90522[esp+676], 0
	mov	DWORD PTR _v$90522[esp+672], esi
$LN511@sqlite3Vdb@57:
; Line 34802
	cmp	DWORD PTR [edi+4], 0
	je	SHORT $LN1395@sqlite3Vdb@57
	fild	QWORD PTR _v$90522[esp+672]
	fcomp	QWORD PTR [ebx+8]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1395@sqlite3Vdb@57
	add	esi, 1
	adc	DWORD PTR _v$90522[esp+676], 0
$LN1395@sqlite3Vdb@57:
	mov	edi, DWORD PTR _v$90522[esp+676]
$LN510@sqlite3Vdb@57:
; Line 34804
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN509@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN509@sqlite3Vdb@57:
; Line 34805
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+4], edi
; Line 34806
	mov	WORD PTR [ebx+24], 4
; Line 34807
	jmp	$LN647@sqlite3Vdb@57
$LN508@sqlite3Vdb@57:
; Line 34823
	mov	eax, ebx
	call	_applyNumericAffinity
	movzx	eax, WORD PTR [ebx+24]
	test	al, 8
	mov	DWORD PTR tv8982[esp+672], eax
	je	SHORT $LN727@sqlite3Vdb@57
	fld	QWORD PTR [ebx+8]
	call	__ftol2
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], edx
	fild	QWORD PTR [ebx]
	fcomp	QWORD PTR [ebx+8]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN727@sqlite3Vdb@57
	mov	eax, DWORD PTR tv8982[esp+672]
	or	eax, 4
	mov	WORD PTR [ebx+24], ax
$LN727@sqlite3Vdb@57:
; Line 34824
	movzx	eax, WORD PTR [ebx+24]
	test	al, 4
	jne	SHORT $LN507@sqlite3Vdb@57
; Line 34825
	cmp	DWORD PTR [edi+8], 0
	je	$LN1134@sqlite3Vdb@57
; Line 34829
	cmp	DWORD PTR [edi+4], 0
	je	$LN733@sqlite3Vdb@57
	test	al, 64					; 00000040H
	je	$LN514@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
; Line 34830
	mov	edi, DWORD PTR [edi+8]
	sub	ebx, 64					; 00000040H
	add	esp, 4
	sub	edi, 1
	mov	DWORD PTR _pTos$[esp+672], ebx
	mov	DWORD PTR _pc$[esp+672], edi
; Line 34832
	jmp	$LN647@sqlite3Vdb@57
$LN507@sqlite3Vdb@57:
; Line 34833
	test	al, 64					; 00000040H
	je	SHORT $LN502@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN502@sqlite3Vdb@57:
; Line 34834
	mov	WORD PTR [ebx+24], 4
; Line 34836
	jmp	$LN647@sqlite3Vdb@57
$LN501@sqlite3Vdb@57:
; Line 34850
	test	BYTE PTR [ebx+24], 4
	je	$LN647@sqlite3Vdb@57
; Line 34851
	mov	eax, ebx
	call	_sqlite3VdbeMemRealify
; Line 34853
	jmp	$LN647@sqlite3Vdb@57
$LN499@sqlite3Vdb@57:
; Line 34868
	test	BYTE PTR [ebx+24], 1
	jne	$LN647@sqlite3Vdb@57
; Line 34870
	movzx	eax, WORD PTR [ebx+24]
	movzx	edx, al
	shr	dl, 3
	and	edx, 2
	or	edx, eax
; Line 34871
	movzx	eax, dx
	test	al, 2
	mov	WORD PTR [ebx+24], dx
	jne	SHORT $LN738@sqlite3Vdb@57
	test	al, 12					; 0000000cH
	je	SHORT $LN738@sqlite3Vdb@57
	movzx	ebx, BYTE PTR _encoding$[esp+672]
	mov	esi, DWORD PTR _pTos$[esp+672]
	call	_sqlite3VdbeMemStringify
	mov	ebx, esi
$LN738@sqlite3Vdb@57:
	and	WORD PTR [ebx+24], 65523		; 0000fff3H
; Line 34872
	test	WORD PTR [ebx+24], 2048			; 00000800H
	je	SHORT $LN659@sqlite3Vdb@57
	mov	esi, ebx
	call	_sqlite3VdbeMemExpandBlob
; Line 34874
	and	WORD PTR [ebx+24], 65507		; 0000ffe3H
	mov	DWORD PTR _rc$[esp+672], eax
; Line 34875
	jmp	$LN647@sqlite3Vdb@57
$LN659@sqlite3Vdb@57:
; Line 34874
	and	WORD PTR [ebx+24], 65507		; 0000ffe3H
	mov	DWORD PTR _rc$[esp+672], 0
; Line 34875
	jmp	$LN647@sqlite3Vdb@57
$LN497@sqlite3Vdb@57:
; Line 34889
	movzx	eax, WORD PTR [ebx+24]
	test	al, 1
	jne	$LN647@sqlite3Vdb@57
; Line 34890
	test	al, 16					; 00000010H
	jne	SHORT $LN495@sqlite3Vdb@57
; Line 34891
	movzx	eax, WORD PTR [ebx+24]
	test	al, 2
	jne	SHORT $LN748@sqlite3Vdb@57
	test	al, 12					; 0000000cH
	je	SHORT $LN748@sqlite3Vdb@57
	movzx	ebx, BYTE PTR _encoding$[esp+672]
	mov	esi, DWORD PTR _pTos$[esp+672]
	call	_sqlite3VdbeMemStringify
	mov	ebx, esi
$LN748@sqlite3Vdb@57:
	and	WORD PTR [ebx+24], 65523		; 0000fff3H
; Line 34893
	or	WORD PTR [ebx+24], 16			; 00000010H
$LN495@sqlite3Vdb@57:
; Line 34895
	and	WORD PTR [ebx+24], 65521		; 0000fff1H
; Line 34896
	jmp	$LN647@sqlite3Vdb@57
$LN494@sqlite3Vdb@57:
; Line 34911
	test	BYTE PTR [ebx+24], 13			; 0000000dH
	jne	$LN647@sqlite3Vdb@57
; Line 34912
	mov	eax, ebx
	call	_sqlite3VdbeMemNumerify
; Line 34914
	jmp	$LN647@sqlite3Vdb@57
$LN492@sqlite3Vdb@57:
; Line 34929
	test	BYTE PTR [ebx+24], 1
	jne	$LN647@sqlite3Vdb@57
; Line 34930
	mov	eax, ebx
	call	_sqlite3VdbeMemIntegerify
; Line 34932
	jmp	$LN647@sqlite3Vdb@57
$LN490@sqlite3Vdb@57:
; Line 34947
	test	BYTE PTR [ebx+24], 1
	jne	$LN647@sqlite3Vdb@57
; Line 34948
	mov	eax, ebx
	call	_sqlite3VdbeMemRealify
; Line 34950
	jmp	$LN647@sqlite3Vdb@57
$LN488@sqlite3Vdb@57:
; Line 35031
	movzx	eax, WORD PTR [ebx+24]
; Line 35037
	mov	cl, BYTE PTR [ebx-40]
	or	cl, al
	test	cl, 1
	je	SHORT $LN485@sqlite3Vdb@57
; Line 35038
	test	DWORD PTR [edi+4], 512			; 00000200H
	je	$LN486@sqlite3Vdb@57
; Line 35050
	not	eax
	and	eax, 1
	cdq
	push	edx
	push	eax
	mov	esi, ebx
	call	_sqlite3VdbeMemSetInt64
; Line 35051
	movzx	eax, WORD PTR [ebx-40]
	lea	esi, DWORD PTR [ebx-64]
	not	eax
	and	eax, 1
	cdq
	push	edx
	push	eax
	call	_sqlite3VdbeMemSetInt64
	add	esp, 16					; 00000010H
$LN485@sqlite3Vdb@57:
; Line 35070
	mov	al, BYTE PTR [edi+4]
; Line 35071
	test	al, al
	mov	BYTE PTR _affinity$90569[esp+672], al
	je	SHORT $LN481@sqlite3Vdb@57
; Line 35072
	mov	dl, BYTE PTR _encoding$[esp+672]
	lea	ecx, DWORD PTR [ebx-64]
	call	_applyAffinity
; Line 35073
	mov	dl, BYTE PTR _encoding$[esp+672]
	mov	al, BYTE PTR _affinity$90569[esp+672]
	mov	ecx, ebx
	call	_applyAffinity
$LN481@sqlite3Vdb@57:
; Line 35077
	test	WORD PTR [ebx-40], 2048			; 00000800H
	je	SHORT $LN661@sqlite3Vdb@57
	lea	esi, DWORD PTR [ebx-64]
	call	_sqlite3VdbeMemExpandBlob
$LN661@sqlite3Vdb@57:
; Line 35078
	test	WORD PTR [ebx+24], 2048			; 00000800H
	je	SHORT $LN663@sqlite3Vdb@57
	mov	esi, ebx
	call	_sqlite3VdbeMemExpandBlob
$LN663@sqlite3Vdb@57:
; Line 35079
	mov	edx, DWORD PTR [edi+12]
	push	edx
	mov	eax, ebx
	lea	ecx, DWORD PTR [ebx-64]
	call	_sqlite3MemCompare
; Line 35080
	movzx	ecx, BYTE PTR [edi]
	add	ecx, -67				; ffffffbdH
	add	esp, 4
	cmp	ecx, 4
	ja	$LN473@sqlite3Vdb@57
	jmp	DWORD PTR $LN1458@sqlite3Vdb@57[ecx*4]
$LN486@sqlite3Vdb@57:
; Line 35057
	mov	esi, 2
$LL757@sqlite3Vdb@57:
	sub	esi, 1
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN755@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN755@sqlite3Vdb@57:
	sub	ebx, 64					; 00000040H
	test	esi, esi
	jg	SHORT $LL757@sqlite3Vdb@57
; Line 35058
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	mov	DWORD PTR _pTos$[esp+672], ebx
	je	$LN484@sqlite3Vdb@57
; Line 35059
	test	DWORD PTR [edi+4], 256			; 00000100H
	je	$LN1344@sqlite3Vdb@57
; Line 35060
	add	eax, -1
	mov	DWORD PTR _pc$[esp+672], eax
; Line 35062
	jmp	$LN1344@sqlite3Vdb@57
$LN478@sqlite3Vdb@57:
; Line 35081
	xor	ecx, ecx
	test	eax, eax
	sete	cl
	mov	DWORD PTR _res$90568[esp+672], ecx
	jmp	SHORT $LN479@sqlite3Vdb@57
$LN477@sqlite3Vdb@57:
; Line 35082
	xor	edx, edx
	test	eax, eax
	setne	dl
	jmp	SHORT $LN1434@sqlite3Vdb@57
$LN476@sqlite3Vdb@57:
; Line 35083
	xor	ecx, ecx
	test	eax, eax
	setl	cl
	mov	DWORD PTR _res$90568[esp+672], ecx
	jmp	SHORT $LN479@sqlite3Vdb@57
$LN475@sqlite3Vdb@57:
; Line 35084
	xor	edx, edx
	test	eax, eax
	setle	dl
	jmp	SHORT $LN1434@sqlite3Vdb@57
$LN474@sqlite3Vdb@57:
; Line 35085
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	mov	DWORD PTR _res$90568[esp+672], ecx
	jmp	SHORT $LN479@sqlite3Vdb@57
$LN473@sqlite3Vdb@57:
; Line 35086
	xor	edx, edx
	test	eax, eax
	setge	dl
$LN1434@sqlite3Vdb@57:
	mov	DWORD PTR _res$90568[esp+672], edx
$LN479@sqlite3Vdb@57:
; Line 35089
	mov	esi, 2
$LL762@sqlite3Vdb@57:
	sub	esi, 1
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN760@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN760@sqlite3Vdb@57:
	sub	ebx, 64					; 00000040H
	test	esi, esi
	jg	SHORT $LL762@sqlite3Vdb@57
; Line 35090
	mov	edi, DWORD PTR [edi+8]
	test	edi, edi
	mov	DWORD PTR _pTos$[esp+672], ebx
	je	SHORT $LN472@sqlite3Vdb@57
; Line 35091
	cmp	DWORD PTR _res$90568[esp+672], 0
	je	$LN1344@sqlite3Vdb@57
; Line 35092
	add	edi, -1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 35094
	jmp	$LN1344@sqlite3Vdb@57
$LN472@sqlite3Vdb@57:
; Line 35097
	mov	eax, DWORD PTR _res$90568[esp+672]
	lea	ecx, DWORD PTR [ebx+64]
	cdq
	mov	WORD PTR [ecx+24], 4
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR _pTos$[esp+672], ecx
	mov	DWORD PTR [ecx+4], edx
; Line 35099
	jmp	$LN1344@sqlite3Vdb@57
$LN469@sqlite3Vdb@57:
; Line 35120
	test	BYTE PTR [ebx+24], 1
	je	SHORT $LN468@sqlite3Vdb@57
; Line 35121
	mov	esi, 2
; Line 35122
	jmp	SHORT $LN666@sqlite3Vdb@57
$LN468@sqlite3Vdb@57:
; Line 35123
	mov	eax, ebx
	call	_sqlite3VdbeMemIntegerify
; Line 35124
	mov	eax, DWORD PTR [ebx]
	or	eax, DWORD PTR [ebx+4]
	jne	SHORT $LN665@sqlite3Vdb@57
	lea	esi, DWORD PTR [eax+1]
	jmp	SHORT $LN666@sqlite3Vdb@57
$LN665@sqlite3Vdb@57:
	xor	esi, esi
$LN666@sqlite3Vdb@57:
; Line 35126
	test	BYTE PTR [ebx-40], 1
	lea	eax, DWORD PTR [ebx-64]
	je	SHORT $LN466@sqlite3Vdb@57
; Line 35127
	mov	eax, 2
; Line 35128
	jmp	SHORT $LN668@sqlite3Vdb@57
$LN466@sqlite3Vdb@57:
; Line 35129
	call	_sqlite3VdbeMemIntegerify
; Line 35130
	mov	ecx, DWORD PTR [ebx-64]
	or	ecx, DWORD PTR [ebx-60]
	jne	SHORT $LN667@sqlite3Vdb@57
	lea	eax, DWORD PTR [ecx+1]
	jmp	SHORT $LN668@sqlite3Vdb@57
$LN667@sqlite3Vdb@57:
	xor	eax, eax
$LN668@sqlite3Vdb@57:
; Line 35132
	cmp	BYTE PTR [edi], 61			; 0000003dH
	jne	SHORT $LN464@sqlite3Vdb@57
; Line 35134
	lea	edx, DWORD PTR [eax+esi*2]
	movzx	edi, BYTE PTR ?and_logic@?IE@??sqlite3VdbeExec@@9@9[esi+edx]
; Line 35135
	jmp	SHORT $LN463@sqlite3Vdb@57
$LN464@sqlite3Vdb@57:
; Line 35137
	lea	eax, DWORD PTR [eax+esi*2]
	movzx	edi, BYTE PTR ?or_logic@?IF@??sqlite3VdbeExec@@9@9[esi+eax]
$LN463@sqlite3Vdb@57:
; Line 35139
	mov	esi, 2
	npad	1
$LL767@sqlite3Vdb@57:
	sub	esi, 1
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN765@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN765@sqlite3Vdb@57:
	sub	ebx, 64					; 00000040H
	test	esi, esi
	jg	SHORT $LL767@sqlite3Vdb@57
; Line 35141
	cmp	edi, 2
	lea	ecx, DWORD PTR [ebx+64]
	mov	DWORD PTR _pTos$[esp+672], ecx
; Line 35143
	mov	ebx, ecx
	jne	SHORT $LN462@sqlite3Vdb@57
; Line 35142
	mov	WORD PTR [ecx+24], 1
; Line 35143
	jmp	$LN647@sqlite3Vdb@57
$LN462@sqlite3Vdb@57:
; Line 35144
	xor	eax, eax
	test	edi, edi
	sete	al
	cdq
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 35145
	mov	WORD PTR [ecx+24], 4
; Line 35147
	jmp	$LN647@sqlite3Vdb@57
$LN460@sqlite3Vdb@57:
; Line 35165
	test	BYTE PTR [ebx+24], 13			; 0000000dH
	jne	SHORT $LN459@sqlite3Vdb@57
; Line 35166
	mov	eax, ebx
	call	_sqlite3VdbeMemNumerify
$LN459@sqlite3Vdb@57:
; Line 35168
	movzx	eax, WORD PTR [ebx+24]
	test	al, 8
	je	SHORT $LN458@sqlite3Vdb@57
; Line 35169
	test	al, 64					; 00000040H
	je	SHORT $LN457@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN457@sqlite3Vdb@57:
; Line 35170
	cmp	BYTE PTR [edi], 85			; 00000055H
	je	SHORT $LN455@sqlite3Vdb@57
	fldz
	fcomp	QWORD PTR [ebx+8]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN456@sqlite3Vdb@57
$LN455@sqlite3Vdb@57:
; Line 35171
	fld	QWORD PTR [ebx+8]
	fchs
	fstp	QWORD PTR [ebx+8]
$LN456@sqlite3Vdb@57:
; Line 35173
	mov	WORD PTR [ebx+24], 8
	jmp	$LN647@sqlite3Vdb@57
$LN458@sqlite3Vdb@57:
; Line 35174
	test	al, 4
	je	$LN647@sqlite3Vdb@57
; Line 35175
	test	al, 64					; 00000040H
	je	SHORT $LN452@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN452@sqlite3Vdb@57:
; Line 35176
	cmp	BYTE PTR [edi], 85			; 00000055H
	je	SHORT $LN1282@sqlite3Vdb@57
	cmp	DWORD PTR [ebx+4], 0
	jg	SHORT $LN451@sqlite3Vdb@57
	jl	SHORT $LN1282@sqlite3Vdb@57
	cmp	DWORD PTR [ebx], 0
	jae	SHORT $LN451@sqlite3Vdb@57
$LN1282@sqlite3Vdb@57:
; Line 35177
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+4]
	neg	ecx
	adc	edx, 0
	neg	edx
	mov	DWORD PTR [ebx], ecx
	mov	DWORD PTR [ebx+4], edx
$LN451@sqlite3Vdb@57:
; Line 35179
	mov	WORD PTR [ebx+24], 4
; Line 35181
	jmp	$LN647@sqlite3Vdb@57
$LN449@sqlite3Vdb@57:
; Line 35192
	test	BYTE PTR [ebx+24], 1
	jne	$LN647@sqlite3Vdb@57
; Line 35193
	mov	eax, ebx
	call	_sqlite3VdbeMemIntegerify
; Line 35195
	mov	eax, DWORD PTR [ebx]
	or	eax, DWORD PTR [ebx+4]
	jne	SHORT $LN669@sqlite3Vdb@57
	mov	eax, 1
	cdq
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], edx
; Line 35196
	mov	WORD PTR [ebx+24], 4
; Line 35197
	jmp	$LN647@sqlite3Vdb@57
$LN669@sqlite3Vdb@57:
; Line 35195
	xor	eax, eax
	cdq
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], edx
; Line 35196
	mov	WORD PTR [ebx+24], 4
; Line 35197
	jmp	$LN647@sqlite3Vdb@57
$LN447@sqlite3Vdb@57:
; Line 35208
	test	BYTE PTR [ebx+24], 1
	jne	$LN647@sqlite3Vdb@57
; Line 35209
	mov	eax, ebx
	call	_sqlite3VdbeMemIntegerify
; Line 35211
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ebx+4]
	not	ecx
	not	edx
	mov	DWORD PTR [ebx], ecx
	mov	DWORD PTR [ebx+4], edx
; Line 35212
	mov	WORD PTR [ebx+24], 4
; Line 35213
	jmp	$LN647@sqlite3Vdb@57
$LN444@sqlite3Vdb@57:
; Line 35256
	test	BYTE PTR [ebx+24], 1
	je	SHORT $LN443@sqlite3Vdb@57
; Line 35257
	mov	esi, DWORD PTR [edi+4]
; Line 35258
	jmp	SHORT $LN441@sqlite3Vdb@57
$LN443@sqlite3Vdb@57:
; Line 35262
	mov	esi, ebx
	call	_sqlite3VdbeRealValue
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN671@sqlite3Vdb@57
	mov	esi, 1
	jmp	SHORT $LN672@sqlite3Vdb@57
$LN671@sqlite3Vdb@57:
	xor	esi, esi
$LN672@sqlite3Vdb@57:
; Line 35264
	cmp	BYTE PTR [edi], 89			; 00000059H
	jne	SHORT $LN441@sqlite3Vdb@57
	xor	eax, eax
	test	esi, esi
	sete	al
	mov	esi, eax
$LN441@sqlite3Vdb@57:
; Line 35266
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN440@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN440@sqlite3Vdb@57:
; Line 35267
	sub	ebx, 64					; 00000040H
; Line 35268
	test	esi, esi
	mov	DWORD PTR _pTos$[esp+672], ebx
	je	$LN647@sqlite3Vdb@57
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 35269
	jmp	$LN647@sqlite3Vdb@57
$LN438@sqlite3Vdb@57:
; Line 35281
	test	BYTE PTR [ebx+24], 1
	je	SHORT $LN436@sqlite3Vdb@57
; Line 35282
	mov	eax, DWORD PTR [edi+8]
	sub	eax, 1
	mov	DWORD PTR _pc$[esp+672], eax
; Line 35283
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jge	SHORT $LN436@sqlite3Vdb@57
; Line 35284
	lea	ecx, DWORD PTR _pTos$[esp+672]
	neg	eax
	push	ecx
	call	_popStack
	mov	ebx, DWORD PTR _pTos$[esp+676]
	add	esp, 4
$LN436@sqlite3Vdb@57:
; Line 35287
	mov	edi, DWORD PTR [edi+4]
	test	edi, edi
	jle	$LN647@sqlite3Vdb@57
; Line 35288
	lea	edx, DWORD PTR _pTos$[esp+672]
	push	edx
	mov	eax, edi
; Line 35290
	jmp	$LN1451@sqlite3Vdb@57
$LN434@sqlite3Vdb@57:
; Line 35302
	mov	eax, DWORD PTR [edi+4]
; Line 35303
	test	eax, eax
	mov	DWORD PTR tv4918[esp+672], eax
	jge	SHORT $LN433@sqlite3Vdb@57
	neg	eax
$LN433@sqlite3Vdb@57:
; Line 35305
	xor	edx, edx
	test	eax, eax
	jle	SHORT $LN1236@sqlite3Vdb@57
	mov	ecx, eax
	shl	ecx, 6
	mov	esi, ecx
	mov	ecx, ebx
	sub	ecx, esi
	add	ecx, 88					; 00000058H
$LL432@sqlite3Vdb@57:
	test	BYTE PTR [ecx], 1
	jne	SHORT $LN430@sqlite3Vdb@57
	add	edx, 1
	add	ecx, 64					; 00000040H
	cmp	edx, eax
	jl	SHORT $LL432@sqlite3Vdb@57
; Line 35306
	jmp	SHORT $LN1236@sqlite3Vdb@57
$LN430@sqlite3Vdb@57:
	cmp	edx, eax
	jl	SHORT $LN429@sqlite3Vdb@57
$LN1236@sqlite3Vdb@57:
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
$LN429@sqlite3Vdb@57:
; Line 35307
	cmp	DWORD PTR tv4918[esp+672], 0
	jle	$LN647@sqlite3Vdb@57
	lea	edx, DWORD PTR _pTos$[esp+672]
	push	edx
; Line 35308
	jmp	$LN1451@sqlite3Vdb@57
$LN427@sqlite3Vdb@57:
; Line 35325
	mov	eax, DWORD PTR [edi+4]
; Line 35326
	mov	ecx, DWORD PTR [esi+56]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [edx+80], eax
; Line 35327
	jmp	$LN647@sqlite3Vdb@57
$LN426@sqlite3Vdb@57:
; Line 35351
	mov	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR _p2$90659[esp+672], ecx
; Line 35363
	xor	ecx, ecx
; Line 35365
	add	ebx, 64					; 00000040H
	mov	WORD PTR _sMem$90669[esp+696], cx
; Line 35366
	mov	WORD PTR [ebx+24], 1
; Line 35382
	mov	edx, DWORD PTR [esi+56]
	mov	esi, DWORD PTR [edx+eax*4]
; Line 35387
	cmp	DWORD PTR [esi], ecx
	mov	DWORD PTR _pTos$[esp+672], ebx
	je	$LN425@sqlite3Vdb@57
; Line 35389
	call	_sqlite3VdbeCursorMoveto
; Line 35390
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
; Line 35393
	cmp	BYTE PTR [esi+28], al
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _zRec$90661[esp+672], eax
	mov	DWORD PTR _pCrsr$90662[esp+672], ecx
	je	SHORT $LN423@sqlite3Vdb@57
; Line 35394
	mov	DWORD PTR _payloadSize$90657[esp+672], eax
	jmp	SHORT $LN418@sqlite3Vdb@57
$LN423@sqlite3Vdb@57:
; Line 35395
	mov	edx, DWORD PTR [esi+104]
	mov	eax, DWORD PTR _p$GSCopy$[esp+672]
	cmp	edx, DWORD PTR [eax+92]
	jne	SHORT $LN421@sqlite3Vdb@57
; Line 35396
	mov	ecx, DWORD PTR [esi+108]
; Line 35397
	mov	edx, DWORD PTR [esi+120]
	mov	DWORD PTR _payloadSize$90657[esp+672], ecx
	mov	DWORD PTR _zRec$90661[esp+672], edx
	jmp	SHORT $LN418@sqlite3Vdb@57
$LN421@sqlite3Vdb@57:
; Line 35398
	cmp	BYTE PTR [esi+33], 0
; Line 35400
	mov	edi, DWORD PTR _pCrsr$90662[esp+672]
	je	SHORT $LN419@sqlite3Vdb@57
	lea	eax, DWORD PTR _payloadSize64$90681[esp+672]
	push	eax
	call	_sqlite3BtreeKeySize
; Line 35401
	mov	ecx, DWORD PTR _payloadSize64$90681[esp+676]
	mov	DWORD PTR _payloadSize$90657[esp+676], ecx
; Line 35402
	jmp	SHORT $LN1435@sqlite3Vdb@57
$LN419@sqlite3Vdb@57:
; Line 35403
	lea	edx, DWORD PTR _payloadSize$90657[esp+672]
	push	edx
	call	_sqlite3BtreeDataSize
$LN1435@sqlite3Vdb@57:
	add	esp, 4
$LN418@sqlite3Vdb@57:
; Line 35405
	mov	eax, DWORD PTR [esi+80]
	mov	edi, DWORD PTR _zRec$90661[esp+672]
	mov	DWORD PTR _nField$90665[esp+672], eax
	mov	eax, DWORD PTR _payloadSize$90657[esp+672]
	xor	ecx, ecx
$LN415@sqlite3Vdb@57:
; Line 35422
	cmp	eax, ecx
	je	$LN647@sqlite3Vdb@57
; Line 35426
	cmp	eax, 1000000000				; 3b9aca00H
	ja	$too_big$90359
; Line 35435
	mov	eax, DWORD PTR [esi+104]
	mov	ecx, DWORD PTR _p$GSCopy$[esp+672]
	cmp	eax, DWORD PTR [ecx+92]
	jne	SHORT $LN412@sqlite3Vdb@57
; Line 35437
	mov	edx, DWORD PTR [esi+116]
	mov	edi, DWORD PTR [esi+112]
	mov	DWORD PTR _aOffset$90664[esp+672], edx
; Line 35438
	jmp	$LN394@sqlite3Vdb@57
$LN425@sqlite3Vdb@57:
; Line 35406
	cmp	BYTE PTR [esi+30], 0
	je	SHORT $LN416@sqlite3Vdb@57
; Line 35408
	mov	eax, DWORD PTR [esi+52]
; Line 35409
	mov	edi, DWORD PTR [esi+56]
; Line 35412
	mov	edx, DWORD PTR [esi+80]
	mov	DWORD PTR _payloadSize$90657[esp+672], eax
	mov	DWORD PTR _zRec$90661[esp+672], edi
	mov	DWORD PTR [esi+104], ecx
	mov	DWORD PTR _nField$90665[esp+672], edx
; Line 35413
	mov	DWORD PTR _pCrsr$90662[esp+672], ecx
; Line 35414
	jmp	SHORT $LN415@sqlite3Vdb@57
$LN416@sqlite3Vdb@57:
; Line 35416
	mov	DWORD PTR _payloadSize$90657[esp+672], ecx
; Line 35422
	jmp	$LN647@sqlite3Vdb@57
$LN412@sqlite3Vdb@57:
; Line 35445
	mov	eax, DWORD PTR [esi+112]
; Line 35446
	test	eax, eax
	mov	DWORD PTR _aType$90663[esp+672], eax
	jne	SHORT $LN1235@sqlite3Vdb@57
; Line 35447
	mov	ecx, DWORD PTR _nField$90665[esp+672]
	add	ecx, ecx
	add	ecx, ecx
	add	ecx, ecx
	call	_sqlite3MallocRaw
; Line 35449
	test	eax, eax
	mov	DWORD PTR _aType$90663[esp+672], eax
	mov	DWORD PTR [esi+112], eax
	je	$no_mem$90290
$LN1235@sqlite3Vdb@57:
; Line 35457
	test	edi, edi
	mov	ecx, DWORD PTR _nField$90665[esp+672]
	mov	edx, DWORD PTR _payloadSize$90657[esp+672]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [esi+116], eax
	mov	DWORD PTR _aOffset$90664[esp+672], eax
	mov	eax, DWORD PTR _p$GSCopy$[esp+672]
	mov	DWORD PTR [esi+108], edx
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR [esi+104], ecx
; Line 35459
	jne	SHORT $LN403@sqlite3Vdb@57
; Line 35460
	cmp	BYTE PTR [esi+33], 0
; Line 35461
	mov	edi, DWORD PTR _pCrsr$90662[esp+672]
	je	SHORT $LN406@sqlite3Vdb@57
	lea	edx, DWORD PTR _avail$90697[esp+672]
	push	edx
	call	_sqlite3BtreeKeyFetch
; Line 35462
	jmp	SHORT $LN1436@sqlite3Vdb@57
$LN406@sqlite3Vdb@57:
; Line 35463
	lea	eax, DWORD PTR _avail$90697[esp+672]
	push	eax
	call	_sqlite3BtreeDataFetch
$LN1436@sqlite3Vdb@57:
; Line 35470
	mov	ecx, DWORD PTR _avail$90697[esp+676]
	add	esp, 4
	cmp	ecx, DWORD PTR _payloadSize$90657[esp+672]
	mov	edi, eax
	jb	SHORT $LN404@sqlite3Vdb@57
; Line 35471
	mov	DWORD PTR _zRec$90661[esp+672], edi
; Line 35472
	mov	DWORD PTR [esi+120], edi
; Line 35473
	jmp	SHORT $LN403@sqlite3Vdb@57
$LN404@sqlite3Vdb@57:
; Line 35474
	mov	DWORD PTR [esi+120], 0
$LN403@sqlite3Vdb@57:
; Line 35480
	movzx	eax, BYTE PTR [edi]
	cmp	eax, 127				; 0000007fH
	mov	DWORD PTR _offset$90695[esp+672], eax
	ja	SHORT $LN673@sqlite3Vdb@57
	mov	DWORD PTR _szHdrSz$90696[esp+672], 1
	jmp	SHORT $LN674@sqlite3Vdb@57
$LN673@sqlite3Vdb@57:
	lea	edx, DWORD PTR _offset$90695[esp+672]
	push	edx
	call	_sqlite3GetVarint32
	add	esp, 4
	mov	DWORD PTR _szHdrSz$90696[esp+672], eax
$LN674@sqlite3Vdb@57:
; Line 35488
	cmp	DWORD PTR _zRec$90661[esp+672], 0
	jne	SHORT $LN402@sqlite3Vdb@57
	mov	eax, DWORD PTR _offset$90695[esp+672]
	cmp	DWORD PTR _avail$90697[esp+672], eax
	jae	SHORT $LN402@sqlite3Vdb@57
; Line 35489
	movzx	ecx, BYTE PTR [esi+33]
	mov	ebx, DWORD PTR _offset$90695[esp+672]
	push	ecx
	mov	ecx, DWORD PTR _pCrsr$90662[esp+676]
	push	0
	lea	eax, DWORD PTR _sMem$90669[esp+680]
	call	_sqlite3VdbeMemFromBtree
	add	esp, 8
; Line 35490
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1344@sqlite3Vdb@57
; Line 35493
	mov	edi, DWORD PTR _sMem$90669[esp+688]
	mov	ebx, DWORD PTR _pTos$[esp+672]
$LN402@sqlite3Vdb@57:
; Line 35495
	mov	edx, DWORD PTR _offset$90695[esp+672]
; Line 35496
	mov	eax, DWORD PTR _szHdrSz$90696[esp+672]
	add	edx, edi
	add	edi, eax
; Line 35503
	cmp	DWORD PTR _nField$90665[esp+672], 0
	mov	DWORD PTR _zEndHdr$90694[esp+672], edx
	jbe	$LN398@sqlite3Vdb@57
	mov	ecx, DWORD PTR _aType$90663[esp+672]
; Line 35515
	mov	eax, DWORD PTR _aOffset$90664[esp+672]
	mov	edx, DWORD PTR _nField$90665[esp+672]
	sub	eax, ecx
	mov	DWORD PTR tv8852[esp+672], ecx
	mov	DWORD PTR tv8866[esp+672], eax
	mov	DWORD PTR tv2865[esp+672], edx
$LN400@sqlite3Vdb@57:
; Line 35504
	cmp	edi, DWORD PTR _zEndHdr$90694[esp+672]
	jae	SHORT $LN397@sqlite3Vdb@57
; Line 35505
	mov	edx, DWORD PTR _offset$90695[esp+672]
	mov	DWORD PTR [eax+ecx], edx
; Line 35506
	movzx	eax, BYTE PTR [edi]
	cmp	eax, 127				; 0000007fH
	mov	DWORD PTR [ecx], eax
	ja	SHORT $LN675@sqlite3Vdb@57
	mov	eax, 1
	add	edi, eax
; Line 35507
	mov	eax, DWORD PTR [ecx]
	call	_sqlite3VdbeSerialTypeLen
	add	DWORD PTR _offset$90695[esp+672], eax
; Line 35508
	mov	eax, DWORD PTR tv8866[esp+672]
	jmp	SHORT $LN399@sqlite3Vdb@57
$LN675@sqlite3Vdb@57:
; Line 35506
	mov	eax, DWORD PTR tv8852[esp+672]
	push	eax
	call	_sqlite3GetVarint32
	mov	ecx, DWORD PTR tv8852[esp+676]
	add	edi, eax
; Line 35507
	mov	eax, DWORD PTR [ecx]
	add	esp, 4
	call	_sqlite3VdbeSerialTypeLen
	add	DWORD PTR _offset$90695[esp+672], eax
; Line 35508
	mov	eax, DWORD PTR tv8866[esp+672]
	jmp	SHORT $LN399@sqlite3Vdb@57
$LN397@sqlite3Vdb@57:
; Line 35515
	mov	DWORD PTR [eax+ecx], 0
$LN399@sqlite3Vdb@57:
; Line 35503
	add	ecx, 4
	sub	DWORD PTR tv2865[esp+672], 1
	mov	DWORD PTR tv8852[esp+672], ecx
	jne	SHORT $LN400@sqlite3Vdb@57
$LN398@sqlite3Vdb@57:
; Line 35518
	test	BYTE PTR _sMem$90669[esp+696], 64	; 00000040H
	je	SHORT $LN395@sqlite3Vdb@57
	lea	ecx, DWORD PTR _sMem$90669[esp+672]
	push	ecx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN395@sqlite3Vdb@57:
; Line 35525
	cmp	edi, DWORD PTR _zEndHdr$90694[esp+672]
	mov	WORD PTR _sMem$90669[esp+696], 1
	ja	$LN393@sqlite3Vdb@57
	mov	edx, DWORD PTR _payloadSize$90657[esp+672]
	cmp	DWORD PTR _offset$90695[esp+672], edx
	ja	$LN393@sqlite3Vdb@57
	mov	edi, DWORD PTR _aType$90663[esp+672]
$LN394@sqlite3Vdb@57:
; Line 35537
	mov	eax, DWORD PTR _p2$90659[esp+672]
	mov	ecx, DWORD PTR _aOffset$90664[esp+672]
	mov	ecx, DWORD PTR [ecx+eax*4]
	test	ecx, ecx
	je	SHORT $LN392@sqlite3Vdb@57
; Line 35539
	mov	eax, DWORD PTR _zRec$90661[esp+672]
	test	eax, eax
	je	SHORT $LN391@sqlite3Vdb@57
; Line 35540
	add	ecx, eax
; Line 35541
	jmp	SHORT $LN390@sqlite3Vdb@57
$LN391@sqlite3Vdb@57:
; Line 35542
	mov	edx, DWORD PTR _p2$90659[esp+672]
	mov	eax, DWORD PTR [edi+edx*4]
	call	_sqlite3VdbeSerialTypeLen
	mov	ebx, eax
; Line 35543
	movzx	eax, BYTE PTR [esi+33]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _pCrsr$90662[esp+680]
	lea	eax, DWORD PTR _sMem$90669[esp+680]
	call	_sqlite3VdbeMemFromBtree
	add	esp, 8
; Line 35544
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1344@sqlite3Vdb@57
; Line 35547
	mov	ecx, DWORD PTR _sMem$90669[esp+688]
	mov	ebx, DWORD PTR _pTos$[esp+672]
$LN390@sqlite3Vdb@57:
; Line 35549
	mov	edx, DWORD PTR _p2$90659[esp+672]
	mov	eax, DWORD PTR [edi+edx*4]
	mov	esi, ebx
	call	_sqlite3VdbeSerialGet
; Line 35550
	mov	al, BYTE PTR _encoding$[esp+672]
	mov	BYTE PTR [ebx+27], al
; Line 35551
	jmp	SHORT $LN386@sqlite3Vdb@57
$LN392@sqlite3Vdb@57:
; Line 35552
	mov	ecx, DWORD PTR _pOp$[esp+672]
	cmp	DWORD PTR [ecx+16], -8			; fffffff8H
	jne	SHORT $LN387@sqlite3Vdb@57
; Line 35553
	mov	edx, ecx
	mov	eax, DWORD PTR [edx+12]
	push	128					; 00000080H
	mov	edx, ebx
	call	_sqlite3VdbeMemShallowCopy
	add	esp, 4
; Line 35554
	jmp	SHORT $LN386@sqlite3Vdb@57
$LN387@sqlite3Vdb@57:
; Line 35555
	mov	WORD PTR [ebx+24], 1
$LN386@sqlite3Vdb@57:
; Line 35564
	test	BYTE PTR _sMem$90669[esp+696], 64	; 00000040H
	je	SHORT $LN385@sqlite3Vdb@57
; Line 35569
	mov	ax, WORD PTR [ebx+24]
	and	ax, 65279				; 0000feffH
; Line 35570
	or	ax, 96					; 00000060H
	mov	WORD PTR [ebx+24], ax
$LN385@sqlite3Vdb@57:
; Line 35575
	mov	eax, ebx
	call	_sqlite3VdbeMemMakeWriteable
	mov	DWORD PTR _rc$[esp+672], eax
	jmp	$LN647@sqlite3Vdb@57
$LN393@sqlite3Vdb@57:
; Line 35526
	mov	DWORD PTR _rc$[esp+672], 11		; 0000000bH
$op_column_out$90713:
; Line 35578
	jmp	$LN647@sqlite3Vdb@57
$LN384@sqlite3Vdb@57:
; Line 35654
	mov	eax, DWORD PTR [edi+4]
	xor	ecx, ecx
	xor	edx, edx
	cmp	eax, ecx
	setl	dl
	mov	DWORD PTR _pRowid$90742[esp+672], ecx
	mov	DWORD PTR _nData$90743[esp+672], ecx
	mov	DWORD PTR _nData$90743[esp+676], ecx
	mov	DWORD PTR _nHdr$90744[esp+672], ecx
	mov	DWORD PTR _nZero$90746[esp+672], ecx
; Line 35662
	mov	DWORD PTR _containsNull$90749[esp+672], 0
	mov	ecx, edx
	xor	edx, edx
	test	ecx, ecx
	sete	dl
	mov	DWORD PTR _leaveOnStack$90751[esp+672], ecx
	mov	ecx, DWORD PTR [edi+8]
	mov	DWORD PTR _jumpIfNull$90753[esp+672], ecx
	mov	ecx, DWORD PTR [edi+12]
	mov	DWORD PTR _zAffinity$90755[esp+672], ecx
; Line 35663
	movzx	ecx, BYTE PTR [esi+565]
	lea	edx, DWORD PTR [edx+edx-1]
	imul	eax, edx
	xor	edx, edx
	cmp	BYTE PTR [edi], 55			; 00000037H
	mov	DWORD PTR _nField$90752[esp+672], eax
	sete	dl
	mov	DWORD PTR _file_format$90756[esp+672], ecx
	mov	DWORD PTR _addRowid$90754[esp+672], edx
	mov	edx, eax
	shl	edx, 6
	mov	eax, ebx
	sub	eax, edx
	mov	DWORD PTR tv5461[esp+672], eax
	add	eax, 64					; 00000040H
; Line 35668
	cmp	eax, ebx
	mov	DWORD PTR _pData0$90750[esp+672], eax
	ja	$LN381@sqlite3Vdb@57
	mov	ecx, eax
	mov	eax, -20				; ffffffecH
	sub	eax, ecx
	mov	DWORD PTR tv8909[esp+672], eax
	mov	eax, ebx
	sub	eax, ecx
	shr	eax, 6
	add	eax, 1
	lea	edi, DWORD PTR [ecx+24]
	mov	DWORD PTR tv4581[esp+672], eax
	npad	2
$LL383@sqlite3Vdb@57:
; Line 35670
	cmp	DWORD PTR _zAffinity$90755[esp+672], 0
	je	SHORT $LN380@sqlite3Vdb@57
; Line 35671
	mov	edx, DWORD PTR tv8909[esp+672]
	mov	esi, DWORD PTR _zAffinity$90755[esp+672]
	lea	eax, DWORD PTR [edx+edi-4]
	mov	dl, BYTE PTR _encoding$[esp+672]
	sar	eax, 6
	mov	al, BYTE PTR [eax+esi]
	lea	ecx, DWORD PTR [edi-24]
	call	_applyAffinity
$LN380@sqlite3Vdb@57:
; Line 35673
	movzx	eax, WORD PTR [edi]
	test	al, 1
	je	SHORT $LN379@sqlite3Vdb@57
; Line 35674
	mov	DWORD PTR _containsNull$90749[esp+672], 1
$LN379@sqlite3Vdb@57:
; Line 35676
	test	eax, 2048				; 00000800H
	je	SHORT $LN677@sqlite3Vdb@57
	cmp	DWORD PTR [edi-4], 0
	jle	SHORT $LN677@sqlite3Vdb@57
; Line 35677
	lea	esi, DWORD PTR [edi-24]
	call	_sqlite3VdbeMemExpandBlob
$LN677@sqlite3Vdb@57:
; Line 35679
	mov	edx, DWORD PTR _file_format$90756[esp+672]
	lea	ecx, DWORD PTR [edi-24]
	push	edx
	call	_sqlite3VdbeSerialType
	mov	ecx, eax
; Line 35680
	call	_sqlite3VdbeSerialTypeLen
	mov	DWORD PTR _len$90763[esp+676], eax
; Line 35681
	cdq
	add	DWORD PTR _nData$90743[esp+676], eax
; Line 35682
	push	0
	push	ecx
	adc	DWORD PTR _nData$90743[esp+688], edx
	call	_sqlite3VarintLen
	add	DWORD PTR _nHdr$90744[esp+684], eax
	add	esp, 12					; 0000000cH
; Line 35683
	test	WORD PTR [edi], 2048			; 00000800H
	je	SHORT $LN377@sqlite3Vdb@57
; Line 35686
	mov	eax, DWORD PTR [edi-24]
	add	DWORD PTR _nZero$90746[esp+672], eax
	jmp	SHORT $LN382@sqlite3Vdb@57
$LN377@sqlite3Vdb@57:
; Line 35687
	cmp	DWORD PTR _len$90763[esp+672], 0
	je	SHORT $LN382@sqlite3Vdb@57
; Line 35688
	mov	DWORD PTR _nZero$90746[esp+672], 0
$LN382@sqlite3Vdb@57:
; Line 35668
	add	edi, 64					; 00000040H
	sub	DWORD PTR tv4581[esp+672], 1
	jne	$LL383@sqlite3Vdb@57
$LN381@sqlite3Vdb@57:
; Line 35696
	cmp	DWORD PTR _addRowid$90754[esp+672], 0
	je	SHORT $LN1378@sqlite3Vdb@57
; Line 35697
	mov	esi, DWORD PTR tv5461[esp+672]
; Line 35699
	mov	eax, esi
	mov	DWORD PTR _pRowid$90742[esp+672], esi
	call	_sqlite3VdbeMemIntegerify
; Line 35700
	push	0
	mov	ecx, esi
	call	_sqlite3VdbeSerialType
	mov	ecx, eax
; Line 35701
	call	_sqlite3VdbeSerialTypeLen
	mov	esi, DWORD PTR _nData$90743[esp+676]
	mov	edi, DWORD PTR _nData$90743[esp+680]
	cdq
	add	esi, eax
; Line 35702
	push	0
	push	ecx
	adc	edi, edx
	call	_sqlite3VarintLen
	add	esp, 12					; 0000000cH
	add	DWORD PTR _nHdr$90744[esp+672], eax
; Line 35703
	mov	DWORD PTR _nZero$90746[esp+672], 0
	jmp	SHORT $LN374@sqlite3Vdb@57
$LN1378@sqlite3Vdb@57:
	mov	esi, DWORD PTR _nData$90743[esp+672]
	mov	edi, DWORD PTR _nData$90743[esp+676]
$LN374@sqlite3Vdb@57:
; Line 35707
	mov	eax, DWORD PTR _nHdr$90744[esp+672]
	cdq
	push	edx
	push	eax
	call	_sqlite3VarintLen
	mov	ecx, eax
	mov	eax, DWORD PTR _nHdr$90744[esp+680]
	add	eax, ecx
	mov	DWORD PTR _nHdr$90744[esp+680], eax
; Line 35708
	cdq
	push	edx
	push	eax
	mov	DWORD PTR _nVarint$90747[esp+688], ecx
	call	_sqlite3VarintLen
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _nVarint$90747[esp+672], eax
	jge	SHORT $LN373@sqlite3Vdb@57
; Line 35709
	add	DWORD PTR _nHdr$90744[esp+672], 1
$LN373@sqlite3Vdb@57:
; Line 35711
	mov	eax, DWORD PTR _nZero$90746[esp+672]
	cdq
	mov	ecx, eax
	mov	eax, DWORD PTR _nHdr$90744[esp+672]
	mov	DWORD PTR tv5505[esp+676], edx
	cdq
	sub	esi, ecx
	sbb	edi, DWORD PTR tv5505[esp+676]
	add	esi, eax
	adc	edi, edx
; Line 35712
	test	edi, edi
	mov	DWORD PTR tv5505[esp+672], ecx
	mov	DWORD PTR tv5500[esp+672], eax
	mov	DWORD PTR tv5500[esp+676], edx
	mov	DWORD PTR _nByte$90745[esp+672], esi
	mov	DWORD PTR _nByte$90745[esp+676], edi
	ja	$too_big$90359
	jb	SHORT $LN1283@sqlite3Vdb@57
	cmp	esi, 1000000000				; 3b9aca00H
	ja	$too_big$90359
$LN1283@sqlite3Vdb@57:
; Line 35717
	test	edi, edi
	ja	SHORT $LN1284@sqlite3Vdb@57
	cmp	esi, 32					; 00000020H
	jbe	SHORT $LN371@sqlite3Vdb@57
$LN1284@sqlite3Vdb@57:
; Line 35718
	mov	ecx, esi
	call	_sqlite3MallocRaw
; Line 35719
	test	eax, eax
	mov	DWORD PTR _zNewRecord$90740[esp+672], eax
	je	$no_mem$90290
; Line 35722
	jmp	SHORT $LN369@sqlite3Vdb@57
$LN371@sqlite3Vdb@57:
; Line 35723
	lea	ecx, DWORD PTR _zTemp$90758[esp+672]
	mov	DWORD PTR _zNewRecord$90740[esp+672], ecx
$LN369@sqlite3Vdb@57:
; Line 35727
	mov	edx, DWORD PTR tv5500[esp+676]
	mov	eax, DWORD PTR tv5500[esp+672]
	mov	ecx, DWORD PTR _zNewRecord$90740[esp+672]
	push	edx
	push	eax
	call	_sqlite3PutVarint
; Line 35728
	mov	edi, DWORD PTR _pData0$90750[esp+680]
	add	esp, 8
	cmp	edi, ebx
	mov	esi, eax
	ja	SHORT $LN366@sqlite3Vdb@57
$LL368@sqlite3Vdb@57:
; Line 35729
	mov	ecx, DWORD PTR _file_format$90756[esp+672]
	push	ecx
	mov	ecx, edi
	call	_sqlite3VdbeSerialType
; Line 35730
	mov	edx, DWORD PTR _zNewRecord$90740[esp+676]
	push	0
	push	eax
	lea	ecx, DWORD PTR [esi+edx]
	call	_sqlite3PutVarint
	add	edi, 64					; 00000040H
	add	esp, 12					; 0000000cH
	add	esi, eax
	cmp	edi, ebx
	jbe	SHORT $LL368@sqlite3Vdb@57
$LN366@sqlite3Vdb@57:
; Line 35732
	cmp	DWORD PTR _addRowid$90754[esp+672], 0
	je	SHORT $LN365@sqlite3Vdb@57
; Line 35733
	mov	ecx, DWORD PTR _pRowid$90742[esp+672]
	push	0
	call	_sqlite3VdbeSerialType
	push	0
	push	eax
	mov	eax, DWORD PTR _zNewRecord$90740[esp+684]
	lea	ecx, DWORD PTR [esi+eax]
	call	_sqlite3PutVarint
	add	esp, 12					; 0000000cH
	add	esi, eax
$LN365@sqlite3Vdb@57:
; Line 35735
	mov	edi, DWORD PTR _pData0$90750[esp+672]
	cmp	edi, ebx
	ja	SHORT $LN362@sqlite3Vdb@57
	npad	9
$LL364@sqlite3Vdb@57:
; Line 35736
	mov	ecx, DWORD PTR _nByte$90745[esp+672]
	mov	edx, DWORD PTR _zNewRecord$90740[esp+672]
	mov	eax, DWORD PTR _file_format$90756[esp+672]
	sub	ecx, esi
	push	ecx
	lea	ebx, DWORD PTR [esi+edx]
	mov	ecx, edi
	call	_sqlite3VdbeSerialPut
	add	edi, 64					; 00000040H
	add	esp, 4
	add	esi, eax
	cmp	edi, DWORD PTR _pTos$[esp+672]
	jbe	SHORT $LL364@sqlite3Vdb@57
; Line 35735
	mov	ebx, DWORD PTR _pTos$[esp+672]
$LN362@sqlite3Vdb@57:
; Line 35738
	cmp	DWORD PTR _addRowid$90754[esp+672], 0
	je	SHORT $LN361@sqlite3Vdb@57
; Line 35739
	mov	eax, DWORD PTR _nByte$90745[esp+672]
	mov	ecx, DWORD PTR _zNewRecord$90740[esp+672]
	sub	eax, esi
	push	eax
	lea	ebx, DWORD PTR [esi+ecx]
	mov	ecx, DWORD PTR _pRowid$90742[esp+676]
	xor	eax, eax
	call	_sqlite3VdbeSerialPut
	mov	ebx, DWORD PTR _pTos$[esp+676]
	add	esp, 4
$LN361@sqlite3Vdb@57:
; Line 35744
	cmp	DWORD PTR _leaveOnStack$90751[esp+672], 0
	jne	SHORT $LN360@sqlite3Vdb@57
; Line 35745
	mov	edx, DWORD PTR _nField$90752[esp+672]
	mov	eax, DWORD PTR _addRowid$90754[esp+672]
	lea	ecx, DWORD PTR _pTos$[esp+672]
	add	eax, edx
	push	ecx
	call	_popStack
	mov	ebx, DWORD PTR _pTos$[esp+676]
	add	esp, 4
$LN360@sqlite3Vdb@57:
; Line 35748
	mov	eax, DWORD PTR _nByte$90745[esp+672]
	add	ebx, 64					; 00000040H
; Line 35749
	cmp	DWORD PTR _nByte$90745[esp+676], 0
	mov	DWORD PTR _pTos$[esp+672], ebx
	mov	DWORD PTR [ebx+20], eax
	ja	SHORT $LN359@sqlite3Vdb@57
	jb	SHORT $LN1285@sqlite3Vdb@57
	cmp	eax, 32					; 00000020H
	ja	SHORT $LN359@sqlite3Vdb@57
$LN1285@sqlite3Vdb@57:
; Line 35752
	mov	edx, DWORD PTR _nByte$90745[esp+672]
	push	edx
	lea	ecx, DWORD PTR _zTemp$90758[esp+676]
	lea	eax, DWORD PTR [ebx+32]
	push	ecx
	push	eax
	mov	DWORD PTR [ebx+16], eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 35753
	mov	WORD PTR [ebx+24], 528			; 00000210H
; Line 35754
	jmp	SHORT $LN358@sqlite3Vdb@57
$LN359@sqlite3Vdb@57:
; Line 35756
	mov	edx, DWORD PTR _zNewRecord$90740[esp+672]
	mov	DWORD PTR [ebx+16], edx
; Line 35757
	mov	WORD PTR [ebx+24], 80			; 00000050H
; Line 35758
	mov	DWORD PTR [ebx+28], 0
$LN358@sqlite3Vdb@57:
; Line 35760
	cmp	DWORD PTR _nZero$90746[esp+672], 0
	je	SHORT $LN357@sqlite3Vdb@57
; Line 35761
	mov	eax, DWORD PTR tv5505[esp+672]
	mov	ecx, DWORD PTR tv5505[esp+676]
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
; Line 35762
	or	WORD PTR [ebx+24], 2048			; 00000800H
$LN357@sqlite3Vdb@57:
; Line 35767
	mov	eax, DWORD PTR _jumpIfNull$90753[esp+672]
	test	eax, eax
	mov	BYTE PTR [ebx+27], 1
	je	$LN647@sqlite3Vdb@57
	cmp	DWORD PTR _containsNull$90749[esp+672], 0
	je	$LN647@sqlite3Vdb@57
; Line 35768
	add	eax, -1
	mov	DWORD PTR _pc$[esp+672], eax
; Line 35770
	jmp	$LN647@sqlite3Vdb@57
$LN355@sqlite3Vdb@57:
; Line 35786
	mov	edi, DWORD PTR [edi+4]
; Line 35788
	test	edi, edi
	jl	$LN647@sqlite3Vdb@57
	mov	edx, DWORD PTR _db$[esp+672]
	cmp	edi, DWORD PTR [edx]
	jge	$LN647@sqlite3Vdb@57
	mov	ecx, edx
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edi+edi*2]
	mov	eax, DWORD PTR [edx+eax*8+4]
	test	eax, eax
	je	$LN647@sqlite3Vdb@57
	cmp	BYTE PTR [ecx+20], 0
	jne	$LN647@sqlite3Vdb@57
; Line 35790
	mov	ecx, DWORD PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN772@sqlite3Vdb@57
	cmp	BYTE PTR [ecx+12], 0
	jne	$LN647@sqlite3Vdb@57
$LN772@sqlite3Vdb@57:
; Line 35791
	call	_sqlite3BtreeBeginStmt
	mov	DWORD PTR _rc$[esp+672], eax
; Line 35794
	jmp	$LN647@sqlite3Vdb@57
$LN352@sqlite3Vdb@57:
; Line 35814
	mov	ecx, DWORD PTR _db$[esp+672]
	cmp	DWORD PTR [ecx+84], 1
	mov	al, BYTE PTR [edi+4]
	mov	dl, BYTE PTR [edi+8]
	mov	BYTE PTR _i$90802[esp+672], al
	jle	SHORT $LN351@sqlite3Vdb@57
	test	al, al
	je	SHORT $LN351@sqlite3Vdb@57
	cmp	BYTE PTR [ecx+20], 0
	jne	SHORT $LN351@sqlite3Vdb@57
; Line 35820
	test	dl, dl
	mov	eax, OFFSET ??_C@_08FBLICIPL@rollback?$AA@
	jne	SHORT $LN680@sqlite3Vdb@57
	mov	eax, OFFSET ??_C@_06IFNEBLAJ@commit?$AA@
$LN680@sqlite3Vdb@57:
	push	0
	push	OFFSET ??_C@_0CK@OGHLELOO@?5transaction?5?9?5SQL?5statements?5in@
	push	eax
	push	OFFSET ??_C@_07FILNGEOC@cannot?5?$AA@
	add	esi, 556				; 0000022cH
	push	esi
	call	_sqlite3SetString
	add	esp, 20					; 00000014H
; Line 35821
	mov	DWORD PTR _rc$[esp+672], 1
	jmp	$LN647@sqlite3Vdb@57
$LN351@sqlite3Vdb@57:
; Line 35822
	cmp	al, BYTE PTR [ecx+20]
	jne	$LN1140@sqlite3Vdb@57
; Line 35846
	test	al, al
	jne	SHORT $LN683@sqlite3Vdb@57
	mov	eax, OFFSET ??_C@_0DA@CKKHGBEC@cannot?5start?5a?5transaction?5withi@
	jmp	SHORT $LN682@sqlite3Vdb@57
$LN683@sqlite3Vdb@57:
	test	dl, dl
	mov	eax, OFFSET ??_C@_0CL@DIEDEFLK@cannot?5rollback?5?9?5no?5transaction@
	jne	SHORT $LN682@sqlite3Vdb@57
	mov	eax, OFFSET ??_C@_0CJ@LALCBGBP@cannot?5commit?5?9?5no?5transaction?5i@
$LN682@sqlite3Vdb@57:
	push	0
	push	eax
$LN1447@sqlite3Vdb@57:
	add	esi, 556				; 0000022cH
	push	esi
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
; Line 35848
	mov	DWORD PTR _rc$[esp+672], 1
; Line 35850
	jmp	$LN647@sqlite3Vdb@57
$LN342@sqlite3Vdb@57:
; Line 35878
	mov	eax, DWORD PTR [edi+4]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _db$[esp+672]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+edx*8+4]
; Line 35880
	test	eax, eax
	je	$LN647@sqlite3Vdb@57
; Line 35881
	mov	edx, DWORD PTR [edi+8]
	push	edx
	push	eax
	call	_sqlite3BtreeBeginTrans
	add	esp, 8
; Line 35882
	cmp	eax, 5
	mov	DWORD PTR _rc$[esp+672], eax
	je	$LN1141@sqlite3Vdb@57
; Line 35888
	test	eax, eax
	je	$LN647@sqlite3Vdb@57
	cmp	eax, 8
	jne	$LN1313@sqlite3Vdb@57
; Line 35892
	jmp	$LN647@sqlite3Vdb@57
$LN338@sqlite3Vdb@57:
; Line 35919
	mov	ecx, DWORD PTR [edi+8]
	mov	edi, DWORD PTR [edi+4]
	lea	eax, DWORD PTR _iMeta$90834[esp+672]
	push	eax
	mov	eax, DWORD PTR _db$[esp+676]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [edi+edi*2]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	call	_sqlite3BtreeGetMeta
	mov	DWORD PTR _rc$[esp+680], eax
; Line 35921
	mov	eax, DWORD PTR _iMeta$90834[esp+680]
	cdq
	add	esp, 8
	add	ebx, 64					; 00000040H
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], edx
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 35922
	mov	WORD PTR [ebx+24], 4
; Line 35923
	jmp	$LN647@sqlite3Vdb@57
$LN337@sqlite3Vdb@57:
; Line 35940
	mov	edi, DWORD PTR _pOp$[esp+672]
	mov	eax, DWORD PTR [edi+4]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _db$[esp+672]
	mov	ecx, DWORD PTR [eax+4]
; Line 35943
	mov	eax, ebx
	lea	esi, DWORD PTR [ecx+edx*8]
	call	_sqlite3VdbeMemIntegerify
; Line 35945
	mov	edi, DWORD PTR [edi+8]
	mov	ebx, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi+4]
	add	edi, 1
	call	_sqlite3BtreeUpdateMeta
; Line 35946
	mov	ecx, DWORD PTR _pOp$[esp+672]
	mov	DWORD PTR _rc$[esp+672], eax
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	jne	SHORT $LN336@sqlite3Vdb@57
; Line 35948
	mov	eax, DWORD PTR _pTos$[esp+672]
	mov	eax, DWORD PTR [eax]
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [edx], eax
; Line 35949
	mov	eax, DWORD PTR _db$[esp+672]
	or	DWORD PTR [eax+8], 16			; 00000010H
	jmp	SHORT $LN334@sqlite3Vdb@57
$LN336@sqlite3Vdb@57:
; Line 35950
	cmp	eax, 1
	jne	SHORT $LN334@sqlite3Vdb@57
; Line 35952
	mov	eax, DWORD PTR _pTos$[esp+672]
	mov	edx, DWORD PTR [esi+20]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+120], al
$LN334@sqlite3Vdb@57:
; Line 35955
	sub	DWORD PTR _pTos$[esp+672], 64		; 00000040H
; Line 35956
	cmp	DWORD PTR [ecx+4], 1
	jne	$LN1344@sqlite3Vdb@57
; Line 35959
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3ExpirePreparedStatements
; Line 35961
	jmp	$LN1344@sqlite3Vdb@57
$LN332@sqlite3Vdb@57:
; Line 35984
	mov	eax, DWORD PTR [edi+4]
	mov	edx, DWORD PTR _db$[esp+672]
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+ecx*8+4]
; Line 35985
	xor	ecx, ecx
	cmp	eax, ecx
	je	$LN331@sqlite3Vdb@57
; Line 35986
	lea	ecx, DWORD PTR _iMeta$90852[esp+672]
	push	ecx
	push	1
	call	_sqlite3BtreeGetMeta
	add	esp, 8
; Line 35991
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN647@sqlite3Vdb@57
$LN1252@sqlite3Vdb@57:
	mov	edx, DWORD PTR _iMeta$90852[esp+672]
	cmp	edx, DWORD PTR [edi+8]
	je	$LN647@sqlite3Vdb@57
; Line 35992
	push	0
	push	OFFSET ??_C@_0BM@FKBOKANJ@database?5schema?5has?5changed?$AA@
	add	esi, 556				; 0000022cH
	push	esi
	call	_sqlite3SetString
; Line 36006
	mov	ecx, DWORD PTR _db$[esp+684]
	mov	edi, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _iMeta$90852[esp+684]
	lea	eax, DWORD PTR [edi+edi*2]
	mov	eax, DWORD PTR [edx+eax*8+20]
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [eax], ecx
	je	SHORT $LN328@sqlite3Vdb@57
; Line 36007
	mov	ebx, DWORD PTR _db$[esp+672]
	push	edi
	call	_sqlite3ResetInternalSchema
	mov	ebx, DWORD PTR _pTos$[esp+676]
	add	esp, 4
$LN328@sqlite3Vdb@57:
; Line 36010
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3ExpirePreparedStatements
; Line 36011
	mov	DWORD PTR _rc$[esp+672], 17		; 00000011H
; Line 36013
	jmp	$LN647@sqlite3Vdb@57
$LN331@sqlite3Vdb@57:
; Line 35988
	mov	DWORD PTR _rc$[esp+672], ecx
; Line 35989
	mov	DWORD PTR _iMeta$90852[esp+672], ecx
; Line 35991
	jmp	SHORT $LN1252@sqlite3Vdb@57
$LN327@sqlite3Vdb@57:
; Line 36061
	mov	eax, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR _p2$90864[esp+672], eax
; Line 36069
	mov	eax, ebx
	mov	DWORD PTR _i$90863[esp+672], edx
	call	_sqlite3VdbeMemIntegerify
; Line 36070
	mov	eax, DWORD PTR [ebx]
; Line 36074
	mov	edx, DWORD PTR _db$[esp+672]
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	DWORD PTR _iDb$90867[esp+672], eax
	mov	eax, DWORD PTR [edx+4]
	lea	eax, DWORD PTR [eax+ecx*8]
; Line 36075
	mov	ecx, DWORD PTR [eax+4]
	sub	ebx, 64					; 00000040H
; Line 36077
	cmp	BYTE PTR [edi], 9
	mov	DWORD PTR _pTos$[esp+672], ebx
	mov	DWORD PTR _pX$90866[esp+672], ecx
	jne	SHORT $LN326@sqlite3Vdb@57
; Line 36079
	mov	edx, DWORD PTR [eax+20]
	mov	al, BYTE PTR [edx+120]
	cmp	al, BYTE PTR [esi+565]
	mov	DWORD PTR _wrFlag$90865[esp+672], 1
	jae	SHORT $LN324@sqlite3Vdb@57
; Line 36080
	mov	BYTE PTR [esi+565], al
; Line 36082
	jmp	SHORT $LN324@sqlite3Vdb@57
$LN326@sqlite3Vdb@57:
; Line 36083
	mov	DWORD PTR _wrFlag$90865[esp+672], 0
$LN324@sqlite3Vdb@57:
; Line 36085
	mov	edi, DWORD PTR _p2$90864[esp+672]
	test	edi, edi
	jg	SHORT $LN323@sqlite3Vdb@57
; Line 36087
	mov	eax, ebx
	call	_sqlite3VdbeMemIntegerify
; Line 36088
	mov	edi, DWORD PTR [ebx]
; Line 36090
	sub	ebx, 64					; 00000040H
	mov	DWORD PTR _pTos$[esp+672], ebx
$LN323@sqlite3Vdb@57:
; Line 36094
	mov	eax, DWORD PTR _iDb$90867[esp+672]
	mov	ecx, DWORD PTR _i$90863[esp+672]
	push	eax
	push	ecx
	mov	ebx, esi
	call	_allocateCursor
	mov	esi, eax
	add	esp, 8
; Line 36095
	test	esi, esi
	je	$LN1352@sqlite3Vdb@57
; Line 36097
	mov	eax, DWORD PTR _pX$90866[esp+672]
	test	eax, eax
	mov	BYTE PTR [esi+28], 1
	je	$LN1344@sqlite3Vdb@57
; Line 36102
	mov	ebx, DWORD PTR _pOp$[esp+672]
	mov	edx, DWORD PTR [ebx+12]
	mov	ecx, DWORD PTR _wrFlag$90865[esp+672]
	push	esi
	push	edx
	push	OFFSET _sqlite3VdbeRecordCompare
	push	ecx
	push	edi
	push	eax
	call	_sqlite3BtreeCursor
	add	esp, 24					; 00000018H
; Line 36103
	cmp	DWORD PTR [ebx+16], -6			; fffffffaH
	mov	edi, eax
	mov	DWORD PTR _rc$[esp+672], edi
	jne	SHORT $LN320@sqlite3Vdb@57
; Line 36104
	mov	ecx, DWORD PTR [ebx+12]
	mov	DWORD PTR [esi+76], ecx
; Line 36105
	add	ecx, 1
	mov	DWORD PTR [esi+72], ecx
; Line 36106
	mov	ecx, DWORD PTR _p$GSCopy$[esp+672]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [esi+76]
	mov	dl, BYTE PTR [edx+121]
	mov	BYTE PTR [eax], dl
; Line 36107
	jmp	SHORT $LN319@sqlite3Vdb@57
$LN320@sqlite3Vdb@57:
; Line 36109
	mov	ecx, DWORD PTR _p$GSCopy$[esp+672]
	lea	eax, DWORD PTR [esi+34]
	mov	DWORD PTR [esi+76], 0
	mov	DWORD PTR [esi+72], eax
$LN319@sqlite3Vdb@57:
; Line 36111
	test	edi, edi
	je	SHORT $LN315@sqlite3Vdb@57
	cmp	edi, 5
	je	$LN316@sqlite3Vdb@57
	cmp	edi, 16					; 00000010H
	jne	SHORT $LN1360@sqlite3Vdb@57
; Line 36144
	cmp	DWORD PTR [ebx+16], -6			; fffffffaH
; Line 36146
	mov	DWORD PTR _rc$[esp+672], 0
	setne	al
	test	al, al
	sete	cl
	mov	BYTE PTR [esi+32], al
	mov	BYTE PTR [esi+33], cl
; Line 36147
	jmp	$LN1344@sqlite3Vdb@57
$LN315@sqlite3Vdb@57:
; Line 36119
	mov	eax, DWORD PTR [esi]
	call	_sqlite3BtreeFlags
; Line 36126
	test	al, -16					; fffffff0H
	jne	SHORT $LN311@sqlite3Vdb@57
	mov	ecx, eax
	and	ecx, 7
	cmp	ecx, 5
	je	SHORT $LN314@sqlite3Vdb@57
	cmp	ecx, 2
	jne	SHORT $LN311@sqlite3Vdb@57
$LN314@sqlite3Vdb@57:
; Line 36130
	mov	dl, al
; Line 36131
	shr	eax, 1
	and	dl, 1
	and	al, 1
; Line 36137
	test	dl, dl
	mov	BYTE PTR [esi+32], dl
	mov	BYTE PTR [esi+33], al
	je	SHORT $LN310@sqlite3Vdb@57
	cmp	DWORD PTR [ebx+16], -6			; fffffffaH
	je	SHORT $LN311@sqlite3Vdb@57
$LN310@sqlite3Vdb@57:
	test	al, al
	je	$LN1344@sqlite3Vdb@57
	cmp	DWORD PTR [ebx+16], -6			; fffffffaH
	je	$LN1344@sqlite3Vdb@57
$LN311@sqlite3Vdb@57:
; Line 36138
	mov	DWORD PTR _rc$[esp+672], 11		; 0000000bH
$LN1360@sqlite3Vdb@57:
; Line 38544
	mov	ebx, DWORD PTR _pTos$[esp+672]
$LN1313@sqlite3Vdb@57:
; Line 36768
	mov	esi, DWORD PTR _p$GSCopy$[esp+672]
$abort_due_to_error$90538:
; Line 38551
	cmp	DWORD PTR [esi+556], 0
	lea	ecx, DWORD PTR [esi+556]
	jne	SHORT $vdbe_halt$90309
; Line 38552
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN3@sqlite3Vdb@57
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN3@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], 7
$LN3@sqlite3Vdb@57:
; Line 38553
	mov	eax, DWORD PTR _rc$[esp+672]
	push	0
	call	_sqlite3ErrStr
	push	eax
	push	ecx
$LN1449@sqlite3Vdb@57:
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
$vdbe_halt$90309:
; Line 38516
	cmp	DWORD PTR _rc$[esp+672], 0
	je	$LN6@sqlite3Vdb@57
; Line 38517
	mov	edx, DWORD PTR _rc$[esp+672]
	mov	DWORD PTR [esi+124], edx
; Line 38518
	mov	edi, 1
; Line 38519
	jmp	$LN5@sqlite3Vdb@57
$LN307@sqlite3Vdb@57:
; Line 36175
	mov	edi, DWORD PTR [edi+4]
; Line 36178
	push	-1
	push	edi
	mov	ebx, esi
	call	_allocateCursor
	add	esp, 8
; Line 36179
	test	eax, eax
	mov	DWORD PTR _pCx$90903[esp+672], eax
	je	$LN1352@sqlite3Vdb@57
; Line 36181
	mov	esi, DWORD PTR _db$[esp+672]
	mov	edi, eax
	mov	BYTE PTR [edi+28], 1
	add	edi, 48					; 00000030H
	xor	eax, eax
	test	DWORD PTR [esi+8], 4096			; 00001000H
	mov	DWORD PTR tv5670[esp+672], edi
	lea	ecx, DWORD PTR [eax+1]
	je	SHORT $LN1253@sqlite3Vdb@57
	lea	ecx, DWORD PTR [eax+3]
$LN1253@sqlite3Vdb@57:
	cmp	BYTE PTR [esi+21], 2
	jne	SHORT $LN775@sqlite3Vdb@57
	mov	eax, OFFSET ??_C@_08CADOGOJM@?3memory?3?$AA@
$LN775@sqlite3Vdb@57:
	push	ecx
	push	edi
	push	esi
	push	eax
	call	_sqlite3BtreeOpen
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN787@sqlite3Vdb@57
	mov	edx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [esi+276]
	mov	DWORD PTR [edx+44], ecx
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [edx+108], ecx
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+68], 500			; 000001f4H
$LN787@sqlite3Vdb@57:
; Line 36182
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN301@sqlite3Vdb@57
; Line 36183
	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [eax+4]
	xor	ebx, ebx
	cmp	BYTE PTR [eax+8], 2
	mov	DWORD PTR $T148227[esp+672], eax
	je	$LN1254@sqlite3Vdb@57
	cmp	BYTE PTR [esi+13], bl
	je	SHORT $LN807@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], 8
	jmp	$LN301@sqlite3Vdb@57
$LN807@sqlite3Vdb@57:
	cmp	BYTE PTR [esi+48], 2
	jne	SHORT $LL805@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], 5
	jmp	$LN301@sqlite3Vdb@57
	npad	6
$LL805@sqlite3Vdb@57:
	cmp	DWORD PTR [esi+8], 0
	jne	SHORT $LN802@sqlite3Vdb@57
	mov	edi, esi
	call	_lockBtree
	mov	ebx, eax
$LN802@sqlite3Vdb@57:
	test	ebx, ebx
	jne	SHORT $LN797@sqlite3Vdb@57
	cmp	BYTE PTR [esi+13], bl
	je	SHORT $LN800@sqlite3Vdb@57
	mov	ebx, 8
$LN797@sqlite3Vdb@57:
	call	_unlockBtreeIfUnused
$LN804@sqlite3Vdb@57:
	cmp	ebx, 5
	jne	SHORT $LN794@sqlite3Vdb@57
	cmp	BYTE PTR [esi+48], 0
	jne	$LN791@sqlite3Vdb@57
	mov	edi, DWORD PTR [esi+44]
	test	edi, edi
	je	$LN791@sqlite3Vdb@57
	mov	ecx, DWORD PTR [edi]
	test	ecx, ecx
	je	$LN791@sqlite3Vdb@57
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	jl	SHORT $LN791@sqlite3Vdb@57
	push	eax
	mov	eax, DWORD PTR [edi+4]
	push	eax
	call	ecx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1275@sqlite3Vdb@57
	add	DWORD PTR [edi+8], 1
	jmp	SHORT $LL805@sqlite3Vdb@57
$LN800@sqlite3Vdb@57:
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [edx+72]
	push	0
	call	_sqlite3PagerBegin
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN797@sqlite3Vdb@57
	push	esi
	call	_newDatabase
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN797@sqlite3Vdb@57
	mov	BYTE PTR [esi+12], al
	jmp	SHORT $LN804@sqlite3Vdb@57
$LN1275@sqlite3Vdb@57:
	mov	DWORD PTR [edi+8], -1
	jmp	SHORT $LN791@sqlite3Vdb@57
$LN794@sqlite3Vdb@57:
	test	ebx, ebx
	jne	SHORT $LN791@sqlite3Vdb@57
	mov	eax, DWORD PTR $T148227[esp+672]
	cmp	BYTE PTR [eax+8], bl
	jne	SHORT $LN792@sqlite3Vdb@57
	add	DWORD PTR [esi+56], 1
$LN792@sqlite3Vdb@57:
	mov	BYTE PTR [eax+8], 2
	cmp	BYTE PTR [esi+48], 2
	jae	SHORT $LN791@sqlite3Vdb@57
	mov	BYTE PTR [esi+48], 2
$LN791@sqlite3Vdb@57:
; Line 36185
	test	ebx, ebx
	mov	DWORD PTR _rc$[esp+672], ebx
	jne	$LN301@sqlite3Vdb@57
	mov	edi, DWORD PTR tv5670[esp+672]
$LN1254@sqlite3Vdb@57:
; Line 36191
	mov	esi, DWORD PTR _pOp$[esp+672]
	cmp	DWORD PTR [esi+12], 0
	je	$LN303@sqlite3Vdb@57
; Line 36194
	mov	edx, DWORD PTR [edi]
	push	2
	lea	ecx, DWORD PTR _pgno$90909[esp+676]
	push	ecx
	push	edx
	call	_sqlite3BtreeCreateTable
	add	esp, 12					; 0000000cH
; Line 36195
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1396@sqlite3Vdb@57
; Line 36198
	mov	eax, DWORD PTR [esi+12]
	mov	esi, DWORD PTR [edi]
	mov	edi, DWORD PTR _pCx$90903[esp+672]
	mov	DWORD PTR $T148391[esp+672], eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [edi], 0
	cmp	BYTE PTR [eax+13], 0
	mov	DWORD PTR $T148389[esp+672], esi
	mov	DWORD PTR _pBt$148332[esp+672], eax
	je	SHORT $LN827@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], 8
	jmp	$LN829@sqlite3Vdb@57
$LN827@sqlite3Vdb@57:
	mov	ecx, DWORD PTR _pgno$90909[esp+672]
	push	ecx
	xor	ebx, ebx
	mov	eax, esi
	call	_checkReadLocks
	add	esp, 4
	test	eax, eax
	je	SHORT $LN826@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], 6
	jmp	$LN829@sqlite3Vdb@57
$LN826@sqlite3Vdb@57:
	mov	edx, DWORD PTR _pBt$148332[esp+672]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN823@sqlite3Vdb@57
	mov	ebx, esi
	call	_lockBtreeWithRetry
	test	eax, eax
	je	SHORT $LN824@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], eax
	jmp	$LN829@sqlite3Vdb@57
$LN824@sqlite3Vdb@57:
	mov	eax, DWORD PTR _pBt$148332[esp+672]
	cmp	BYTE PTR [eax+13], 0
	je	SHORT $LN823@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], 8
	jmp	$LN829@sqlite3Vdb@57
$LN823@sqlite3Vdb@57:
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN840@sqlite3Vdb@57
	test	esi, esi
	jg	SHORT $LN1271@sqlite3Vdb@57
$LN840@sqlite3Vdb@57:
	push	96					; 00000060H
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	mov	DWORD PTR _p$148353[esp+672], ebx
	jne	SHORT $LN1272@sqlite3Vdb@57
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN850@sqlite3Vdb@57
	test	esi, esi
	jg	SHORT $LN833@sqlite3Vdb@57
$LN850@sqlite3Vdb@57:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN833@sqlite3Vdb@57
$LN1272@sqlite3Vdb@57:
	push	96					; 00000060H
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN833@sqlite3Vdb@57:
	test	ebx, ebx
	jne	SHORT $LN822@sqlite3Vdb@57
$LN1271@sqlite3Vdb@57:
	mov	esi, DWORD PTR _pBt$148332[esp+672]
	mov	edi, 7
	call	_unlockBtreeIfUnused
	mov	DWORD PTR _rc$[esp+672], edi
	jmp	$LN1437@sqlite3Vdb@57
$LN822@sqlite3Vdb@57:
	mov	eax, DWORD PTR _pgno$90909[esp+672]
	cmp	eax, 1
	mov	DWORD PTR [ebx+20], eax
	jne	SHORT $LN821@sqlite3Vdb@57
	mov	ecx, DWORD PTR _pBt$148332[esp+672]
	mov	esi, DWORD PTR [ecx]
	call	_sqlite3PagerPagecount
	test	eax, eax
	jne	SHORT $LN821@sqlite3Vdb@57
	lea	edi, DWORD PTR [eax+16]
	jmp	SHORT $create_cursor_exception$148340
$LN821@sqlite3Vdb@57:
	mov	esi, DWORD PTR [ebx+20]
	test	esi, esi
	jne	SHORT $LN859@sqlite3Vdb@57
	lea	edi, DWORD PTR [esi+11]
	jmp	SHORT $create_cursor_exception$148340
$LN859@sqlite3Vdb@57:
	mov	edi, DWORD PTR _pBt$148332[esp+672]
	lea	eax, DWORD PTR [ebx+24]
	push	eax
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN858@sqlite3Vdb@57
	mov	ecx, DWORD PTR [ebx+24]
	cmp	BYTE PTR [ecx], al
	jne	SHORT $LN858@sqlite3Vdb@57
	push	eax
	mov	ebx, ecx
	call	_sqlite3BtreeInitPage
	mov	ebx, DWORD PTR _p$148353[esp+676]
	add	esp, 4
$LN858@sqlite3Vdb@57:
	test	eax, eax
	mov	edi, eax
	je	SHORT $LN820@sqlite3Vdb@57
$create_cursor_exception$148340:
	mov	eax, DWORD PTR [ebx+24]
	test	eax, eax
	je	SHORT $LN862@sqlite3Vdb@57
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN862@sqlite3Vdb@57:
	push	ebx
	call	_free
	mov	esi, DWORD PTR _pBt$148332[esp+676]
	add	esp, 4
	call	_unlockBtreeIfUnused
	mov	DWORD PTR _rc$[esp+672], edi
	jmp	SHORT $LN1437@sqlite3Vdb@57
$LN820@sqlite3Vdb@57:
	mov	edx, OFFSET _sqlite3VdbeRecordCompare
	test	edx, edx
	mov	eax, OFFSET _sqlite3VdbeRecordCompare
	jne	SHORT $LN832@sqlite3Vdb@57
	mov	eax, OFFSET _dfltCompare
$LN832@sqlite3Vdb@57:
	mov	ecx, DWORD PTR $T148389[esp+672]
	mov	DWORD PTR [ebx+12], eax
	mov	eax, DWORD PTR $T148391[esp+672]
	mov	DWORD PTR [ebx], ecx
	mov	ecx, DWORD PTR _pBt$148332[esp+672]
	mov	DWORD PTR [ebx+16], eax
	mov	BYTE PTR [ebx+64], 1
	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	mov	DWORD PTR [ebx+4], eax
	je	SHORT $LN819@sqlite3Vdb@57
	mov	DWORD PTR [eax+8], ebx
$LN819@sqlite3Vdb@57:
	mov	edx, DWORD PTR _pCx$90903[esp+672]
	mov	DWORD PTR [ecx+4], ebx
	mov	BYTE PTR [ebx+65], 0
	mov	DWORD PTR [edx], ebx
	mov	DWORD PTR _rc$[esp+672], 0
$LN1437@sqlite3Vdb@57:
	mov	edi, DWORD PTR _pCx$90903[esp+672]
$LN829@sqlite3Vdb@57:
; Line 36199
	mov	eax, DWORD PTR _pOp$[esp+672]
	mov	eax, DWORD PTR [eax+12]
; Line 36200
	mov	ecx, DWORD PTR _p$GSCopy$[esp+672]
	mov	DWORD PTR [edi+76], eax
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx+20]
	mov	cl, BYTE PTR [edx+121]
	mov	BYTE PTR [eax], cl
; Line 36201
	mov	edx, DWORD PTR [edi+76]
	add	edx, 1
	mov	DWORD PTR [edi+72], edx
; Line 36203
	mov	BYTE PTR [edi+32], 0
; Line 36204
	jmp	$LN301@sqlite3Vdb@57
$LN1396@sqlite3Vdb@57:
; Line 36201
	mov	edi, DWORD PTR _pCx$90903[esp+672]
; Line 36203
	mov	BYTE PTR [edi+32], 0
; Line 36204
	jmp	$LN301@sqlite3Vdb@57
$LN303@sqlite3Vdb@57:
; Line 36205
	mov	esi, DWORD PTR [edi]
	mov	edi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR _pCx$90903[esp+672]
	mov	DWORD PTR [eax], 0
	cmp	BYTE PTR [edi+13], 0
	mov	DWORD PTR $T148553[esp+672], esi
	je	SHORT $LN879@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], 8
	jmp	$LN881@sqlite3Vdb@57
$LN879@sqlite3Vdb@57:
	push	1
	xor	ebx, ebx
	mov	eax, esi
	call	_checkReadLocks
	add	esp, 4
	test	eax, eax
	je	SHORT $LN878@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], 6
	jmp	$LN881@sqlite3Vdb@57
$LN878@sqlite3Vdb@57:
	cmp	DWORD PTR [edi+8], 0
	jne	SHORT $LN875@sqlite3Vdb@57
	mov	ebx, esi
	call	_lockBtreeWithRetry
	test	eax, eax
	je	SHORT $LN876@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], eax
	jmp	$LN881@sqlite3Vdb@57
$LN876@sqlite3Vdb@57:
	cmp	BYTE PTR [edi+13], 0
	je	SHORT $LN875@sqlite3Vdb@57
	mov	DWORD PTR _rc$[esp+672], 8
	jmp	$LN881@sqlite3Vdb@57
$LN875@sqlite3Vdb@57:
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	mov	esi, DWORD PTR _inMutex
	je	SHORT $LN892@sqlite3Vdb@57
	test	esi, esi
	jg	SHORT $LN1273@sqlite3Vdb@57
$LN892@sqlite3Vdb@57:
	push	96					; 00000060H
	call	_malloc
	mov	ebx, eax
	add	esp, 4
	test	ebx, ebx
	mov	DWORD PTR _p$148525[esp+672], ebx
	jne	SHORT $LN1274@sqlite3Vdb@57
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN902@sqlite3Vdb@57
	test	esi, esi
	jg	SHORT $LN885@sqlite3Vdb@57
$LN902@sqlite3Vdb@57:
	add	esi, 1
	mov	DWORD PTR _inMutex, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 1
	jmp	SHORT $LN885@sqlite3Vdb@57
$LN1274@sqlite3Vdb@57:
	push	96					; 00000060H
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH
$LN885@sqlite3Vdb@57:
	test	ebx, ebx
	jne	SHORT $LN874@sqlite3Vdb@57
$LN1273@sqlite3Vdb@57:
	mov	esi, edi
	mov	ebx, 7
	call	_unlockBtreeIfUnused
	mov	DWORD PTR _rc$[esp+672], ebx
	jmp	$LN881@sqlite3Vdb@57
$LN874@sqlite3Vdb@57:
	mov	DWORD PTR [ebx+20], 1
	mov	esi, DWORD PTR [edi]
	call	_sqlite3PagerPagecount
	test	eax, eax
	jne	SHORT $LN873@sqlite3Vdb@57
	mov	DWORD PTR _rc$148502[esp+672], 16	; 00000010H
	jmp	SHORT $create_cursor_exception$148512
$LN873@sqlite3Vdb@57:
	mov	esi, DWORD PTR [ebx+20]
	test	esi, esi
	jne	SHORT $LN911@sqlite3Vdb@57
	mov	DWORD PTR _rc$148502[esp+672], 11	; 0000000bH
	jmp	SHORT $create_cursor_exception$148512
$LN911@sqlite3Vdb@57:
	lea	eax, DWORD PTR [ebx+24]
	push	eax
	xor	eax, eax
	call	_sqlite3BtreeGetPage
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN910@sqlite3Vdb@57
	mov	ecx, DWORD PTR [ebx+24]
	cmp	BYTE PTR [ecx], al
	jne	SHORT $LN910@sqlite3Vdb@57
	push	eax
	mov	ebx, ecx
	call	_sqlite3BtreeInitPage
	mov	ebx, DWORD PTR _p$148525[esp+676]
	add	esp, 4
$LN910@sqlite3Vdb@57:
	xor	ecx, ecx
	cmp	eax, ecx
	mov	DWORD PTR _rc$148502[esp+672], eax
	je	SHORT $LN872@sqlite3Vdb@57
$create_cursor_exception$148512:
	mov	eax, DWORD PTR [ebx+24]
	test	eax, eax
	je	SHORT $LN914@sqlite3Vdb@57
	mov	eax, DWORD PTR [eax+72]
	call	_sqlite3PagerUnref
$LN914@sqlite3Vdb@57:
	push	ebx
	call	_free
	mov	ebx, DWORD PTR _rc$148502[esp+676]
	add	esp, 4
	mov	esi, edi
	call	_unlockBtreeIfUnused
	mov	DWORD PTR _rc$[esp+672], ebx
	jmp	SHORT $LN881@sqlite3Vdb@57
$LN872@sqlite3Vdb@57:
	mov	edx, DWORD PTR $T148553[esp+672]
	mov	DWORD PTR [ebx+12], OFFSET _dfltCompare
	mov	DWORD PTR [ebx+16], ecx
	mov	DWORD PTR [ebx], edx
	mov	BYTE PTR [ebx+64], 1
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, ecx
	mov	DWORD PTR [ebx+4], eax
	je	SHORT $LN871@sqlite3Vdb@57
	mov	DWORD PTR [eax+8], ebx
$LN871@sqlite3Vdb@57:
	mov	eax, DWORD PTR _pCx$90903[esp+672]
	mov	DWORD PTR [edi+4], ebx
	mov	BYTE PTR [ebx+65], 0
	mov	DWORD PTR [eax], ebx
	mov	DWORD PTR _rc$[esp+672], ecx
$LN881@sqlite3Vdb@57:
; Line 36206
	mov	eax, DWORD PTR _pCx$90903[esp+672]
; Line 36207
	lea	ecx, DWORD PTR [eax+34]
	mov	BYTE PTR [eax+32], 1
	mov	DWORD PTR [eax+72], ecx
$LN301@sqlite3Vdb@57:
; Line 36210
	mov	eax, DWORD PTR _pCx$90903[esp+672]
	mov	edx, DWORD PTR _pOp$[esp+672]
	mov	ecx, DWORD PTR [edx+8]
; Line 36211
	cmp	BYTE PTR [eax+32], 0
	mov	DWORD PTR [eax+80], ecx
	sete	dl
	mov	BYTE PTR [eax+33], dl
; Line 36212
	jmp	$LN1344@sqlite3Vdb@57
$LN300@sqlite3Vdb@57:
; Line 36228
	mov	edi, DWORD PTR [edi+4]
; Line 36231
	push	-1
	push	edi
	mov	ebx, esi
	call	_allocateCursor
	add	esp, 8
; Line 36232
	test	eax, eax
	je	$LN1352@sqlite3Vdb@57
; Line 36233
	mov	cl, 1
; Line 36235
	lea	edx, DWORD PTR [eax+34]
	mov	BYTE PTR [eax+28], cl
	mov	BYTE PTR [eax+30], cl
	mov	DWORD PTR [eax+72], edx
; Line 36236
	mov	BYTE PTR [eax+32], cl
; Line 36237
	mov	BYTE PTR [eax+33], 0
; Line 36238
	jmp	$LN1344@sqlite3Vdb@57
$LN298@sqlite3Vdb@57:
; Line 36247
	mov	edi, DWORD PTR [edi+4]
; Line 36248
	test	edi, edi
	jl	$LN647@sqlite3Vdb@57
	cmp	edi, DWORD PTR [esi+52]
	jge	$LN647@sqlite3Vdb@57
; Line 36249
	mov	eax, DWORD PTR _p$GSCopy$[esp+672]
	mov	ecx, DWORD PTR [eax+56]
	mov	esi, DWORD PTR [ecx+edi*4]
	push	eax
	call	_sqlite3VdbeFreeCursor
; Line 36250
	mov	edx, DWORD PTR _p$GSCopy$[esp+676]
	mov	eax, DWORD PTR [edx+56]
	add	esp, 4
	mov	DWORD PTR [eax+edi*4], 0
; Line 36252
	jmp	$LN647@sqlite3Vdb@57
$LN296@sqlite3Vdb@57:
; Line 36304
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [esi+56]
	mov	esi, DWORD PTR [edx+ecx*4]
; Line 36306
	cmp	DWORD PTR [esi], 0
	mov	DWORD PTR _pC$90925[esp+672], esi
	je	$LN278@sqlite3Vdb@57
; Line 36310
	mov	eax, DWORD PTR tv4894[esp+672]
	cmp	eax, 7
	mov	BYTE PTR [esi+28], 0
	je	SHORT $LN685@sqlite3Vdb@57
	cmp	eax, 86					; 00000056H
	je	SHORT $LN685@sqlite3Vdb@57
	xor	eax, eax
	jmp	SHORT $LN686@sqlite3Vdb@57
$LN685@sqlite3Vdb@57:
	mov	eax, 1
$LN686@sqlite3Vdb@57:
	mov	ecx, DWORD PTR [esi+72]
	mov	BYTE PTR [ecx], al
; Line 36311
	cmp	BYTE PTR [esi+32], 0
	je	SHORT $LN294@sqlite3Vdb@57
; Line 36313
	mov	eax, ebx
	call	_sqlite3VdbeMemIntegerify
; Line 36315
	cmp	DWORD PTR [edi+8], 0
	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [ebx+4]
	jne	SHORT $LN293@sqlite3Vdb@57
	cmp	BYTE PTR [edi], 128			; 00000080H
	jne	SHORT $LN293@sqlite3Vdb@57
; Line 36319
	sub	ebx, 64					; 00000040H
	mov	DWORD PTR [esi+40], eax
	mov	DWORD PTR [esi+44], ecx
	mov	BYTE PTR [esi+31], 1
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 36320
	jmp	$LN647@sqlite3Vdb@57
$LN293@sqlite3Vdb@57:
; Line 36322
	lea	edx, DWORD PTR _res$90930[esp+672]
	push	edx
	push	0
	push	ecx
	push	eax
	mov	eax, DWORD PTR [esi]
	push	0
	push	eax
	call	_sqlite3BtreeMoveto
	add	esp, 24					; 00000018H
; Line 36323
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
; Line 36326
	mov	ecx, DWORD PTR [ebx]
; Line 36327
	cmp	DWORD PTR _res$90930[esp+672], eax
	mov	DWORD PTR [esi+8], ecx
	mov	edx, DWORD PTR [ebx+4]
	sete	al
	mov	DWORD PTR [esi+12], edx
	mov	BYTE PTR [esi+25], al
; Line 36328
	jmp	SHORT $LN291@sqlite3Vdb@57
$LN294@sqlite3Vdb@57:
; Line 36330
	test	WORD PTR [ebx+24], 2048			; 00000800H
	je	SHORT $LN687@sqlite3Vdb@57
	mov	esi, ebx
	call	_sqlite3VdbeMemExpandBlob
	mov	esi, DWORD PTR _pC$90925[esp+672]
$LN687@sqlite3Vdb@57:
; Line 36331
	mov	eax, DWORD PTR [ebx+20]
	lea	ecx, DWORD PTR _res$90930[esp+672]
	push	ecx
	cdq
	push	0
	push	edx
	mov	edx, DWORD PTR [ebx+16]
	push	eax
	mov	eax, DWORD PTR [esi]
	push	edx
	push	eax
	call	_sqlite3BtreeMoveto
	add	esp, 24					; 00000018H
; Line 36332
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
; Line 36335
	mov	BYTE PTR [esi+25], al
$LN291@sqlite3Vdb@57:
; Line 36343
	mov	eax, DWORD PTR tv4894[esp+672]
	mov	edx, DWORD PTR [esi+72]
	xor	ecx, ecx
	cmp	eax, 128				; 00000080H
	mov	BYTE PTR [esi+31], 0
	mov	DWORD PTR [esi+104], ecx
	mov	BYTE PTR [edx], cl
	je	SHORT $LN288@sqlite3Vdb@57
	cmp	eax, 7
	je	SHORT $LN288@sqlite3Vdb@57
; Line 36353
	cmp	DWORD PTR _res$90930[esp+672], ecx
	jl	SHORT $LN283@sqlite3Vdb@57
; Line 36354
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR _res$90930[esp+672]
	push	eax
	push	ecx
	call	_sqlite3BtreePrevious
; Line 36357
	jmp	SHORT $LN1438@sqlite3Vdb@57
$LN283@sqlite3Vdb@57:
; Line 36361
	mov	edx, DWORD PTR [esi]
	xor	eax, eax
	cmp	BYTE PTR [edx+65], 1
	setne	al
	mov	DWORD PTR _res$90930[esp+672], eax
$LN285@sqlite3Vdb@57:
; Line 36364
	cmp	DWORD PTR _res$90930[esp+672], 0
	je	SHORT $LN278@sqlite3Vdb@57
; Line 36365
	mov	edi, DWORD PTR [edi+8]
	test	edi, edi
	jle	SHORT $LN279@sqlite3Vdb@57
; Line 36366
	add	edi, -1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 36367
	jmp	SHORT $LN278@sqlite3Vdb@57
$LN288@sqlite3Vdb@57:
; Line 36344
	cmp	DWORD PTR _res$90930[esp+672], ecx
	jge	SHORT $LN287@sqlite3Vdb@57
; Line 36345
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR _res$90930[esp+672]
	push	ecx
	push	edx
	call	_sqlite3BtreeNext
$LN1438@sqlite3Vdb@57:
	add	esp, 8
; Line 36346
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
; Line 36347
	mov	BYTE PTR [esi+25], al
; Line 36348
	jmp	SHORT $LN285@sqlite3Vdb@57
$LN287@sqlite3Vdb@57:
; Line 36349
	mov	DWORD PTR _res$90930[esp+672], ecx
; Line 36364
	jmp	SHORT $LN278@sqlite3Vdb@57
$LN279@sqlite3Vdb@57:
; Line 36368
	mov	BYTE PTR [esi+28], 1
$LN278@sqlite3Vdb@57:
; Line 36372
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN277@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN277@sqlite3Vdb@57:
; Line 36373
	sub	ebx, 64					; 00000040H
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 36374
	jmp	$LN647@sqlite3Vdb@57
$LN276@sqlite3Vdb@57:
; Line 36434
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [esi+56]
	mov	esi, DWORD PTR [edx+ecx*4]
	xor	eax, eax
	cmp	DWORD PTR [esi], eax
	mov	DWORD PTR _pC$90958[esp+672], esi
	je	SHORT $LN275@sqlite3Vdb@57
; Line 36438
	test	BYTE PTR [ebx+24], 18			; 00000012H
	jne	SHORT $LN274@sqlite3Vdb@57
	movzx	ebx, BYTE PTR _encoding$[esp+672]
	mov	esi, DWORD PTR _pTos$[esp+672]
	call	_sqlite3VdbeMemStringify
	test	eax, eax
	jne	$LN1352@sqlite3Vdb@57
	mov	ebx, esi
	mov	esi, DWORD PTR _pC$90958[esp+672]
$LN274@sqlite3Vdb@57:
; Line 36439
	mov	ecx, DWORD PTR [ebx+16]
	lea	eax, DWORD PTR _res$90963[esp+672]
	push	eax
; Line 36440
	mov	eax, DWORD PTR [ebx+20]
	cdq
	push	0
	push	edx
	mov	edx, DWORD PTR [esi]
	push	eax
	push	ecx
	push	edx
	call	_sqlite3BtreeMoveto
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN689@sqlite3Vdb@57
	cmp	DWORD PTR _res$90963[esp+672], eax
	jne	SHORT $LN689@sqlite3Vdb@57
	mov	eax, 1
	jmp	SHORT $LN690@sqlite3Vdb@57
$LN689@sqlite3Vdb@57:
	xor	eax, eax
$LN690@sqlite3Vdb@57:
; Line 36442
	mov	edi, DWORD PTR _pOp$[esp+672]
	mov	BYTE PTR [esi+31], 0
	mov	DWORD PTR [esi+104], 0
$LN275@sqlite3Vdb@57:
; Line 36444
	mov	cl, BYTE PTR [edi]
	cmp	cl, 134					; 00000086H
	jne	SHORT $LN273@sqlite3Vdb@57
; Line 36445
	test	eax, eax
	je	SHORT $LN270@sqlite3Vdb@57
; Line 36446
	jmp	SHORT $LN1439@sqlite3Vdb@57
$LN273@sqlite3Vdb@57:
; Line 36447
	test	eax, eax
	jne	SHORT $LN270@sqlite3Vdb@57
$LN1439@sqlite3Vdb@57:
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
$LN270@sqlite3Vdb@57:
; Line 36449
	cmp	cl, 112					; 00000070H
	je	$LN647@sqlite3Vdb@57
; Line 36453
	jmp	$LN278@sqlite3Vdb@57
$LN267@sqlite3Vdb@57:
; Line 36478
	mov	eax, DWORD PTR [edi+4]
	mov	DWORD PTR _i$90975[esp+672], eax
; Line 36487
	mov	eax, ebx
	lea	edi, DWORD PTR [ebx-64]
	call	_sqlite3VdbeMemIntegerify
; Line 36488
	mov	ecx, DWORD PTR [ebx]
; Line 36492
	mov	eax, DWORD PTR [esi+56]
	mov	edx, DWORD PTR [ebx+4]
	mov	DWORD PTR _R$90979[esp+672], ecx
	mov	ecx, DWORD PTR _i$90975[esp+672]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _pCx$90977[esp+672], eax
; Line 36494
	mov	eax, DWORD PTR [eax]
; Line 36495
	test	eax, eax
	mov	DWORD PTR _R$90979[esp+676], edx
	mov	DWORD PTR _pTos$[esp+672], edi
	mov	DWORD PTR _pCrsr$90978[esp+672], eax
	je	$LN1344@sqlite3Vdb@57
; Line 36506
	test	BYTE PTR [edi+24], 18			; 00000012H
	jne	SHORT $LN1367@sqlite3Vdb@57
	movzx	ebx, BYTE PTR _encoding$[esp+672]
	mov	esi, edi
	call	_sqlite3VdbeMemStringify
	test	eax, eax
	jne	$LN1352@sqlite3Vdb@57
$LN1367@sqlite3Vdb@57:
; Line 36507
	mov	esi, DWORD PTR [edi+16]
	mov	ebx, DWORD PTR _pOp$[esp+672]
; Line 36510
	mov	eax, esi
	call	_sqlite3VdbeIdxRowidLen
; Line 36511
	mov	edi, DWORD PTR [edi+20]
; Line 36517
	mov	edx, DWORD PTR _pCx$90977[esp+672]
; Line 36518
	mov	ecx, DWORD PTR _pCrsr$90978[esp+672]
	sub	edi, eax
	lea	eax, DWORD PTR _res$90985[esp+672]
	push	eax
	mov	DWORD PTR [edx+104], 0
	push	0
	mov	eax, edi
	cdq
	push	edx
	push	eax
	push	esi
	push	ecx
	call	_sqlite3BtreeMoveto
	add	esp, 24					; 00000018H
; Line 36519
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1360@sqlite3Vdb@57
; Line 36522
	cmp	DWORD PTR _res$90985[esp+672], eax
	jge	SHORT $LN262@sqlite3Vdb@57
; Line 36523
	mov	eax, DWORD PTR _pCrsr$90978[esp+672]
	lea	edx, DWORD PTR _res$90985[esp+672]
	push	edx
	push	eax
	call	_sqlite3BtreeNext
	add	esp, 8
; Line 36524
	cmp	DWORD PTR _res$90985[esp+672], 0
	mov	DWORD PTR _rc$[esp+672], eax
	je	SHORT $LN262@sqlite3Vdb@57
; Line 36525
	mov	ebx, DWORD PTR [ebx+8]
	sub	ebx, 1
	mov	DWORD PTR _pc$[esp+672], ebx
; Line 36526
	jmp	$LN1344@sqlite3Vdb@57
$LN262@sqlite3Vdb@57:
; Line 36529
	lea	ecx, DWORD PTR _res$90985[esp+672]
	push	ecx
	push	esi
	mov	esi, DWORD PTR _pCx$90977[esp+680]
	push	edi
	call	_sqlite3VdbeIdxKeyCompare
	add	esp, 12					; 0000000cH
; Line 36530
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1360@sqlite3Vdb@57
; Line 36531
	cmp	DWORD PTR _res$90985[esp+672], eax
	jle	SHORT $LN260@sqlite3Vdb@57
; Line 36532
	mov	ebx, DWORD PTR [ebx+8]
	sub	ebx, 1
	mov	DWORD PTR _pc$[esp+672], ebx
; Line 36533
	jmp	$LN1344@sqlite3Vdb@57
$LN260@sqlite3Vdb@57:
; Line 36541
	mov	ecx, DWORD PTR _pCrsr$90978[esp+672]
	lea	edx, DWORD PTR _v$90986[esp+672]
	push	edx
	call	_sqlite3VdbeIdxRowid
	add	esp, 4
; Line 36542
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1360@sqlite3Vdb@57
; Line 36545
	mov	ecx, DWORD PTR _v$90986[esp+672]
	cmp	ecx, DWORD PTR _R$90979[esp+672]
	mov	edx, DWORD PTR _v$90986[esp+676]
	jne	SHORT $LN258@sqlite3Vdb@57
	cmp	edx, DWORD PTR _R$90979[esp+676]
	jne	SHORT $LN258@sqlite3Vdb@57
; Line 36546
	mov	ebx, DWORD PTR [ebx+8]
	sub	ebx, 1
	mov	DWORD PTR _pc$[esp+672], ebx
; Line 36547
	jmp	$LN1344@sqlite3Vdb@57
$LN258@sqlite3Vdb@57:
; Line 36554
	mov	eax, DWORD PTR _pTos$[esp+672]
	add	eax, 64					; 00000040H
; Line 36555
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR _pTos$[esp+672], eax
; Line 36556
	mov	WORD PTR [eax+24], 4
; Line 36558
	jmp	$LN1344@sqlite3Vdb@57
$LN257@sqlite3Vdb@57:
; Line 36582
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [esi+56]
	mov	esi, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	$LN278@sqlite3Vdb@57
; Line 36587
	mov	ecx, DWORD PTR [ebx]
; Line 36588
	lea	edx, DWORD PTR _res$91011[esp+672]
	push	edx
	mov	edx, DWORD PTR [ebx+4]
	push	0
	push	edx
	push	ecx
	push	0
	push	eax
	call	_sqlite3BtreeMoveto
	mov	DWORD PTR _rc$[esp+696], eax
; Line 36589
	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [esi+8], eax
; Line 36590
	mov	eax, DWORD PTR _res$91011[esp+696]
	mov	ecx, DWORD PTR [ebx+4]
	add	esp, 24					; 00000018H
	test	eax, eax
	sete	dl
; Line 36598
	test	eax, eax
	mov	DWORD PTR [esi+12], ecx
	mov	BYTE PTR [esi+25], dl
	mov	BYTE PTR [esi+28], 0
	mov	DWORD PTR [esi+104], 0
	je	$LN278@sqlite3Vdb@57
; Line 36599
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 36600
	mov	BYTE PTR [esi+25], 0
; Line 36605
	jmp	$LN278@sqlite3Vdb@57
$LN253@sqlite3Vdb@57:
; Line 36615
	mov	edi, DWORD PTR [edi+4]
; Line 36620
	mov	eax, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [eax+88]
	add	ebx, 64					; 00000040H
	mov	DWORD PTR [ebx], ecx
	mov	edx, DWORD PTR [eax+92]
	mov	DWORD PTR [ebx+4], edx
	mov	eax, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [eax+edi*4]
	add	DWORD PTR [eax+88], 1
	mov	DWORD PTR _pTos$[esp+672], ebx
	adc	DWORD PTR [eax+92], 0
; Line 36621
	mov	WORD PTR [ebx+24], 4
; Line 36622
	jmp	$LN647@sqlite3Vdb@57
$LN252@sqlite3Vdb@57:
; Line 36646
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [eax+edx*4]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], ecx
	mov	DWORD PTR _v$91024[esp+672], ecx
	mov	DWORD PTR _v$91024[esp+676], ecx
	mov	DWORD PTR _pC$91025[esp+672], eax
	je	$LN250@sqlite3Vdb@57
; Line 36684
	mov	edi, eax
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR _rx$91031[esp+672], ecx
	call	_sqlite3BtreeFlags
	and	al, 3
	cmp	al, 1
	jne	$LN1157@sqlite3Vdb@57
; Line 36701
	cmp	BYTE PTR [edi+27], 0
	jne	$LN1441@sqlite3Vdb@57
; Line 36702
	cmp	BYTE PTR [edi+29], 0
	je	SHORT $LN247@sqlite3Vdb@57
; Line 36703
	mov	edx, DWORD PTR [edi+20]
	mov	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR _v$91024[esp+672], ecx
	mov	DWORD PTR _v$91024[esp+676], edx
; Line 36704
	mov	esi, edx
	jmp	SHORT $LN241@sqlite3Vdb@57
$LN247@sqlite3Vdb@57:
; Line 36705
	mov	eax, DWORD PTR _pC$91025[esp+672]
	mov	eax, DWORD PTR [eax]
	lea	edi, DWORD PTR _res$91030[esp+672]
	call	_sqlite3BtreeLast
; Line 36706
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
; Line 36709
	cmp	DWORD PTR _res$91030[esp+672], eax
	je	SHORT $LN244@sqlite3Vdb@57
; Line 36710
	mov	DWORD PTR _v$91024[esp+672], 1
	xor	esi, esi
; Line 36711
	jmp	SHORT $LN1442@sqlite3Vdb@57
$LN244@sqlite3Vdb@57:
; Line 36712
	mov	edx, DWORD PTR _pC$91025[esp+672]
	mov	edi, DWORD PTR [edx]
	lea	ecx, DWORD PTR _v$91024[esp+672]
	push	ecx
	call	_sqlite3BtreeKeySize
; Line 36714
	mov	esi, DWORD PTR _v$91024[esp+680]
	add	esp, 4
	cmp	DWORD PTR _v$91024[esp+672], -1
	jne	SHORT $LN242@sqlite3Vdb@57
	cmp	esi, 2147483647				; 7fffffffH
	jne	SHORT $LN242@sqlite3Vdb@57
; Line 36715
	mov	eax, DWORD PTR _pC$91025[esp+672]
	mov	BYTE PTR [eax+27], 1
; Line 36716
	jmp	SHORT $LN241@sqlite3Vdb@57
$LN242@sqlite3Vdb@57:
; Line 36717
	add	DWORD PTR _v$91024[esp+672], 1
	adc	esi, 0
$LN1442@sqlite3Vdb@57:
	mov	DWORD PTR _v$91024[esp+676], esi
$LN241@sqlite3Vdb@57:
; Line 36723
	mov	ecx, DWORD PTR _pOp$[esp+672]
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	je	SHORT $LN240@sqlite3Vdb@57
; Line 36726
	mov	edx, DWORD PTR _p$GSCopy$[esp+672]
	shl	eax, 6
	add	eax, DWORD PTR [edx+84]
	mov	edi, eax
; Line 36727
	call	_sqlite3VdbeMemIntegerify
; Line 36729
	mov	eax, DWORD PTR [edi]
	cmp	eax, -1
	mov	ecx, DWORD PTR [edi+4]
	jne	SHORT $LN1286@sqlite3Vdb@57
	cmp	ecx, 2147483647				; 7fffffffH
	je	$LN1159@sqlite3Vdb@57
$LN1286@sqlite3Vdb@57:
	mov	edx, DWORD PTR _pC$91025[esp+672]
	cmp	BYTE PTR [edx+27], 0
	jne	$LN1159@sqlite3Vdb@57
; Line 36733
	add	eax, 1
	adc	ecx, 0
	cmp	esi, ecx
	jg	SHORT $LN237@sqlite3Vdb@57
	jl	SHORT $LN1287@sqlite3Vdb@57
	cmp	DWORD PTR _v$91024[esp+672], eax
	jae	SHORT $LN237@sqlite3Vdb@57
$LN1287@sqlite3Vdb@57:
; Line 36734
	mov	esi, ecx
	mov	DWORD PTR _v$91024[esp+672], eax
	mov	DWORD PTR _v$91024[esp+676], esi
$LN237@sqlite3Vdb@57:
; Line 36736
	mov	eax, DWORD PTR _v$91024[esp+672]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], esi
$LN240@sqlite3Vdb@57:
; Line 36740
	cmp	esi, 2147483647				; 7fffffffH
	ja	SHORT $LN236@sqlite3Vdb@57
	jb	SHORT $LN1288@sqlite3Vdb@57
	cmp	DWORD PTR _v$91024[esp+672], -1
	jae	SHORT $LN236@sqlite3Vdb@57
$LN1288@sqlite3Vdb@57:
; Line 36742
	mov	ecx, DWORD PTR _v$91024[esp+672]
	mov	eax, DWORD PTR _pC$91025[esp+672]
	mov	edx, DWORD PTR _v$91024[esp+676]
	add	ecx, 1
	adc	edx, 0
	mov	BYTE PTR [eax+29], 1
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 36743
	jmp	SHORT $LN1443@sqlite3Vdb@57
$LN236@sqlite3Vdb@57:
; Line 36744
	mov	eax, DWORD PTR _pC$91025[esp+672]
	mov	BYTE PTR [eax+29], 0
$LN1443@sqlite3Vdb@57:
	mov	edi, DWORD PTR _pC$91025[esp+672]
; Line 36747
	cmp	BYTE PTR [edi+27], 0
	mov	esi, DWORD PTR _p$GSCopy$[esp+672]
	je	$LN224@sqlite3Vdb@57
$LN1441@sqlite3Vdb@57:
; Line 36749
	mov	eax, DWORD PTR _db$[esp+672]
	mov	ecx, DWORD PTR [eax+40]
	mov	edi, DWORD PTR [eax+44]
	mov	DWORD PTR _v$91024[esp+672], ecx
	mov	DWORD PTR _v$91024[esp+676], edi
; Line 36750
	mov	DWORD PTR _cnt$91032[esp+672], 0
$LL233@sqlite3Vdb@57:
; Line 36752
	mov	edx, DWORD PTR _v$91024[esp+672]
	or	edx, edi
	je	SHORT $LN229@sqlite3Vdb@57
	cmp	DWORD PTR _cnt$91032[esp+672], 2
	jg	SHORT $LN229@sqlite3Vdb@57
; Line 36757
	add	DWORD PTR _inMutex, 1
	call	_randomByte
	sub	DWORD PTR _inMutex, 1
; Line 36758
	movzx	eax, al
	add	eax, 1
	cdq
	add	DWORD PTR _v$91024[esp+672], eax
	adc	edi, edx
	mov	DWORD PTR _v$91024[esp+676], edi
	jmp	SHORT $LN228@sqlite3Vdb@57
$LN229@sqlite3Vdb@57:
; Line 36753
	add	DWORD PTR _inMutex, 1
	lea	eax, DWORD PTR _v$91024[esp+672]
	mov	edi, 8
	mov	DWORD PTR _zBuf$148570[esp+672], eax
$LL925@sqlite3Vdb@57:
	sub	edi, 1
	call	_randomByte
	mov	ecx, DWORD PTR _zBuf$148570[esp+672]
	mov	BYTE PTR [ecx], al
	add	ecx, 1
	test	edi, edi
	mov	DWORD PTR _zBuf$148570[esp+672], ecx
	jne	SHORT $LL925@sqlite3Vdb@57
	sub	DWORD PTR _inMutex, 1
; Line 36754
	cmp	DWORD PTR _cnt$91032[esp+672], 5
	jge	SHORT $LN1299@sqlite3Vdb@57
	and	DWORD PTR _v$91024[esp+672], 16777215	; 00ffffffH
	mov	DWORD PTR _v$91024[esp+676], edi
	jmp	SHORT $LN228@sqlite3Vdb@57
$LN1299@sqlite3Vdb@57:
	mov	edi, DWORD PTR _v$91024[esp+676]
$LN228@sqlite3Vdb@57:
; Line 36760
	mov	ecx, DWORD PTR _v$91024[esp+672]
	or	ecx, edi
	je	SHORT $LN232@sqlite3Vdb@57
; Line 36762
	mov	eax, DWORD PTR _v$91024[esp+672]
	mov	ecx, DWORD PTR _pC$91025[esp+672]
	lea	edx, DWORD PTR _res$91030[esp+672]
	push	edx
	mov	edx, DWORD PTR [ecx]
	push	0
	push	edi
	push	eax
	push	0
	push	edx
	call	_sqlite3BtreeMoveto
	add	esp, 24					; 00000018H
; Line 36763
	add	DWORD PTR _cnt$91032[esp+672], 1
	mov	DWORD PTR _rx$91031[esp+672], eax
$LN232@sqlite3Vdb@57:
; Line 36764
	cmp	DWORD PTR _cnt$91032[esp+672], 1000	; 000003e8H
	jge	SHORT $LN225@sqlite3Vdb@57
	cmp	DWORD PTR _rx$91031[esp+672], 0
	jne	SHORT $LN225@sqlite3Vdb@57
	cmp	DWORD PTR _res$91030[esp+672], 0
	je	$LL233@sqlite3Vdb@57
$LN225@sqlite3Vdb@57:
; Line 36766
	cmp	DWORD PTR _rx$91031[esp+672], 0
	mov	eax, DWORD PTR _db$[esp+672]
	mov	ecx, DWORD PTR _v$91024[esp+672]
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], edi
	jne	SHORT $LN224@sqlite3Vdb@57
	cmp	DWORD PTR _res$91030[esp+672], 0
	je	$LN1160@sqlite3Vdb@57
$LN224@sqlite3Vdb@57:
; Line 36771
	mov	eax, DWORD PTR _pC$91025[esp+672]
	mov	BYTE PTR [eax+25], 0
; Line 36772
	mov	BYTE PTR [eax+31], 0
; Line 36773
	mov	DWORD PTR [eax+104], 0
$LN250@sqlite3Vdb@57:
; Line 36776
	mov	edx, DWORD PTR _v$91024[esp+672]
	mov	eax, DWORD PTR _v$91024[esp+676]
	add	ebx, 64					; 00000040H
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 36777
	mov	WORD PTR [ebx+24], 4
; Line 36778
	jmp	$LN647@sqlite3Vdb@57
$LN223@sqlite3Vdb@57:
; Line 36808
	mov	edx, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [edx+ecx*4]
	xor	edx, edx
	cmp	DWORD PTR [eax], edx
	mov	DWORD PTR _pC$91077[esp+672], eax
	jne	SHORT $LN221@sqlite3Vdb@57
	cmp	BYTE PTR [eax+30], dl
	je	$LN208@sqlite3Vdb@57
$LN221@sqlite3Vdb@57:
; Line 36815
	test	BYTE PTR [edi+8], 1
	mov	ecx, DWORD PTR [ebx-64]
	mov	DWORD PTR _iKey$91083[esp+672], ecx
	mov	ecx, DWORD PTR [ebx-60]
	mov	DWORD PTR _iKey$91083[esp+676], ecx
	je	SHORT $LN220@sqlite3Vdb@57
	add	DWORD PTR [esi+568], 1
$LN220@sqlite3Vdb@57:
; Line 36816
	test	BYTE PTR [edi+8], 2
	je	SHORT $LN219@sqlite3Vdb@57
	mov	esi, DWORD PTR [ebx-64]
	mov	ecx, DWORD PTR _db$[esp+672]
	mov	DWORD PTR [ecx+32], esi
	mov	esi, DWORD PTR [ebx-60]
	mov	DWORD PTR [ecx+36], esi
$LN219@sqlite3Vdb@57:
; Line 36817
	cmp	BYTE PTR [eax+29], 0
	je	SHORT $LN218@sqlite3Vdb@57
	mov	ecx, DWORD PTR [ebx-60]
	cmp	ecx, DWORD PTR [eax+20]
	jl	SHORT $LN218@sqlite3Vdb@57
	jg	SHORT $LN1289@sqlite3Vdb@57
	mov	ecx, DWORD PTR [ebx-64]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN218@sqlite3Vdb@57
$LN1289@sqlite3Vdb@57:
; Line 36818
	mov	BYTE PTR [eax+29], 0
$LN218@sqlite3Vdb@57:
; Line 36820
	test	BYTE PTR [ebx+24], 1
	je	SHORT $LN217@sqlite3Vdb@57
; Line 36821
	mov	DWORD PTR [ebx+16], edx
; Line 36822
	mov	DWORD PTR [ebx+20], edx
$LN217@sqlite3Vdb@57:
; Line 36826
	cmp	BYTE PTR [eax+30], 0
	je	$LN215@sqlite3Vdb@57
; Line 36827
	mov	esi, DWORD PTR _pC$91077[esp+672]
	mov	edx, DWORD PTR [esi+56]
	push	edx
	call	_sqlite3FreeX
; Line 36828
	mov	eax, DWORD PTR _iKey$91083[esp+676]
	mov	ecx, DWORD PTR _iKey$91083[esp+680]
	mov	DWORD PTR [esi+64], eax
	mov	DWORD PTR [esi+68], ecx
; Line 36829
	mov	eax, DWORD PTR [ebx+20]
	add	esp, 4
	mov	DWORD PTR [esi+52], eax
; Line 36830
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN214@sqlite3Vdb@57
; Line 36831
	mov	edx, DWORD PTR [ebx+16]
	mov	DWORD PTR [esi+56], edx
; Line 36832
	mov	WORD PTR [ebx+24], 1
; Line 36840
	mov	BYTE PTR [esi+28], 0
; Line 36841
	jmp	$LN211@sqlite3Vdb@57
$LN214@sqlite3Vdb@57:
; Line 36834
	lea	ecx, DWORD PTR [eax+2]
	call	_sqlite3MallocRaw
; Line 36835
	test	eax, eax
	mov	DWORD PTR [esi+56], eax
	je	$no_mem$90290
; Line 36836
	mov	esi, DWORD PTR _pC$91077[esp+672]
	mov	ecx, DWORD PTR [esi+52]
	mov	edx, DWORD PTR [ebx+16]
	push	ecx
	push	edx
	push	eax
	call	_memcpy
; Line 36837
	mov	eax, DWORD PTR [esi+52]
	mov	ecx, DWORD PTR [esi+56]
	mov	BYTE PTR [eax+ecx], 0
; Line 36838
	mov	edx, DWORD PTR [esi+52]
	mov	eax, DWORD PTR [esi+56]
	mov	BYTE PTR [edx+eax+1], 0
	add	esp, 12					; 0000000cH
; Line 36840
	mov	BYTE PTR [esi+28], 0
; Line 36841
	jmp	SHORT $LN211@sqlite3Vdb@57
$LN215@sqlite3Vdb@57:
; Line 36843
	test	WORD PTR [ebx+24], 2048			; 00000800H
	je	SHORT $LN210@sqlite3Vdb@57
; Line 36844
	mov	eax, DWORD PTR [ebx]
; Line 36845
	jmp	SHORT $LN209@sqlite3Vdb@57
$LN210@sqlite3Vdb@57:
; Line 36846
	xor	eax, eax
$LN209@sqlite3Vdb@57:
; Line 36850
	mov	ecx, DWORD PTR [edi+8]
	mov	edx, DWORD PTR [ebx+20]
	and	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _iKey$91083[esp+680]
	push	eax
	mov	eax, DWORD PTR [ebx+16]
	push	edx
	mov	edx, DWORD PTR _iKey$91083[esp+684]
	push	eax
	mov	eax, DWORD PTR _pC$91077[esp+688]
	push	ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	0
	push	ecx
	call	_sqlite3BtreeInsert
	mov	esi, DWORD PTR _pC$91077[esp+704]
	add	esp, 32					; 00000020H
	mov	DWORD PTR _rc$[esp+672], eax
$LN211@sqlite3Vdb@57:
; Line 36858
	cmp	DWORD PTR _rc$[esp+672], 0
	mov	BYTE PTR [esi+25], 0
	mov	BYTE PTR [esi+31], 0
	mov	DWORD PTR [esi+104], 0
	jne	SHORT $LN208@sqlite3Vdb@57
	mov	eax, DWORD PTR _db$[esp+672]
	mov	edx, DWORD PTR [eax+124]
	test	edx, edx
	je	SHORT $LN208@sqlite3Vdb@57
	mov	ecx, DWORD PTR [edi+12]
	test	ecx, ecx
	je	SHORT $LN208@sqlite3Vdb@57
; Line 36863
	push	DWORD PTR _iKey$91083[esp+676]
	mov	esi, DWORD PTR [esi+4]
	push	DWORD PTR _iKey$91083[esp+676]
	push	ecx
	lea	ecx, DWORD PTR [esi+esi*2]
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [esi+ecx*8]
	mov	eax, DWORD PTR [eax+120]
	push	ecx
	mov	ecx, DWORD PTR [edi+8]
	and	cl, 4
	neg	cl
	sbb	ecx, ecx
	and	ecx, 5
	add	ecx, 18					; 00000012H
	push	ecx
	push	eax
	call	edx
	add	esp, 24					; 00000018H
$LN208@sqlite3Vdb@57:
; Line 36867
	mov	esi, 2
$LL942@sqlite3Vdb@57:
	sub	esi, 1
	test	BYTE PTR [ebx+24], 64			; 00000040H
	je	SHORT $LN940@sqlite3Vdb@57
	push	ebx
	call	_sqlite3VdbeMemRelease
	add	esp, 4
$LN940@sqlite3Vdb@57:
	sub	ebx, 64					; 00000040H
	test	esi, esi
	jg	SHORT $LL942@sqlite3Vdb@57
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 36869
	jmp	$LN1344@sqlite3Vdb@57
$LN207@sqlite3Vdb@57:
; Line 36890
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [esi+56]
	mov	esi, DWORD PTR [edx+ecx*4]
; Line 36892
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	$LN200@sqlite3Vdb@57
; Line 36898
	mov	ecx, DWORD PTR _db$[esp+672]
	cmp	DWORD PTR [ecx+124], 0
	je	SHORT $LN203@sqlite3Vdb@57
	cmp	DWORD PTR [edi+12], 0
	je	SHORT $LN203@sqlite3Vdb@57
; Line 36900
	cmp	BYTE PTR [esi+25], 0
	je	SHORT $LN204@sqlite3Vdb@57
; Line 36901
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR _iKey$91112[esp+672], edx
	mov	DWORD PTR _iKey$91112[esp+676], eax
; Line 36902
	jmp	SHORT $LN203@sqlite3Vdb@57
$LN204@sqlite3Vdb@57:
; Line 36903
	lea	ecx, DWORD PTR _iKey$91112[esp+672]
	push	ecx
	mov	edi, eax
	call	_sqlite3BtreeKeySize
	add	esp, 4
; Line 36904
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
$LN203@sqlite3Vdb@57:
; Line 36911
	call	_sqlite3VdbeCursorMoveto
; Line 36912
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
; Line 36913
	mov	eax, DWORD PTR [esi]
	call	_sqlite3BtreeDelete
; Line 36918
	test	eax, eax
	mov	edi, DWORD PTR _pOp$[esp+672]
	mov	DWORD PTR _rc$[esp+672], eax
	mov	BYTE PTR [esi+29], 0
	mov	DWORD PTR [esi+104], 0
	jne	SHORT $LN200@sqlite3Vdb@57
	mov	edx, DWORD PTR _db$[esp+672]
	mov	ecx, DWORD PTR [edx+124]
	test	ecx, ecx
	je	SHORT $LN200@sqlite3Vdb@57
	mov	eax, DWORD PTR [edi+12]
	test	eax, eax
	je	SHORT $LN200@sqlite3Vdb@57
; Line 36921
	mov	edx, DWORD PTR _iKey$91112[esp+676]
	mov	esi, DWORD PTR [esi+4]
	push	edx
	mov	edx, DWORD PTR _iKey$91112[esp+676]
	push	edx
	push	eax
	mov	eax, DWORD PTR _db$[esp+684]
	lea	edx, DWORD PTR [esi+esi*2]
	mov	esi, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [esi+edx*8]
	mov	eax, DWORD PTR [eax+120]
	push	edx
	push	9
	push	eax
	call	ecx
	add	esp, 24					; 00000018H
$LN200@sqlite3Vdb@57:
; Line 36925
	test	BYTE PTR [edi+8], 1
	je	$LN647@sqlite3Vdb@57
	mov	eax, DWORD PTR _p$GSCopy$[esp+672]
	add	DWORD PTR [eax+568], 1
; Line 36926
	jmp	$LN647@sqlite3Vdb@57
$LN198@sqlite3Vdb@57:
; Line 36937
	cmp	DWORD PTR [edi+4], 0
	je	SHORT $LN945@sqlite3Vdb@57
; Line 36938
	mov	eax, DWORD PTR [esi+568]
	mov	ecx, DWORD PTR _db$[esp+672]
	add	DWORD PTR [ecx+56], eax
	mov	DWORD PTR [ecx+52], eax
$LN945@sqlite3Vdb@57:
; Line 36940
	mov	DWORD PTR [esi+568], 0
; Line 36941
	jmp	$LN647@sqlite3Vdb@57
$LN196@sqlite3Vdb@57:
; Line 36971
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [esi+56]
	mov	esi, DWORD PTR [edx+ecx*4]
	add	ebx, 64					; 00000040H
; Line 36975
	cmp	BYTE PTR [esi+28], 0
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 36976
	jne	$LN179@sqlite3Vdb@57
; Line 36977
	mov	edi, DWORD PTR [esi]
	test	edi, edi
	mov	DWORD PTR tv6190[esp+672], edi
	je	$LN193@sqlite3Vdb@57
; Line 36979
	call	_sqlite3VdbeCursorMoveto
; Line 36980
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
; Line 36981
	cmp	BYTE PTR [esi+28], al
	je	SHORT $LN191@sqlite3Vdb@57
$LN170@sqlite3Vdb@57:
; Line 36982
	mov	WORD PTR [ebx+24], 1
	jmp	$LN647@sqlite3Vdb@57
$LN191@sqlite3Vdb@57:
; Line 36984
	cmp	BYTE PTR [esi+33], 0
	je	SHORT $LN189@sqlite3Vdb@57
; Line 36987
	lea	eax, DWORD PTR _n64$91142[esp+672]
	push	eax
	call	_sqlite3BtreeKeySize
	add	esp, 4
; Line 36988
	cmp	DWORD PTR _n64$91142[esp+676], 0
	jg	$too_big$90359
	mov	edi, DWORD PTR _n64$91142[esp+672]
	jl	SHORT $LN1290@sqlite3Vdb@57
	cmp	edi, 1000000000				; 3b9aca00H
	ja	$too_big$90359
$LN1290@sqlite3Vdb@57:
; Line 36991
	mov	DWORD PTR _n$91129[esp+672], edi
; Line 36992
	jmp	SHORT $LN187@sqlite3Vdb@57
$LN189@sqlite3Vdb@57:
; Line 36993
	lea	ecx, DWORD PTR _n$91129[esp+672]
	push	ecx
	call	_sqlite3BtreeDataSize
	mov	edi, DWORD PTR _n$91129[esp+676]
	add	esp, 4
$LN187@sqlite3Vdb@57:
; Line 36995
	cmp	edi, 1000000000				; 3b9aca00H
	ja	$too_big$90359
; Line 36999
	cmp	edi, 32					; 00000020H
	mov	DWORD PTR [ebx+20], edi
	ja	SHORT $LN185@sqlite3Vdb@57
; Line 37001
	lea	edx, DWORD PTR [ebx+32]
	mov	WORD PTR [ebx+24], 528			; 00000210H
	mov	DWORD PTR [ebx+16], edx
; Line 37002
	jmp	SHORT $LN184@sqlite3Vdb@57
$LN185@sqlite3Vdb@57:
; Line 37003
	mov	ecx, edi
	call	_sqlite3MallocRaw
; Line 37004
	test	eax, eax
	je	$no_mem$90290
; Line 37005
	mov	WORD PTR [ebx+24], 80			; 00000050H
; Line 37006
	mov	DWORD PTR [ebx+28], 0
; Line 37007
	mov	DWORD PTR [ebx+16], eax
$LN184@sqlite3Vdb@57:
; Line 37009
	cmp	BYTE PTR [esi+33], 0
	je	SHORT $LN182@sqlite3Vdb@57
; Line 37010
	mov	eax, DWORD PTR [ebx+16]
	mov	esi, DWORD PTR tv6190[esp+672]
	push	eax
	push	edi
	push	0
	call	_sqlite3BtreeKey
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rc$[esp+672], eax
; Line 37022
	mov	BYTE PTR [ebx+27], 1
; Line 37023
	jmp	$LN647@sqlite3Vdb@57
$LN182@sqlite3Vdb@57:
; Line 37012
	mov	ecx, DWORD PTR [ebx+16]
	mov	edx, DWORD PTR tv6190[esp+672]
	push	ecx
	push	edi
	push	0
	push	edx
	call	_sqlite3BtreeData
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[esp+672], eax
; Line 37022
	mov	BYTE PTR [ebx+27], 1
; Line 37023
	jmp	$LN647@sqlite3Vdb@57
$LN193@sqlite3Vdb@57:
; Line 37014
	cmp	BYTE PTR [esi+30], 0
	je	SHORT $LN179@sqlite3Vdb@57
; Line 37015
	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [ebx+20], eax
; Line 37017
	mov	ecx, DWORD PTR [esi+56]
	mov	DWORD PTR [ebx+16], ecx
; Line 37018
	mov	WORD PTR [ebx+24], 272			; 00000110H
; Line 37022
	mov	BYTE PTR [ebx+27], 1
; Line 37023
	jmp	$LN647@sqlite3Vdb@57
$LN179@sqlite3Vdb@57:
; Line 37020
	mov	WORD PTR [ebx+24], 1
; Line 37022
	mov	BYTE PTR [ebx+27], 1
; Line 37023
	jmp	$LN647@sqlite3Vdb@57
$LN177@sqlite3Vdb@57:
; Line 37037
	mov	eax, DWORD PTR _p$GSCopy$[esp+672]
	mov	edx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax+56]
	mov	esi, DWORD PTR [ecx+edx*4]
; Line 37039
	call	_sqlite3VdbeCursorMoveto
; Line 37040
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
; Line 37041
	add	ebx, 64					; 00000040H
; Line 37042
	cmp	BYTE PTR [esi+25], al
	mov	DWORD PTR _pTos$[esp+672], ebx
	je	SHORT $LN175@sqlite3Vdb@57
; Line 37043
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR _v$91160[esp+672], edx
	mov	DWORD PTR _v$91160[esp+676], eax
	jmp	SHORT $LN169@sqlite3Vdb@57
$LN175@sqlite3Vdb@57:
; Line 37044
	cmp	BYTE PTR [esi+30], 0
	je	SHORT $LN173@sqlite3Vdb@57
; Line 37045
	mov	ecx, DWORD PTR [esi+64]
	mov	edx, DWORD PTR [esi+68]
	mov	DWORD PTR _v$91160[esp+672], ecx
	mov	DWORD PTR _v$91160[esp+676], edx
	jmp	SHORT $LN169@sqlite3Vdb@57
$LN173@sqlite3Vdb@57:
; Line 37046
	cmp	BYTE PTR [esi+28], 0
	jne	$LN170@sqlite3Vdb@57
	mov	esi, DWORD PTR [esi]
	test	esi, esi
	je	$LN170@sqlite3Vdb@57
; Line 37051
	lea	eax, DWORD PTR _v$91160[esp+672]
	push	eax
	mov	edi, esi
	call	_sqlite3BtreeKeySize
	add	esp, 4
$LN169@sqlite3Vdb@57:
; Line 37054
	mov	ecx, DWORD PTR _v$91160[esp+672]
	mov	edx, DWORD PTR _v$91160[esp+676]
	mov	DWORD PTR [ebx], ecx
	mov	DWORD PTR [ebx+4], edx
; Line 37055
	mov	WORD PTR [ebx+24], 4
; Line 37056
	jmp	$LN647@sqlite3Vdb@57
$LN168@sqlite3Vdb@57:
; Line 37070
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [ecx+eax*4]
; Line 37072
	mov	BYTE PTR [eax+28], 1
; Line 37073
	mov	BYTE PTR [eax+25], 0
; Line 37074
	jmp	$LN647@sqlite3Vdb@57
$LN167@sqlite3Vdb@57:
; Line 37091
	mov	eax, DWORD PTR [esi+56]
	mov	edx, DWORD PTR [edi+4]
	mov	esi, DWORD PTR [eax+edx*4]
; Line 37093
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN166@sqlite3Vdb@57
; Line 37095
	lea	edi, DWORD PTR _res$91184[esp+672]
	call	_sqlite3BtreeLast
	mov	DWORD PTR _rc$[esp+672], eax
; Line 37096
	mov	eax, DWORD PTR _res$91184[esp+672]
; Line 37099
	test	eax, eax
	mov	BYTE PTR [esi+28], al
	mov	BYTE PTR [esi+31], 0
	mov	DWORD PTR [esi+104], 0
	je	$LN647@sqlite3Vdb@57
	mov	ecx, DWORD PTR _pOp$[esp+672]
	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	jle	$LN647@sqlite3Vdb@57
; Line 37100
	add	eax, -1
	mov	DWORD PTR _pc$[esp+672], eax
; Line 37102
	jmp	$LN647@sqlite3Vdb@57
$LN166@sqlite3Vdb@57:
; Line 37103
	mov	BYTE PTR [esi+28], 0
; Line 37105
	jmp	$LN647@sqlite3Vdb@57
$LN163@sqlite3Vdb@57:
; Line 37143
	mov	eax, DWORD PTR [esi+56]
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [eax+edx*4]
; Line 37145
	mov	esi, DWORD PTR [eax]
	test	esi, esi
	mov	DWORD PTR _pC$91190[esp+672], eax
	je	SHORT $LN161@sqlite3Vdb@57
; Line 37146
	push	esi
	call	_moveToRoot
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN1444@sqlite3Vdb@57
	cmp	BYTE PTR [esi+65], al
	jne	SHORT $LN947@sqlite3Vdb@57
	mov	DWORD PTR _res$91192[esp+672], 1
	mov	DWORD PTR _rc$[esp+672], eax
	jmp	SHORT $LN949@sqlite3Vdb@57
$LN947@sqlite3Vdb@57:
	mov	DWORD PTR _res$91192[esp+672], 0
	call	_moveToLeftmost
$LN1444@sqlite3Vdb@57:
	mov	DWORD PTR _rc$[esp+672], eax
$LN949@sqlite3Vdb@57:
; Line 37147
	cmp	DWORD PTR _res$91192[esp+672], 0
	mov	eax, DWORD PTR _pC$91190[esp+672]
	sete	cl
	mov	BYTE PTR [eax+26], cl
; Line 37148
	mov	BYTE PTR [eax+31], 0
; Line 37149
	mov	DWORD PTR [eax+104], 0
; Line 37150
	jmp	SHORT $LN160@sqlite3Vdb@57
$LN161@sqlite3Vdb@57:
; Line 37151
	mov	DWORD PTR _res$91192[esp+672], 1
$LN160@sqlite3Vdb@57:
; Line 37153
	mov	ecx, DWORD PTR _res$91192[esp+672]
; Line 37154
	test	ecx, ecx
	mov	BYTE PTR [eax+28], cl
	je	$LN647@sqlite3Vdb@57
	mov	edi, DWORD PTR [edi+8]
	test	edi, edi
	jle	$LN647@sqlite3Vdb@57
; Line 37155
	add	edi, -1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 37157
	jmp	$LN647@sqlite3Vdb@57
$LN158@sqlite3Vdb@57:
; Line 37181
	mov	edx, DWORD PTR _db$[esp+672]
	cmp	DWORD PTR [edx+152], 0
	jne	$abort_due_to_interrupt$90295
; Line 37183
	mov	ecx, DWORD PTR [edi+4]
	mov	edx, DWORD PTR [esi+56]
	mov	esi, DWORD PTR [edx+ecx*4]
; Line 37184
	test	esi, esi
	je	$LN647@sqlite3Vdb@57
; Line 37187
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	$LN155@sqlite3Vdb@57
; Line 37189
	cmp	BYTE PTR [esi+28], 0
	je	SHORT $LN154@sqlite3Vdb@57
; Line 37190
	mov	DWORD PTR _res$91205[esp+672], 1
; Line 37207
	mov	BYTE PTR [esi+25], 0
; Line 37208
	jmp	$LN647@sqlite3Vdb@57
$LN154@sqlite3Vdb@57:
; Line 37194
	cmp	al, 110					; 0000006eH
	jne	SHORT $LN691@sqlite3Vdb@57
	lea	eax, DWORD PTR _res$91205[esp+672]
	push	eax
	push	ecx
	call	_sqlite3BtreeNext
	jmp	SHORT $LN1445@sqlite3Vdb@57
$LN691@sqlite3Vdb@57:
	lea	edx, DWORD PTR _res$91205[esp+672]
	push	edx
	push	ecx
	call	_sqlite3BtreePrevious
$LN1445@sqlite3Vdb@57:
	mov	DWORD PTR _rc$[esp+680], eax
; Line 37195
	mov	eax, DWORD PTR _res$91205[esp+680]
	add	esp, 8
; Line 37198
	test	eax, eax
	mov	BYTE PTR [esi+28], al
	mov	DWORD PTR [esi+104], 0
	jne	SHORT $LN151@sqlite3Vdb@57
; Line 37199
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 37207
	mov	BYTE PTR [esi+25], al
; Line 37208
	jmp	$LN647@sqlite3Vdb@57
$LN155@sqlite3Vdb@57:
; Line 37205
	mov	BYTE PTR [esi+28], 1
$LN151@sqlite3Vdb@57:
; Line 37207
	mov	BYTE PTR [esi+25], 0
; Line 37208
	jmp	$LN647@sqlite3Vdb@57
$LN150@sqlite3Vdb@57:
; Line 37231
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pC$91213[esp+672], eax
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	mov	DWORD PTR _pCrsr$91214[esp+672], eax
	je	$LN278@sqlite3Vdb@57
; Line 37233
	test	WORD PTR [ebx+24], 2048			; 00000800H
	je	SHORT $LN1255@sqlite3Vdb@57
	mov	esi, ebx
	call	_sqlite3VdbeMemExpandBlob
; Line 37234
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN278@sqlite3Vdb@57
$LN1255@sqlite3Vdb@57:
; Line 37237
	mov	edx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR [ebx+20]
	mov	ecx, DWORD PTR [ebx+16]
	push	edx
	push	0
	push	0
	cdq
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	push	edx
	push	eax
	mov	eax, DWORD PTR _pCrsr$91214[esp+696]
	push	ecx
	push	eax
	call	_sqlite3BtreeInsert
; Line 37239
	mov	ecx, DWORD PTR _pC$91213[esp+704]
	add	esp, 32					; 00000020H
	mov	DWORD PTR _rc$[esp+672], eax
	mov	DWORD PTR [ecx+104], 0
; Line 37244
	jmp	$LN278@sqlite3Vdb@57
$LN146@sqlite3Vdb@57:
; Line 37261
	mov	eax, DWORD PTR [esi+56]
	mov	edx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [eax+edx*4]
	mov	esi, DWORD PTR [edi]
	test	esi, esi
	je	$LN278@sqlite3Vdb@57
; Line 37263
	mov	eax, DWORD PTR [ebx+20]
	lea	ecx, DWORD PTR _res$91235[esp+672]
	push	ecx
	cdq
	push	0
	push	edx
	mov	edx, DWORD PTR [ebx+16]
	push	eax
	push	edx
	push	esi
	call	_sqlite3BtreeMoveto
	add	esp, 24					; 00000018H
; Line 37264
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	SHORT $LN144@sqlite3Vdb@57
	cmp	DWORD PTR _res$91235[esp+672], eax
	jne	SHORT $LN144@sqlite3Vdb@57
; Line 37265
	mov	eax, esi
	call	_sqlite3BtreeDelete
	mov	DWORD PTR _rc$[esp+672], eax
$LN144@sqlite3Vdb@57:
; Line 37268
	mov	DWORD PTR [edi+104], 0
; Line 37272
	jmp	$LN278@sqlite3Vdb@57
$LN142@sqlite3Vdb@57:
; Line 37284
	mov	edi, DWORD PTR [edi+4]
; Line 37290
	add	ebx, 64					; 00000040H
; Line 37291
	mov	edx, 1
	mov	WORD PTR [ebx+24], dx
; Line 37292
	mov	eax, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [eax+edi*4]
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	mov	DWORD PTR _pTos$[esp+672], ebx
	je	$LN647@sqlite3Vdb@57
; Line 37297
	cmp	BYTE PTR [eax+28], 0
	je	SHORT $LN140@sqlite3Vdb@57
; Line 37298
	mov	WORD PTR [ebx+24], dx
; Line 37299
	jmp	$LN647@sqlite3Vdb@57
$LN140@sqlite3Vdb@57:
; Line 37300
	lea	edx, DWORD PTR _rowid$91246[esp+672]
	push	edx
	call	_sqlite3VdbeIdxRowid
	add	esp, 4
; Line 37301
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN1313@sqlite3Vdb@57
; Line 37305
	mov	eax, DWORD PTR _rowid$91246[esp+672]
	mov	ecx, DWORD PTR _rowid$91246[esp+676]
	mov	WORD PTR [ebx+24], 4
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
; Line 37308
	jmp	$LN647@sqlite3Vdb@57
$LN137@sqlite3Vdb@57:
; Line 37364
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [eax+edx*4]
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _pC$91254[esp+672], eax
	je	$LN278@sqlite3Vdb@57
; Line 37369
	test	WORD PTR [ebx+24], 2048			; 00000800H
	je	SHORT $LN695@sqlite3Vdb@57
	mov	esi, ebx
	call	_sqlite3VdbeMemExpandBlob
$LN695@sqlite3Vdb@57:
; Line 37370
	cmp	DWORD PTR [edi+12], 0
	mov	esi, DWORD PTR _pC$91254[esp+672]
	mov	edx, DWORD PTR [esi+72]
	setne	cl
	mov	BYTE PTR [edx], cl
; Line 37372
	mov	ecx, DWORD PTR [ebx+16]
	mov	edx, DWORD PTR [ebx+20]
	lea	eax, DWORD PTR _res$91259[esp+672]
	push	eax
	push	ecx
	push	edx
	call	_sqlite3VdbeIdxKeyCompare
; Line 37373
	mov	ecx, esi
	mov	edx, DWORD PTR [ecx+72]
	add	esp, 12					; 0000000cH
; Line 37374
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	mov	BYTE PTR [edx], 0
	jne	$LN647@sqlite3Vdb@57
; Line 37377
	mov	al, BYTE PTR [edi]
	cmp	al, 38					; 00000026H
	jne	SHORT $LN134@sqlite3Vdb@57
; Line 37378
	mov	eax, DWORD PTR _res$91259[esp+672]
	neg	eax
	jmp	SHORT $LN1452@sqlite3Vdb@57
$LN134@sqlite3Vdb@57:
; Line 37379
	cmp	al, 64					; 00000040H
; Line 37380
	mov	eax, DWORD PTR _res$91259[esp+672]
	jne	SHORT $LN132@sqlite3Vdb@57
	add	eax, 1
$LN1452@sqlite3Vdb@57:
	mov	DWORD PTR _res$91259[esp+672], eax
$LN132@sqlite3Vdb@57:
; Line 37382
	test	eax, eax
	jle	$LN278@sqlite3Vdb@57
; Line 37383
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 37388
	jmp	$LN278@sqlite3Vdb@57
$LN129@sqlite3Vdb@57:
; Line 37417
	mov	eax, DWORD PTR _db$[esp+672]
	mov	eax, DWORD PTR [eax+80]
	xor	ecx, ecx
	test	eax, eax
	je	SHORT $LN124@sqlite3Vdb@57
	mov	edx, -1108210269			; bdf20da3H
$LL128@sqlite3Vdb@57:
; Line 37418
	cmp	DWORD PTR [eax+76], edx
	jne	SHORT $LN127@sqlite3Vdb@57
	cmp	BYTE PTR [eax+566], 2
	jae	SHORT $LN127@sqlite3Vdb@57
	cmp	DWORD PTR [eax+120], 0
	jl	SHORT $LN127@sqlite3Vdb@57
; Line 37419
	add	ecx, 1
$LN127@sqlite3Vdb@57:
; Line 37417
	mov	eax, DWORD PTR [eax+8]
	test	eax, eax
	jne	SHORT $LL128@sqlite3Vdb@57
; Line 37425
	cmp	ecx, 1
	jle	SHORT $LN124@sqlite3Vdb@57
; Line 37426
	mov	DWORD PTR _rc$[esp+672], 6
; Line 37427
	jmp	$LN647@sqlite3Vdb@57
$LN124@sqlite3Vdb@57:
; Line 37429
	mov	eax, DWORD PTR [edi+8]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _db$[esp+672]
	lea	ecx, DWORD PTR _iMoved$91271[esp+672]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+edx*8+4]
	mov	eax, DWORD PTR [edi+4]
	push	edx
	call	_sqlite3BtreeDropTable
; Line 37432
	mov	ecx, DWORD PTR _iMoved$91271[esp+680]
	mov	esi, eax
	add	ebx, 64					; 00000040H
	mov	eax, ecx
	cdq
	mov	WORD PTR [ebx+24], 4
	add	esp, 8
; Line 37434
	test	esi, esi
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR _rc$[esp+672], esi
	mov	DWORD PTR _pTos$[esp+672], ebx
	mov	DWORD PTR [ebx+4], edx
	jne	$LN647@sqlite3Vdb@57
	test	ecx, ecx
	je	$LN647@sqlite3Vdb@57
; Line 37435
	mov	eax, DWORD PTR _pOp$[esp+672]
	mov	edx, DWORD PTR [eax+8]
	mov	esi, DWORD PTR _db$[esp+672]
	mov	esi, DWORD PTR [esi+4]
	mov	edi, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [edx+edx*2]
	lea	esi, DWORD PTR [esi+edx*8]
	mov	edx, ecx
	call	_sqlite3RootPageMoved
; Line 37439
	jmp	$LN647@sqlite3Vdb@57
$LN121@sqlite3Vdb@57:
; Line 37490
	mov	eax, DWORD PTR [edi+8]
	mov	ecx, DWORD PTR _db$[esp+672]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edi+4]
	lea	eax, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edx+eax*8+4]
	call	_sqlite3BtreeClearTable
	mov	DWORD PTR _rc$[esp+672], eax
; Line 37491
	jmp	$LN647@sqlite3Vdb@57
$LN120@sqlite3Vdb@57:
; Line 37520
	mov	edi, DWORD PTR [edi+4]
	mov	edx, DWORD PTR _db$[esp+672]
	mov	edx, DWORD PTR [edx+4]
; Line 37522
	sub	al, 51					; 00000033H
	neg	al
	lea	ecx, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [edx+ecx*8]
; Line 37528
	mov	ecx, DWORD PTR [ecx+4]
	sbb	eax, eax
	and	eax, -3					; fffffffdH
	add	eax, 5
	push	eax
	lea	eax, DWORD PTR _pgno$91284[esp+676]
	push	eax
	push	ecx
	call	_sqlite3BtreeCreateTable
; Line 37529
	add	ebx, 64					; 00000040H
	add	esp, 12					; 0000000cH
; Line 37530
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	mov	DWORD PTR _pTos$[esp+672], ebx
	jne	$LN170@sqlite3Vdb@57
; Line 37531
	mov	eax, DWORD PTR _pgno$91284[esp+672]
	cdq
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], edx
; Line 37532
	mov	WORD PTR [ebx+24], 4
; Line 37533
	jmp	$LN647@sqlite3Vdb@57
$LN115@sqlite3Vdb@57:
; Line 37558
	cmp	DWORD PTR [edi+8], 0
	mov	eax, DWORD PTR [edi+4]
	jne	SHORT $LN114@sqlite3Vdb@57
	mov	ecx, DWORD PTR _db$[esp+672]
	mov	ecx, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [eax+eax*2]
	mov	edx, DWORD PTR [ecx+edx*8+20]
	test	BYTE PTR [edx+122], 1
	je	$LN647@sqlite3Vdb@57
$LN114@sqlite3Vdb@57:
; Line 37561
	cmp	eax, 1
	mov	ecx, OFFSET ??_C@_0BD@OLGFAFA@sqlite_temp_master?$AA@
	je	SHORT $LN698@sqlite3Vdb@57
	mov	ecx, OFFSET ??_C@_0O@JMEKHCEB@sqlite_master?$AA@
$LN698@sqlite3Vdb@57:
; Line 37562
	mov	edx, DWORD PTR _db$[esp+672]
; Line 37564
	add	esi, 556				; 0000022cH
	mov	DWORD PTR _initData$91297[esp+680], esi
; Line 37567
	mov	esi, DWORD PTR [edi+12]
	push	esi
	push	ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _initData$91297[esp+684], eax
	lea	eax, DWORD PTR [eax+eax*2]
	mov	DWORD PTR _initData$91297[esp+680], edx
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edx
	push	OFFSET ??_C@_0DB@OFNJNGCG@SELECT?5name?0?5rootpage?0?5sql?5FROM?5@
	call	_sqlite3MPrintf
	mov	esi, eax
	add	esp, 16					; 00000010H
; Line 37568
	test	esi, esi
	je	$no_mem$90290
; Line 37569
	mov	ecx, DWORD PTR _db$[esp+672]
	mov	eax, ecx
	call	_sqlite3SafetyOff
; Line 37573
	push	0
	lea	eax, DWORD PTR _initData$91297[esp+676]
	push	eax
	push	OFFSET _sqlite3InitCallback
	push	esi
	push	ecx
	mov	BYTE PTR [ecx+68], 1
	call	_sqlite3_exec
	mov	edi, eax
	add	esp, 20					; 00000014H
; Line 37574
	cmp	edi, 4
	mov	DWORD PTR _rc$[esp+672], edi
	jne	SHORT $LN112@sqlite3Vdb@57
	mov	ecx, DWORD PTR _initData$91297[esp+684]
	mov	DWORD PTR _rc$[esp+672], ecx
	mov	edi, ecx
$LN112@sqlite3Vdb@57:
; Line 37575
	push	esi
	call	_sqlite3FreeX
; Line 37576
	mov	eax, DWORD PTR _db$[esp+676]
	add	esp, 4
	mov	BYTE PTR [eax+68], 0
; Line 37577
	call	_sqlite3SafetyOn
; Line 37578
	cmp	edi, 7
	jne	$LN647@sqlite3Vdb@57
; Line 37579
	call	_sqlite3FailedMalloc
; Line 37580
	jmp	$no_mem$90290
$LN110@sqlite3Vdb@57:
; Line 37595
	mov	eax, DWORD PTR [edi+4]
	mov	esi, DWORD PTR _db$[esp+672]
	call	_sqlite3AnalysisLoad
	mov	DWORD PTR _rc$[esp+672], eax
; Line 37596
	jmp	$LN647@sqlite3Vdb@57
$LN109@sqlite3Vdb@57:
; Line 37608
	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR _db$[esp+672]
	push	edx
	push	eax
	mov	eax, DWORD PTR [edi+4]
	call	_sqlite3UnlinkAndDeleteTable
	add	esp, 8
; Line 37609
	jmp	$LN647@sqlite3Vdb@57
$LN108@sqlite3Vdb@57:
; Line 37620
	mov	ecx, DWORD PTR [edi+12]
	mov	edx, DWORD PTR _db$[esp+672]
	mov	eax, DWORD PTR [edi+4]
	push	ecx
	push	edx
	call	_sqlite3UnlinkAndDeleteIndex
	add	esp, 8
; Line 37621
	jmp	$LN647@sqlite3Vdb@57
$LN107@sqlite3Vdb@57:
; Line 37632
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR _db$[esp+672]
	mov	edx, DWORD PTR [edi+4]
	push	eax
	push	ecx
	call	_sqlite3UnlinkAndDeleteTrigger
	add	esp, 8
; Line 37633
	jmp	$LN647@sqlite3Vdb@57
$LN106@sqlite3Vdb@57:
; Line 37666
	xor	ecx, ecx
	cmp	ebx, DWORD PTR [esi+36]
	mov	DWORD PTR _nRoot$91315[esp+672], ecx
	jb	SHORT $LN1116@sqlite3Vdb@57
	mov	eax, ebx
	npad	5
$LL105@sqlite3Vdb@57:
; Line 37667
	test	BYTE PTR [eax+24], 4
	je	SHORT $LN1405@sqlite3Vdb@57
	add	ecx, 1
	mov	edx, ecx
	shl	edx, 6
	mov	eax, ebx
	sub	eax, edx
	cmp	eax, DWORD PTR [esi+36]
	jae	SHORT $LL105@sqlite3Vdb@57
$LN1405@sqlite3Vdb@57:
; Line 37666
	mov	DWORD PTR _nRoot$91315[esp+672], ecx
$LN1116@sqlite3Vdb@57:
; Line 37670
	mov	ecx, DWORD PTR _nRoot$91315[esp+672]
	lea	ecx, DWORD PTR [ecx*4+4]
	call	_sqlite3MallocRaw
; Line 37671
	test	eax, eax
	mov	DWORD PTR _aRoot$91316[esp+672], eax
	je	$no_mem$90290
; Line 37674
	mov	eax, DWORD PTR [edi+4]
; Line 37676
	mov	ecx, DWORD PTR _nRoot$91315[esp+672]
	shl	eax, 6
	add	eax, DWORD PTR [esi+84]
	mov	DWORD PTR _pnErr$91320[esp+672], eax
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $LN98@sqlite3Vdb@57
; Line 37672
	mov	edx, DWORD PTR _aRoot$91316[esp+672]
$LL100@sqlite3Vdb@57:
; Line 37678
	mov	esi, DWORD PTR [ebx]
	mov	DWORD PTR [edx+eax*4], esi
	add	eax, 1
	sub	ebx, 64					; 00000040H
	cmp	eax, ecx
	jl	SHORT $LL100@sqlite3Vdb@57
$LN98@sqlite3Vdb@57:
; Line 37680
	mov	ecx, DWORD PTR _aRoot$91316[esp+672]
; Line 37681
	lea	edx, DWORD PTR _pTos$[esp+672]
	mov	DWORD PTR [ecx+eax*4], 0
	mov	eax, DWORD PTR _nRoot$91315[esp+672]
	push	edx
	call	_popStack
; Line 37684
	mov	esi, DWORD PTR _pnErr$91320[esp+676]
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR _nRoot$91315[esp+676]
	mov	edi, DWORD PTR [edi+8]
	mov	ebx, DWORD PTR _pTos$[esp+676]
	lea	eax, DWORD PTR _nErr$91318[esp+676]
	push	eax
	mov	eax, DWORD PTR _aRoot$91316[esp+680]
	push	ecx
	push	edx
	mov	edx, DWORD PTR _db$[esp+688]
	push	eax
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [edi+edi*2]
	mov	eax, DWORD PTR [eax+ecx*8+4]
	add	ebx, 64					; 00000040H
	mov	DWORD PTR _pTos$[esp+692], ebx
	call	_sqlite3BtreeIntegrityCheck
; Line 37685
	mov	ecx, DWORD PTR _nErr$91318[esp+692]
	mov	edi, eax
	mov	eax, ecx
	cdq
	add	esp, 20					; 00000014H
	sub	DWORD PTR [esi], eax
	sbb	DWORD PTR [esi+4], edx
; Line 37686
	test	ecx, ecx
	jne	SHORT $LN97@sqlite3Vdb@57
; Line 37688
	mov	WORD PTR [ebx+24], 1
; Line 37689
	jmp	SHORT $LN96@sqlite3Vdb@57
$LN97@sqlite3Vdb@57:
; Line 37691
	mov	eax, edi
	mov	DWORD PTR [ebx+16], edi
	lea	edx, DWORD PTR [eax+1]
	npad	4
$LL1291@sqlite3Vdb@57:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL1291@sqlite3Vdb@57
	sub	eax, edx
	mov	DWORD PTR [ebx+20], eax
; Line 37692
	mov	WORD PTR [ebx+24], 98			; 00000062H
; Line 37693
	mov	DWORD PTR [ebx+28], 0
$LN96@sqlite3Vdb@57:
; Line 37696
	movzx	ecx, BYTE PTR _encoding$[esp+672]
	mov	eax, ebx
	mov	BYTE PTR [ebx+27], 1
	call	_sqlite3VdbeChangeEncoding
; Line 37697
	mov	ecx, DWORD PTR _aRoot$91316[esp+672]
	push	ecx
	call	_sqlite3FreeX
; Line 37698
	jmp	$LN1453@sqlite3Vdb@57
$LN95@sqlite3Vdb@57:
; Line 37709
	mov	eax, ebx
	call	_sqlite3VdbeMemIntegerify
; Line 37710
	mov	edx, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx]
	mov	edi, DWORD PTR _p$GSCopy$[esp+672]
	push	edx
	push	eax
	add	edi, 96					; 00000060H
	call	_sqlite3VdbeFifoPush
	add	esp, 8
	sub	ebx, 64					; 00000040H
	mov	DWORD PTR _pTos$[esp+672], ebx
	jmp	$LN647@sqlite3Vdb@57
$LN94@sqlite3Vdb@57:
; Line 37724
	mov	ecx, DWORD PTR _db$[esp+672]
	cmp	DWORD PTR [ecx+152], 0
	jne	$abort_due_to_interrupt$90295
; Line 37725
	mov	esi, DWORD PTR _p$GSCopy$[esp+672]
	add	esi, 96					; 00000060H
	lea	edx, DWORD PTR _v$91341[esp+672]
	call	_sqlite3VdbeFifoPop
	cmp	eax, 101				; 00000065H
	jne	SHORT $LN92@sqlite3Vdb@57
; Line 37726
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 37727
	jmp	$LN647@sqlite3Vdb@57
$LN92@sqlite3Vdb@57:
; Line 37729
	mov	edx, DWORD PTR _v$91341[esp+672]
	mov	eax, DWORD PTR _v$91341[esp+676]
	add	ebx, 64					; 00000040H
	mov	DWORD PTR [ebx], edx
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR _pTos$[esp+672], ebx
; Line 37730
	mov	WORD PTR [ebx+24], 4
; Line 37732
	jmp	$LN647@sqlite3Vdb@57
$LN90@sqlite3Vdb@57:
; Line 37743
	mov	edi, DWORD PTR [esi+108]
; Line 37748
	cmp	edi, DWORD PTR [esi+112]
	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR [esi+108], eax
	jl	SHORT $LN88@sqlite3Vdb@57
; Line 37751
	mov	ebx, DWORD PTR [esi+116]
	mov	DWORD PTR [esi+112], eax
	lea	eax, DWORD PTR [edi+edi*2+3]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	call	_sqlite3ReallocOrFree
; Line 37752
	test	eax, eax
	mov	ecx, DWORD PTR _p$GSCopy$[esp+672]
	mov	ebx, DWORD PTR _pTos$[esp+672]
	mov	DWORD PTR [ecx+116], eax
	je	$no_mem$90290
	mov	esi, ecx
$LN88@sqlite3Vdb@57:
; Line 37754
	mov	eax, DWORD PTR [esi+116]
; Line 37755
	mov	ecx, DWORD PTR _db$[esp+672]
	lea	edx, DWORD PTR [edi+edi*2]
	lea	eax, DWORD PTR [eax+edx*8]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+4], ecx
; Line 37756
	mov	edx, DWORD PTR [esi+568]
	mov	DWORD PTR [eax+8], edx
; Line 37757
	mov	ecx, DWORD PTR [esi+96]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [esi+100]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [esi+104]
	mov	DWORD PTR [eax+20], ecx
; Line 37758
	xor	eax, eax
	mov	DWORD PTR [esi+96], eax
	mov	DWORD PTR [esi+100], eax
	mov	DWORD PTR [esi+104], eax
; Line 37759
	jmp	$LN647@sqlite3Vdb@57
$LN87@sqlite3Vdb@57:
; Line 37769
	mov	eax, DWORD PTR _p$GSCopy$[esp+672]
	add	DWORD PTR [eax+108], -1
	mov	ecx, DWORD PTR [eax+108]
	lea	edx, DWORD PTR [ecx+ecx*2]
	mov	ecx, DWORD PTR [eax+116]
	lea	esi, DWORD PTR [ecx+edx*8]
; Line 37771
	mov	edx, DWORD PTR [esi]
	mov	ecx, DWORD PTR _db$[esp+672]
	mov	DWORD PTR [ecx+32], edx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+36], edx
; Line 37772
	mov	ecx, DWORD PTR [esi+8]
; Line 37773
	lea	edi, DWORD PTR [eax+96]
	mov	DWORD PTR [eax+568], ecx
	call	_sqlite3VdbeFifoClear
; Line 37774
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [edi], edx
	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [edi+4], eax
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR [edi+8], ecx
; Line 37775
	jmp	$LN647@sqlite3Vdb@57
$LN86@sqlite3Vdb@57:
; Line 37792
	mov	edx, DWORD PTR _p$GSCopy$[esp+672]
	push	ebx
	mov	ebx, DWORD PTR [edi+4]
	shl	ebx, 6
	add	ebx, DWORD PTR [edx+84]
	call	_sqlite3VdbeMemMove
; Line 37793
	sub	DWORD PTR _pTos$[esp+676], 64		; 00000040H
	mov	DWORD PTR _rc$[esp+676], eax
; Line 37798
	mov	eax, DWORD PTR _pOp$[esp+676]
	add	esp, 4
	cmp	DWORD PTR [eax+8], 0
	jne	$LN1344@sqlite3Vdb@57
	mov	ebx, DWORD PTR _pTos$[esp+672]
	mov	esi, DWORD PTR _p$GSCopy$[esp+672]
	mov	edi, eax
$LN85@sqlite3Vdb@57:
; Line 37815
	mov	eax, DWORD PTR [edi+4]
	shl	eax, 6
	add	eax, DWORD PTR [esi+84]
	add	ebx, 64					; 00000040H
	push	256					; 00000100H
	mov	edx, ebx
	mov	DWORD PTR _pTos$[esp+676], ebx
	call	_sqlite3VdbeMemShallowCopy
	add	esp, 4
; Line 37816
	jmp	$LN647@sqlite3Vdb@57
$LN83@sqlite3Vdb@57:
; Line 37833
	mov	edi, DWORD PTR [edi+4]
	shl	edi, 6
	add	edi, DWORD PTR [esi+84]
; Line 37834
	mov	eax, edi
	call	_sqlite3VdbeMemIntegerify
; Line 37835
	mov	eax, ebx
	call	_sqlite3VdbeMemIntegerify
; Line 37836
	mov	eax, DWORD PTR [ebx+4]
	mov	edx, DWORD PTR [edi+4]
	cmp	edx, eax
	mov	ecx, DWORD PTR [ebx]
	jg	$LN647@sqlite3Vdb@57
	jl	SHORT $LN1292@sqlite3Vdb@57
	mov	edx, DWORD PTR [edi]
	cmp	edx, ecx
	jae	$LN647@sqlite3Vdb@57
$LN1292@sqlite3Vdb@57:
; Line 37837
	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [edi+4], eax
; Line 37839
	jmp	$LN647@sqlite3Vdb@57
$LN81@sqlite3Vdb@57:
; Line 37854
	mov	ecx, DWORD PTR [edi+8]
; Line 37856
	mov	eax, DWORD PTR [edi+4]
	shl	ecx, 6
	add	ecx, DWORD PTR [esi+84]
	cdq
	add	DWORD PTR [ecx], eax
	adc	DWORD PTR [ecx+4], edx
; Line 37857
	jmp	$LN647@sqlite3Vdb@57
$LN80@sqlite3Vdb@57:
; Line 37871
	mov	eax, DWORD PTR [edi+4]
; Line 37873
	mov	esi, DWORD PTR [esi+84]
	shl	eax, 6
	cmp	DWORD PTR [eax+esi+4], 0
	jl	$LN647@sqlite3Vdb@57
	jg	SHORT $LN1293@sqlite3Vdb@57
	cmp	DWORD PTR [eax+esi], 0
	jbe	$LN647@sqlite3Vdb@57
$LN1293@sqlite3Vdb@57:
; Line 37874
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 37876
	jmp	$LN647@sqlite3Vdb@57
$LN78@sqlite3Vdb@57:
; Line 37890
	mov	eax, DWORD PTR [edi+4]
; Line 37892
	mov	esi, DWORD PTR [esi+84]
	shl	eax, 6
	cmp	DWORD PTR [eax+esi+4], 0
	jg	$LN647@sqlite3Vdb@57
	jl	SHORT $LN1294@sqlite3Vdb@57
	cmp	DWORD PTR [eax+esi], 0
	jae	$LN647@sqlite3Vdb@57
$LN1294@sqlite3Vdb@57:
; Line 37893
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 37895
	jmp	$LN647@sqlite3Vdb@57
$LN76@sqlite3Vdb@57:
; Line 37909
	mov	eax, DWORD PTR [edi+4]
; Line 37911
	mov	esi, DWORD PTR [esi+84]
	shl	eax, 6
	mov	ecx, DWORD PTR [eax+esi]
	or	ecx, DWORD PTR [eax+esi+4]
	jne	$LN647@sqlite3Vdb@57
; Line 37912
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 37914
	jmp	$LN647@sqlite3Vdb@57
$LN74@sqlite3Vdb@57:
; Line 37923
	mov	esi, DWORD PTR [edi+4]
	mov	edx, DWORD PTR _p$GSCopy$[esp+672]
	shl	esi, 6
	add	esi, DWORD PTR [edx+84]
	call	_sqlite3VdbeMemSetNull
; Line 37924
	jmp	$LN647@sqlite3Vdb@57
$LN73@sqlite3Vdb@57:
; Line 37933
	mov	eax, DWORD PTR [edi+4]
	mov	esi, DWORD PTR [edi+8]
	cdq
	push	edx
	push	eax
	mov	eax, DWORD PTR _p$GSCopy$[esp+680]
	shl	esi, 6
	add	esi, DWORD PTR [eax+84]
	call	_sqlite3VdbeMemSetInt64
	add	esp, 8
; Line 37934
	jmp	$LN647@sqlite3Vdb@57
$LN72@sqlite3Vdb@57:
; Line 37946
	mov	ecx, DWORD PTR [edi+8]
	mov	esi, DWORD PTR [esi+84]
	mov	ebx, DWORD PTR [edi+4]
	shl	ecx, 6
	add	ecx, esi
	shl	ebx, 6
	push	ecx
	add	ebx, esi
	call	_sqlite3VdbeMemMove
	mov	DWORD PTR _rc$[esp+676], eax
; Line 37947
	jmp	$LN1453@sqlite3Vdb@57
$LN71@sqlite3Vdb@57:
; Line 37960
	mov	eax, DWORD PTR [edi+8]
; Line 37967
	mov	edx, eax
	shl	edx, 6
	sub	ebx, edx
	add	ebx, 64					; 00000040H
; Line 37971
	xor	edx, edx
	test	eax, eax
	mov	ecx, ebx
	mov	ebx, DWORD PTR [esi+44]
	mov	DWORD PTR _n$91399[esp+672], eax
	jle	SHORT $LN68@sqlite3Vdb@57
	npad	4
$LL70@sqlite3Vdb@57:
; Line 37972
	mov	DWORD PTR [ebx+edx*4], ecx
; Line 37973
	call	__storeTypeInfo
	add	edx, 1
	add	ecx, 64					; 00000040H
	cmp	edx, DWORD PTR _n$91399[esp+672]
	jl	SHORT $LL70@sqlite3Vdb@57
$LN68@sqlite3Vdb@57:
; Line 37975
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR _ctx$91403[esp+672], eax
; Line 37977
	mov	eax, DWORD PTR [edi+4]
	shl	eax, 6
	add	eax, DWORD PTR [esi+84]
; Line 37978
	mov	ecx, 1
	mov	DWORD PTR _ctx$91403[esp+744], eax
	add	DWORD PTR [eax+20], ecx
; Line 37980
	xor	eax, eax
	mov	DWORD PTR _ctx$91403[esp+696], eax
; Line 37981
	mov	DWORD PTR _ctx$91403[esp+708], eax
; Line 37982
	mov	BYTE PTR _ctx$91403[esp+748], al
; Line 37983
	mov	DWORD PTR _ctx$91403[esp+752], eax
; Line 37984
	mov	eax, DWORD PTR _ctx$91403[esp+672]
	mov	WORD PTR _ctx$91403[esp+704], cx
	cmp	BYTE PTR [eax+3], 0
	je	SHORT $LN67@sqlite3Vdb@57
; Line 37988
	mov	ecx, DWORD PTR [edi-8]
	mov	DWORD PTR _ctx$91403[esp+752], ecx
$LN67@sqlite3Vdb@57:
; Line 37990
	mov	edi, DWORD PTR _n$91399[esp+672]
	mov	eax, DWORD PTR [eax+20]
	push	ebx
	lea	edx, DWORD PTR _ctx$91403[esp+676]
	push	edi
	push	edx
	call	eax
; Line 37991
	lea	ecx, DWORD PTR _pTos$[esp+684]
	push	ecx
	mov	eax, edi
	call	_popStack
	add	esp, 16					; 00000010H
; Line 37992
	cmp	BYTE PTR _ctx$91403[esp+748], 0
	je	SHORT $LN66@sqlite3Vdb@57
; Line 37993
	push	0
	mov	al, 1
	lea	ecx, DWORD PTR _ctx$91403[esp+684]
	call	_sqlite3ValueText
	push	eax
	add	esi, 556				; 0000022cH
	push	esi
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
; Line 37994
	mov	DWORD PTR _rc$[esp+672], 1
$LN66@sqlite3Vdb@57:
; Line 37996
	lea	edx, DWORD PTR _ctx$91403[esp+680]
	push	edx
	call	_sqlite3VdbeMemRelease
; Line 37997
	jmp	$LN1453@sqlite3Vdb@57
$LN65@sqlite3Vdb@57:
; Line 38015
	mov	ebx, DWORD PTR [edi+4]
; Line 38017
	mov	eax, DWORD PTR [edi+12]
	shl	ebx, 6
	add	ebx, DWORD PTR [esi+84]
	push	eax
	call	_sqlite3VdbeMemFinalize
	add	esp, 4
; Line 38018
	cmp	eax, 1
	mov	DWORD PTR _rc$[esp+672], eax
	jne	SHORT $LN64@sqlite3Vdb@57
; Line 38019
	push	0
	mov	al, al
	mov	ecx, ebx
	call	_sqlite3ValueText
	mov	ecx, DWORD PTR _p$GSCopy$[esp+676]
	push	eax
	add	ecx, 556				; 0000022cH
	push	ecx
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
$LN64@sqlite3Vdb@57:
; Line 38021
	mov	ecx, ebx
	call	_sqlite3VdbeMemTooBig
	test	eax, eax
	jne	$LN1353@sqlite3Vdb@57
; Line 38024
	jmp	$LN1344@sqlite3Vdb@57
$LN62@sqlite3Vdb@57:
; Line 38036
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3SafetyOff
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38037
	mov	edi, DWORD PTR _db$[esp+672]
	lea	edx, DWORD PTR [esi+556]
	push	edi
	push	edx
	call	_sqlite3RunVacuum
	mov	DWORD PTR _rc$[esp+680], eax
	add	esp, 8
; Line 38038
	mov	eax, edi
	call	_sqlite3SafetyOn
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38039
	jmp	$LN647@sqlite3Vdb@57
$LN59@sqlite3Vdb@57:
; Line 38054
	mov	eax, DWORD PTR [edi+4]
; Line 38055
	mov	ecx, DWORD PTR _db$[esp+672]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR [edx+eax*8+4]
	mov	esi, DWORD PTR [eax+4]
	cmp	BYTE PTR [esi+18], 0
	je	SHORT $LN1256@sqlite3Vdb@57
	mov	eax, esi
	call	_invalidateAllOverflowCache
	push	0
	mov	eax, esi
	call	_incrVacuumStep
	add	esp, 4
; Line 38056
	cmp	eax, 101				; 00000065H
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN647@sqlite3Vdb@57
$LN1256@sqlite3Vdb@57:
; Line 38057
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 38058
	mov	DWORD PTR _rc$[esp+672], 0
; Line 38060
	jmp	$LN647@sqlite3Vdb@57
$LN57@sqlite3Vdb@57:
; Line 38074
	cmp	DWORD PTR [edi+4], 0
	jne	SHORT $LN56@sqlite3Vdb@57
; Line 38075
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3ExpirePreparedStatements
; Line 38076
	jmp	$LN647@sqlite3Vdb@57
$LN56@sqlite3Vdb@57:
; Line 38077
	mov	BYTE PTR [esi+564], 1
; Line 38079
	jmp	$LN647@sqlite3Vdb@57
$LN54@sqlite3Vdb@57:
; Line 38100
	mov	eax, DWORD PTR [edi+4]
; Line 38101
	test	eax, eax
	setl	cl
; Line 38102
	test	cl, cl
	mov	BYTE PTR _isWriteLock$91440[esp+672], cl
	je	SHORT $LN53@sqlite3Vdb@57
; Line 38103
	or	ecx, -1
	sub	ecx, eax
	mov	eax, ecx
$LN53@sqlite3Vdb@57:
; Line 38105
	mov	edx, DWORD PTR _isWriteLock$91440[esp+672]
	mov	ecx, DWORD PTR [edi+8]
	push	edx
	lea	edx, DWORD PTR [eax+eax*2]
	mov	eax, DWORD PTR _db$[esp+676]
	push	ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+edx*8+4]
	call	_sqlite3BtreeLockTable
	add	esp, 8
; Line 38106
	cmp	eax, 6
	mov	DWORD PTR _rc$[esp+672], eax
	jne	$LN647@sqlite3Vdb@57
; Line 38108
	mov	edx, DWORD PTR [edi+12]
	push	0
	push	edx
	push	OFFSET ??_C@_0BL@JCFDMLHP@database?5table?5is?5locked?3?5?$AA@
	add	esi, 556				; 0000022cH
	push	esi
	call	_sqlite3SetString
	add	esp, 16					; 00000010H
; Line 38110
	jmp	$LN647@sqlite3Vdb@57
$LN51@sqlite3Vdb@57:
; Line 38121
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR _db$[esp+672]
	call	_sqlite3VtabBegin
	mov	DWORD PTR _rc$[esp+672], eax
; Line 38122
	jmp	$LN647@sqlite3Vdb@57
$LN50@sqlite3Vdb@57:
; Line 38133
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR _db$[esp+672]
	add	esi, 556				; 0000022cH
	push	esi
	push	eax
	mov	eax, DWORD PTR [edi+4]
	call	_sqlite3VtabCallCreate
	add	esp, 8
	mov	DWORD PTR _rc$[esp+672], eax
; Line 38134
	jmp	$LN647@sqlite3Vdb@57
$LN49@sqlite3Vdb@57:
; Line 38145
	mov	ecx, DWORD PTR _p$GSCopy$[esp+672]
; Line 38146
	mov	esi, DWORD PTR _db$[esp+672]
	mov	BYTE PTR [ecx+566], 2
	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edi+4]
	push	edx
	call	_sqlite3VtabCallDestroy
	mov	DWORD PTR _rc$[esp+676], eax
; Line 38147
	mov	eax, DWORD PTR _p$GSCopy$[esp+676]
	add	esp, 4
	mov	BYTE PTR [eax+566], 0
; Line 38148
	jmp	$LN647@sqlite3Vdb@57
$LN48@sqlite3Vdb@57:
; Line 38163
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR _pVtabCursor$91453[esp+672], 0
; Line 38164
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pVtab$91454[esp+672], eax
; Line 38167
	mov	eax, DWORD PTR _db$[esp+672]
	mov	DWORD PTR _pModule$91456[esp+672], ecx
	call	_sqlite3SafetyOff
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38168
	mov	eax, DWORD PTR _pVtab$91454[esp+672]
	lea	edx, DWORD PTR _pVtabCursor$91453[esp+672]
	push	edx
	mov	edx, DWORD PTR [ecx+24]
	push	eax
	call	edx
	mov	edx, eax
; Line 38169
	mov	eax, DWORD PTR _db$[esp+680]
	add	esp, 8
	mov	DWORD PTR _rc$[esp+672], edx
	call	_sqlite3SafetyOn
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38170
	test	edx, edx
	jne	$LN647@sqlite3Vdb@57
; Line 38172
	mov	eax, DWORD PTR _pVtabCursor$91453[esp+672]
	mov	ecx, DWORD PTR _pVtab$91454[esp+672]
	mov	DWORD PTR [eax], ecx
; Line 38175
	mov	edx, DWORD PTR [edi+4]
	push	-1
	push	edx
	mov	ebx, esi
	call	_allocateCursor
	add	esp, 8
; Line 38176
	test	eax, eax
	je	SHORT $LN44@sqlite3Vdb@57
; Line 38177
	mov	ecx, DWORD PTR _pVtabCursor$91453[esp+672]
	mov	DWORD PTR [eax+96], ecx
; Line 38178
	mov	edx, DWORD PTR _pVtabCursor$91453[esp+672]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+100], edx
; Line 38179
	jmp	$LN1344@sqlite3Vdb@57
$LN44@sqlite3Vdb@57:
; Line 38180
	mov	eax, DWORD PTR _pVtabCursor$91453[esp+672]
	mov	ecx, DWORD PTR _pModule$91456[esp+672]
	mov	edx, DWORD PTR [ecx+28]
	push	eax
	call	edx
; Line 38183
	jmp	$LN1453@sqlite3Vdb@57
$LN42@sqlite3Vdb@57:
; Line 38215
	mov	ecx, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [ecx+eax*4]
; Line 38217
	mov	edx, DWORD PTR [eax+96]
	mov	DWORD PTR _pCur$91467[esp+672], eax
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
; Line 38222
	mov	eax, DWORD PTR [ebx-64]
; Line 38226
	xor	edx, edx
; Line 38229
	cmp	eax, edx
	mov	DWORD PTR _pModule$91466[esp+672], ecx
	mov	ecx, DWORD PTR [esi+44]
	mov	DWORD PTR _nArg$91465[esp+672], eax
	mov	DWORD PTR _res$91471[esp+672], edx
	mov	DWORD PTR _apArg$91473[esp+672], ecx
	jle	SHORT $LN39@sqlite3Vdb@57
	add	eax, 1
	shl	eax, 6
	mov	ecx, ebx
	sub	ecx, eax
$LL41@sqlite3Vdb@57:
; Line 38230
	mov	eax, DWORD PTR _apArg$91473[esp+672]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 38231
	call	__storeTypeInfo
	add	edx, 1
	add	ecx, 64					; 00000040H
	cmp	edx, DWORD PTR _nArg$91465[esp+672]
	jl	SHORT $LL41@sqlite3Vdb@57
$LN39@sqlite3Vdb@57:
; Line 38234
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3SafetyOff
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38236
	mov	ecx, DWORD PTR _apArg$91473[esp+672]
	mov	edx, DWORD PTR _nArg$91465[esp+672]
	push	ecx
	mov	BYTE PTR [esi+566], 1
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [ebx]
	push	edx
	mov	edx, DWORD PTR _pCur$91467[esp+680]
	push	eax
	mov	eax, DWORD PTR [edx+96]
	push	ecx
	mov	ecx, DWORD PTR _pModule$91466[esp+688]
	mov	edx, DWORD PTR [ecx+32]
	push	eax
	call	edx
	add	esp, 20					; 00000014H
; Line 38238
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	mov	BYTE PTR [esi+566], 0
	jne	SHORT $LN37@sqlite3Vdb@57
; Line 38239
	mov	eax, DWORD PTR _pCur$91467[esp+672]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _pModule$91466[esp+672]
	mov	eax, DWORD PTR [edx+40]
	push	ecx
	call	eax
	add	esp, 4
	mov	DWORD PTR _res$91471[esp+672], eax
$LN37@sqlite3Vdb@57:
; Line 38241
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3SafetyOn
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38243
	cmp	DWORD PTR _res$91471[esp+672], eax
	je	SHORT $LN35@sqlite3Vdb@57
; Line 38244
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
$LN35@sqlite3Vdb@57:
; Line 38249
	mov	eax, DWORD PTR _nArg$91465[esp+672]
	lea	ecx, DWORD PTR _pTos$[esp+672]
	add	eax, 2
	push	ecx
; Line 38250
	jmp	$LN1451@sqlite3Vdb@57
$LN34@sqlite3Vdb@57:
; Line 38263
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [esi+56]
	mov	ecx, DWORD PTR [eax+edx*4]
; Line 38265
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax]
; Line 38266
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN33@sqlite3Vdb@57
; Line 38267
	push	0
	push	OFFSET ??_C@_0CF@IBICBGHD@Unsupported?5module?5operation?3?5xR@
; Line 38269
	jmp	$LN1447@sqlite3Vdb@57
$LN33@sqlite3Vdb@57:
; Line 38272
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3SafetyOff
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38273
	mov	ecx, DWORD PTR [ecx+96]
	mov	edx, DWORD PTR [edx+48]
	lea	eax, DWORD PTR _iRow$91488[esp+672]
	push	eax
	push	ecx
	call	edx
	mov	DWORD PTR _rc$[esp+680], eax
; Line 38274
	mov	eax, DWORD PTR _db$[esp+680]
	add	esp, 8
	call	_sqlite3SafetyOn
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38276
	add	ebx, 64					; 00000040H
; Line 38277
	mov	WORD PTR [ebx+24], 4
; Line 38278
	mov	eax, DWORD PTR _iRow$91488[esp+672]
	mov	DWORD PTR [ebx], eax
	mov	ecx, DWORD PTR _iRow$91488[esp+676]
	mov	DWORD PTR _pTos$[esp+672], ebx
	mov	DWORD PTR [ebx+4], ecx
; Line 38281
	jmp	$LN647@sqlite3Vdb@57
$LN29@sqlite3Vdb@57:
; Line 38294
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [eax+edx*4]
; Line 38296
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pCur$91493[esp+672], eax
	mov	eax, DWORD PTR [edx]
; Line 38297
	cmp	DWORD PTR [eax+44], 0
	mov	DWORD PTR _pModule$91492[esp+672], eax
	jne	SHORT $LN28@sqlite3Vdb@57
; Line 38298
	push	0
	push	OFFSET ??_C@_0CG@PBHEAGPI@Unsupported?5module?5operation?3?5xC@
; Line 38300
	jmp	$LN1447@sqlite3Vdb@57
$LN28@sqlite3Vdb@57:
; Line 38302
	push	88					; 00000058H
	lea	eax, DWORD PTR _sContext$91498[esp+676]
	push	0
	push	eax
	call	_memset
; Line 38304
	mov	eax, DWORD PTR _db$[esp+684]
	add	esp, 12					; 0000000cH
	mov	WORD PTR _sContext$91498[esp+704], 1
	call	_sqlite3SafetyOff
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38305
	mov	ecx, DWORD PTR [edi+8]
	mov	eax, DWORD PTR _pCur$91493[esp+672]
	push	ecx
	mov	ecx, DWORD PTR [eax+96]
	lea	edx, DWORD PTR _sContext$91498[esp+676]
	push	edx
	mov	edx, DWORD PTR _pModule$91492[esp+680]
	mov	eax, DWORD PTR [edx+44]
	push	ecx
	call	eax
; Line 38311
	movzx	ecx, BYTE PTR _encoding$[esp+684]
	mov	DWORD PTR _rc$[esp+684], eax
	lea	eax, DWORD PTR _sContext$91498[esp+692]
	call	_sqlite3VdbeChangeEncoding
; Line 38312
	add	ebx, 64					; 00000040H
; Line 38314
	lea	ecx, DWORD PTR _sContext$91498[esp+692]
	push	ecx
	mov	DWORD PTR _pTos$[esp+688], ebx
	mov	WORD PTR [ebx+24], 0
	call	_sqlite3VdbeMemMove
; Line 38316
	mov	eax, DWORD PTR _db$[esp+688]
	add	esp, 16					; 00000010H
	call	_sqlite3SafetyOn
	test	eax, eax
	jne	$LN1354@sqlite3Vdb@57
; Line 38319
	mov	ecx, ebx
	call	_sqlite3VdbeMemTooBig
	test	eax, eax
	jne	$LN1353@sqlite3Vdb@57
; Line 38324
	jmp	$LN1344@sqlite3Vdb@57
$LN23@sqlite3Vdb@57:
; Line 38339
	mov	edx, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [esi+56]
	mov	eax, DWORD PTR [eax+edx*4]
; Line 38341
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _pCur$91505[esp+672], eax
	mov	eax, DWORD PTR [edx]
; Line 38342
	cmp	DWORD PTR [eax+36], 0
	mov	DWORD PTR _res$91504[esp+672], 0
	mov	DWORD PTR _pModule$91503[esp+672], eax
	jne	SHORT $LN22@sqlite3Vdb@57
; Line 38343
	push	0
	push	OFFSET ??_C@_0CE@EIECKKFD@Unsupported?5module?5operation?3?5xN@
; Line 38345
	jmp	$LN1447@sqlite3Vdb@57
$LN22@sqlite3Vdb@57:
; Line 38352
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3SafetyOff
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38354
	mov	eax, DWORD PTR _pCur$91505[esp+672]
	mov	edx, DWORD PTR _pModule$91503[esp+672]
	mov	BYTE PTR [esi+566], 1
	mov	ecx, DWORD PTR [eax+96]
	mov	eax, DWORD PTR [edx+36]
	push	ecx
	call	eax
	add	esp, 4
; Line 38356
	test	eax, eax
	mov	DWORD PTR _rc$[esp+672], eax
	mov	BYTE PTR [esi+566], 0
	jne	SHORT $LN19@sqlite3Vdb@57
; Line 38357
	mov	ecx, DWORD PTR _pCur$91505[esp+672]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _pModule$91503[esp+672]
	mov	ecx, DWORD PTR [eax+40]
	push	edx
	call	ecx
	add	esp, 4
	mov	DWORD PTR _res$91504[esp+672], eax
$LN19@sqlite3Vdb@57:
; Line 38359
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3SafetyOn
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38361
	cmp	DWORD PTR _res$91504[esp+672], eax
	jne	$LN647@sqlite3Vdb@57
; Line 38363
	mov	edi, DWORD PTR [edi+8]
	sub	edi, 1
	mov	DWORD PTR _pc$[esp+672], edi
; Line 38367
	jmp	$LN647@sqlite3Vdb@57
$LN16@sqlite3Vdb@57:
; Line 38397
	mov	eax, DWORD PTR [edi+12]
; Line 38398
	mov	ecx, DWORD PTR [eax]
; Line 38401
	cmp	DWORD PTR [ecx+52], 0
	mov	DWORD PTR _pVtab$91515[esp+672], eax
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR _pModule$91517[esp+672], ecx
	mov	DWORD PTR _nArg$91519[esp+672], eax
	jne	SHORT $LN15@sqlite3Vdb@57
; Line 38402
	push	0
	push	OFFSET ??_C@_0BA@FFEDMJJH@read?9only?5table?$AA@
	add	esi, 556				; 0000022cH
	push	esi
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
; Line 38403
	mov	DWORD PTR _rc$[esp+672], 1
; Line 38404
	jmp	$LN8@sqlite3Vdb@57
$LN15@sqlite3Vdb@57:
; Line 38407
	mov	edx, DWORD PTR [esi+44]
; Line 38408
	mov	ecx, eax
	shl	ecx, 6
	mov	DWORD PTR _apArg$91526[esp+672], edx
	mov	edx, ecx
	mov	ecx, ebx
	sub	ecx, edx
	add	ecx, 64					; 00000040H
; Line 38409
	xor	edx, edx
	test	eax, eax
	jle	SHORT $LN11@sqlite3Vdb@57
$LL13@sqlite3Vdb@57:
; Line 38410
	call	__storeTypeInfo
; Line 38411
	mov	eax, DWORD PTR _apArg$91526[esp+672]
	mov	DWORD PTR [eax+edx*4], ecx
	add	edx, 1
	add	ecx, 64					; 00000040H
	cmp	edx, DWORD PTR _nArg$91519[esp+672]
	jl	SHORT $LL13@sqlite3Vdb@57
$LN11@sqlite3Vdb@57:
; Line 38413
	mov	eax, DWORD PTR _db$[esp+672]
	call	_sqlite3SafetyOff
	test	eax, eax
	jne	$abort_due_to_misuse$90306
; Line 38415
	mov	edx, DWORD PTR _apArg$91526[esp+672]
	mov	eax, DWORD PTR _nArg$91519[esp+672]
	mov	esi, DWORD PTR _pVtab$91515[esp+672]
	add	DWORD PTR [esi+4], 1
	lea	ecx, DWORD PTR _rowid$91525[esp+672]
	push	ecx
	mov	ecx, DWORD PTR _pModule$91517[esp+676]
	push	edx
	mov	edx, DWORD PTR [ecx+52]
	push	eax
	push	esi
	call	edx
	mov	DWORD PTR _rc$[esp+688], eax
; Line 38416
	mov	eax, esi
	mov	esi, DWORD PTR _db$[esp+688]
	add	esp, 16					; 00000010H
	call	_sqlite3VtabUnlock
; Line 38417
	mov	eax, esi
	call	_sqlite3SafetyOn
	test	eax, eax
	jne	$LN1373@sqlite3Vdb@57
; Line 38418
	cmp	DWORD PTR [edi+4], eax
	je	SHORT $LN8@sqlite3Vdb@57
	cmp	DWORD PTR _rc$[esp+672], eax
	jne	SHORT $LN8@sqlite3Vdb@57
; Line 38420
	mov	ecx, DWORD PTR _rowid$91525[esp+672]
	mov	edx, DWORD PTR _rowid$91525[esp+676]
	mov	eax, esi
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], edx
$LN8@sqlite3Vdb@57:
; Line 38423
	lea	eax, DWORD PTR _pTos$[esp+672]
	push	eax
	mov	eax, DWORD PTR _nArg$91519[esp+676]
$LN1451@sqlite3Vdb@57:
	call	_popStack
$LN1453@sqlite3Vdb@57:
	add	esp, 4
$LN1344@sqlite3Vdb@57:
; Line 35575
	mov	ebx, DWORD PTR _pTos$[esp+672]
$LN647@sqlite3Vdb@57:
; Line 33892
	add	DWORD PTR _pc$[esp+672], 1
	cmp	DWORD PTR _rc$[esp+672], 0
; Line 34375
	mov	esi, DWORD PTR _p$GSCopy$[esp+672]
	je	$LL1371@sqlite3Vdb@57
; Line 38517
	mov	edx, DWORD PTR _rc$[esp+672]
	mov	DWORD PTR [esi+124], edx
; Line 38518
	mov	edi, 1
; Line 38519
	jmp	$LN5@sqlite3Vdb@57
$LN1120@sqlite3Vdb@57:
; Line 33944
	mov	DWORD PTR _rc$[esp+672], 9
; Line 38517
	mov	edx, DWORD PTR _rc$[esp+672]
	mov	DWORD PTR [esi+124], edx
; Line 38518
	mov	edi, 1
; Line 38519
	jmp	$LN5@sqlite3Vdb@57
$LN633@sqlite3Vdb@57:
; Line 34072
	mov	edx, DWORD PTR _pc$[esp+672]
	mov	DWORD PTR [esi+40], ebx
	mov	ecx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+124], ecx
	mov	DWORD PTR [esi+120], edx
; Line 34073
	mov	eax, DWORD PTR [edi+8]
	mov	DWORD PTR [esi+132], eax
; Line 34074
	mov	edi, DWORD PTR [edi+12]
	test	edi, edi
	je	SHORT $LN632@sqlite3Vdb@57
; Line 34075
	push	0
	lea	ecx, DWORD PTR [esi+556]
	push	edi
	push	ecx
	call	_sqlite3SetString
	add	esp, 12					; 0000000cH
$LN632@sqlite3Vdb@57:
; Line 34077
	mov	eax, esi
	call	_sqlite3VdbeHalt
; Line 34079
	cmp	eax, 5
; Line 34081
	je	$LN1450@sqlite3Vdb@57
$LN631@sqlite3Vdb@57:
; Line 34083
	mov	eax, DWORD PTR [esi+124]
	neg	eax
	sbb	eax, eax
	and	eax, -100				; ffffff9cH
	add	eax, 101				; 00000065H
; Line 38570
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+660]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN598@sqlite3Vdb@57:
; Line 34373
	mov	edx, DWORD PTR [edi+4]
; Line 34374
	mov	eax, DWORD PTR [esi+36]
	shl	edx, 6
	mov	ecx, ebx
	sub	ecx, edx
	cmp	eax, ecx
	mov	DWORD PTR _pFirstColumn$90389[esp+672], ecx
	mov	DWORD PTR _pMem$90388[esp+672], eax
	jae	SHORT $LN595@sqlite3Vdb@57
$LL597@sqlite3Vdb@57:
; Line 34375
	test	WORD PTR [eax+24], 256			; 00000100H
	je	SHORT $LN596@sqlite3Vdb@57
	mov	eax, DWORD PTR _pMem$90388[esp+672]
	call	_sqlite3VdbeMemMakeWriteable
	test	eax, eax
	jne	$no_mem$90290
	mov	eax, DWORD PTR _pMem$90388[esp+672]
	mov	ecx, DWORD PTR _pFirstColumn$90389[esp+672]
$LN596@sqlite3Vdb@57:
	add	eax, 64					; 00000040H
	cmp	eax, ecx
	mov	DWORD PTR _pMem$90388[esp+672], eax
	jb	SHORT $LL597@sqlite3Vdb@57
$LN595@sqlite3Vdb@57:
; Line 34379
	mov	ecx, DWORD PTR [esi+92]
	add	ecx, 2
	or	ecx, 1
; Line 34385
	cmp	eax, ebx
	mov	DWORD PTR [esi+92], ecx
	ja	SHORT $LN591@sqlite3Vdb@57
$LL593@sqlite3Vdb@57:
; Line 34386
	mov	eax, DWORD PTR _pMem$90388[esp+672]
	call	_sqlite3VdbeMemNulTerminate
; Line 34387
	mov	ecx, DWORD PTR _pMem$90388[esp+672]
	call	__storeTypeInfo
	add	ecx, 64					; 00000040H
	cmp	ecx, ebx
	mov	DWORD PTR _pMem$90388[esp+672], ecx
	jbe	SHORT $LL593@sqlite3Vdb@57
$LN591@sqlite3Vdb@57:
; Line 34394
	add	DWORD PTR [esi+88], 1
; Line 34396
	mov	eax, DWORD PTR _pc$[esp+672]
	add	eax, 1
	mov	BYTE PTR [esi+560], 1
	mov	edx, DWORD PTR [edi+4]
	mov	DWORD PTR [esi+120], eax
	mov	DWORD PTR [esi+552], edx
; Line 34398
	mov	eax, 100				; 00000064H
; Line 38523
	mov	DWORD PTR [esi+40], ebx
; Line 38570
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+660]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1134@sqlite3Vdb@57:
; Line 34826
	mov	DWORD PTR _rc$[esp+672], 20		; 00000014H
; Line 34827
	jmp	$abort_due_to_error$90538
$LN1140@sqlite3Vdb@57:
; Line 35823
	cmp	DWORD PTR [edi+8], 0
	je	SHORT $LN348@sqlite3Vdb@57
; Line 35825
	mov	esi, ecx
	call	_sqlite3RollbackAll
; Line 35826
	mov	BYTE PTR [esi+20], 1
; Line 35827
	mov	esi, DWORD PTR _p$GSCopy$[esp+672]
	jmp	$LN631@sqlite3Vdb@57
$LN348@sqlite3Vdb@57:
; Line 35828
	mov	cl, BYTE PTR _i$90802[esp+672]
	mov	edi, DWORD PTR _db$[esp+672]
; Line 35829
	mov	eax, esi
	mov	BYTE PTR [edi+20], cl
	call	_sqlite3VdbeHalt
	cmp	eax, 5
	jne	$LN631@sqlite3Vdb@57
; Line 35831
	mov	edx, DWORD PTR _pc$[esp+672]
; Line 35832
	mov	al, 1
	sub	al, BYTE PTR _i$90802[esp+672]
	mov	DWORD PTR [esi+40], ebx
	mov	DWORD PTR [esi+120], edx
	mov	BYTE PTR [edi+20], al
$LN1450@sqlite3Vdb@57:
; Line 35833
	mov	DWORD PTR [esi+124], 5
; Line 35834
	mov	eax, 5
; Line 38570
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+660]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1141@sqlite3Vdb@57:
; Line 35883
	mov	ecx, DWORD PTR _pc$[esp+672]
	mov	DWORD PTR [esi+120], ecx
; Line 35884
	mov	DWORD PTR [esi+124], 5
; Line 35886
	mov	eax, 5
; Line 38523
	mov	DWORD PTR [esi+40], ebx
; Line 38570
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+660]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN316@sqlite3Vdb@57:
; Line 36113
	mov	edx, DWORD PTR _pc$[esp+672]
; Line 36115
	xor	eax, eax
	mov	DWORD PTR [ecx+120], edx
	mov	DWORD PTR [ecx+124], 5
	cmp	DWORD PTR [ebx+8], eax
	setle	al
	add	eax, 1
	shl	eax, 6
	add	eax, DWORD PTR _pTos$[esp+672]
	mov	DWORD PTR [ecx+40], eax
; Line 36116
	mov	eax, 5
; Line 38570
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[esp+660]
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1157@sqlite3Vdb@57:
; Line 36685
	mov	DWORD PTR _rc$[esp+672], 11		; 0000000bH
; Line 36686
	jmp	$abort_due_to_error$90538
$LN1159@sqlite3Vdb@57:
; Line 36730
	mov	DWORD PTR _rc$[esp+672], 13		; 0000000dH
; Line 36731
	jmp	$LN1313@sqlite3Vdb@57
$LN1160@sqlite3Vdb@57:
; Line 36767
	mov	DWORD PTR _rc$[esp+672], 13		; 0000000dH
; Line 36768
	jmp	$abort_due_to_error$90538
$abort_due_to_interrupt$90295:
; Line 38562
	mov	ecx, DWORD PTR _db$[esp+672]
	mov	eax, DWORD PTR [ecx+48]
	sub	eax, -264537850				; f03b7906H
	neg	eax
	sbb	eax, eax
	and	eax, 12					; 0000000cH
	add	eax, 9
; Line 38568
	push	0
	mov	DWORD PTR _rc$[esp+676], eax
	mov	DWORD PTR [esi+124], eax
	call	_sqlite3ErrStr
	push	eax
	lea	edx, DWORD PTR [esi+556]
	push	edx
; Line 38569
	jmp	$LN1449@sqlite3Vdb@57
$LN1352@sqlite3Vdb@57:
	mov	ebx, DWORD PTR _pTos$[esp+672]
$no_mem$90290:
; Line 38537
	mov	esi, DWORD PTR _p$GSCopy$[esp+672]
	push	0
	lea	eax, DWORD PTR [esi+556]
	push	OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
	push	eax
	call	_sqlite3SetString
; Line 38538
	mov	DWORD PTR _rc$[esp+684], 7
	mov	edx, DWORD PTR _rc$[esp+684]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+124], edx
	mov	edi, 1
	jmp	SHORT $LN5@sqlite3Vdb@57
$LN1354@sqlite3Vdb@57:
; Line 38532
	mov	ebx, DWORD PTR _pTos$[esp+672]
$LN1373@sqlite3Vdb@57:
	mov	esi, DWORD PTR _p$GSCopy$[esp+672]
$abort_due_to_misuse$90306:
; Line 38544
	mov	DWORD PTR _rc$[esp+672], 21		; 00000015H
	jmp	$abort_due_to_error$90538
$LN6@sqlite3Vdb@57:
; Line 38520
	mov	edi, 101				; 00000065H
$LN5@sqlite3Vdb@57:
; Line 38522
	mov	eax, esi
	call	_sqlite3VdbeHalt
; Line 38570
	mov	ecx, DWORD PTR __$ArrayPad$[esp+672]
	mov	eax, edi
	pop	edi
	mov	DWORD PTR [esi+40], ebx
	pop	esi
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1454@sqlite3Vdb@57:
	DD	$LN85@sqlite3Vdb@57
	DD	$LN23@sqlite3Vdb@57
	DD	$LN426@sqlite3Vdb@57
	DD	$LN337@sqlite3Vdb@57
	DD	$LN80@sqlite3Vdb@57
	DD	$LN253@sqlite3Vdb@57
	DD	$LN296@sqlite3Vdb@57
	DD	$LN196@sqlite3Vdb@57
	DD	$LN327@sqlite3Vdb@57
	DD	$LN444@sqlite3Vdb@57
	DD	$LN611@sqlite3Vdb@57
	DD	$LN34@sqlite3Vdb@57
	DD	$LN647@sqlite3Vdb@57
	DD	$LN327@sqlite3Vdb@57
	DD	$LN57@sqlite3Vdb@57
	DD	$LN449@sqlite3Vdb@57
	DD	$LN352@sqlite3Vdb@57
	DD	$LN106@sqlite3Vdb@57
	DD	$LN163@sqlite3Vdb@57
	DD	$LN541@sqlite3Vdb@57
	DD	$LN647@sqlite3Vdb@57
	DD	$LN634@sqlite3Vdb@57
	DD	$LN252@sqlite3Vdb@57
	DD	$LN78@sqlite3Vdb@57
	DD	$LN613@sqlite3Vdb@57
	DD	$LN626@sqlite3Vdb@57
	DD	$LN501@sqlite3Vdb@57
	DD	$LN115@sqlite3Vdb@57
	DD	$LN48@sqlite3Vdb@57
	DD	$LN298@sqlite3Vdb@57
	DD	$LN120@sqlite3Vdb@57
	DD	$LN267@sqlite3Vdb@57
	DD	$LN276@sqlite3Vdb@57
	DD	$LN629@sqlite3Vdb@57
	DD	$LN508@sqlite3Vdb@57
	DD	$LN633@sqlite3Vdb@57
	DD	$LN177@sqlite3Vdb@57
	DD	$LN137@sqlite3Vdb@57
	DD	$LN517@sqlite3Vdb@57
	DD	$LN355@sqlite3Vdb@57
	DD	$LN196@sqlite3Vdb@57
	DD	$LN83@sqlite3Vdb@57
	DD	$LN599@sqlite3Vdb@57
	DD	$LN257@sqlite3Vdb@57
	DD	$LN81@sqlite3Vdb@57
	DD	$LN635@sqlite3Vdb@57
	DD	$LN630@sqlite3Vdb@57
	DD	$LN73@sqlite3Vdb@57
	DD	$LN158@sqlite3Vdb@57
	DD	$LN29@sqlite3Vdb@57
	DD	$LN120@sqlite3Vdb@57
	DD	$LN167@sqlite3Vdb@57
	DD	$LN59@sqlite3Vdb@57
	DD	$LN142@sqlite3Vdb@57
	DD	$LN384@sqlite3Vdb@57
	DD	$LN198@sqlite3Vdb@57
	DD	$LN95@sqlite3Vdb@57
	DD	$LN598@sqlite3Vdb@57
	DD	$LN90@sqlite3Vdb@57
	DD	$LN469@sqlite3Vdb@57
	DD	$LN469@sqlite3Vdb@57
	DD	$LN107@sqlite3Vdb@57
	DD	$LN108@sqlite3Vdb@57
	DD	$LN137@sqlite3Vdb@57
	DD	$LN438@sqlite3Vdb@57
	DD	$LN434@sqlite3Vdb@57
	DD	$LN488@sqlite3Vdb@57
	DD	$LN488@sqlite3Vdb@57
	DD	$LN488@sqlite3Vdb@57
	DD	$LN488@sqlite3Vdb@57
	DD	$LN488@sqlite3Vdb@57
	DD	$LN488@sqlite3Vdb@57
	DD	$LN146@sqlite3Vdb@57
	DD	$LN528@sqlite3Vdb@57
	DD	$LN528@sqlite3Vdb@57
	DD	$LN528@sqlite3Vdb@57
	DD	$LN528@sqlite3Vdb@57
	DD	$LN575@sqlite3Vdb@57
	DD	$LN575@sqlite3Vdb@57
	DD	$LN575@sqlite3Vdb@57
	DD	$LN575@sqlite3Vdb@57
	DD	$LN575@sqlite3Vdb@57
	DD	$LN590@sqlite3Vdb@57
	DD	$LN62@sqlite3Vdb@57
	DD	$LN460@sqlite3Vdb@57
	DD	$LN296@sqlite3Vdb@57
	DD	$LN447@sqlite3Vdb@57
	DD	$LN627@sqlite3Vdb@57
	DD	$LN444@sqlite3Vdb@57
	DD	$LN109@sqlite3Vdb@57
	DD	$LN384@sqlite3Vdb@57
	DD	$LN207@sqlite3Vdb@57
	DD	$LN65@sqlite3Vdb@57
	DD	$LN610@sqlite3Vdb@57
	DD	$LN637@sqlite3Vdb@57
	DD	$LN54@sqlite3Vdb@57
	DD	$LN94@sqlite3Vdb@57
	DD	$LN121@sqlite3Vdb@57
	DD	$LN137@sqlite3Vdb@57
	DD	$LN296@sqlite3Vdb@57
	DD	$LN332@sqlite3Vdb@57
	DD	$LN71@sqlite3Vdb@57
	DD	$LN607@sqlite3Vdb@57
	DD	$LN427@sqlite3Vdb@57
	DD	$LN460@sqlite3Vdb@57
	DD	$LN342@sqlite3Vdb@57
	DD	$LN42@sqlite3Vdb@57
	DD	$LN49@sqlite3Vdb@57
	DD	$LN87@sqlite3Vdb@57
	DD	$LN158@sqlite3Vdb@57
	DD	$LN150@sqlite3Vdb@57
	DD	$LN276@sqlite3Vdb@57
	DD	$LN223@sqlite3Vdb@57
	DD	$LN129@sqlite3Vdb@57
	DD	$LN338@sqlite3Vdb@57
	DD	$LN516@sqlite3Vdb@57
	DD	$LN110@sqlite3Vdb@57
	DD	$LN647@sqlite3Vdb@57
	DD	$LN76@sqlite3Vdb@57
	DD	$LN300@sqlite3Vdb@57
	DD	$LN307@sqlite3Vdb@57
	DD	$LN621@sqlite3Vdb@57
	DD	$LN616@sqlite3Vdb@57
	DD	$LN86@sqlite3Vdb@57
	DD	$LN628@sqlite3Vdb@57
	DD	$LN620@sqlite3Vdb@57
	DD	$LN163@sqlite3Vdb@57
	DD	$LN296@sqlite3Vdb@57
	DD	$LN51@sqlite3Vdb@57
	DD	$LN16@sqlite3Vdb@57
	DD	$LN50@sqlite3Vdb@57
	DD	$LN72@sqlite3Vdb@57
	DD	$LN74@sqlite3Vdb@57
	DD	$LN276@sqlite3Vdb@57
	DD	$LN168@sqlite3Vdb@57
	DD	$LN647@sqlite3Vdb@57
	DD	$LN647@sqlite3Vdb@57
	DD	$LN499@sqlite3Vdb@57
	DD	$LN497@sqlite3Vdb@57
	DD	$LN494@sqlite3Vdb@57
	DD	$LN492@sqlite3Vdb@57
	DD	$LN490@sqlite3Vdb@57
$LN1455@sqlite3Vdb@57:
	DD	$LN567@sqlite3Vdb@57
	DD	$LN566@sqlite3Vdb@57
	DD	$LN565@sqlite3Vdb@57
	DD	$LN564@sqlite3Vdb@57
$LN1456@sqlite3Vdb@57:
	DD	$LN555@sqlite3Vdb@57
	DD	$LN554@sqlite3Vdb@57
	DD	$LN553@sqlite3Vdb@57
	DD	$LN552@sqlite3Vdb@57
$LN1457@sqlite3Vdb@57:
	DD	$LN524@sqlite3Vdb@57
	DD	$LN523@sqlite3Vdb@57
	DD	$LN522@sqlite3Vdb@57
	DD	$LN521@sqlite3Vdb@57
$LN1458@sqlite3Vdb@57:
	DD	$LN477@sqlite3Vdb@57
	DD	$LN478@sqlite3Vdb@57
	DD	$LN474@sqlite3Vdb@57
	DD	$LN475@sqlite3Vdb@57
	DD	$LN476@sqlite3Vdb@57
_sqlite3VdbeExec ENDP
_TEXT	ENDS
PUBLIC	__real@41cdcd6500000000
;	COMDAT __real@41cdcd6500000000
CONST	SEGMENT
__real@41cdcd6500000000 DQ 041cdcd6500000000r	; 1e+009
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3Step
_TEXT	SEGMENT
tv345 = -8						; size = 4
tv327 = -8						; size = 4
_rNow$89793 = -8					; size = 8
_rNow$89787 = -8					; size = 8
_sqlite3Step PROC					; COMDAT
; _p$ = edi
; Line 32653
	sub	esp, 8
; Line 32660
	test	edi, edi
	je	$LN16@sqlite3Ste
	cmp	DWORD PTR [edi+76], -1108210269		; bdf20da3H
	jne	$LN16@sqlite3Ste
; Line 32663
	cmp	BYTE PTR [edi+563], 0
	je	SHORT $LN15@sqlite3Ste
; Line 32664
	mov	eax, 4
; Line 32764
	add	esp, 8
	ret	0
$LN15@sqlite3Ste:
; Line 32666
	cmp	DWORD PTR [edi+120], 0
	push	ebp
	push	esi
	jg	SHORT $LN14@sqlite3Ste
	cmp	BYTE PTR [edi+564], 0
	je	SHORT $LN14@sqlite3Ste
; Line 32667
	cmp	DWORD PTR [edi+124], 0
	jne	SHORT $LN13@sqlite3Ste
; Line 32668
	mov	DWORD PTR [edi+124], 17			; 00000011H
$LN13@sqlite3Ste:
; Line 32670
	mov	ebp, 1
; Line 32671
	jmp	$end_of_step$89776
$LN14@sqlite3Ste:
; Line 32673
	mov	esi, DWORD PTR [edi]
; Line 32674
	mov	eax, esi
	call	_sqlite3SafetyOn
	test	eax, eax
; Line 32676
	jne	SHORT $LN24@sqlite3Ste
; Line 32678
	cmp	DWORD PTR [edi+120], eax
	jge	$LN11@sqlite3Ste
; Line 32683
	cmp	DWORD PTR [esi+84], eax
	jne	SHORT $LN10@sqlite3Ste
; Line 32684
	mov	DWORD PTR [esi+152], eax
$LN10@sqlite3Ste:
; Line 32690
	cmp	DWORD PTR [esi+88], 0
	je	SHORT $LN8@sqlite3Ste
	cmp	BYTE PTR [esi+68], 0
	jne	SHORT $LN8@sqlite3Ste
; Line 32695
	mov	eax, esi
	call	_sqlite3SafetyOff
; Line 32696
	mov	eax, DWORD PTR [edi+12]
	mov	ecx, DWORD PTR [edi+20]
	lea	eax, DWORD PTR [eax+eax*4]
	mov	edx, DWORD PTR [ecx+eax*4-8]
	mov	eax, DWORD PTR [esi+92]
	mov	ecx, DWORD PTR [esi+88]
	push	edx
	push	eax
	call	ecx
	add	esp, 8
; Line 32697
	mov	eax, esi
	call	_sqlite3SafetyOn
	test	eax, eax
	je	SHORT $LN8@sqlite3Ste
$LN24@sqlite3Ste:
; Line 32698
	mov	eax, 21					; 00000015H
	pop	esi
	mov	DWORD PTR [edi+124], eax
	pop	ebp
; Line 32764
	add	esp, 8
	ret	0
$LN8@sqlite3Ste:
; Line 32702
	cmp	DWORD PTR [esi+96], 0
	je	SHORT $LN7@sqlite3Ste
	cmp	BYTE PTR [esi+68], 0
	jne	SHORT $LN7@sqlite3Ste
; Line 32704
	lea	edx, DWORD PTR _rNow$89787[esp+16]
	push	edx
	call	_sqlite3WinCurrentTime
; Line 32705
	fld	QWORD PTR _rNow$89787[esp+20]
	add	esp, 4
	fld	ST(0)
	call	__ftol2_sse
	mov	DWORD PTR tv345[esp+16], eax
	fild	DWORD PTR tv345[esp+16]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR __real@40ac200000000000
	fmul	QWORD PTR __real@4038000000000000
	fmul	QWORD PTR __real@41cdcd6500000000
	call	__ftol2
	mov	DWORD PTR [edi+576], eax
	mov	DWORD PTR [edi+580], edx
$LN7@sqlite3Ste:
; Line 32718
	add	DWORD PTR [esi+84], 1
; Line 32719
	mov	DWORD PTR [edi+120], 0
$LN11@sqlite3Ste:
; Line 32722
	cmp	BYTE PTR [edi+561], 0
	je	SHORT $LN6@sqlite3Ste
; Line 32723
	push	edi
	call	_sqlite3VdbeList
	add	esp, 4
; Line 32724
	jmp	SHORT $LN23@sqlite3Ste
$LN6@sqlite3Ste:
; Line 32727
	mov	ecx, edi
	call	_sqlite3VdbeExec
$LN23@sqlite3Ste:
	mov	ebp, eax
; Line 32730
	mov	eax, esi
	call	_sqlite3SafetyOff
	test	eax, eax
	je	SHORT $LN4@sqlite3Ste
; Line 32731
	mov	ebp, 21					; 00000015H
; Line 32737
	jmp	SHORT $LN20@sqlite3Ste
$LN4@sqlite3Ste:
	cmp	ebp, 100				; 00000064H
	je	SHORT $LN3@sqlite3Ste
$LN20@sqlite3Ste:
	cmp	DWORD PTR [esi+96], 0
	je	SHORT $LN3@sqlite3Ste
	cmp	BYTE PTR [esi+68], 0
	jne	SHORT $LN3@sqlite3Ste
; Line 32741
	lea	eax, DWORD PTR _rNow$89793[esp+16]
	push	eax
	call	_sqlite3WinCurrentTime
; Line 32747
	fld	QWORD PTR _rNow$89793[esp+20]
	fld	ST(0)
	call	__ftol2_sse
	mov	DWORD PTR tv327[esp+20], eax
	fild	DWORD PTR tv327[esp+20]
	fsubp	ST(1), ST(0)
	fmul	QWORD PTR __real@40ac200000000000
	fmul	QWORD PTR __real@4038000000000000
	fmul	QWORD PTR __real@41cdcd6500000000
	fild	QWORD PTR [edi+576]
	fsubp	ST(1), ST(0)
	call	__ftol2
	push	edx
	mov	edx, DWORD PTR [edi+20]
	push	eax
	mov	eax, DWORD PTR [edi+12]
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edx+ecx*4-8]
	mov	ecx, DWORD PTR [esi+100]
	mov	edx, DWORD PTR [esi+96]
	push	eax
	push	ecx
	call	edx
	add	esp, 20					; 00000014H
$LN3@sqlite3Ste:
; Line 32751
	mov	eax, DWORD PTR [edi]
	push	0
	push	ebp
	call	_sqlite3Error
; Line 32752
	mov	ecx, DWORD PTR [edi+124]
	mov	esi, DWORD PTR [edi]
	add	esp, 8
	call	_sqlite3ApiExit
	mov	DWORD PTR [edi+124], eax
$end_of_step$89776:
; Line 32755
	cmp	DWORD PTR [edi+588], 0
	je	SHORT $LN2@sqlite3Ste
	mov	eax, ebp
	and	eax, 255				; 000000ffH
	cmp	eax, 100				; 00000064H
	jge	SHORT $LN2@sqlite3Ste
; Line 32758
	mov	eax, DWORD PTR [edi+124]
	pop	esi
	pop	ebp
; Line 32764
	add	esp, 8
	ret	0
$LN2@sqlite3Ste:
	pop	esi
; Line 32762
	mov	eax, ebp
	pop	ebp
; Line 32764
	add	esp, 8
	ret	0
$LN16@sqlite3Ste:
; Line 32661
	mov	eax, 21					; 00000015H
; Line 32764
	add	esp, 8
	ret	0
_sqlite3Step ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_step
_TEXT	SEGMENT
_cnt$ = -4						; size = 4
_pNew$149239 = 8					; size = 4
_pStmt$ = 8						; size = 4
_sqlite3_step PROC					; COMDAT
; Line 32776
	push	ecx
	push	ebx
	push	ebp
; Line 32782
	mov	ebp, DWORD PTR _pStmt$[esp+8]
	push	esi
	push	edi
	xor	ebx, ebx
	mov	edi, ebp
	mov	DWORD PTR _cnt$[esp+20], ebx
	call	_sqlite3Step
	mov	esi, eax
	cmp	esi, 17					; 00000011H
	jne	$LN29@sqlite3_st
$LL2@sqlite3_st:
	mov	eax, DWORD PTR _cnt$[esp+20]
	mov	ecx, eax
	add	eax, 1
	cmp	ecx, 5
	mov	DWORD PTR _cnt$[esp+20], eax
	jge	$LN34@sqlite3_st
	mov	eax, DWORD PTR [ebp+588]
	cmp	eax, ebx
	je	$LN34@sqlite3_st
	mov	ecx, DWORD PTR [ebp]
	push	ebx
	lea	edx, DWORD PTR _pNew$149239[esp+20]
	push	edx
	push	ebx
	push	-1
	push	eax
	push	ecx
	call	_sqlite3Prepare
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN34@sqlite3_st
	mov	esi, DWORD PTR _pNew$149239[esp+16]
	mov	eax, ebp
	mov	edx, esi
	call	_sqlite3VdbeSwap
	push	ebp
	push	esi
	call	_sqlite3_transfer_bindings
	mov	DWORD PTR [esi+124], ebx
	mov	eax, DWORD PTR [esi+76]
	add	esp, 8
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN18@sqlite3_st
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN18@sqlite3_st
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN16@sqlite3_st
	jmp	SHORT $LN20@sqlite3_st
$LN18@sqlite3_st:
	mov	edi, esi
	call	_sqlite3VdbeReset
$LN16@sqlite3_st:
	call	_sqlite3VdbeDelete
$LN20@sqlite3_st:
; Line 32783
	mov	edi, ebp
	call	_sqlite3VdbeReset
	push	ebx
	push	ebx
	push	ebx
	push	-1
	mov	eax, ebp
	call	_sqlite3VdbeMakeReady
	add	esp, 16					; 00000010H
; Line 32784
	mov	BYTE PTR [ebp+564], bl
	call	_sqlite3Step
	mov	esi, eax
	cmp	esi, 17					; 00000011H
	je	$LL2@sqlite3_st
$LN34@sqlite3_st:
; Line 32786
	mov	eax, esi
$LN29@sqlite3_st:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 32787
	pop	ecx
	ret	0
_sqlite3_step ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@PGLAJEIK@no?5such?5rowid?3?5?$CFlld?$AA@ ; `string'
PUBLIC	??_C@_0BN@OFFACDFM@cannot?5open?5value?5of?5type?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CH@HDJFDCNH@cannot?5open?5indexed?5column?5for?5w@ ; `string'
PUBLIC	??_C@_0BF@IFOHJMAC@no?5such?5column?3?5?$CC?$CFs?$CC?$AA@ ; `string'
PUBLIC	_ppBlob$GSCopy$
PUBLIC	_zColumn$GSCopy$
PUBLIC	_zTable$GSCopy$
PUBLIC	_db$GSCopy$
PUBLIC	_zDb$GSCopy$
PUBLIC	__$ArrayPad$
PUBLIC	_sqlite3_blob_open
;	COMDAT ??_C@_0BE@PGLAJEIK@no?5such?5rowid?3?5?$CFlld?$AA@
CONST	SEGMENT
??_C@_0BE@PGLAJEIK@no?5such?5rowid?3?5?$CFlld?$AA@ DB 'no such rowid: %ll'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OFFACDFM@cannot?5open?5value?5of?5type?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BN@OFFACDFM@cannot?5open?5value?5of?5type?5?$CFs?$AA@ DB 'cannot o'
	DB	'pen value of type %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HDJFDCNH@cannot?5open?5indexed?5column?5for?5w@
CONST	SEGMENT
??_C@_0CH@HDJFDCNH@cannot?5open?5indexed?5column?5for?5w@ DB 'cannot open'
	DB	' indexed column for writing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IFOHJMAC@no?5such?5column?3?5?$CC?$CFs?$CC?$AA@
CONST	SEGMENT
??_C@_0BF@IFOHJMAC@no?5such?5column?3?5?$CC?$CFs?$CC?$AA@ DB 'no such col'
	DB	'umn: "%s"', 00H				; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3_blob_open
_TEXT	SEGMENT
_db$GSCopy$ = -364					; size = 4
_iCol$ = -360						; size = 4
_nAttempt$ = -356					; size = 4
_zColumn$GSCopy$ = -352					; size = 4
_pTab$91584 = -348					; size = 4
_zTable$GSCopy$ = -344					; size = 4
_ppBlob$GSCopy$ = -340					; size = 4
_zDb$GSCopy$ = -336					; size = 4
_sParse$91583 = -332					; size = 200
_zErr$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
_db$ = 8						; size = 4
_zDb$ = 12						; size = 4
_zTable$ = 16						; size = 4
_zColumn$ = 20						; size = 4
_iRow$ = 24						; size = 8
_flags$ = 32						; size = 4
_ppBlob$ = 36						; size = 4
_sqlite3_blob_open PROC					; COMDAT
; Line 38617
	sub	esp, 364				; 0000016cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, esp
	mov	DWORD PTR __$ArrayPad$[esp+364], eax
; Line 38782
	mov	eax, DWORD PTR _zDb$[esp+360]
	mov	ecx, DWORD PTR _zTable$[esp+360]
; Line 38806
	mov	edx, DWORD PTR _zColumn$[esp+360]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _db$[esp+372]
	push	edi
	mov	DWORD PTR _zDb$GSCopy$[esp+380], eax
	mov	eax, DWORD PTR _ppBlob$[esp+376]
	xor	edi, edi
	mov	DWORD PTR _db$GSCopy$[esp+380], esi
	mov	DWORD PTR _zTable$GSCopy$[esp+380], ecx
	mov	DWORD PTR _zColumn$GSCopy$[esp+380], edx
	mov	DWORD PTR _ppBlob$GSCopy$[esp+380], eax
	mov	DWORD PTR _nAttempt$[esp+380], edi
	mov	BYTE PTR _zErr$[esp+380], 0
	npad	3
$LL33@sqlite3_bl@2:
	push	200					; 000000c8H
	lea	ecx, DWORD PTR _sParse$91583[esp+384]
	push	0
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	cmp	DWORD PTR [esi+48], -1607883113		; a029a697H
	mov	DWORD PTR _sParse$91583[esp+380], esi
	jne	$LN42@sqlite3_bl@2
	mov	eax, DWORD PTR _zTable$GSCopy$[esp+380]
	mov	DWORD PTR [esi+48], -264537850		; f03b7906H
	mov	esi, DWORD PTR _zDb$GSCopy$[esp+380]
	lea	ecx, DWORD PTR _sParse$91583[esp+380]
	call	_sqlite3LocateTable
	mov	ebx, eax
	test	ebx, ebx
	mov	DWORD PTR _pTab$91584[esp+380], ebx
	je	$LN211@sqlite3_bl@2
	mov	ebp, DWORD PTR [ebx+4]
	test	ebp, ebp
	mov	DWORD PTR _iCol$[esp+380], 0
	jle	SHORT $LN207@sqlite3_bl@2
; Line 38685
	mov	esi, DWORD PTR [ebx+8]
	npad	3
$LL27@sqlite3_bl@2:
; Line 38686
	mov	ecx, DWORD PTR [esi]
	mov	al, BYTE PTR [ecx]
	test	al, al
	mov	edx, DWORD PTR _zColumn$GSCopy$[esp+380]
	je	SHORT $LN231@sqlite3_bl@2
	npad	4
$LL55@sqlite3_bl@2:
	movzx	ebx, BYTE PTR [edx]
	movzx	eax, al
	mov	al, BYTE PTR _sqlite3UpperToLower[eax]
	cmp	al, BYTE PTR _sqlite3UpperToLower[ebx]
	jne	SHORT $LN230@sqlite3_bl@2
	mov	al, BYTE PTR [ecx+1]
	add	ecx, 1
	add	edx, 1
	test	al, al
	jne	SHORT $LL55@sqlite3_bl@2
$LN230@sqlite3_bl@2:
	mov	ebx, DWORD PTR _pTab$91584[esp+380]
$LN231@sqlite3_bl@2:
	movzx	edx, BYTE PTR [edx]
	movzx	ecx, BYTE PTR [ecx]
	movzx	eax, BYTE PTR _sqlite3UpperToLower[edx]
	movzx	edx, BYTE PTR _sqlite3UpperToLower[ecx]
	sub	edx, eax
	je	SHORT $LN207@sqlite3_bl@2
	mov	eax, DWORD PTR _iCol$[esp+380]
	add	eax, 1
	add	esi, 20					; 00000014H
	cmp	eax, ebp
	mov	DWORD PTR _iCol$[esp+380], eax
	jl	SHORT $LL27@sqlite3_bl@2
$LN207@sqlite3_bl@2:
; Line 38690
	cmp	DWORD PTR _iCol$[esp+380], ebp
	je	$LN212@sqlite3_bl@2
; Line 38701
	cmp	DWORD PTR _flags$[esp+376], 0
	je	SHORT $LN19@sqlite3_bl@2
; Line 38703
	mov	esi, DWORD PTR [ebx+16]
	test	esi, esi
	je	SHORT $LN19@sqlite3_bl@2
	mov	ebp, DWORD PTR _iCol$[esp+380]
	npad	2
$LL21@sqlite3_bl@2:
	mov	edx, DWORD PTR [esi+4]
; Line 38705
	xor	eax, eax
	test	edx, edx
	jle	SHORT $LN20@sqlite3_bl@2
	mov	ecx, DWORD PTR [esi+8]
	npad	4
$LL18@sqlite3_bl@2:
; Line 38706
	cmp	DWORD PTR [ecx], ebp
	je	$LN208@sqlite3_bl@2
	add	eax, 1
	add	ecx, 4
	cmp	eax, edx
	jl	SHORT $LL18@sqlite3_bl@2
$LN20@sqlite3_bl@2:
; Line 38703
	mov	esi, DWORD PTR [esi+32]
	test	esi, esi
	jne	SHORT $LL21@sqlite3_bl@2
$LN19@sqlite3_bl@2:
; Line 38717
	mov	ebp, DWORD PTR _db$GSCopy$[esp+380]
	mov	edi, ebp
	call	_sqlite3VdbeCreate
	mov	edi, eax
; Line 38718
	test	edi, edi
	je	$LN13@sqlite3_bl@2
; Line 38719
	mov	ecx, DWORD PTR [ebx+76]
	test	ecx, ecx
	mov	esi, -1000000				; fff0bdc0H
	je	SHORT $LN232@sqlite3_bl@2
	xor	esi, esi
	cmp	DWORD PTR [ebp], esi
	jle	SHORT $LN232@sqlite3_bl@2
	mov	eax, DWORD PTR [ebp+4]
	add	eax, 20					; 00000014H
$LL69@sqlite3_bl@2:
	cmp	DWORD PTR [eax], ecx
	je	SHORT $LN232@sqlite3_bl@2
	add	esi, 1
	add	eax, 24					; 00000018H
	cmp	esi, DWORD PTR [ebp]
	jl	SHORT $LL69@sqlite3_bl@2
$LN232@sqlite3_bl@2:
; Line 38720
	push	OFFSET ?openBlob@?1??sqlite3_blob_open@@9@9
	push	12					; 0000000cH
	push	edi
	call	_sqlite3VdbeAddOpList
	add	esp, 12					; 0000000cH
; Line 38723
	cmp	DWORD PTR [edi+12], 0
	jle	SHORT $LN233@sqlite3_bl@2
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN73@sqlite3_bl@2
	mov	DWORD PTR [eax+4], esi
$LN73@sqlite3_bl@2:
; Line 38724
	cmp	DWORD PTR [edi+12], 0
	jle	SHORT $LN233@sqlite3_bl@2
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN233@sqlite3_bl@2
	mov	ebp, DWORD PTR _flags$[esp+376]
	xor	ecx, ecx
	test	ebp, ebp
	setne	cl
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN76@sqlite3_bl@2
$LN233@sqlite3_bl@2:
	mov	ebp, DWORD PTR _flags$[esp+376]
$LN76@sqlite3_bl@2:
; Line 38727
	mov	ecx, 1
	cmp	DWORD PTR [edi+12], ecx
	jle	SHORT $LN243@sqlite3_bl@2
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN241@sqlite3_bl@2
	mov	DWORD PTR [eax+24], esi
$LN241@sqlite3_bl@2:
; Line 38728
	cmp	DWORD PTR [edi+12], ecx
	jle	SHORT $LN243@sqlite3_bl@2
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN243@sqlite3_bl@2
	mov	edx, DWORD PTR [ebx+76]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+28], ecx
$LN243@sqlite3_bl@2:
; Line 38731
	cmp	DWORD PTR [edi+12], 2
	jle	SHORT $LN246@sqlite3_bl@2
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN246@sqlite3_bl@2
	mov	DWORD PTR [eax+44], esi
$LN246@sqlite3_bl@2:
; Line 38736
	mov	ecx, DWORD PTR [edi+20]
	test	ecx, ecx
	je	SHORT $LN219@sqlite3_bl@2
	mov	eax, ebp
	neg	eax
	sbb	eax, eax
	add	eax, 4
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx+edx*4+16]
	lea	esi, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [esi+12]
	call	_freeP3
	xor	eax, eax
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	mov	BYTE PTR [esi], 21			; 00000015H
$LN219@sqlite3_bl@2:
; Line 38737
	xor	eax, eax
	test	ebp, ebp
	setne	al
	add	eax, 3
	js	SHORT $LN93@sqlite3_bl@2
	cmp	DWORD PTR [edi+12], eax
	jle	SHORT $LN93@sqlite3_bl@2
	mov	ecx, DWORD PTR [edi+20]
	test	ecx, ecx
	je	SHORT $LN93@sqlite3_bl@2
	mov	edx, DWORD PTR [ebx+20]
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
$LN93@sqlite3_bl@2:
; Line 38746
	cmp	DWORD PTR [edi+12], 5
	jle	SHORT $LN96@sqlite3_bl@2
	mov	eax, DWORD PTR [edi+20]
	test	eax, eax
	je	SHORT $LN96@sqlite3_bl@2
	mov	ecx, DWORD PTR [ebx+4]
	add	ecx, 1
	mov	DWORD PTR [eax+108], ecx
$LN96@sqlite3_bl@2:
; Line 38747
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN12@sqlite3_bl@2
	cmp	DWORD PTR _inMutex, 0
	jg	SHORT $LN242@sqlite3_bl@2
$LN12@sqlite3_bl@2:
; Line 38748
	push	0
	push	1
	push	0
	push	1
	mov	eax, edi
	call	_sqlite3VdbeMakeReady
	add	esp, 16					; 00000010H
$LN242@sqlite3_bl@2:
	mov	ebp, DWORD PTR _db$GSCopy$[esp+380]
$LN13@sqlite3_bl@2:
; Line 38752
	cmp	DWORD PTR [ebp+48], -264537850		; f03b7906H
	jne	$LN102@sqlite3_bl@2
	mov	ebx, DWORD PTR _db$GSCopy$[esp+380]
	xor	ebp, ebp
	mov	DWORD PTR [ebx+48], -1607883113		; a029a697H
; Line 38753
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN11@sqlite3_bl@2
	cmp	DWORD PTR _inMutex, ebp
	jg	$blob_open_out$91590
$LN11@sqlite3_bl@2:
; Line 38757
	test	edi, edi
	je	SHORT $LN234@sqlite3_bl@2
	cmp	DWORD PTR [edi+76], -1108210269		; bdf20da3H
	jne	$LN113@sqlite3_bl@2
	cmp	DWORD PTR [edi+120], 0
	jge	$LN113@sqlite3_bl@2
	cmp	DWORD PTR [edi+60], 1
	jl	$LN110@sqlite3_bl@2
	mov	esi, DWORD PTR [edi+64]
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	WORD PTR [esi+24], 1
	mov	eax, DWORD PTR [edi]
	push	0
	push	0
	call	_sqlite3Error
	mov	esi, DWORD PTR [edi+64]
	add	esp, 12					; 0000000cH
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	edx, DWORD PTR _iRow$[esp+380]
	mov	eax, DWORD PTR _iRow$[esp+384]
	add	esp, 4
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [esi+4], eax
	mov	WORD PTR [esi+24], 4
	mov	BYTE PTR [esi+26], 1
$LN234@sqlite3_bl@2:
; Line 38758
	push	edi
	call	_sqlite3_step
	mov	ebp, eax
	add	esp, 4
; Line 38759
	cmp	ebp, 100				; 00000064H
	je	$LN32@sqlite3_bl@2
; Line 38760
	add	DWORD PTR _nAttempt$[esp+380], 1
; Line 38761
	xor	ebp, ebp
	test	edi, edi
	je	SHORT $LN127@sqlite3_bl@2
	mov	eax, DWORD PTR [edi+76]
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN235@sqlite3_bl@2
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN235@sqlite3_bl@2
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN123@sqlite3_bl@2
	mov	ebp, 21					; 00000015H
	jmp	SHORT $LN127@sqlite3_bl@2
; Line 38757
$LN110@sqlite3_bl@2:
	mov	eax, DWORD PTR [edi]
	push	0
	push	25					; 00000019H
	call	_sqlite3Error
	add	esp, 8
	jmp	SHORT $LN234@sqlite3_bl@2
$LN113@sqlite3_bl@2:
	mov	eax, DWORD PTR [edi]
	push	0
	push	21					; 00000015H
	call	_sqlite3Error
	add	esp, 8
	jmp	SHORT $LN234@sqlite3_bl@2
$LN235@sqlite3_bl@2:
; Line 38761
	call	_sqlite3VdbeReset
	mov	ebp, eax
$LN123@sqlite3_bl@2:
	mov	esi, edi
	call	_sqlite3VdbeDelete
$LN127@sqlite3_bl@2:
; Line 38762
	mov	eax, DWORD PTR [ebx+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN135@sqlite3_bl@2
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN135@sqlite3_bl@2
	cmp	eax, -264537850				; f03b7906H
	jne	SHORT $LN244@sqlite3_bl@2
$LN135@sqlite3_bl@2:
	cmp	DWORD PTR [ebx+12], 21			; 00000015H
	je	SHORT $LN244@sqlite3_bl@2
	mov	ecx, DWORD PTR [ebx+140]
	mov	al, 1
	call	_sqlite3ValueText
	test	eax, eax
	jne	SHORT $LN133@sqlite3_bl@2
	mov	eax, DWORD PTR [ebx+12]
	jmp	SHORT $LN249@sqlite3_bl@2
$LN244@sqlite3_bl@2:
	mov	eax, 21					; 00000015H
$LN249@sqlite3_bl@2:
	call	_sqlite3ErrStr
$LN133@sqlite3_bl@2:
	push	eax
	lea	ecx, DWORD PTR _zErr$[esp+384]
	push	ecx
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 12					; 0000000cH
; Line 38763
	xor	edi, edi
$LN32@sqlite3_bl@2:
; Line 38765
	cmp	DWORD PTR _nAttempt$[esp+380], 5
	jge	$LN8@sqlite3_bl@2
	cmp	ebp, 17					; 00000011H
	jne	$LN8@sqlite3_bl@2
	mov	esi, ebx
	jmp	$LL33@sqlite3_bl@2
; Line 38668
$LN42@sqlite3_bl@2:
	cmp	DWORD PTR [esi+48], -264537850		; f03b7906H
	jne	SHORT $LN245@sqlite3_bl@2
	mov	DWORD PTR [esi+48], -1254786768		; b5357930H
	mov	DWORD PTR [esi+152], 1
$LN245@sqlite3_bl@2:
; Line 38670
	mov	eax, 1
	jmp	$LN34@sqlite3_bl@2
; Line 38752
$LN102@sqlite3_bl@2:
	mov	eax, DWORD PTR _db$GSCopy$[esp+380]
	mov	ebp, 1
	mov	DWORD PTR [eax+48], -1254786768		; b5357930H
	mov	DWORD PTR [eax+152], ebp
; Line 38753
	jmp	$blob_open_out$91590
$LN211@sqlite3_bl@2:
; Line 38675
	mov	eax, DWORD PTR _sParse$91583[esp+388]
	test	eax, eax
	je	SHORT $LN48@sqlite3_bl@2
; Line 38676
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	lea	edx, DWORD PTR _zErr$[esp+388]
	push	edx
	push	128					; 00000080H
	call	_sqlite3_snprintf
; Line 38678
	mov	eax, DWORD PTR _sParse$91583[esp+404]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN48@sqlite3_bl@2
	push	eax
	call	_free
	add	esp, 4
$LN48@sqlite3_bl@2:
; Line 38680
	mov	eax, DWORD PTR _db$GSCopy$[esp+380]
	cmp	DWORD PTR [eax+48], -264537850		; f03b7906H
	mov	ebp, 1
	jne	SHORT $LN51@sqlite3_bl@2
	mov	DWORD PTR [eax+48], -1607883113		; a029a697H
	jmp	$blob_open_out$91590
$LN51@sqlite3_bl@2:
	mov	DWORD PTR [eax+48], -1254786768		; b5357930H
	mov	DWORD PTR [eax+152], ebp
; Line 38681
	jmp	$blob_open_out$91590
$LN212@sqlite3_bl@2:
; Line 38691
	mov	eax, DWORD PTR _zColumn$GSCopy$[esp+380]
	push	eax
	push	OFFSET ??_C@_0BF@IFOHJMAC@no?5such?5column?3?5?$CC?$CFs?$CC?$AA@
	lea	ecx, DWORD PTR _zErr$[esp+388]
	push	ecx
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
; Line 38693
	jmp	SHORT $LN48@sqlite3_bl@2
$LN208@sqlite3_bl@2:
; Line 38708
	push	OFFSET ??_C@_0CH@HDJFDCNH@cannot?5open?5indexed?5column?5for?5w@
	lea	edx, DWORD PTR _zErr$[esp+384]
	push	edx
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 12					; 0000000cH
; Line 38710
	jmp	SHORT $LN48@sqlite3_bl@2
$LN8@sqlite3_bl@2:
; Line 38767
	cmp	ebp, 100				; 00000064H
	jne	$LN7@sqlite3_bl@2
; Line 38773
	mov	eax, DWORD PTR [edi+56]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+112]
	mov	ebx, DWORD PTR _iCol$[esp+380]
	mov	esi, DWORD PTR [edx+ebx*4]
; Line 38775
	cmp	esi, 12					; 0000000cH
	jae	SHORT $LN6@sqlite3_bl@2
; Line 38778
	test	esi, esi
	jne	SHORT $LN38@sqlite3_bl@2
	mov	eax, OFFSET ??_C@_04MLLLIHIP@null?$AA@
	jmp	SHORT $LN37@sqlite3_bl@2
$LN38@sqlite3_bl@2:
	cmp	esi, 7
	mov	eax, OFFSET ??_C@_04DGGKDJMA@real?$AA@
	je	SHORT $LN37@sqlite3_bl@2
	mov	eax, OFFSET ??_C@_07LKHFMGFB@integer?$AA@
$LN37@sqlite3_bl@2:
	push	eax
	push	OFFSET ??_C@_0BN@OFFACDFM@cannot?5open?5value?5of?5type?5?$CFs?$AA@
	lea	eax, DWORD PTR _zErr$[esp+388]
	push	eax
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 16					; 00000010H
; Line 38780
	jmp	$LN250@sqlite3_bl@2
$LN6@sqlite3_bl@2:
; Line 38782
	xor	eax, eax
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN148@sqlite3_bl@2
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN240@sqlite3_bl@2
$LN148@sqlite3_bl@2:
	push	20					; 00000014H
	call	_malloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN226@sqlite3_bl@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, eax
	je	SHORT $LN239@sqlite3_bl@2
	cmp	DWORD PTR _inMutex, eax
	jg	SHORT $LN240@sqlite3_bl@2
$LN239@sqlite3_bl@2:
	mov	ecx, 1
	add	DWORD PTR _inMutex, ecx
	mov	DWORD PTR _sqlite3_mallocHasFailed, ecx
	jmp	SHORT $LN240@sqlite3_bl@2
$LN226@sqlite3_bl@2:
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
$LN240@sqlite3_bl@2:
; Line 38783
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN5@sqlite3_bl@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN5@sqlite3_bl@2
; Line 38784
	test	eax, eax
	je	SHORT $blob_open_out$91590
	push	eax
	call	_free
	add	esp, 4
; Line 38785
	jmp	SHORT $blob_open_out$91590
$LN5@sqlite3_bl@2:
; Line 38787
	mov	ecx, DWORD PTR _flags$[esp+376]
	mov	DWORD PTR [eax], ecx
; Line 38788
	mov	edx, DWORD PTR [edi+56]
	mov	ecx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], ecx
; Line 38789
	mov	BYTE PTR [ecx+84], 1
; Line 38790
	mov	DWORD PTR [eax+16], edi
; Line 38791
	mov	edx, DWORD PTR [edi+56]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [ecx+116]
	mov	ecx, DWORD PTR [edx+ebx*4]
; Line 38793
	mov	edx, DWORD PTR _ppBlob$GSCopy$[esp+380]
	mov	DWORD PTR [eax+8], ecx
	lea	ecx, DWORD PTR [esi-12]
	shr	ecx, 1
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [edx], eax
; Line 38794
	xor	ebp, ebp
	jmp	SHORT $blob_open_out$91590
$LN7@sqlite3_bl@2:
; Line 38795
	test	ebp, ebp
	jne	SHORT $blob_open_out$91590
; Line 38796
	mov	eax, DWORD PTR _iRow$[esp+380]
	mov	ecx, DWORD PTR _iRow$[esp+376]
	push	eax
	push	ecx
	push	OFFSET ??_C@_0BE@PGLAJEIK@no?5such?5rowid?3?5?$CFlld?$AA@
	lea	edx, DWORD PTR _zErr$[esp+392]
	push	edx
	push	128					; 00000080H
	call	_sqlite3_snprintf
	add	esp, 20					; 00000014H
$LN250@sqlite3_bl@2:
; Line 38797
	mov	ebp, 1
$blob_open_out$91590:
; Line 38802
	test	ebp, ebp
	mov	BYTE PTR _zErr$[esp+507], 0
	jne	SHORT $LN1@sqlite3_bl@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN189@sqlite3_bl@2
	cmp	DWORD PTR _inMutex, ebp
	jle	SHORT $LN189@sqlite3_bl@2
$LN1@sqlite3_bl@2:
; Line 38803
	test	edi, edi
	je	SHORT $LN189@sqlite3_bl@2
	mov	eax, DWORD PTR [edi+76]
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN187@sqlite3_bl@2
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN187@sqlite3_bl@2
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN185@sqlite3_bl@2
	jmp	SHORT $LN189@sqlite3_bl@2
$LN187@sqlite3_bl@2:
	call	_sqlite3VdbeReset
$LN185@sqlite3_bl@2:
	mov	esi, edi
	call	_sqlite3VdbeDelete
$LN189@sqlite3_bl@2:
; Line 38805
	mov	esi, DWORD PTR _db$GSCopy$[esp+380]
	mov	eax, ebp
	neg	eax
	sbb	eax, eax
	lea	ecx, DWORD PTR _zErr$[esp+380]
	and	eax, ecx
	push	eax
	push	ebp
	mov	eax, esi
	call	_sqlite3Error
	add	esp, 8
; Line 38806
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN191@sqlite3_bl@2
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN191@sqlite3_bl@2
	sub	DWORD PTR _inMutex, 1
	push	0
	push	7
	mov	eax, esi
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	ebp, 7
$LN191@sqlite3_bl@2:
	mov	eax, DWORD PTR [esi+16]
	and	eax, ebp
$LN34@sqlite3_bl@2:
; Line 38807
	mov	ecx, DWORD PTR __$ArrayPad$[esp+380]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	xor	ecx, esp
	call	@__security_check_cookie@4
	add	esp, 364				; 0000016cH
	ret	0
_sqlite3_blob_open ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_exec
_TEXT	SEGMENT
_azCols$ = -24						; size = 4
_pStmt$ = -20						; size = 4
_rc$ = -20						; size = 4
_nCallback$ = -16					; size = 4
_nRetry$ = -12						; size = 4
_azVals$96926 = -8					; size = 4
_zLeftover$ = -4					; size = 4
_db$ = 8						; size = 4
_zSql$ = 12						; size = 4
_xCallback$ = 16					; size = 4
_pArg$ = 20						; size = 4
_pzErrMsg$ = 24						; size = 4
_sqlite3_exec PROC					; COMDAT
; Line 50800
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
; Line 50801
	xor	ebp, ebp
	push	esi
	xor	ebx, ebx
; Line 50803
	xor	esi, esi
; Line 50809
	cmp	DWORD PTR _zSql$[esp+32], ebp
	mov	DWORD PTR _azCols$[esp+36], ebp
	mov	DWORD PTR _nRetry$[esp+36], ebp
	jne	SHORT $LN127@sqlite3_ex@2
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
; Line 50892
	add	esp, 24					; 00000018H
	ret	0
$LN127@sqlite3_ex@2:
	push	edi
$LL29@sqlite3_ex@2:
; Line 50810
	cmp	ebx, ebp
	je	SHORT $LN135@sqlite3_ex@2
$LN152@sqlite3_ex@2:
	cmp	ebx, 17					; 00000011H
	jne	$exec_out$96932
	mov	eax, DWORD PTR _nRetry$[esp+40]
	add	eax, 1
	cmp	eax, 2
	mov	DWORD PTR _nRetry$[esp+40], eax
	jge	$exec_out$96932
$LN135@sqlite3_ex@2:
	mov	eax, DWORD PTR _zSql$[esp+36]
	cmp	BYTE PTR [eax], 0
	je	$exec_out$96932
; Line 50815
	lea	ecx, DWORD PTR _zLeftover$[esp+40]
	push	ecx
	lea	edx, DWORD PTR _pStmt$[esp+44]
	push	edx
	push	ebp
	push	-1
	push	eax
	mov	eax, DWORD PTR _db$[esp+56]
	push	eax
	mov	DWORD PTR _azVals$96926[esp+64], ebp
	mov	DWORD PTR _pStmt$[esp+64], ebp
	call	_sqlite3Prepare
; Line 50820
	mov	esi, DWORD PTR _pStmt$[esp+64]
	mov	ebx, eax
	add	esp, 24					; 00000018H
	cmp	ebx, ebp
	jne	SHORT $LN152@sqlite3_ex@2
	cmp	esi, ebp
	jne	SHORT $LN25@sqlite3_ex@2
; Line 50822
	mov	ecx, DWORD PTR _zLeftover$[esp+40]
	mov	DWORD PTR _zSql$[esp+36], ecx
; Line 50823
	jmp	SHORT $LL29@sqlite3_ex@2
$LN25@sqlite3_ex@2:
; Line 50826
	mov	DWORD PTR _nCallback$[esp+40], ebp
; Line 50828
	mov	ebp, DWORD PTR [esi+544]
; Line 50829
	lea	edi, DWORD PTR [ebp*8+1]
	call	_sqlite3Malloc
; Line 50830
	test	eax, eax
	mov	DWORD PTR _azCols$[esp+40], eax
	je	$LN140@sqlite3_ex@2
	npad	1
$LL23@sqlite3_ex@2:
; Line 50836
	push	esi
	call	_sqlite3_step
	add	esp, 4
; Line 50840
	cmp	DWORD PTR _xCallback$[esp+36], 0
	mov	DWORD PTR _rc$[esp+40], eax
	je	$LN11@sqlite3_ex@2
	cmp	eax, 100				; 00000064H
	je	SHORT $LN20@sqlite3_ex@2
	cmp	eax, 101				; 00000065H
	jne	$LN11@sqlite3_ex@2
	cmp	DWORD PTR _nCallback$[esp+40], 0
	jne	$LN117@sqlite3_ex@2
	mov	edx, DWORD PTR _db$[esp+36]
	test	DWORD PTR [edx+8], 256			; 00000100H
	je	$LN117@sqlite3_ex@2
; Line 50841
	jmp	SHORT $LN118@sqlite3_ex@2
$LN20@sqlite3_ex@2:
	cmp	DWORD PTR _nCallback$[esp+40], 0
	jne	SHORT $LN136@sqlite3_ex@2
$LN118@sqlite3_ex@2:
; Line 50842
	xor	edi, edi
	test	ebp, ebp
	jle	SHORT $LN16@sqlite3_ex@2
$LL141@sqlite3_ex@2:
; Line 50843
	push	0
	push	OFFSET _sqlite3_value_text
	mov	edx, edi
	mov	ecx, esi
	call	_columnName
	mov	ecx, DWORD PTR _azCols$[esp+48]
	mov	DWORD PTR [ecx+edi*4], eax
	add	edi, 1
	add	esp, 8
	cmp	edi, ebp
	jl	SHORT $LL141@sqlite3_ex@2
; Line 50842
	mov	eax, DWORD PTR _rc$[esp+40]
$LN16@sqlite3_ex@2:
; Line 50847
	cmp	eax, 100				; 00000064H
	mov	DWORD PTR _nCallback$[esp+40], 1
	jne	SHORT $LN137@sqlite3_ex@2
$LN136@sqlite3_ex@2:
; Line 50848
	mov	edx, DWORD PTR _azCols$[esp+40]
	lea	ebx, DWORD PTR [edx+ebp*4]
; Line 50849
	xor	edi, edi
	test	ebp, ebp
	mov	DWORD PTR _azVals$96926[esp+40], ebx
	jle	SHORT $LN12@sqlite3_ex@2
$LL14@sqlite3_ex@2:
; Line 50850
	push	edi
	push	esi
	call	_sqlite3_column_text
	mov	DWORD PTR [ebx+edi*4], eax
	add	edi, 1
	add	esp, 8
	cmp	edi, ebp
	jl	SHORT $LL14@sqlite3_ex@2
; Line 50849
	jmp	SHORT $LN12@sqlite3_ex@2
$LN137@sqlite3_ex@2:
	mov	ebx, DWORD PTR _azVals$96926[esp+40]
$LN12@sqlite3_ex@2:
; Line 50853
	mov	eax, DWORD PTR _azCols$[esp+40]
	mov	ecx, DWORD PTR _pArg$[esp+36]
	push	eax
	push	ebx
	push	ebp
	push	ecx
	call	DWORD PTR _xCallback$[esp+52]
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN105@sqlite3_ex@2
	mov	eax, DWORD PTR _rc$[esp+40]
$LN11@sqlite3_ex@2:
; Line 50859
	cmp	eax, 100				; 00000064H
	je	$LL23@sqlite3_ex@2
$LN117@sqlite3_ex@2:
; Line 50860
	mov	eax, DWORD PTR [esi+76]
	xor	edi, edi
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN47@sqlite3_ex@2
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN47@sqlite3_ex@2
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN45@sqlite3_ex@2
	lea	eax, DWORD PTR [edi+21]
	jmp	SHORT $LN49@sqlite3_ex@2
$LN47@sqlite3_ex@2:
	mov	edi, esi
	call	_sqlite3VdbeReset
	mov	edi, eax
$LN45@sqlite3_ex@2:
	call	_sqlite3VdbeDelete
	mov	eax, edi
$LN49@sqlite3_ex@2:
; Line 50861
	xor	esi, esi
; Line 50862
	cmp	eax, 17					; 00000011H
	mov	ebx, eax
	je	SHORT $LN7@sqlite3_ex@2
; Line 50864
	mov	eax, DWORD PTR _zLeftover$[esp+40]
; Line 50865
	movzx	edx, BYTE PTR [eax]
	mov	edi, eax
	push	edx
	mov	DWORD PTR _nRetry$[esp+44], esi
	mov	DWORD PTR _zSql$[esp+40], edi
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@sqlite3_ex@2
	npad	4
$LL8@sqlite3_ex@2:
	movzx	eax, BYTE PTR [edi+1]
	add	edi, 1
	push	eax
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL8@sqlite3_ex@2
	mov	DWORD PTR _zSql$[esp+36], edi
$LN7@sqlite3_ex@2:
; Line 50871
	mov	ecx, DWORD PTR _azCols$[esp+40]
	push	ecx
	call	_free
	add	esp, 4
; Line 50872
	mov	DWORD PTR _azCols$[esp+40], esi
	xor	ebp, ebp
	jmp	$LL29@sqlite3_ex@2
$LN105@sqlite3_ex@2:
; Line 50854
	mov	ebx, 4
$LN140@sqlite3_ex@2:
	xor	ebp, ebp
$exec_out$96932:
; Line 50876
	cmp	esi, ebp
	je	SHORT $LN64@sqlite3_ex@2
	mov	eax, DWORD PTR [esi+76]
	cmp	eax, -1108210269			; bdf20da3H
	je	SHORT $LN62@sqlite3_ex@2
	cmp	eax, 1369188723				; 519c2973H
	je	SHORT $LN62@sqlite3_ex@2
	cmp	eax, 649915045				; 26bceaa5H
	je	SHORT $LN60@sqlite3_ex@2
	jmp	SHORT $LN64@sqlite3_ex@2
$LN62@sqlite3_ex@2:
	mov	edi, esi
	call	_sqlite3VdbeReset
$LN60@sqlite3_ex@2:
	call	_sqlite3VdbeDelete
$LN64@sqlite3_ex@2:
; Line 50877
	mov	eax, DWORD PTR _azCols$[esp+40]
	cmp	eax, ebp
	je	SHORT $LN69@sqlite3_ex@2
	push	eax
	call	_free
	add	esp, 4
$LN69@sqlite3_ex@2:
; Line 50879
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	mov	eax, ebx
	je	SHORT $LN134@sqlite3_ex@2
	cmp	DWORD PTR _inMutex, ebp
	jle	SHORT $LN134@sqlite3_ex@2
	sub	DWORD PTR _inMutex, 1
	push	ebp
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, ebp
	call	_sqlite3Error
	add	esp, 8
	mov	eax, 7
$LN134@sqlite3_ex@2:
	and	eax, 255				; 000000ffH
	mov	ecx, eax
	mov	DWORD PTR _rc$[esp+40], ecx
; Line 50880
	je	$LN4@sqlite3_ex@2
	mov	edi, DWORD PTR _db$[esp+36]
	cmp	edi, ebp
	je	SHORT $LN81@sqlite3_ex@2
	cmp	DWORD PTR _sqlite3_mallocHasFailed, ebp
	je	SHORT $LN82@sqlite3_ex@2
	cmp	DWORD PTR _inMutex, ebp
	jg	SHORT $LN81@sqlite3_ex@2
$LN82@sqlite3_ex@2:
	mov	eax, DWORD PTR [edi+48]
	cmp	eax, -1623446221			; 9f3c2d33H
	je	SHORT $LN80@sqlite3_ex@2
	cmp	eax, -1607883113			; a029a697H
	je	SHORT $LN80@sqlite3_ex@2
	cmp	eax, -264537850				; f03b7906H
	je	SHORT $LN80@sqlite3_ex@2
	mov	eax, 21					; 00000015H
	jmp	SHORT $LN83@sqlite3_ex@2
$LN80@sqlite3_ex@2:
	mov	eax, DWORD PTR [edi+16]
	and	eax, DWORD PTR [edi+12]
	jmp	SHORT $LN83@sqlite3_ex@2
$LN81@sqlite3_ex@2:
	mov	eax, 7
$LN83@sqlite3_ex@2:
	cmp	ecx, eax
	jne	SHORT $LN4@sqlite3_ex@2
	mov	ebx, DWORD PTR _pzErrMsg$[esp+36]
	cmp	ebx, ebp
	je	SHORT $LN143@sqlite3_ex@2
; Line 50881
	push	edi
	call	_sqlite3_errmsg
	add	esp, 4
	lea	edx, DWORD PTR [eax+1]
$LL126@sqlite3_ex@2:
	mov	cl, BYTE PTR [eax]
	add	eax, 1
	test	cl, cl
	jne	SHORT $LL126@sqlite3_ex@2
	sub	eax, edx
	lea	esi, DWORD PTR [eax+1]
; Line 50882
	cmp	esi, ebp
	jle	SHORT $LN93@sqlite3_ex@2
	push	esi
	call	_malloc
	add	esp, 4
	jmp	SHORT $LN94@sqlite3_ex@2
$LN93@sqlite3_ex@2:
	xor	eax, eax
$LN94@sqlite3_ex@2:
; Line 50883
	cmp	eax, ebp
	mov	DWORD PTR [ebx], eax
	je	SHORT $LN143@sqlite3_ex@2
; Line 50884
	push	esi
	push	edi
	call	_sqlite3_errmsg
	mov	edx, DWORD PTR [ebx]
	add	esp, 4
	push	eax
	push	edx
	call	_memcpy
; Line 50891
	mov	eax, DWORD PTR _rc$[esp+52]
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 50892
	add	esp, 24					; 00000018H
	ret	0
$LN4@sqlite3_ex@2:
; Line 50886
	mov	eax, DWORD PTR _pzErrMsg$[esp+36]
	cmp	eax, ebp
	je	SHORT $LN143@sqlite3_ex@2
; Line 50887
	mov	DWORD PTR [eax], ebp
$LN143@sqlite3_ex@2:
; Line 50891
	mov	eax, DWORD PTR _rc$[esp+40]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
; Line 50892
	add	esp, 24					; 00000018H
	ret	0
_sqlite3_exec ENDP
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT _sqlite3_get_table
_TEXT	SEGMENT
_res$ = -32						; size = 32
_db$ = 8						; size = 4
_zSql$ = 12						; size = 4
_pazResult$ = 16					; size = 4
_pnRow$ = 20						; size = 4
_pnColumn$ = 24						; size = 4
_pzErrMsg$ = 28						; size = 4
_sqlite3_get_table PROC					; COMDAT
; Line 57048
	mov	eax, DWORD PTR _pazResult$[esp-4]
	sub	esp, 32					; 00000020H
	push	ebp
	xor	ebp, ebp
	cmp	eax, ebp
	jne	SHORT $LN13@sqlite3_ge@3
	mov	eax, 1
	pop	ebp
; Line 57098
	add	esp, 32					; 00000020H
	ret	0
$LN13@sqlite3_ge@3:
; Line 57049
	mov	DWORD PTR [eax], ebp
; Line 57050
	mov	eax, DWORD PTR _pnColumn$[esp+32]
	cmp	eax, ebp
	je	SHORT $LN12@sqlite3_ge@3
	mov	DWORD PTR [eax], ebp
$LN12@sqlite3_ge@3:
; Line 57051
	mov	eax, DWORD PTR _pnRow$[esp+32]
	cmp	eax, ebp
	je	SHORT $LN11@sqlite3_ge@3
	mov	DWORD PTR [eax], ebp
$LN11@sqlite3_ge@3:
; Line 57059
	push	80					; 00000050H
	mov	DWORD PTR _res$[esp+44], ebp
	mov	DWORD PTR _res$[esp+48], ebp
	mov	DWORD PTR _res$[esp+56], ebp
	mov	DWORD PTR _res$[esp+60], ebp
	mov	DWORD PTR _res$[esp+64], 1
	mov	DWORD PTR _res$[esp+52], 20		; 00000014H
	mov	DWORD PTR _res$[esp+68], ebp
	call	_malloc
	add	esp, 4
; Line 57060
	cmp	eax, ebp
	mov	DWORD PTR _res$[esp+36], eax
	jne	SHORT $LN10@sqlite3_ge@3
	mov	eax, 7
	pop	ebp
; Line 57098
	add	esp, 32					; 00000020H
	ret	0
$LN10@sqlite3_ge@3:
; Line 57062
	mov	ecx, DWORD PTR _zSql$[esp+32]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _pzErrMsg$[esp+40]
	push	edi
	mov	edi, DWORD PTR _db$[esp+44]
	push	esi
	mov	DWORD PTR [eax], ebp
	lea	eax, DWORD PTR _res$[esp+52]
	push	eax
	push	OFFSET _sqlite3_get_table_cb
	push	ecx
	push	edi
	call	_sqlite3_exec
	mov	ebx, eax
; Line 57063
	mov	eax, DWORD PTR _res$[esp+68]
	add	esp, 20					; 00000014H
	cmp	eax, ebp
	je	SHORT $LN9@sqlite3_ge@3
; Line 57065
	mov	edx, DWORD PTR _res$[esp+72]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _res$[esp+48]
$LN9@sqlite3_ge@3:
; Line 57067
	cmp	bl, 4
	jne	SHORT $LN8@sqlite3_ge@3
; Line 57068
	add	eax, 4
	push	eax
	call	_sqlite3_free_table
; Line 57069
	mov	eax, DWORD PTR _res$[esp+56]
	add	esp, 4
	cmp	eax, ebp
	je	SHORT $LN25@sqlite3_ge@3
; Line 57070
	cmp	esi, ebp
	je	SHORT $LN6@sqlite3_ge@3
; Line 57071
	mov	eax, DWORD PTR [esi]
	push	eax
	call	_sqlite3_free
; Line 57072
	mov	ecx, DWORD PTR _res$[esp+56]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	call	_sqlite3_mprintf
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR _res$[esp+64]
	add	esp, 12					; 0000000cH
$LN6@sqlite3_ge@3:
; Line 57074
	cmp	eax, ebp
	je	SHORT $LN25@sqlite3_ge@3
	push	eax
	call	_free
	add	esp, 4
$LN25@sqlite3_ge@3:
; Line 57076
	mov	ecx, DWORD PTR _res$[esp+76]
; Line 57077
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [edi+12], ecx
	pop	edi
	pop	esi
	pop	ebx
	and	eax, ecx
	pop	ebp
; Line 57098
	add	esp, 32					; 00000020H
	ret	0
$LN8@sqlite3_ge@3:
; Line 57079
	mov	ecx, DWORD PTR _res$[esp+52]
	cmp	ecx, ebp
	je	SHORT $LN30@sqlite3_ge@3
	push	ecx
	call	_free
	mov	eax, DWORD PTR _res$[esp+52]
	add	esp, 4
$LN30@sqlite3_ge@3:
; Line 57080
	cmp	ebx, ebp
	je	SHORT $LN5@sqlite3_ge@3
; Line 57081
	add	eax, 4
	push	eax
	call	_sqlite3_free_table
; Line 57082
	mov	eax, DWORD PTR [edi+16]
	add	esp, 4
	pop	edi
	pop	esi
	and	eax, ebx
	pop	ebx
	pop	ebp
; Line 57098
	add	esp, 32					; 00000020H
	ret	0
$LN5@sqlite3_ge@3:
; Line 57084
	mov	ecx, DWORD PTR _res$[esp+72]
	cmp	DWORD PTR _res$[esp+60], ecx
	jle	SHORT $LN3@sqlite3_ge@3
; Line 57086
	lea	edx, DWORD PTR [ecx*4+4]
	push	edx
	push	eax
	call	_sqlite3_realloc
	add	esp, 8
; Line 57087
	cmp	eax, ebp
	jne	SHORT $LN3@sqlite3_ge@3
; Line 57088
	mov	eax, DWORD PTR _res$[esp+48]
	add	eax, 4
	push	eax
	call	_sqlite3_free_table
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
; Line 57089
	mov	eax, 7
	pop	ebp
; Line 57098
	add	esp, 32					; 00000020H
	ret	0
$LN3@sqlite3_ge@3:
; Line 57094
	mov	ecx, DWORD PTR _pazResult$[esp+44]
	add	eax, 4
	mov	DWORD PTR [ecx], eax
; Line 57095
	mov	eax, DWORD PTR _pnColumn$[esp+44]
	cmp	eax, ebp
	je	SHORT $LN2@sqlite3_ge@3
	mov	edx, DWORD PTR _res$[esp+68]
	mov	DWORD PTR [eax], edx
$LN2@sqlite3_ge@3:
; Line 57096
	mov	eax, DWORD PTR _pnRow$[esp+44]
	cmp	eax, ebp
	je	SHORT $LN1@sqlite3_ge@3
	mov	ecx, DWORD PTR _res$[esp+64]
	mov	DWORD PTR [eax], ecx
$LN1@sqlite3_ge@3:
	pop	edi
	pop	esi
	pop	ebx
; Line 57097
	xor	eax, eax
	pop	ebp
; Line 57098
	add	esp, 32					; 00000020H
	ret	0
_sqlite3_get_table ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@NLBFJAPJ@PRAGMA?5encoding?5?$DN?5?8UTF?916?8?$AA@ ; `string'
;	COMDAT ??_C@_0BL@NLBFJAPJ@PRAGMA?5encoding?5?$DN?5?8UTF?916?8?$AA@
CONST	SEGMENT
??_C@_0BL@NLBFJAPJ@PRAGMA?5encoding?5?$DN?5?8UTF?916?8?$AA@ DB 'PRAGMA en'
	DB	'coding = ''UTF-16''', 00H			; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT _sqlite3_open16
_TEXT	SEGMENT
_zFilename$ = 8						; size = 4
_ppDb$ = 12						; size = 4
_sqlite3_open16 PROC					; COMDAT
; Line 67105
	push	ebx
	push	ebp
	push	esi
	push	edi
; Line 67112
	mov	edi, DWORD PTR _ppDb$[esp+12]
	xor	ebp, ebp
	mov	DWORD PTR [edi], ebp
; Line 67113
	call	_sqlite3ValueNew
	mov	esi, eax
; Line 67114
	test	esi, esi
	je	SHORT $LN62@sqlite3_op
	push	esi
	call	_sqlite3VdbeMemRelease
	mov	ebx, DWORD PTR _zFilename$[esp+16]
	add	esp, 4
	test	ebx, ebx
	jne	SHORT $LN22@sqlite3_op
	mov	WORD PTR [esi+24], 1
	mov	BYTE PTR [esi+26], 5
	jmp	SHORT $LN62@sqlite3_op
$LN22@sqlite3_op:
	or	edi, -1
	mov	DWORD PTR [esi+16], ebx
	mov	BYTE PTR [esi+27], 2
	mov	BYTE PTR [esi+26], 3
	mov	DWORD PTR [esi+20], edi
	mov	WORD PTR [esi+24], 130			; 00000082H
	call	_sqlite3Utf16ByteLen
	mov	ecx, esi
	mov	DWORD PTR [esi+20], eax
	mov	WORD PTR [esi+24], 162			; 000000a2H
	call	_sqlite3VdbeMemHandleBom
	test	eax, eax
	jne	SHORT $LN63@sqlite3_op
	test	WORD PTR [esi+24], 256			; 00000100H
	je	SHORT $LN63@sqlite3_op
	mov	eax, esi
	call	_sqlite3VdbeMemMakeWriteable
$LN63@sqlite3_op:
	mov	edi, DWORD PTR _ppDb$[esp+12]
$LN62@sqlite3_op:
; Line 67115
	mov	ebx, 1
	mov	al, bl
	mov	ecx, esi
	call	_sqlite3ValueText
; Line 67116
	test	eax, eax
	je	SHORT $LN64@sqlite3_op
; Line 67117
	push	edi
	push	eax
	call	_openDatabase
	mov	ebp, eax
	add	esp, 8
; Line 67118
	test	ebp, ebp
	jne	SHORT $LN64@sqlite3_op
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN64@sqlite3_op
; Line 67119
	push	ebp
	push	ebp
	push	ebp
	push	OFFSET ??_C@_0BL@NLBFJAPJ@PRAGMA?5encoding?5?$DN?5?8UTF?916?8?$AA@
	push	eax
	call	_sqlite3_exec
	mov	ebp, eax
	add	esp, 20					; 00000014H
; Line 67120
	test	ebp, ebp
	je	SHORT $LN64@sqlite3_op
; Line 67121
	mov	eax, DWORD PTR [edi]
	push	eax
	call	_sqlite3_close
	add	esp, 4
; Line 67122
	mov	DWORD PTR [edi], 0
$LN64@sqlite3_op:
; Line 67126
	test	esi, esi
	je	SHORT $LN50@sqlite3_op
	push	esi
	call	_sqlite3VdbeMemRelease
	push	esi
	mov	WORD PTR [esi+24], bx
	mov	BYTE PTR [esi+26], 5
	call	_free
	add	esp, 8
$LN50@sqlite3_op:
; Line 67128
	cmp	DWORD PTR _sqlite3_mallocHasFailed, 0
	je	SHORT $LN52@sqlite3_op
	cmp	DWORD PTR _inMutex, 0
	jle	SHORT $LN52@sqlite3_op
	sub	DWORD PTR _inMutex, ebx
	push	0
	push	7
	xor	eax, eax
	mov	DWORD PTR _sqlite3_mallocHasFailed, 0
	call	_sqlite3Error
	add	esp, 8
	mov	ebp, 7
$LN52@sqlite3_op:
	pop	edi
	pop	esi
	mov	eax, ebp
	pop	ebp
	and	eax, 255				; 000000ffH
	pop	ebx
; Line 67129
	ret	0
_sqlite3_open16 ENDP
_TEXT	ENDS
END
